
Catch-Robo2023BYn622.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017f90  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fac  08018190  08018190  00028190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b13c  0801b13c  000301d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801b13c  0801b13c  0002b13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b144  0801b144  000301d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b144  0801b144  0002b144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b148  0801b148  0002b148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0801b14c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000094  0801b1e0  00030094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000134  0801b280  00030134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00010fbc  200001d4  0801b320  000301d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20011190  0801b320  00031190  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003abc3  00000000  00000000  00030202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000084d3  00000000  00000000  0006adc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002a88  00000000  00000000  00073298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000028d0  00000000  00000000  00075d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037131  00000000  00000000  000785f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00041f13  00000000  00000000  000af721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001276e8  00000000  00000000  000f1634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00218d1c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000ba60  00000000  00000000  00218d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	08018178 	.word	0x08018178

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	08018178 	.word	0x08018178

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <PushTx8Bytes>:
CANTxBuf buffer[CAN_TXBUFFER_SIZE];
uint32_t readpoint = 0;
uint32_t writepoint = 0;
uint8_t isfull = 0;

HAL_StatusTypeDef PushTx8Bytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){
 80005e4:	b480      	push	{r7}
 80005e6:	b087      	sub	sp, #28
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
	buffer[writepoint].DLC = size;
 80005f0:	4b24      	ldr	r3, [pc, #144]	; (8000684 <PushTx8Bytes+0xa0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a24      	ldr	r2, [pc, #144]	; (8000688 <PushTx8Bytes+0xa4>)
 80005f6:	011b      	lsls	r3, r3, #4
 80005f8:	4413      	add	r3, r2
 80005fa:	3304      	adds	r3, #4
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	601a      	str	r2, [r3, #0]
	buffer[writepoint].ExtId = ExtId;
 8000600:	4b20      	ldr	r3, [pc, #128]	; (8000684 <PushTx8Bytes+0xa0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a20      	ldr	r2, [pc, #128]	; (8000688 <PushTx8Bytes+0xa4>)
 8000606:	011b      	lsls	r3, r3, #4
 8000608:	4413      	add	r3, r2
 800060a:	68fa      	ldr	r2, [r7, #12]
 800060c:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++)buffer[writepoint].bytes[i] = bytes[i];
 800060e:	2300      	movs	r3, #0
 8000610:	75fb      	strb	r3, [r7, #23]
 8000612:	e010      	b.n	8000636 <PushTx8Bytes+0x52>
 8000614:	7dfb      	ldrb	r3, [r7, #23]
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	18d1      	adds	r1, r2, r3
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <PushTx8Bytes+0xa0>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	7dfb      	ldrb	r3, [r7, #23]
 8000620:	7808      	ldrb	r0, [r1, #0]
 8000622:	4919      	ldr	r1, [pc, #100]	; (8000688 <PushTx8Bytes+0xa4>)
 8000624:	0112      	lsls	r2, r2, #4
 8000626:	440a      	add	r2, r1
 8000628:	4413      	add	r3, r2
 800062a:	3308      	adds	r3, #8
 800062c:	4602      	mov	r2, r0
 800062e:	701a      	strb	r2, [r3, #0]
 8000630:	7dfb      	ldrb	r3, [r7, #23]
 8000632:	3301      	adds	r3, #1
 8000634:	75fb      	strb	r3, [r7, #23]
 8000636:	7dfb      	ldrb	r3, [r7, #23]
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	429a      	cmp	r2, r3
 800063c:	d8ea      	bhi.n	8000614 <PushTx8Bytes+0x30>

	if (isfull == 1)readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <PushTx8Bytes+0xa8>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d106      	bne.n	8000654 <PushTx8Bytes+0x70>
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <PushTx8Bytes+0xac>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	3301      	adds	r3, #1
 800064c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000650:	4a0f      	ldr	r2, [pc, #60]	; (8000690 <PushTx8Bytes+0xac>)
 8000652:	6013      	str	r3, [r2, #0]
	writepoint = (writepoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000654:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <PushTx8Bytes+0xa0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	3301      	adds	r3, #1
 800065a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800065e:	4a09      	ldr	r2, [pc, #36]	; (8000684 <PushTx8Bytes+0xa0>)
 8000660:	6013      	str	r3, [r2, #0]

	if (writepoint == readpoint){
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <PushTx8Bytes+0xa0>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <PushTx8Bytes+0xac>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	429a      	cmp	r2, r3
 800066c:	d102      	bne.n	8000674 <PushTx8Bytes+0x90>
		isfull = 1;
 800066e:	4b07      	ldr	r3, [pc, #28]	; (800068c <PushTx8Bytes+0xa8>)
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]
	}

	return HAL_OK;
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	371c      	adds	r7, #28
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	200024c8 	.word	0x200024c8
 8000688:	200004c4 	.word	0x200004c4
 800068c:	200024cc 	.word	0x200024cc
 8000690:	200024c4 	.word	0x200024c4

08000694 <PopSendTx8Bytes>:

HAL_StatusTypeDef PopSendTx8Bytes(){
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;

	txHeader.RTR = CAN_RTR_DATA; // Data frame
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
	txHeader.IDE = CAN_ID_EXT;	 // CAN Extend ID
 800069e:	2304      	movs	r3, #4
 80006a0:	60fb      	str	r3, [r7, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	763b      	strb	r3, [r7, #24]

	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 80006a6:	e035      	b.n	8000714 <PopSendTx8Bytes+0x80>
		if (isfull == 0 && readpoint == writepoint)break;
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <PopSendTx8Bytes+0xa0>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d105      	bne.n	80006bc <PopSendTx8Bytes+0x28>
 80006b0:	4b21      	ldr	r3, [pc, #132]	; (8000738 <PopSendTx8Bytes+0xa4>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b21      	ldr	r3, [pc, #132]	; (800073c <PopSendTx8Bytes+0xa8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d034      	beq.n	8000726 <PopSendTx8Bytes+0x92>

		txHeader.DLC = buffer[readpoint].DLC;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <PopSendTx8Bytes+0xa4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a1f      	ldr	r2, [pc, #124]	; (8000740 <PopSendTx8Bytes+0xac>)
 80006c2:	011b      	lsls	r3, r3, #4
 80006c4:	4413      	add	r3, r2
 80006c6:	3304      	adds	r3, #4
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	617b      	str	r3, [r7, #20]
		txHeader.ExtId = buffer[readpoint].ExtId;
 80006cc:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <PopSendTx8Bytes+0xa4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a1b      	ldr	r2, [pc, #108]	; (8000740 <PopSendTx8Bytes+0xac>)
 80006d2:	011b      	lsls	r3, r3, #4
 80006d4:	4413      	add	r3, r2
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	60bb      	str	r3, [r7, #8]

		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, buffer[readpoint].bytes, &txMailbox);
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <PopSendTx8Bytes+0xb0>)
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	4b16      	ldr	r3, [pc, #88]	; (8000738 <PopSendTx8Bytes+0xa4>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	011b      	lsls	r3, r3, #4
 80006e4:	3308      	adds	r3, #8
 80006e6:	4a16      	ldr	r2, [pc, #88]	; (8000740 <PopSendTx8Bytes+0xac>)
 80006e8:	441a      	add	r2, r3
 80006ea:	463b      	mov	r3, r7
 80006ec:	1d39      	adds	r1, r7, #4
 80006ee:	f002 f84b 	bl	8002788 <HAL_CAN_AddTxMessage>
 80006f2:	4603      	mov	r3, r0
 80006f4:	77fb      	strb	r3, [r7, #31]
		if (ret != HAL_OK)return ret;
 80006f6:	7ffb      	ldrb	r3, [r7, #31]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <PopSendTx8Bytes+0x6c>
 80006fc:	7ffb      	ldrb	r3, [r7, #31]
 80006fe:	e014      	b.n	800072a <PopSendTx8Bytes+0x96>

		readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000700:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <PopSendTx8Bytes+0xa4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	3301      	adds	r3, #1
 8000706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800070a:	4a0b      	ldr	r2, [pc, #44]	; (8000738 <PopSendTx8Bytes+0xa4>)
 800070c:	6013      	str	r3, [r2, #0]
		isfull = 0;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <PopSendTx8Bytes+0xa0>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <PopSendTx8Bytes+0xb0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f002 f905 	bl	8002928 <HAL_CAN_GetTxMailboxesFreeLevel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d1c1      	bne.n	80006a8 <PopSendTx8Bytes+0x14>
 8000724:	e000      	b.n	8000728 <PopSendTx8Bytes+0x94>
		if (isfull == 0 && readpoint == writepoint)break;
 8000726:	bf00      	nop
	}

	return HAL_OK;
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	3720      	adds	r7, #32
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200024cc 	.word	0x200024cc
 8000738:	200024c4 	.word	0x200024c4
 800073c:	200024c8 	.word	0x200024c8
 8000740:	200004c4 	.word	0x200004c4
 8000744:	200001f0 	.word	0x200001f0

08000748 <WhenTxMailbox0_1_2CompleteCallbackCalled>:

void WhenTxMailbox0_1_2CompleteCallbackCalled(){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 800074c:	f7ff ffa2 	bl	8000694 <PopSendTx8Bytes>
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}

08000754 <WhenTxMailbox0_1_2AbortCallbackCalled>:

void WhenTxMailbox0_1_2AbortCallbackCalled(){
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 8000758:	f7ff ff9c 	bl	8000694 <PopSendTx8Bytes>
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <WhenCANRxFifo0MsgPending>:

void WhenCANRxFifo0MsgPending(CAN_HandleTypeDef *phcan, NUM_OF_DEVICES *num_of){ // Fifo0MsgPendingで呼び出すこと. CAN受信時に呼び出される関数
 8000760:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000764:	b08e      	sub	sp, #56	; 0x38
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
 800076a:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_CAN_GetRxMessage(phcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK){
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	f107 0218 	add.w	r2, r7, #24
 8000774:	2100      	movs	r1, #0
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f002 f90b 	bl	8002992 <HAL_CAN_GetRxMessage>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d004      	beq.n	800078c <WhenCANRxFifo0MsgPending+0x2c>
		// Reception Error
		printf("GetRxMessage error\n\r");
 8000782:	486e      	ldr	r0, [pc, #440]	; (800093c <WhenCANRxFifo0MsgPending+0x1dc>)
 8000784:	f016 fc32 	bl	8016fec <iprintf>
		Error_Handler();
 8000788:	f001 f898 	bl	80018bc <Error_Handler>
	}
	// awakeコマンドを受信した場合
	CAN_Device can_device = Extract_CAN_Device(rxHeader.ExtId);
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	2200      	movs	r2, #0
 8000790:	4698      	mov	r8, r3
 8000792:	4691      	mov	r9, r2
 8000794:	4640      	mov	r0, r8
 8000796:	4649      	mov	r1, r9
 8000798:	f000 fd18 	bl	80011cc <Extract_CAN_Device>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	733a      	strb	r2, [r7, #12]
 80007a2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80007a6:	737a      	strb	r2, [r7, #13]
 80007a8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80007ac:	73bb      	strb	r3, [r7, #14]
	uint8_t extracted_cmd = Extract_CAN_CMD(rxHeader.ExtId);
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	2200      	movs	r2, #0
 80007b2:	461c      	mov	r4, r3
 80007b4:	4615      	mov	r5, r2
 80007b6:	4620      	mov	r0, r4
 80007b8:	4629      	mov	r1, r5
 80007ba:	f000 fd53 	bl	8001264 <Extract_CAN_CMD>
 80007be:	4603      	mov	r3, r0
 80007c0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(extracted_cmd == AWAKE_CMD){
 80007c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d139      	bne.n	8000840 <WhenCANRxFifo0MsgPending+0xe0>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 80007cc:	2300      	movs	r3, #0
 80007ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80007d2:	e013      	b.n	80007fc <WhenCANRxFifo0MsgPending+0x9c>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 80007d4:	7b3b      	ldrb	r3, [r7, #12]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80007dc:	4958      	ldr	r1, [pc, #352]	; (8000940 <WhenCANRxFifo0MsgPending+0x1e0>)
 80007de:	4603      	mov	r3, r0
 80007e0:	00db      	lsls	r3, r3, #3
 80007e2:	1a1b      	subs	r3, r3, r0
 80007e4:	440b      	add	r3, r1
 80007e6:	4413      	add	r3, r2
 80007e8:	781a      	ldrb	r2, [r3, #0]
 80007ea:	7c3b      	ldrb	r3, [r7, #16]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	f000 80a0 	beq.w	8000932 <WhenCANRxFifo0MsgPending+0x1d2>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 80007f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007f6:	3301      	adds	r3, #1
 80007f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80007fc:	7b3b      	ldrb	r3, [r7, #12]
 80007fe:	461a      	mov	r2, r3
 8000800:	4b50      	ldr	r3, [pc, #320]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000802:	5c9b      	ldrb	r3, [r3, r2]
 8000804:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000808:	429a      	cmp	r2, r3
 800080a:	d3e3      	bcc.n	80007d4 <WhenCANRxFifo0MsgPending+0x74>
		}
		node_id_list[can_device.node_type][num_detected[can_device.node_type]] = rxData[0];
 800080c:	7b3b      	ldrb	r3, [r7, #12]
 800080e:	4619      	mov	r1, r3
 8000810:	7b3b      	ldrb	r3, [r7, #12]
 8000812:	461a      	mov	r2, r3
 8000814:	4b4b      	ldr	r3, [pc, #300]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000816:	5c9b      	ldrb	r3, [r3, r2]
 8000818:	461c      	mov	r4, r3
 800081a:	7c38      	ldrb	r0, [r7, #16]
 800081c:	4a48      	ldr	r2, [pc, #288]	; (8000940 <WhenCANRxFifo0MsgPending+0x1e0>)
 800081e:	460b      	mov	r3, r1
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	1a5b      	subs	r3, r3, r1
 8000824:	4413      	add	r3, r2
 8000826:	4423      	add	r3, r4
 8000828:	4602      	mov	r2, r0
 800082a:	701a      	strb	r2, [r3, #0]
		num_detected[can_device.node_type] += 1;
 800082c:	7b3b      	ldrb	r3, [r7, #12]
 800082e:	461a      	mov	r2, r3
 8000830:	4b44      	ldr	r3, [pc, #272]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000832:	5c9b      	ldrb	r3, [r3, r2]
 8000834:	7b3a      	ldrb	r2, [r7, #12]
 8000836:	3301      	adds	r3, #1
 8000838:	b2d9      	uxtb	r1, r3
 800083a:	4b42      	ldr	r3, [pc, #264]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 800083c:	5499      	strb	r1, [r3, r2]
 800083e:	e04a      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
	}else if(extracted_cmd == FB_CMD){
 8000840:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000844:	2b01      	cmp	r3, #1
 8000846:	d146      	bne.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
		if (can_device.node_type == NODE_MCMD1){
 8000848:	7b3b      	ldrb	r3, [r7, #12]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d10d      	bne.n	800086a <WhenCANRxFifo0MsgPending+0x10a>
			memcpy(&(_feedback_table_mcmd1[can_device.node_id].feedback_motor[can_device.device_num]),
 800084e:	7b7b      	ldrb	r3, [r7, #13]
 8000850:	7bba      	ldrb	r2, [r7, #14]
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	4413      	add	r3, r2
 8000856:	00db      	lsls	r3, r3, #3
 8000858:	4a3b      	ldr	r2, [pc, #236]	; (8000948 <WhenCANRxFifo0MsgPending+0x1e8>)
 800085a:	4413      	add	r3, r2
 800085c:	461a      	mov	r2, r3
 800085e:	f107 0310 	add.w	r3, r7, #16
 8000862:	cb03      	ldmia	r3!, {r0, r1}
 8000864:	6010      	str	r0, [r2, #0]
 8000866:	6051      	str	r1, [r2, #4]
 8000868:	e035      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
                   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD2){
 800086a:	7b3b      	ldrb	r3, [r7, #12]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d10d      	bne.n	800088c <WhenCANRxFifo0MsgPending+0x12c>
			memcpy(&(_feedback_table_mcmd2[can_device.node_id].feedback_motor[can_device.device_num]),
 8000870:	7b7b      	ldrb	r3, [r7, #13]
 8000872:	7bba      	ldrb	r2, [r7, #14]
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	4413      	add	r3, r2
 8000878:	00db      	lsls	r3, r3, #3
 800087a:	4a34      	ldr	r2, [pc, #208]	; (800094c <WhenCANRxFifo0MsgPending+0x1ec>)
 800087c:	4413      	add	r3, r2
 800087e:	461a      	mov	r2, r3
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	cb03      	ldmia	r3!, {r0, r1}
 8000886:	6010      	str	r0, [r2, #0]
 8000888:	6051      	str	r1, [r2, #4]
 800088a:	e024      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD3){
 800088c:	7b3b      	ldrb	r3, [r7, #12]
 800088e:	2b03      	cmp	r3, #3
 8000890:	d10d      	bne.n	80008ae <WhenCANRxFifo0MsgPending+0x14e>
			memcpy(&(_feedback_table_mcmd3[can_device.node_id].feedback_motor[can_device.device_num]),
 8000892:	7b7b      	ldrb	r3, [r7, #13]
 8000894:	7bba      	ldrb	r2, [r7, #14]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	4413      	add	r3, r2
 800089a:	00db      	lsls	r3, r3, #3
 800089c:	4a2c      	ldr	r2, [pc, #176]	; (8000950 <WhenCANRxFifo0MsgPending+0x1f0>)
 800089e:	4413      	add	r3, r2
 80008a0:	461a      	mov	r2, r3
 80008a2:	f107 0310 	add.w	r3, r7, #16
 80008a6:	cb03      	ldmia	r3!, {r0, r1}
 80008a8:	6010      	str	r0, [r2, #0]
 80008aa:	6051      	str	r1, [r2, #4]
 80008ac:	e013      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD4){
 80008ae:	7b3b      	ldrb	r3, [r7, #12]
 80008b0:	2b06      	cmp	r3, #6
 80008b2:	d10d      	bne.n	80008d0 <WhenCANRxFifo0MsgPending+0x170>
			memcpy(&(_feedback_table_mcmd4[can_device.node_id].feedback_motor[can_device.device_num]),
 80008b4:	7b7b      	ldrb	r3, [r7, #13]
 80008b6:	7bba      	ldrb	r2, [r7, #14]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	4413      	add	r3, r2
 80008bc:	00db      	lsls	r3, r3, #3
 80008be:	4a25      	ldr	r2, [pc, #148]	; (8000954 <WhenCANRxFifo0MsgPending+0x1f4>)
 80008c0:	4413      	add	r3, r2
 80008c2:	461a      	mov	r2, r3
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	cb03      	ldmia	r3!, {r0, r1}
 80008ca:	6010      	str	r0, [r2, #0]
 80008cc:	6051      	str	r1, [r2, #4]
 80008ce:	e002      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else{
			printf("Error\n\r");
 80008d0:	4821      	ldr	r0, [pc, #132]	; (8000958 <WhenCANRxFifo0MsgPending+0x1f8>)
 80008d2:	f016 fb8b 	bl	8016fec <iprintf>
		}
	}else{

    }
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 80008d6:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 80008d8:	785a      	ldrb	r2, [r3, #1]
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	429a      	cmp	r2, r3
 80008e0:	d128      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 80008e4:	789a      	ldrb	r2, [r3, #2]
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	785b      	ldrb	r3, [r3, #1]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d122      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 80008f0:	78da      	ldrb	r2, [r3, #3]
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	789b      	ldrb	r3, [r3, #2]
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d11c      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 80008fc:	791a      	ldrb	r2, [r3, #4]
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	78db      	ldrb	r3, [r3, #3]
 8000902:	429a      	cmp	r2, r3
 8000904:	d116      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000908:	795a      	ldrb	r2, [r3, #5]
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	791b      	ldrb	r3, [r3, #4]
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 800090e:	429a      	cmp	r2, r3
 8000910:	d110      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000914:	799a      	ldrb	r2, [r3, #6]
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	795b      	ldrb	r3, [r3, #5]
 800091a:	429a      	cmp	r2, r3
 800091c:	d10a      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000920:	7a1a      	ldrb	r2, [r3, #8]
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	799b      	ldrb	r3, [r3, #6]
 8000926:	429a      	cmp	r2, r3
 8000928:	d104      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		all_node_detected = 1;
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <WhenCANRxFifo0MsgPending+0x1fc>)
 800092c:	2201      	movs	r2, #1
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	e000      	b.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000932:	bf00      	nop
	}
}
 8000934:	3738      	adds	r7, #56	; 0x38
 8000936:	46bd      	mov	sp, r7
 8000938:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800093c:	08018190 	.word	0x08018190
 8000940:	20000204 	.word	0x20000204
 8000944:	200001f8 	.word	0x200001f8
 8000948:	20000244 	.word	0x20000244
 800094c:	200002e4 	.word	0x200002e4
 8000950:	20000384 	.word	0x20000384
 8000954:	20000424 	.word	0x20000424
 8000958:	080181a8 	.word	0x080181a8
 800095c:	200001f4 	.word	0x200001f4

08000960 <SendBytes>:

HAL_StatusTypeDef SendBytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){ // 命令を送信する関数
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
	uint32_t quotient = size / 8;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	08db      	lsrs	r3, r3, #3
 8000970:	61bb      	str	r3, [r7, #24]
	uint32_t remainder = size - (8 * quotient);
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef ret;

	for (uint8_t i = 0; i < quotient; i++){
 800097c:	2300      	movs	r3, #0
 800097e:	77fb      	strb	r3, [r7, #31]
 8000980:	e015      	b.n	80009ae <SendBytes+0x4e>
		ret = PushTx8Bytes(ExtId, bytes + i * 8, 8);
 8000982:	7ffb      	ldrb	r3, [r7, #31]
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	461a      	mov	r2, r3
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	4413      	add	r3, r2
 800098c:	2208      	movs	r2, #8
 800098e:	4619      	mov	r1, r3
 8000990:	68f8      	ldr	r0, [r7, #12]
 8000992:	f7ff fe27 	bl	80005e4 <PushTx8Bytes>
 8000996:	4603      	mov	r3, r0
 8000998:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 800099a:	7cfb      	ldrb	r3, [r7, #19]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d003      	beq.n	80009a8 <SendBytes+0x48>
			Error_Handler();
 80009a0:	f000 ff8c 	bl	80018bc <Error_Handler>
			return ret;
 80009a4:	7cfb      	ldrb	r3, [r7, #19]
 80009a6:	e027      	b.n	80009f8 <SendBytes+0x98>
	for (uint8_t i = 0; i < quotient; i++){
 80009a8:	7ffb      	ldrb	r3, [r7, #31]
 80009aa:	3301      	adds	r3, #1
 80009ac:	77fb      	strb	r3, [r7, #31]
 80009ae:	7ffb      	ldrb	r3, [r7, #31]
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d8e5      	bhi.n	8000982 <SendBytes+0x22>
		}
	}

	if(remainder != 0){
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d011      	beq.n	80009e0 <SendBytes+0x80>
		ret = PushTx8Bytes(ExtId, bytes + quotient * 8, remainder);
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	00db      	lsls	r3, r3, #3
 80009c0:	68ba      	ldr	r2, [r7, #8]
 80009c2:	4413      	add	r3, r2
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	4619      	mov	r1, r3
 80009c8:	68f8      	ldr	r0, [r7, #12]
 80009ca:	f7ff fe0b 	bl	80005e4 <PushTx8Bytes>
 80009ce:	4603      	mov	r3, r0
 80009d0:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 80009d2:	7cfb      	ldrb	r3, [r7, #19]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d003      	beq.n	80009e0 <SendBytes+0x80>
			Error_Handler();
 80009d8:	f000 ff70 	bl	80018bc <Error_Handler>
			return ret;
 80009dc:	7cfb      	ldrb	r3, [r7, #19]
 80009de:	e00b      	b.n	80009f8 <SendBytes+0x98>
		}
	}

	ret = PopSendTx8Bytes();
 80009e0:	f7ff fe58 	bl	8000694 <PopSendTx8Bytes>
 80009e4:	4603      	mov	r3, r0
 80009e6:	74fb      	strb	r3, [r7, #19]
	if (ret != HAL_OK){
 80009e8:	7cfb      	ldrb	r3, [r7, #19]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d003      	beq.n	80009f6 <SendBytes+0x96>
		Error_Handler();
 80009ee:	f000 ff65 	bl	80018bc <Error_Handler>
		return ret;
 80009f2:	7cfb      	ldrb	r3, [r7, #19]
 80009f4:	e000      	b.n	80009f8 <SendBytes+0x98>
	}

	return HAL_OK;
 80009f6:	2300      	movs	r3, #0
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3720      	adds	r7, #32
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <CAN_SystemInit>:
 * @brief CANのシステムをアクティベートする. 具体的にはメッセージフィルターの設定とhal_can_start.
 *
 * @param _hcan
 * @param can_param
 */
void CAN_SystemInit(CAN_HandleTypeDef *_hcan){ // CANの初期化
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08e      	sub	sp, #56	; 0x38
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	phcan = _hcan;
 8000a08:	4a09      	ldr	r2, [pc, #36]	; (8000a30 <CAN_SystemInit+0x30>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6013      	str	r3, [r2, #0]

	all_node_detected = 0;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <CAN_SystemInit+0x34>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000a14:	2300      	movs	r3, #0
 8000a16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000a1a:	e029      	b.n	8000a70 <CAN_SystemInit+0x70>
		num_detected[type] = 0;
 8000a1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a20:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <CAN_SystemInit+0x38>)
 8000a22:	2100      	movs	r1, #0
 8000a24:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 0b111; i++){
 8000a26:	2300      	movs	r3, #0
 8000a28:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000a2c:	e017      	b.n	8000a5e <CAN_SystemInit+0x5e>
 8000a2e:	bf00      	nop
 8000a30:	200001f0 	.word	0x200001f0
 8000a34:	200001f4 	.word	0x200001f4
 8000a38:	200001f8 	.word	0x200001f8
			node_id_list[type][i] = 0xff;
 8000a3c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000a40:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8000a44:	48d7      	ldr	r0, [pc, #860]	; (8000da4 <CAN_SystemInit+0x3a4>)
 8000a46:	4613      	mov	r3, r2
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	1a9b      	subs	r3, r3, r2
 8000a4c:	4403      	add	r3, r0
 8000a4e:	440b      	add	r3, r1
 8000a50:	22ff      	movs	r2, #255	; 0xff
 8000a52:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 0b111; i++){
 8000a54:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000a58:	3301      	adds	r3, #1
 8000a5a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000a5e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d9ea      	bls.n	8000a3c <CAN_SystemInit+0x3c>
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000a66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000a70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a74:	2b08      	cmp	r3, #8
 8000a76:	d9d1      	bls.n	8000a1c <CAN_SystemInit+0x1c>
		}
	}

	//フィルタバンク設定
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000a84:	2301      	movs	r3, #1
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.SlaveStartFilterBank = 14;
 8000a88:	230e      	movs	r3, #14
 8000a8a:	633b      	str	r3, [r7, #48]	; 0x30

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000a90:	2300      	movs	r3, #0
 8000a92:	2200      	movs	r2, #0
 8000a94:	2100      	movs	r1, #0
 8000a96:	2001      	movs	r0, #1
 8000a98:	f000 fb6b 	bl	8001172 <Make_CAN_ID>
 8000a9c:	f04f 0200 	mov.w	r2, #0
 8000aa0:	f04f 0300 	mov.w	r3, #0
 8000aa4:	0b42      	lsrs	r2, r0, #13
 8000aa6:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000aaa:	0b4b      	lsrs	r3, r1, #13
 8000aac:	4613      	mov	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) >> 13;
 8000ab0:	231f      	movs	r3, #31
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f000 fb5b 	bl	8001172 <Make_CAN_ID>
 8000abc:	f04f 0200 	mov.w	r2, #0
 8000ac0:	f04f 0300 	mov.w	r3, #0
 8000ac4:	0b42      	lsrs	r2, r0, #13
 8000ac6:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000aca:	0b4b      	lsrs	r3, r1, #13
 8000acc:	4613      	mov	r3, r2
 8000ace:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f000 fb4b 	bl	8001172 <Make_CAN_ID>
 8000adc:	4602      	mov	r2, r0
 8000ade:	460b      	mov	r3, r1
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	00da      	lsls	r2, r3, #3
 8000ae4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ae8:	4013      	ands	r3, r2
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000af0:	231f      	movs	r3, #31
 8000af2:	2200      	movs	r2, #0
 8000af4:	2100      	movs	r1, #0
 8000af6:	2001      	movs	r0, #1
 8000af8:	f000 fb3b 	bl	8001172 <Make_CAN_ID>
 8000afc:	4602      	mov	r2, r0
 8000afe:	460b      	mov	r3, r1
 8000b00:	4613      	mov	r3, r2
 8000b02:	00da      	lsls	r2, r3, #3
 8000b04:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000b08:	4013      	ands	r3, r2
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000b10:	4ba5      	ldr	r3, [pc, #660]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f107 020c 	add.w	r2, r7, #12
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f001 fd04 	bl	8002528 <HAL_CAN_ConfigFilter>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <CAN_SystemInit+0x12a>
		/* Filter configuration Error */
		Error_Handler();
 8000b26:	f000 fec9 	bl	80018bc <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 1;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000b2e:	2300      	movs	r3, #0
 8000b30:	2200      	movs	r2, #0
 8000b32:	2100      	movs	r1, #0
 8000b34:	2002      	movs	r0, #2
 8000b36:	f000 fb1c 	bl	8001172 <Make_CAN_ID>
 8000b3a:	f04f 0200 	mov.w	r2, #0
 8000b3e:	f04f 0300 	mov.w	r3, #0
 8000b42:	0b42      	lsrs	r2, r0, #13
 8000b44:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000b48:	0b4b      	lsrs	r3, r1, #13
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) >> 13;
 8000b4e:	231f      	movs	r3, #31
 8000b50:	2200      	movs	r2, #0
 8000b52:	2100      	movs	r1, #0
 8000b54:	2002      	movs	r0, #2
 8000b56:	f000 fb0c 	bl	8001172 <Make_CAN_ID>
 8000b5a:	f04f 0200 	mov.w	r2, #0
 8000b5e:	f04f 0300 	mov.w	r3, #0
 8000b62:	0b42      	lsrs	r2, r0, #13
 8000b64:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000b68:	0b4b      	lsrs	r3, r1, #13
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000b6e:	2300      	movs	r3, #0
 8000b70:	2200      	movs	r2, #0
 8000b72:	2100      	movs	r1, #0
 8000b74:	2002      	movs	r0, #2
 8000b76:	f000 fafc 	bl	8001172 <Make_CAN_ID>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	4613      	mov	r3, r2
 8000b80:	00da      	lsls	r2, r3, #3
 8000b82:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000b86:	4013      	ands	r3, r2
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000b8e:	231f      	movs	r3, #31
 8000b90:	2200      	movs	r2, #0
 8000b92:	2100      	movs	r1, #0
 8000b94:	2002      	movs	r0, #2
 8000b96:	f000 faec 	bl	8001172 <Make_CAN_ID>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	00da      	lsls	r2, r3, #3
 8000ba2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	f043 0304 	orr.w	r3, r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000bae:	4b7e      	ldr	r3, [pc, #504]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f107 020c 	add.w	r2, r7, #12
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 fcb5 	bl	8002528 <HAL_CAN_ConfigFilter>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <CAN_SystemInit+0x1c8>
		/* Filter configuration Error */
		Error_Handler();
 8000bc4:	f000 fe7a 	bl	80018bc <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 2;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) >> 13;				   // 上16bit
 8000bcc:	2300      	movs	r3, #0
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2003      	movs	r0, #3
 8000bd4:	f000 facd 	bl	8001172 <Make_CAN_ID>
 8000bd8:	f04f 0200 	mov.w	r2, #0
 8000bdc:	f04f 0300 	mov.w	r3, #0
 8000be0:	0b42      	lsrs	r2, r0, #13
 8000be2:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000be6:	0b4b      	lsrs	r3, r1, #13
 8000be8:	4613      	mov	r3, r2
 8000bea:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) >> 13;					   // TODO : 治す
 8000bec:	231f      	movs	r3, #31
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2003      	movs	r0, #3
 8000bf4:	f000 fabd 	bl	8001172 <Make_CAN_ID>
 8000bf8:	f04f 0200 	mov.w	r2, #0
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	0b42      	lsrs	r2, r0, #13
 8000c02:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000c06:	0b4b      	lsrs	r3, r1, #13
 8000c08:	4613      	mov	r3, r2
 8000c0a:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2003      	movs	r0, #3
 8000c14:	f000 faad 	bl	8001172 <Make_CAN_ID>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	00da      	lsls	r2, r3, #3
 8000c20:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000c24:	4013      	ands	r3, r2
 8000c26:	f043 0304 	orr.w	r3, r3, #4
 8000c2a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000c2c:	231f      	movs	r3, #31
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2003      	movs	r0, #3
 8000c34:	f000 fa9d 	bl	8001172 <Make_CAN_ID>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	00da      	lsls	r2, r3, #3
 8000c40:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000c44:	4013      	ands	r3, r2
 8000c46:	f043 0304 	orr.w	r3, r3, #4
 8000c4a:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000c4c:	4b56      	ldr	r3, [pc, #344]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f107 020c 	add.w	r2, r7, #12
 8000c54:	4611      	mov	r1, r2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 fc66 	bl	8002528 <HAL_CAN_ConfigFilter>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <CAN_SystemInit+0x266>
		/* Filter configuration Error */
		Error_Handler();
 8000c62:	f000 fe2b 	bl	80018bc <Error_Handler>
	}

	// FIFO0にfeedback用のフィルタを設定
	sFilterConfig.FilterBank = 3;
 8000c66:	2303      	movs	r3, #3
 8000c68:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) >> 13; // 上16bit
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2000      	movs	r0, #0
 8000c72:	f000 fa7e 	bl	8001172 <Make_CAN_ID>
 8000c76:	f04f 0200 	mov.w	r2, #0
 8000c7a:	f04f 0300 	mov.w	r3, #0
 8000c7e:	0b42      	lsrs	r2, r0, #13
 8000c80:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000c84:	0b4b      	lsrs	r3, r1, #13
 8000c86:	4613      	mov	r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(0, 0, 0, 0b11111) >> 13;
 8000c8a:	231f      	movs	r3, #31
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2000      	movs	r0, #0
 8000c92:	f000 fa6e 	bl	8001172 <Make_CAN_ID>
 8000c96:	f04f 0200 	mov.w	r2, #0
 8000c9a:	f04f 0300 	mov.w	r3, #0
 8000c9e:	0b42      	lsrs	r2, r0, #13
 8000ca0:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000ca4:	0b4b      	lsrs	r3, r1, #13
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000caa:	2301      	movs	r3, #1
 8000cac:	2200      	movs	r2, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f000 fa5e 	bl	8001172 <Make_CAN_ID>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	460b      	mov	r3, r1
 8000cba:	4613      	mov	r3, r2
 8000cbc:	00da      	lsls	r2, r3, #3
 8000cbe:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(0, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000cca:	231f      	movs	r3, #31
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f000 fa4e 	bl	8001172 <Make_CAN_ID>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	460b      	mov	r3, r1
 8000cda:	4613      	mov	r3, r2
 8000cdc:	00da      	lsls	r2, r3, #3
 8000cde:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000cea:	4b2f      	ldr	r3, [pc, #188]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f107 020c 	add.w	r2, r7, #12
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f001 fc17 	bl	8002528 <HAL_CAN_ConfigFilter>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <CAN_SystemInit+0x304>
		/* Filter configuration Error */
		Error_Handler();
 8000d00:	f000 fddc 	bl	80018bc <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 4;
 8000d04:	2304      	movs	r3, #4
 8000d06:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) >> 13; // 上16bit
 8000d08:	2300      	movs	r3, #0
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2004      	movs	r0, #4
 8000d10:	f000 fa2f 	bl	8001172 <Make_CAN_ID>
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	0b42      	lsrs	r2, r0, #13
 8000d1e:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000d22:	0b4b      	lsrs	r3, r1, #13
 8000d24:	4613      	mov	r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) >> 13;
 8000d28:	231f      	movs	r3, #31
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2004      	movs	r0, #4
 8000d30:	f000 fa1f 	bl	8001172 <Make_CAN_ID>
 8000d34:	f04f 0200 	mov.w	r2, #0
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	0b42      	lsrs	r2, r0, #13
 8000d3e:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000d42:	0b4b      	lsrs	r3, r1, #13
 8000d44:	4613      	mov	r3, r2
 8000d46:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000d48:	2300      	movs	r3, #0
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2004      	movs	r0, #4
 8000d50:	f000 fa0f 	bl	8001172 <Make_CAN_ID>
 8000d54:	4602      	mov	r2, r0
 8000d56:	460b      	mov	r3, r1
 8000d58:	4613      	mov	r3, r2
 8000d5a:	00da      	lsls	r2, r3, #3
 8000d5c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000d60:	4013      	ands	r3, r2
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000d68:	231f      	movs	r3, #31
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2004      	movs	r0, #4
 8000d70:	f000 f9ff 	bl	8001172 <Make_CAN_ID>
 8000d74:	4602      	mov	r2, r0
 8000d76:	460b      	mov	r3, r1
 8000d78:	4613      	mov	r3, r2
 8000d7a:	00da      	lsls	r2, r3, #3
 8000d7c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000d80:	4013      	ands	r3, r2
 8000d82:	f043 0304 	orr.w	r3, r3, #4
 8000d86:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f107 020c 	add.w	r2, r7, #12
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 fbc8 	bl	8002528 <HAL_CAN_ConfigFilter>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d006      	beq.n	8000dac <CAN_SystemInit+0x3ac>
		/* Filter configuration Error */
		Error_Handler();
 8000d9e:	f000 fd8d 	bl	80018bc <Error_Handler>
 8000da2:	e003      	b.n	8000dac <CAN_SystemInit+0x3ac>
 8000da4:	20000204 	.word	0x20000204
 8000da8:	200001f0 	.word	0x200001f0
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 5;
 8000dac:	2305      	movs	r3, #5
 8000dae:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 8000db0:	2300      	movs	r3, #0
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	2005      	movs	r0, #5
 8000db8:	f000 f9db 	bl	8001172 <Make_CAN_ID>
 8000dbc:	f04f 0200 	mov.w	r2, #0
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	0b42      	lsrs	r2, r0, #13
 8000dc6:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000dca:	0b4b      	lsrs	r3, r1, #13
 8000dcc:	4613      	mov	r3, r2
 8000dce:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) >> 13;
 8000dd0:	231f      	movs	r3, #31
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2005      	movs	r0, #5
 8000dd8:	f000 f9cb 	bl	8001172 <Make_CAN_ID>
 8000ddc:	f04f 0200 	mov.w	r2, #0
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	0b42      	lsrs	r2, r0, #13
 8000de6:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000dea:	0b4b      	lsrs	r3, r1, #13
 8000dec:	4613      	mov	r3, r2
 8000dee:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000df0:	2300      	movs	r3, #0
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	2005      	movs	r0, #5
 8000df8:	f000 f9bb 	bl	8001172 <Make_CAN_ID>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	4613      	mov	r3, r2
 8000e02:	00da      	lsls	r2, r3, #3
 8000e04:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000e08:	4013      	ands	r3, r2
 8000e0a:	f043 0304 	orr.w	r3, r3, #4
 8000e0e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000e10:	231f      	movs	r3, #31
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	2005      	movs	r0, #5
 8000e18:	f000 f9ab 	bl	8001172 <Make_CAN_ID>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	460b      	mov	r3, r1
 8000e20:	4613      	mov	r3, r2
 8000e22:	00da      	lsls	r2, r3, #3
 8000e24:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000e28:	4013      	ands	r3, r2
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000e30:	4b44      	ldr	r3, [pc, #272]	; (8000f44 <CAN_SystemInit+0x544>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f107 020c 	add.w	r2, r7, #12
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 fb74 	bl	8002528 <HAL_CAN_ConfigFilter>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <CAN_SystemInit+0x44a>
		/* Filter configuration Error */
		Error_Handler();
 8000e46:	f000 fd39 	bl	80018bc <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 6;
 8000e4a:	2306      	movs	r3, #6
 8000e4c:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 8000e4e:	2300      	movs	r3, #0
 8000e50:	2200      	movs	r2, #0
 8000e52:	2100      	movs	r1, #0
 8000e54:	2006      	movs	r0, #6
 8000e56:	f000 f98c 	bl	8001172 <Make_CAN_ID>
 8000e5a:	f04f 0200 	mov.w	r2, #0
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	0b42      	lsrs	r2, r0, #13
 8000e64:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000e68:	0b4b      	lsrs	r3, r1, #13
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) >> 13;
 8000e6e:	231f      	movs	r3, #31
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	2006      	movs	r0, #6
 8000e76:	f000 f97c 	bl	8001172 <Make_CAN_ID>
 8000e7a:	f04f 0200 	mov.w	r2, #0
 8000e7e:	f04f 0300 	mov.w	r3, #0
 8000e82:	0b42      	lsrs	r2, r0, #13
 8000e84:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000e88:	0b4b      	lsrs	r3, r1, #13
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000e8e:	2300      	movs	r3, #0
 8000e90:	2200      	movs	r2, #0
 8000e92:	2100      	movs	r1, #0
 8000e94:	2006      	movs	r0, #6
 8000e96:	f000 f96c 	bl	8001172 <Make_CAN_ID>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	00da      	lsls	r2, r3, #3
 8000ea2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000eae:	231f      	movs	r3, #31
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2006      	movs	r0, #6
 8000eb6:	f000 f95c 	bl	8001172 <Make_CAN_ID>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	00da      	lsls	r2, r3, #3
 8000ec2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000ece:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <CAN_SystemInit+0x544>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f107 020c 	add.w	r2, r7, #12
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f001 fb25 	bl	8002528 <HAL_CAN_ConfigFilter>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <CAN_SystemInit+0x4e8>
		/* Filter configuration Error */
		Error_Handler();
 8000ee4:	f000 fcea 	bl	80018bc <Error_Handler>
	}

	if (HAL_CAN_Start(phcan) != HAL_OK){
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <CAN_SystemInit+0x544>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 fc07 	bl	8002700 <HAL_CAN_Start>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d004      	beq.n	8000f02 <CAN_SystemInit+0x502>
		printf(" -> Start Error\n");
 8000ef8:	4813      	ldr	r0, [pc, #76]	; (8000f48 <CAN_SystemInit+0x548>)
 8000efa:	f016 f8fd 	bl	80170f8 <puts>
		Error_Handler();
 8000efe:	f000 fcdd 	bl	80018bc <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(phcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <CAN_SystemInit+0x544>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2102      	movs	r1, #2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f001 fe54 	bl	8002bb6 <HAL_CAN_ActivateNotification>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d004      	beq.n	8000f1e <CAN_SystemInit+0x51e>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 8000f14:	480d      	ldr	r0, [pc, #52]	; (8000f4c <CAN_SystemInit+0x54c>)
 8000f16:	f016 f869 	bl	8016fec <iprintf>
		Error_Handler();
 8000f1a:	f000 fccf 	bl	80018bc <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(phcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK){
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <CAN_SystemInit+0x544>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2101      	movs	r1, #1
 8000f24:	4618      	mov	r0, r3
 8000f26:	f001 fe46 	bl	8002bb6 <HAL_CAN_ActivateNotification>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d004      	beq.n	8000f3a <CAN_SystemInit+0x53a>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 8000f30:	4806      	ldr	r0, [pc, #24]	; (8000f4c <CAN_SystemInit+0x54c>)
 8000f32:	f016 f85b 	bl	8016fec <iprintf>
		Error_Handler();
 8000f36:	f000 fcc1 	bl	80018bc <Error_Handler>
	}
}
 8000f3a:	bf00      	nop
 8000f3c:	3738      	adds	r7, #56	; 0x38
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200001f0 	.word	0x200001f0
 8000f48:	080181b0 	.word	0x080181b0
 8000f4c:	080181c0 	.word	0x080181c0

08000f50 <CAN_WaitConnect>:

/**
 * @brief CANの全デバイスの接続が確認されるまで待つ.
 *
 */
void CAN_WaitConnect(NUM_OF_DEVICES *num_of){ // 他のデバイスが接続されるのを待つ
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	while (all_node_detected == 0){
 8000f58:	e006      	b.n	8000f68 <CAN_WaitConnect+0x18>
		printf("Waiting CAN_NODES Wake Up...\n\r");
 8000f5a:	484c      	ldr	r0, [pc, #304]	; (800108c <CAN_WaitConnect+0x13c>)
 8000f5c:	f016 f846 	bl	8016fec <iprintf>
		HAL_Delay(500);
 8000f60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f64:	f001 f9c0 	bl	80022e8 <HAL_Delay>
	while (all_node_detected == 0){
 8000f68:	4b49      	ldr	r3, [pc, #292]	; (8001090 <CAN_WaitConnect+0x140>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0f3      	beq.n	8000f5a <CAN_WaitConnect+0xa>
	}
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	e00a      	b.n	8000f8e <CAN_WaitConnect+0x3e>
		printf("MCMD1 No.%d\n\r", node_id_list[NODE_MCMD1][i]);
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	4a46      	ldr	r2, [pc, #280]	; (8001094 <CAN_WaitConnect+0x144>)
 8000f7c:	4413      	add	r3, r2
 8000f7e:	79db      	ldrb	r3, [r3, #7]
 8000f80:	4619      	mov	r1, r3
 8000f82:	4845      	ldr	r0, [pc, #276]	; (8001098 <CAN_WaitConnect+0x148>)
 8000f84:	f016 f832 	bl	8016fec <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	73fb      	strb	r3, [r7, #15]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	7bfa      	ldrb	r2, [r7, #15]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d3ef      	bcc.n	8000f78 <CAN_WaitConnect+0x28>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	73bb      	strb	r3, [r7, #14]
 8000f9c:	e00a      	b.n	8000fb4 <CAN_WaitConnect+0x64>
		printf("MCMD2 No.%d\n\r", node_id_list[NODE_MCMD2][i]);
 8000f9e:	7bbb      	ldrb	r3, [r7, #14]
 8000fa0:	4a3c      	ldr	r2, [pc, #240]	; (8001094 <CAN_WaitConnect+0x144>)
 8000fa2:	4413      	add	r3, r2
 8000fa4:	7b9b      	ldrb	r3, [r3, #14]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	483c      	ldr	r0, [pc, #240]	; (800109c <CAN_WaitConnect+0x14c>)
 8000faa:	f016 f81f 	bl	8016fec <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	73bb      	strb	r3, [r7, #14]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	785b      	ldrb	r3, [r3, #1]
 8000fb8:	7bba      	ldrb	r2, [r7, #14]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d3ef      	bcc.n	8000f9e <CAN_WaitConnect+0x4e>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	737b      	strb	r3, [r7, #13]
 8000fc2:	e00a      	b.n	8000fda <CAN_WaitConnect+0x8a>
		printf("MCMD3 No.%d\n\r", node_id_list[NODE_MCMD3][i]);
 8000fc4:	7b7b      	ldrb	r3, [r7, #13]
 8000fc6:	4a33      	ldr	r2, [pc, #204]	; (8001094 <CAN_WaitConnect+0x144>)
 8000fc8:	4413      	add	r3, r2
 8000fca:	7d5b      	ldrb	r3, [r3, #21]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4834      	ldr	r0, [pc, #208]	; (80010a0 <CAN_WaitConnect+0x150>)
 8000fd0:	f016 f80c 	bl	8016fec <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 8000fd4:	7b7b      	ldrb	r3, [r7, #13]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	737b      	strb	r3, [r7, #13]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	789b      	ldrb	r3, [r3, #2]
 8000fde:	7b7a      	ldrb	r2, [r7, #13]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d3ef      	bcc.n	8000fc4 <CAN_WaitConnect+0x74>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	733b      	strb	r3, [r7, #12]
 8000fe8:	e00b      	b.n	8001002 <CAN_WaitConnect+0xb2>
		printf("MCMD4 No.%d\n\r", node_id_list[NODE_MCMD4][i]);
 8000fea:	7b3b      	ldrb	r3, [r7, #12]
 8000fec:	4a29      	ldr	r2, [pc, #164]	; (8001094 <CAN_WaitConnect+0x144>)
 8000fee:	4413      	add	r3, r2
 8000ff0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	482b      	ldr	r0, [pc, #172]	; (80010a4 <CAN_WaitConnect+0x154>)
 8000ff8:	f015 fff8 	bl	8016fec <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 8000ffc:	7b3b      	ldrb	r3, [r7, #12]
 8000ffe:	3301      	adds	r3, #1
 8001000:	733b      	strb	r3, [r7, #12]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	795b      	ldrb	r3, [r3, #5]
 8001006:	7b3a      	ldrb	r2, [r7, #12]
 8001008:	429a      	cmp	r2, r3
 800100a:	d3ee      	bcc.n	8000fea <CAN_WaitConnect+0x9a>
	for (uint8_t i = 0; i < num_of->servo; i++)
 800100c:	2300      	movs	r3, #0
 800100e:	72fb      	strb	r3, [r7, #11]
 8001010:	e00a      	b.n	8001028 <CAN_WaitConnect+0xd8>
		printf("Servo No.%d\n\r", node_id_list[NODE_SERVO][i]);
 8001012:	7afb      	ldrb	r3, [r7, #11]
 8001014:	4a1f      	ldr	r2, [pc, #124]	; (8001094 <CAN_WaitConnect+0x144>)
 8001016:	4413      	add	r3, r2
 8001018:	7f1b      	ldrb	r3, [r3, #28]
 800101a:	4619      	mov	r1, r3
 800101c:	4822      	ldr	r0, [pc, #136]	; (80010a8 <CAN_WaitConnect+0x158>)
 800101e:	f015 ffe5 	bl	8016fec <iprintf>
	for (uint8_t i = 0; i < num_of->servo; i++)
 8001022:	7afb      	ldrb	r3, [r7, #11]
 8001024:	3301      	adds	r3, #1
 8001026:	72fb      	strb	r3, [r7, #11]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	78db      	ldrb	r3, [r3, #3]
 800102c:	7afa      	ldrb	r2, [r7, #11]
 800102e:	429a      	cmp	r2, r3
 8001030:	d3ef      	bcc.n	8001012 <CAN_WaitConnect+0xc2>
	for (uint8_t i = 0; i < num_of->air; i++)
 8001032:	2300      	movs	r3, #0
 8001034:	72bb      	strb	r3, [r7, #10]
 8001036:	e00b      	b.n	8001050 <CAN_WaitConnect+0x100>
		printf("Air No.%d\n\r", node_id_list[NODE_AIR][i]);
 8001038:	7abb      	ldrb	r3, [r7, #10]
 800103a:	4a16      	ldr	r2, [pc, #88]	; (8001094 <CAN_WaitConnect+0x144>)
 800103c:	4413      	add	r3, r2
 800103e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001042:	4619      	mov	r1, r3
 8001044:	4819      	ldr	r0, [pc, #100]	; (80010ac <CAN_WaitConnect+0x15c>)
 8001046:	f015 ffd1 	bl	8016fec <iprintf>
	for (uint8_t i = 0; i < num_of->air; i++)
 800104a:	7abb      	ldrb	r3, [r7, #10]
 800104c:	3301      	adds	r3, #1
 800104e:	72bb      	strb	r3, [r7, #10]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	791b      	ldrb	r3, [r3, #4]
 8001054:	7aba      	ldrb	r2, [r7, #10]
 8001056:	429a      	cmp	r2, r3
 8001058:	d3ee      	bcc.n	8001038 <CAN_WaitConnect+0xe8>
	for (uint8_t i = 0; i < num_of->other; i++)
 800105a:	2300      	movs	r3, #0
 800105c:	727b      	strb	r3, [r7, #9]
 800105e:	e00b      	b.n	8001078 <CAN_WaitConnect+0x128>
		printf("Others No.%d\n\r", node_id_list[NODE_OTHER][i]);
 8001060:	7a7b      	ldrb	r3, [r7, #9]
 8001062:	4a0c      	ldr	r2, [pc, #48]	; (8001094 <CAN_WaitConnect+0x144>)
 8001064:	4413      	add	r3, r2
 8001066:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800106a:	4619      	mov	r1, r3
 800106c:	4810      	ldr	r0, [pc, #64]	; (80010b0 <CAN_WaitConnect+0x160>)
 800106e:	f015 ffbd 	bl	8016fec <iprintf>
	for (uint8_t i = 0; i < num_of->other; i++)
 8001072:	7a7b      	ldrb	r3, [r7, #9]
 8001074:	3301      	adds	r3, #1
 8001076:	727b      	strb	r3, [r7, #9]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	799b      	ldrb	r3, [r3, #6]
 800107c:	7a7a      	ldrb	r2, [r7, #9]
 800107e:	429a      	cmp	r2, r3
 8001080:	d3ee      	bcc.n	8001060 <CAN_WaitConnect+0x110>
}
 8001082:	bf00      	nop
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	080181e4 	.word	0x080181e4
 8001090:	200001f4 	.word	0x200001f4
 8001094:	20000204 	.word	0x20000204
 8001098:	08018204 	.word	0x08018204
 800109c:	08018214 	.word	0x08018214
 80010a0:	08018224 	.word	0x08018224
 80010a4:	08018234 	.word	0x08018234
 80010a8:	08018244 	.word	0x08018244
 80010ac:	08018254 	.word	0x08018254
 80010b0:	08018260 	.word	0x08018260

080010b4 <AirCylinder_Init>:
 * 異なる関数名を用いて明示的にしてある.
 * また, AirCylinderの基板の方にも, 最初は必ず初期化処理(AIR_CMD_INIT)が来るものとして定義してある.
 */

////AirCylinder
void AirCylinder_Init(CAN_Device *can_device, Air_PortStatus_Typedef param){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	70fb      	strb	r3, [r7, #3]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, AIR_CMD_INIT), (uint8_t *)(&param), sizeof(Air_PortStatus_Typedef)) != HAL_OK){
 80010c0:	2101      	movs	r1, #1
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 f82c 	bl	8001120 <Make_CAN_ID_from_CAN_Device>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4610      	mov	r0, r2
 80010ce:	1cfb      	adds	r3, r7, #3
 80010d0:	2201      	movs	r2, #1
 80010d2:	4619      	mov	r1, r3
 80010d4:	f7ff fc44 	bl	8000960 <SendBytes>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <AirCylinder_Init+0x2e>
		Error_Handler();
 80010de:	f000 fbed 	bl	80018bc <Error_Handler>
	}
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <AirCylinder_SendOutput>:

void AirCylinder_SendOutput(CAN_Device *can_device, Air_PortStatus_Typedef param){
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	460b      	mov	r3, r1
 80010f4:	70fb      	strb	r3, [r7, #3]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, AIR_CMD_OUTPUT), (uint8_t *)(&param), sizeof(Air_PortStatus_Typedef)) != HAL_OK){
 80010f6:	2102      	movs	r1, #2
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f000 f811 	bl	8001120 <Make_CAN_ID_from_CAN_Device>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4610      	mov	r0, r2
 8001104:	1cfb      	adds	r3, r7, #3
 8001106:	2201      	movs	r2, #1
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fc29 	bl	8000960 <SendBytes>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <AirCylinder_SendOutput+0x2e>
		Error_Handler();
 8001114:	f000 fbd2 	bl	80018bc <Error_Handler>
	}
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <Make_CAN_ID_from_CAN_Device>:
/**
 * @brief CANのIDを設定する. 上16bitのみを使用
 * @param CAN_Device*
 * @param cmd
 */
uint64_t Make_CAN_ID_from_CAN_Device(CAN_Device* _can_device, uint8_t cmd){  // mainからmcmdなどへの送信
 8001120:	b4b0      	push	{r4, r5, r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	70fb      	strb	r3, [r7, #3]
    uint8_t node_type = (uint8_t)(_can_device->node_type) & (0b111);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	f003 0307 	and.w	r3, r3, #7
 8001134:	73fb      	strb	r3, [r7, #15]
    return (((node_type&0b111)<<11) | (((_can_device->node_id)&0b111)<<8) | (((_can_device->device_num)&0b111)<<5)
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	02db      	lsls	r3, r3, #11
 800113a:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	785b      	ldrb	r3, [r3, #1]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001148:	431a      	orrs	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	789b      	ldrb	r3, [r3, #2]
 800114e:	015b      	lsls	r3, r3, #5
 8001150:	b2db      	uxtb	r3, r3
 8001152:	431a      	orrs	r2, r3
            | (cmd&0b11111) );
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	f003 031f 	and.w	r3, r3, #31
 800115a:	4313      	orrs	r3, r2
 800115c:	17da      	asrs	r2, r3, #31
 800115e:	461c      	mov	r4, r3
 8001160:	4615      	mov	r5, r2
 8001162:	4622      	mov	r2, r4
 8001164:	462b      	mov	r3, r5
}
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	bcb0      	pop	{r4, r5, r7}
 8001170:	4770      	bx	lr

08001172 <Make_CAN_ID>:
 * @param node_type
 * @param node_id
 * @param device_num
 * @param cmd
 */
uint64_t Make_CAN_ID(Node_Type node_type, uint8_t node_id, uint8_t device_num, uint8_t cmd){
 8001172:	e92d 0390 	stmdb	sp!, {r4, r7, r8, r9}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4604      	mov	r4, r0
 800117c:	4608      	mov	r0, r1
 800117e:	4611      	mov	r1, r2
 8001180:	461a      	mov	r2, r3
 8001182:	4623      	mov	r3, r4
 8001184:	71fb      	strb	r3, [r7, #7]
 8001186:	4603      	mov	r3, r0
 8001188:	71bb      	strb	r3, [r7, #6]
 800118a:	460b      	mov	r3, r1
 800118c:	717b      	strb	r3, [r7, #5]
 800118e:	4613      	mov	r3, r2
 8001190:	713b      	strb	r3, [r7, #4]
    return ( (((uint8_t)node_type & 0b111) << 11) | (((node_id)&0b111) << 8) | ((device_num&0b111) << 5)
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	02db      	lsls	r3, r3, #11
 8001196:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800119a:	79bb      	ldrb	r3, [r7, #6]
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80011a2:	431a      	orrs	r2, r3
 80011a4:	797b      	ldrb	r3, [r7, #5]
 80011a6:	015b      	lsls	r3, r3, #5
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	431a      	orrs	r2, r3
             | (cmd&0b11111) );
 80011ac:	793b      	ldrb	r3, [r7, #4]
 80011ae:	f003 031f 	and.w	r3, r3, #31
 80011b2:	4313      	orrs	r3, r2
 80011b4:	17da      	asrs	r2, r3, #31
 80011b6:	4698      	mov	r8, r3
 80011b8:	4691      	mov	r9, r2
 80011ba:	4642      	mov	r2, r8
 80011bc:	464b      	mov	r3, r9
}
 80011be:	4610      	mov	r0, r2
 80011c0:	4619      	mov	r1, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	e8bd 0390 	ldmia.w	sp!, {r4, r7, r8, r9}
 80011ca:	4770      	bx	lr

080011cc <Extract_CAN_Device>:

CAN_Device Extract_CAN_Device(uint64_t can_id) {  // CAN_IDからCAN_Deviceを抽出する
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	e9c7 0100 	strd	r0, r1, [r7]
    CAN_Device ans;
    ans.device_num = ((can_id>>5) & 0b111);
 80011d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	0942      	lsrs	r2, r0, #5
 80011e4:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 80011e8:	094b      	lsrs	r3, r1, #5
 80011ea:	b2d3      	uxtb	r3, r2
 80011ec:	f003 0307 	and.w	r3, r3, #7
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	72bb      	strb	r3, [r7, #10]
    ans.node_id = ((can_id>>8) & 0b111);
 80011f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	f04f 0300 	mov.w	r3, #0
 8001200:	0a02      	lsrs	r2, r0, #8
 8001202:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001206:	0a0b      	lsrs	r3, r1, #8
 8001208:	b2d3      	uxtb	r3, r2
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	b2db      	uxtb	r3, r3
 8001210:	727b      	strb	r3, [r7, #9]
    ans.node_type = (Node_Type)( (can_id>>11) & 0b111);
 8001212:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	f04f 0300 	mov.w	r3, #0
 800121e:	0ac2      	lsrs	r2, r0, #11
 8001220:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8001224:	0acb      	lsrs	r3, r1, #11
 8001226:	b2d3      	uxtb	r3, r2
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	b2db      	uxtb	r3, r3
 800122e:	723b      	strb	r3, [r7, #8]
    return ans;
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	f107 0208 	add.w	r2, r7, #8
 8001238:	6812      	ldr	r2, [r2, #0]
 800123a:	4611      	mov	r1, r2
 800123c:	8019      	strh	r1, [r3, #0]
 800123e:	3302      	adds	r3, #2
 8001240:	0c12      	lsrs	r2, r2, #16
 8001242:	701a      	strb	r2, [r3, #0]
 8001244:	2300      	movs	r3, #0
 8001246:	7b3a      	ldrb	r2, [r7, #12]
 8001248:	f362 0307 	bfi	r3, r2, #0, #8
 800124c:	7b7a      	ldrb	r2, [r7, #13]
 800124e:	f362 230f 	bfi	r3, r2, #8, #8
 8001252:	7bba      	ldrb	r2, [r7, #14]
 8001254:	f362 4317 	bfi	r3, r2, #16, #8
}
 8001258:	4618      	mov	r0, r3
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <Extract_CAN_CMD>:

uint8_t Extract_CAN_CMD(uint64_t can_id){ return ( can_id & 0b11111); }  // cmdを抽出
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	e9c7 0100 	strd	r0, r1, [r7]
 800126e:	783b      	ldrb	r3, [r7, #0]
 8001270:	f003 031f 	and.w	r3, r3, #31
 8001274:	b2db      	uxtb	r3, r3
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(uint8_t ch)
#else
#define PUTCHAR_PROTYPE int fputc(int ch,FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, &ch, 1, 500);
 800128e:	1df9      	adds	r1, r7, #7
 8001290:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001294:	2201      	movs	r2, #1
 8001296:	4804      	ldr	r0, [pc, #16]	; (80012a8 <__io_putchar+0x24>)
 8001298:	f005 fd36 	bl	8006d08 <HAL_UART_Transmit>
    return ch;
 800129c:	79fb      	ldrb	r3, [r7, #7]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200024f8 	.word	0x200024f8

080012ac <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 80012b4:	f7ff fa48 	bl	8000748 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 80012c8:	f7ff fa44 	bl	8000754 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 80012dc:	f7ff fa34 	bl	8000748 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 80012f0:	f7ff fa30 	bl	8000754 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8001304:	f7ff fa20 	bl	8000748 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan){
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 8001318:	f7ff fa1c 	bl	8000754 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
    WhenCANRxFifo0MsgPending(hcan, &num_of_devices);
 800132c:	4903      	ldr	r1, [pc, #12]	; (800133c <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff fa16 	bl	8000760 <WhenCANRxFifo0MsgPending>
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20004408 	.word	0x20004408

08001340 <canSetting>:

void canSetting(){
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
	printf("Start Initializing CAN System:Begin\n\r");
 8001344:	480f      	ldr	r0, [pc, #60]	; (8001384 <canSetting+0x44>)
 8001346:	f015 fe51 	bl	8016fec <iprintf>
	HAL_Delay(100);
 800134a:	2064      	movs	r0, #100	; 0x64
 800134c:	f000 ffcc 	bl	80022e8 <HAL_Delay>

	CAN_SystemInit(&hcan1); // F7のCAN通信のinit
 8001350:	480d      	ldr	r0, [pc, #52]	; (8001388 <canSetting+0x48>)
 8001352:	f7ff fb55 	bl	8000a00 <CAN_SystemInit>

	// デバイス数の設定 (今回はmcmd4が1枚)
	num_of_devices.mcmd3 = 0;
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <canSetting+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	709a      	strb	r2, [r3, #2]
	num_of_devices.mcmd4 = 0;
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <canSetting+0x4c>)
 800135e:	2200      	movs	r2, #0
 8001360:	715a      	strb	r2, [r3, #5]
	num_of_devices.air = 1;
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <canSetting+0x4c>)
 8001364:	2201      	movs	r2, #1
 8001366:	711a      	strb	r2, [r3, #4]
	num_of_devices.servo = 0;
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <canSetting+0x4c>)
 800136a:	2200      	movs	r2, #0
 800136c:	70da      	strb	r2, [r3, #3]

	printf("Start Initializing CAN System:End\n\r");
 800136e:	4808      	ldr	r0, [pc, #32]	; (8001390 <canSetting+0x50>)
 8001370:	f015 fe3c 	bl	8016fec <iprintf>
	HAL_Delay(100);
 8001374:	2064      	movs	r0, #100	; 0x64
 8001376:	f000 ffb7 	bl	80022e8 <HAL_Delay>
	CAN_WaitConnect(&num_of_devices);  // 設定された全てのCANモジュール基板との接続が確認できるまで待機
 800137a:	4804      	ldr	r0, [pc, #16]	; (800138c <canSetting+0x4c>)
 800137c:	f7ff fde8 	bl	8000f50 <CAN_WaitConnect>
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	080182b4 	.word	0x080182b4
 8001388:	200024d0 	.word	0x200024d0
 800138c:	20004408 	.word	0x20004408
 8001390:	080182dc 	.word	0x080182dc

08001394 <airSetting>:
	servo_param.pulse_width_max=2.4f;//サーボの制御のPWM信号のパルス幅の最大値
	servo_param.pulse_width_min=0.5f;//サーボの制御のPWM信号のパルス幅の最小値
	servo_param.pwm_frequency=50;//PWM周波数（この変更は未実装
}

void airSetting(){
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
	air_device.node_type = NODE_AIR; //エアシリンダ基盤であることを示す
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <airSetting+0x1c>)
 800139a:	2205      	movs	r2, #5
 800139c:	701a      	strb	r2, [r3, #0]
	air_device.node_id = 0; //基板の番号
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <airSetting+0x1c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	705a      	strb	r2, [r3, #1]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20004410 	.word	0x20004410

080013b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b8:	f000 ff68 	bl	800228c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013bc:	f000 f83e 	bl	800143c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c0:	f000 f960 	bl	8001684 <MX_GPIO_Init>
  MX_DMA_Init();
 80013c4:	f000 f940 	bl	8001648 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80013c8:	f000 f8e0 	bl	800158c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80013cc:	f000 f90e 	bl	80015ec <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 80013d0:	f000 f8a6 	bl	8001520 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  //記事ではmcmdなどの初期化コードを描くことになっている場所
  canSetting();
 80013d4:	f7ff ffb4 	bl	8001340 <canSetting>
  //mcmdSetting();
  //activateMcmdControll();
  //servoSetting();
  airSetting();
 80013d8:	f7ff ffdc 	bl	8001394 <airSetting>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013dc:	f007 fe1e 	bl	800901c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80013e0:	4a0d      	ldr	r2, [pc, #52]	; (8001418 <main+0x64>)
 80013e2:	2100      	movs	r1, #0
 80013e4:	480d      	ldr	r0, [pc, #52]	; (800141c <main+0x68>)
 80013e6:	f007 feab 	bl	8009140 <osThreadNew>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4a0c      	ldr	r2, [pc, #48]	; (8001420 <main+0x6c>)
 80013ee:	6013      	str	r3, [r2, #0]

  /* creation of systemCheckTask */
  systemCheckTaskHandle = osThreadNew(StartSystemCheckTask, NULL, &systemCheckTask_attributes);
 80013f0:	4a0c      	ldr	r2, [pc, #48]	; (8001424 <main+0x70>)
 80013f2:	2100      	movs	r1, #0
 80013f4:	480c      	ldr	r0, [pc, #48]	; (8001428 <main+0x74>)
 80013f6:	f007 fea3 	bl	8009140 <osThreadNew>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4a0b      	ldr	r2, [pc, #44]	; (800142c <main+0x78>)
 80013fe:	6013      	str	r3, [r2, #0]

  /* creation of ControllerTask */
  ControllerTaskHandle = osThreadNew(StartControllerTask, NULL, &ControllerTask_attributes);
 8001400:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <main+0x7c>)
 8001402:	2100      	movs	r1, #0
 8001404:	480b      	ldr	r0, [pc, #44]	; (8001434 <main+0x80>)
 8001406:	f007 fe9b 	bl	8009140 <osThreadNew>
 800140a:	4603      	mov	r3, r0
 800140c:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <main+0x84>)
 800140e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001410:	f007 fe38 	bl	8009084 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001414:	e7fe      	b.n	8001414 <main+0x60>
 8001416:	bf00      	nop
 8001418:	0801ae38 	.word	0x0801ae38
 800141c:	080017c9 	.word	0x080017c9
 8001420:	20002ae8 	.word	0x20002ae8
 8001424:	0801ae5c 	.word	0x0801ae5c
 8001428:	0800186d 	.word	0x0800186d
 800142c:	20003348 	.word	0x20003348
 8001430:	0801ae80 	.word	0x0801ae80
 8001434:	08001887 	.word	0x08001887
 8001438:	20003ba8 	.word	0x20003ba8

0800143c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b094      	sub	sp, #80	; 0x50
 8001440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001442:	f107 031c 	add.w	r3, r7, #28
 8001446:	2234      	movs	r2, #52	; 0x34
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f015 fdc6 	bl	8016fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001450:	f107 0308 	add.w	r3, r7, #8
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001460:	f003 ff96 	bl	8005390 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001464:	4b2c      	ldr	r3, [pc, #176]	; (8001518 <SystemClock_Config+0xdc>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	4a2b      	ldr	r2, [pc, #172]	; (8001518 <SystemClock_Config+0xdc>)
 800146a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146e:	6413      	str	r3, [r2, #64]	; 0x40
 8001470:	4b29      	ldr	r3, [pc, #164]	; (8001518 <SystemClock_Config+0xdc>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800147c:	4b27      	ldr	r3, [pc, #156]	; (800151c <SystemClock_Config+0xe0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001484:	4a25      	ldr	r2, [pc, #148]	; (800151c <SystemClock_Config+0xe0>)
 8001486:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b23      	ldr	r3, [pc, #140]	; (800151c <SystemClock_Config+0xe0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001494:	603b      	str	r3, [r7, #0]
 8001496:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001498:	2301      	movs	r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800149c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80014a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a2:	2302      	movs	r3, #2
 80014a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014ac:	2304      	movs	r3, #4
 80014ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80014b0:	2360      	movs	r3, #96	; 0x60
 80014b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014b4:	2302      	movs	r3, #2
 80014b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014b8:	2304      	movs	r3, #4
 80014ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014bc:	2302      	movs	r3, #2
 80014be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	4618      	mov	r0, r3
 80014c6:	f003 ffc3 	bl	8005450 <HAL_RCC_OscConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014d0:	f000 f9f4 	bl	80018bc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014d4:	f003 ff6c 	bl	80053b0 <HAL_PWREx_EnableOverDrive>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80014de:	f000 f9ed 	bl	80018bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e2:	230f      	movs	r3, #15
 80014e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e6:	2302      	movs	r3, #2
 80014e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014f8:	f107 0308 	add.w	r3, r7, #8
 80014fc:	2103      	movs	r1, #3
 80014fe:	4618      	mov	r0, r3
 8001500:	f004 fa54 	bl	80059ac <HAL_RCC_ClockConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800150a:	f000 f9d7 	bl	80018bc <Error_Handler>
  }
}
 800150e:	bf00      	nop
 8001510:	3750      	adds	r7, #80	; 0x50
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40007000 	.word	0x40007000

08001520 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001524:	4b17      	ldr	r3, [pc, #92]	; (8001584 <MX_CAN1_Init+0x64>)
 8001526:	4a18      	ldr	r2, [pc, #96]	; (8001588 <MX_CAN1_Init+0x68>)
 8001528:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800152a:	4b16      	ldr	r3, [pc, #88]	; (8001584 <MX_CAN1_Init+0x64>)
 800152c:	2206      	movs	r2, #6
 800152e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <MX_CAN1_Init+0x64>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001536:	4b13      	ldr	r3, [pc, #76]	; (8001584 <MX_CAN1_Init+0x64>)
 8001538:	2200      	movs	r2, #0
 800153a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <MX_CAN1_Init+0x64>)
 800153e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001542:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <MX_CAN1_Init+0x64>)
 8001546:	2200      	movs	r2, #0
 8001548:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <MX_CAN1_Init+0x64>)
 800154c:	2200      	movs	r2, #0
 800154e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <MX_CAN1_Init+0x64>)
 8001552:	2200      	movs	r2, #0
 8001554:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <MX_CAN1_Init+0x64>)
 8001558:	2200      	movs	r2, #0
 800155a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <MX_CAN1_Init+0x64>)
 800155e:	2200      	movs	r2, #0
 8001560:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <MX_CAN1_Init+0x64>)
 8001564:	2200      	movs	r2, #0
 8001566:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <MX_CAN1_Init+0x64>)
 800156a:	2201      	movs	r2, #1
 800156c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_CAN1_Init+0x64>)
 8001570:	f000 fede 	bl	8002330 <HAL_CAN_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800157a:	f000 f99f 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200024d0 	.word	0x200024d0
 8001588:	40006400 	.word	0x40006400

0800158c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <MX_USART3_UART_Init+0x58>)
 8001592:	4a15      	ldr	r2, [pc, #84]	; (80015e8 <MX_USART3_UART_Init+0x5c>)
 8001594:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001596:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <MX_USART3_UART_Init+0x58>)
 8001598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800159c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <MX_USART3_UART_Init+0x58>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <MX_USART3_UART_Init+0x58>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <MX_USART3_UART_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <MX_USART3_UART_Init+0x58>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <MX_USART3_UART_Init+0x58>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <MX_USART3_UART_Init+0x58>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <MX_USART3_UART_Init+0x58>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <MX_USART3_UART_Init+0x58>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_USART3_UART_Init+0x58>)
 80015d0:	f005 fb4c 	bl	8006c6c <HAL_UART_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80015da:	f000 f96f 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200024f8 	.word	0x200024f8
 80015e8:	40004800 	.word	0x40004800

080015ec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80015f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015fa:	2206      	movs	r2, #6
 80015fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001600:	2202      	movs	r2, #2
 8001602:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800160c:	2202      	movs	r2, #2
 800160e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001612:	2201      	movs	r2, #1
 8001614:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800161c:	4b09      	ldr	r3, [pc, #36]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001624:	2201      	movs	r2, #1
 8001626:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800162a:	2200      	movs	r2, #0
 800162c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001630:	f003 fd65 	bl	80050fe <HAL_PCD_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800163a:	f000 f93f 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200025e0 	.word	0x200025e0

08001648 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800164e:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <MX_DMA_Init+0x38>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <MX_DMA_Init+0x38>)
 8001654:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <MX_DMA_Init+0x38>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2105      	movs	r1, #5
 800166a:	200e      	movs	r0, #14
 800166c:	f001 fd74 	bl	8003158 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001670:	200e      	movs	r0, #14
 8001672:	f001 fd8d 	bl	8003190 <HAL_NVIC_EnableIRQ>

}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800

08001684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08c      	sub	sp, #48	; 0x30
 8001688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168a:	f107 031c 	add.w	r3, r7, #28
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
 8001698:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800169a:	4b47      	ldr	r3, [pc, #284]	; (80017b8 <MX_GPIO_Init+0x134>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a46      	ldr	r2, [pc, #280]	; (80017b8 <MX_GPIO_Init+0x134>)
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b44      	ldr	r3, [pc, #272]	; (80017b8 <MX_GPIO_Init+0x134>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	61bb      	str	r3, [r7, #24]
 80016b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016b2:	4b41      	ldr	r3, [pc, #260]	; (80017b8 <MX_GPIO_Init+0x134>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a40      	ldr	r2, [pc, #256]	; (80017b8 <MX_GPIO_Init+0x134>)
 80016b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b3e      	ldr	r3, [pc, #248]	; (80017b8 <MX_GPIO_Init+0x134>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	4b3b      	ldr	r3, [pc, #236]	; (80017b8 <MX_GPIO_Init+0x134>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a3a      	ldr	r2, [pc, #232]	; (80017b8 <MX_GPIO_Init+0x134>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b38      	ldr	r3, [pc, #224]	; (80017b8 <MX_GPIO_Init+0x134>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	4b35      	ldr	r3, [pc, #212]	; (80017b8 <MX_GPIO_Init+0x134>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a34      	ldr	r2, [pc, #208]	; (80017b8 <MX_GPIO_Init+0x134>)
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b32      	ldr	r3, [pc, #200]	; (80017b8 <MX_GPIO_Init+0x134>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016fa:	4b2f      	ldr	r3, [pc, #188]	; (80017b8 <MX_GPIO_Init+0x134>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a2e      	ldr	r2, [pc, #184]	; (80017b8 <MX_GPIO_Init+0x134>)
 8001700:	f043 0308 	orr.w	r3, r3, #8
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b2c      	ldr	r3, [pc, #176]	; (80017b8 <MX_GPIO_Init+0x134>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001712:	4b29      	ldr	r3, [pc, #164]	; (80017b8 <MX_GPIO_Init+0x134>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a28      	ldr	r2, [pc, #160]	; (80017b8 <MX_GPIO_Init+0x134>)
 8001718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b26      	ldr	r3, [pc, #152]	; (80017b8 <MX_GPIO_Init+0x134>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001730:	4822      	ldr	r0, [pc, #136]	; (80017bc <MX_GPIO_Init+0x138>)
 8001732:	f003 fcb1 	bl	8005098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	2140      	movs	r1, #64	; 0x40
 800173a:	4821      	ldr	r0, [pc, #132]	; (80017c0 <MX_GPIO_Init+0x13c>)
 800173c:	f003 fcac 	bl	8005098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001740:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001746:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800174a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001750:	f107 031c 	add.w	r3, r7, #28
 8001754:	4619      	mov	r1, r3
 8001756:	481b      	ldr	r0, [pc, #108]	; (80017c4 <MX_GPIO_Init+0x140>)
 8001758:	f003 faf2 	bl	8004d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800175c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001762:	2301      	movs	r3, #1
 8001764:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176e:	f107 031c 	add.w	r3, r7, #28
 8001772:	4619      	mov	r1, r3
 8001774:	4811      	ldr	r0, [pc, #68]	; (80017bc <MX_GPIO_Init+0x138>)
 8001776:	f003 fae3 	bl	8004d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800177a:	2340      	movs	r3, #64	; 0x40
 800177c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177e:	2301      	movs	r3, #1
 8001780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800178a:	f107 031c 	add.w	r3, r7, #28
 800178e:	4619      	mov	r1, r3
 8001790:	480b      	ldr	r0, [pc, #44]	; (80017c0 <MX_GPIO_Init+0x13c>)
 8001792:	f003 fad5 	bl	8004d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800179a:	2300      	movs	r3, #0
 800179c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	4619      	mov	r1, r3
 80017a8:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_GPIO_Init+0x13c>)
 80017aa:	f003 fac9 	bl	8004d40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017ae:	bf00      	nop
 80017b0:	3730      	adds	r7, #48	; 0x30
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40020400 	.word	0x40020400
 80017c0:	40021800 	.word	0x40021800
 80017c4:	40020800 	.word	0x40020800

080017c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80017d0:	f006 fde2 	bl	8008398 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);  // LED1 消灯
 80017d4:	2200      	movs	r2, #0
 80017d6:	2101      	movs	r1, #1
 80017d8:	4803      	ldr	r0, [pc, #12]	; (80017e8 <StartDefaultTask+0x20>)
 80017da:	f003 fc5d 	bl	8005098 <HAL_GPIO_WritePin>
//	if((button_data & CONTROLLER_CIRCLE) != 0){  // oボタンが押されている場合
//	   HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);  // LED1 点灯
//	}else{
//	   HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);  // LED1 消灯
//	}
	osDelay(100);
 80017de:	2064      	movs	r0, #100	; 0x64
 80017e0:	f007 fd54 	bl	800928c <osDelay>
 80017e4:	e7fb      	b.n	80017de <StartDefaultTask+0x16>
 80017e6:	bf00      	nop
 80017e8:	40020400 	.word	0x40020400

080017ec <freeRTOSChecker>:
/**
* @brief Function implementing the systemCheckTask thread.
* @param argument: Not used
* @retval None
*/
void freeRTOSChecker(){//無限ループの中で実行
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, LD2_Pin);  // PINのPin stateを反転
 80017f0:	2180      	movs	r1, #128	; 0x80
 80017f2:	4804      	ldr	r0, [pc, #16]	; (8001804 <freeRTOSChecker+0x18>)
 80017f4:	f003 fc69 	bl	80050ca <HAL_GPIO_TogglePin>
	printf("detect01\r\n");
 80017f8:	4803      	ldr	r0, [pc, #12]	; (8001808 <freeRTOSChecker+0x1c>)
 80017fa:	f015 fc7d 	bl	80170f8 <puts>

}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40020400 	.word	0x40020400
 8001808:	08018308 	.word	0x08018308

0800180c <airChecker>:
	ServoDriver_Init(&servo_device, &servo_param);  // Servo基板にパラメータを送信
	HAL_Delay(100);  // 適切なdelayを入れる
	ServoDriver_SendValue(&servo_device, 20.0f);  // サーボが20.0度になるように回転させる
}

void airChecker(){
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
	for(uint8_t i=PORT_1; i<=PORT_8; i++){  //すべてのポートを初期化しないとAir基板は動かない
 8001812:	2300      	movs	r3, #0
 8001814:	71fb      	strb	r3, [r7, #7]
 8001816:	e00c      	b.n	8001832 <airChecker+0x26>
	    air_device.device_num = i; // (i番ポートを指定)
 8001818:	4a13      	ldr	r2, [pc, #76]	; (8001868 <airChecker+0x5c>)
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	7093      	strb	r3, [r2, #2]
	    AirCylinder_Init(&air_device, AIR_OFF);
 800181e:	2100      	movs	r1, #0
 8001820:	4811      	ldr	r0, [pc, #68]	; (8001868 <airChecker+0x5c>)
 8001822:	f7ff fc47 	bl	80010b4 <AirCylinder_Init>
	    osDelay(10);  // このdelayは必要
 8001826:	200a      	movs	r0, #10
 8001828:	f007 fd30 	bl	800928c <osDelay>
	for(uint8_t i=PORT_1; i<=PORT_8; i++){  //すべてのポートを初期化しないとAir基板は動かない
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	3301      	adds	r3, #1
 8001830:	71fb      	strb	r3, [r7, #7]
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	2b07      	cmp	r3, #7
 8001836:	d9ef      	bls.n	8001818 <airChecker+0xc>
	  }
	  air_device.device_num=0; // とりあえず0番ポートのエアシリンダを動かします。
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <airChecker+0x5c>)
 800183a:	2200      	movs	r2, #0
 800183c:	709a      	strb	r2, [r3, #2]
	  AirCylinder_SendOutput(&air_device, AIR_ON);  // 0番ポートの電磁弁がonになる
 800183e:	2101      	movs	r1, #1
 8001840:	4809      	ldr	r0, [pc, #36]	; (8001868 <airChecker+0x5c>)
 8001842:	f7ff fc52 	bl	80010ea <AirCylinder_SendOutput>
	  osDelay(1000);
 8001846:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800184a:	f007 fd1f 	bl	800928c <osDelay>
	  AirCylinder_SendOutput(&air_device, AIR_OFF); // 0番ポートの電磁弁がoffになる
 800184e:	2100      	movs	r1, #0
 8001850:	4805      	ldr	r0, [pc, #20]	; (8001868 <airChecker+0x5c>)
 8001852:	f7ff fc4a 	bl	80010ea <AirCylinder_SendOutput>
	  osDelay(1000);
 8001856:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800185a:	f007 fd17 	bl	800928c <osDelay>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20004410 	.word	0x20004410

0800186c <StartSystemCheckTask>:
/* USER CODE END Header_StartSystemCheckTask */
void StartSystemCheckTask(void *argument)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSystemCheckTask */
	//servoChecker();
	airChecker();
 8001874:	f7ff ffca 	bl	800180c <airChecker>
  /* Infinite loop */
  for(;;)
  {
	  freeRTOSChecker();
 8001878:	f7ff ffb8 	bl	80017ec <freeRTOSChecker>
	  //mcmdChecker();
	  osDelay(1000);
 800187c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001880:	f007 fd04 	bl	800928c <osDelay>
	  freeRTOSChecker();
 8001884:	e7f8      	b.n	8001878 <StartSystemCheckTask+0xc>

08001886 <StartControllerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControllerTask */
void StartControllerTask(void *argument)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControllerTask */
  /* Infinite loop */
	//UDPControllerReceive(argument);
	for(;;){
		osDelay(1000);
 800188e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001892:	f007 fcfb 	bl	800928c <osDelay>
 8001896:	e7fa      	b.n	800188e <StartControllerTask+0x8>

08001898 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d101      	bne.n	80018ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018aa:	f000 fcfd 	bl	80022a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40002000 	.word	0x40002000

080018bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c0:	b672      	cpsid	i
}
 80018c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("error");
 80018c4:	4805      	ldr	r0, [pc, #20]	; (80018dc <Error_Handler+0x20>)
 80018c6:	f015 fb91 	bl	8016fec <iprintf>
	  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);  // LED1点灯
 80018ca:	2201      	movs	r2, #1
 80018cc:	2101      	movs	r1, #1
 80018ce:	4804      	ldr	r0, [pc, #16]	; (80018e0 <Error_Handler+0x24>)
 80018d0:	f003 fbe2 	bl	8005098 <HAL_GPIO_WritePin>
	  osDelay(100);
 80018d4:	2064      	movs	r0, #100	; 0x64
 80018d6:	f007 fcd9 	bl	800928c <osDelay>
	  printf("error");
 80018da:	e7f3      	b.n	80018c4 <Error_Handler+0x8>
 80018dc:	0801832c 	.word	0x0801832c
 80018e0:	40020400 	.word	0x40020400

080018e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HAL_MspInit+0x4c>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	4a10      	ldr	r2, [pc, #64]	; (8001930 <HAL_MspInit+0x4c>)
 80018f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f4:	6413      	str	r3, [r2, #64]	; 0x40
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <HAL_MspInit+0x4c>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_MspInit+0x4c>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <HAL_MspInit+0x4c>)
 8001908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800190c:	6453      	str	r3, [r2, #68]	; 0x44
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <HAL_MspInit+0x4c>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	210f      	movs	r1, #15
 800191e:	f06f 0001 	mvn.w	r0, #1
 8001922:	f001 fc19 	bl	8003158 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800

08001934 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	; 0x28
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a23      	ldr	r2, [pc, #140]	; (80019e0 <HAL_CAN_MspInit+0xac>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d13f      	bne.n	80019d6 <HAL_CAN_MspInit+0xa2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001956:	4b23      	ldr	r3, [pc, #140]	; (80019e4 <HAL_CAN_MspInit+0xb0>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	4a22      	ldr	r2, [pc, #136]	; (80019e4 <HAL_CAN_MspInit+0xb0>)
 800195c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001960:	6413      	str	r3, [r2, #64]	; 0x40
 8001962:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <HAL_CAN_MspInit+0xb0>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800196e:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <HAL_CAN_MspInit+0xb0>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a1c      	ldr	r2, [pc, #112]	; (80019e4 <HAL_CAN_MspInit+0xb0>)
 8001974:	f043 0308 	orr.w	r3, r3, #8
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <HAL_CAN_MspInit+0xb0>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001986:	2303      	movs	r3, #3
 8001988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001992:	2303      	movs	r3, #3
 8001994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001996:	2309      	movs	r3, #9
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	4811      	ldr	r0, [pc, #68]	; (80019e8 <HAL_CAN_MspInit+0xb4>)
 80019a2:	f003 f9cd 	bl	8004d40 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2105      	movs	r1, #5
 80019aa:	2013      	movs	r0, #19
 80019ac:	f001 fbd4 	bl	8003158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80019b0:	2013      	movs	r0, #19
 80019b2:	f001 fbed 	bl	8003190 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2105      	movs	r1, #5
 80019ba:	2014      	movs	r0, #20
 80019bc:	f001 fbcc 	bl	8003158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80019c0:	2014      	movs	r0, #20
 80019c2:	f001 fbe5 	bl	8003190 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2105      	movs	r1, #5
 80019ca:	2015      	movs	r0, #21
 80019cc:	f001 fbc4 	bl	8003158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80019d0:	2015      	movs	r0, #21
 80019d2:	f001 fbdd 	bl	8003190 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80019d6:	bf00      	nop
 80019d8:	3728      	adds	r7, #40	; 0x28
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40006400 	.word	0x40006400
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40020c00 	.word	0x40020c00

080019ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b0ae      	sub	sp, #184	; 0xb8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	2290      	movs	r2, #144	; 0x90
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f015 fae5 	bl	8016fdc <memset>
  if(huart->Instance==USART3)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a3d      	ldr	r2, [pc, #244]	; (8001b0c <HAL_UART_MspInit+0x120>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d172      	bne.n	8001b02 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a20:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a22:	2300      	movs	r3, #0
 8001a24:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f004 fa16 	bl	8005e5c <HAL_RCCEx_PeriphCLKConfig>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a36:	f7ff ff41 	bl	80018bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a3a:	4b35      	ldr	r3, [pc, #212]	; (8001b10 <HAL_UART_MspInit+0x124>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	4a34      	ldr	r2, [pc, #208]	; (8001b10 <HAL_UART_MspInit+0x124>)
 8001a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a44:	6413      	str	r3, [r2, #64]	; 0x40
 8001a46:	4b32      	ldr	r3, [pc, #200]	; (8001b10 <HAL_UART_MspInit+0x124>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a52:	4b2f      	ldr	r3, [pc, #188]	; (8001b10 <HAL_UART_MspInit+0x124>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a2e      	ldr	r2, [pc, #184]	; (8001b10 <HAL_UART_MspInit+0x124>)
 8001a58:	f043 0308 	orr.w	r3, r3, #8
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b2c      	ldr	r3, [pc, #176]	; (8001b10 <HAL_UART_MspInit+0x124>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a72:	2302      	movs	r3, #2
 8001a74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a84:	2307      	movs	r3, #7
 8001a86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a8a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4820      	ldr	r0, [pc, #128]	; (8001b14 <HAL_UART_MspInit+0x128>)
 8001a92:	f003 f955 	bl	8004d40 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001a96:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <HAL_UART_MspInit+0x12c>)
 8001a98:	4a20      	ldr	r2, [pc, #128]	; (8001b1c <HAL_UART_MspInit+0x130>)
 8001a9a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001a9c:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <HAL_UART_MspInit+0x12c>)
 8001a9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aa2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001aa4:	4b1c      	ldr	r3, [pc, #112]	; (8001b18 <HAL_UART_MspInit+0x12c>)
 8001aa6:	2240      	movs	r2, #64	; 0x40
 8001aa8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aaa:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <HAL_UART_MspInit+0x12c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ab0:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <HAL_UART_MspInit+0x12c>)
 8001ab2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ab6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ab8:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <HAL_UART_MspInit+0x12c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001abe:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <HAL_UART_MspInit+0x12c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <HAL_UART_MspInit+0x12c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001aca:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <HAL_UART_MspInit+0x12c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <HAL_UART_MspInit+0x12c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001ad6:	4810      	ldr	r0, [pc, #64]	; (8001b18 <HAL_UART_MspInit+0x12c>)
 8001ad8:	f001 fb68 	bl	80031ac <HAL_DMA_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001ae2:	f7ff feeb 	bl	80018bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <HAL_UART_MspInit+0x12c>)
 8001aea:	671a      	str	r2, [r3, #112]	; 0x70
 8001aec:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <HAL_UART_MspInit+0x12c>)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2105      	movs	r1, #5
 8001af6:	2027      	movs	r0, #39	; 0x27
 8001af8:	f001 fb2e 	bl	8003158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001afc:	2027      	movs	r0, #39	; 0x27
 8001afe:	f001 fb47 	bl	8003190 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b02:	bf00      	nop
 8001b04:	37b8      	adds	r7, #184	; 0xb8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40004800 	.word	0x40004800
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020c00 	.word	0x40020c00
 8001b18:	20002580 	.word	0x20002580
 8001b1c:	40026058 	.word	0x40026058

08001b20 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b0ae      	sub	sp, #184	; 0xb8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	2290      	movs	r2, #144	; 0x90
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f015 fa4b 	bl	8016fdc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b4e:	d159      	bne.n	8001c04 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001b50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b54:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	4618      	mov	r0, r3
 8001b62:	f004 f97b 	bl	8005e5c <HAL_RCCEx_PeriphCLKConfig>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001b6c:	f7ff fea6 	bl	80018bc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b70:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <HAL_PCD_MspInit+0xec>)
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	4a25      	ldr	r2, [pc, #148]	; (8001c0c <HAL_PCD_MspInit+0xec>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7c:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <HAL_PCD_MspInit+0xec>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001b88:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001b8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ba2:	230a      	movs	r3, #10
 8001ba4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bac:	4619      	mov	r1, r3
 8001bae:	4818      	ldr	r0, [pc, #96]	; (8001c10 <HAL_PCD_MspInit+0xf0>)
 8001bb0:	f003 f8c6 	bl	8004d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001bc8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4810      	ldr	r0, [pc, #64]	; (8001c10 <HAL_PCD_MspInit+0xf0>)
 8001bd0:	f003 f8b6 	bl	8004d40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <HAL_PCD_MspInit+0xec>)
 8001bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd8:	4a0c      	ldr	r2, [pc, #48]	; (8001c0c <HAL_PCD_MspInit+0xec>)
 8001bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bde:	6353      	str	r3, [r2, #52]	; 0x34
 8001be0:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_PCD_MspInit+0xec>)
 8001be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <HAL_PCD_MspInit+0xec>)
 8001bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf0:	4a06      	ldr	r2, [pc, #24]	; (8001c0c <HAL_PCD_MspInit+0xec>)
 8001bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf6:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf8:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <HAL_PCD_MspInit+0xec>)
 8001bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001c04:	bf00      	nop
 8001c06:	37b8      	adds	r7, #184	; 0xb8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020000 	.word	0x40020000

08001c14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08e      	sub	sp, #56	; 0x38
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001c24:	4b33      	ldr	r3, [pc, #204]	; (8001cf4 <HAL_InitTick+0xe0>)
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	4a32      	ldr	r2, [pc, #200]	; (8001cf4 <HAL_InitTick+0xe0>)
 8001c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c30:	4b30      	ldr	r3, [pc, #192]	; (8001cf4 <HAL_InitTick+0xe0>)
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c3c:	f107 0210 	add.w	r2, r7, #16
 8001c40:	f107 0314 	add.w	r3, r7, #20
 8001c44:	4611      	mov	r1, r2
 8001c46:	4618      	mov	r0, r3
 8001c48:	f004 f8d6 	bl	8005df8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d103      	bne.n	8001c5e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c56:	f004 f8a7 	bl	8005da8 <HAL_RCC_GetPCLK1Freq>
 8001c5a:	6378      	str	r0, [r7, #52]	; 0x34
 8001c5c:	e004      	b.n	8001c68 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c5e:	f004 f8a3 	bl	8005da8 <HAL_RCC_GetPCLK1Freq>
 8001c62:	4603      	mov	r3, r0
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c6a:	4a23      	ldr	r2, [pc, #140]	; (8001cf8 <HAL_InitTick+0xe4>)
 8001c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c70:	0c9b      	lsrs	r3, r3, #18
 8001c72:	3b01      	subs	r3, #1
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001c76:	4b21      	ldr	r3, [pc, #132]	; (8001cfc <HAL_InitTick+0xe8>)
 8001c78:	4a21      	ldr	r2, [pc, #132]	; (8001d00 <HAL_InitTick+0xec>)
 8001c7a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001c7c:	4b1f      	ldr	r3, [pc, #124]	; (8001cfc <HAL_InitTick+0xe8>)
 8001c7e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c82:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001c84:	4a1d      	ldr	r2, [pc, #116]	; (8001cfc <HAL_InitTick+0xe8>)
 8001c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c88:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001c8a:	4b1c      	ldr	r3, [pc, #112]	; (8001cfc <HAL_InitTick+0xe8>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c90:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <HAL_InitTick+0xe8>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c96:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <HAL_InitTick+0xe8>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001c9c:	4817      	ldr	r0, [pc, #92]	; (8001cfc <HAL_InitTick+0xe8>)
 8001c9e:	f004 fd05 	bl	80066ac <HAL_TIM_Base_Init>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001ca8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d11b      	bne.n	8001ce8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8001cb0:	4812      	ldr	r0, [pc, #72]	; (8001cfc <HAL_InitTick+0xe8>)
 8001cb2:	f004 fd5d 	bl	8006770 <HAL_TIM_Base_Start_IT>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001cbc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d111      	bne.n	8001ce8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001cc4:	202d      	movs	r0, #45	; 0x2d
 8001cc6:	f001 fa63 	bl	8003190 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b0f      	cmp	r3, #15
 8001cce:	d808      	bhi.n	8001ce2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	202d      	movs	r0, #45	; 0x2d
 8001cd6:	f001 fa3f 	bl	8003158 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cda:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <HAL_InitTick+0xf0>)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	e002      	b.n	8001ce8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001ce8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3738      	adds	r7, #56	; 0x38
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	431bde83 	.word	0x431bde83
 8001cfc:	20004414 	.word	0x20004414
 8001d00:	40002000 	.word	0x40002000
 8001d04:	20000004 	.word	0x20000004

08001d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <NMI_Handler+0x4>

08001d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d12:	e7fe      	b.n	8001d12 <HardFault_Handler+0x4>

08001d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d18:	e7fe      	b.n	8001d18 <MemManage_Handler+0x4>

08001d1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d1e:	e7fe      	b.n	8001d1e <BusFault_Handler+0x4>

08001d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d24:	e7fe      	b.n	8001d24 <UsageFault_Handler+0x4>

08001d26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001d38:	4802      	ldr	r0, [pc, #8]	; (8001d44 <DMA1_Stream3_IRQHandler+0x10>)
 8001d3a:	f001 fb77 	bl	800342c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20002580 	.word	0x20002580

08001d48 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d4c:	4802      	ldr	r0, [pc, #8]	; (8001d58 <CAN1_TX_IRQHandler+0x10>)
 8001d4e:	f000 ff58 	bl	8002c02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200024d0 	.word	0x200024d0

08001d5c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d60:	4802      	ldr	r0, [pc, #8]	; (8001d6c <CAN1_RX0_IRQHandler+0x10>)
 8001d62:	f000 ff4e 	bl	8002c02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200024d0 	.word	0x200024d0

08001d70 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d74:	4802      	ldr	r0, [pc, #8]	; (8001d80 <CAN1_RX1_IRQHandler+0x10>)
 8001d76:	f000 ff44 	bl	8002c02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200024d0 	.word	0x200024d0

08001d84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d88:	4802      	ldr	r0, [pc, #8]	; (8001d94 <USART3_IRQHandler+0x10>)
 8001d8a:	f005 f841 	bl	8006e10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	200024f8 	.word	0x200024f8

08001d98 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001d9c:	4802      	ldr	r0, [pc, #8]	; (8001da8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001d9e:	f004 fd5f 	bl	8006860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20004414 	.word	0x20004414

08001dac <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001db0:	4802      	ldr	r0, [pc, #8]	; (8001dbc <ETH_IRQHandler+0x10>)
 8001db2:	f002 f8f1 	bl	8003f98 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20008e6c 	.word	0x20008e6c

08001dc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return 1;
 8001dc4:	2301      	movs	r3, #1
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <_kill>:

int _kill(int pid, int sig)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dda:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <_kill+0x20>)
 8001ddc:	2216      	movs	r2, #22
 8001dde:	601a      	str	r2, [r3, #0]
  return -1;
 8001de0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	2001117c 	.word	0x2001117c

08001df4 <_exit>:

void _exit (int status)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ffe5 	bl	8001dd0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e06:	e7fe      	b.n	8001e06 <_exit+0x12>

08001e08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	e00a      	b.n	8001e30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e1a:	f3af 8000 	nop.w
 8001e1e:	4601      	mov	r1, r0
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	60ba      	str	r2, [r7, #8]
 8001e26:	b2ca      	uxtb	r2, r1
 8001e28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	dbf0      	blt.n	8001e1a <_read+0x12>
  }

  return len;
 8001e38:	687b      	ldr	r3, [r7, #4]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b086      	sub	sp, #24
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	e009      	b.n	8001e68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	60ba      	str	r2, [r7, #8]
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fa11 	bl	8001284 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	3301      	adds	r3, #1
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	dbf1      	blt.n	8001e54 <_write+0x12>
  }
  return len;
 8001e70:	687b      	ldr	r3, [r7, #4]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <_close>:

int _close(int file)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ea2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <_isatty>:

int _isatty(int file)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001eba:	2301      	movs	r3, #1
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eec:	4a14      	ldr	r2, [pc, #80]	; (8001f40 <_sbrk+0x5c>)
 8001eee:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <_sbrk+0x60>)
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ef8:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <_sbrk+0x64>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d102      	bne.n	8001f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <_sbrk+0x64>)
 8001f02:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <_sbrk+0x68>)
 8001f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f06:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <_sbrk+0x64>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d205      	bcs.n	8001f20 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001f14:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <_sbrk+0x6c>)
 8001f16:	220c      	movs	r2, #12
 8001f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1e:	e009      	b.n	8001f34 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f20:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <_sbrk+0x64>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f26:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <_sbrk+0x64>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	4a06      	ldr	r2, [pc, #24]	; (8001f48 <_sbrk+0x64>)
 8001f30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f32:	68fb      	ldr	r3, [r7, #12]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	371c      	adds	r7, #28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	20080000 	.word	0x20080000
 8001f44:	00000400 	.word	0x00000400
 8001f48:	20004460 	.word	0x20004460
 8001f4c:	20011190 	.word	0x20011190
 8001f50:	2001117c 	.word	0x2001117c

08001f54 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <SystemInit+0x20>)
 8001f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5e:	4a05      	ldr	r2, [pc, #20]	; (8001f74 <SystemInit+0x20>)
 8001f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f7c:	480d      	ldr	r0, [pc, #52]	; (8001fb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f7e:	490e      	ldr	r1, [pc, #56]	; (8001fb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f80:	4a0e      	ldr	r2, [pc, #56]	; (8001fbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f84:	e002      	b.n	8001f8c <LoopCopyDataInit>

08001f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f8a:	3304      	adds	r3, #4

08001f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f90:	d3f9      	bcc.n	8001f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f92:	4a0b      	ldr	r2, [pc, #44]	; (8001fc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f94:	4c0b      	ldr	r4, [pc, #44]	; (8001fc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f98:	e001      	b.n	8001f9e <LoopFillZerobss>

08001f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f9c:	3204      	adds	r2, #4

08001f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa0:	d3fb      	bcc.n	8001f9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fa2:	f7ff ffd7 	bl	8001f54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fa6:	f014 ffd7 	bl	8016f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001faa:	f7ff fa03 	bl	80013b4 <main>
  bx  lr    
 8001fae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fb0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001fbc:	0801b14c 	.word	0x0801b14c
  ldr r2, =_sbss
 8001fc0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001fc4:	20011190 	.word	0x20011190

08001fc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fc8:	e7fe      	b.n	8001fc8 <ADC_IRQHandler>

08001fca <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00b      	beq.n	8001ff2 <LAN8742_RegisterBusIO+0x28>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d007      	beq.n	8001ff2 <LAN8742_RegisterBusIO+0x28>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <LAN8742_RegisterBusIO+0x28>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d102      	bne.n	8001ff8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff6:	e014      	b.n	8002022 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800202e:	b580      	push	{r7, lr}
 8002030:	b086      	sub	sp, #24
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	2300      	movs	r3, #0
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d17c      	bne.n	8002148 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2220      	movs	r2, #32
 8002060:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	e01c      	b.n	80020a2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	f107 0208 	add.w	r2, r7, #8
 8002070:	2112      	movs	r1, #18
 8002072:	6978      	ldr	r0, [r7, #20]
 8002074:	4798      	blx	r3
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	da03      	bge.n	8002084 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800207c:	f06f 0304 	mvn.w	r3, #4
 8002080:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8002082:	e00b      	b.n	800209c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f003 031f 	and.w	r3, r3, #31
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	429a      	cmp	r2, r3
 800208e:	d105      	bne.n	800209c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
         break;
 800209a:	e005      	b.n	80020a8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	3301      	adds	r3, #1
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2b1f      	cmp	r3, #31
 80020a6:	d9df      	bls.n	8002068 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b1f      	cmp	r3, #31
 80020ae:	d902      	bls.n	80020b6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80020b0:	f06f 0302 	mvn.w	r3, #2
 80020b4:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d145      	bne.n	8002148 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6810      	ldr	r0, [r2, #0]
 80020c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020c8:	2100      	movs	r1, #0
 80020ca:	4798      	blx	r3
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	db37      	blt.n	8002142 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6810      	ldr	r0, [r2, #0]
 80020da:	f107 0208 	add.w	r2, r7, #8
 80020de:	2100      	movs	r1, #0
 80020e0:	4798      	blx	r3
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	db28      	blt.n	800213a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	4798      	blx	r3
 80020ee:	4603      	mov	r3, r0
 80020f0:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80020f2:	e01c      	b.n	800212e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	4798      	blx	r3
 80020fa:	4603      	mov	r3, r0
 80020fc:	461a      	mov	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002106:	d80e      	bhi.n	8002126 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6810      	ldr	r0, [r2, #0]
 8002110:	f107 0208 	add.w	r2, r7, #8
 8002114:	2100      	movs	r1, #0
 8002116:	4798      	blx	r3
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	da07      	bge.n	800212e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800211e:	f06f 0304 	mvn.w	r3, #4
 8002122:	613b      	str	r3, [r7, #16]
                 break;
 8002124:	e010      	b.n	8002148 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002126:	f06f 0301 	mvn.w	r3, #1
 800212a:	613b      	str	r3, [r7, #16]
               break;
 800212c:	e00c      	b.n	8002148 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1dd      	bne.n	80020f4 <LAN8742_Init+0xc6>
 8002138:	e006      	b.n	8002148 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800213a:	f06f 0304 	mvn.w	r3, #4
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	e002      	b.n	8002148 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8002142:	f06f 0303 	mvn.w	r3, #3
 8002146:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d112      	bne.n	8002174 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	4798      	blx	r3
 8002154:	4603      	mov	r3, r0
 8002156:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002158:	bf00      	nop
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	4798      	blx	r3
 8002160:	4603      	mov	r3, r0
 8002162:	461a      	mov	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800216c:	d9f5      	bls.n	800215a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002174:	693b      	ldr	r3, [r7, #16]
 }
 8002176:	4618      	mov	r0, r3
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b084      	sub	sp, #16
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6810      	ldr	r0, [r2, #0]
 8002192:	f107 020c 	add.w	r2, r7, #12
 8002196:	2101      	movs	r1, #1
 8002198:	4798      	blx	r3
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	da02      	bge.n	80021a6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80021a0:	f06f 0304 	mvn.w	r3, #4
 80021a4:	e06e      	b.n	8002284 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6810      	ldr	r0, [r2, #0]
 80021ae:	f107 020c 	add.w	r2, r7, #12
 80021b2:	2101      	movs	r1, #1
 80021b4:	4798      	blx	r3
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	da02      	bge.n	80021c2 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80021bc:	f06f 0304 	mvn.w	r3, #4
 80021c0:	e060      	b.n	8002284 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80021cc:	2301      	movs	r3, #1
 80021ce:	e059      	b.n	8002284 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6810      	ldr	r0, [r2, #0]
 80021d8:	f107 020c 	add.w	r2, r7, #12
 80021dc:	2100      	movs	r1, #0
 80021de:	4798      	blx	r3
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	da02      	bge.n	80021ec <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80021e6:	f06f 0304 	mvn.w	r3, #4
 80021ea:	e04b      	b.n	8002284 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d11b      	bne.n	800222e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d006      	beq.n	800220e <LAN8742_GetLinkState+0x90>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800220a:	2302      	movs	r3, #2
 800220c:	e03a      	b.n	8002284 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002218:	2303      	movs	r3, #3
 800221a:	e033      	b.n	8002284 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002226:	2304      	movs	r3, #4
 8002228:	e02c      	b.n	8002284 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800222a:	2305      	movs	r3, #5
 800222c:	e02a      	b.n	8002284 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6810      	ldr	r0, [r2, #0]
 8002236:	f107 020c 	add.w	r2, r7, #12
 800223a:	211f      	movs	r1, #31
 800223c:	4798      	blx	r3
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	da02      	bge.n	800224a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002244:	f06f 0304 	mvn.w	r3, #4
 8002248:	e01c      	b.n	8002284 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002254:	2306      	movs	r3, #6
 8002256:	e015      	b.n	8002284 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 031c 	and.w	r3, r3, #28
 800225e:	2b18      	cmp	r3, #24
 8002260:	d101      	bne.n	8002266 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002262:	2302      	movs	r3, #2
 8002264:	e00e      	b.n	8002284 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f003 031c 	and.w	r3, r3, #28
 800226c:	2b08      	cmp	r3, #8
 800226e:	d101      	bne.n	8002274 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002270:	2303      	movs	r3, #3
 8002272:	e007      	b.n	8002284 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f003 031c 	and.w	r3, r3, #28
 800227a:	2b14      	cmp	r3, #20
 800227c:	d101      	bne.n	8002282 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800227e:	2304      	movs	r3, #4
 8002280:	e000      	b.n	8002284 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002282:	2305      	movs	r3, #5
    }				
  }
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002290:	2003      	movs	r0, #3
 8002292:	f000 ff56 	bl	8003142 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002296:	200f      	movs	r0, #15
 8002298:	f7ff fcbc 	bl	8001c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800229c:	f7ff fb22 	bl	80018e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <HAL_IncTick+0x20>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_IncTick+0x24>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4413      	add	r3, r2
 80022b8:	4a04      	ldr	r2, [pc, #16]	; (80022cc <HAL_IncTick+0x24>)
 80022ba:	6013      	str	r3, [r2, #0]
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	20000008 	.word	0x20000008
 80022cc:	20004464 	.word	0x20004464

080022d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return uwTick;
 80022d4:	4b03      	ldr	r3, [pc, #12]	; (80022e4 <HAL_GetTick+0x14>)
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20004464 	.word	0x20004464

080022e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f0:	f7ff ffee 	bl	80022d0 <HAL_GetTick>
 80022f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002300:	d005      	beq.n	800230e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <HAL_Delay+0x44>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4413      	add	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800230e:	bf00      	nop
 8002310:	f7ff ffde 	bl	80022d0 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	429a      	cmp	r2, r3
 800231e:	d8f7      	bhi.n	8002310 <HAL_Delay+0x28>
  {
  }
}
 8002320:	bf00      	nop
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000008 	.word	0x20000008

08002330 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e0ed      	b.n	800251e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d102      	bne.n	8002354 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff faf0 	bl	8001934 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0201 	orr.w	r2, r2, #1
 8002362:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002364:	f7ff ffb4 	bl	80022d0 <HAL_GetTick>
 8002368:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800236a:	e012      	b.n	8002392 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800236c:	f7ff ffb0 	bl	80022d0 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b0a      	cmp	r3, #10
 8002378:	d90b      	bls.n	8002392 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2205      	movs	r2, #5
 800238a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e0c5      	b.n	800251e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0e5      	beq.n	800236c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0202 	bic.w	r2, r2, #2
 80023ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023b0:	f7ff ff8e 	bl	80022d0 <HAL_GetTick>
 80023b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023b6:	e012      	b.n	80023de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023b8:	f7ff ff8a 	bl	80022d0 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b0a      	cmp	r3, #10
 80023c4:	d90b      	bls.n	80023de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2205      	movs	r2, #5
 80023d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e09f      	b.n	800251e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1e5      	bne.n	80023b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	7e1b      	ldrb	r3, [r3, #24]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d108      	bne.n	8002406 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	e007      	b.n	8002416 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002414:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	7e5b      	ldrb	r3, [r3, #25]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d108      	bne.n	8002430 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	e007      	b.n	8002440 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800243e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	7e9b      	ldrb	r3, [r3, #26]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d108      	bne.n	800245a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0220 	orr.w	r2, r2, #32
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	e007      	b.n	800246a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0220 	bic.w	r2, r2, #32
 8002468:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	7edb      	ldrb	r3, [r3, #27]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d108      	bne.n	8002484 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0210 	bic.w	r2, r2, #16
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	e007      	b.n	8002494 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0210 	orr.w	r2, r2, #16
 8002492:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	7f1b      	ldrb	r3, [r3, #28]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d108      	bne.n	80024ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0208 	orr.w	r2, r2, #8
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	e007      	b.n	80024be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0208 	bic.w	r2, r2, #8
 80024bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	7f5b      	ldrb	r3, [r3, #29]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d108      	bne.n	80024d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f042 0204 	orr.w	r2, r2, #4
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	e007      	b.n	80024e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0204 	bic.w	r2, r2, #4
 80024e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	431a      	orrs	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	ea42 0103 	orr.w	r1, r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	1e5a      	subs	r2, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002528:	b480      	push	{r7}
 800252a:	b087      	sub	sp, #28
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800253e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002540:	7cfb      	ldrb	r3, [r7, #19]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d003      	beq.n	800254e <HAL_CAN_ConfigFilter+0x26>
 8002546:	7cfb      	ldrb	r3, [r7, #19]
 8002548:	2b02      	cmp	r3, #2
 800254a:	f040 80c7 	bne.w	80026dc <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a69      	ldr	r2, [pc, #420]	; (80026f8 <HAL_CAN_ConfigFilter+0x1d0>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d001      	beq.n	800255c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002558:	4b68      	ldr	r3, [pc, #416]	; (80026fc <HAL_CAN_ConfigFilter+0x1d4>)
 800255a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002562:	f043 0201 	orr.w	r2, r3, #1
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	4a63      	ldr	r2, [pc, #396]	; (80026fc <HAL_CAN_ConfigFilter+0x1d4>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d111      	bne.n	8002598 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800257a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	021b      	lsls	r3, r3, #8
 8002590:	431a      	orrs	r2, r3
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	2201      	movs	r2, #1
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	401a      	ands	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d123      	bne.n	800260a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	401a      	ands	r2, r3
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025e4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	3248      	adds	r2, #72	; 0x48
 80025ea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025fe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002600:	6979      	ldr	r1, [r7, #20]
 8002602:	3348      	adds	r3, #72	; 0x48
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	440b      	add	r3, r1
 8002608:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d122      	bne.n	8002658 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	431a      	orrs	r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002632:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	3248      	adds	r2, #72	; 0x48
 8002638:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800264c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800264e:	6979      	ldr	r1, [r7, #20]
 8002650:	3348      	adds	r3, #72	; 0x48
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	440b      	add	r3, r1
 8002656:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d109      	bne.n	8002674 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	43db      	mvns	r3, r3
 800266a:	401a      	ands	r2, r3
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002672:	e007      	b.n	8002684 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	431a      	orrs	r2, r3
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d109      	bne.n	80026a0 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	43db      	mvns	r3, r3
 8002696:	401a      	ands	r2, r3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800269e:	e007      	b.n	80026b0 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d107      	bne.n	80026c8 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	431a      	orrs	r2, r3
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026ce:	f023 0201 	bic.w	r2, r3, #1
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80026d8:	2300      	movs	r3, #0
 80026da:	e006      	b.n	80026ea <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
  }
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	371c      	adds	r7, #28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40003400 	.word	0x40003400
 80026fc:	40006400 	.word	0x40006400

08002700 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b01      	cmp	r3, #1
 8002712:	d12e      	bne.n	8002772 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2202      	movs	r2, #2
 8002718:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 0201 	bic.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800272c:	f7ff fdd0 	bl	80022d0 <HAL_GetTick>
 8002730:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002732:	e012      	b.n	800275a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002734:	f7ff fdcc 	bl	80022d0 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b0a      	cmp	r3, #10
 8002740:	d90b      	bls.n	800275a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2205      	movs	r2, #5
 8002752:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e012      	b.n	8002780 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1e5      	bne.n	8002734 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	e006      	b.n	8002780 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
  }
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002788:	b480      	push	{r7}
 800278a:	b089      	sub	sp, #36	; 0x24
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
 8002794:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f893 3020 	ldrb.w	r3, [r3, #32]
 800279c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80027a6:	7ffb      	ldrb	r3, [r7, #31]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d003      	beq.n	80027b4 <HAL_CAN_AddTxMessage+0x2c>
 80027ac:	7ffb      	ldrb	r3, [r7, #31]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	f040 80ad 	bne.w	800290e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10a      	bne.n	80027d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d105      	bne.n	80027d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 8095 	beq.w	80028fe <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	0e1b      	lsrs	r3, r3, #24
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80027de:	2201      	movs	r2, #1
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	409a      	lsls	r2, r3
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10d      	bne.n	800280c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80027fa:	68f9      	ldr	r1, [r7, #12]
 80027fc:	6809      	ldr	r1, [r1, #0]
 80027fe:	431a      	orrs	r2, r3
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	3318      	adds	r3, #24
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	440b      	add	r3, r1
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	e00f      	b.n	800282c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002816:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800281c:	68f9      	ldr	r1, [r7, #12]
 800281e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002820:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	3318      	adds	r3, #24
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	440b      	add	r3, r1
 800282a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6819      	ldr	r1, [r3, #0]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	3318      	adds	r3, #24
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	440b      	add	r3, r1
 800283c:	3304      	adds	r3, #4
 800283e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	7d1b      	ldrb	r3, [r3, #20]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d111      	bne.n	800286c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	3318      	adds	r3, #24
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	4413      	add	r3, r2
 8002854:	3304      	adds	r3, #4
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	6811      	ldr	r1, [r2, #0]
 800285c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	3318      	adds	r3, #24
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	440b      	add	r3, r1
 8002868:	3304      	adds	r3, #4
 800286a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3307      	adds	r3, #7
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	061a      	lsls	r2, r3, #24
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3306      	adds	r3, #6
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	041b      	lsls	r3, r3, #16
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3305      	adds	r3, #5
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	021b      	lsls	r3, r3, #8
 8002886:	4313      	orrs	r3, r2
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	3204      	adds	r2, #4
 800288c:	7812      	ldrb	r2, [r2, #0]
 800288e:	4610      	mov	r0, r2
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	6811      	ldr	r1, [r2, #0]
 8002894:	ea43 0200 	orr.w	r2, r3, r0
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	440b      	add	r3, r1
 800289e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80028a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3303      	adds	r3, #3
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	061a      	lsls	r2, r3, #24
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3302      	adds	r3, #2
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	041b      	lsls	r3, r3, #16
 80028b4:	431a      	orrs	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3301      	adds	r3, #1
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	021b      	lsls	r3, r3, #8
 80028be:	4313      	orrs	r3, r2
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	7812      	ldrb	r2, [r2, #0]
 80028c4:	4610      	mov	r0, r2
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	6811      	ldr	r1, [r2, #0]
 80028ca:	ea43 0200 	orr.w	r2, r3, r0
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	440b      	add	r3, r1
 80028d4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80028d8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	3318      	adds	r3, #24
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	4413      	add	r3, r2
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	6811      	ldr	r1, [r2, #0]
 80028ec:	f043 0201 	orr.w	r2, r3, #1
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	3318      	adds	r3, #24
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	440b      	add	r3, r1
 80028f8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	e00e      	b.n	800291c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e006      	b.n	800291c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
  }
}
 800291c:	4618      	mov	r0, r3
 800291e:	3724      	adds	r7, #36	; 0x24
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3020 	ldrb.w	r3, [r3, #32]
 800293a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800293c:	7afb      	ldrb	r3, [r7, #11]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d002      	beq.n	8002948 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002942:	7afb      	ldrb	r3, [r7, #11]
 8002944:	2b02      	cmp	r3, #2
 8002946:	d11d      	bne.n	8002984 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d002      	beq.n	800295c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	3301      	adds	r3, #1
 800295a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	3301      	adds	r3, #1
 800296e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	3301      	adds	r3, #1
 8002982:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002984:	68fb      	ldr	r3, [r7, #12]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002992:	b480      	push	{r7}
 8002994:	b087      	sub	sp, #28
 8002996:	af00      	add	r7, sp, #0
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029a6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80029a8:	7dfb      	ldrb	r3, [r7, #23]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d003      	beq.n	80029b6 <HAL_CAN_GetRxMessage+0x24>
 80029ae:	7dfb      	ldrb	r3, [r7, #23]
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	f040 80f3 	bne.w	8002b9c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10e      	bne.n	80029da <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d116      	bne.n	80029f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e0e7      	b.n	8002baa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d107      	bne.n	80029f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0d8      	b.n	8002baa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	331b      	adds	r3, #27
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	4413      	add	r3, r2
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0204 	and.w	r2, r3, #4
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10c      	bne.n	8002a30 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	331b      	adds	r3, #27
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	4413      	add	r3, r2
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	0d5b      	lsrs	r3, r3, #21
 8002a26:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	e00b      	b.n	8002a48 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	331b      	adds	r3, #27
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	4413      	add	r3, r2
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	08db      	lsrs	r3, r3, #3
 8002a40:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	331b      	adds	r3, #27
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	4413      	add	r3, r2
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0202 	and.w	r2, r3, #2
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	331b      	adds	r3, #27
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	4413      	add	r3, r2
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 020f 	and.w	r2, r3, #15
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	331b      	adds	r3, #27
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	4413      	add	r3, r2
 8002a82:	3304      	adds	r3, #4
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	0a1b      	lsrs	r3, r3, #8
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	331b      	adds	r3, #27
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	4413      	add	r3, r2
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	0c1b      	lsrs	r3, r3, #16
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	0a1a      	lsrs	r2, r3, #8
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	0c1a      	lsrs	r2, r3, #16
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	3302      	adds	r3, #2
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	0e1a      	lsrs	r2, r3, #24
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	3303      	adds	r3, #3
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	0a1a      	lsrs	r2, r3, #8
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	3305      	adds	r3, #5
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	4413      	add	r3, r2
 8002b46:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	0c1a      	lsrs	r2, r3, #16
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	3306      	adds	r3, #6
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	0e1a      	lsrs	r2, r3, #24
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	3307      	adds	r3, #7
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d108      	bne.n	8002b88 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f042 0220 	orr.w	r2, r2, #32
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	e007      	b.n	8002b98 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691a      	ldr	r2, [r3, #16]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0220 	orr.w	r2, r2, #32
 8002b96:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	e006      	b.n	8002baa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
  }
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	371c      	adds	r7, #28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b085      	sub	sp, #20
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bc6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d002      	beq.n	8002bd4 <HAL_CAN_ActivateNotification+0x1e>
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d109      	bne.n	8002be8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6959      	ldr	r1, [r3, #20]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	e006      	b.n	8002bf6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
  }
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b08a      	sub	sp, #40	; 0x28
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d07c      	beq.n	8002d42 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d023      	beq.n	8002c9a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2201      	movs	r2, #1
 8002c58:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7fe fb21 	bl	80012ac <HAL_CAN_TxMailbox0CompleteCallback>
 8002c6a:	e016      	b.n	8002c9a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d004      	beq.n	8002c80 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c7e:	e00c      	b.n	8002c9a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d004      	beq.n	8002c94 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
 8002c92:	e002      	b.n	8002c9a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7fe fb13 	bl	80012c0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d024      	beq.n	8002cee <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7fe fb0b 	bl	80012d4 <HAL_CAN_TxMailbox1CompleteCallback>
 8002cbe:	e016      	b.n	8002cee <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d004      	beq.n	8002cd4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd2:	e00c      	b.n	8002cee <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d004      	beq.n	8002ce8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce6:	e002      	b.n	8002cee <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7fe fafd 	bl	80012e8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d024      	beq.n	8002d42 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7fe faf5 	bl	80012fc <HAL_CAN_TxMailbox2CompleteCallback>
 8002d12:	e016      	b.n	8002d42 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d004      	beq.n	8002d28 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
 8002d26:	e00c      	b.n	8002d42 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d004      	beq.n	8002d3c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3a:	e002      	b.n	8002d42 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7fe fae7 	bl	8001310 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00c      	beq.n	8002d66 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f003 0310 	and.w	r3, r3, #16
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d007      	beq.n	8002d66 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2210      	movs	r2, #16
 8002d64:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00b      	beq.n	8002d88 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d006      	beq.n	8002d88 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2208      	movs	r2, #8
 8002d80:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f8f4 	bl	8002f70 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d009      	beq.n	8002da6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7fe fabf 	bl	8001324 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00c      	beq.n	8002dca <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	f003 0310 	and.w	r3, r3, #16
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d007      	beq.n	8002dca <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2210      	movs	r2, #16
 8002dc8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	f003 0320 	and.w	r3, r3, #32
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00b      	beq.n	8002dec <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d006      	beq.n	8002dec <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2208      	movs	r2, #8
 8002de4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f8d6 	bl	8002f98 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002dec:	6a3b      	ldr	r3, [r7, #32]
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f8bd 	bl	8002f84 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00b      	beq.n	8002e2c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d006      	beq.n	8002e2c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2210      	movs	r2, #16
 8002e24:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f8c0 	bl	8002fac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00b      	beq.n	8002e4e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d006      	beq.n	8002e4e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2208      	movs	r2, #8
 8002e46:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f8b9 	bl	8002fc0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d07b      	beq.n	8002f50 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d072      	beq.n	8002f48 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	f043 0302 	orr.w	r3, r3, #2
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	f043 0304 	orr.w	r3, r3, #4
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d043      	beq.n	8002f48 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d03e      	beq.n	8002f48 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ed0:	2b60      	cmp	r3, #96	; 0x60
 8002ed2:	d02b      	beq.n	8002f2c <HAL_CAN_IRQHandler+0x32a>
 8002ed4:	2b60      	cmp	r3, #96	; 0x60
 8002ed6:	d82e      	bhi.n	8002f36 <HAL_CAN_IRQHandler+0x334>
 8002ed8:	2b50      	cmp	r3, #80	; 0x50
 8002eda:	d022      	beq.n	8002f22 <HAL_CAN_IRQHandler+0x320>
 8002edc:	2b50      	cmp	r3, #80	; 0x50
 8002ede:	d82a      	bhi.n	8002f36 <HAL_CAN_IRQHandler+0x334>
 8002ee0:	2b40      	cmp	r3, #64	; 0x40
 8002ee2:	d019      	beq.n	8002f18 <HAL_CAN_IRQHandler+0x316>
 8002ee4:	2b40      	cmp	r3, #64	; 0x40
 8002ee6:	d826      	bhi.n	8002f36 <HAL_CAN_IRQHandler+0x334>
 8002ee8:	2b30      	cmp	r3, #48	; 0x30
 8002eea:	d010      	beq.n	8002f0e <HAL_CAN_IRQHandler+0x30c>
 8002eec:	2b30      	cmp	r3, #48	; 0x30
 8002eee:	d822      	bhi.n	8002f36 <HAL_CAN_IRQHandler+0x334>
 8002ef0:	2b10      	cmp	r3, #16
 8002ef2:	d002      	beq.n	8002efa <HAL_CAN_IRQHandler+0x2f8>
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	d005      	beq.n	8002f04 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002ef8:	e01d      	b.n	8002f36 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	f043 0308 	orr.w	r3, r3, #8
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f02:	e019      	b.n	8002f38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	f043 0310 	orr.w	r3, r3, #16
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f0c:	e014      	b.n	8002f38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	f043 0320 	orr.w	r3, r3, #32
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f16:	e00f      	b.n	8002f38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f20:	e00a      	b.n	8002f38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f2a:	e005      	b.n	8002f38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f34:	e000      	b.n	8002f38 <HAL_CAN_IRQHandler+0x336>
            break;
 8002f36:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699a      	ldr	r2, [r3, #24]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f46:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2204      	movs	r2, #4
 8002f4e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f836 	bl	8002fd4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002f68:	bf00      	nop
 8002f6a:	3728      	adds	r7, #40	; 0x28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <__NVIC_SetPriorityGrouping+0x40>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003004:	4013      	ands	r3, r2
 8003006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003010:	4b06      	ldr	r3, [pc, #24]	; (800302c <__NVIC_SetPriorityGrouping+0x44>)
 8003012:	4313      	orrs	r3, r2
 8003014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003016:	4a04      	ldr	r2, [pc, #16]	; (8003028 <__NVIC_SetPriorityGrouping+0x40>)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	60d3      	str	r3, [r2, #12]
}
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	e000ed00 	.word	0xe000ed00
 800302c:	05fa0000 	.word	0x05fa0000

08003030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003034:	4b04      	ldr	r3, [pc, #16]	; (8003048 <__NVIC_GetPriorityGrouping+0x18>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	0a1b      	lsrs	r3, r3, #8
 800303a:	f003 0307 	and.w	r3, r3, #7
}
 800303e:	4618      	mov	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	2b00      	cmp	r3, #0
 800305c:	db0b      	blt.n	8003076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	f003 021f 	and.w	r2, r3, #31
 8003064:	4907      	ldr	r1, [pc, #28]	; (8003084 <__NVIC_EnableIRQ+0x38>)
 8003066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	2001      	movs	r0, #1
 800306e:	fa00 f202 	lsl.w	r2, r0, r2
 8003072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	e000e100 	.word	0xe000e100

08003088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	6039      	str	r1, [r7, #0]
 8003092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003098:	2b00      	cmp	r3, #0
 800309a:	db0a      	blt.n	80030b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	490c      	ldr	r1, [pc, #48]	; (80030d4 <__NVIC_SetPriority+0x4c>)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	0112      	lsls	r2, r2, #4
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	440b      	add	r3, r1
 80030ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b0:	e00a      	b.n	80030c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4908      	ldr	r1, [pc, #32]	; (80030d8 <__NVIC_SetPriority+0x50>)
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	3b04      	subs	r3, #4
 80030c0:	0112      	lsls	r2, r2, #4
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	440b      	add	r3, r1
 80030c6:	761a      	strb	r2, [r3, #24]
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000e100 	.word	0xe000e100
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030dc:	b480      	push	{r7}
 80030de:	b089      	sub	sp, #36	; 0x24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f1c3 0307 	rsb	r3, r3, #7
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	bf28      	it	cs
 80030fa:	2304      	movcs	r3, #4
 80030fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3304      	adds	r3, #4
 8003102:	2b06      	cmp	r3, #6
 8003104:	d902      	bls.n	800310c <NVIC_EncodePriority+0x30>
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3b03      	subs	r3, #3
 800310a:	e000      	b.n	800310e <NVIC_EncodePriority+0x32>
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003110:	f04f 32ff 	mov.w	r2, #4294967295
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43da      	mvns	r2, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	401a      	ands	r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003124:	f04f 31ff 	mov.w	r1, #4294967295
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	fa01 f303 	lsl.w	r3, r1, r3
 800312e:	43d9      	mvns	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003134:	4313      	orrs	r3, r2
         );
}
 8003136:	4618      	mov	r0, r3
 8003138:	3724      	adds	r7, #36	; 0x24
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff ff4c 	bl	8002fe8 <__NVIC_SetPriorityGrouping>
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
 8003164:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800316a:	f7ff ff61 	bl	8003030 <__NVIC_GetPriorityGrouping>
 800316e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	68b9      	ldr	r1, [r7, #8]
 8003174:	6978      	ldr	r0, [r7, #20]
 8003176:	f7ff ffb1 	bl	80030dc <NVIC_EncodePriority>
 800317a:	4602      	mov	r2, r0
 800317c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003180:	4611      	mov	r1, r2
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff ff80 	bl	8003088 <__NVIC_SetPriority>
}
 8003188:	bf00      	nop
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800319a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff ff54 	bl	800304c <__NVIC_EnableIRQ>
}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031b8:	f7ff f88a 	bl	80022d0 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e099      	b.n	80032fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0201 	bic.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031e8:	e00f      	b.n	800320a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031ea:	f7ff f871 	bl	80022d0 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b05      	cmp	r3, #5
 80031f6:	d908      	bls.n	800320a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2203      	movs	r2, #3
 8003202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e078      	b.n	80032fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1e8      	bne.n	80031ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	4b38      	ldr	r3, [pc, #224]	; (8003304 <HAL_DMA_Init+0x158>)
 8003224:	4013      	ands	r3, r2
 8003226:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003236:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003242:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800324e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	4313      	orrs	r3, r2
 800325a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	2b04      	cmp	r3, #4
 8003262:	d107      	bne.n	8003274 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	4313      	orrs	r3, r2
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	4313      	orrs	r3, r2
 8003272:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f023 0307 	bic.w	r3, r3, #7
 800328a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	4313      	orrs	r3, r2
 8003294:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	2b04      	cmp	r3, #4
 800329c:	d117      	bne.n	80032ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00e      	beq.n	80032ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 fa7b 	bl	80037ac <DMA_CheckFifoParam>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2240      	movs	r2, #64	; 0x40
 80032c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80032ca:	2301      	movs	r3, #1
 80032cc:	e016      	b.n	80032fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fa32 	bl	8003740 <DMA_CalcBaseAndBitshift>
 80032dc:	4603      	mov	r3, r0
 80032de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e4:	223f      	movs	r2, #63	; 0x3f
 80032e6:	409a      	lsls	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	e010803f 	.word	0xe010803f

08003308 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003314:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003316:	f7fe ffdb 	bl	80022d0 <HAL_GetTick>
 800331a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d008      	beq.n	800333a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2280      	movs	r2, #128	; 0x80
 800332c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e052      	b.n	80033e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0216 	bic.w	r2, r2, #22
 8003348:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695a      	ldr	r2, [r3, #20]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003358:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	d103      	bne.n	800336a <HAL_DMA_Abort+0x62>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003366:	2b00      	cmp	r3, #0
 8003368:	d007      	beq.n	800337a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0208 	bic.w	r2, r2, #8
 8003378:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0201 	bic.w	r2, r2, #1
 8003388:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800338a:	e013      	b.n	80033b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800338c:	f7fe ffa0 	bl	80022d0 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b05      	cmp	r3, #5
 8003398:	d90c      	bls.n	80033b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2220      	movs	r2, #32
 800339e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2203      	movs	r2, #3
 80033a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e015      	b.n	80033e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1e4      	bne.n	800338c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c6:	223f      	movs	r2, #63	; 0x3f
 80033c8:	409a      	lsls	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d004      	beq.n	8003406 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2280      	movs	r2, #128	; 0x80
 8003400:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e00c      	b.n	8003420 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2205      	movs	r2, #5
 800340a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0201 	bic.w	r2, r2, #1
 800341c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003438:	4b8e      	ldr	r3, [pc, #568]	; (8003674 <HAL_DMA_IRQHandler+0x248>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a8e      	ldr	r2, [pc, #568]	; (8003678 <HAL_DMA_IRQHandler+0x24c>)
 800343e:	fba2 2303 	umull	r2, r3, r2, r3
 8003442:	0a9b      	lsrs	r3, r3, #10
 8003444:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003456:	2208      	movs	r2, #8
 8003458:	409a      	lsls	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4013      	ands	r3, r2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d01a      	beq.n	8003498 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d013      	beq.n	8003498 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0204 	bic.w	r2, r2, #4
 800347e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003484:	2208      	movs	r2, #8
 8003486:	409a      	lsls	r2, r3
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003490:	f043 0201 	orr.w	r2, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349c:	2201      	movs	r2, #1
 800349e:	409a      	lsls	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d012      	beq.n	80034ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00b      	beq.n	80034ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ba:	2201      	movs	r2, #1
 80034bc:	409a      	lsls	r2, r3
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c6:	f043 0202 	orr.w	r2, r3, #2
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d2:	2204      	movs	r2, #4
 80034d4:	409a      	lsls	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4013      	ands	r3, r2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d012      	beq.n	8003504 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00b      	beq.n	8003504 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f0:	2204      	movs	r2, #4
 80034f2:	409a      	lsls	r2, r3
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fc:	f043 0204 	orr.w	r2, r3, #4
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003508:	2210      	movs	r2, #16
 800350a:	409a      	lsls	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4013      	ands	r3, r2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d043      	beq.n	800359c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d03c      	beq.n	800359c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003526:	2210      	movs	r2, #16
 8003528:	409a      	lsls	r2, r3
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d018      	beq.n	800356e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d108      	bne.n	800355c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	2b00      	cmp	r3, #0
 8003550:	d024      	beq.n	800359c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	4798      	blx	r3
 800355a:	e01f      	b.n	800359c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003560:	2b00      	cmp	r3, #0
 8003562:	d01b      	beq.n	800359c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4798      	blx	r3
 800356c:	e016      	b.n	800359c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003578:	2b00      	cmp	r3, #0
 800357a:	d107      	bne.n	800358c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0208 	bic.w	r2, r2, #8
 800358a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a0:	2220      	movs	r2, #32
 80035a2:	409a      	lsls	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 808f 	beq.w	80036cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 8087 	beq.w	80036cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c2:	2220      	movs	r2, #32
 80035c4:	409a      	lsls	r2, r3
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b05      	cmp	r3, #5
 80035d4:	d136      	bne.n	8003644 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0216 	bic.w	r2, r2, #22
 80035e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695a      	ldr	r2, [r3, #20]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d103      	bne.n	8003606 <HAL_DMA_IRQHandler+0x1da>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003602:	2b00      	cmp	r3, #0
 8003604:	d007      	beq.n	8003616 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0208 	bic.w	r2, r2, #8
 8003614:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361a:	223f      	movs	r2, #63	; 0x3f
 800361c:	409a      	lsls	r2, r3
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003636:	2b00      	cmp	r3, #0
 8003638:	d07e      	beq.n	8003738 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	4798      	blx	r3
        }
        return;
 8003642:	e079      	b.n	8003738 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d01d      	beq.n	800368e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10d      	bne.n	800367c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003664:	2b00      	cmp	r3, #0
 8003666:	d031      	beq.n	80036cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	4798      	blx	r3
 8003670:	e02c      	b.n	80036cc <HAL_DMA_IRQHandler+0x2a0>
 8003672:	bf00      	nop
 8003674:	20000000 	.word	0x20000000
 8003678:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003680:	2b00      	cmp	r3, #0
 8003682:	d023      	beq.n	80036cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	4798      	blx	r3
 800368c:	e01e      	b.n	80036cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10f      	bne.n	80036bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0210 	bic.w	r2, r2, #16
 80036aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d032      	beq.n	800373a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d022      	beq.n	8003726 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2205      	movs	r2, #5
 80036e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0201 	bic.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	3301      	adds	r3, #1
 80036fc:	60bb      	str	r3, [r7, #8]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	429a      	cmp	r2, r3
 8003702:	d307      	bcc.n	8003714 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f2      	bne.n	80036f8 <HAL_DMA_IRQHandler+0x2cc>
 8003712:	e000      	b.n	8003716 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003714:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	4798      	blx	r3
 8003736:	e000      	b.n	800373a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003738:	bf00      	nop
    }
  }
}
 800373a:	3718      	adds	r7, #24
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	b2db      	uxtb	r3, r3
 800374e:	3b10      	subs	r3, #16
 8003750:	4a13      	ldr	r2, [pc, #76]	; (80037a0 <DMA_CalcBaseAndBitshift+0x60>)
 8003752:	fba2 2303 	umull	r2, r3, r2, r3
 8003756:	091b      	lsrs	r3, r3, #4
 8003758:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800375a:	4a12      	ldr	r2, [pc, #72]	; (80037a4 <DMA_CalcBaseAndBitshift+0x64>)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4413      	add	r3, r2
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	461a      	mov	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2b03      	cmp	r3, #3
 800376c:	d908      	bls.n	8003780 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	461a      	mov	r2, r3
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <DMA_CalcBaseAndBitshift+0x68>)
 8003776:	4013      	ands	r3, r2
 8003778:	1d1a      	adds	r2, r3, #4
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	659a      	str	r2, [r3, #88]	; 0x58
 800377e:	e006      	b.n	800378e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	461a      	mov	r2, r3
 8003786:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <DMA_CalcBaseAndBitshift+0x68>)
 8003788:	4013      	ands	r3, r2
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003792:	4618      	mov	r0, r3
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	aaaaaaab 	.word	0xaaaaaaab
 80037a4:	0801aebc 	.word	0x0801aebc
 80037a8:	fffffc00 	.word	0xfffffc00

080037ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d11f      	bne.n	8003806 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d856      	bhi.n	800387a <DMA_CheckFifoParam+0xce>
 80037cc:	a201      	add	r2, pc, #4	; (adr r2, 80037d4 <DMA_CheckFifoParam+0x28>)
 80037ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d2:	bf00      	nop
 80037d4:	080037e5 	.word	0x080037e5
 80037d8:	080037f7 	.word	0x080037f7
 80037dc:	080037e5 	.word	0x080037e5
 80037e0:	0800387b 	.word	0x0800387b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d046      	beq.n	800387e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037f4:	e043      	b.n	800387e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037fe:	d140      	bne.n	8003882 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003804:	e03d      	b.n	8003882 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800380e:	d121      	bne.n	8003854 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b03      	cmp	r3, #3
 8003814:	d837      	bhi.n	8003886 <DMA_CheckFifoParam+0xda>
 8003816:	a201      	add	r2, pc, #4	; (adr r2, 800381c <DMA_CheckFifoParam+0x70>)
 8003818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381c:	0800382d 	.word	0x0800382d
 8003820:	08003833 	.word	0x08003833
 8003824:	0800382d 	.word	0x0800382d
 8003828:	08003845 	.word	0x08003845
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	73fb      	strb	r3, [r7, #15]
      break;
 8003830:	e030      	b.n	8003894 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003836:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d025      	beq.n	800388a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003842:	e022      	b.n	800388a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800384c:	d11f      	bne.n	800388e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003852:	e01c      	b.n	800388e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	2b02      	cmp	r3, #2
 8003858:	d903      	bls.n	8003862 <DMA_CheckFifoParam+0xb6>
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2b03      	cmp	r3, #3
 800385e:	d003      	beq.n	8003868 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003860:	e018      	b.n	8003894 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	73fb      	strb	r3, [r7, #15]
      break;
 8003866:	e015      	b.n	8003894 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00e      	beq.n	8003892 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	73fb      	strb	r3, [r7, #15]
      break;
 8003878:	e00b      	b.n	8003892 <DMA_CheckFifoParam+0xe6>
      break;
 800387a:	bf00      	nop
 800387c:	e00a      	b.n	8003894 <DMA_CheckFifoParam+0xe8>
      break;
 800387e:	bf00      	nop
 8003880:	e008      	b.n	8003894 <DMA_CheckFifoParam+0xe8>
      break;
 8003882:	bf00      	nop
 8003884:	e006      	b.n	8003894 <DMA_CheckFifoParam+0xe8>
      break;
 8003886:	bf00      	nop
 8003888:	e004      	b.n	8003894 <DMA_CheckFifoParam+0xe8>
      break;
 800388a:	bf00      	nop
 800388c:	e002      	b.n	8003894 <DMA_CheckFifoParam+0xe8>
      break;   
 800388e:	bf00      	nop
 8003890:	e000      	b.n	8003894 <DMA_CheckFifoParam+0xe8>
      break;
 8003892:	bf00      	nop
    }
  } 
  
  return status; 
 8003894:	7bfb      	ldrb	r3, [r7, #15]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop

080038a4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e06a      	b.n	800398c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d106      	bne.n	80038ce <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2223      	movs	r2, #35	; 0x23
 80038c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f005 f987 	bl	8008bdc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ce:	4b31      	ldr	r3, [pc, #196]	; (8003994 <HAL_ETH_Init+0xf0>)
 80038d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d2:	4a30      	ldr	r2, [pc, #192]	; (8003994 <HAL_ETH_Init+0xf0>)
 80038d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038d8:	6453      	str	r3, [r2, #68]	; 0x44
 80038da:	4b2e      	ldr	r3, [pc, #184]	; (8003994 <HAL_ETH_Init+0xf0>)
 80038dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038e2:	60bb      	str	r3, [r7, #8]
 80038e4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80038e6:	4b2c      	ldr	r3, [pc, #176]	; (8003998 <HAL_ETH_Init+0xf4>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4a2b      	ldr	r2, [pc, #172]	; (8003998 <HAL_ETH_Init+0xf4>)
 80038ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80038f0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80038f2:	4b29      	ldr	r3, [pc, #164]	; (8003998 <HAL_ETH_Init+0xf4>)
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	4927      	ldr	r1, [pc, #156]	; (8003998 <HAL_ETH_Init+0xf4>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003900:	4b25      	ldr	r3, [pc, #148]	; (8003998 <HAL_ETH_Init+0xf4>)
 8003902:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6812      	ldr	r2, [r2, #0]
 8003912:	f043 0301 	orr.w	r3, r3, #1
 8003916:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800391a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800391c:	f7fe fcd8 	bl	80022d0 <HAL_GetTick>
 8003920:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003922:	e011      	b.n	8003948 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003924:	f7fe fcd4 	bl	80022d0 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003932:	d909      	bls.n	8003948 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2204      	movs	r2, #4
 8003938:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	22e0      	movs	r2, #224	; 0xe0
 8003940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e021      	b.n	800398c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1e4      	bne.n	8003924 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 ff4c 	bl	80047f8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 fff3 	bl	800494c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f001 f849 	bl	80049fe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	461a      	mov	r2, r3
 8003972:	2100      	movs	r1, #0
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 ffb1 	bl	80048dc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2210      	movs	r2, #16
 8003986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40023800 	.word	0x40023800
 8003998:	40013800 	.word	0x40013800

0800399c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039aa:	2b10      	cmp	r3, #16
 80039ac:	d17b      	bne.n	8003aa6 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2223      	movs	r2, #35	; 0x23
 80039b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80039ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	4b35      	ldr	r3, [pc, #212]	; (8003ab0 <HAL_ETH_Start_IT+0x114>)
 80039da:	430b      	orrs	r3, r1
 80039dc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80039f0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2204      	movs	r2, #4
 80039f8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f9fc 	bl	8003df8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0208 	orr.w	r2, r2, #8
 8003a0e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a18:	2001      	movs	r0, #1
 8003a1a:	f7fe fc65 	bl	80022e8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f042 0204 	orr.w	r2, r2, #4
 8003a34:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a3e:	2001      	movs	r0, #1
 8003a40:	f7fe fc52 	bl	80022e8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fd74 	bl	800453a <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a68:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6812      	ldr	r2, [r2, #0]
 8003a78:	f043 0302 	orr.w	r3, r3, #2
 8003a7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a80:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a8a:	69d9      	ldr	r1, [r3, #28]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	4b08      	ldr	r3, [pc, #32]	; (8003ab4 <HAL_ETH_Start_IT+0x118>)
 8003a92:	430b      	orrs	r3, r1
 8003a94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a98:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2223      	movs	r2, #35	; 0x23
 8003a9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	e000      	b.n	8003aa8 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
  }
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	00020060 	.word	0x00020060
 8003ab4:	0001a0c1 	.word	0x0001a0c1

08003ab8 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac6:	2b23      	cmp	r3, #35	; 0x23
 8003ac8:	d16e      	bne.n	8003ba8 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2223      	movs	r2, #35	; 0x23
 8003ace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ada:	69d9      	ldr	r1, [r3, #28]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	4b34      	ldr	r3, [pc, #208]	; (8003bb4 <HAL_ETH_Stop_IT+0xfc>)
 8003ae2:	400b      	ands	r3, r1
 8003ae4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ae8:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6812      	ldr	r2, [r2, #0]
 8003af8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003afc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b00:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6812      	ldr	r2, [r2, #0]
 8003b10:	f023 0302 	bic.w	r3, r3, #2
 8003b14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b18:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0204 	bic.w	r2, r2, #4
 8003b28:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b32:	2001      	movs	r0, #1
 8003b34:	f7fe fbd8 	bl	80022e8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 fcfa 	bl	800453a <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0208 	bic.w	r2, r2, #8
 8003b54:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b5e:	2001      	movs	r0, #1
 8003b60:	f7fe fbc2 	bl	80022e8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	e00e      	b.n	8003b90 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	3212      	adds	r2, #18
 8003b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b7c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	d9ed      	bls.n	8003b72 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2210      	movs	r2, #16
 8003ba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	e000      	b.n	8003baa <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
  }
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	fffe5f3e 	.word	0xfffe5f3e

08003bb8 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d109      	bne.n	8003bdc <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bce:	f043 0201 	orr.w	r2, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e045      	b.n	8003c68 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003be2:	2b23      	cmp	r3, #35	; 0x23
 8003be4:	d13f      	bne.n	8003c66 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	6839      	ldr	r1, [r7, #0]
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 ff70 	bl	8004ad8 <ETH_Prepare_Tx_Descriptors>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d009      	beq.n	8003c12 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c04:	f043 0202 	orr.w	r2, r3, #2
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e02a      	b.n	8003c68 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003c12:	f3bf 8f4f 	dsb	sy
}
 8003c16:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	629a      	str	r2, [r3, #40]	; 0x28
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d904      	bls.n	8003c34 <HAL_ETH_Transmit_IT+0x7c>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2e:	1f1a      	subs	r2, r3, #4
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00d      	beq.n	8003c62 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c4e:	461a      	mov	r2, r3
 8003c50:	2304      	movs	r3, #4
 8003c52:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2300      	movs	r3, #0
 8003c60:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	e000      	b.n	8003c68 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
  }
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d109      	bne.n	8003c9c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8e:	f043 0201 	orr.w	r2, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e0a8      	b.n	8003dee <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ca2:	2b23      	cmp	r3, #35	; 0x23
 8003ca4:	d001      	beq.n	8003caa <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e0a1      	b.n	8003dee <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cae:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69fa      	ldr	r2, [r7, #28]
 8003cb4:	3212      	adds	r2, #18
 8003cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cba:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cc0:	f1c3 0304 	rsb	r3, r3, #4
 8003cc4:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003cc6:	e06a      	b.n	8003d9e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d007      	beq.n	8003ce4 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	699a      	ldr	r2, [r3, #24]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	69da      	ldr	r2, [r3, #28]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d103      	bne.n	8003cf8 <HAL_ETH_ReadData+0x88>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d040      	beq.n	8003d7a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00c      	beq.n	8003d3c <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	0c1b      	lsrs	r3, r3, #16
 8003d28:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003d2c:	3b04      	subs	r3, #4
 8003d2e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003d54:	461a      	mov	r2, r3
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	f005 f90b 	bl	8008f74 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	441a      	add	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	2200      	movs	r2, #0
 8003d78:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	61fb      	str	r3, [r7, #28]
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d902      	bls.n	8003d8c <HAL_ETH_ReadData+0x11c>
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	3b04      	subs	r3, #4
 8003d8a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69fa      	ldr	r2, [r7, #28]
 8003d90:	3212      	adds	r2, #18
 8003d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d96:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	db06      	blt.n	8003db4 <HAL_ETH_ReadData+0x144>
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d202      	bcs.n	8003db4 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d089      	beq.n	8003cc8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	441a      	add	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f815 	bl	8003df8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69fa      	ldr	r2, [r7, #28]
 8003dd2:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d108      	bne.n	8003dec <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	e000      	b.n	8003dee <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3720      	adds	r7, #32
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
	...

08003df8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b088      	sub	sp, #32
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003e00:	2300      	movs	r3, #0
 8003e02:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8003e04:	2301      	movs	r3, #1
 8003e06:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e0c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69fa      	ldr	r2, [r7, #28]
 8003e12:	3212      	adds	r2, #18
 8003e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e18:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e1e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003e20:	e040      	b.n	8003ea4 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d112      	bne.n	8003e50 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003e2a:	f107 030c 	add.w	r3, r7, #12
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f005 f870 	bl	8008f14 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d102      	bne.n	8003e40 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	74fb      	strb	r3, [r7, #19]
 8003e3e:	e007      	b.n	8003e50 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	461a      	mov	r2, r3
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003e50:	7cfb      	ldrb	r3, [r7, #19]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d026      	beq.n	8003ea4 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d103      	bne.n	8003e66 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	4a1e      	ldr	r2, [pc, #120]	; (8003edc <ETH_UpdateDescriptor+0xe4>)
 8003e62:	605a      	str	r2, [r3, #4]
 8003e64:	e003      	b.n	8003e6e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8003e6c:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003e6e:	f3bf 8f5f 	dmb	sy
}
 8003e72:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	3301      	adds	r3, #1
 8003e84:	61fb      	str	r3, [r7, #28]
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	2b03      	cmp	r3, #3
 8003e8a:	d902      	bls.n	8003e92 <ETH_UpdateDescriptor+0x9a>
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	3b04      	subs	r3, #4
 8003e90:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69fa      	ldr	r2, [r7, #28]
 8003e96:	3212      	adds	r2, #18
 8003e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e9c:	617b      	str	r3, [r7, #20]
      desccount--;
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <ETH_UpdateDescriptor+0xb8>
 8003eaa:	7cfb      	ldrb	r3, [r7, #19]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1b8      	bne.n	8003e22 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d00c      	beq.n	8003ed4 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8003ed4:	bf00      	nop
 8003ed6:	3720      	adds	r7, #32
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	80004600 	.word	0x80004600

08003ee0 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3318      	adds	r3, #24
 8003eec:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8003efa:	2301      	movs	r3, #1
 8003efc:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8003efe:	e03f      	b.n	8003f80 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8003f00:	2301      	movs	r3, #1
 8003f02:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8003f28:	7bbb      	ldrb	r3, [r7, #14]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d028      	beq.n	8003f80 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68d9      	ldr	r1, [r3, #12]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4613      	mov	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	440b      	add	r3, r1
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	db1b      	blt.n	8003f7c <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f005 f851 	bl	8008ff8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	2200      	movs	r2, #0
 8003f62:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	3301      	adds	r3, #1
 8003f68:	f003 0303 	and.w	r3, r3, #3
 8003f6c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f7a:	e001      	b.n	8003f80 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <HAL_ETH_ReleaseTxPacket+0xac>
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1b9      	bne.n	8003f00 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fae:	2b40      	cmp	r3, #64	; 0x40
 8003fb0:	d112      	bne.n	8003fd8 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc0:	2b40      	cmp	r3, #64	; 0x40
 8003fc2:	d109      	bne.n	8003fd8 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4b50      	ldr	r3, [pc, #320]	; (8004110 <HAL_ETH_IRQHandler+0x178>)
 8003fd0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f004 fb64 	bl	80086a0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d113      	bne.n	8004012 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d10a      	bne.n	8004012 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004004:	461a      	mov	r2, r3
 8004006:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800400a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f004 fb57 	bl	80086c0 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004024:	d14c      	bne.n	80040c0 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004038:	d142      	bne.n	80040c0 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004040:	f043 0208 	orr.w	r2, r3, #8
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800405c:	d11a      	bne.n	8004094 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004066:	695a      	ldr	r2, [r3, #20]
 8004068:	4b2a      	ldr	r3, [pc, #168]	; (8004114 <HAL_ETH_IRQHandler+0x17c>)
 800406a:	4013      	ands	r3, r2
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6812      	ldr	r2, [r2, #0]
 8004080:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8004084:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004088:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	22e0      	movs	r2, #224	; 0xe0
 800408e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8004092:	e012      	b.n	80040ba <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800409c:	695a      	ldr	r2, [r3, #20]
 800409e:	f248 6380 	movw	r3, #34432	; 0x8680
 80040a2:	4013      	ands	r3, r2
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b2:	461a      	mov	r2, r3
 80040b4:	f248 6380 	movw	r3, #34432	; 0x8680
 80040b8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f004 fb10 	bl	80086e0 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d10e      	bne.n	80040ec <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f81c 	bl	800411c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80040ec:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <HAL_ETH_IRQHandler+0x180>)
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d006      	beq.n	8004106 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80040f8:	4b07      	ldr	r3, [pc, #28]	; (8004118 <HAL_ETH_IRQHandler+0x180>)
 80040fa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80040fe:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f815 	bl	8004130 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004106:	bf00      	nop
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	00010040 	.word	0x00010040
 8004114:	007e2000 	.word	0x007e2000
 8004118:	40013c00 	.word	0x40013c00

0800411c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f003 031c 	and.w	r3, r3, #28
 8004160:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	02db      	lsls	r3, r3, #11
 8004166:	b29b      	uxth	r3, r3
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	019b      	lsls	r3, r3, #6
 8004172:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	4313      	orrs	r3, r2
 800417a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f023 0302 	bic.w	r3, r3, #2
 8004182:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f043 0301 	orr.w	r3, r3, #1
 800418a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004194:	f7fe f89c 	bl	80022d0 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800419a:	e00d      	b.n	80041b8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800419c:	f7fe f898 	bl	80022d0 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041aa:	d301      	bcc.n	80041b0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e010      	b.n	80041d2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1ec      	bne.n	800419c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	461a      	mov	r2, r3
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b086      	sub	sp, #24
 80041de:	af00      	add	r7, sp, #0
 80041e0:	60f8      	str	r0, [r7, #12]
 80041e2:	60b9      	str	r1, [r7, #8]
 80041e4:	607a      	str	r2, [r7, #4]
 80041e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f003 031c 	and.w	r3, r3, #28
 80041f6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	02db      	lsls	r3, r3, #11
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	4313      	orrs	r3, r2
 8004202:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	019b      	lsls	r3, r3, #6
 8004208:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	4313      	orrs	r3, r2
 8004210:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f043 0302 	orr.w	r3, r3, #2
 8004218:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f043 0301 	orr.w	r3, r3, #1
 8004220:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004234:	f7fe f84c 	bl	80022d0 <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800423a:	e00d      	b.n	8004258 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800423c:	f7fe f848 	bl	80022d0 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800424a:	d301      	bcc.n	8004250 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e009      	b.n	8004264 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1ec      	bne.n	800423c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e0d9      	b.n	8004434 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0310 	and.w	r3, r3, #16
 800428a:	2b00      	cmp	r3, #0
 800428c:	bf14      	ite	ne
 800428e:	2301      	movne	r3, #1
 8004290:	2300      	moveq	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	461a      	mov	r2, r3
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	bf0c      	ite	eq
 80042b8:	2301      	moveq	r3, #1
 80042ba:	2300      	movne	r3, #0
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	461a      	mov	r2, r3
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	bf14      	ite	ne
 80042d4:	2301      	movne	r3, #1
 80042d6:	2300      	moveq	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	bf0c      	ite	eq
 80042ee:	2301      	moveq	r3, #1
 80042f0:	2300      	movne	r3, #0
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	461a      	mov	r2, r3
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004304:	2b00      	cmp	r3, #0
 8004306:	bf14      	ite	ne
 8004308:	2301      	movne	r3, #1
 800430a:	2300      	moveq	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	461a      	mov	r2, r3
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800433a:	2b00      	cmp	r3, #0
 800433c:	bf0c      	ite	eq
 800433e:	2301      	moveq	r3, #1
 8004340:	2300      	movne	r3, #0
 8004342:	b2db      	uxtb	r3, r3
 8004344:	461a      	mov	r2, r3
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004354:	2b00      	cmp	r3, #0
 8004356:	bf0c      	ite	eq
 8004358:	2301      	moveq	r3, #1
 800435a:	2300      	movne	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	461a      	mov	r2, r3
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436e:	2b00      	cmp	r3, #0
 8004370:	bf14      	ite	ne
 8004372:	2301      	movne	r3, #1
 8004374:	2300      	moveq	r3, #0
 8004376:	b2db      	uxtb	r3, r3
 8004378:	461a      	mov	r2, r3
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004396:	2b00      	cmp	r3, #0
 8004398:	bf14      	ite	ne
 800439a:	2301      	movne	r3, #1
 800439c:	2300      	moveq	r3, #0
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	461a      	mov	r2, r3
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	bf14      	ite	ne
 80043b4:	2301      	movne	r3, #1
 80043b6:	2300      	moveq	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	461a      	mov	r2, r3
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	bf0c      	ite	eq
 80043d0:	2301      	moveq	r3, #1
 80043d2:	2300      	movne	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	461a      	mov	r2, r3
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	0c1b      	lsrs	r3, r3, #16
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b00      	cmp	r3, #0
 8004406:	bf14      	ite	ne
 8004408:	2301      	movne	r3, #1
 800440a:	2300      	moveq	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	461a      	mov	r2, r3
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004420:	2b00      	cmp	r3, #0
 8004422:	bf14      	ite	ne
 8004424:	2301      	movne	r3, #1
 8004426:	2300      	moveq	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e00b      	b.n	800446c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800445a:	2b10      	cmp	r3, #16
 800445c:	d105      	bne.n	800446a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800445e:	6839      	ldr	r1, [r7, #0]
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 f88f 	bl	8004584 <ETH_SetMACConfig>

    return HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	e000      	b.n	800446c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
  }
}
 800446c:	4618      	mov	r0, r3
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 031c 	bic.w	r3, r3, #28
 800448a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800448c:	f001 fc80 	bl	8005d90 <HAL_RCC_GetHCLKFreq>
 8004490:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	4a1d      	ldr	r2, [pc, #116]	; (800450c <HAL_ETH_SetMDIOClockRange+0x98>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d908      	bls.n	80044ac <HAL_ETH_SetMDIOClockRange+0x38>
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	4a1c      	ldr	r2, [pc, #112]	; (8004510 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d804      	bhi.n	80044ac <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f043 0308 	orr.w	r3, r3, #8
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	e027      	b.n	80044fc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4a18      	ldr	r2, [pc, #96]	; (8004510 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d908      	bls.n	80044c6 <HAL_ETH_SetMDIOClockRange+0x52>
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	4a17      	ldr	r2, [pc, #92]	; (8004514 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d204      	bcs.n	80044c6 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f043 030c 	orr.w	r3, r3, #12
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	e01a      	b.n	80044fc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	4a12      	ldr	r2, [pc, #72]	; (8004514 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d303      	bcc.n	80044d6 <HAL_ETH_SetMDIOClockRange+0x62>
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	4a11      	ldr	r2, [pc, #68]	; (8004518 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d911      	bls.n	80044fa <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	4a0f      	ldr	r2, [pc, #60]	; (8004518 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d908      	bls.n	80044f0 <HAL_ETH_SetMDIOClockRange+0x7c>
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	4a0e      	ldr	r2, [pc, #56]	; (800451c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d804      	bhi.n	80044f0 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f043 0304 	orr.w	r3, r3, #4
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	e005      	b.n	80044fc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f043 0310 	orr.w	r3, r3, #16
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	e000      	b.n	80044fc <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80044fa:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	611a      	str	r2, [r3, #16]
}
 8004504:	bf00      	nop
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	01312cff 	.word	0x01312cff
 8004510:	02160ebf 	.word	0x02160ebf
 8004514:	03938700 	.word	0x03938700
 8004518:	05f5e0ff 	.word	0x05f5e0ff
 800451c:	08f0d17f 	.word	0x08f0d17f

08004520 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800452e:	4618      	mov	r0, r3
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b084      	sub	sp, #16
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004542:	2300      	movs	r3, #0
 8004544:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6812      	ldr	r2, [r2, #0]
 8004554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004558:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800455c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800456a:	2001      	movs	r0, #1
 800456c:	f7fd febc 	bl	80022e8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800457a:	6193      	str	r3, [r2, #24]
}
 800457c:	bf00      	nop
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	4b51      	ldr	r3, [pc, #324]	; (80046e0 <ETH_SetMACConfig+0x15c>)
 800459a:	4013      	ands	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	7c1b      	ldrb	r3, [r3, #16]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d102      	bne.n	80045ac <ETH_SetMACConfig+0x28>
 80045a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80045aa:	e000      	b.n	80045ae <ETH_SetMACConfig+0x2a>
 80045ac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	7c5b      	ldrb	r3, [r3, #17]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d102      	bne.n	80045bc <ETH_SetMACConfig+0x38>
 80045b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80045ba:	e000      	b.n	80045be <ETH_SetMACConfig+0x3a>
 80045bc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80045be:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80045c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	7fdb      	ldrb	r3, [r3, #31]
 80045ca:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80045cc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80045d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	7f92      	ldrb	r2, [r2, #30]
 80045d8:	2a00      	cmp	r2, #0
 80045da:	d102      	bne.n	80045e2 <ETH_SetMACConfig+0x5e>
 80045dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045e0:	e000      	b.n	80045e4 <ETH_SetMACConfig+0x60>
 80045e2:	2200      	movs	r2, #0
                        macconf->Speed |
 80045e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	7f1b      	ldrb	r3, [r3, #28]
 80045ea:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80045ec:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80045f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	791b      	ldrb	r3, [r3, #4]
 80045f8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80045fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004602:	2a00      	cmp	r2, #0
 8004604:	d102      	bne.n	800460c <ETH_SetMACConfig+0x88>
 8004606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800460a:	e000      	b.n	800460e <ETH_SetMACConfig+0x8a>
 800460c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800460e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	7bdb      	ldrb	r3, [r3, #15]
 8004614:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004616:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800461c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004624:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004626:	4313      	orrs	r3, r2
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800463e:	2001      	movs	r0, #1
 8004640:	f7fd fe52 	bl	80022e8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	f64f 7341 	movw	r3, #65345	; 0xff41
 800465a:	4013      	ands	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004662:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800466a:	2a00      	cmp	r2, #0
 800466c:	d101      	bne.n	8004672 <ETH_SetMACConfig+0xee>
 800466e:	2280      	movs	r2, #128	; 0x80
 8004670:	e000      	b.n	8004674 <ETH_SetMACConfig+0xf0>
 8004672:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004674:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800467a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004682:	2a01      	cmp	r2, #1
 8004684:	d101      	bne.n	800468a <ETH_SetMACConfig+0x106>
 8004686:	2208      	movs	r2, #8
 8004688:	e000      	b.n	800468c <ETH_SetMACConfig+0x108>
 800468a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800468c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004694:	2a01      	cmp	r2, #1
 8004696:	d101      	bne.n	800469c <ETH_SetMACConfig+0x118>
 8004698:	2204      	movs	r2, #4
 800469a:	e000      	b.n	800469e <ETH_SetMACConfig+0x11a>
 800469c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800469e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80046a6:	2a01      	cmp	r2, #1
 80046a8:	d101      	bne.n	80046ae <ETH_SetMACConfig+0x12a>
 80046aa:	2202      	movs	r2, #2
 80046ac:	e000      	b.n	80046b0 <ETH_SetMACConfig+0x12c>
 80046ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80046b0:	4313      	orrs	r3, r2
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80046c8:	2001      	movs	r0, #1
 80046ca:	f7fd fe0d 	bl	80022e8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	619a      	str	r2, [r3, #24]
}
 80046d6:	bf00      	nop
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	ff20810f 	.word	0xff20810f

080046e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	4b3d      	ldr	r3, [pc, #244]	; (80047f4 <ETH_SetDMAConfig+0x110>)
 80046fe:	4013      	ands	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	7b1b      	ldrb	r3, [r3, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d102      	bne.n	8004710 <ETH_SetDMAConfig+0x2c>
 800470a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800470e:	e000      	b.n	8004712 <ETH_SetDMAConfig+0x2e>
 8004710:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	7b5b      	ldrb	r3, [r3, #13]
 8004716:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004718:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	7f52      	ldrb	r2, [r2, #29]
 800471e:	2a00      	cmp	r2, #0
 8004720:	d102      	bne.n	8004728 <ETH_SetDMAConfig+0x44>
 8004722:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004726:	e000      	b.n	800472a <ETH_SetDMAConfig+0x46>
 8004728:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800472a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	7b9b      	ldrb	r3, [r3, #14]
 8004730:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004732:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004738:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	7f1b      	ldrb	r3, [r3, #28]
 800473e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004740:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	7f9b      	ldrb	r3, [r3, #30]
 8004746:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004748:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800474e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004756:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004758:	4313      	orrs	r3, r2
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	4313      	orrs	r3, r2
 800475e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004768:	461a      	mov	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800477a:	2001      	movs	r0, #1
 800477c:	f7fd fdb4 	bl	80022e8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004788:	461a      	mov	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	791b      	ldrb	r3, [r3, #4]
 8004792:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004798:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800479e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80047a4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80047ac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80047ae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80047b6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80047bc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6812      	ldr	r2, [r2, #0]
 80047c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047ca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80047d8:	2001      	movs	r0, #1
 80047da:	f7fd fd85 	bl	80022e8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e6:	461a      	mov	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6013      	str	r3, [r2, #0]
}
 80047ec:	bf00      	nop
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	f8de3f23 	.word	0xf8de3f23

080047f8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b0a6      	sub	sp, #152	; 0x98
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004800:	2301      	movs	r3, #1
 8004802:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8004806:	2301      	movs	r3, #1
 8004808:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800480c:	2300      	movs	r3, #0
 800480e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004810:	2300      	movs	r3, #0
 8004812:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004816:	2301      	movs	r3, #1
 8004818:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800481c:	2300      	movs	r3, #0
 800481e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004822:	2301      	movs	r3, #1
 8004824:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004828:	2300      	movs	r3, #0
 800482a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800482e:	2300      	movs	r3, #0
 8004830:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004834:	2300      	movs	r3, #0
 8004836:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004838:	2300      	movs	r3, #0
 800483a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800483e:	2300      	movs	r3, #0
 8004840:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004842:	2300      	movs	r3, #0
 8004844:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004848:	2300      	movs	r3, #0
 800484a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800484e:	2300      	movs	r3, #0
 8004850:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004854:	2300      	movs	r3, #0
 8004856:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800485a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800485e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004860:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004864:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004866:	2300      	movs	r3, #0
 8004868:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800486c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004870:	4619      	mov	r1, r3
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff fe86 	bl	8004584 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004878:	2301      	movs	r3, #1
 800487a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800487c:	2301      	movs	r3, #1
 800487e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004880:	2301      	movs	r3, #1
 8004882:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004886:	2301      	movs	r3, #1
 8004888:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800488a:	2300      	movs	r3, #0
 800488c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800488e:	2300      	movs	r3, #0
 8004890:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004894:	2300      	movs	r3, #0
 8004896:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800489a:	2300      	movs	r3, #0
 800489c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800489e:	2301      	movs	r3, #1
 80048a0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80048a4:	2301      	movs	r3, #1
 80048a6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80048a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048ac:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80048ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80048b2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80048b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048b8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80048ba:	2301      	movs	r3, #1
 80048bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80048c4:	2300      	movs	r3, #0
 80048c6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80048c8:	f107 0308 	add.w	r3, r7, #8
 80048cc:	4619      	mov	r1, r3
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7ff ff08 	bl	80046e4 <ETH_SetDMAConfig>
}
 80048d4:	bf00      	nop
 80048d6:	3798      	adds	r7, #152	; 0x98
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80048dc:	b480      	push	{r7}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3305      	adds	r3, #5
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	021b      	lsls	r3, r3, #8
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	3204      	adds	r2, #4
 80048f4:	7812      	ldrb	r2, [r2, #0]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	4b11      	ldr	r3, [pc, #68]	; (8004944 <ETH_MACAddressConfig+0x68>)
 80048fe:	4413      	add	r3, r2
 8004900:	461a      	mov	r2, r3
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	3303      	adds	r3, #3
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	061a      	lsls	r2, r3, #24
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	3302      	adds	r3, #2
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	041b      	lsls	r3, r3, #16
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3301      	adds	r3, #1
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	021b      	lsls	r3, r3, #8
 8004920:	4313      	orrs	r3, r2
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	7812      	ldrb	r2, [r2, #0]
 8004926:	4313      	orrs	r3, r2
 8004928:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	4b06      	ldr	r3, [pc, #24]	; (8004948 <ETH_MACAddressConfig+0x6c>)
 800492e:	4413      	add	r3, r2
 8004930:	461a      	mov	r2, r3
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	6013      	str	r3, [r2, #0]
}
 8004936:	bf00      	nop
 8004938:	371c      	adds	r7, #28
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40028040 	.word	0x40028040
 8004948:	40028044 	.word	0x40028044

0800494c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004954:	2300      	movs	r3, #0
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	e03e      	b.n	80049d8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68d9      	ldr	r1, [r3, #12]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	4613      	mov	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	440b      	add	r3, r1
 800496a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2200      	movs	r2, #0
 8004976:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	2200      	movs	r2, #0
 800497c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2200      	movs	r2, #0
 8004982:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004984:	68b9      	ldr	r1, [r7, #8]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	3206      	adds	r2, #6
 800498c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d80c      	bhi.n	80049bc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68d9      	ldr	r1, [r3, #12]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	4613      	mov	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	440b      	add	r3, r1
 80049b4:	461a      	mov	r2, r3
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	60da      	str	r2, [r3, #12]
 80049ba:	e004      	b.n	80049c6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	461a      	mov	r2, r3
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3301      	adds	r3, #1
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2b03      	cmp	r3, #3
 80049dc:	d9bd      	bls.n	800495a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049f0:	611a      	str	r2, [r3, #16]
}
 80049f2:	bf00      	nop
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b085      	sub	sp, #20
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004a06:	2300      	movs	r3, #0
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	e046      	b.n	8004a9a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6919      	ldr	r1, [r3, #16]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4613      	mov	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	440b      	add	r3, r1
 8004a1c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	2200      	movs	r2, #0
 8004a28:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2200      	movs	r2, #0
 8004a34:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a48:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8004a50:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004a5e:	68b9      	ldr	r1, [r7, #8]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	3212      	adds	r2, #18
 8004a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d80c      	bhi.n	8004a8a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6919      	ldr	r1, [r3, #16]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	440b      	add	r3, r1
 8004a82:	461a      	mov	r2, r3
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	60da      	str	r2, [r3, #12]
 8004a88:	e004      	b.n	8004a94 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	3301      	adds	r3, #1
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2b03      	cmp	r3, #3
 8004a9e:	d9b5      	bls.n	8004a0c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aca:	60da      	str	r2, [r3, #12]
}
 8004acc:	bf00      	nop
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b08d      	sub	sp, #52	; 0x34
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	3318      	adds	r3, #24
 8004ae8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004af6:	2300      	movs	r3, #0
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b02:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b1a:	d007      	beq.n	8004b2c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b20:	3304      	adds	r3, #4
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e0ff      	b.n	8004d30 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	3301      	adds	r3, #1
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	4b7d      	ldr	r3, [pc, #500]	; (8004d3c <ETH_Prepare_Tx_Descriptors+0x264>)
 8004b46:	4013      	ands	r3, r2
 8004b48:	69fa      	ldr	r2, [r7, #28]
 8004b4a:	6852      	ldr	r2, [r2, #4]
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	6a3b      	ldr	r3, [r7, #32]
 8004b50:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d008      	beq.n	8004b70 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0320 	and.w	r3, r3, #32
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d008      	beq.n	8004b8e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d005      	beq.n	8004ba6 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004b9a:	6a3b      	ldr	r3, [r7, #32]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8004bb2:	f3bf 8f5f 	dmb	sy
}
 8004bb6:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004bc4:	e082      	b.n	8004ccc <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d006      	beq.n	8004be6 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	e005      	b.n	8004bf2 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfa:	2b03      	cmp	r3, #3
 8004bfc:	d902      	bls.n	8004c04 <ETH_Prepare_Tx_Descriptors+0x12c>
 8004bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c00:	3b04      	subs	r3, #4
 8004c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c0c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c26:	d007      	beq.n	8004c38 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d029      	beq.n	8004c8c <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c44:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004c46:	2300      	movs	r3, #0
 8004c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c4a:	e019      	b.n	8004c80 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8004c4c:	f3bf 8f5f 	dmb	sy
}
 8004c50:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004c52:	6a3b      	ldr	r3, [r7, #32]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c60:	3301      	adds	r3, #1
 8004c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c66:	2b03      	cmp	r3, #3
 8004c68:	d902      	bls.n	8004c70 <ETH_Prepare_Tx_Descriptors+0x198>
 8004c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6c:	3b04      	subs	r3, #4
 8004c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c78:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8004c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d3e1      	bcc.n	8004c4c <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8004c88:	2302      	movs	r3, #2
 8004c8a:	e051      	b.n	8004d30 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	3301      	adds	r3, #1
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004ca2:	6a3b      	ldr	r3, [r7, #32]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	4b25      	ldr	r3, [pc, #148]	; (8004d3c <ETH_Prepare_Tx_Descriptors+0x264>)
 8004ca8:	4013      	ands	r3, r2
 8004caa:	69fa      	ldr	r2, [r7, #28]
 8004cac:	6852      	ldr	r2, [r2, #4]
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8004cba:	f3bf 8f5f 	dmb	sy
}
 8004cbe:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f47f af78 	bne.w	8004bc6 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d006      	beq.n	8004cea <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	e005      	b.n	8004cf6 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d06:	6979      	ldr	r1, [r7, #20]
 8004d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	440b      	add	r3, r1
 8004d10:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d16:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d18:	b672      	cpsid	i
}
 8004d1a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	4413      	add	r3, r2
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004d2a:	b662      	cpsie	i
}
 8004d2c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3734      	adds	r7, #52	; 0x34
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	ffffe000 	.word	0xffffe000

08004d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b089      	sub	sp, #36	; 0x24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004d52:	2300      	movs	r3, #0
 8004d54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004d56:	2300      	movs	r3, #0
 8004d58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61fb      	str	r3, [r7, #28]
 8004d5e:	e175      	b.n	800504c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004d60:	2201      	movs	r2, #1
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	4013      	ands	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	f040 8164 	bne.w	8005046 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d005      	beq.n	8004d96 <HAL_GPIO_Init+0x56>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d130      	bne.n	8004df8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	2203      	movs	r2, #3
 8004da2:	fa02 f303 	lsl.w	r3, r2, r3
 8004da6:	43db      	mvns	r3, r3
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	4013      	ands	r3, r2
 8004dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004dcc:	2201      	movs	r2, #1
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	43db      	mvns	r3, r3
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	091b      	lsrs	r3, r3, #4
 8004de2:	f003 0201 	and.w	r2, r3, #1
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f003 0303 	and.w	r3, r3, #3
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d017      	beq.n	8004e34 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	2203      	movs	r2, #3
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	43db      	mvns	r3, r3
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	4013      	ands	r3, r2
 8004e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	689a      	ldr	r2, [r3, #8]
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f003 0303 	and.w	r3, r3, #3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d123      	bne.n	8004e88 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	08da      	lsrs	r2, r3, #3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3208      	adds	r2, #8
 8004e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	220f      	movs	r2, #15
 8004e58:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5c:	43db      	mvns	r3, r3
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	4013      	ands	r3, r2
 8004e62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	f003 0307 	and.w	r3, r3, #7
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	08da      	lsrs	r2, r3, #3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	3208      	adds	r2, #8
 8004e82:	69b9      	ldr	r1, [r7, #24]
 8004e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	2203      	movs	r2, #3
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f003 0203 	and.w	r2, r3, #3
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 80be 	beq.w	8005046 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eca:	4b66      	ldr	r3, [pc, #408]	; (8005064 <HAL_GPIO_Init+0x324>)
 8004ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ece:	4a65      	ldr	r2, [pc, #404]	; (8005064 <HAL_GPIO_Init+0x324>)
 8004ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ed6:	4b63      	ldr	r3, [pc, #396]	; (8005064 <HAL_GPIO_Init+0x324>)
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004ee2:	4a61      	ldr	r2, [pc, #388]	; (8005068 <HAL_GPIO_Init+0x328>)
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	089b      	lsrs	r3, r3, #2
 8004ee8:	3302      	adds	r3, #2
 8004eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	220f      	movs	r2, #15
 8004efa:	fa02 f303 	lsl.w	r3, r2, r3
 8004efe:	43db      	mvns	r3, r3
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	4013      	ands	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a58      	ldr	r2, [pc, #352]	; (800506c <HAL_GPIO_Init+0x32c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d037      	beq.n	8004f7e <HAL_GPIO_Init+0x23e>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a57      	ldr	r2, [pc, #348]	; (8005070 <HAL_GPIO_Init+0x330>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d031      	beq.n	8004f7a <HAL_GPIO_Init+0x23a>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a56      	ldr	r2, [pc, #344]	; (8005074 <HAL_GPIO_Init+0x334>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d02b      	beq.n	8004f76 <HAL_GPIO_Init+0x236>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a55      	ldr	r2, [pc, #340]	; (8005078 <HAL_GPIO_Init+0x338>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d025      	beq.n	8004f72 <HAL_GPIO_Init+0x232>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a54      	ldr	r2, [pc, #336]	; (800507c <HAL_GPIO_Init+0x33c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d01f      	beq.n	8004f6e <HAL_GPIO_Init+0x22e>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a53      	ldr	r2, [pc, #332]	; (8005080 <HAL_GPIO_Init+0x340>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d019      	beq.n	8004f6a <HAL_GPIO_Init+0x22a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a52      	ldr	r2, [pc, #328]	; (8005084 <HAL_GPIO_Init+0x344>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d013      	beq.n	8004f66 <HAL_GPIO_Init+0x226>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a51      	ldr	r2, [pc, #324]	; (8005088 <HAL_GPIO_Init+0x348>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00d      	beq.n	8004f62 <HAL_GPIO_Init+0x222>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a50      	ldr	r2, [pc, #320]	; (800508c <HAL_GPIO_Init+0x34c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d007      	beq.n	8004f5e <HAL_GPIO_Init+0x21e>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a4f      	ldr	r2, [pc, #316]	; (8005090 <HAL_GPIO_Init+0x350>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d101      	bne.n	8004f5a <HAL_GPIO_Init+0x21a>
 8004f56:	2309      	movs	r3, #9
 8004f58:	e012      	b.n	8004f80 <HAL_GPIO_Init+0x240>
 8004f5a:	230a      	movs	r3, #10
 8004f5c:	e010      	b.n	8004f80 <HAL_GPIO_Init+0x240>
 8004f5e:	2308      	movs	r3, #8
 8004f60:	e00e      	b.n	8004f80 <HAL_GPIO_Init+0x240>
 8004f62:	2307      	movs	r3, #7
 8004f64:	e00c      	b.n	8004f80 <HAL_GPIO_Init+0x240>
 8004f66:	2306      	movs	r3, #6
 8004f68:	e00a      	b.n	8004f80 <HAL_GPIO_Init+0x240>
 8004f6a:	2305      	movs	r3, #5
 8004f6c:	e008      	b.n	8004f80 <HAL_GPIO_Init+0x240>
 8004f6e:	2304      	movs	r3, #4
 8004f70:	e006      	b.n	8004f80 <HAL_GPIO_Init+0x240>
 8004f72:	2303      	movs	r3, #3
 8004f74:	e004      	b.n	8004f80 <HAL_GPIO_Init+0x240>
 8004f76:	2302      	movs	r3, #2
 8004f78:	e002      	b.n	8004f80 <HAL_GPIO_Init+0x240>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e000      	b.n	8004f80 <HAL_GPIO_Init+0x240>
 8004f7e:	2300      	movs	r3, #0
 8004f80:	69fa      	ldr	r2, [r7, #28]
 8004f82:	f002 0203 	and.w	r2, r2, #3
 8004f86:	0092      	lsls	r2, r2, #2
 8004f88:	4093      	lsls	r3, r2
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004f90:	4935      	ldr	r1, [pc, #212]	; (8005068 <HAL_GPIO_Init+0x328>)
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	089b      	lsrs	r3, r3, #2
 8004f96:	3302      	adds	r3, #2
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f9e:	4b3d      	ldr	r3, [pc, #244]	; (8005094 <HAL_GPIO_Init+0x354>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	43db      	mvns	r3, r3
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	4013      	ands	r3, r2
 8004fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fc2:	4a34      	ldr	r2, [pc, #208]	; (8005094 <HAL_GPIO_Init+0x354>)
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fc8:	4b32      	ldr	r3, [pc, #200]	; (8005094 <HAL_GPIO_Init+0x354>)
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fec:	4a29      	ldr	r2, [pc, #164]	; (8005094 <HAL_GPIO_Init+0x354>)
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ff2:	4b28      	ldr	r3, [pc, #160]	; (8005094 <HAL_GPIO_Init+0x354>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	43db      	mvns	r3, r3
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	4013      	ands	r3, r2
 8005000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	4313      	orrs	r3, r2
 8005014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005016:	4a1f      	ldr	r2, [pc, #124]	; (8005094 <HAL_GPIO_Init+0x354>)
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800501c:	4b1d      	ldr	r3, [pc, #116]	; (8005094 <HAL_GPIO_Init+0x354>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	43db      	mvns	r3, r3
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	4013      	ands	r3, r2
 800502a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	4313      	orrs	r3, r2
 800503e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005040:	4a14      	ldr	r2, [pc, #80]	; (8005094 <HAL_GPIO_Init+0x354>)
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	3301      	adds	r3, #1
 800504a:	61fb      	str	r3, [r7, #28]
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	2b0f      	cmp	r3, #15
 8005050:	f67f ae86 	bls.w	8004d60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005054:	bf00      	nop
 8005056:	bf00      	nop
 8005058:	3724      	adds	r7, #36	; 0x24
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	40023800 	.word	0x40023800
 8005068:	40013800 	.word	0x40013800
 800506c:	40020000 	.word	0x40020000
 8005070:	40020400 	.word	0x40020400
 8005074:	40020800 	.word	0x40020800
 8005078:	40020c00 	.word	0x40020c00
 800507c:	40021000 	.word	0x40021000
 8005080:	40021400 	.word	0x40021400
 8005084:	40021800 	.word	0x40021800
 8005088:	40021c00 	.word	0x40021c00
 800508c:	40022000 	.word	0x40022000
 8005090:	40022400 	.word	0x40022400
 8005094:	40013c00 	.word	0x40013c00

08005098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	460b      	mov	r3, r1
 80050a2:	807b      	strh	r3, [r7, #2]
 80050a4:	4613      	mov	r3, r2
 80050a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050a8:	787b      	ldrb	r3, [r7, #1]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050ae:	887a      	ldrh	r2, [r7, #2]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80050b4:	e003      	b.n	80050be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80050b6:	887b      	ldrh	r3, [r7, #2]
 80050b8:	041a      	lsls	r2, r3, #16
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	619a      	str	r2, [r3, #24]
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b085      	sub	sp, #20
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	460b      	mov	r3, r1
 80050d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80050dc:	887a      	ldrh	r2, [r7, #2]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4013      	ands	r3, r2
 80050e2:	041a      	lsls	r2, r3, #16
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	43d9      	mvns	r1, r3
 80050e8:	887b      	ldrh	r3, [r7, #2]
 80050ea:	400b      	ands	r3, r1
 80050ec:	431a      	orrs	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	619a      	str	r2, [r3, #24]
}
 80050f2:	bf00      	nop
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80050fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005100:	b08f      	sub	sp, #60	; 0x3c
 8005102:	af0a      	add	r7, sp, #40	; 0x28
 8005104:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e116      	b.n	800533e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d106      	bne.n	8005130 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7fc fcf8 	bl	8001b20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2203      	movs	r2, #3
 8005134:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005140:	2b00      	cmp	r3, #0
 8005142:	d102      	bne.n	800514a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4618      	mov	r0, r3
 8005150:	f002 fe86 	bl	8007e60 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	603b      	str	r3, [r7, #0]
 800515a:	687e      	ldr	r6, [r7, #4]
 800515c:	466d      	mov	r5, sp
 800515e:	f106 0410 	add.w	r4, r6, #16
 8005162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005164:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005168:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800516a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800516e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005172:	1d33      	adds	r3, r6, #4
 8005174:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005176:	6838      	ldr	r0, [r7, #0]
 8005178:	f002 fe1a 	bl	8007db0 <USB_CoreInit>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d005      	beq.n	800518e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2202      	movs	r2, #2
 8005186:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e0d7      	b.n	800533e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2100      	movs	r1, #0
 8005194:	4618      	mov	r0, r3
 8005196:	f002 fe74 	bl	8007e82 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800519a:	2300      	movs	r3, #0
 800519c:	73fb      	strb	r3, [r7, #15]
 800519e:	e04a      	b.n	8005236 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80051a0:	7bfa      	ldrb	r2, [r7, #15]
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	4613      	mov	r3, r2
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	4413      	add	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	440b      	add	r3, r1
 80051ae:	333d      	adds	r3, #61	; 0x3d
 80051b0:	2201      	movs	r2, #1
 80051b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80051b4:	7bfa      	ldrb	r2, [r7, #15]
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	4613      	mov	r3, r2
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	4413      	add	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	440b      	add	r3, r1
 80051c2:	333c      	adds	r3, #60	; 0x3c
 80051c4:	7bfa      	ldrb	r2, [r7, #15]
 80051c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80051c8:	7bfa      	ldrb	r2, [r7, #15]
 80051ca:	7bfb      	ldrb	r3, [r7, #15]
 80051cc:	b298      	uxth	r0, r3
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	4613      	mov	r3, r2
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	4413      	add	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	440b      	add	r3, r1
 80051da:	3344      	adds	r3, #68	; 0x44
 80051dc:	4602      	mov	r2, r0
 80051de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80051e0:	7bfa      	ldrb	r2, [r7, #15]
 80051e2:	6879      	ldr	r1, [r7, #4]
 80051e4:	4613      	mov	r3, r2
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	4413      	add	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	440b      	add	r3, r1
 80051ee:	3340      	adds	r3, #64	; 0x40
 80051f0:	2200      	movs	r2, #0
 80051f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80051f4:	7bfa      	ldrb	r2, [r7, #15]
 80051f6:	6879      	ldr	r1, [r7, #4]
 80051f8:	4613      	mov	r3, r2
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	4413      	add	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	440b      	add	r3, r1
 8005202:	3348      	adds	r3, #72	; 0x48
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005208:	7bfa      	ldrb	r2, [r7, #15]
 800520a:	6879      	ldr	r1, [r7, #4]
 800520c:	4613      	mov	r3, r2
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	4413      	add	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	440b      	add	r3, r1
 8005216:	334c      	adds	r3, #76	; 0x4c
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800521c:	7bfa      	ldrb	r2, [r7, #15]
 800521e:	6879      	ldr	r1, [r7, #4]
 8005220:	4613      	mov	r3, r2
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	4413      	add	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	440b      	add	r3, r1
 800522a:	3354      	adds	r3, #84	; 0x54
 800522c:	2200      	movs	r2, #0
 800522e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005230:	7bfb      	ldrb	r3, [r7, #15]
 8005232:	3301      	adds	r3, #1
 8005234:	73fb      	strb	r3, [r7, #15]
 8005236:	7bfa      	ldrb	r2, [r7, #15]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	429a      	cmp	r2, r3
 800523e:	d3af      	bcc.n	80051a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005240:	2300      	movs	r3, #0
 8005242:	73fb      	strb	r3, [r7, #15]
 8005244:	e044      	b.n	80052d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005246:	7bfa      	ldrb	r2, [r7, #15]
 8005248:	6879      	ldr	r1, [r7, #4]
 800524a:	4613      	mov	r3, r2
 800524c:	00db      	lsls	r3, r3, #3
 800524e:	4413      	add	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	440b      	add	r3, r1
 8005254:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005258:	2200      	movs	r2, #0
 800525a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800525c:	7bfa      	ldrb	r2, [r7, #15]
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	4613      	mov	r3, r2
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	4413      	add	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	440b      	add	r3, r1
 800526a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800526e:	7bfa      	ldrb	r2, [r7, #15]
 8005270:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005272:	7bfa      	ldrb	r2, [r7, #15]
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	440b      	add	r3, r1
 8005280:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005284:	2200      	movs	r2, #0
 8005286:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005288:	7bfa      	ldrb	r2, [r7, #15]
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	4613      	mov	r3, r2
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	4413      	add	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	440b      	add	r3, r1
 8005296:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800529a:	2200      	movs	r2, #0
 800529c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800529e:	7bfa      	ldrb	r2, [r7, #15]
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	4613      	mov	r3, r2
 80052a4:	00db      	lsls	r3, r3, #3
 80052a6:	4413      	add	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	440b      	add	r3, r1
 80052ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80052b4:	7bfa      	ldrb	r2, [r7, #15]
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	4613      	mov	r3, r2
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	4413      	add	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	440b      	add	r3, r1
 80052c2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80052c6:	2200      	movs	r2, #0
 80052c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052ca:	7bfb      	ldrb	r3, [r7, #15]
 80052cc:	3301      	adds	r3, #1
 80052ce:	73fb      	strb	r3, [r7, #15]
 80052d0:	7bfa      	ldrb	r2, [r7, #15]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d3b5      	bcc.n	8005246 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	603b      	str	r3, [r7, #0]
 80052e0:	687e      	ldr	r6, [r7, #4]
 80052e2:	466d      	mov	r5, sp
 80052e4:	f106 0410 	add.w	r4, r6, #16
 80052e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80052f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80052f8:	1d33      	adds	r3, r6, #4
 80052fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052fc:	6838      	ldr	r0, [r7, #0]
 80052fe:	f002 fe0d 	bl	8007f1c <USB_DevInit>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d005      	beq.n	8005314 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e014      	b.n	800533e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	2b01      	cmp	r3, #1
 800532a:	d102      	bne.n	8005332 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f80b 	bl	8005348 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4618      	mov	r0, r3
 8005338:	f002 ffcb 	bl	80082d2 <USB_DevDisconnect>

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005348 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005376:	4b05      	ldr	r3, [pc, #20]	; (800538c <HAL_PCDEx_ActivateLPM+0x44>)
 8005378:	4313      	orrs	r3, r2
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr
 800538c:	10000003 	.word	0x10000003

08005390 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005394:	4b05      	ldr	r3, [pc, #20]	; (80053ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a04      	ldr	r2, [pc, #16]	; (80053ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800539a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800539e:	6013      	str	r3, [r2, #0]
}
 80053a0:	bf00      	nop
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	40007000 	.word	0x40007000

080053b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80053b6:	2300      	movs	r3, #0
 80053b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80053ba:	4b23      	ldr	r3, [pc, #140]	; (8005448 <HAL_PWREx_EnableOverDrive+0x98>)
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	4a22      	ldr	r2, [pc, #136]	; (8005448 <HAL_PWREx_EnableOverDrive+0x98>)
 80053c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053c4:	6413      	str	r3, [r2, #64]	; 0x40
 80053c6:	4b20      	ldr	r3, [pc, #128]	; (8005448 <HAL_PWREx_EnableOverDrive+0x98>)
 80053c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ce:	603b      	str	r3, [r7, #0]
 80053d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80053d2:	4b1e      	ldr	r3, [pc, #120]	; (800544c <HAL_PWREx_EnableOverDrive+0x9c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a1d      	ldr	r2, [pc, #116]	; (800544c <HAL_PWREx_EnableOverDrive+0x9c>)
 80053d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053dc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053de:	f7fc ff77 	bl	80022d0 <HAL_GetTick>
 80053e2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80053e4:	e009      	b.n	80053fa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80053e6:	f7fc ff73 	bl	80022d0 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053f4:	d901      	bls.n	80053fa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e022      	b.n	8005440 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80053fa:	4b14      	ldr	r3, [pc, #80]	; (800544c <HAL_PWREx_EnableOverDrive+0x9c>)
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005406:	d1ee      	bne.n	80053e6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005408:	4b10      	ldr	r3, [pc, #64]	; (800544c <HAL_PWREx_EnableOverDrive+0x9c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a0f      	ldr	r2, [pc, #60]	; (800544c <HAL_PWREx_EnableOverDrive+0x9c>)
 800540e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005412:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005414:	f7fc ff5c 	bl	80022d0 <HAL_GetTick>
 8005418:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800541a:	e009      	b.n	8005430 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800541c:	f7fc ff58 	bl	80022d0 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800542a:	d901      	bls.n	8005430 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e007      	b.n	8005440 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005430:	4b06      	ldr	r3, [pc, #24]	; (800544c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005438:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800543c:	d1ee      	bne.n	800541c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3708      	adds	r7, #8
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40023800 	.word	0x40023800
 800544c:	40007000 	.word	0x40007000

08005450 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005458:	2300      	movs	r3, #0
 800545a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e29b      	b.n	800599e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 8087 	beq.w	8005582 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005474:	4b96      	ldr	r3, [pc, #600]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f003 030c 	and.w	r3, r3, #12
 800547c:	2b04      	cmp	r3, #4
 800547e:	d00c      	beq.n	800549a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005480:	4b93      	ldr	r3, [pc, #588]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f003 030c 	and.w	r3, r3, #12
 8005488:	2b08      	cmp	r3, #8
 800548a:	d112      	bne.n	80054b2 <HAL_RCC_OscConfig+0x62>
 800548c:	4b90      	ldr	r3, [pc, #576]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005494:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005498:	d10b      	bne.n	80054b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800549a:	4b8d      	ldr	r3, [pc, #564]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d06c      	beq.n	8005580 <HAL_RCC_OscConfig+0x130>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d168      	bne.n	8005580 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e275      	b.n	800599e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ba:	d106      	bne.n	80054ca <HAL_RCC_OscConfig+0x7a>
 80054bc:	4b84      	ldr	r3, [pc, #528]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a83      	ldr	r2, [pc, #524]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 80054c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	e02e      	b.n	8005528 <HAL_RCC_OscConfig+0xd8>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10c      	bne.n	80054ec <HAL_RCC_OscConfig+0x9c>
 80054d2:	4b7f      	ldr	r3, [pc, #508]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a7e      	ldr	r2, [pc, #504]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 80054d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054dc:	6013      	str	r3, [r2, #0]
 80054de:	4b7c      	ldr	r3, [pc, #496]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a7b      	ldr	r2, [pc, #492]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 80054e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	e01d      	b.n	8005528 <HAL_RCC_OscConfig+0xd8>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054f4:	d10c      	bne.n	8005510 <HAL_RCC_OscConfig+0xc0>
 80054f6:	4b76      	ldr	r3, [pc, #472]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a75      	ldr	r2, [pc, #468]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 80054fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	4b73      	ldr	r3, [pc, #460]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a72      	ldr	r2, [pc, #456]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 8005508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800550c:	6013      	str	r3, [r2, #0]
 800550e:	e00b      	b.n	8005528 <HAL_RCC_OscConfig+0xd8>
 8005510:	4b6f      	ldr	r3, [pc, #444]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a6e      	ldr	r2, [pc, #440]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 8005516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800551a:	6013      	str	r3, [r2, #0]
 800551c:	4b6c      	ldr	r3, [pc, #432]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a6b      	ldr	r2, [pc, #428]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 8005522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d013      	beq.n	8005558 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005530:	f7fc fece 	bl	80022d0 <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005538:	f7fc feca 	bl	80022d0 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b64      	cmp	r3, #100	; 0x64
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e229      	b.n	800599e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800554a:	4b61      	ldr	r3, [pc, #388]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0f0      	beq.n	8005538 <HAL_RCC_OscConfig+0xe8>
 8005556:	e014      	b.n	8005582 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005558:	f7fc feba 	bl	80022d0 <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800555e:	e008      	b.n	8005572 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005560:	f7fc feb6 	bl	80022d0 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b64      	cmp	r3, #100	; 0x64
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e215      	b.n	800599e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005572:	4b57      	ldr	r3, [pc, #348]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1f0      	bne.n	8005560 <HAL_RCC_OscConfig+0x110>
 800557e:	e000      	b.n	8005582 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d069      	beq.n	8005662 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800558e:	4b50      	ldr	r3, [pc, #320]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f003 030c 	and.w	r3, r3, #12
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00b      	beq.n	80055b2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800559a:	4b4d      	ldr	r3, [pc, #308]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f003 030c 	and.w	r3, r3, #12
 80055a2:	2b08      	cmp	r3, #8
 80055a4:	d11c      	bne.n	80055e0 <HAL_RCC_OscConfig+0x190>
 80055a6:	4b4a      	ldr	r3, [pc, #296]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d116      	bne.n	80055e0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055b2:	4b47      	ldr	r3, [pc, #284]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d005      	beq.n	80055ca <HAL_RCC_OscConfig+0x17a>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d001      	beq.n	80055ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e1e9      	b.n	800599e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ca:	4b41      	ldr	r3, [pc, #260]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	493d      	ldr	r1, [pc, #244]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055de:	e040      	b.n	8005662 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d023      	beq.n	8005630 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055e8:	4b39      	ldr	r3, [pc, #228]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a38      	ldr	r2, [pc, #224]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 80055ee:	f043 0301 	orr.w	r3, r3, #1
 80055f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f4:	f7fc fe6c 	bl	80022d0 <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055fc:	f7fc fe68 	bl	80022d0 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e1c7      	b.n	800599e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800560e:	4b30      	ldr	r3, [pc, #192]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0f0      	beq.n	80055fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800561a:	4b2d      	ldr	r3, [pc, #180]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	4929      	ldr	r1, [pc, #164]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 800562a:	4313      	orrs	r3, r2
 800562c:	600b      	str	r3, [r1, #0]
 800562e:	e018      	b.n	8005662 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005630:	4b27      	ldr	r3, [pc, #156]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a26      	ldr	r2, [pc, #152]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 8005636:	f023 0301 	bic.w	r3, r3, #1
 800563a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800563c:	f7fc fe48 	bl	80022d0 <HAL_GetTick>
 8005640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005642:	e008      	b.n	8005656 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005644:	f7fc fe44 	bl	80022d0 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b02      	cmp	r3, #2
 8005650:	d901      	bls.n	8005656 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e1a3      	b.n	800599e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005656:	4b1e      	ldr	r3, [pc, #120]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1f0      	bne.n	8005644 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0308 	and.w	r3, r3, #8
 800566a:	2b00      	cmp	r3, #0
 800566c:	d038      	beq.n	80056e0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d019      	beq.n	80056aa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005676:	4b16      	ldr	r3, [pc, #88]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 8005678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800567a:	4a15      	ldr	r2, [pc, #84]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 800567c:	f043 0301 	orr.w	r3, r3, #1
 8005680:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005682:	f7fc fe25 	bl	80022d0 <HAL_GetTick>
 8005686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005688:	e008      	b.n	800569c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800568a:	f7fc fe21 	bl	80022d0 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	2b02      	cmp	r3, #2
 8005696:	d901      	bls.n	800569c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e180      	b.n	800599e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800569c:	4b0c      	ldr	r3, [pc, #48]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 800569e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d0f0      	beq.n	800568a <HAL_RCC_OscConfig+0x23a>
 80056a8:	e01a      	b.n	80056e0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056aa:	4b09      	ldr	r3, [pc, #36]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 80056ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ae:	4a08      	ldr	r2, [pc, #32]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 80056b0:	f023 0301 	bic.w	r3, r3, #1
 80056b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b6:	f7fc fe0b 	bl	80022d0 <HAL_GetTick>
 80056ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056bc:	e00a      	b.n	80056d4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056be:	f7fc fe07 	bl	80022d0 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d903      	bls.n	80056d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e166      	b.n	800599e <HAL_RCC_OscConfig+0x54e>
 80056d0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056d4:	4b92      	ldr	r3, [pc, #584]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 80056d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1ee      	bne.n	80056be <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 80a4 	beq.w	8005836 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056ee:	4b8c      	ldr	r3, [pc, #560]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10d      	bne.n	8005716 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80056fa:	4b89      	ldr	r3, [pc, #548]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	4a88      	ldr	r2, [pc, #544]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 8005700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005704:	6413      	str	r3, [r2, #64]	; 0x40
 8005706:	4b86      	ldr	r3, [pc, #536]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800570e:	60bb      	str	r3, [r7, #8]
 8005710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005712:	2301      	movs	r3, #1
 8005714:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005716:	4b83      	ldr	r3, [pc, #524]	; (8005924 <HAL_RCC_OscConfig+0x4d4>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571e:	2b00      	cmp	r3, #0
 8005720:	d118      	bne.n	8005754 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005722:	4b80      	ldr	r3, [pc, #512]	; (8005924 <HAL_RCC_OscConfig+0x4d4>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a7f      	ldr	r2, [pc, #508]	; (8005924 <HAL_RCC_OscConfig+0x4d4>)
 8005728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800572c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800572e:	f7fc fdcf 	bl	80022d0 <HAL_GetTick>
 8005732:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005734:	e008      	b.n	8005748 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005736:	f7fc fdcb 	bl	80022d0 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b64      	cmp	r3, #100	; 0x64
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e12a      	b.n	800599e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005748:	4b76      	ldr	r3, [pc, #472]	; (8005924 <HAL_RCC_OscConfig+0x4d4>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0f0      	beq.n	8005736 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d106      	bne.n	800576a <HAL_RCC_OscConfig+0x31a>
 800575c:	4b70      	ldr	r3, [pc, #448]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 800575e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005760:	4a6f      	ldr	r2, [pc, #444]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 8005762:	f043 0301 	orr.w	r3, r3, #1
 8005766:	6713      	str	r3, [r2, #112]	; 0x70
 8005768:	e02d      	b.n	80057c6 <HAL_RCC_OscConfig+0x376>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10c      	bne.n	800578c <HAL_RCC_OscConfig+0x33c>
 8005772:	4b6b      	ldr	r3, [pc, #428]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 8005774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005776:	4a6a      	ldr	r2, [pc, #424]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 8005778:	f023 0301 	bic.w	r3, r3, #1
 800577c:	6713      	str	r3, [r2, #112]	; 0x70
 800577e:	4b68      	ldr	r3, [pc, #416]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 8005780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005782:	4a67      	ldr	r2, [pc, #412]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 8005784:	f023 0304 	bic.w	r3, r3, #4
 8005788:	6713      	str	r3, [r2, #112]	; 0x70
 800578a:	e01c      	b.n	80057c6 <HAL_RCC_OscConfig+0x376>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	2b05      	cmp	r3, #5
 8005792:	d10c      	bne.n	80057ae <HAL_RCC_OscConfig+0x35e>
 8005794:	4b62      	ldr	r3, [pc, #392]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 8005796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005798:	4a61      	ldr	r2, [pc, #388]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 800579a:	f043 0304 	orr.w	r3, r3, #4
 800579e:	6713      	str	r3, [r2, #112]	; 0x70
 80057a0:	4b5f      	ldr	r3, [pc, #380]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 80057a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a4:	4a5e      	ldr	r2, [pc, #376]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 80057a6:	f043 0301 	orr.w	r3, r3, #1
 80057aa:	6713      	str	r3, [r2, #112]	; 0x70
 80057ac:	e00b      	b.n	80057c6 <HAL_RCC_OscConfig+0x376>
 80057ae:	4b5c      	ldr	r3, [pc, #368]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 80057b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b2:	4a5b      	ldr	r2, [pc, #364]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 80057b4:	f023 0301 	bic.w	r3, r3, #1
 80057b8:	6713      	str	r3, [r2, #112]	; 0x70
 80057ba:	4b59      	ldr	r3, [pc, #356]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 80057bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057be:	4a58      	ldr	r2, [pc, #352]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 80057c0:	f023 0304 	bic.w	r3, r3, #4
 80057c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d015      	beq.n	80057fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ce:	f7fc fd7f 	bl	80022d0 <HAL_GetTick>
 80057d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057d4:	e00a      	b.n	80057ec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057d6:	f7fc fd7b 	bl	80022d0 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e0d8      	b.n	800599e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ec:	4b4c      	ldr	r3, [pc, #304]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 80057ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d0ee      	beq.n	80057d6 <HAL_RCC_OscConfig+0x386>
 80057f8:	e014      	b.n	8005824 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057fa:	f7fc fd69 	bl	80022d0 <HAL_GetTick>
 80057fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005800:	e00a      	b.n	8005818 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005802:	f7fc fd65 	bl	80022d0 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005810:	4293      	cmp	r3, r2
 8005812:	d901      	bls.n	8005818 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e0c2      	b.n	800599e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005818:	4b41      	ldr	r3, [pc, #260]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 800581a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1ee      	bne.n	8005802 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005824:	7dfb      	ldrb	r3, [r7, #23]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d105      	bne.n	8005836 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800582a:	4b3d      	ldr	r3, [pc, #244]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 800582c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582e:	4a3c      	ldr	r2, [pc, #240]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 8005830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005834:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 80ae 	beq.w	800599c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005840:	4b37      	ldr	r3, [pc, #220]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f003 030c 	and.w	r3, r3, #12
 8005848:	2b08      	cmp	r3, #8
 800584a:	d06d      	beq.n	8005928 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	2b02      	cmp	r3, #2
 8005852:	d14b      	bne.n	80058ec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005854:	4b32      	ldr	r3, [pc, #200]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a31      	ldr	r2, [pc, #196]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 800585a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800585e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005860:	f7fc fd36 	bl	80022d0 <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005868:	f7fc fd32 	bl	80022d0 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e091      	b.n	800599e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800587a:	4b29      	ldr	r3, [pc, #164]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1f0      	bne.n	8005868 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	69da      	ldr	r2, [r3, #28]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	431a      	orrs	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	019b      	lsls	r3, r3, #6
 8005896:	431a      	orrs	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589c:	085b      	lsrs	r3, r3, #1
 800589e:	3b01      	subs	r3, #1
 80058a0:	041b      	lsls	r3, r3, #16
 80058a2:	431a      	orrs	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a8:	061b      	lsls	r3, r3, #24
 80058aa:	431a      	orrs	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b0:	071b      	lsls	r3, r3, #28
 80058b2:	491b      	ldr	r1, [pc, #108]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058b8:	4b19      	ldr	r3, [pc, #100]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a18      	ldr	r2, [pc, #96]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 80058be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c4:	f7fc fd04 	bl	80022d0 <HAL_GetTick>
 80058c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ca:	e008      	b.n	80058de <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058cc:	f7fc fd00 	bl	80022d0 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e05f      	b.n	800599e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058de:	4b10      	ldr	r3, [pc, #64]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0f0      	beq.n	80058cc <HAL_RCC_OscConfig+0x47c>
 80058ea:	e057      	b.n	800599c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058ec:	4b0c      	ldr	r3, [pc, #48]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a0b      	ldr	r2, [pc, #44]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 80058f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f8:	f7fc fcea 	bl	80022d0 <HAL_GetTick>
 80058fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058fe:	e008      	b.n	8005912 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005900:	f7fc fce6 	bl	80022d0 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b02      	cmp	r3, #2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e045      	b.n	800599e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005912:	4b03      	ldr	r3, [pc, #12]	; (8005920 <HAL_RCC_OscConfig+0x4d0>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1f0      	bne.n	8005900 <HAL_RCC_OscConfig+0x4b0>
 800591e:	e03d      	b.n	800599c <HAL_RCC_OscConfig+0x54c>
 8005920:	40023800 	.word	0x40023800
 8005924:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005928:	4b1f      	ldr	r3, [pc, #124]	; (80059a8 <HAL_RCC_OscConfig+0x558>)
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d030      	beq.n	8005998 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005940:	429a      	cmp	r2, r3
 8005942:	d129      	bne.n	8005998 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800594e:	429a      	cmp	r2, r3
 8005950:	d122      	bne.n	8005998 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005958:	4013      	ands	r3, r2
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800595e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005960:	4293      	cmp	r3, r2
 8005962:	d119      	bne.n	8005998 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596e:	085b      	lsrs	r3, r3, #1
 8005970:	3b01      	subs	r3, #1
 8005972:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005974:	429a      	cmp	r2, r3
 8005976:	d10f      	bne.n	8005998 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005982:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005984:	429a      	cmp	r2, r3
 8005986:	d107      	bne.n	8005998 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005992:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005994:	429a      	cmp	r2, r3
 8005996:	d001      	beq.n	800599c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e000      	b.n	800599e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3718      	adds	r7, #24
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	40023800 	.word	0x40023800

080059ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80059b6:	2300      	movs	r3, #0
 80059b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e0d0      	b.n	8005b66 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059c4:	4b6a      	ldr	r3, [pc, #424]	; (8005b70 <HAL_RCC_ClockConfig+0x1c4>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 030f 	and.w	r3, r3, #15
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d910      	bls.n	80059f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059d2:	4b67      	ldr	r3, [pc, #412]	; (8005b70 <HAL_RCC_ClockConfig+0x1c4>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f023 020f 	bic.w	r2, r3, #15
 80059da:	4965      	ldr	r1, [pc, #404]	; (8005b70 <HAL_RCC_ClockConfig+0x1c4>)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	4313      	orrs	r3, r2
 80059e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059e2:	4b63      	ldr	r3, [pc, #396]	; (8005b70 <HAL_RCC_ClockConfig+0x1c4>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 030f 	and.w	r3, r3, #15
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d001      	beq.n	80059f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e0b8      	b.n	8005b66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d020      	beq.n	8005a42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0304 	and.w	r3, r3, #4
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d005      	beq.n	8005a18 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a0c:	4b59      	ldr	r3, [pc, #356]	; (8005b74 <HAL_RCC_ClockConfig+0x1c8>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	4a58      	ldr	r2, [pc, #352]	; (8005b74 <HAL_RCC_ClockConfig+0x1c8>)
 8005a12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0308 	and.w	r3, r3, #8
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d005      	beq.n	8005a30 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a24:	4b53      	ldr	r3, [pc, #332]	; (8005b74 <HAL_RCC_ClockConfig+0x1c8>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	4a52      	ldr	r2, [pc, #328]	; (8005b74 <HAL_RCC_ClockConfig+0x1c8>)
 8005a2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a30:	4b50      	ldr	r3, [pc, #320]	; (8005b74 <HAL_RCC_ClockConfig+0x1c8>)
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	494d      	ldr	r1, [pc, #308]	; (8005b74 <HAL_RCC_ClockConfig+0x1c8>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d040      	beq.n	8005ad0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d107      	bne.n	8005a66 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a56:	4b47      	ldr	r3, [pc, #284]	; (8005b74 <HAL_RCC_ClockConfig+0x1c8>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d115      	bne.n	8005a8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e07f      	b.n	8005b66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d107      	bne.n	8005a7e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a6e:	4b41      	ldr	r3, [pc, #260]	; (8005b74 <HAL_RCC_ClockConfig+0x1c8>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d109      	bne.n	8005a8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e073      	b.n	8005b66 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a7e:	4b3d      	ldr	r3, [pc, #244]	; (8005b74 <HAL_RCC_ClockConfig+0x1c8>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e06b      	b.n	8005b66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a8e:	4b39      	ldr	r3, [pc, #228]	; (8005b74 <HAL_RCC_ClockConfig+0x1c8>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f023 0203 	bic.w	r2, r3, #3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	4936      	ldr	r1, [pc, #216]	; (8005b74 <HAL_RCC_ClockConfig+0x1c8>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aa0:	f7fc fc16 	bl	80022d0 <HAL_GetTick>
 8005aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aa6:	e00a      	b.n	8005abe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aa8:	f7fc fc12 	bl	80022d0 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e053      	b.n	8005b66 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005abe:	4b2d      	ldr	r3, [pc, #180]	; (8005b74 <HAL_RCC_ClockConfig+0x1c8>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f003 020c 	and.w	r2, r3, #12
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d1eb      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ad0:	4b27      	ldr	r3, [pc, #156]	; (8005b70 <HAL_RCC_ClockConfig+0x1c4>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 030f 	and.w	r3, r3, #15
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d210      	bcs.n	8005b00 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ade:	4b24      	ldr	r3, [pc, #144]	; (8005b70 <HAL_RCC_ClockConfig+0x1c4>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f023 020f 	bic.w	r2, r3, #15
 8005ae6:	4922      	ldr	r1, [pc, #136]	; (8005b70 <HAL_RCC_ClockConfig+0x1c4>)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aee:	4b20      	ldr	r3, [pc, #128]	; (8005b70 <HAL_RCC_ClockConfig+0x1c4>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 030f 	and.w	r3, r3, #15
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d001      	beq.n	8005b00 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e032      	b.n	8005b66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d008      	beq.n	8005b1e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b0c:	4b19      	ldr	r3, [pc, #100]	; (8005b74 <HAL_RCC_ClockConfig+0x1c8>)
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	4916      	ldr	r1, [pc, #88]	; (8005b74 <HAL_RCC_ClockConfig+0x1c8>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d009      	beq.n	8005b3e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b2a:	4b12      	ldr	r3, [pc, #72]	; (8005b74 <HAL_RCC_ClockConfig+0x1c8>)
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	490e      	ldr	r1, [pc, #56]	; (8005b74 <HAL_RCC_ClockConfig+0x1c8>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b3e:	f000 f821 	bl	8005b84 <HAL_RCC_GetSysClockFreq>
 8005b42:	4602      	mov	r2, r0
 8005b44:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <HAL_RCC_ClockConfig+0x1c8>)
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	091b      	lsrs	r3, r3, #4
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	490a      	ldr	r1, [pc, #40]	; (8005b78 <HAL_RCC_ClockConfig+0x1cc>)
 8005b50:	5ccb      	ldrb	r3, [r1, r3]
 8005b52:	fa22 f303 	lsr.w	r3, r2, r3
 8005b56:	4a09      	ldr	r2, [pc, #36]	; (8005b7c <HAL_RCC_ClockConfig+0x1d0>)
 8005b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005b5a:	4b09      	ldr	r3, [pc, #36]	; (8005b80 <HAL_RCC_ClockConfig+0x1d4>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fc f858 	bl	8001c14 <HAL_InitTick>

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	40023c00 	.word	0x40023c00
 8005b74:	40023800 	.word	0x40023800
 8005b78:	0801aea4 	.word	0x0801aea4
 8005b7c:	20000000 	.word	0x20000000
 8005b80:	20000004 	.word	0x20000004

08005b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b88:	b094      	sub	sp, #80	; 0x50
 8005b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b90:	2300      	movs	r3, #0
 8005b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b94:	2300      	movs	r3, #0
 8005b96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b9c:	4b79      	ldr	r3, [pc, #484]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f003 030c 	and.w	r3, r3, #12
 8005ba4:	2b08      	cmp	r3, #8
 8005ba6:	d00d      	beq.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8005ba8:	2b08      	cmp	r3, #8
 8005baa:	f200 80e1 	bhi.w	8005d70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <HAL_RCC_GetSysClockFreq+0x34>
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d003      	beq.n	8005bbe <HAL_RCC_GetSysClockFreq+0x3a>
 8005bb6:	e0db      	b.n	8005d70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bb8:	4b73      	ldr	r3, [pc, #460]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8005bba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bbc:	e0db      	b.n	8005d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bbe:	4b73      	ldr	r3, [pc, #460]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x208>)
 8005bc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bc2:	e0d8      	b.n	8005d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bc4:	4b6f      	ldr	r3, [pc, #444]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bcc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005bce:	4b6d      	ldr	r3, [pc, #436]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d063      	beq.n	8005ca2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bda:	4b6a      	ldr	r3, [pc, #424]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	099b      	lsrs	r3, r3, #6
 8005be0:	2200      	movs	r2, #0
 8005be2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005be4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bec:	633b      	str	r3, [r7, #48]	; 0x30
 8005bee:	2300      	movs	r3, #0
 8005bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8005bf2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005bf6:	4622      	mov	r2, r4
 8005bf8:	462b      	mov	r3, r5
 8005bfa:	f04f 0000 	mov.w	r0, #0
 8005bfe:	f04f 0100 	mov.w	r1, #0
 8005c02:	0159      	lsls	r1, r3, #5
 8005c04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c08:	0150      	lsls	r0, r2, #5
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	4621      	mov	r1, r4
 8005c10:	1a51      	subs	r1, r2, r1
 8005c12:	6139      	str	r1, [r7, #16]
 8005c14:	4629      	mov	r1, r5
 8005c16:	eb63 0301 	sbc.w	r3, r3, r1
 8005c1a:	617b      	str	r3, [r7, #20]
 8005c1c:	f04f 0200 	mov.w	r2, #0
 8005c20:	f04f 0300 	mov.w	r3, #0
 8005c24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c28:	4659      	mov	r1, fp
 8005c2a:	018b      	lsls	r3, r1, #6
 8005c2c:	4651      	mov	r1, sl
 8005c2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c32:	4651      	mov	r1, sl
 8005c34:	018a      	lsls	r2, r1, #6
 8005c36:	4651      	mov	r1, sl
 8005c38:	ebb2 0801 	subs.w	r8, r2, r1
 8005c3c:	4659      	mov	r1, fp
 8005c3e:	eb63 0901 	sbc.w	r9, r3, r1
 8005c42:	f04f 0200 	mov.w	r2, #0
 8005c46:	f04f 0300 	mov.w	r3, #0
 8005c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c56:	4690      	mov	r8, r2
 8005c58:	4699      	mov	r9, r3
 8005c5a:	4623      	mov	r3, r4
 8005c5c:	eb18 0303 	adds.w	r3, r8, r3
 8005c60:	60bb      	str	r3, [r7, #8]
 8005c62:	462b      	mov	r3, r5
 8005c64:	eb49 0303 	adc.w	r3, r9, r3
 8005c68:	60fb      	str	r3, [r7, #12]
 8005c6a:	f04f 0200 	mov.w	r2, #0
 8005c6e:	f04f 0300 	mov.w	r3, #0
 8005c72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c76:	4629      	mov	r1, r5
 8005c78:	024b      	lsls	r3, r1, #9
 8005c7a:	4621      	mov	r1, r4
 8005c7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c80:	4621      	mov	r1, r4
 8005c82:	024a      	lsls	r2, r1, #9
 8005c84:	4610      	mov	r0, r2
 8005c86:	4619      	mov	r1, r3
 8005c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c94:	f7fa fb24 	bl	80002e0 <__aeabi_uldivmod>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ca0:	e058      	b.n	8005d54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ca2:	4b38      	ldr	r3, [pc, #224]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	099b      	lsrs	r3, r3, #6
 8005ca8:	2200      	movs	r2, #0
 8005caa:	4618      	mov	r0, r3
 8005cac:	4611      	mov	r1, r2
 8005cae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005cb2:	623b      	str	r3, [r7, #32]
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8005cb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005cbc:	4642      	mov	r2, r8
 8005cbe:	464b      	mov	r3, r9
 8005cc0:	f04f 0000 	mov.w	r0, #0
 8005cc4:	f04f 0100 	mov.w	r1, #0
 8005cc8:	0159      	lsls	r1, r3, #5
 8005cca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cce:	0150      	lsls	r0, r2, #5
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4641      	mov	r1, r8
 8005cd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005cda:	4649      	mov	r1, r9
 8005cdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ce0:	f04f 0200 	mov.w	r2, #0
 8005ce4:	f04f 0300 	mov.w	r3, #0
 8005ce8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005cec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005cf0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005cf4:	ebb2 040a 	subs.w	r4, r2, sl
 8005cf8:	eb63 050b 	sbc.w	r5, r3, fp
 8005cfc:	f04f 0200 	mov.w	r2, #0
 8005d00:	f04f 0300 	mov.w	r3, #0
 8005d04:	00eb      	lsls	r3, r5, #3
 8005d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d0a:	00e2      	lsls	r2, r4, #3
 8005d0c:	4614      	mov	r4, r2
 8005d0e:	461d      	mov	r5, r3
 8005d10:	4643      	mov	r3, r8
 8005d12:	18e3      	adds	r3, r4, r3
 8005d14:	603b      	str	r3, [r7, #0]
 8005d16:	464b      	mov	r3, r9
 8005d18:	eb45 0303 	adc.w	r3, r5, r3
 8005d1c:	607b      	str	r3, [r7, #4]
 8005d1e:	f04f 0200 	mov.w	r2, #0
 8005d22:	f04f 0300 	mov.w	r3, #0
 8005d26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d2a:	4629      	mov	r1, r5
 8005d2c:	028b      	lsls	r3, r1, #10
 8005d2e:	4621      	mov	r1, r4
 8005d30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d34:	4621      	mov	r1, r4
 8005d36:	028a      	lsls	r2, r1, #10
 8005d38:	4610      	mov	r0, r2
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d3e:	2200      	movs	r2, #0
 8005d40:	61bb      	str	r3, [r7, #24]
 8005d42:	61fa      	str	r2, [r7, #28]
 8005d44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d48:	f7fa faca 	bl	80002e0 <__aeabi_uldivmod>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	460b      	mov	r3, r1
 8005d50:	4613      	mov	r3, r2
 8005d52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005d54:	4b0b      	ldr	r3, [pc, #44]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	0c1b      	lsrs	r3, r3, #16
 8005d5a:	f003 0303 	and.w	r3, r3, #3
 8005d5e:	3301      	adds	r3, #1
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005d64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d6e:	e002      	b.n	8005d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d70:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3750      	adds	r7, #80	; 0x50
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d82:	bf00      	nop
 8005d84:	40023800 	.word	0x40023800
 8005d88:	00f42400 	.word	0x00f42400
 8005d8c:	007a1200 	.word	0x007a1200

08005d90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d90:	b480      	push	{r7}
 8005d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d94:	4b03      	ldr	r3, [pc, #12]	; (8005da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d96:	681b      	ldr	r3, [r3, #0]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	20000000 	.word	0x20000000

08005da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005dac:	f7ff fff0 	bl	8005d90 <HAL_RCC_GetHCLKFreq>
 8005db0:	4602      	mov	r2, r0
 8005db2:	4b05      	ldr	r3, [pc, #20]	; (8005dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	0a9b      	lsrs	r3, r3, #10
 8005db8:	f003 0307 	and.w	r3, r3, #7
 8005dbc:	4903      	ldr	r1, [pc, #12]	; (8005dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dbe:	5ccb      	ldrb	r3, [r1, r3]
 8005dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	40023800 	.word	0x40023800
 8005dcc:	0801aeb4 	.word	0x0801aeb4

08005dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005dd4:	f7ff ffdc 	bl	8005d90 <HAL_RCC_GetHCLKFreq>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	4b05      	ldr	r3, [pc, #20]	; (8005df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	0b5b      	lsrs	r3, r3, #13
 8005de0:	f003 0307 	and.w	r3, r3, #7
 8005de4:	4903      	ldr	r1, [pc, #12]	; (8005df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005de6:	5ccb      	ldrb	r3, [r1, r3]
 8005de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	40023800 	.word	0x40023800
 8005df4:	0801aeb4 	.word	0x0801aeb4

08005df8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	220f      	movs	r2, #15
 8005e06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e08:	4b12      	ldr	r3, [pc, #72]	; (8005e54 <HAL_RCC_GetClockConfig+0x5c>)
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f003 0203 	and.w	r2, r3, #3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005e14:	4b0f      	ldr	r3, [pc, #60]	; (8005e54 <HAL_RCC_GetClockConfig+0x5c>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005e20:	4b0c      	ldr	r3, [pc, #48]	; (8005e54 <HAL_RCC_GetClockConfig+0x5c>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005e2c:	4b09      	ldr	r3, [pc, #36]	; (8005e54 <HAL_RCC_GetClockConfig+0x5c>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	08db      	lsrs	r3, r3, #3
 8005e32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005e3a:	4b07      	ldr	r3, [pc, #28]	; (8005e58 <HAL_RCC_GetClockConfig+0x60>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 020f 	and.w	r2, r3, #15
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	601a      	str	r2, [r3, #0]
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	40023800 	.word	0x40023800
 8005e58:	40023c00 	.word	0x40023c00

08005e5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005e64:	2300      	movs	r3, #0
 8005e66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005e70:	2300      	movs	r3, #0
 8005e72:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005e74:	2300      	movs	r3, #0
 8005e76:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d012      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e84:	4b69      	ldr	r3, [pc, #420]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	4a68      	ldr	r2, [pc, #416]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e8a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005e8e:	6093      	str	r3, [r2, #8]
 8005e90:	4b66      	ldr	r3, [pc, #408]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e98:	4964      	ldr	r1, [pc, #400]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d017      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005eb6:	4b5d      	ldr	r3, [pc, #372]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ebc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec4:	4959      	ldr	r1, [pc, #356]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ed4:	d101      	bne.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d017      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ef2:	4b4e      	ldr	r3, [pc, #312]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ef8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f00:	494a      	ldr	r1, [pc, #296]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f10:	d101      	bne.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005f12:	2301      	movs	r3, #1
 8005f14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 808b 	beq.w	8006056 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f40:	4b3a      	ldr	r3, [pc, #232]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f44:	4a39      	ldr	r2, [pc, #228]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f4a:	6413      	str	r3, [r2, #64]	; 0x40
 8005f4c:	4b37      	ldr	r3, [pc, #220]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f54:	60bb      	str	r3, [r7, #8]
 8005f56:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f58:	4b35      	ldr	r3, [pc, #212]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a34      	ldr	r2, [pc, #208]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f64:	f7fc f9b4 	bl	80022d0 <HAL_GetTick>
 8005f68:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005f6a:	e008      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f6c:	f7fc f9b0 	bl	80022d0 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b64      	cmp	r3, #100	; 0x64
 8005f78:	d901      	bls.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e38f      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005f7e:	4b2c      	ldr	r3, [pc, #176]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d0f0      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f8a:	4b28      	ldr	r3, [pc, #160]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f92:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d035      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d02e      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fa8:	4b20      	ldr	r3, [pc, #128]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fb0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fb2:	4b1e      	ldr	r3, [pc, #120]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb6:	4a1d      	ldr	r2, [pc, #116]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fbc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005fbe:	4b1b      	ldr	r3, [pc, #108]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc2:	4a1a      	ldr	r2, [pc, #104]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fc8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005fca:	4a18      	ldr	r2, [pc, #96]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005fd0:	4b16      	ldr	r3, [pc, #88]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d114      	bne.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fdc:	f7fc f978 	bl	80022d0 <HAL_GetTick>
 8005fe0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fe2:	e00a      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fe4:	f7fc f974 	bl	80022d0 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e351      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ffa:	4b0c      	ldr	r3, [pc, #48]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0ee      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800600e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006012:	d111      	bne.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006014:	4b05      	ldr	r3, [pc, #20]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006020:	4b04      	ldr	r3, [pc, #16]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006022:	400b      	ands	r3, r1
 8006024:	4901      	ldr	r1, [pc, #4]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006026:	4313      	orrs	r3, r2
 8006028:	608b      	str	r3, [r1, #8]
 800602a:	e00b      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800602c:	40023800 	.word	0x40023800
 8006030:	40007000 	.word	0x40007000
 8006034:	0ffffcff 	.word	0x0ffffcff
 8006038:	4bac      	ldr	r3, [pc, #688]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	4aab      	ldr	r2, [pc, #684]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800603e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006042:	6093      	str	r3, [r2, #8]
 8006044:	4ba9      	ldr	r3, [pc, #676]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006046:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006050:	49a6      	ldr	r1, [pc, #664]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006052:	4313      	orrs	r3, r2
 8006054:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0310 	and.w	r3, r3, #16
 800605e:	2b00      	cmp	r3, #0
 8006060:	d010      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006062:	4ba2      	ldr	r3, [pc, #648]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006068:	4aa0      	ldr	r2, [pc, #640]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800606a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800606e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006072:	4b9e      	ldr	r3, [pc, #632]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006074:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607c:	499b      	ldr	r1, [pc, #620]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800607e:	4313      	orrs	r3, r2
 8006080:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00a      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006090:	4b96      	ldr	r3, [pc, #600]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006096:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800609e:	4993      	ldr	r1, [pc, #588]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00a      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060b2:	4b8e      	ldr	r3, [pc, #568]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060c0:	498a      	ldr	r1, [pc, #552]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00a      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060d4:	4b85      	ldr	r3, [pc, #532]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060e2:	4982      	ldr	r1, [pc, #520]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00a      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80060f6:	4b7d      	ldr	r3, [pc, #500]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006104:	4979      	ldr	r1, [pc, #484]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006106:	4313      	orrs	r3, r2
 8006108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00a      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006118:	4b74      	ldr	r3, [pc, #464]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800611a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800611e:	f023 0203 	bic.w	r2, r3, #3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006126:	4971      	ldr	r1, [pc, #452]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006128:	4313      	orrs	r3, r2
 800612a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00a      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800613a:	4b6c      	ldr	r3, [pc, #432]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800613c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006140:	f023 020c 	bic.w	r2, r3, #12
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006148:	4968      	ldr	r1, [pc, #416]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800614a:	4313      	orrs	r3, r2
 800614c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00a      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800615c:	4b63      	ldr	r3, [pc, #396]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800615e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006162:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800616a:	4960      	ldr	r1, [pc, #384]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800616c:	4313      	orrs	r3, r2
 800616e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00a      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800617e:	4b5b      	ldr	r3, [pc, #364]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006184:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800618c:	4957      	ldr	r1, [pc, #348]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800618e:	4313      	orrs	r3, r2
 8006190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00a      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80061a0:	4b52      	ldr	r3, [pc, #328]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ae:	494f      	ldr	r1, [pc, #316]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00a      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80061c2:	4b4a      	ldr	r3, [pc, #296]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061d0:	4946      	ldr	r1, [pc, #280]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00a      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80061e4:	4b41      	ldr	r3, [pc, #260]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f2:	493e      	ldr	r1, [pc, #248]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00a      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006206:	4b39      	ldr	r3, [pc, #228]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800620c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006214:	4935      	ldr	r1, [pc, #212]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006216:	4313      	orrs	r3, r2
 8006218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00a      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006228:	4b30      	ldr	r3, [pc, #192]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800622a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006236:	492d      	ldr	r1, [pc, #180]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006238:	4313      	orrs	r3, r2
 800623a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d011      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800624a:	4b28      	ldr	r3, [pc, #160]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800624c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006250:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006258:	4924      	ldr	r1, [pc, #144]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800625a:	4313      	orrs	r3, r2
 800625c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006264:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006268:	d101      	bne.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800626a:	2301      	movs	r3, #1
 800626c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	2b00      	cmp	r3, #0
 8006278:	d001      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800627a:	2301      	movs	r3, #1
 800627c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00a      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800628a:	4b18      	ldr	r3, [pc, #96]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800628c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006290:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006298:	4914      	ldr	r1, [pc, #80]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800629a:	4313      	orrs	r3, r2
 800629c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00b      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80062ac:	4b0f      	ldr	r3, [pc, #60]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062bc:	490b      	ldr	r1, [pc, #44]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00f      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80062d0:	4b06      	ldr	r3, [pc, #24]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062e0:	4902      	ldr	r1, [pc, #8]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80062e8:	e002      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80062ea:	bf00      	nop
 80062ec:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00b      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80062fc:	4b8a      	ldr	r3, [pc, #552]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006302:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630c:	4986      	ldr	r1, [pc, #536]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800630e:	4313      	orrs	r3, r2
 8006310:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00b      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006320:	4b81      	ldr	r3, [pc, #516]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006322:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006326:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006330:	497d      	ldr	r1, [pc, #500]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006332:	4313      	orrs	r3, r2
 8006334:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d006      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 80d6 	beq.w	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800634c:	4b76      	ldr	r3, [pc, #472]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a75      	ldr	r2, [pc, #468]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006352:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006356:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006358:	f7fb ffba 	bl	80022d0 <HAL_GetTick>
 800635c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800635e:	e008      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006360:	f7fb ffb6 	bl	80022d0 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	2b64      	cmp	r3, #100	; 0x64
 800636c:	d901      	bls.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e195      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006372:	4b6d      	ldr	r3, [pc, #436]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1f0      	bne.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d021      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x572>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638e:	2b00      	cmp	r3, #0
 8006390:	d11d      	bne.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006392:	4b65      	ldr	r3, [pc, #404]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006398:	0c1b      	lsrs	r3, r3, #16
 800639a:	f003 0303 	and.w	r3, r3, #3
 800639e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80063a0:	4b61      	ldr	r3, [pc, #388]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063a6:	0e1b      	lsrs	r3, r3, #24
 80063a8:	f003 030f 	and.w	r3, r3, #15
 80063ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	019a      	lsls	r2, r3, #6
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	041b      	lsls	r3, r3, #16
 80063b8:	431a      	orrs	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	061b      	lsls	r3, r3, #24
 80063be:	431a      	orrs	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	071b      	lsls	r3, r3, #28
 80063c6:	4958      	ldr	r1, [pc, #352]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d004      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063e2:	d00a      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d02e      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063f8:	d129      	bne.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80063fa:	4b4b      	ldr	r3, [pc, #300]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006400:	0c1b      	lsrs	r3, r3, #16
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006408:	4b47      	ldr	r3, [pc, #284]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800640a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800640e:	0f1b      	lsrs	r3, r3, #28
 8006410:	f003 0307 	and.w	r3, r3, #7
 8006414:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	019a      	lsls	r2, r3, #6
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	041b      	lsls	r3, r3, #16
 8006420:	431a      	orrs	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	061b      	lsls	r3, r3, #24
 8006428:	431a      	orrs	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	071b      	lsls	r3, r3, #28
 800642e:	493e      	ldr	r1, [pc, #248]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006430:	4313      	orrs	r3, r2
 8006432:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006436:	4b3c      	ldr	r3, [pc, #240]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800643c:	f023 021f 	bic.w	r2, r3, #31
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	3b01      	subs	r3, #1
 8006446:	4938      	ldr	r1, [pc, #224]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006448:	4313      	orrs	r3, r2
 800644a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d01d      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800645a:	4b33      	ldr	r3, [pc, #204]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800645c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006460:	0e1b      	lsrs	r3, r3, #24
 8006462:	f003 030f 	and.w	r3, r3, #15
 8006466:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006468:	4b2f      	ldr	r3, [pc, #188]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800646a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800646e:	0f1b      	lsrs	r3, r3, #28
 8006470:	f003 0307 	and.w	r3, r3, #7
 8006474:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	019a      	lsls	r2, r3, #6
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	041b      	lsls	r3, r3, #16
 8006482:	431a      	orrs	r2, r3
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	061b      	lsls	r3, r3, #24
 8006488:	431a      	orrs	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	071b      	lsls	r3, r3, #28
 800648e:	4926      	ldr	r1, [pc, #152]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006490:	4313      	orrs	r3, r2
 8006492:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d011      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	019a      	lsls	r2, r3, #6
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	041b      	lsls	r3, r3, #16
 80064ae:	431a      	orrs	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	061b      	lsls	r3, r3, #24
 80064b6:	431a      	orrs	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	071b      	lsls	r3, r3, #28
 80064be:	491a      	ldr	r1, [pc, #104]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80064c6:	4b18      	ldr	r3, [pc, #96]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a17      	ldr	r2, [pc, #92]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064d2:	f7fb fefd 	bl	80022d0 <HAL_GetTick>
 80064d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064d8:	e008      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80064da:	f7fb fef9 	bl	80022d0 <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	2b64      	cmp	r3, #100	; 0x64
 80064e6:	d901      	bls.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e0d8      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064ec:	4b0e      	ldr	r3, [pc, #56]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d0f0      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	f040 80ce 	bne.w	800669c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006500:	4b09      	ldr	r3, [pc, #36]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a08      	ldr	r2, [pc, #32]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006506:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800650a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800650c:	f7fb fee0 	bl	80022d0 <HAL_GetTick>
 8006510:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006512:	e00b      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006514:	f7fb fedc 	bl	80022d0 <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	2b64      	cmp	r3, #100	; 0x64
 8006520:	d904      	bls.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e0bb      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006526:	bf00      	nop
 8006528:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800652c:	4b5e      	ldr	r3, [pc, #376]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006538:	d0ec      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654a:	2b00      	cmp	r3, #0
 800654c:	d009      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006556:	2b00      	cmp	r3, #0
 8006558:	d02e      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655e:	2b00      	cmp	r3, #0
 8006560:	d12a      	bne.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006562:	4b51      	ldr	r3, [pc, #324]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006568:	0c1b      	lsrs	r3, r3, #16
 800656a:	f003 0303 	and.w	r3, r3, #3
 800656e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006570:	4b4d      	ldr	r3, [pc, #308]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006576:	0f1b      	lsrs	r3, r3, #28
 8006578:	f003 0307 	and.w	r3, r3, #7
 800657c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	019a      	lsls	r2, r3, #6
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	041b      	lsls	r3, r3, #16
 8006588:	431a      	orrs	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	061b      	lsls	r3, r3, #24
 8006590:	431a      	orrs	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	071b      	lsls	r3, r3, #28
 8006596:	4944      	ldr	r1, [pc, #272]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006598:	4313      	orrs	r3, r2
 800659a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800659e:	4b42      	ldr	r3, [pc, #264]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ac:	3b01      	subs	r3, #1
 80065ae:	021b      	lsls	r3, r3, #8
 80065b0:	493d      	ldr	r1, [pc, #244]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d022      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065cc:	d11d      	bne.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80065ce:	4b36      	ldr	r3, [pc, #216]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d4:	0e1b      	lsrs	r3, r3, #24
 80065d6:	f003 030f 	and.w	r3, r3, #15
 80065da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80065dc:	4b32      	ldr	r3, [pc, #200]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e2:	0f1b      	lsrs	r3, r3, #28
 80065e4:	f003 0307 	and.w	r3, r3, #7
 80065e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	019a      	lsls	r2, r3, #6
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	041b      	lsls	r3, r3, #16
 80065f6:	431a      	orrs	r2, r3
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	061b      	lsls	r3, r3, #24
 80065fc:	431a      	orrs	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	071b      	lsls	r3, r3, #28
 8006602:	4929      	ldr	r1, [pc, #164]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006604:	4313      	orrs	r3, r2
 8006606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0308 	and.w	r3, r3, #8
 8006612:	2b00      	cmp	r3, #0
 8006614:	d028      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006616:	4b24      	ldr	r3, [pc, #144]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800661c:	0e1b      	lsrs	r3, r3, #24
 800661e:	f003 030f 	and.w	r3, r3, #15
 8006622:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006624:	4b20      	ldr	r3, [pc, #128]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800662a:	0c1b      	lsrs	r3, r3, #16
 800662c:	f003 0303 	and.w	r3, r3, #3
 8006630:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	019a      	lsls	r2, r3, #6
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	041b      	lsls	r3, r3, #16
 800663c:	431a      	orrs	r2, r3
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	061b      	lsls	r3, r3, #24
 8006642:	431a      	orrs	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	071b      	lsls	r3, r3, #28
 800664a:	4917      	ldr	r1, [pc, #92]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800664c:	4313      	orrs	r3, r2
 800664e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006652:	4b15      	ldr	r3, [pc, #84]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006658:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006660:	4911      	ldr	r1, [pc, #68]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006662:	4313      	orrs	r3, r2
 8006664:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006668:	4b0f      	ldr	r3, [pc, #60]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a0e      	ldr	r2, [pc, #56]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800666e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006672:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006674:	f7fb fe2c 	bl	80022d0 <HAL_GetTick>
 8006678:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800667a:	e008      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800667c:	f7fb fe28 	bl	80022d0 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b64      	cmp	r3, #100	; 0x64
 8006688:	d901      	bls.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e007      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800668e:	4b06      	ldr	r3, [pc, #24]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006696:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800669a:	d1ef      	bne.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3720      	adds	r7, #32
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	40023800 	.word	0x40023800

080066ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e049      	b.n	8006752 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d106      	bne.n	80066d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f841 	bl	800675a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	3304      	adds	r3, #4
 80066e8:	4619      	mov	r1, r3
 80066ea:	4610      	mov	r0, r2
 80066ec:	f000 fa00 	bl	8006af0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800675a:	b480      	push	{r7}
 800675c:	b083      	sub	sp, #12
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006762:	bf00      	nop
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
	...

08006770 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b01      	cmp	r3, #1
 8006782:	d001      	beq.n	8006788 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e054      	b.n	8006832 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2202      	movs	r2, #2
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 0201 	orr.w	r2, r2, #1
 800679e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a26      	ldr	r2, [pc, #152]	; (8006840 <HAL_TIM_Base_Start_IT+0xd0>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d022      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0x80>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b2:	d01d      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0x80>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a22      	ldr	r2, [pc, #136]	; (8006844 <HAL_TIM_Base_Start_IT+0xd4>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d018      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0x80>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a21      	ldr	r2, [pc, #132]	; (8006848 <HAL_TIM_Base_Start_IT+0xd8>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d013      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0x80>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a1f      	ldr	r2, [pc, #124]	; (800684c <HAL_TIM_Base_Start_IT+0xdc>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d00e      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0x80>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a1e      	ldr	r2, [pc, #120]	; (8006850 <HAL_TIM_Base_Start_IT+0xe0>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d009      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0x80>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a1c      	ldr	r2, [pc, #112]	; (8006854 <HAL_TIM_Base_Start_IT+0xe4>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d004      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0x80>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a1b      	ldr	r2, [pc, #108]	; (8006858 <HAL_TIM_Base_Start_IT+0xe8>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d115      	bne.n	800681c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689a      	ldr	r2, [r3, #8]
 80067f6:	4b19      	ldr	r3, [pc, #100]	; (800685c <HAL_TIM_Base_Start_IT+0xec>)
 80067f8:	4013      	ands	r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2b06      	cmp	r3, #6
 8006800:	d015      	beq.n	800682e <HAL_TIM_Base_Start_IT+0xbe>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006808:	d011      	beq.n	800682e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f042 0201 	orr.w	r2, r2, #1
 8006818:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800681a:	e008      	b.n	800682e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f042 0201 	orr.w	r2, r2, #1
 800682a:	601a      	str	r2, [r3, #0]
 800682c:	e000      	b.n	8006830 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800682e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	40010000 	.word	0x40010000
 8006844:	40000400 	.word	0x40000400
 8006848:	40000800 	.word	0x40000800
 800684c:	40000c00 	.word	0x40000c00
 8006850:	40010400 	.word	0x40010400
 8006854:	40014000 	.word	0x40014000
 8006858:	40001800 	.word	0x40001800
 800685c:	00010007 	.word	0x00010007

08006860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b02      	cmp	r3, #2
 8006874:	d122      	bne.n	80068bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b02      	cmp	r3, #2
 8006882:	d11b      	bne.n	80068bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f06f 0202 	mvn.w	r2, #2
 800688c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	f003 0303 	and.w	r3, r3, #3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f905 	bl	8006ab2 <HAL_TIM_IC_CaptureCallback>
 80068a8:	e005      	b.n	80068b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f8f7 	bl	8006a9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f908 	bl	8006ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	f003 0304 	and.w	r3, r3, #4
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	d122      	bne.n	8006910 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f003 0304 	and.w	r3, r3, #4
 80068d4:	2b04      	cmp	r3, #4
 80068d6:	d11b      	bne.n	8006910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f06f 0204 	mvn.w	r2, #4
 80068e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2202      	movs	r2, #2
 80068e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f8db 	bl	8006ab2 <HAL_TIM_IC_CaptureCallback>
 80068fc:	e005      	b.n	800690a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f8cd 	bl	8006a9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f8de 	bl	8006ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	f003 0308 	and.w	r3, r3, #8
 800691a:	2b08      	cmp	r3, #8
 800691c:	d122      	bne.n	8006964 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	f003 0308 	and.w	r3, r3, #8
 8006928:	2b08      	cmp	r3, #8
 800692a:	d11b      	bne.n	8006964 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f06f 0208 	mvn.w	r2, #8
 8006934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2204      	movs	r2, #4
 800693a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	f003 0303 	and.w	r3, r3, #3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d003      	beq.n	8006952 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f8b1 	bl	8006ab2 <HAL_TIM_IC_CaptureCallback>
 8006950:	e005      	b.n	800695e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f8a3 	bl	8006a9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 f8b4 	bl	8006ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	f003 0310 	and.w	r3, r3, #16
 800696e:	2b10      	cmp	r3, #16
 8006970:	d122      	bne.n	80069b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f003 0310 	and.w	r3, r3, #16
 800697c:	2b10      	cmp	r3, #16
 800697e:	d11b      	bne.n	80069b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f06f 0210 	mvn.w	r2, #16
 8006988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2208      	movs	r2, #8
 800698e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800699a:	2b00      	cmp	r3, #0
 800699c:	d003      	beq.n	80069a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f887 	bl	8006ab2 <HAL_TIM_IC_CaptureCallback>
 80069a4:	e005      	b.n	80069b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f879 	bl	8006a9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f88a 	bl	8006ac6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d10e      	bne.n	80069e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d107      	bne.n	80069e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f06f 0201 	mvn.w	r2, #1
 80069dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f7fa ff5a 	bl	8001898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ee:	2b80      	cmp	r3, #128	; 0x80
 80069f0:	d10e      	bne.n	8006a10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069fc:	2b80      	cmp	r3, #128	; 0x80
 80069fe:	d107      	bne.n	8006a10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f91a 	bl	8006c44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a1e:	d10e      	bne.n	8006a3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a2a:	2b80      	cmp	r3, #128	; 0x80
 8006a2c:	d107      	bne.n	8006a3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f90d 	bl	8006c58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a48:	2b40      	cmp	r3, #64	; 0x40
 8006a4a:	d10e      	bne.n	8006a6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a56:	2b40      	cmp	r3, #64	; 0x40
 8006a58:	d107      	bne.n	8006a6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f838 	bl	8006ada <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	f003 0320 	and.w	r3, r3, #32
 8006a74:	2b20      	cmp	r3, #32
 8006a76:	d10e      	bne.n	8006a96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	f003 0320 	and.w	r3, r3, #32
 8006a82:	2b20      	cmp	r3, #32
 8006a84:	d107      	bne.n	8006a96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f06f 0220 	mvn.w	r2, #32
 8006a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f8cd 	bl	8006c30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a96:	bf00      	nop
 8006a98:	3708      	adds	r7, #8
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006aa6:	bf00      	nop
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b083      	sub	sp, #12
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006aba:	bf00      	nop
 8006abc:	370c      	adds	r7, #12
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b083      	sub	sp, #12
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ace:	bf00      	nop
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b083      	sub	sp, #12
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ae2:	bf00      	nop
 8006ae4:	370c      	adds	r7, #12
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
	...

08006af0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a40      	ldr	r2, [pc, #256]	; (8006c04 <TIM_Base_SetConfig+0x114>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d013      	beq.n	8006b30 <TIM_Base_SetConfig+0x40>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b0e:	d00f      	beq.n	8006b30 <TIM_Base_SetConfig+0x40>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a3d      	ldr	r2, [pc, #244]	; (8006c08 <TIM_Base_SetConfig+0x118>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d00b      	beq.n	8006b30 <TIM_Base_SetConfig+0x40>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a3c      	ldr	r2, [pc, #240]	; (8006c0c <TIM_Base_SetConfig+0x11c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d007      	beq.n	8006b30 <TIM_Base_SetConfig+0x40>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a3b      	ldr	r2, [pc, #236]	; (8006c10 <TIM_Base_SetConfig+0x120>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d003      	beq.n	8006b30 <TIM_Base_SetConfig+0x40>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a3a      	ldr	r2, [pc, #232]	; (8006c14 <TIM_Base_SetConfig+0x124>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d108      	bne.n	8006b42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a2f      	ldr	r2, [pc, #188]	; (8006c04 <TIM_Base_SetConfig+0x114>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d02b      	beq.n	8006ba2 <TIM_Base_SetConfig+0xb2>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b50:	d027      	beq.n	8006ba2 <TIM_Base_SetConfig+0xb2>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a2c      	ldr	r2, [pc, #176]	; (8006c08 <TIM_Base_SetConfig+0x118>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d023      	beq.n	8006ba2 <TIM_Base_SetConfig+0xb2>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a2b      	ldr	r2, [pc, #172]	; (8006c0c <TIM_Base_SetConfig+0x11c>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d01f      	beq.n	8006ba2 <TIM_Base_SetConfig+0xb2>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a2a      	ldr	r2, [pc, #168]	; (8006c10 <TIM_Base_SetConfig+0x120>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d01b      	beq.n	8006ba2 <TIM_Base_SetConfig+0xb2>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a29      	ldr	r2, [pc, #164]	; (8006c14 <TIM_Base_SetConfig+0x124>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d017      	beq.n	8006ba2 <TIM_Base_SetConfig+0xb2>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a28      	ldr	r2, [pc, #160]	; (8006c18 <TIM_Base_SetConfig+0x128>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d013      	beq.n	8006ba2 <TIM_Base_SetConfig+0xb2>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a27      	ldr	r2, [pc, #156]	; (8006c1c <TIM_Base_SetConfig+0x12c>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d00f      	beq.n	8006ba2 <TIM_Base_SetConfig+0xb2>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a26      	ldr	r2, [pc, #152]	; (8006c20 <TIM_Base_SetConfig+0x130>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d00b      	beq.n	8006ba2 <TIM_Base_SetConfig+0xb2>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a25      	ldr	r2, [pc, #148]	; (8006c24 <TIM_Base_SetConfig+0x134>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d007      	beq.n	8006ba2 <TIM_Base_SetConfig+0xb2>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a24      	ldr	r2, [pc, #144]	; (8006c28 <TIM_Base_SetConfig+0x138>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d003      	beq.n	8006ba2 <TIM_Base_SetConfig+0xb2>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a23      	ldr	r2, [pc, #140]	; (8006c2c <TIM_Base_SetConfig+0x13c>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d108      	bne.n	8006bb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	689a      	ldr	r2, [r3, #8]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a0a      	ldr	r2, [pc, #40]	; (8006c04 <TIM_Base_SetConfig+0x114>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d003      	beq.n	8006be8 <TIM_Base_SetConfig+0xf8>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a0c      	ldr	r2, [pc, #48]	; (8006c14 <TIM_Base_SetConfig+0x124>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d103      	bne.n	8006bf0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	691a      	ldr	r2, [r3, #16]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	615a      	str	r2, [r3, #20]
}
 8006bf6:	bf00      	nop
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	40010000 	.word	0x40010000
 8006c08:	40000400 	.word	0x40000400
 8006c0c:	40000800 	.word	0x40000800
 8006c10:	40000c00 	.word	0x40000c00
 8006c14:	40010400 	.word	0x40010400
 8006c18:	40014000 	.word	0x40014000
 8006c1c:	40014400 	.word	0x40014400
 8006c20:	40014800 	.word	0x40014800
 8006c24:	40001800 	.word	0x40001800
 8006c28:	40001c00 	.word	0x40001c00
 8006c2c:	40002000 	.word	0x40002000

08006c30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d101      	bne.n	8006c7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e040      	b.n	8006d00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d106      	bne.n	8006c94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7fa feac 	bl	80019ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2224      	movs	r2, #36	; 0x24
 8006c98:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 0201 	bic.w	r2, r2, #1
 8006ca8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fbc2 	bl	8007434 <UART_SetConfig>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d101      	bne.n	8006cba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e022      	b.n	8006d00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d002      	beq.n	8006cc8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fe1a 	bl	80078fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685a      	ldr	r2, [r3, #4]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	689a      	ldr	r2, [r3, #8]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ce6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f042 0201 	orr.w	r2, r2, #1
 8006cf6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 fea1 	bl	8007a40 <UART_CheckIdleState>
 8006cfe:	4603      	mov	r3, r0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b08a      	sub	sp, #40	; 0x28
 8006d0c:	af02      	add	r7, sp, #8
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	603b      	str	r3, [r7, #0]
 8006d14:	4613      	mov	r3, r2
 8006d16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d1c:	2b20      	cmp	r3, #32
 8006d1e:	d171      	bne.n	8006e04 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d002      	beq.n	8006d2c <HAL_UART_Transmit+0x24>
 8006d26:	88fb      	ldrh	r3, [r7, #6]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d101      	bne.n	8006d30 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e06a      	b.n	8006e06 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2221      	movs	r2, #33	; 0x21
 8006d3c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d3e:	f7fb fac7 	bl	80022d0 <HAL_GetTick>
 8006d42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	88fa      	ldrh	r2, [r7, #6]
 8006d48:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	88fa      	ldrh	r2, [r7, #6]
 8006d50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d5c:	d108      	bne.n	8006d70 <HAL_UART_Transmit+0x68>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d104      	bne.n	8006d70 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006d66:	2300      	movs	r3, #0
 8006d68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	61bb      	str	r3, [r7, #24]
 8006d6e:	e003      	b.n	8006d78 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d74:	2300      	movs	r3, #0
 8006d76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d78:	e02c      	b.n	8006dd4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	2200      	movs	r2, #0
 8006d82:	2180      	movs	r1, #128	; 0x80
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f000 fea8 	bl	8007ada <UART_WaitOnFlagUntilTimeout>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d001      	beq.n	8006d94 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e038      	b.n	8006e06 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10b      	bne.n	8006db2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006da8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	3302      	adds	r3, #2
 8006dae:	61bb      	str	r3, [r7, #24]
 8006db0:	e007      	b.n	8006dc2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	781a      	ldrb	r2, [r3, #0]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1cc      	bne.n	8006d7a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	2200      	movs	r2, #0
 8006de8:	2140      	movs	r1, #64	; 0x40
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 fe75 	bl	8007ada <UART_WaitOnFlagUntilTimeout>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d001      	beq.n	8006dfa <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e005      	b.n	8006e06 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2220      	movs	r2, #32
 8006dfe:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	e000      	b.n	8006e06 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006e04:	2302      	movs	r3, #2
  }
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3720      	adds	r7, #32
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
	...

08006e10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b0ba      	sub	sp, #232	; 0xe8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006e3a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006e3e:	4013      	ands	r3, r2
 8006e40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006e44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d115      	bne.n	8006e78 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e50:	f003 0320 	and.w	r3, r3, #32
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00f      	beq.n	8006e78 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e5c:	f003 0320 	and.w	r3, r3, #32
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d009      	beq.n	8006e78 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 82ac 	beq.w	80073c6 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	4798      	blx	r3
      }
      return;
 8006e76:	e2a6      	b.n	80073c6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 8117 	beq.w	80070b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e86:	f003 0301 	and.w	r3, r3, #1
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d106      	bne.n	8006e9c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006e8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006e92:	4b85      	ldr	r3, [pc, #532]	; (80070a8 <HAL_UART_IRQHandler+0x298>)
 8006e94:	4013      	ands	r3, r2
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 810a 	beq.w	80070b0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d011      	beq.n	8006ecc <HAL_UART_IRQHandler+0xbc>
 8006ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00b      	beq.n	8006ecc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ec2:	f043 0201 	orr.w	r2, r3, #1
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ed0:	f003 0302 	and.w	r3, r3, #2
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d011      	beq.n	8006efc <HAL_UART_IRQHandler+0xec>
 8006ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006edc:	f003 0301 	and.w	r3, r3, #1
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00b      	beq.n	8006efc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2202      	movs	r2, #2
 8006eea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ef2:	f043 0204 	orr.w	r2, r3, #4
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f00:	f003 0304 	and.w	r3, r3, #4
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d011      	beq.n	8006f2c <HAL_UART_IRQHandler+0x11c>
 8006f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00b      	beq.n	8006f2c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2204      	movs	r2, #4
 8006f1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f22:	f043 0202 	orr.w	r2, r3, #2
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f30:	f003 0308 	and.w	r3, r3, #8
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d017      	beq.n	8006f68 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f3c:	f003 0320 	and.w	r3, r3, #32
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d105      	bne.n	8006f50 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006f44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f48:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00b      	beq.n	8006f68 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2208      	movs	r2, #8
 8006f56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f5e:	f043 0208 	orr.w	r2, r3, #8
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d012      	beq.n	8006f9a <HAL_UART_IRQHandler+0x18a>
 8006f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00c      	beq.n	8006f9a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f90:	f043 0220 	orr.w	r2, r3, #32
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f000 8212 	beq.w	80073ca <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006faa:	f003 0320 	and.w	r3, r3, #32
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00d      	beq.n	8006fce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fb6:	f003 0320 	and.w	r3, r3, #32
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d007      	beq.n	8006fce <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe2:	2b40      	cmp	r3, #64	; 0x40
 8006fe4:	d005      	beq.n	8006ff2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006fe6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d04f      	beq.n	8007092 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fe37 	bl	8007c66 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007002:	2b40      	cmp	r3, #64	; 0x40
 8007004:	d141      	bne.n	800708a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	3308      	adds	r3, #8
 800700c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007010:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007014:	e853 3f00 	ldrex	r3, [r3]
 8007018:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800701c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007024:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	3308      	adds	r3, #8
 800702e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007032:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007036:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800703e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007042:	e841 2300 	strex	r3, r2, [r1]
 8007046:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800704a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1d9      	bne.n	8007006 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007056:	2b00      	cmp	r3, #0
 8007058:	d013      	beq.n	8007082 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800705e:	4a13      	ldr	r2, [pc, #76]	; (80070ac <HAL_UART_IRQHandler+0x29c>)
 8007060:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007066:	4618      	mov	r0, r3
 8007068:	f7fc f9be 	bl	80033e8 <HAL_DMA_Abort_IT>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d017      	beq.n	80070a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800707c:	4610      	mov	r0, r2
 800707e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007080:	e00f      	b.n	80070a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f9b6 	bl	80073f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007088:	e00b      	b.n	80070a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f9b2 	bl	80073f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007090:	e007      	b.n	80070a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f9ae 	bl	80073f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80070a0:	e193      	b.n	80073ca <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070a2:	bf00      	nop
    return;
 80070a4:	e191      	b.n	80073ca <HAL_UART_IRQHandler+0x5ba>
 80070a6:	bf00      	nop
 80070a8:	04000120 	.word	0x04000120
 80070ac:	08007d2f 	.word	0x08007d2f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	f040 814c 	bne.w	8007352 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80070ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070be:	f003 0310 	and.w	r3, r3, #16
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f000 8145 	beq.w	8007352 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80070c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070cc:	f003 0310 	and.w	r3, r3, #16
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 813e 	beq.w	8007352 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2210      	movs	r2, #16
 80070dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e8:	2b40      	cmp	r3, #64	; 0x40
 80070ea:	f040 80b6 	bne.w	800725a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f000 8165 	beq.w	80073ce <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800710a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800710e:	429a      	cmp	r2, r3
 8007110:	f080 815d 	bcs.w	80073ce <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800711a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007122:	69db      	ldr	r3, [r3, #28]
 8007124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007128:	f000 8086 	beq.w	8007238 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007134:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007138:	e853 3f00 	ldrex	r3, [r3]
 800713c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007140:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007148:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	461a      	mov	r2, r3
 8007152:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007156:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800715a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007162:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007166:	e841 2300 	strex	r3, r2, [r1]
 800716a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800716e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1da      	bne.n	800712c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3308      	adds	r3, #8
 800717c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007180:	e853 3f00 	ldrex	r3, [r3]
 8007184:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007188:	f023 0301 	bic.w	r3, r3, #1
 800718c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	3308      	adds	r3, #8
 8007196:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800719a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800719e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80071a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80071a6:	e841 2300 	strex	r3, r2, [r1]
 80071aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80071ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1e1      	bne.n	8007176 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3308      	adds	r3, #8
 80071b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071bc:	e853 3f00 	ldrex	r3, [r3]
 80071c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80071c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	3308      	adds	r3, #8
 80071d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80071d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80071d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80071dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80071de:	e841 2300 	strex	r3, r2, [r1]
 80071e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80071e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1e3      	bne.n	80071b2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2220      	movs	r2, #32
 80071ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007200:	e853 3f00 	ldrex	r3, [r3]
 8007204:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007208:	f023 0310 	bic.w	r3, r3, #16
 800720c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	461a      	mov	r2, r3
 8007216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800721a:	65bb      	str	r3, [r7, #88]	; 0x58
 800721c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007220:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007222:	e841 2300 	strex	r3, r2, [r1]
 8007226:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1e4      	bne.n	80071f8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007232:	4618      	mov	r0, r3
 8007234:	f7fc f868 	bl	8003308 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2202      	movs	r2, #2
 800723c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800724a:	b29b      	uxth	r3, r3
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	b29b      	uxth	r3, r3
 8007250:	4619      	mov	r1, r3
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f8d8 	bl	8007408 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007258:	e0b9      	b.n	80073ce <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007266:	b29b      	uxth	r3, r3
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007274:	b29b      	uxth	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	f000 80ab 	beq.w	80073d2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 800727c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007280:	2b00      	cmp	r3, #0
 8007282:	f000 80a6 	beq.w	80073d2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728e:	e853 3f00 	ldrex	r3, [r3]
 8007292:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007296:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800729a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	461a      	mov	r2, r3
 80072a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072a8:	647b      	str	r3, [r7, #68]	; 0x44
 80072aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072b0:	e841 2300 	strex	r3, r2, [r1]
 80072b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1e4      	bne.n	8007286 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	3308      	adds	r3, #8
 80072c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c6:	e853 3f00 	ldrex	r3, [r3]
 80072ca:	623b      	str	r3, [r7, #32]
   return(result);
 80072cc:	6a3b      	ldr	r3, [r7, #32]
 80072ce:	f023 0301 	bic.w	r3, r3, #1
 80072d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	3308      	adds	r3, #8
 80072dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80072e0:	633a      	str	r2, [r7, #48]	; 0x30
 80072e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072e8:	e841 2300 	strex	r3, r2, [r1]
 80072ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1e3      	bne.n	80072bc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2220      	movs	r2, #32
 80072f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	e853 3f00 	ldrex	r3, [r3]
 8007314:	60fb      	str	r3, [r7, #12]
   return(result);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f023 0310 	bic.w	r3, r3, #16
 800731c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	461a      	mov	r2, r3
 8007326:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800732a:	61fb      	str	r3, [r7, #28]
 800732c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732e:	69b9      	ldr	r1, [r7, #24]
 8007330:	69fa      	ldr	r2, [r7, #28]
 8007332:	e841 2300 	strex	r3, r2, [r1]
 8007336:	617b      	str	r3, [r7, #20]
   return(result);
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1e4      	bne.n	8007308 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2202      	movs	r2, #2
 8007342:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007344:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007348:	4619      	mov	r1, r3
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f85c 	bl	8007408 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007350:	e03f      	b.n	80073d2 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00e      	beq.n	800737c <HAL_UART_IRQHandler+0x56c>
 800735e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d008      	beq.n	800737c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007372:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f853 	bl	8007420 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800737a:	e02d      	b.n	80073d8 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800737c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00e      	beq.n	80073a6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800738c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007390:	2b00      	cmp	r3, #0
 8007392:	d008      	beq.n	80073a6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007398:	2b00      	cmp	r3, #0
 800739a:	d01c      	beq.n	80073d6 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	4798      	blx	r3
    }
    return;
 80073a4:	e017      	b.n	80073d6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80073a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d012      	beq.n	80073d8 <HAL_UART_IRQHandler+0x5c8>
 80073b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00c      	beq.n	80073d8 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fccb 	bl	8007d5a <UART_EndTransmit_IT>
    return;
 80073c4:	e008      	b.n	80073d8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80073c6:	bf00      	nop
 80073c8:	e006      	b.n	80073d8 <HAL_UART_IRQHandler+0x5c8>
    return;
 80073ca:	bf00      	nop
 80073cc:	e004      	b.n	80073d8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80073ce:	bf00      	nop
 80073d0:	e002      	b.n	80073d8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80073d2:	bf00      	nop
 80073d4:	e000      	b.n	80073d8 <HAL_UART_IRQHandler+0x5c8>
    return;
 80073d6:	bf00      	nop
  }

}
 80073d8:	37e8      	adds	r7, #232	; 0xe8
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop

080073e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80073e8:	bf00      	nop
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80073fc:	bf00      	nop
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	460b      	mov	r3, r1
 8007412:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007428:	bf00      	nop
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b088      	sub	sp, #32
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800743c:	2300      	movs	r3, #0
 800743e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	689a      	ldr	r2, [r3, #8]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	431a      	orrs	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	431a      	orrs	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	69db      	ldr	r3, [r3, #28]
 8007454:	4313      	orrs	r3, r2
 8007456:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	4ba6      	ldr	r3, [pc, #664]	; (80076f8 <UART_SetConfig+0x2c4>)
 8007460:	4013      	ands	r3, r2
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	6812      	ldr	r2, [r2, #0]
 8007466:	6979      	ldr	r1, [r7, #20]
 8007468:	430b      	orrs	r3, r1
 800746a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68da      	ldr	r2, [r3, #12]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	430a      	orrs	r2, r1
 8007480:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a1b      	ldr	r3, [r3, #32]
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	4313      	orrs	r3, r2
 8007490:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	430a      	orrs	r2, r1
 80074a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a94      	ldr	r2, [pc, #592]	; (80076fc <UART_SetConfig+0x2c8>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d120      	bne.n	80074f2 <UART_SetConfig+0xbe>
 80074b0:	4b93      	ldr	r3, [pc, #588]	; (8007700 <UART_SetConfig+0x2cc>)
 80074b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b6:	f003 0303 	and.w	r3, r3, #3
 80074ba:	2b03      	cmp	r3, #3
 80074bc:	d816      	bhi.n	80074ec <UART_SetConfig+0xb8>
 80074be:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <UART_SetConfig+0x90>)
 80074c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c4:	080074d5 	.word	0x080074d5
 80074c8:	080074e1 	.word	0x080074e1
 80074cc:	080074db 	.word	0x080074db
 80074d0:	080074e7 	.word	0x080074e7
 80074d4:	2301      	movs	r3, #1
 80074d6:	77fb      	strb	r3, [r7, #31]
 80074d8:	e150      	b.n	800777c <UART_SetConfig+0x348>
 80074da:	2302      	movs	r3, #2
 80074dc:	77fb      	strb	r3, [r7, #31]
 80074de:	e14d      	b.n	800777c <UART_SetConfig+0x348>
 80074e0:	2304      	movs	r3, #4
 80074e2:	77fb      	strb	r3, [r7, #31]
 80074e4:	e14a      	b.n	800777c <UART_SetConfig+0x348>
 80074e6:	2308      	movs	r3, #8
 80074e8:	77fb      	strb	r3, [r7, #31]
 80074ea:	e147      	b.n	800777c <UART_SetConfig+0x348>
 80074ec:	2310      	movs	r3, #16
 80074ee:	77fb      	strb	r3, [r7, #31]
 80074f0:	e144      	b.n	800777c <UART_SetConfig+0x348>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a83      	ldr	r2, [pc, #524]	; (8007704 <UART_SetConfig+0x2d0>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d132      	bne.n	8007562 <UART_SetConfig+0x12e>
 80074fc:	4b80      	ldr	r3, [pc, #512]	; (8007700 <UART_SetConfig+0x2cc>)
 80074fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007502:	f003 030c 	and.w	r3, r3, #12
 8007506:	2b0c      	cmp	r3, #12
 8007508:	d828      	bhi.n	800755c <UART_SetConfig+0x128>
 800750a:	a201      	add	r2, pc, #4	; (adr r2, 8007510 <UART_SetConfig+0xdc>)
 800750c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007510:	08007545 	.word	0x08007545
 8007514:	0800755d 	.word	0x0800755d
 8007518:	0800755d 	.word	0x0800755d
 800751c:	0800755d 	.word	0x0800755d
 8007520:	08007551 	.word	0x08007551
 8007524:	0800755d 	.word	0x0800755d
 8007528:	0800755d 	.word	0x0800755d
 800752c:	0800755d 	.word	0x0800755d
 8007530:	0800754b 	.word	0x0800754b
 8007534:	0800755d 	.word	0x0800755d
 8007538:	0800755d 	.word	0x0800755d
 800753c:	0800755d 	.word	0x0800755d
 8007540:	08007557 	.word	0x08007557
 8007544:	2300      	movs	r3, #0
 8007546:	77fb      	strb	r3, [r7, #31]
 8007548:	e118      	b.n	800777c <UART_SetConfig+0x348>
 800754a:	2302      	movs	r3, #2
 800754c:	77fb      	strb	r3, [r7, #31]
 800754e:	e115      	b.n	800777c <UART_SetConfig+0x348>
 8007550:	2304      	movs	r3, #4
 8007552:	77fb      	strb	r3, [r7, #31]
 8007554:	e112      	b.n	800777c <UART_SetConfig+0x348>
 8007556:	2308      	movs	r3, #8
 8007558:	77fb      	strb	r3, [r7, #31]
 800755a:	e10f      	b.n	800777c <UART_SetConfig+0x348>
 800755c:	2310      	movs	r3, #16
 800755e:	77fb      	strb	r3, [r7, #31]
 8007560:	e10c      	b.n	800777c <UART_SetConfig+0x348>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a68      	ldr	r2, [pc, #416]	; (8007708 <UART_SetConfig+0x2d4>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d120      	bne.n	80075ae <UART_SetConfig+0x17a>
 800756c:	4b64      	ldr	r3, [pc, #400]	; (8007700 <UART_SetConfig+0x2cc>)
 800756e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007572:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007576:	2b30      	cmp	r3, #48	; 0x30
 8007578:	d013      	beq.n	80075a2 <UART_SetConfig+0x16e>
 800757a:	2b30      	cmp	r3, #48	; 0x30
 800757c:	d814      	bhi.n	80075a8 <UART_SetConfig+0x174>
 800757e:	2b20      	cmp	r3, #32
 8007580:	d009      	beq.n	8007596 <UART_SetConfig+0x162>
 8007582:	2b20      	cmp	r3, #32
 8007584:	d810      	bhi.n	80075a8 <UART_SetConfig+0x174>
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <UART_SetConfig+0x15c>
 800758a:	2b10      	cmp	r3, #16
 800758c:	d006      	beq.n	800759c <UART_SetConfig+0x168>
 800758e:	e00b      	b.n	80075a8 <UART_SetConfig+0x174>
 8007590:	2300      	movs	r3, #0
 8007592:	77fb      	strb	r3, [r7, #31]
 8007594:	e0f2      	b.n	800777c <UART_SetConfig+0x348>
 8007596:	2302      	movs	r3, #2
 8007598:	77fb      	strb	r3, [r7, #31]
 800759a:	e0ef      	b.n	800777c <UART_SetConfig+0x348>
 800759c:	2304      	movs	r3, #4
 800759e:	77fb      	strb	r3, [r7, #31]
 80075a0:	e0ec      	b.n	800777c <UART_SetConfig+0x348>
 80075a2:	2308      	movs	r3, #8
 80075a4:	77fb      	strb	r3, [r7, #31]
 80075a6:	e0e9      	b.n	800777c <UART_SetConfig+0x348>
 80075a8:	2310      	movs	r3, #16
 80075aa:	77fb      	strb	r3, [r7, #31]
 80075ac:	e0e6      	b.n	800777c <UART_SetConfig+0x348>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a56      	ldr	r2, [pc, #344]	; (800770c <UART_SetConfig+0x2d8>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d120      	bne.n	80075fa <UART_SetConfig+0x1c6>
 80075b8:	4b51      	ldr	r3, [pc, #324]	; (8007700 <UART_SetConfig+0x2cc>)
 80075ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80075c2:	2bc0      	cmp	r3, #192	; 0xc0
 80075c4:	d013      	beq.n	80075ee <UART_SetConfig+0x1ba>
 80075c6:	2bc0      	cmp	r3, #192	; 0xc0
 80075c8:	d814      	bhi.n	80075f4 <UART_SetConfig+0x1c0>
 80075ca:	2b80      	cmp	r3, #128	; 0x80
 80075cc:	d009      	beq.n	80075e2 <UART_SetConfig+0x1ae>
 80075ce:	2b80      	cmp	r3, #128	; 0x80
 80075d0:	d810      	bhi.n	80075f4 <UART_SetConfig+0x1c0>
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d002      	beq.n	80075dc <UART_SetConfig+0x1a8>
 80075d6:	2b40      	cmp	r3, #64	; 0x40
 80075d8:	d006      	beq.n	80075e8 <UART_SetConfig+0x1b4>
 80075da:	e00b      	b.n	80075f4 <UART_SetConfig+0x1c0>
 80075dc:	2300      	movs	r3, #0
 80075de:	77fb      	strb	r3, [r7, #31]
 80075e0:	e0cc      	b.n	800777c <UART_SetConfig+0x348>
 80075e2:	2302      	movs	r3, #2
 80075e4:	77fb      	strb	r3, [r7, #31]
 80075e6:	e0c9      	b.n	800777c <UART_SetConfig+0x348>
 80075e8:	2304      	movs	r3, #4
 80075ea:	77fb      	strb	r3, [r7, #31]
 80075ec:	e0c6      	b.n	800777c <UART_SetConfig+0x348>
 80075ee:	2308      	movs	r3, #8
 80075f0:	77fb      	strb	r3, [r7, #31]
 80075f2:	e0c3      	b.n	800777c <UART_SetConfig+0x348>
 80075f4:	2310      	movs	r3, #16
 80075f6:	77fb      	strb	r3, [r7, #31]
 80075f8:	e0c0      	b.n	800777c <UART_SetConfig+0x348>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a44      	ldr	r2, [pc, #272]	; (8007710 <UART_SetConfig+0x2dc>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d125      	bne.n	8007650 <UART_SetConfig+0x21c>
 8007604:	4b3e      	ldr	r3, [pc, #248]	; (8007700 <UART_SetConfig+0x2cc>)
 8007606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800760a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800760e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007612:	d017      	beq.n	8007644 <UART_SetConfig+0x210>
 8007614:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007618:	d817      	bhi.n	800764a <UART_SetConfig+0x216>
 800761a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800761e:	d00b      	beq.n	8007638 <UART_SetConfig+0x204>
 8007620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007624:	d811      	bhi.n	800764a <UART_SetConfig+0x216>
 8007626:	2b00      	cmp	r3, #0
 8007628:	d003      	beq.n	8007632 <UART_SetConfig+0x1fe>
 800762a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800762e:	d006      	beq.n	800763e <UART_SetConfig+0x20a>
 8007630:	e00b      	b.n	800764a <UART_SetConfig+0x216>
 8007632:	2300      	movs	r3, #0
 8007634:	77fb      	strb	r3, [r7, #31]
 8007636:	e0a1      	b.n	800777c <UART_SetConfig+0x348>
 8007638:	2302      	movs	r3, #2
 800763a:	77fb      	strb	r3, [r7, #31]
 800763c:	e09e      	b.n	800777c <UART_SetConfig+0x348>
 800763e:	2304      	movs	r3, #4
 8007640:	77fb      	strb	r3, [r7, #31]
 8007642:	e09b      	b.n	800777c <UART_SetConfig+0x348>
 8007644:	2308      	movs	r3, #8
 8007646:	77fb      	strb	r3, [r7, #31]
 8007648:	e098      	b.n	800777c <UART_SetConfig+0x348>
 800764a:	2310      	movs	r3, #16
 800764c:	77fb      	strb	r3, [r7, #31]
 800764e:	e095      	b.n	800777c <UART_SetConfig+0x348>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a2f      	ldr	r2, [pc, #188]	; (8007714 <UART_SetConfig+0x2e0>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d125      	bne.n	80076a6 <UART_SetConfig+0x272>
 800765a:	4b29      	ldr	r3, [pc, #164]	; (8007700 <UART_SetConfig+0x2cc>)
 800765c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007660:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007664:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007668:	d017      	beq.n	800769a <UART_SetConfig+0x266>
 800766a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800766e:	d817      	bhi.n	80076a0 <UART_SetConfig+0x26c>
 8007670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007674:	d00b      	beq.n	800768e <UART_SetConfig+0x25a>
 8007676:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800767a:	d811      	bhi.n	80076a0 <UART_SetConfig+0x26c>
 800767c:	2b00      	cmp	r3, #0
 800767e:	d003      	beq.n	8007688 <UART_SetConfig+0x254>
 8007680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007684:	d006      	beq.n	8007694 <UART_SetConfig+0x260>
 8007686:	e00b      	b.n	80076a0 <UART_SetConfig+0x26c>
 8007688:	2301      	movs	r3, #1
 800768a:	77fb      	strb	r3, [r7, #31]
 800768c:	e076      	b.n	800777c <UART_SetConfig+0x348>
 800768e:	2302      	movs	r3, #2
 8007690:	77fb      	strb	r3, [r7, #31]
 8007692:	e073      	b.n	800777c <UART_SetConfig+0x348>
 8007694:	2304      	movs	r3, #4
 8007696:	77fb      	strb	r3, [r7, #31]
 8007698:	e070      	b.n	800777c <UART_SetConfig+0x348>
 800769a:	2308      	movs	r3, #8
 800769c:	77fb      	strb	r3, [r7, #31]
 800769e:	e06d      	b.n	800777c <UART_SetConfig+0x348>
 80076a0:	2310      	movs	r3, #16
 80076a2:	77fb      	strb	r3, [r7, #31]
 80076a4:	e06a      	b.n	800777c <UART_SetConfig+0x348>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a1b      	ldr	r2, [pc, #108]	; (8007718 <UART_SetConfig+0x2e4>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d138      	bne.n	8007722 <UART_SetConfig+0x2ee>
 80076b0:	4b13      	ldr	r3, [pc, #76]	; (8007700 <UART_SetConfig+0x2cc>)
 80076b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80076ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076be:	d017      	beq.n	80076f0 <UART_SetConfig+0x2bc>
 80076c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076c4:	d82a      	bhi.n	800771c <UART_SetConfig+0x2e8>
 80076c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076ca:	d00b      	beq.n	80076e4 <UART_SetConfig+0x2b0>
 80076cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076d0:	d824      	bhi.n	800771c <UART_SetConfig+0x2e8>
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d003      	beq.n	80076de <UART_SetConfig+0x2aa>
 80076d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076da:	d006      	beq.n	80076ea <UART_SetConfig+0x2b6>
 80076dc:	e01e      	b.n	800771c <UART_SetConfig+0x2e8>
 80076de:	2300      	movs	r3, #0
 80076e0:	77fb      	strb	r3, [r7, #31]
 80076e2:	e04b      	b.n	800777c <UART_SetConfig+0x348>
 80076e4:	2302      	movs	r3, #2
 80076e6:	77fb      	strb	r3, [r7, #31]
 80076e8:	e048      	b.n	800777c <UART_SetConfig+0x348>
 80076ea:	2304      	movs	r3, #4
 80076ec:	77fb      	strb	r3, [r7, #31]
 80076ee:	e045      	b.n	800777c <UART_SetConfig+0x348>
 80076f0:	2308      	movs	r3, #8
 80076f2:	77fb      	strb	r3, [r7, #31]
 80076f4:	e042      	b.n	800777c <UART_SetConfig+0x348>
 80076f6:	bf00      	nop
 80076f8:	efff69f3 	.word	0xefff69f3
 80076fc:	40011000 	.word	0x40011000
 8007700:	40023800 	.word	0x40023800
 8007704:	40004400 	.word	0x40004400
 8007708:	40004800 	.word	0x40004800
 800770c:	40004c00 	.word	0x40004c00
 8007710:	40005000 	.word	0x40005000
 8007714:	40011400 	.word	0x40011400
 8007718:	40007800 	.word	0x40007800
 800771c:	2310      	movs	r3, #16
 800771e:	77fb      	strb	r3, [r7, #31]
 8007720:	e02c      	b.n	800777c <UART_SetConfig+0x348>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a72      	ldr	r2, [pc, #456]	; (80078f0 <UART_SetConfig+0x4bc>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d125      	bne.n	8007778 <UART_SetConfig+0x344>
 800772c:	4b71      	ldr	r3, [pc, #452]	; (80078f4 <UART_SetConfig+0x4c0>)
 800772e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007732:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007736:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800773a:	d017      	beq.n	800776c <UART_SetConfig+0x338>
 800773c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007740:	d817      	bhi.n	8007772 <UART_SetConfig+0x33e>
 8007742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007746:	d00b      	beq.n	8007760 <UART_SetConfig+0x32c>
 8007748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800774c:	d811      	bhi.n	8007772 <UART_SetConfig+0x33e>
 800774e:	2b00      	cmp	r3, #0
 8007750:	d003      	beq.n	800775a <UART_SetConfig+0x326>
 8007752:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007756:	d006      	beq.n	8007766 <UART_SetConfig+0x332>
 8007758:	e00b      	b.n	8007772 <UART_SetConfig+0x33e>
 800775a:	2300      	movs	r3, #0
 800775c:	77fb      	strb	r3, [r7, #31]
 800775e:	e00d      	b.n	800777c <UART_SetConfig+0x348>
 8007760:	2302      	movs	r3, #2
 8007762:	77fb      	strb	r3, [r7, #31]
 8007764:	e00a      	b.n	800777c <UART_SetConfig+0x348>
 8007766:	2304      	movs	r3, #4
 8007768:	77fb      	strb	r3, [r7, #31]
 800776a:	e007      	b.n	800777c <UART_SetConfig+0x348>
 800776c:	2308      	movs	r3, #8
 800776e:	77fb      	strb	r3, [r7, #31]
 8007770:	e004      	b.n	800777c <UART_SetConfig+0x348>
 8007772:	2310      	movs	r3, #16
 8007774:	77fb      	strb	r3, [r7, #31]
 8007776:	e001      	b.n	800777c <UART_SetConfig+0x348>
 8007778:	2310      	movs	r3, #16
 800777a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	69db      	ldr	r3, [r3, #28]
 8007780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007784:	d15b      	bne.n	800783e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007786:	7ffb      	ldrb	r3, [r7, #31]
 8007788:	2b08      	cmp	r3, #8
 800778a:	d828      	bhi.n	80077de <UART_SetConfig+0x3aa>
 800778c:	a201      	add	r2, pc, #4	; (adr r2, 8007794 <UART_SetConfig+0x360>)
 800778e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007792:	bf00      	nop
 8007794:	080077b9 	.word	0x080077b9
 8007798:	080077c1 	.word	0x080077c1
 800779c:	080077c9 	.word	0x080077c9
 80077a0:	080077df 	.word	0x080077df
 80077a4:	080077cf 	.word	0x080077cf
 80077a8:	080077df 	.word	0x080077df
 80077ac:	080077df 	.word	0x080077df
 80077b0:	080077df 	.word	0x080077df
 80077b4:	080077d7 	.word	0x080077d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077b8:	f7fe faf6 	bl	8005da8 <HAL_RCC_GetPCLK1Freq>
 80077bc:	61b8      	str	r0, [r7, #24]
        break;
 80077be:	e013      	b.n	80077e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077c0:	f7fe fb06 	bl	8005dd0 <HAL_RCC_GetPCLK2Freq>
 80077c4:	61b8      	str	r0, [r7, #24]
        break;
 80077c6:	e00f      	b.n	80077e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077c8:	4b4b      	ldr	r3, [pc, #300]	; (80078f8 <UART_SetConfig+0x4c4>)
 80077ca:	61bb      	str	r3, [r7, #24]
        break;
 80077cc:	e00c      	b.n	80077e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077ce:	f7fe f9d9 	bl	8005b84 <HAL_RCC_GetSysClockFreq>
 80077d2:	61b8      	str	r0, [r7, #24]
        break;
 80077d4:	e008      	b.n	80077e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077da:	61bb      	str	r3, [r7, #24]
        break;
 80077dc:	e004      	b.n	80077e8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80077de:	2300      	movs	r3, #0
 80077e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	77bb      	strb	r3, [r7, #30]
        break;
 80077e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d074      	beq.n	80078d8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	005a      	lsls	r2, r3, #1
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	085b      	lsrs	r3, r3, #1
 80077f8:	441a      	add	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007802:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	2b0f      	cmp	r3, #15
 8007808:	d916      	bls.n	8007838 <UART_SetConfig+0x404>
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007810:	d212      	bcs.n	8007838 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	b29b      	uxth	r3, r3
 8007816:	f023 030f 	bic.w	r3, r3, #15
 800781a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	085b      	lsrs	r3, r3, #1
 8007820:	b29b      	uxth	r3, r3
 8007822:	f003 0307 	and.w	r3, r3, #7
 8007826:	b29a      	uxth	r2, r3
 8007828:	89fb      	ldrh	r3, [r7, #14]
 800782a:	4313      	orrs	r3, r2
 800782c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	89fa      	ldrh	r2, [r7, #14]
 8007834:	60da      	str	r2, [r3, #12]
 8007836:	e04f      	b.n	80078d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	77bb      	strb	r3, [r7, #30]
 800783c:	e04c      	b.n	80078d8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800783e:	7ffb      	ldrb	r3, [r7, #31]
 8007840:	2b08      	cmp	r3, #8
 8007842:	d828      	bhi.n	8007896 <UART_SetConfig+0x462>
 8007844:	a201      	add	r2, pc, #4	; (adr r2, 800784c <UART_SetConfig+0x418>)
 8007846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784a:	bf00      	nop
 800784c:	08007871 	.word	0x08007871
 8007850:	08007879 	.word	0x08007879
 8007854:	08007881 	.word	0x08007881
 8007858:	08007897 	.word	0x08007897
 800785c:	08007887 	.word	0x08007887
 8007860:	08007897 	.word	0x08007897
 8007864:	08007897 	.word	0x08007897
 8007868:	08007897 	.word	0x08007897
 800786c:	0800788f 	.word	0x0800788f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007870:	f7fe fa9a 	bl	8005da8 <HAL_RCC_GetPCLK1Freq>
 8007874:	61b8      	str	r0, [r7, #24]
        break;
 8007876:	e013      	b.n	80078a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007878:	f7fe faaa 	bl	8005dd0 <HAL_RCC_GetPCLK2Freq>
 800787c:	61b8      	str	r0, [r7, #24]
        break;
 800787e:	e00f      	b.n	80078a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007880:	4b1d      	ldr	r3, [pc, #116]	; (80078f8 <UART_SetConfig+0x4c4>)
 8007882:	61bb      	str	r3, [r7, #24]
        break;
 8007884:	e00c      	b.n	80078a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007886:	f7fe f97d 	bl	8005b84 <HAL_RCC_GetSysClockFreq>
 800788a:	61b8      	str	r0, [r7, #24]
        break;
 800788c:	e008      	b.n	80078a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800788e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007892:	61bb      	str	r3, [r7, #24]
        break;
 8007894:	e004      	b.n	80078a0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007896:	2300      	movs	r3, #0
 8007898:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	77bb      	strb	r3, [r7, #30]
        break;
 800789e:	bf00      	nop
    }

    if (pclk != 0U)
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d018      	beq.n	80078d8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	085a      	lsrs	r2, r3, #1
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	441a      	add	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	2b0f      	cmp	r3, #15
 80078be:	d909      	bls.n	80078d4 <UART_SetConfig+0x4a0>
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078c6:	d205      	bcs.n	80078d4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	60da      	str	r2, [r3, #12]
 80078d2:	e001      	b.n	80078d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80078e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3720      	adds	r7, #32
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	40007c00 	.word	0x40007c00
 80078f4:	40023800 	.word	0x40023800
 80078f8:	00f42400 	.word	0x00f42400

080078fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007908:	f003 0301 	and.w	r3, r3, #1
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00a      	beq.n	8007926 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	430a      	orrs	r2, r1
 8007924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792a:	f003 0302 	and.w	r3, r3, #2
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00a      	beq.n	8007948 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	430a      	orrs	r2, r1
 8007946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794c:	f003 0304 	and.w	r3, r3, #4
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00a      	beq.n	800796a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	430a      	orrs	r2, r1
 8007968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796e:	f003 0308 	and.w	r3, r3, #8
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00a      	beq.n	800798c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	430a      	orrs	r2, r1
 800798a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007990:	f003 0310 	and.w	r3, r3, #16
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00a      	beq.n	80079ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	430a      	orrs	r2, r1
 80079ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b2:	f003 0320 	and.w	r3, r3, #32
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00a      	beq.n	80079d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	430a      	orrs	r2, r1
 80079ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d01a      	beq.n	8007a12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079fa:	d10a      	bne.n	8007a12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	430a      	orrs	r2, r1
 8007a10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00a      	beq.n	8007a34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	430a      	orrs	r2, r1
 8007a32:	605a      	str	r2, [r3, #4]
  }
}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af02      	add	r7, sp, #8
 8007a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a50:	f7fa fc3e 	bl	80022d0 <HAL_GetTick>
 8007a54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0308 	and.w	r3, r3, #8
 8007a60:	2b08      	cmp	r3, #8
 8007a62:	d10e      	bne.n	8007a82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f831 	bl	8007ada <UART_WaitOnFlagUntilTimeout>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d001      	beq.n	8007a82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	e027      	b.n	8007ad2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 0304 	and.w	r3, r3, #4
 8007a8c:	2b04      	cmp	r3, #4
 8007a8e:	d10e      	bne.n	8007aae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f81b 	bl	8007ada <UART_WaitOnFlagUntilTimeout>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d001      	beq.n	8007aae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e011      	b.n	8007ad2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2220      	movs	r2, #32
 8007ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b09c      	sub	sp, #112	; 0x70
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	60f8      	str	r0, [r7, #12]
 8007ae2:	60b9      	str	r1, [r7, #8]
 8007ae4:	603b      	str	r3, [r7, #0]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aea:	e0a7      	b.n	8007c3c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af2:	f000 80a3 	beq.w	8007c3c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007af6:	f7fa fbeb 	bl	80022d0 <HAL_GetTick>
 8007afa:	4602      	mov	r2, r0
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d302      	bcc.n	8007b0c <UART_WaitOnFlagUntilTimeout+0x32>
 8007b06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d13f      	bne.n	8007b8c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b14:	e853 3f00 	ldrex	r3, [r3]
 8007b18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b20:	667b      	str	r3, [r7, #100]	; 0x64
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	461a      	mov	r2, r3
 8007b28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b2c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b32:	e841 2300 	strex	r3, r2, [r1]
 8007b36:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007b38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1e6      	bne.n	8007b0c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	3308      	adds	r3, #8
 8007b44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b48:	e853 3f00 	ldrex	r3, [r3]
 8007b4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b50:	f023 0301 	bic.w	r3, r3, #1
 8007b54:	663b      	str	r3, [r7, #96]	; 0x60
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	3308      	adds	r3, #8
 8007b5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b66:	e841 2300 	strex	r3, r2, [r1]
 8007b6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1e5      	bne.n	8007b3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2220      	movs	r2, #32
 8007b76:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2220      	movs	r2, #32
 8007b7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	e068      	b.n	8007c5e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0304 	and.w	r3, r3, #4
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d050      	beq.n	8007c3c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	69db      	ldr	r3, [r3, #28]
 8007ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ba8:	d148      	bne.n	8007c3c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bb2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbc:	e853 3f00 	ldrex	r3, [r3]
 8007bc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007bc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8007bd4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bda:	e841 2300 	strex	r3, r2, [r1]
 8007bde:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1e6      	bne.n	8007bb4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	3308      	adds	r3, #8
 8007bec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	e853 3f00 	ldrex	r3, [r3]
 8007bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	f023 0301 	bic.w	r3, r3, #1
 8007bfc:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	3308      	adds	r3, #8
 8007c04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c06:	623a      	str	r2, [r7, #32]
 8007c08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0a:	69f9      	ldr	r1, [r7, #28]
 8007c0c:	6a3a      	ldr	r2, [r7, #32]
 8007c0e:	e841 2300 	strex	r3, r2, [r1]
 8007c12:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1e5      	bne.n	8007be6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2220      	movs	r2, #32
 8007c1e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2220      	movs	r2, #32
 8007c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2220      	movs	r2, #32
 8007c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e010      	b.n	8007c5e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	69da      	ldr	r2, [r3, #28]
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	4013      	ands	r3, r2
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	bf0c      	ite	eq
 8007c4c:	2301      	moveq	r3, #1
 8007c4e:	2300      	movne	r3, #0
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	461a      	mov	r2, r3
 8007c54:	79fb      	ldrb	r3, [r7, #7]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	f43f af48 	beq.w	8007aec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3770      	adds	r7, #112	; 0x70
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b095      	sub	sp, #84	; 0x54
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c76:	e853 3f00 	ldrex	r3, [r3]
 8007c7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	461a      	mov	r2, r3
 8007c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c8c:	643b      	str	r3, [r7, #64]	; 0x40
 8007c8e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c94:	e841 2300 	strex	r3, r2, [r1]
 8007c98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1e6      	bne.n	8007c6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	3308      	adds	r3, #8
 8007ca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca8:	6a3b      	ldr	r3, [r7, #32]
 8007caa:	e853 3f00 	ldrex	r3, [r3]
 8007cae:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	f023 0301 	bic.w	r3, r3, #1
 8007cb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	3308      	adds	r3, #8
 8007cbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cc8:	e841 2300 	strex	r3, r2, [r1]
 8007ccc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1e5      	bne.n	8007ca0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d118      	bne.n	8007d0e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	e853 3f00 	ldrex	r3, [r3]
 8007ce8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	f023 0310 	bic.w	r3, r3, #16
 8007cf0:	647b      	str	r3, [r7, #68]	; 0x44
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cfa:	61bb      	str	r3, [r7, #24]
 8007cfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfe:	6979      	ldr	r1, [r7, #20]
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	e841 2300 	strex	r3, r2, [r1]
 8007d06:	613b      	str	r3, [r7, #16]
   return(result);
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1e6      	bne.n	8007cdc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2220      	movs	r2, #32
 8007d12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007d22:	bf00      	nop
 8007d24:	3754      	adds	r7, #84	; 0x54
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b084      	sub	sp, #16
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f7ff fb51 	bl	80073f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d52:	bf00      	nop
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b088      	sub	sp, #32
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	e853 3f00 	ldrex	r3, [r3]
 8007d6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d76:	61fb      	str	r3, [r7, #28]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	61bb      	str	r3, [r7, #24]
 8007d82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d84:	6979      	ldr	r1, [r7, #20]
 8007d86:	69ba      	ldr	r2, [r7, #24]
 8007d88:	e841 2300 	strex	r3, r2, [r1]
 8007d8c:	613b      	str	r3, [r7, #16]
   return(result);
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1e6      	bne.n	8007d62 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2220      	movs	r2, #32
 8007d98:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f7ff fb1d 	bl	80073e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007da6:	bf00      	nop
 8007da8:	3720      	adds	r7, #32
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
	...

08007db0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007db0:	b084      	sub	sp, #16
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b084      	sub	sp, #16
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
 8007dba:	f107 001c 	add.w	r0, r7, #28
 8007dbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d120      	bne.n	8007e0a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	68da      	ldr	r2, [r3, #12]
 8007dd8:	4b20      	ldr	r3, [pc, #128]	; (8007e5c <USB_CoreInit+0xac>)
 8007dda:	4013      	ands	r3, r2
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d105      	bne.n	8007dfe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fa96 	bl	8008330 <USB_CoreReset>
 8007e04:	4603      	mov	r3, r0
 8007e06:	73fb      	strb	r3, [r7, #15]
 8007e08:	e010      	b.n	8007e2c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 fa8a 	bl	8008330 <USB_CoreReset>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e24:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d10b      	bne.n	8007e4a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f043 0206 	orr.w	r2, r3, #6
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	f043 0220 	orr.w	r2, r3, #32
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e56:	b004      	add	sp, #16
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	ffbdffbf 	.word	0xffbdffbf

08007e60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f023 0201 	bic.w	r2, r3, #1
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b084      	sub	sp, #16
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007e9e:	78fb      	ldrb	r3, [r7, #3]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d115      	bne.n	8007ed0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007eb0:	2001      	movs	r0, #1
 8007eb2:	f7fa fa19 	bl	80022e8 <HAL_Delay>
      ms++;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fa29 	bl	8008314 <USB_GetMode>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d01e      	beq.n	8007f06 <USB_SetCurrentMode+0x84>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2b31      	cmp	r3, #49	; 0x31
 8007ecc:	d9f0      	bls.n	8007eb0 <USB_SetCurrentMode+0x2e>
 8007ece:	e01a      	b.n	8007f06 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ed0:	78fb      	ldrb	r3, [r7, #3]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d115      	bne.n	8007f02 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007ee2:	2001      	movs	r0, #1
 8007ee4:	f7fa fa00 	bl	80022e8 <HAL_Delay>
      ms++;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	3301      	adds	r3, #1
 8007eec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fa10 	bl	8008314 <USB_GetMode>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d005      	beq.n	8007f06 <USB_SetCurrentMode+0x84>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2b31      	cmp	r3, #49	; 0x31
 8007efe:	d9f0      	bls.n	8007ee2 <USB_SetCurrentMode+0x60>
 8007f00:	e001      	b.n	8007f06 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e005      	b.n	8007f12 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2b32      	cmp	r3, #50	; 0x32
 8007f0a:	d101      	bne.n	8007f10 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e000      	b.n	8007f12 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
	...

08007f1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f1c:	b084      	sub	sp, #16
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b086      	sub	sp, #24
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
 8007f26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007f2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007f36:	2300      	movs	r3, #0
 8007f38:	613b      	str	r3, [r7, #16]
 8007f3a:	e009      	b.n	8007f50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	3340      	adds	r3, #64	; 0x40
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	4413      	add	r3, r2
 8007f46:	2200      	movs	r2, #0
 8007f48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	613b      	str	r3, [r7, #16]
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	2b0e      	cmp	r3, #14
 8007f54:	d9f2      	bls.n	8007f3c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d11c      	bne.n	8007f96 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f6a:	f043 0302 	orr.w	r3, r3, #2
 8007f6e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f74:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	601a      	str	r2, [r3, #0]
 8007f94:	e005      	b.n	8007fa2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fa8:	461a      	mov	r2, r3
 8007faa:	2300      	movs	r3, #0
 8007fac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	680b      	ldr	r3, [r1, #0]
 8007fc0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d10c      	bne.n	8007fe2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d104      	bne.n	8007fd8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007fce:	2100      	movs	r1, #0
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 f965 	bl	80082a0 <USB_SetDevSpeed>
 8007fd6:	e008      	b.n	8007fea <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007fd8:	2101      	movs	r1, #1
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f960 	bl	80082a0 <USB_SetDevSpeed>
 8007fe0:	e003      	b.n	8007fea <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007fe2:	2103      	movs	r1, #3
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 f95b 	bl	80082a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007fea:	2110      	movs	r1, #16
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f8f3 	bl	80081d8 <USB_FlushTxFifo>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d001      	beq.n	8007ffc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f91f 	bl	8008240 <USB_FlushRxFifo>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d001      	beq.n	800800c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008012:	461a      	mov	r2, r3
 8008014:	2300      	movs	r3, #0
 8008016:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800801e:	461a      	mov	r2, r3
 8008020:	2300      	movs	r3, #0
 8008022:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800802a:	461a      	mov	r2, r3
 800802c:	2300      	movs	r3, #0
 800802e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008030:	2300      	movs	r3, #0
 8008032:	613b      	str	r3, [r7, #16]
 8008034:	e043      	b.n	80080be <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	015a      	lsls	r2, r3, #5
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	4413      	add	r3, r2
 800803e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008048:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800804c:	d118      	bne.n	8008080 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10a      	bne.n	800806a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	015a      	lsls	r2, r3, #5
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	4413      	add	r3, r2
 800805c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008060:	461a      	mov	r2, r3
 8008062:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008066:	6013      	str	r3, [r2, #0]
 8008068:	e013      	b.n	8008092 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	015a      	lsls	r2, r3, #5
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	4413      	add	r3, r2
 8008072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008076:	461a      	mov	r2, r3
 8008078:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800807c:	6013      	str	r3, [r2, #0]
 800807e:	e008      	b.n	8008092 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4413      	add	r3, r2
 8008088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800808c:	461a      	mov	r2, r3
 800808e:	2300      	movs	r3, #0
 8008090:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	015a      	lsls	r2, r3, #5
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	4413      	add	r3, r2
 800809a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800809e:	461a      	mov	r2, r3
 80080a0:	2300      	movs	r3, #0
 80080a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	015a      	lsls	r2, r3, #5
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	4413      	add	r3, r2
 80080ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b0:	461a      	mov	r2, r3
 80080b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80080b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	3301      	adds	r3, #1
 80080bc:	613b      	str	r3, [r7, #16]
 80080be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d3b7      	bcc.n	8008036 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080c6:	2300      	movs	r3, #0
 80080c8:	613b      	str	r3, [r7, #16]
 80080ca:	e043      	b.n	8008154 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	015a      	lsls	r2, r3, #5
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	4413      	add	r3, r2
 80080d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080e2:	d118      	bne.n	8008116 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d10a      	bne.n	8008100 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	015a      	lsls	r2, r3, #5
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	4413      	add	r3, r2
 80080f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080f6:	461a      	mov	r2, r3
 80080f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80080fc:	6013      	str	r3, [r2, #0]
 80080fe:	e013      	b.n	8008128 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	015a      	lsls	r2, r3, #5
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	4413      	add	r3, r2
 8008108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800810c:	461a      	mov	r2, r3
 800810e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008112:	6013      	str	r3, [r2, #0]
 8008114:	e008      	b.n	8008128 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	015a      	lsls	r2, r3, #5
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	4413      	add	r3, r2
 800811e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008122:	461a      	mov	r2, r3
 8008124:	2300      	movs	r3, #0
 8008126:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	015a      	lsls	r2, r3, #5
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	4413      	add	r3, r2
 8008130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008134:	461a      	mov	r2, r3
 8008136:	2300      	movs	r3, #0
 8008138:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	015a      	lsls	r2, r3, #5
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	4413      	add	r3, r2
 8008142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008146:	461a      	mov	r2, r3
 8008148:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800814c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	3301      	adds	r3, #1
 8008152:	613b      	str	r3, [r7, #16]
 8008154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	429a      	cmp	r2, r3
 800815a:	d3b7      	bcc.n	80080cc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800816a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800816e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800817c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800817e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008180:	2b00      	cmp	r3, #0
 8008182:	d105      	bne.n	8008190 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	f043 0210 	orr.w	r2, r3, #16
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	699a      	ldr	r2, [r3, #24]
 8008194:	4b0e      	ldr	r3, [pc, #56]	; (80081d0 <USB_DevInit+0x2b4>)
 8008196:	4313      	orrs	r3, r2
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800819c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d005      	beq.n	80081ae <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	f043 0208 	orr.w	r2, r3, #8
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80081ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d105      	bne.n	80081c0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	699a      	ldr	r2, [r3, #24]
 80081b8:	4b06      	ldr	r3, [pc, #24]	; (80081d4 <USB_DevInit+0x2b8>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80081c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3718      	adds	r7, #24
 80081c6:	46bd      	mov	sp, r7
 80081c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081cc:	b004      	add	sp, #16
 80081ce:	4770      	bx	lr
 80081d0:	803c3800 	.word	0x803c3800
 80081d4:	40000004 	.word	0x40000004

080081d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80081e2:	2300      	movs	r3, #0
 80081e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	3301      	adds	r3, #1
 80081ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4a13      	ldr	r2, [pc, #76]	; (800823c <USB_FlushTxFifo+0x64>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d901      	bls.n	80081f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80081f4:	2303      	movs	r3, #3
 80081f6:	e01b      	b.n	8008230 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	daf2      	bge.n	80081e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008200:	2300      	movs	r3, #0
 8008202:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	019b      	lsls	r3, r3, #6
 8008208:	f043 0220 	orr.w	r2, r3, #32
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	3301      	adds	r3, #1
 8008214:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	4a08      	ldr	r2, [pc, #32]	; (800823c <USB_FlushTxFifo+0x64>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d901      	bls.n	8008222 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e006      	b.n	8008230 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	f003 0320 	and.w	r3, r3, #32
 800822a:	2b20      	cmp	r3, #32
 800822c:	d0f0      	beq.n	8008210 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3714      	adds	r7, #20
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	00030d40 	.word	0x00030d40

08008240 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008248:	2300      	movs	r3, #0
 800824a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	3301      	adds	r3, #1
 8008250:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	4a11      	ldr	r2, [pc, #68]	; (800829c <USB_FlushRxFifo+0x5c>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d901      	bls.n	800825e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	e018      	b.n	8008290 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	2b00      	cmp	r3, #0
 8008264:	daf2      	bge.n	800824c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008266:	2300      	movs	r3, #0
 8008268:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2210      	movs	r2, #16
 800826e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	3301      	adds	r3, #1
 8008274:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	4a08      	ldr	r2, [pc, #32]	; (800829c <USB_FlushRxFifo+0x5c>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d901      	bls.n	8008282 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e006      	b.n	8008290 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	f003 0310 	and.w	r3, r3, #16
 800828a:	2b10      	cmp	r3, #16
 800828c:	d0f0      	beq.n	8008270 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3714      	adds	r7, #20
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr
 800829c:	00030d40 	.word	0x00030d40

080082a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	460b      	mov	r3, r1
 80082aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	78fb      	ldrb	r3, [r7, #3]
 80082ba:	68f9      	ldr	r1, [r7, #12]
 80082bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082c0:	4313      	orrs	r3, r2
 80082c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3714      	adds	r7, #20
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b085      	sub	sp, #20
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80082ec:	f023 0303 	bic.w	r3, r3, #3
 80082f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008300:	f043 0302 	orr.w	r3, r3, #2
 8008304:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3714      	adds	r7, #20
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	695b      	ldr	r3, [r3, #20]
 8008320:	f003 0301 	and.w	r3, r3, #1
}
 8008324:	4618      	mov	r0, r3
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008338:	2300      	movs	r3, #0
 800833a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	3301      	adds	r3, #1
 8008340:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	4a13      	ldr	r2, [pc, #76]	; (8008394 <USB_CoreReset+0x64>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d901      	bls.n	800834e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800834a:	2303      	movs	r3, #3
 800834c:	e01b      	b.n	8008386 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	2b00      	cmp	r3, #0
 8008354:	daf2      	bge.n	800833c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008356:	2300      	movs	r3, #0
 8008358:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	f043 0201 	orr.w	r2, r3, #1
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	3301      	adds	r3, #1
 800836a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	4a09      	ldr	r2, [pc, #36]	; (8008394 <USB_CoreReset+0x64>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d901      	bls.n	8008378 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	e006      	b.n	8008386 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	f003 0301 	and.w	r3, r3, #1
 8008380:	2b01      	cmp	r3, #1
 8008382:	d0f0      	beq.n	8008366 <USB_CoreReset+0x36>

  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3714      	adds	r7, #20
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	00030d40 	.word	0x00030d40

08008398 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800839e:	4b98      	ldr	r3, [pc, #608]	; (8008600 <MX_LWIP_Init+0x268>)
 80083a0:	22c0      	movs	r2, #192	; 0xc0
 80083a2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80083a4:	4b96      	ldr	r3, [pc, #600]	; (8008600 <MX_LWIP_Init+0x268>)
 80083a6:	22a8      	movs	r2, #168	; 0xa8
 80083a8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80083aa:	4b95      	ldr	r3, [pc, #596]	; (8008600 <MX_LWIP_Init+0x268>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 20;
 80083b0:	4b93      	ldr	r3, [pc, #588]	; (8008600 <MX_LWIP_Init+0x268>)
 80083b2:	2214      	movs	r2, #20
 80083b4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80083b6:	4b93      	ldr	r3, [pc, #588]	; (8008604 <MX_LWIP_Init+0x26c>)
 80083b8:	22ff      	movs	r2, #255	; 0xff
 80083ba:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80083bc:	4b91      	ldr	r3, [pc, #580]	; (8008604 <MX_LWIP_Init+0x26c>)
 80083be:	22ff      	movs	r2, #255	; 0xff
 80083c0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80083c2:	4b90      	ldr	r3, [pc, #576]	; (8008604 <MX_LWIP_Init+0x26c>)
 80083c4:	22ff      	movs	r2, #255	; 0xff
 80083c6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80083c8:	4b8e      	ldr	r3, [pc, #568]	; (8008604 <MX_LWIP_Init+0x26c>)
 80083ca:	2200      	movs	r2, #0
 80083cc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80083ce:	4b8e      	ldr	r3, [pc, #568]	; (8008608 <MX_LWIP_Init+0x270>)
 80083d0:	22c0      	movs	r2, #192	; 0xc0
 80083d2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80083d4:	4b8c      	ldr	r3, [pc, #560]	; (8008608 <MX_LWIP_Init+0x270>)
 80083d6:	22a8      	movs	r2, #168	; 0xa8
 80083d8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80083da:	4b8b      	ldr	r3, [pc, #556]	; (8008608 <MX_LWIP_Init+0x270>)
 80083dc:	2200      	movs	r2, #0
 80083de:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80083e0:	4b89      	ldr	r3, [pc, #548]	; (8008608 <MX_LWIP_Init+0x270>)
 80083e2:	2201      	movs	r2, #1
 80083e4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80083e6:	2100      	movs	r1, #0
 80083e8:	2000      	movs	r0, #0
 80083ea:	f004 fe97 	bl	800d11c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80083ee:	4b84      	ldr	r3, [pc, #528]	; (8008600 <MX_LWIP_Init+0x268>)
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	061a      	lsls	r2, r3, #24
 80083f4:	4b82      	ldr	r3, [pc, #520]	; (8008600 <MX_LWIP_Init+0x268>)
 80083f6:	785b      	ldrb	r3, [r3, #1]
 80083f8:	041b      	lsls	r3, r3, #16
 80083fa:	431a      	orrs	r2, r3
 80083fc:	4b80      	ldr	r3, [pc, #512]	; (8008600 <MX_LWIP_Init+0x268>)
 80083fe:	789b      	ldrb	r3, [r3, #2]
 8008400:	021b      	lsls	r3, r3, #8
 8008402:	4313      	orrs	r3, r2
 8008404:	4a7e      	ldr	r2, [pc, #504]	; (8008600 <MX_LWIP_Init+0x268>)
 8008406:	78d2      	ldrb	r2, [r2, #3]
 8008408:	4313      	orrs	r3, r2
 800840a:	061a      	lsls	r2, r3, #24
 800840c:	4b7c      	ldr	r3, [pc, #496]	; (8008600 <MX_LWIP_Init+0x268>)
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	0619      	lsls	r1, r3, #24
 8008412:	4b7b      	ldr	r3, [pc, #492]	; (8008600 <MX_LWIP_Init+0x268>)
 8008414:	785b      	ldrb	r3, [r3, #1]
 8008416:	041b      	lsls	r3, r3, #16
 8008418:	4319      	orrs	r1, r3
 800841a:	4b79      	ldr	r3, [pc, #484]	; (8008600 <MX_LWIP_Init+0x268>)
 800841c:	789b      	ldrb	r3, [r3, #2]
 800841e:	021b      	lsls	r3, r3, #8
 8008420:	430b      	orrs	r3, r1
 8008422:	4977      	ldr	r1, [pc, #476]	; (8008600 <MX_LWIP_Init+0x268>)
 8008424:	78c9      	ldrb	r1, [r1, #3]
 8008426:	430b      	orrs	r3, r1
 8008428:	021b      	lsls	r3, r3, #8
 800842a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800842e:	431a      	orrs	r2, r3
 8008430:	4b73      	ldr	r3, [pc, #460]	; (8008600 <MX_LWIP_Init+0x268>)
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	0619      	lsls	r1, r3, #24
 8008436:	4b72      	ldr	r3, [pc, #456]	; (8008600 <MX_LWIP_Init+0x268>)
 8008438:	785b      	ldrb	r3, [r3, #1]
 800843a:	041b      	lsls	r3, r3, #16
 800843c:	4319      	orrs	r1, r3
 800843e:	4b70      	ldr	r3, [pc, #448]	; (8008600 <MX_LWIP_Init+0x268>)
 8008440:	789b      	ldrb	r3, [r3, #2]
 8008442:	021b      	lsls	r3, r3, #8
 8008444:	430b      	orrs	r3, r1
 8008446:	496e      	ldr	r1, [pc, #440]	; (8008600 <MX_LWIP_Init+0x268>)
 8008448:	78c9      	ldrb	r1, [r1, #3]
 800844a:	430b      	orrs	r3, r1
 800844c:	0a1b      	lsrs	r3, r3, #8
 800844e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008452:	431a      	orrs	r2, r3
 8008454:	4b6a      	ldr	r3, [pc, #424]	; (8008600 <MX_LWIP_Init+0x268>)
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	0619      	lsls	r1, r3, #24
 800845a:	4b69      	ldr	r3, [pc, #420]	; (8008600 <MX_LWIP_Init+0x268>)
 800845c:	785b      	ldrb	r3, [r3, #1]
 800845e:	041b      	lsls	r3, r3, #16
 8008460:	4319      	orrs	r1, r3
 8008462:	4b67      	ldr	r3, [pc, #412]	; (8008600 <MX_LWIP_Init+0x268>)
 8008464:	789b      	ldrb	r3, [r3, #2]
 8008466:	021b      	lsls	r3, r3, #8
 8008468:	430b      	orrs	r3, r1
 800846a:	4965      	ldr	r1, [pc, #404]	; (8008600 <MX_LWIP_Init+0x268>)
 800846c:	78c9      	ldrb	r1, [r1, #3]
 800846e:	430b      	orrs	r3, r1
 8008470:	0e1b      	lsrs	r3, r3, #24
 8008472:	4313      	orrs	r3, r2
 8008474:	4a65      	ldr	r2, [pc, #404]	; (800860c <MX_LWIP_Init+0x274>)
 8008476:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008478:	4b62      	ldr	r3, [pc, #392]	; (8008604 <MX_LWIP_Init+0x26c>)
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	061a      	lsls	r2, r3, #24
 800847e:	4b61      	ldr	r3, [pc, #388]	; (8008604 <MX_LWIP_Init+0x26c>)
 8008480:	785b      	ldrb	r3, [r3, #1]
 8008482:	041b      	lsls	r3, r3, #16
 8008484:	431a      	orrs	r2, r3
 8008486:	4b5f      	ldr	r3, [pc, #380]	; (8008604 <MX_LWIP_Init+0x26c>)
 8008488:	789b      	ldrb	r3, [r3, #2]
 800848a:	021b      	lsls	r3, r3, #8
 800848c:	4313      	orrs	r3, r2
 800848e:	4a5d      	ldr	r2, [pc, #372]	; (8008604 <MX_LWIP_Init+0x26c>)
 8008490:	78d2      	ldrb	r2, [r2, #3]
 8008492:	4313      	orrs	r3, r2
 8008494:	061a      	lsls	r2, r3, #24
 8008496:	4b5b      	ldr	r3, [pc, #364]	; (8008604 <MX_LWIP_Init+0x26c>)
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	0619      	lsls	r1, r3, #24
 800849c:	4b59      	ldr	r3, [pc, #356]	; (8008604 <MX_LWIP_Init+0x26c>)
 800849e:	785b      	ldrb	r3, [r3, #1]
 80084a0:	041b      	lsls	r3, r3, #16
 80084a2:	4319      	orrs	r1, r3
 80084a4:	4b57      	ldr	r3, [pc, #348]	; (8008604 <MX_LWIP_Init+0x26c>)
 80084a6:	789b      	ldrb	r3, [r3, #2]
 80084a8:	021b      	lsls	r3, r3, #8
 80084aa:	430b      	orrs	r3, r1
 80084ac:	4955      	ldr	r1, [pc, #340]	; (8008604 <MX_LWIP_Init+0x26c>)
 80084ae:	78c9      	ldrb	r1, [r1, #3]
 80084b0:	430b      	orrs	r3, r1
 80084b2:	021b      	lsls	r3, r3, #8
 80084b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80084b8:	431a      	orrs	r2, r3
 80084ba:	4b52      	ldr	r3, [pc, #328]	; (8008604 <MX_LWIP_Init+0x26c>)
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	0619      	lsls	r1, r3, #24
 80084c0:	4b50      	ldr	r3, [pc, #320]	; (8008604 <MX_LWIP_Init+0x26c>)
 80084c2:	785b      	ldrb	r3, [r3, #1]
 80084c4:	041b      	lsls	r3, r3, #16
 80084c6:	4319      	orrs	r1, r3
 80084c8:	4b4e      	ldr	r3, [pc, #312]	; (8008604 <MX_LWIP_Init+0x26c>)
 80084ca:	789b      	ldrb	r3, [r3, #2]
 80084cc:	021b      	lsls	r3, r3, #8
 80084ce:	430b      	orrs	r3, r1
 80084d0:	494c      	ldr	r1, [pc, #304]	; (8008604 <MX_LWIP_Init+0x26c>)
 80084d2:	78c9      	ldrb	r1, [r1, #3]
 80084d4:	430b      	orrs	r3, r1
 80084d6:	0a1b      	lsrs	r3, r3, #8
 80084d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80084dc:	431a      	orrs	r2, r3
 80084de:	4b49      	ldr	r3, [pc, #292]	; (8008604 <MX_LWIP_Init+0x26c>)
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	0619      	lsls	r1, r3, #24
 80084e4:	4b47      	ldr	r3, [pc, #284]	; (8008604 <MX_LWIP_Init+0x26c>)
 80084e6:	785b      	ldrb	r3, [r3, #1]
 80084e8:	041b      	lsls	r3, r3, #16
 80084ea:	4319      	orrs	r1, r3
 80084ec:	4b45      	ldr	r3, [pc, #276]	; (8008604 <MX_LWIP_Init+0x26c>)
 80084ee:	789b      	ldrb	r3, [r3, #2]
 80084f0:	021b      	lsls	r3, r3, #8
 80084f2:	430b      	orrs	r3, r1
 80084f4:	4943      	ldr	r1, [pc, #268]	; (8008604 <MX_LWIP_Init+0x26c>)
 80084f6:	78c9      	ldrb	r1, [r1, #3]
 80084f8:	430b      	orrs	r3, r1
 80084fa:	0e1b      	lsrs	r3, r3, #24
 80084fc:	4313      	orrs	r3, r2
 80084fe:	4a44      	ldr	r2, [pc, #272]	; (8008610 <MX_LWIP_Init+0x278>)
 8008500:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8008502:	4b41      	ldr	r3, [pc, #260]	; (8008608 <MX_LWIP_Init+0x270>)
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	061a      	lsls	r2, r3, #24
 8008508:	4b3f      	ldr	r3, [pc, #252]	; (8008608 <MX_LWIP_Init+0x270>)
 800850a:	785b      	ldrb	r3, [r3, #1]
 800850c:	041b      	lsls	r3, r3, #16
 800850e:	431a      	orrs	r2, r3
 8008510:	4b3d      	ldr	r3, [pc, #244]	; (8008608 <MX_LWIP_Init+0x270>)
 8008512:	789b      	ldrb	r3, [r3, #2]
 8008514:	021b      	lsls	r3, r3, #8
 8008516:	4313      	orrs	r3, r2
 8008518:	4a3b      	ldr	r2, [pc, #236]	; (8008608 <MX_LWIP_Init+0x270>)
 800851a:	78d2      	ldrb	r2, [r2, #3]
 800851c:	4313      	orrs	r3, r2
 800851e:	061a      	lsls	r2, r3, #24
 8008520:	4b39      	ldr	r3, [pc, #228]	; (8008608 <MX_LWIP_Init+0x270>)
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	0619      	lsls	r1, r3, #24
 8008526:	4b38      	ldr	r3, [pc, #224]	; (8008608 <MX_LWIP_Init+0x270>)
 8008528:	785b      	ldrb	r3, [r3, #1]
 800852a:	041b      	lsls	r3, r3, #16
 800852c:	4319      	orrs	r1, r3
 800852e:	4b36      	ldr	r3, [pc, #216]	; (8008608 <MX_LWIP_Init+0x270>)
 8008530:	789b      	ldrb	r3, [r3, #2]
 8008532:	021b      	lsls	r3, r3, #8
 8008534:	430b      	orrs	r3, r1
 8008536:	4934      	ldr	r1, [pc, #208]	; (8008608 <MX_LWIP_Init+0x270>)
 8008538:	78c9      	ldrb	r1, [r1, #3]
 800853a:	430b      	orrs	r3, r1
 800853c:	021b      	lsls	r3, r3, #8
 800853e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008542:	431a      	orrs	r2, r3
 8008544:	4b30      	ldr	r3, [pc, #192]	; (8008608 <MX_LWIP_Init+0x270>)
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	0619      	lsls	r1, r3, #24
 800854a:	4b2f      	ldr	r3, [pc, #188]	; (8008608 <MX_LWIP_Init+0x270>)
 800854c:	785b      	ldrb	r3, [r3, #1]
 800854e:	041b      	lsls	r3, r3, #16
 8008550:	4319      	orrs	r1, r3
 8008552:	4b2d      	ldr	r3, [pc, #180]	; (8008608 <MX_LWIP_Init+0x270>)
 8008554:	789b      	ldrb	r3, [r3, #2]
 8008556:	021b      	lsls	r3, r3, #8
 8008558:	430b      	orrs	r3, r1
 800855a:	492b      	ldr	r1, [pc, #172]	; (8008608 <MX_LWIP_Init+0x270>)
 800855c:	78c9      	ldrb	r1, [r1, #3]
 800855e:	430b      	orrs	r3, r1
 8008560:	0a1b      	lsrs	r3, r3, #8
 8008562:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008566:	431a      	orrs	r2, r3
 8008568:	4b27      	ldr	r3, [pc, #156]	; (8008608 <MX_LWIP_Init+0x270>)
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	0619      	lsls	r1, r3, #24
 800856e:	4b26      	ldr	r3, [pc, #152]	; (8008608 <MX_LWIP_Init+0x270>)
 8008570:	785b      	ldrb	r3, [r3, #1]
 8008572:	041b      	lsls	r3, r3, #16
 8008574:	4319      	orrs	r1, r3
 8008576:	4b24      	ldr	r3, [pc, #144]	; (8008608 <MX_LWIP_Init+0x270>)
 8008578:	789b      	ldrb	r3, [r3, #2]
 800857a:	021b      	lsls	r3, r3, #8
 800857c:	430b      	orrs	r3, r1
 800857e:	4922      	ldr	r1, [pc, #136]	; (8008608 <MX_LWIP_Init+0x270>)
 8008580:	78c9      	ldrb	r1, [r1, #3]
 8008582:	430b      	orrs	r3, r1
 8008584:	0e1b      	lsrs	r3, r3, #24
 8008586:	4313      	orrs	r3, r2
 8008588:	4a22      	ldr	r2, [pc, #136]	; (8008614 <MX_LWIP_Init+0x27c>)
 800858a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800858c:	4b22      	ldr	r3, [pc, #136]	; (8008618 <MX_LWIP_Init+0x280>)
 800858e:	9302      	str	r3, [sp, #8]
 8008590:	4b22      	ldr	r3, [pc, #136]	; (800861c <MX_LWIP_Init+0x284>)
 8008592:	9301      	str	r3, [sp, #4]
 8008594:	2300      	movs	r3, #0
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	4b1e      	ldr	r3, [pc, #120]	; (8008614 <MX_LWIP_Init+0x27c>)
 800859a:	4a1d      	ldr	r2, [pc, #116]	; (8008610 <MX_LWIP_Init+0x278>)
 800859c:	491b      	ldr	r1, [pc, #108]	; (800860c <MX_LWIP_Init+0x274>)
 800859e:	4820      	ldr	r0, [pc, #128]	; (8008620 <MX_LWIP_Init+0x288>)
 80085a0:	f005 fb86 	bl	800dcb0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80085a4:	481e      	ldr	r0, [pc, #120]	; (8008620 <MX_LWIP_Init+0x288>)
 80085a6:	f005 fd35 	bl	800e014 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80085aa:	4b1d      	ldr	r3, [pc, #116]	; (8008620 <MX_LWIP_Init+0x288>)
 80085ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80085b0:	089b      	lsrs	r3, r3, #2
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d003      	beq.n	80085c4 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80085bc:	4818      	ldr	r0, [pc, #96]	; (8008620 <MX_LWIP_Init+0x288>)
 80085be:	f005 fd39 	bl	800e034 <netif_set_up>
 80085c2:	e002      	b.n	80085ca <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80085c4:	4816      	ldr	r0, [pc, #88]	; (8008620 <MX_LWIP_Init+0x288>)
 80085c6:	f005 fda1 	bl	800e10c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80085ca:	4916      	ldr	r1, [pc, #88]	; (8008624 <MX_LWIP_Init+0x28c>)
 80085cc:	4814      	ldr	r0, [pc, #80]	; (8008620 <MX_LWIP_Init+0x288>)
 80085ce:	f005 fe33 	bl	800e238 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80085d2:	2224      	movs	r2, #36	; 0x24
 80085d4:	2100      	movs	r1, #0
 80085d6:	4814      	ldr	r0, [pc, #80]	; (8008628 <MX_LWIP_Init+0x290>)
 80085d8:	f00e fd00 	bl	8016fdc <memset>
  attributes.name = "EthLink";
 80085dc:	4b12      	ldr	r3, [pc, #72]	; (8008628 <MX_LWIP_Init+0x290>)
 80085de:	4a13      	ldr	r2, [pc, #76]	; (800862c <MX_LWIP_Init+0x294>)
 80085e0:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80085e2:	4b11      	ldr	r3, [pc, #68]	; (8008628 <MX_LWIP_Init+0x290>)
 80085e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80085e8:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80085ea:	4b0f      	ldr	r3, [pc, #60]	; (8008628 <MX_LWIP_Init+0x290>)
 80085ec:	2210      	movs	r2, #16
 80085ee:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80085f0:	4a0d      	ldr	r2, [pc, #52]	; (8008628 <MX_LWIP_Init+0x290>)
 80085f2:	490b      	ldr	r1, [pc, #44]	; (8008620 <MX_LWIP_Init+0x288>)
 80085f4:	480e      	ldr	r0, [pc, #56]	; (8008630 <MX_LWIP_Init+0x298>)
 80085f6:	f000 fda3 	bl	8009140 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80085fa:	bf00      	nop
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	200044a8 	.word	0x200044a8
 8008604:	200044ac 	.word	0x200044ac
 8008608:	200044b0 	.word	0x200044b0
 800860c:	2000449c 	.word	0x2000449c
 8008610:	200044a0 	.word	0x200044a0
 8008614:	200044a4 	.word	0x200044a4
 8008618:	0800d059 	.word	0x0800d059
 800861c:	08008b31 	.word	0x08008b31
 8008620:	20004468 	.word	0x20004468
 8008624:	08008635 	.word	0x08008635
 8008628:	200044b4 	.word	0x200044b4
 800862c:	08018334 	.word	0x08018334
 8008630:	08008df9 	.word	0x08008df9

08008634 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8008648:	b480      	push	{r7}
 800864a:	b087      	sub	sp, #28
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800865a:	2320      	movs	r3, #32
 800865c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800865e:	f3bf 8f4f 	dsb	sy
}
 8008662:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8008664:	e00b      	b.n	800867e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8008666:	4a0d      	ldr	r2, [pc, #52]	; (800869c <SCB_InvalidateDCache_by_Addr+0x54>)
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	693a      	ldr	r2, [r7, #16]
 8008672:	4413      	add	r3, r2
 8008674:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	2b00      	cmp	r3, #0
 8008682:	dcf0      	bgt.n	8008666 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8008684:	f3bf 8f4f 	dsb	sy
}
 8008688:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800868a:	f3bf 8f6f 	isb	sy
}
 800868e:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8008690:	bf00      	nop
 8008692:	371c      	adds	r7, #28
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr
 800869c:	e000ed00 	.word	0xe000ed00

080086a0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80086a8:	4b04      	ldr	r3, [pc, #16]	; (80086bc <HAL_ETH_RxCpltCallback+0x1c>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4618      	mov	r0, r3
 80086ae:	f001 f865 	bl	800977c <osSemaphoreRelease>
}
 80086b2:	bf00      	nop
 80086b4:	3708      	adds	r7, #8
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	20008e64 	.word	0x20008e64

080086c0 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80086c8:	4b04      	ldr	r3, [pc, #16]	; (80086dc <HAL_ETH_TxCpltCallback+0x1c>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f001 f855 	bl	800977c <osSemaphoreRelease>
}
 80086d2:	bf00      	nop
 80086d4:	3708      	adds	r7, #8
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	20008e68 	.word	0x20008e68

080086e0 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f7fb ff19 	bl	8004520 <HAL_ETH_GetDMAError>
 80086ee:	4603      	mov	r3, r0
 80086f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086f4:	2b80      	cmp	r3, #128	; 0x80
 80086f6:	d104      	bne.n	8008702 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80086f8:	4b04      	ldr	r3, [pc, #16]	; (800870c <HAL_ETH_ErrorCallback+0x2c>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4618      	mov	r0, r3
 80086fe:	f001 f83d 	bl	800977c <osSemaphoreRelease>
  }
}
 8008702:	bf00      	nop
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	20008e64 	.word	0x20008e64

08008710 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b0aa      	sub	sp, #168	; 0xa8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8008718:	2300      	movs	r3, #0
 800871a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800871e:	2300      	movs	r3, #0
 8008720:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8008724:	2300      	movs	r3, #0
 8008726:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800872a:	f107 0310 	add.w	r3, r7, #16
 800872e:	2264      	movs	r2, #100	; 0x64
 8008730:	2100      	movs	r1, #0
 8008732:	4618      	mov	r0, r3
 8008734:	f00e fc52 	bl	8016fdc <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008738:	4b85      	ldr	r3, [pc, #532]	; (8008950 <low_level_init+0x240>)
 800873a:	4a86      	ldr	r2, [pc, #536]	; (8008954 <low_level_init+0x244>)
 800873c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800873e:	2300      	movs	r3, #0
 8008740:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8008742:	2380      	movs	r3, #128	; 0x80
 8008744:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8008746:	23e1      	movs	r3, #225	; 0xe1
 8008748:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800874a:	2300      	movs	r3, #0
 800874c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800874e:	2300      	movs	r3, #0
 8008750:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8008752:	2300      	movs	r3, #0
 8008754:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8008756:	4a7e      	ldr	r2, [pc, #504]	; (8008950 <low_level_init+0x240>)
 8008758:	f107 0308 	add.w	r3, r7, #8
 800875c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800875e:	4b7c      	ldr	r3, [pc, #496]	; (8008950 <low_level_init+0x240>)
 8008760:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008764:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8008766:	4b7a      	ldr	r3, [pc, #488]	; (8008950 <low_level_init+0x240>)
 8008768:	4a7b      	ldr	r2, [pc, #492]	; (8008958 <low_level_init+0x248>)
 800876a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800876c:	4b78      	ldr	r3, [pc, #480]	; (8008950 <low_level_init+0x240>)
 800876e:	4a7b      	ldr	r2, [pc, #492]	; (800895c <low_level_init+0x24c>)
 8008770:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8008772:	4b77      	ldr	r3, [pc, #476]	; (8008950 <low_level_init+0x240>)
 8008774:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008778:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800877a:	4875      	ldr	r0, [pc, #468]	; (8008950 <low_level_init+0x240>)
 800877c:	f7fb f892 	bl	80038a4 <HAL_ETH_Init>
 8008780:	4603      	mov	r3, r0
 8008782:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8008786:	2238      	movs	r2, #56	; 0x38
 8008788:	2100      	movs	r1, #0
 800878a:	4875      	ldr	r0, [pc, #468]	; (8008960 <low_level_init+0x250>)
 800878c:	f00e fc26 	bl	8016fdc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8008790:	4b73      	ldr	r3, [pc, #460]	; (8008960 <low_level_init+0x250>)
 8008792:	2221      	movs	r2, #33	; 0x21
 8008794:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8008796:	4b72      	ldr	r3, [pc, #456]	; (8008960 <low_level_init+0x250>)
 8008798:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800879c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800879e:	4b70      	ldr	r3, [pc, #448]	; (8008960 <low_level_init+0x250>)
 80087a0:	2200      	movs	r2, #0
 80087a2:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80087a4:	486f      	ldr	r0, [pc, #444]	; (8008964 <low_level_init+0x254>)
 80087a6:	f005 f93d 	bl	800da24 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2206      	movs	r2, #6
 80087ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80087b2:	4b67      	ldr	r3, [pc, #412]	; (8008950 <low_level_init+0x240>)
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	781a      	ldrb	r2, [r3, #0]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80087be:	4b64      	ldr	r3, [pc, #400]	; (8008950 <low_level_init+0x240>)
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	785a      	ldrb	r2, [r3, #1]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80087ca:	4b61      	ldr	r3, [pc, #388]	; (8008950 <low_level_init+0x240>)
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	789a      	ldrb	r2, [r3, #2]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80087d6:	4b5e      	ldr	r3, [pc, #376]	; (8008950 <low_level_init+0x240>)
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	78da      	ldrb	r2, [r3, #3]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80087e2:	4b5b      	ldr	r3, [pc, #364]	; (8008950 <low_level_init+0x240>)
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	791a      	ldrb	r2, [r3, #4]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80087ee:	4b58      	ldr	r3, [pc, #352]	; (8008950 <low_level_init+0x240>)
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	795a      	ldrb	r2, [r3, #5]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008800:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008808:	f043 030a 	orr.w	r3, r3, #10
 800880c:	b2da      	uxtb	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8008814:	2200      	movs	r2, #0
 8008816:	2101      	movs	r1, #1
 8008818:	2001      	movs	r0, #1
 800881a:	f000 fead 	bl	8009578 <osSemaphoreNew>
 800881e:	4603      	mov	r3, r0
 8008820:	4a51      	ldr	r2, [pc, #324]	; (8008968 <low_level_init+0x258>)
 8008822:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8008824:	2200      	movs	r2, #0
 8008826:	2101      	movs	r1, #1
 8008828:	2001      	movs	r0, #1
 800882a:	f000 fea5 	bl	8009578 <osSemaphoreNew>
 800882e:	4603      	mov	r3, r0
 8008830:	4a4e      	ldr	r2, [pc, #312]	; (800896c <low_level_init+0x25c>)
 8008832:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8008834:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008838:	2224      	movs	r2, #36	; 0x24
 800883a:	2100      	movs	r1, #0
 800883c:	4618      	mov	r0, r3
 800883e:	f00e fbcd 	bl	8016fdc <memset>
  attributes.name = "EthIf";
 8008842:	4b4b      	ldr	r3, [pc, #300]	; (8008970 <low_level_init+0x260>)
 8008844:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8008846:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800884a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 800884e:	2330      	movs	r3, #48	; 0x30
 8008850:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8008854:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008858:	461a      	mov	r2, r3
 800885a:	6879      	ldr	r1, [r7, #4]
 800885c:	4845      	ldr	r0, [pc, #276]	; (8008974 <low_level_init+0x264>)
 800885e:	f000 fc6f 	bl	8009140 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8008862:	4945      	ldr	r1, [pc, #276]	; (8008978 <low_level_init+0x268>)
 8008864:	4845      	ldr	r0, [pc, #276]	; (800897c <low_level_init+0x26c>)
 8008866:	f7f9 fbb0 	bl	8001fca <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800886a:	4844      	ldr	r0, [pc, #272]	; (800897c <low_level_init+0x26c>)
 800886c:	f7f9 fbdf 	bl	800202e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8008870:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8008874:	2b00      	cmp	r3, #0
 8008876:	d164      	bne.n	8008942 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008878:	4840      	ldr	r0, [pc, #256]	; (800897c <low_level_init+0x26c>)
 800887a:	f7f9 fc80 	bl	800217e <LAN8742_GetLinkState>
 800887e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8008882:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008886:	2b01      	cmp	r3, #1
 8008888:	dc06      	bgt.n	8008898 <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f005 fca4 	bl	800e1d8 <netif_set_link_down>
      netif_set_down(netif);
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f005 fc3b 	bl	800e10c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008896:	e056      	b.n	8008946 <low_level_init+0x236>
      switch (PHYLinkState)
 8008898:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800889c:	3b02      	subs	r3, #2
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d82a      	bhi.n	80088f8 <low_level_init+0x1e8>
 80088a2:	a201      	add	r2, pc, #4	; (adr r2, 80088a8 <low_level_init+0x198>)
 80088a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a8:	080088b9 	.word	0x080088b9
 80088ac:	080088cb 	.word	0x080088cb
 80088b0:	080088db 	.word	0x080088db
 80088b4:	080088eb 	.word	0x080088eb
        duplex = ETH_FULLDUPLEX_MODE;
 80088b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 80088c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80088c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80088c8:	e01f      	b.n	800890a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80088ca:	2300      	movs	r3, #0
 80088cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 80088d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80088d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80088d8:	e017      	b.n	800890a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80088da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 80088e2:	2300      	movs	r3, #0
 80088e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80088e8:	e00f      	b.n	800890a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80088ea:	2300      	movs	r3, #0
 80088ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 80088f0:	2300      	movs	r3, #0
 80088f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80088f6:	e008      	b.n	800890a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80088f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8008900:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008904:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008908:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800890a:	f107 0310 	add.w	r3, r7, #16
 800890e:	4619      	mov	r1, r3
 8008910:	480f      	ldr	r0, [pc, #60]	; (8008950 <low_level_init+0x240>)
 8008912:	f7fb fcab 	bl	800426c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8008916:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800891a:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 800891c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008922:	f107 0310 	add.w	r3, r7, #16
 8008926:	4619      	mov	r1, r3
 8008928:	4809      	ldr	r0, [pc, #36]	; (8008950 <low_level_init+0x240>)
 800892a:	f7fb fd89 	bl	8004440 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800892e:	4808      	ldr	r0, [pc, #32]	; (8008950 <low_level_init+0x240>)
 8008930:	f7fb f834 	bl	800399c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f005 fb7d 	bl	800e034 <netif_set_up>
    netif_set_link_up(netif);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f005 fc18 	bl	800e170 <netif_set_link_up>
}
 8008940:	e001      	b.n	8008946 <low_level_init+0x236>
    Error_Handler();
 8008942:	f7f8 ffbb 	bl	80018bc <Error_Handler>
}
 8008946:	bf00      	nop
 8008948:	37a8      	adds	r7, #168	; 0xa8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	20008e6c 	.word	0x20008e6c
 8008954:	40028000 	.word	0x40028000
 8008958:	20000134 	.word	0x20000134
 800895c:	20000094 	.word	0x20000094
 8008960:	20008f1c 	.word	0x20008f1c
 8008964:	0801aec4 	.word	0x0801aec4
 8008968:	20008e64 	.word	0x20008e64
 800896c:	20008e68 	.word	0x20008e68
 8008970:	0801833c 	.word	0x0801833c
 8008974:	08008add 	.word	0x08008add
 8008978:	2000000c 	.word	0x2000000c
 800897c:	20008f54 	.word	0x20008f54

08008980 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b092      	sub	sp, #72	; 0x48
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800898a:	2300      	movs	r3, #0
 800898c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800898e:	2300      	movs	r3, #0
 8008990:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8008992:	2300      	movs	r3, #0
 8008994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8008998:	f107 030c 	add.w	r3, r7, #12
 800899c:	2230      	movs	r2, #48	; 0x30
 800899e:	2100      	movs	r1, #0
 80089a0:	4618      	mov	r0, r3
 80089a2:	f00e fb1b 	bl	8016fdc <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80089a6:	f107 030c 	add.w	r3, r7, #12
 80089aa:	2230      	movs	r2, #48	; 0x30
 80089ac:	2100      	movs	r1, #0
 80089ae:	4618      	mov	r0, r3
 80089b0:	f00e fb14 	bl	8016fdc <memset>

  for(q = p; q != NULL; q = q->next)
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	643b      	str	r3, [r7, #64]	; 0x40
 80089b8:	e045      	b.n	8008a46 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80089ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089bc:	2b03      	cmp	r3, #3
 80089be:	d902      	bls.n	80089c6 <low_level_output+0x46>
      return ERR_IF;
 80089c0:	f06f 030b 	mvn.w	r3, #11
 80089c4:	e065      	b.n	8008a92 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 80089c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089c8:	6859      	ldr	r1, [r3, #4]
 80089ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089cc:	4613      	mov	r3, r2
 80089ce:	005b      	lsls	r3, r3, #1
 80089d0:	4413      	add	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	3348      	adds	r3, #72	; 0x48
 80089d6:	443b      	add	r3, r7
 80089d8:	3b3c      	subs	r3, #60	; 0x3c
 80089da:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80089dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089de:	895b      	ldrh	r3, [r3, #10]
 80089e0:	4619      	mov	r1, r3
 80089e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089e4:	4613      	mov	r3, r2
 80089e6:	005b      	lsls	r3, r3, #1
 80089e8:	4413      	add	r3, r2
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	3348      	adds	r3, #72	; 0x48
 80089ee:	443b      	add	r3, r7
 80089f0:	3b38      	subs	r3, #56	; 0x38
 80089f2:	6019      	str	r1, [r3, #0]

    if(i>0)
 80089f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d011      	beq.n	8008a1e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80089fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089fc:	1e5a      	subs	r2, r3, #1
 80089fe:	f107 000c 	add.w	r0, r7, #12
 8008a02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a04:	460b      	mov	r3, r1
 8008a06:	005b      	lsls	r3, r3, #1
 8008a08:	440b      	add	r3, r1
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	18c1      	adds	r1, r0, r3
 8008a0e:	4613      	mov	r3, r2
 8008a10:	005b      	lsls	r3, r3, #1
 8008a12:	4413      	add	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	3348      	adds	r3, #72	; 0x48
 8008a18:	443b      	add	r3, r7
 8008a1a:	3b34      	subs	r3, #52	; 0x34
 8008a1c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8008a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d109      	bne.n	8008a3a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8008a26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a28:	4613      	mov	r3, r2
 8008a2a:	005b      	lsls	r3, r3, #1
 8008a2c:	4413      	add	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	3348      	adds	r3, #72	; 0x48
 8008a32:	443b      	add	r3, r7
 8008a34:	3b34      	subs	r3, #52	; 0x34
 8008a36:	2200      	movs	r2, #0
 8008a38:	601a      	str	r2, [r3, #0]
    }

    i++;
 8008a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8008a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	643b      	str	r3, [r7, #64]	; 0x40
 8008a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1b6      	bne.n	80089ba <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	891b      	ldrh	r3, [r3, #8]
 8008a50:	461a      	mov	r2, r3
 8008a52:	4b12      	ldr	r3, [pc, #72]	; (8008a9c <low_level_output+0x11c>)
 8008a54:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8008a56:	4a11      	ldr	r2, [pc, #68]	; (8008a9c <low_level_output+0x11c>)
 8008a58:	f107 030c 	add.w	r3, r7, #12
 8008a5c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8008a5e:	4a0f      	ldr	r2, [pc, #60]	; (8008a9c <low_level_output+0x11c>)
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8008a64:	6838      	ldr	r0, [r7, #0]
 8008a66:	f006 f83b 	bl	800eae0 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8008a6a:	490c      	ldr	r1, [pc, #48]	; (8008a9c <low_level_output+0x11c>)
 8008a6c:	480c      	ldr	r0, [pc, #48]	; (8008aa0 <low_level_output+0x120>)
 8008a6e:	f7fb f8a3 	bl	8003bb8 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8008a72:	bf00      	nop
 8008a74:	4b0b      	ldr	r3, [pc, #44]	; (8008aa4 <low_level_output+0x124>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f04f 31ff 	mov.w	r1, #4294967295
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f000 fe17 	bl	80096b0 <osSemaphoreAcquire>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d1f5      	bne.n	8008a74 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8008a88:	4805      	ldr	r0, [pc, #20]	; (8008aa0 <low_level_output+0x120>)
 8008a8a:	f7fb fa29 	bl	8003ee0 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8008a8e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3748      	adds	r7, #72	; 0x48
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	20008f1c 	.word	0x20008f1c
 8008aa0:	20008e6c 	.word	0x20008e6c
 8008aa4:	20008e68 	.word	0x20008e68

08008aa8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8008ab4:	4b07      	ldr	r3, [pc, #28]	; (8008ad4 <low_level_input+0x2c>)
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d105      	bne.n	8008ac8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8008abc:	f107 030c 	add.w	r3, r7, #12
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	4805      	ldr	r0, [pc, #20]	; (8008ad8 <low_level_input+0x30>)
 8008ac4:	f7fb f8d4 	bl	8003c70 <HAL_ETH_ReadData>
  }

  return p;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	20008e60 	.word	0x20008e60
 8008ad8:	20008e6c 	.word	0x20008e6c

08008adc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008aec:	4b0f      	ldr	r3, [pc, #60]	; (8008b2c <ethernetif_input+0x50>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f04f 31ff 	mov.w	r1, #4294967295
 8008af4:	4618      	mov	r0, r3
 8008af6:	f000 fddb 	bl	80096b0 <osSemaphoreAcquire>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d1f5      	bne.n	8008aec <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8008b00:	68b8      	ldr	r0, [r7, #8]
 8008b02:	f7ff ffd1 	bl	8008aa8 <low_level_input>
 8008b06:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00a      	beq.n	8008b24 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	68b9      	ldr	r1, [r7, #8]
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	4798      	blx	r3
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d002      	beq.n	8008b24 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f005 ff38 	bl	800e994 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1ea      	bne.n	8008b00 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008b2a:	e7df      	b.n	8008aec <ethernetif_input+0x10>
 8008b2c:	20008e64 	.word	0x20008e64

08008b30 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d106      	bne.n	8008b4c <ethernetif_init+0x1c>
 8008b3e:	4b0e      	ldr	r3, [pc, #56]	; (8008b78 <ethernetif_init+0x48>)
 8008b40:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008b44:	490d      	ldr	r1, [pc, #52]	; (8008b7c <ethernetif_init+0x4c>)
 8008b46:	480e      	ldr	r0, [pc, #56]	; (8008b80 <ethernetif_init+0x50>)
 8008b48:	f00e fa50 	bl	8016fec <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2273      	movs	r2, #115	; 0x73
 8008b50:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2274      	movs	r2, #116	; 0x74
 8008b58:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a09      	ldr	r2, [pc, #36]	; (8008b84 <ethernetif_init+0x54>)
 8008b60:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a08      	ldr	r2, [pc, #32]	; (8008b88 <ethernetif_init+0x58>)
 8008b66:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f7ff fdd1 	bl	8008710 <low_level_init>

  return ERR_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	08018344 	.word	0x08018344
 8008b7c:	08018360 	.word	0x08018360
 8008b80:	08018370 	.word	0x08018370
 8008b84:	08015081 	.word	0x08015081
 8008b88:	08008981 	.word	0x08008981

08008b8c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008b98:	68f9      	ldr	r1, [r7, #12]
 8008b9a:	4809      	ldr	r0, [pc, #36]	; (8008bc0 <pbuf_free_custom+0x34>)
 8008b9c:	f005 f832 	bl	800dc04 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8008ba0:	4b08      	ldr	r3, [pc, #32]	; (8008bc4 <pbuf_free_custom+0x38>)
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d107      	bne.n	8008bb8 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8008ba8:	4b06      	ldr	r3, [pc, #24]	; (8008bc4 <pbuf_free_custom+0x38>)
 8008baa:	2200      	movs	r2, #0
 8008bac:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8008bae:	4b06      	ldr	r3, [pc, #24]	; (8008bc8 <pbuf_free_custom+0x3c>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 fde2 	bl	800977c <osSemaphoreRelease>
  }
}
 8008bb8:	bf00      	nop
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	0801aec4 	.word	0x0801aec4
 8008bc4:	20008e60 	.word	0x20008e60
 8008bc8:	20008e64 	.word	0x20008e64

08008bcc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008bd0:	f7f9 fb7e 	bl	80022d0 <HAL_GetTick>
 8008bd4:	4603      	mov	r3, r0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	bd80      	pop	{r7, pc}
	...

08008bdc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b08e      	sub	sp, #56	; 0x38
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008be8:	2200      	movs	r2, #0
 8008bea:	601a      	str	r2, [r3, #0]
 8008bec:	605a      	str	r2, [r3, #4]
 8008bee:	609a      	str	r2, [r3, #8]
 8008bf0:	60da      	str	r2, [r3, #12]
 8008bf2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a52      	ldr	r2, [pc, #328]	; (8008d44 <HAL_ETH_MspInit+0x168>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	f040 809e 	bne.w	8008d3c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8008c00:	4b51      	ldr	r3, [pc, #324]	; (8008d48 <HAL_ETH_MspInit+0x16c>)
 8008c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c04:	4a50      	ldr	r2, [pc, #320]	; (8008d48 <HAL_ETH_MspInit+0x16c>)
 8008c06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8008c0c:	4b4e      	ldr	r3, [pc, #312]	; (8008d48 <HAL_ETH_MspInit+0x16c>)
 8008c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c14:	623b      	str	r3, [r7, #32]
 8008c16:	6a3b      	ldr	r3, [r7, #32]
 8008c18:	4b4b      	ldr	r3, [pc, #300]	; (8008d48 <HAL_ETH_MspInit+0x16c>)
 8008c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c1c:	4a4a      	ldr	r2, [pc, #296]	; (8008d48 <HAL_ETH_MspInit+0x16c>)
 8008c1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008c22:	6313      	str	r3, [r2, #48]	; 0x30
 8008c24:	4b48      	ldr	r3, [pc, #288]	; (8008d48 <HAL_ETH_MspInit+0x16c>)
 8008c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008c2c:	61fb      	str	r3, [r7, #28]
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	4b45      	ldr	r3, [pc, #276]	; (8008d48 <HAL_ETH_MspInit+0x16c>)
 8008c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c34:	4a44      	ldr	r2, [pc, #272]	; (8008d48 <HAL_ETH_MspInit+0x16c>)
 8008c36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8008c3c:	4b42      	ldr	r3, [pc, #264]	; (8008d48 <HAL_ETH_MspInit+0x16c>)
 8008c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c44:	61bb      	str	r3, [r7, #24]
 8008c46:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008c48:	4b3f      	ldr	r3, [pc, #252]	; (8008d48 <HAL_ETH_MspInit+0x16c>)
 8008c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c4c:	4a3e      	ldr	r2, [pc, #248]	; (8008d48 <HAL_ETH_MspInit+0x16c>)
 8008c4e:	f043 0304 	orr.w	r3, r3, #4
 8008c52:	6313      	str	r3, [r2, #48]	; 0x30
 8008c54:	4b3c      	ldr	r3, [pc, #240]	; (8008d48 <HAL_ETH_MspInit+0x16c>)
 8008c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c58:	f003 0304 	and.w	r3, r3, #4
 8008c5c:	617b      	str	r3, [r7, #20]
 8008c5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c60:	4b39      	ldr	r3, [pc, #228]	; (8008d48 <HAL_ETH_MspInit+0x16c>)
 8008c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c64:	4a38      	ldr	r2, [pc, #224]	; (8008d48 <HAL_ETH_MspInit+0x16c>)
 8008c66:	f043 0301 	orr.w	r3, r3, #1
 8008c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8008c6c:	4b36      	ldr	r3, [pc, #216]	; (8008d48 <HAL_ETH_MspInit+0x16c>)
 8008c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c70:	f003 0301 	and.w	r3, r3, #1
 8008c74:	613b      	str	r3, [r7, #16]
 8008c76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008c78:	4b33      	ldr	r3, [pc, #204]	; (8008d48 <HAL_ETH_MspInit+0x16c>)
 8008c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c7c:	4a32      	ldr	r2, [pc, #200]	; (8008d48 <HAL_ETH_MspInit+0x16c>)
 8008c7e:	f043 0302 	orr.w	r3, r3, #2
 8008c82:	6313      	str	r3, [r2, #48]	; 0x30
 8008c84:	4b30      	ldr	r3, [pc, #192]	; (8008d48 <HAL_ETH_MspInit+0x16c>)
 8008c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c88:	f003 0302 	and.w	r3, r3, #2
 8008c8c:	60fb      	str	r3, [r7, #12]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008c90:	4b2d      	ldr	r3, [pc, #180]	; (8008d48 <HAL_ETH_MspInit+0x16c>)
 8008c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c94:	4a2c      	ldr	r2, [pc, #176]	; (8008d48 <HAL_ETH_MspInit+0x16c>)
 8008c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8008c9c:	4b2a      	ldr	r3, [pc, #168]	; (8008d48 <HAL_ETH_MspInit+0x16c>)
 8008c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ca4:	60bb      	str	r3, [r7, #8]
 8008ca6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8008ca8:	2332      	movs	r3, #50	; 0x32
 8008caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cac:	2302      	movs	r3, #2
 8008cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008cb8:	230b      	movs	r3, #11
 8008cba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	4822      	ldr	r0, [pc, #136]	; (8008d4c <HAL_ETH_MspInit+0x170>)
 8008cc4:	f7fc f83c 	bl	8004d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8008cc8:	2386      	movs	r3, #134	; 0x86
 8008cca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ccc:	2302      	movs	r3, #2
 8008cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008cd8:	230b      	movs	r3, #11
 8008cda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	481b      	ldr	r0, [pc, #108]	; (8008d50 <HAL_ETH_MspInit+0x174>)
 8008ce4:	f7fc f82c 	bl	8004d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8008ce8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008cec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cee:	2302      	movs	r3, #2
 8008cf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008cfa:	230b      	movs	r3, #11
 8008cfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8008cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d02:	4619      	mov	r1, r3
 8008d04:	4813      	ldr	r0, [pc, #76]	; (8008d54 <HAL_ETH_MspInit+0x178>)
 8008d06:	f7fc f81b 	bl	8004d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8008d0a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d10:	2302      	movs	r3, #2
 8008d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d14:	2300      	movs	r3, #0
 8008d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008d1c:	230b      	movs	r3, #11
 8008d1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d24:	4619      	mov	r1, r3
 8008d26:	480c      	ldr	r0, [pc, #48]	; (8008d58 <HAL_ETH_MspInit+0x17c>)
 8008d28:	f7fc f80a 	bl	8004d40 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	2105      	movs	r1, #5
 8008d30:	203d      	movs	r0, #61	; 0x3d
 8008d32:	f7fa fa11 	bl	8003158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008d36:	203d      	movs	r0, #61	; 0x3d
 8008d38:	f7fa fa2a 	bl	8003190 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008d3c:	bf00      	nop
 8008d3e:	3738      	adds	r7, #56	; 0x38
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	40028000 	.word	0x40028000
 8008d48:	40023800 	.word	0x40023800
 8008d4c:	40020800 	.word	0x40020800
 8008d50:	40020000 	.word	0x40020000
 8008d54:	40020400 	.word	0x40020400
 8008d58:	40021800 	.word	0x40021800

08008d5c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008d60:	4802      	ldr	r0, [pc, #8]	; (8008d6c <ETH_PHY_IO_Init+0x10>)
 8008d62:	f7fb fb87 	bl	8004474 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	20008e6c 	.word	0x20008e6c

08008d70 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008d70:	b480      	push	{r7}
 8008d72:	af00      	add	r7, sp, #0
  return 0;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	68ba      	ldr	r2, [r7, #8]
 8008d90:	68f9      	ldr	r1, [r7, #12]
 8008d92:	4807      	ldr	r0, [pc, #28]	; (8008db0 <ETH_PHY_IO_ReadReg+0x30>)
 8008d94:	f7fb f9d6 	bl	8004144 <HAL_ETH_ReadPHYRegister>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d002      	beq.n	8008da4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8008d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008da2:	e000      	b.n	8008da6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	20008e6c 	.word	0x20008e6c

08008db4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	68ba      	ldr	r2, [r7, #8]
 8008dc4:	68f9      	ldr	r1, [r7, #12]
 8008dc6:	4807      	ldr	r0, [pc, #28]	; (8008de4 <ETH_PHY_IO_WriteReg+0x30>)
 8008dc8:	f7fb fa07 	bl	80041da <HAL_ETH_WritePHYRegister>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d002      	beq.n	8008dd8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8008dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8008dd6:	e000      	b.n	8008dda <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	20008e6c 	.word	0x20008e6c

08008de8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008dec:	f7f9 fa70 	bl	80022d0 <HAL_GetTick>
 8008df0:	4603      	mov	r3, r0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	bd80      	pop	{r7, pc}
	...

08008df8 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b0a0      	sub	sp, #128	; 0x80
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8008e00:	f107 0308 	add.w	r3, r7, #8
 8008e04:	2264      	movs	r2, #100	; 0x64
 8008e06:	2100      	movs	r1, #0
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f00e f8e7 	bl	8016fdc <memset>
  int32_t PHYLinkState = 0;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8008e12:	2300      	movs	r3, #0
 8008e14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e16:	2300      	movs	r3, #0
 8008e18:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008e22:	483a      	ldr	r0, [pc, #232]	; (8008f0c <ethernet_link_thread+0x114>)
 8008e24:	f7f9 f9ab 	bl	800217e <LAN8742_GetLinkState>
 8008e28:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8008e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008e30:	089b      	lsrs	r3, r3, #2
 8008e32:	f003 0301 	and.w	r3, r3, #1
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00c      	beq.n	8008e56 <ethernet_link_thread+0x5e>
 8008e3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	dc09      	bgt.n	8008e56 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8008e42:	4833      	ldr	r0, [pc, #204]	; (8008f10 <ethernet_link_thread+0x118>)
 8008e44:	f7fa fe38 	bl	8003ab8 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8008e48:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008e4a:	f005 f95f 	bl	800e10c <netif_set_down>
    netif_set_link_down(netif);
 8008e4e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008e50:	f005 f9c2 	bl	800e1d8 <netif_set_link_down>
 8008e54:	e055      	b.n	8008f02 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8008e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008e5c:	f003 0304 	and.w	r3, r3, #4
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d14e      	bne.n	8008f02 <ethernet_link_thread+0x10a>
 8008e64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	dd4b      	ble.n	8008f02 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8008e6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e6c:	3b02      	subs	r3, #2
 8008e6e:	2b03      	cmp	r3, #3
 8008e70:	d82a      	bhi.n	8008ec8 <ethernet_link_thread+0xd0>
 8008e72:	a201      	add	r2, pc, #4	; (adr r2, 8008e78 <ethernet_link_thread+0x80>)
 8008e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e78:	08008e89 	.word	0x08008e89
 8008e7c:	08008e9b 	.word	0x08008e9b
 8008e80:	08008eab 	.word	0x08008eab
 8008e84:	08008ebb 	.word	0x08008ebb
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008e88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e8c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008e8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008e92:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008e94:	2301      	movs	r3, #1
 8008e96:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008e98:	e017      	b.n	8008eca <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008e9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008ea2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008ea8:	e00f      	b.n	8008eca <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008eaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008eae:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008eb8:	e007      	b.n	8008eca <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008ec6:	e000      	b.n	8008eca <ethernet_link_thread+0xd2>
    default:
      break;
 8008ec8:	bf00      	nop
    }

    if(linkchanged)
 8008eca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d018      	beq.n	8008f02 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008ed0:	f107 0308 	add.w	r3, r7, #8
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	480e      	ldr	r0, [pc, #56]	; (8008f10 <ethernet_link_thread+0x118>)
 8008ed8:	f7fb f9c8 	bl	800426c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8008edc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ede:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8008ee0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ee2:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008ee4:	f107 0308 	add.w	r3, r7, #8
 8008ee8:	4619      	mov	r1, r3
 8008eea:	4809      	ldr	r0, [pc, #36]	; (8008f10 <ethernet_link_thread+0x118>)
 8008eec:	f7fb faa8 	bl	8004440 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8008ef0:	4807      	ldr	r0, [pc, #28]	; (8008f10 <ethernet_link_thread+0x118>)
 8008ef2:	f7fa fd53 	bl	800399c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8008ef6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008ef8:	f005 f89c 	bl	800e034 <netif_set_up>
      netif_set_link_up(netif);
 8008efc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008efe:	f005 f937 	bl	800e170 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8008f02:	2064      	movs	r0, #100	; 0x64
 8008f04:	f000 f9c2 	bl	800928c <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008f08:	e78b      	b.n	8008e22 <ethernet_link_thread+0x2a>
 8008f0a:	bf00      	nop
 8008f0c:	20008f54 	.word	0x20008f54
 8008f10:	20008e6c 	.word	0x20008e6c

08008f14 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b086      	sub	sp, #24
 8008f18:	af02      	add	r7, sp, #8
 8008f1a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008f1c:	4812      	ldr	r0, [pc, #72]	; (8008f68 <HAL_ETH_RxAllocateCallback+0x54>)
 8008f1e:	f004 fdfd 	bl	800db1c <memp_malloc_pool>
 8008f22:	60f8      	str	r0, [r7, #12]
  if (p)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d014      	beq.n	8008f54 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f103 0220 	add.w	r2, r3, #32
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	4a0d      	ldr	r2, [pc, #52]	; (8008f6c <HAL_ETH_RxAllocateCallback+0x58>)
 8008f38:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008f42:	9201      	str	r2, [sp, #4]
 8008f44:	9300      	str	r3, [sp, #0]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2241      	movs	r2, #65	; 0x41
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	f005 fb67 	bl	800e620 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8008f52:	e005      	b.n	8008f60 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8008f54:	4b06      	ldr	r3, [pc, #24]	; (8008f70 <HAL_ETH_RxAllocateCallback+0x5c>)
 8008f56:	2201      	movs	r2, #1
 8008f58:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	601a      	str	r2, [r3, #0]
}
 8008f60:	bf00      	nop
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	0801aec4 	.word	0x0801aec4
 8008f6c:	08008b8d 	.word	0x08008b8d
 8008f70:	20008e60 	.word	0x20008e60

08008f74 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b088      	sub	sp, #32
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	607a      	str	r2, [r7, #4]
 8008f80:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	3b20      	subs	r3, #32
 8008f92:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	2200      	movs	r2, #0
 8008f98:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	887a      	ldrh	r2, [r7, #2]
 8008fa4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d103      	bne.n	8008fb6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	69fa      	ldr	r2, [r7, #28]
 8008fb2:	601a      	str	r2, [r3, #0]
 8008fb4:	e003      	b.n	8008fbe <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	69fa      	ldr	r2, [r7, #28]
 8008fbc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	69fa      	ldr	r2, [r7, #28]
 8008fc2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	61fb      	str	r3, [r7, #28]
 8008fca:	e009      	b.n	8008fe0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	891a      	ldrh	r2, [r3, #8]
 8008fd0:	887b      	ldrh	r3, [r7, #2]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	61fb      	str	r3, [r7, #28]
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1f2      	bne.n	8008fcc <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8008fe6:	887b      	ldrh	r3, [r7, #2]
 8008fe8:	4619      	mov	r1, r3
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7ff fb2c 	bl	8008648 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8008ff0:	bf00      	nop
 8008ff2:	3720      	adds	r7, #32
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f005 fcc7 	bl	800e994 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8009006:	bf00      	nop
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800900e:	b480      	push	{r7}
 8009010:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009012:	bf00      	nop
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800901c:	b480      	push	{r7}
 800901e:	b085      	sub	sp, #20
 8009020:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009022:	f3ef 8305 	mrs	r3, IPSR
 8009026:	60bb      	str	r3, [r7, #8]
  return(result);
 8009028:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10f      	bne.n	800904e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800902e:	f3ef 8310 	mrs	r3, PRIMASK
 8009032:	607b      	str	r3, [r7, #4]
  return(result);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d105      	bne.n	8009046 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800903a:	f3ef 8311 	mrs	r3, BASEPRI
 800903e:	603b      	str	r3, [r7, #0]
  return(result);
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d007      	beq.n	8009056 <osKernelInitialize+0x3a>
 8009046:	4b0e      	ldr	r3, [pc, #56]	; (8009080 <osKernelInitialize+0x64>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2b02      	cmp	r3, #2
 800904c:	d103      	bne.n	8009056 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800904e:	f06f 0305 	mvn.w	r3, #5
 8009052:	60fb      	str	r3, [r7, #12]
 8009054:	e00c      	b.n	8009070 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009056:	4b0a      	ldr	r3, [pc, #40]	; (8009080 <osKernelInitialize+0x64>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d105      	bne.n	800906a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800905e:	4b08      	ldr	r3, [pc, #32]	; (8009080 <osKernelInitialize+0x64>)
 8009060:	2201      	movs	r2, #1
 8009062:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009064:	2300      	movs	r3, #0
 8009066:	60fb      	str	r3, [r7, #12]
 8009068:	e002      	b.n	8009070 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800906a:	f04f 33ff 	mov.w	r3, #4294967295
 800906e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009070:	68fb      	ldr	r3, [r7, #12]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3714      	adds	r7, #20
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop
 8009080:	20008f74 	.word	0x20008f74

08009084 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800908a:	f3ef 8305 	mrs	r3, IPSR
 800908e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009090:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009092:	2b00      	cmp	r3, #0
 8009094:	d10f      	bne.n	80090b6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009096:	f3ef 8310 	mrs	r3, PRIMASK
 800909a:	607b      	str	r3, [r7, #4]
  return(result);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d105      	bne.n	80090ae <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80090a2:	f3ef 8311 	mrs	r3, BASEPRI
 80090a6:	603b      	str	r3, [r7, #0]
  return(result);
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d007      	beq.n	80090be <osKernelStart+0x3a>
 80090ae:	4b0f      	ldr	r3, [pc, #60]	; (80090ec <osKernelStart+0x68>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	d103      	bne.n	80090be <osKernelStart+0x3a>
    stat = osErrorISR;
 80090b6:	f06f 0305 	mvn.w	r3, #5
 80090ba:	60fb      	str	r3, [r7, #12]
 80090bc:	e010      	b.n	80090e0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80090be:	4b0b      	ldr	r3, [pc, #44]	; (80090ec <osKernelStart+0x68>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d109      	bne.n	80090da <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80090c6:	f7ff ffa2 	bl	800900e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80090ca:	4b08      	ldr	r3, [pc, #32]	; (80090ec <osKernelStart+0x68>)
 80090cc:	2202      	movs	r2, #2
 80090ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80090d0:	f002 f8f0 	bl	800b2b4 <vTaskStartScheduler>
      stat = osOK;
 80090d4:	2300      	movs	r3, #0
 80090d6:	60fb      	str	r3, [r7, #12]
 80090d8:	e002      	b.n	80090e0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80090da:	f04f 33ff 	mov.w	r3, #4294967295
 80090de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80090e0:	68fb      	ldr	r3, [r7, #12]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	20008f74 	.word	0x20008f74

080090f0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090f6:	f3ef 8305 	mrs	r3, IPSR
 80090fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80090fc:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d10f      	bne.n	8009122 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009102:	f3ef 8310 	mrs	r3, PRIMASK
 8009106:	607b      	str	r3, [r7, #4]
  return(result);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d105      	bne.n	800911a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800910e:	f3ef 8311 	mrs	r3, BASEPRI
 8009112:	603b      	str	r3, [r7, #0]
  return(result);
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d007      	beq.n	800912a <osKernelGetTickCount+0x3a>
 800911a:	4b08      	ldr	r3, [pc, #32]	; (800913c <osKernelGetTickCount+0x4c>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2b02      	cmp	r3, #2
 8009120:	d103      	bne.n	800912a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8009122:	f002 f9ef 	bl	800b504 <xTaskGetTickCountFromISR>
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	e002      	b.n	8009130 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800912a:	f002 f9db 	bl	800b4e4 <xTaskGetTickCount>
 800912e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8009130:	68fb      	ldr	r3, [r7, #12]
}
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	20008f74 	.word	0x20008f74

08009140 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009140:	b580      	push	{r7, lr}
 8009142:	b090      	sub	sp, #64	; 0x40
 8009144:	af04      	add	r7, sp, #16
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800914c:	2300      	movs	r3, #0
 800914e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009150:	f3ef 8305 	mrs	r3, IPSR
 8009154:	61fb      	str	r3, [r7, #28]
  return(result);
 8009156:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009158:	2b00      	cmp	r3, #0
 800915a:	f040 808f 	bne.w	800927c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800915e:	f3ef 8310 	mrs	r3, PRIMASK
 8009162:	61bb      	str	r3, [r7, #24]
  return(result);
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d105      	bne.n	8009176 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800916a:	f3ef 8311 	mrs	r3, BASEPRI
 800916e:	617b      	str	r3, [r7, #20]
  return(result);
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d003      	beq.n	800917e <osThreadNew+0x3e>
 8009176:	4b44      	ldr	r3, [pc, #272]	; (8009288 <osThreadNew+0x148>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2b02      	cmp	r3, #2
 800917c:	d07e      	beq.n	800927c <osThreadNew+0x13c>
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d07b      	beq.n	800927c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009184:	2380      	movs	r3, #128	; 0x80
 8009186:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009188:	2318      	movs	r3, #24
 800918a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800918c:	2300      	movs	r3, #0
 800918e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009190:	f04f 33ff 	mov.w	r3, #4294967295
 8009194:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d045      	beq.n	8009228 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d002      	beq.n	80091aa <osThreadNew+0x6a>
        name = attr->name;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	699b      	ldr	r3, [r3, #24]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d002      	beq.n	80091b8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	699b      	ldr	r3, [r3, #24]
 80091b6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80091b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d008      	beq.n	80091d0 <osThreadNew+0x90>
 80091be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c0:	2b38      	cmp	r3, #56	; 0x38
 80091c2:	d805      	bhi.n	80091d0 <osThreadNew+0x90>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	f003 0301 	and.w	r3, r3, #1
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d001      	beq.n	80091d4 <osThreadNew+0x94>
        return (NULL);
 80091d0:	2300      	movs	r3, #0
 80091d2:	e054      	b.n	800927e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	695b      	ldr	r3, [r3, #20]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d003      	beq.n	80091e4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	695b      	ldr	r3, [r3, #20]
 80091e0:	089b      	lsrs	r3, r3, #2
 80091e2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00e      	beq.n	800920a <osThreadNew+0xca>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	2b5b      	cmp	r3, #91	; 0x5b
 80091f2:	d90a      	bls.n	800920a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d006      	beq.n	800920a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	695b      	ldr	r3, [r3, #20]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d002      	beq.n	800920a <osThreadNew+0xca>
        mem = 1;
 8009204:	2301      	movs	r3, #1
 8009206:	623b      	str	r3, [r7, #32]
 8009208:	e010      	b.n	800922c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d10c      	bne.n	800922c <osThreadNew+0xec>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d108      	bne.n	800922c <osThreadNew+0xec>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d104      	bne.n	800922c <osThreadNew+0xec>
          mem = 0;
 8009222:	2300      	movs	r3, #0
 8009224:	623b      	str	r3, [r7, #32]
 8009226:	e001      	b.n	800922c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8009228:	2300      	movs	r3, #0
 800922a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800922c:	6a3b      	ldr	r3, [r7, #32]
 800922e:	2b01      	cmp	r3, #1
 8009230:	d110      	bne.n	8009254 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800923a:	9202      	str	r2, [sp, #8]
 800923c:	9301      	str	r3, [sp, #4]
 800923e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009246:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009248:	68f8      	ldr	r0, [r7, #12]
 800924a:	f001 fe53 	bl	800aef4 <xTaskCreateStatic>
 800924e:	4603      	mov	r3, r0
 8009250:	613b      	str	r3, [r7, #16]
 8009252:	e013      	b.n	800927c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8009254:	6a3b      	ldr	r3, [r7, #32]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d110      	bne.n	800927c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800925a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925c:	b29a      	uxth	r2, r3
 800925e:	f107 0310 	add.w	r3, r7, #16
 8009262:	9301      	str	r3, [sp, #4]
 8009264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009266:	9300      	str	r3, [sp, #0]
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f001 fea4 	bl	800afba <xTaskCreate>
 8009272:	4603      	mov	r3, r0
 8009274:	2b01      	cmp	r3, #1
 8009276:	d001      	beq.n	800927c <osThreadNew+0x13c>
          hTask = NULL;
 8009278:	2300      	movs	r3, #0
 800927a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800927c:	693b      	ldr	r3, [r7, #16]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3730      	adds	r7, #48	; 0x30
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	20008f74 	.word	0x20008f74

0800928c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800928c:	b580      	push	{r7, lr}
 800928e:	b086      	sub	sp, #24
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009294:	f3ef 8305 	mrs	r3, IPSR
 8009298:	613b      	str	r3, [r7, #16]
  return(result);
 800929a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10f      	bne.n	80092c0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092a0:	f3ef 8310 	mrs	r3, PRIMASK
 80092a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d105      	bne.n	80092b8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80092ac:	f3ef 8311 	mrs	r3, BASEPRI
 80092b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d007      	beq.n	80092c8 <osDelay+0x3c>
 80092b8:	4b0a      	ldr	r3, [pc, #40]	; (80092e4 <osDelay+0x58>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2b02      	cmp	r3, #2
 80092be:	d103      	bne.n	80092c8 <osDelay+0x3c>
    stat = osErrorISR;
 80092c0:	f06f 0305 	mvn.w	r3, #5
 80092c4:	617b      	str	r3, [r7, #20]
 80092c6:	e007      	b.n	80092d8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80092c8:	2300      	movs	r3, #0
 80092ca:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d002      	beq.n	80092d8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f001 ffb8 	bl	800b248 <vTaskDelay>
    }
  }

  return (stat);
 80092d8:	697b      	ldr	r3, [r7, #20]
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3718      	adds	r7, #24
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	20008f74 	.word	0x20008f74

080092e8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b08a      	sub	sp, #40	; 0x28
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80092f0:	2300      	movs	r3, #0
 80092f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092f4:	f3ef 8305 	mrs	r3, IPSR
 80092f8:	613b      	str	r3, [r7, #16]
  return(result);
 80092fa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f040 8085 	bne.w	800940c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009302:	f3ef 8310 	mrs	r3, PRIMASK
 8009306:	60fb      	str	r3, [r7, #12]
  return(result);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d105      	bne.n	800931a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800930e:	f3ef 8311 	mrs	r3, BASEPRI
 8009312:	60bb      	str	r3, [r7, #8]
  return(result);
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d003      	beq.n	8009322 <osMutexNew+0x3a>
 800931a:	4b3f      	ldr	r3, [pc, #252]	; (8009418 <osMutexNew+0x130>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2b02      	cmp	r3, #2
 8009320:	d074      	beq.n	800940c <osMutexNew+0x124>
    if (attr != NULL) {
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d003      	beq.n	8009330 <osMutexNew+0x48>
      type = attr->attr_bits;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	623b      	str	r3, [r7, #32]
 800932e:	e001      	b.n	8009334 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8009330:	2300      	movs	r3, #0
 8009332:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009334:	6a3b      	ldr	r3, [r7, #32]
 8009336:	f003 0301 	and.w	r3, r3, #1
 800933a:	2b00      	cmp	r3, #0
 800933c:	d002      	beq.n	8009344 <osMutexNew+0x5c>
      rmtx = 1U;
 800933e:	2301      	movs	r3, #1
 8009340:	61fb      	str	r3, [r7, #28]
 8009342:	e001      	b.n	8009348 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8009344:	2300      	movs	r3, #0
 8009346:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009348:	6a3b      	ldr	r3, [r7, #32]
 800934a:	f003 0308 	and.w	r3, r3, #8
 800934e:	2b00      	cmp	r3, #0
 8009350:	d15c      	bne.n	800940c <osMutexNew+0x124>
      mem = -1;
 8009352:	f04f 33ff 	mov.w	r3, #4294967295
 8009356:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d015      	beq.n	800938a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d006      	beq.n	8009374 <osMutexNew+0x8c>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	2b4f      	cmp	r3, #79	; 0x4f
 800936c:	d902      	bls.n	8009374 <osMutexNew+0x8c>
          mem = 1;
 800936e:	2301      	movs	r3, #1
 8009370:	61bb      	str	r3, [r7, #24]
 8009372:	e00c      	b.n	800938e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d108      	bne.n	800938e <osMutexNew+0xa6>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d104      	bne.n	800938e <osMutexNew+0xa6>
            mem = 0;
 8009384:	2300      	movs	r3, #0
 8009386:	61bb      	str	r3, [r7, #24]
 8009388:	e001      	b.n	800938e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800938a:	2300      	movs	r3, #0
 800938c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	2b01      	cmp	r3, #1
 8009392:	d112      	bne.n	80093ba <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d007      	beq.n	80093aa <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	4619      	mov	r1, r3
 80093a0:	2004      	movs	r0, #4
 80093a2:	f000 fe1a 	bl	8009fda <xQueueCreateMutexStatic>
 80093a6:	6278      	str	r0, [r7, #36]	; 0x24
 80093a8:	e016      	b.n	80093d8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	4619      	mov	r1, r3
 80093b0:	2001      	movs	r0, #1
 80093b2:	f000 fe12 	bl	8009fda <xQueueCreateMutexStatic>
 80093b6:	6278      	str	r0, [r7, #36]	; 0x24
 80093b8:	e00e      	b.n	80093d8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10b      	bne.n	80093d8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d004      	beq.n	80093d0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80093c6:	2004      	movs	r0, #4
 80093c8:	f000 fdef 	bl	8009faa <xQueueCreateMutex>
 80093cc:	6278      	str	r0, [r7, #36]	; 0x24
 80093ce:	e003      	b.n	80093d8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80093d0:	2001      	movs	r0, #1
 80093d2:	f000 fdea 	bl	8009faa <xQueueCreateMutex>
 80093d6:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80093d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00c      	beq.n	80093f8 <osMutexNew+0x110>
        if (attr != NULL) {
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d003      	beq.n	80093ec <osMutexNew+0x104>
          name = attr->name;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	617b      	str	r3, [r7, #20]
 80093ea:	e001      	b.n	80093f0 <osMutexNew+0x108>
        } else {
          name = NULL;
 80093ec:	2300      	movs	r3, #0
 80093ee:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80093f0:	6979      	ldr	r1, [r7, #20]
 80093f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093f4:	f001 fcf6 	bl	800ade4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80093f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d006      	beq.n	800940c <osMutexNew+0x124>
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d003      	beq.n	800940c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009406:	f043 0301 	orr.w	r3, r3, #1
 800940a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800940c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800940e:	4618      	mov	r0, r3
 8009410:	3728      	adds	r7, #40	; 0x28
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	20008f74 	.word	0x20008f74

0800941c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800941c:	b580      	push	{r7, lr}
 800941e:	b088      	sub	sp, #32
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f023 0301 	bic.w	r3, r3, #1
 800942c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f003 0301 	and.w	r3, r3, #1
 8009434:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8009436:	2300      	movs	r3, #0
 8009438:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800943a:	f3ef 8305 	mrs	r3, IPSR
 800943e:	613b      	str	r3, [r7, #16]
  return(result);
 8009440:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10f      	bne.n	8009466 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009446:	f3ef 8310 	mrs	r3, PRIMASK
 800944a:	60fb      	str	r3, [r7, #12]
  return(result);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d105      	bne.n	800945e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009452:	f3ef 8311 	mrs	r3, BASEPRI
 8009456:	60bb      	str	r3, [r7, #8]
  return(result);
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d007      	beq.n	800946e <osMutexAcquire+0x52>
 800945e:	4b1d      	ldr	r3, [pc, #116]	; (80094d4 <osMutexAcquire+0xb8>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2b02      	cmp	r3, #2
 8009464:	d103      	bne.n	800946e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8009466:	f06f 0305 	mvn.w	r3, #5
 800946a:	61fb      	str	r3, [r7, #28]
 800946c:	e02c      	b.n	80094c8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d103      	bne.n	800947c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8009474:	f06f 0303 	mvn.w	r3, #3
 8009478:	61fb      	str	r3, [r7, #28]
 800947a:	e025      	b.n	80094c8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d011      	beq.n	80094a6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009482:	6839      	ldr	r1, [r7, #0]
 8009484:	69b8      	ldr	r0, [r7, #24]
 8009486:	f000 fdf9 	bl	800a07c <xQueueTakeMutexRecursive>
 800948a:	4603      	mov	r3, r0
 800948c:	2b01      	cmp	r3, #1
 800948e:	d01b      	beq.n	80094c8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d003      	beq.n	800949e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8009496:	f06f 0301 	mvn.w	r3, #1
 800949a:	61fb      	str	r3, [r7, #28]
 800949c:	e014      	b.n	80094c8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800949e:	f06f 0302 	mvn.w	r3, #2
 80094a2:	61fb      	str	r3, [r7, #28]
 80094a4:	e010      	b.n	80094c8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80094a6:	6839      	ldr	r1, [r7, #0]
 80094a8:	69b8      	ldr	r0, [r7, #24]
 80094aa:	f001 f9b3 	bl	800a814 <xQueueSemaphoreTake>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d009      	beq.n	80094c8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d003      	beq.n	80094c2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80094ba:	f06f 0301 	mvn.w	r3, #1
 80094be:	61fb      	str	r3, [r7, #28]
 80094c0:	e002      	b.n	80094c8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80094c2:	f06f 0302 	mvn.w	r3, #2
 80094c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80094c8:	69fb      	ldr	r3, [r7, #28]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3720      	adds	r7, #32
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	20008f74 	.word	0x20008f74

080094d8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80094d8:	b580      	push	{r7, lr}
 80094da:	b088      	sub	sp, #32
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f023 0301 	bic.w	r3, r3, #1
 80094e6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80094f0:	2300      	movs	r3, #0
 80094f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094f4:	f3ef 8305 	mrs	r3, IPSR
 80094f8:	613b      	str	r3, [r7, #16]
  return(result);
 80094fa:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d10f      	bne.n	8009520 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009500:	f3ef 8310 	mrs	r3, PRIMASK
 8009504:	60fb      	str	r3, [r7, #12]
  return(result);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d105      	bne.n	8009518 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800950c:	f3ef 8311 	mrs	r3, BASEPRI
 8009510:	60bb      	str	r3, [r7, #8]
  return(result);
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d007      	beq.n	8009528 <osMutexRelease+0x50>
 8009518:	4b16      	ldr	r3, [pc, #88]	; (8009574 <osMutexRelease+0x9c>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2b02      	cmp	r3, #2
 800951e:	d103      	bne.n	8009528 <osMutexRelease+0x50>
    stat = osErrorISR;
 8009520:	f06f 0305 	mvn.w	r3, #5
 8009524:	61fb      	str	r3, [r7, #28]
 8009526:	e01f      	b.n	8009568 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d103      	bne.n	8009536 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800952e:	f06f 0303 	mvn.w	r3, #3
 8009532:	61fb      	str	r3, [r7, #28]
 8009534:	e018      	b.n	8009568 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d009      	beq.n	8009550 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800953c:	69b8      	ldr	r0, [r7, #24]
 800953e:	f000 fd67 	bl	800a010 <xQueueGiveMutexRecursive>
 8009542:	4603      	mov	r3, r0
 8009544:	2b01      	cmp	r3, #1
 8009546:	d00f      	beq.n	8009568 <osMutexRelease+0x90>
        stat = osErrorResource;
 8009548:	f06f 0302 	mvn.w	r3, #2
 800954c:	61fb      	str	r3, [r7, #28]
 800954e:	e00b      	b.n	8009568 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8009550:	2300      	movs	r3, #0
 8009552:	2200      	movs	r2, #0
 8009554:	2100      	movs	r1, #0
 8009556:	69b8      	ldr	r0, [r7, #24]
 8009558:	f000 fe3a 	bl	800a1d0 <xQueueGenericSend>
 800955c:	4603      	mov	r3, r0
 800955e:	2b01      	cmp	r3, #1
 8009560:	d002      	beq.n	8009568 <osMutexRelease+0x90>
        stat = osErrorResource;
 8009562:	f06f 0302 	mvn.w	r3, #2
 8009566:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8009568:	69fb      	ldr	r3, [r7, #28]
}
 800956a:	4618      	mov	r0, r3
 800956c:	3720      	adds	r7, #32
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	20008f74 	.word	0x20008f74

08009578 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009578:	b580      	push	{r7, lr}
 800957a:	b08c      	sub	sp, #48	; 0x30
 800957c:	af02      	add	r7, sp, #8
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009584:	2300      	movs	r3, #0
 8009586:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009588:	f3ef 8305 	mrs	r3, IPSR
 800958c:	61bb      	str	r3, [r7, #24]
  return(result);
 800958e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009590:	2b00      	cmp	r3, #0
 8009592:	f040 8086 	bne.w	80096a2 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009596:	f3ef 8310 	mrs	r3, PRIMASK
 800959a:	617b      	str	r3, [r7, #20]
  return(result);
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d105      	bne.n	80095ae <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80095a2:	f3ef 8311 	mrs	r3, BASEPRI
 80095a6:	613b      	str	r3, [r7, #16]
  return(result);
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d003      	beq.n	80095b6 <osSemaphoreNew+0x3e>
 80095ae:	4b3f      	ldr	r3, [pc, #252]	; (80096ac <osSemaphoreNew+0x134>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	d075      	beq.n	80096a2 <osSemaphoreNew+0x12a>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d072      	beq.n	80096a2 <osSemaphoreNew+0x12a>
 80095bc:	68ba      	ldr	r2, [r7, #8]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d86e      	bhi.n	80096a2 <osSemaphoreNew+0x12a>
    mem = -1;
 80095c4:	f04f 33ff 	mov.w	r3, #4294967295
 80095c8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d015      	beq.n	80095fc <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d006      	beq.n	80095e6 <osSemaphoreNew+0x6e>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	2b4f      	cmp	r3, #79	; 0x4f
 80095de:	d902      	bls.n	80095e6 <osSemaphoreNew+0x6e>
        mem = 1;
 80095e0:	2301      	movs	r3, #1
 80095e2:	623b      	str	r3, [r7, #32]
 80095e4:	e00c      	b.n	8009600 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d108      	bne.n	8009600 <osSemaphoreNew+0x88>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d104      	bne.n	8009600 <osSemaphoreNew+0x88>
          mem = 0;
 80095f6:	2300      	movs	r3, #0
 80095f8:	623b      	str	r3, [r7, #32]
 80095fa:	e001      	b.n	8009600 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80095fc:	2300      	movs	r3, #0
 80095fe:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8009600:	6a3b      	ldr	r3, [r7, #32]
 8009602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009606:	d04c      	beq.n	80096a2 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2b01      	cmp	r3, #1
 800960c:	d128      	bne.n	8009660 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800960e:	6a3b      	ldr	r3, [r7, #32]
 8009610:	2b01      	cmp	r3, #1
 8009612:	d10a      	bne.n	800962a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	2203      	movs	r2, #3
 800961a:	9200      	str	r2, [sp, #0]
 800961c:	2200      	movs	r2, #0
 800961e:	2100      	movs	r1, #0
 8009620:	2001      	movs	r0, #1
 8009622:	f000 fbc1 	bl	8009da8 <xQueueGenericCreateStatic>
 8009626:	6278      	str	r0, [r7, #36]	; 0x24
 8009628:	e005      	b.n	8009636 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800962a:	2203      	movs	r2, #3
 800962c:	2100      	movs	r1, #0
 800962e:	2001      	movs	r0, #1
 8009630:	f000 fc3c 	bl	8009eac <xQueueGenericCreate>
 8009634:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009638:	2b00      	cmp	r3, #0
 800963a:	d022      	beq.n	8009682 <osSemaphoreNew+0x10a>
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d01f      	beq.n	8009682 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009642:	2300      	movs	r3, #0
 8009644:	2200      	movs	r2, #0
 8009646:	2100      	movs	r1, #0
 8009648:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800964a:	f000 fdc1 	bl	800a1d0 <xQueueGenericSend>
 800964e:	4603      	mov	r3, r0
 8009650:	2b01      	cmp	r3, #1
 8009652:	d016      	beq.n	8009682 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8009654:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009656:	f001 fa77 	bl	800ab48 <vQueueDelete>
            hSemaphore = NULL;
 800965a:	2300      	movs	r3, #0
 800965c:	627b      	str	r3, [r7, #36]	; 0x24
 800965e:	e010      	b.n	8009682 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8009660:	6a3b      	ldr	r3, [r7, #32]
 8009662:	2b01      	cmp	r3, #1
 8009664:	d108      	bne.n	8009678 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	461a      	mov	r2, r3
 800966c:	68b9      	ldr	r1, [r7, #8]
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f000 fd3c 	bl	800a0ec <xQueueCreateCountingSemaphoreStatic>
 8009674:	6278      	str	r0, [r7, #36]	; 0x24
 8009676:	e004      	b.n	8009682 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009678:	68b9      	ldr	r1, [r7, #8]
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	f000 fd71 	bl	800a162 <xQueueCreateCountingSemaphore>
 8009680:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00c      	beq.n	80096a2 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d003      	beq.n	8009696 <osSemaphoreNew+0x11e>
          name = attr->name;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	61fb      	str	r3, [r7, #28]
 8009694:	e001      	b.n	800969a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8009696:	2300      	movs	r3, #0
 8009698:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800969a:	69f9      	ldr	r1, [r7, #28]
 800969c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800969e:	f001 fba1 	bl	800ade4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80096a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3728      	adds	r7, #40	; 0x28
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	20008f74 	.word	0x20008f74

080096b0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b088      	sub	sp, #32
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80096be:	2300      	movs	r3, #0
 80096c0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d103      	bne.n	80096d0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80096c8:	f06f 0303 	mvn.w	r3, #3
 80096cc:	61fb      	str	r3, [r7, #28]
 80096ce:	e04b      	b.n	8009768 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096d0:	f3ef 8305 	mrs	r3, IPSR
 80096d4:	617b      	str	r3, [r7, #20]
  return(result);
 80096d6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10f      	bne.n	80096fc <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096dc:	f3ef 8310 	mrs	r3, PRIMASK
 80096e0:	613b      	str	r3, [r7, #16]
  return(result);
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d105      	bne.n	80096f4 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80096e8:	f3ef 8311 	mrs	r3, BASEPRI
 80096ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d026      	beq.n	8009742 <osSemaphoreAcquire+0x92>
 80096f4:	4b1f      	ldr	r3, [pc, #124]	; (8009774 <osSemaphoreAcquire+0xc4>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2b02      	cmp	r3, #2
 80096fa:	d122      	bne.n	8009742 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d003      	beq.n	800970a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8009702:	f06f 0303 	mvn.w	r3, #3
 8009706:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8009708:	e02d      	b.n	8009766 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800970a:	2300      	movs	r3, #0
 800970c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800970e:	f107 0308 	add.w	r3, r7, #8
 8009712:	461a      	mov	r2, r3
 8009714:	2100      	movs	r1, #0
 8009716:	69b8      	ldr	r0, [r7, #24]
 8009718:	f001 f990 	bl	800aa3c <xQueueReceiveFromISR>
 800971c:	4603      	mov	r3, r0
 800971e:	2b01      	cmp	r3, #1
 8009720:	d003      	beq.n	800972a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8009722:	f06f 0302 	mvn.w	r3, #2
 8009726:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8009728:	e01d      	b.n	8009766 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d01a      	beq.n	8009766 <osSemaphoreAcquire+0xb6>
 8009730:	4b11      	ldr	r3, [pc, #68]	; (8009778 <osSemaphoreAcquire+0xc8>)
 8009732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009736:	601a      	str	r2, [r3, #0]
 8009738:	f3bf 8f4f 	dsb	sy
 800973c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8009740:	e011      	b.n	8009766 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009742:	6839      	ldr	r1, [r7, #0]
 8009744:	69b8      	ldr	r0, [r7, #24]
 8009746:	f001 f865 	bl	800a814 <xQueueSemaphoreTake>
 800974a:	4603      	mov	r3, r0
 800974c:	2b01      	cmp	r3, #1
 800974e:	d00b      	beq.n	8009768 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d003      	beq.n	800975e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8009756:	f06f 0301 	mvn.w	r3, #1
 800975a:	61fb      	str	r3, [r7, #28]
 800975c:	e004      	b.n	8009768 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800975e:	f06f 0302 	mvn.w	r3, #2
 8009762:	61fb      	str	r3, [r7, #28]
 8009764:	e000      	b.n	8009768 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8009766:	bf00      	nop
      }
    }
  }

  return (stat);
 8009768:	69fb      	ldr	r3, [r7, #28]
}
 800976a:	4618      	mov	r0, r3
 800976c:	3720      	adds	r7, #32
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	20008f74 	.word	0x20008f74
 8009778:	e000ed04 	.word	0xe000ed04

0800977c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800977c:	b580      	push	{r7, lr}
 800977e:	b088      	sub	sp, #32
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009788:	2300      	movs	r3, #0
 800978a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d103      	bne.n	800979a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009792:	f06f 0303 	mvn.w	r3, #3
 8009796:	61fb      	str	r3, [r7, #28]
 8009798:	e03e      	b.n	8009818 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800979a:	f3ef 8305 	mrs	r3, IPSR
 800979e:	617b      	str	r3, [r7, #20]
  return(result);
 80097a0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d10f      	bne.n	80097c6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097a6:	f3ef 8310 	mrs	r3, PRIMASK
 80097aa:	613b      	str	r3, [r7, #16]
  return(result);
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d105      	bne.n	80097be <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80097b2:	f3ef 8311 	mrs	r3, BASEPRI
 80097b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d01e      	beq.n	80097fc <osSemaphoreRelease+0x80>
 80097be:	4b19      	ldr	r3, [pc, #100]	; (8009824 <osSemaphoreRelease+0xa8>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2b02      	cmp	r3, #2
 80097c4:	d11a      	bne.n	80097fc <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80097c6:	2300      	movs	r3, #0
 80097c8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80097ca:	f107 0308 	add.w	r3, r7, #8
 80097ce:	4619      	mov	r1, r3
 80097d0:	69b8      	ldr	r0, [r7, #24]
 80097d2:	f000 fea3 	bl	800a51c <xQueueGiveFromISR>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d003      	beq.n	80097e4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80097dc:	f06f 0302 	mvn.w	r3, #2
 80097e0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80097e2:	e018      	b.n	8009816 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d015      	beq.n	8009816 <osSemaphoreRelease+0x9a>
 80097ea:	4b0f      	ldr	r3, [pc, #60]	; (8009828 <osSemaphoreRelease+0xac>)
 80097ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097f0:	601a      	str	r2, [r3, #0]
 80097f2:	f3bf 8f4f 	dsb	sy
 80097f6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80097fa:	e00c      	b.n	8009816 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80097fc:	2300      	movs	r3, #0
 80097fe:	2200      	movs	r2, #0
 8009800:	2100      	movs	r1, #0
 8009802:	69b8      	ldr	r0, [r7, #24]
 8009804:	f000 fce4 	bl	800a1d0 <xQueueGenericSend>
 8009808:	4603      	mov	r3, r0
 800980a:	2b01      	cmp	r3, #1
 800980c:	d004      	beq.n	8009818 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800980e:	f06f 0302 	mvn.w	r3, #2
 8009812:	61fb      	str	r3, [r7, #28]
 8009814:	e000      	b.n	8009818 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009816:	bf00      	nop
    }
  }

  return (stat);
 8009818:	69fb      	ldr	r3, [r7, #28]
}
 800981a:	4618      	mov	r0, r3
 800981c:	3720      	adds	r7, #32
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	20008f74 	.word	0x20008f74
 8009828:	e000ed04 	.word	0xe000ed04

0800982c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800982c:	b580      	push	{r7, lr}
 800982e:	b08c      	sub	sp, #48	; 0x30
 8009830:	af02      	add	r7, sp, #8
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009838:	2300      	movs	r3, #0
 800983a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800983c:	f3ef 8305 	mrs	r3, IPSR
 8009840:	61bb      	str	r3, [r7, #24]
  return(result);
 8009842:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009844:	2b00      	cmp	r3, #0
 8009846:	d16f      	bne.n	8009928 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009848:	f3ef 8310 	mrs	r3, PRIMASK
 800984c:	617b      	str	r3, [r7, #20]
  return(result);
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d105      	bne.n	8009860 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009854:	f3ef 8311 	mrs	r3, BASEPRI
 8009858:	613b      	str	r3, [r7, #16]
  return(result);
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d003      	beq.n	8009868 <osMessageQueueNew+0x3c>
 8009860:	4b34      	ldr	r3, [pc, #208]	; (8009934 <osMessageQueueNew+0x108>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2b02      	cmp	r3, #2
 8009866:	d05f      	beq.n	8009928 <osMessageQueueNew+0xfc>
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d05c      	beq.n	8009928 <osMessageQueueNew+0xfc>
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d059      	beq.n	8009928 <osMessageQueueNew+0xfc>
    mem = -1;
 8009874:	f04f 33ff 	mov.w	r3, #4294967295
 8009878:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d029      	beq.n	80098d4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d012      	beq.n	80098ae <osMessageQueueNew+0x82>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	2b4f      	cmp	r3, #79	; 0x4f
 800988e:	d90e      	bls.n	80098ae <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00a      	beq.n	80098ae <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	695a      	ldr	r2, [r3, #20]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	68b9      	ldr	r1, [r7, #8]
 80098a0:	fb01 f303 	mul.w	r3, r1, r3
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d302      	bcc.n	80098ae <osMessageQueueNew+0x82>
        mem = 1;
 80098a8:	2301      	movs	r3, #1
 80098aa:	623b      	str	r3, [r7, #32]
 80098ac:	e014      	b.n	80098d8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d110      	bne.n	80098d8 <osMessageQueueNew+0xac>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d10c      	bne.n	80098d8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d108      	bne.n	80098d8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	695b      	ldr	r3, [r3, #20]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d104      	bne.n	80098d8 <osMessageQueueNew+0xac>
          mem = 0;
 80098ce:	2300      	movs	r3, #0
 80098d0:	623b      	str	r3, [r7, #32]
 80098d2:	e001      	b.n	80098d8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80098d4:	2300      	movs	r3, #0
 80098d6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80098d8:	6a3b      	ldr	r3, [r7, #32]
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d10b      	bne.n	80098f6 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	691a      	ldr	r2, [r3, #16]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	2100      	movs	r1, #0
 80098e8:	9100      	str	r1, [sp, #0]
 80098ea:	68b9      	ldr	r1, [r7, #8]
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f000 fa5b 	bl	8009da8 <xQueueGenericCreateStatic>
 80098f2:	6278      	str	r0, [r7, #36]	; 0x24
 80098f4:	e008      	b.n	8009908 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80098f6:	6a3b      	ldr	r3, [r7, #32]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d105      	bne.n	8009908 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80098fc:	2200      	movs	r2, #0
 80098fe:	68b9      	ldr	r1, [r7, #8]
 8009900:	68f8      	ldr	r0, [r7, #12]
 8009902:	f000 fad3 	bl	8009eac <xQueueGenericCreate>
 8009906:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00c      	beq.n	8009928 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d003      	beq.n	800991c <osMessageQueueNew+0xf0>
        name = attr->name;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	61fb      	str	r3, [r7, #28]
 800991a:	e001      	b.n	8009920 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800991c:	2300      	movs	r3, #0
 800991e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8009920:	69f9      	ldr	r1, [r7, #28]
 8009922:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009924:	f001 fa5e 	bl	800ade4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800992a:	4618      	mov	r0, r3
 800992c:	3728      	adds	r7, #40	; 0x28
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	20008f74 	.word	0x20008f74

08009938 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009938:	b580      	push	{r7, lr}
 800993a:	b08a      	sub	sp, #40	; 0x28
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	603b      	str	r3, [r7, #0]
 8009944:	4613      	mov	r3, r2
 8009946:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800994c:	2300      	movs	r3, #0
 800994e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009950:	f3ef 8305 	mrs	r3, IPSR
 8009954:	61fb      	str	r3, [r7, #28]
  return(result);
 8009956:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10f      	bne.n	800997c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800995c:	f3ef 8310 	mrs	r3, PRIMASK
 8009960:	61bb      	str	r3, [r7, #24]
  return(result);
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d105      	bne.n	8009974 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009968:	f3ef 8311 	mrs	r3, BASEPRI
 800996c:	617b      	str	r3, [r7, #20]
  return(result);
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d02c      	beq.n	80099ce <osMessageQueuePut+0x96>
 8009974:	4b28      	ldr	r3, [pc, #160]	; (8009a18 <osMessageQueuePut+0xe0>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b02      	cmp	r3, #2
 800997a:	d128      	bne.n	80099ce <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800997c:	6a3b      	ldr	r3, [r7, #32]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d005      	beq.n	800998e <osMessageQueuePut+0x56>
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d002      	beq.n	800998e <osMessageQueuePut+0x56>
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d003      	beq.n	8009996 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800998e:	f06f 0303 	mvn.w	r3, #3
 8009992:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009994:	e039      	b.n	8009a0a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8009996:	2300      	movs	r3, #0
 8009998:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800999a:	f107 0210 	add.w	r2, r7, #16
 800999e:	2300      	movs	r3, #0
 80099a0:	68b9      	ldr	r1, [r7, #8]
 80099a2:	6a38      	ldr	r0, [r7, #32]
 80099a4:	f000 fd1a 	bl	800a3dc <xQueueGenericSendFromISR>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d003      	beq.n	80099b6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80099ae:	f06f 0302 	mvn.w	r3, #2
 80099b2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80099b4:	e029      	b.n	8009a0a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d026      	beq.n	8009a0a <osMessageQueuePut+0xd2>
 80099bc:	4b17      	ldr	r3, [pc, #92]	; (8009a1c <osMessageQueuePut+0xe4>)
 80099be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099c2:	601a      	str	r2, [r3, #0]
 80099c4:	f3bf 8f4f 	dsb	sy
 80099c8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80099cc:	e01d      	b.n	8009a0a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80099ce:	6a3b      	ldr	r3, [r7, #32]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d002      	beq.n	80099da <osMessageQueuePut+0xa2>
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d103      	bne.n	80099e2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80099da:	f06f 0303 	mvn.w	r3, #3
 80099de:	627b      	str	r3, [r7, #36]	; 0x24
 80099e0:	e014      	b.n	8009a0c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80099e2:	2300      	movs	r3, #0
 80099e4:	683a      	ldr	r2, [r7, #0]
 80099e6:	68b9      	ldr	r1, [r7, #8]
 80099e8:	6a38      	ldr	r0, [r7, #32]
 80099ea:	f000 fbf1 	bl	800a1d0 <xQueueGenericSend>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d00b      	beq.n	8009a0c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d003      	beq.n	8009a02 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80099fa:	f06f 0301 	mvn.w	r3, #1
 80099fe:	627b      	str	r3, [r7, #36]	; 0x24
 8009a00:	e004      	b.n	8009a0c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8009a02:	f06f 0302 	mvn.w	r3, #2
 8009a06:	627b      	str	r3, [r7, #36]	; 0x24
 8009a08:	e000      	b.n	8009a0c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009a0a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3728      	adds	r7, #40	; 0x28
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	20008f74 	.word	0x20008f74
 8009a1c:	e000ed04 	.word	0xe000ed04

08009a20 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b08a      	sub	sp, #40	; 0x28
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
 8009a2c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a36:	f3ef 8305 	mrs	r3, IPSR
 8009a3a:	61fb      	str	r3, [r7, #28]
  return(result);
 8009a3c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10f      	bne.n	8009a62 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a42:	f3ef 8310 	mrs	r3, PRIMASK
 8009a46:	61bb      	str	r3, [r7, #24]
  return(result);
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d105      	bne.n	8009a5a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009a4e:	f3ef 8311 	mrs	r3, BASEPRI
 8009a52:	617b      	str	r3, [r7, #20]
  return(result);
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d02c      	beq.n	8009ab4 <osMessageQueueGet+0x94>
 8009a5a:	4b28      	ldr	r3, [pc, #160]	; (8009afc <osMessageQueueGet+0xdc>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	d128      	bne.n	8009ab4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009a62:	6a3b      	ldr	r3, [r7, #32]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d005      	beq.n	8009a74 <osMessageQueueGet+0x54>
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d002      	beq.n	8009a74 <osMessageQueueGet+0x54>
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d003      	beq.n	8009a7c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8009a74:	f06f 0303 	mvn.w	r3, #3
 8009a78:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009a7a:	e038      	b.n	8009aee <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009a80:	f107 0310 	add.w	r3, r7, #16
 8009a84:	461a      	mov	r2, r3
 8009a86:	68b9      	ldr	r1, [r7, #8]
 8009a88:	6a38      	ldr	r0, [r7, #32]
 8009a8a:	f000 ffd7 	bl	800aa3c <xQueueReceiveFromISR>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d003      	beq.n	8009a9c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8009a94:	f06f 0302 	mvn.w	r3, #2
 8009a98:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009a9a:	e028      	b.n	8009aee <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d025      	beq.n	8009aee <osMessageQueueGet+0xce>
 8009aa2:	4b17      	ldr	r3, [pc, #92]	; (8009b00 <osMessageQueueGet+0xe0>)
 8009aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aa8:	601a      	str	r2, [r3, #0]
 8009aaa:	f3bf 8f4f 	dsb	sy
 8009aae:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009ab2:	e01c      	b.n	8009aee <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009ab4:	6a3b      	ldr	r3, [r7, #32]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d002      	beq.n	8009ac0 <osMessageQueueGet+0xa0>
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d103      	bne.n	8009ac8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8009ac0:	f06f 0303 	mvn.w	r3, #3
 8009ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8009ac6:	e013      	b.n	8009af0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009ac8:	683a      	ldr	r2, [r7, #0]
 8009aca:	68b9      	ldr	r1, [r7, #8]
 8009acc:	6a38      	ldr	r0, [r7, #32]
 8009ace:	f000 fdbb 	bl	800a648 <xQueueReceive>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d00b      	beq.n	8009af0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d003      	beq.n	8009ae6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8009ade:	f06f 0301 	mvn.w	r3, #1
 8009ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8009ae4:	e004      	b.n	8009af0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8009ae6:	f06f 0302 	mvn.w	r3, #2
 8009aea:	627b      	str	r3, [r7, #36]	; 0x24
 8009aec:	e000      	b.n	8009af0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009aee:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3728      	adds	r7, #40	; 0x28
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	20008f74 	.word	0x20008f74
 8009b00:	e000ed04 	.word	0xe000ed04

08009b04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	4a07      	ldr	r2, [pc, #28]	; (8009b30 <vApplicationGetIdleTaskMemory+0x2c>)
 8009b14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	4a06      	ldr	r2, [pc, #24]	; (8009b34 <vApplicationGetIdleTaskMemory+0x30>)
 8009b1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2280      	movs	r2, #128	; 0x80
 8009b20:	601a      	str	r2, [r3, #0]
}
 8009b22:	bf00      	nop
 8009b24:	3714      	adds	r7, #20
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr
 8009b2e:	bf00      	nop
 8009b30:	20008f78 	.word	0x20008f78
 8009b34:	20008fd4 	.word	0x20008fd4

08009b38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009b38:	b480      	push	{r7}
 8009b3a:	b085      	sub	sp, #20
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	4a07      	ldr	r2, [pc, #28]	; (8009b64 <vApplicationGetTimerTaskMemory+0x2c>)
 8009b48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	4a06      	ldr	r2, [pc, #24]	; (8009b68 <vApplicationGetTimerTaskMemory+0x30>)
 8009b4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b56:	601a      	str	r2, [r3, #0]
}
 8009b58:	bf00      	nop
 8009b5a:	3714      	adds	r7, #20
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr
 8009b64:	200091d4 	.word	0x200091d4
 8009b68:	20009230 	.word	0x20009230

08009b6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f103 0208 	add.w	r2, r3, #8
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f04f 32ff 	mov.w	r2, #4294967295
 8009b84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f103 0208 	add.w	r2, r3, #8
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f103 0208 	add.w	r2, r3, #8
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009ba0:	bf00      	nop
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009bba:	bf00      	nop
 8009bbc:	370c      	adds	r7, #12
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr

08009bc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009bc6:	b480      	push	{r7}
 8009bc8:	b085      	sub	sp, #20
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	689a      	ldr	r2, [r3, #8]
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	683a      	ldr	r2, [r7, #0]
 8009bea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	1c5a      	adds	r2, r3, #1
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	601a      	str	r2, [r3, #0]
}
 8009c02:	bf00      	nop
 8009c04:	3714      	adds	r7, #20
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr

08009c0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c0e:	b480      	push	{r7}
 8009c10:	b085      	sub	sp, #20
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
 8009c16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c24:	d103      	bne.n	8009c2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	691b      	ldr	r3, [r3, #16]
 8009c2a:	60fb      	str	r3, [r7, #12]
 8009c2c:	e00c      	b.n	8009c48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	3308      	adds	r3, #8
 8009c32:	60fb      	str	r3, [r7, #12]
 8009c34:	e002      	b.n	8009c3c <vListInsert+0x2e>
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	60fb      	str	r3, [r7, #12]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	68ba      	ldr	r2, [r7, #8]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d2f6      	bcs.n	8009c36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	685a      	ldr	r2, [r3, #4]
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	683a      	ldr	r2, [r7, #0]
 8009c56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	68fa      	ldr	r2, [r7, #12]
 8009c5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	683a      	ldr	r2, [r7, #0]
 8009c62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	1c5a      	adds	r2, r3, #1
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	601a      	str	r2, [r3, #0]
}
 8009c74:	bf00      	nop
 8009c76:	3714      	adds	r7, #20
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c80:	b480      	push	{r7}
 8009c82:	b085      	sub	sp, #20
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	691b      	ldr	r3, [r3, #16]
 8009c8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	6892      	ldr	r2, [r2, #8]
 8009c96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	6852      	ldr	r2, [r2, #4]
 8009ca0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d103      	bne.n	8009cb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	689a      	ldr	r2, [r3, #8]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	1e5a      	subs	r2, r3, #1
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3714      	adds	r7, #20
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d10c      	bne.n	8009d02 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cec:	b672      	cpsid	i
 8009cee:	f383 8811 	msr	BASEPRI, r3
 8009cf2:	f3bf 8f6f 	isb	sy
 8009cf6:	f3bf 8f4f 	dsb	sy
 8009cfa:	b662      	cpsie	i
 8009cfc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009cfe:	bf00      	nop
 8009d00:	e7fe      	b.n	8009d00 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8009d02:	f002 fda3 	bl	800c84c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d0e:	68f9      	ldr	r1, [r7, #12]
 8009d10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d12:	fb01 f303 	mul.w	r3, r1, r3
 8009d16:	441a      	add	r2, r3
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d32:	3b01      	subs	r3, #1
 8009d34:	68f9      	ldr	r1, [r7, #12]
 8009d36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d38:	fb01 f303 	mul.w	r3, r1, r3
 8009d3c:	441a      	add	r2, r3
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	22ff      	movs	r2, #255	; 0xff
 8009d46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	22ff      	movs	r2, #255	; 0xff
 8009d4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d114      	bne.n	8009d82 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	691b      	ldr	r3, [r3, #16]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d01a      	beq.n	8009d96 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	3310      	adds	r3, #16
 8009d64:	4618      	mov	r0, r3
 8009d66:	f001 fd4f 	bl	800b808 <xTaskRemoveFromEventList>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d012      	beq.n	8009d96 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009d70:	4b0c      	ldr	r3, [pc, #48]	; (8009da4 <xQueueGenericReset+0xd0>)
 8009d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d76:	601a      	str	r2, [r3, #0]
 8009d78:	f3bf 8f4f 	dsb	sy
 8009d7c:	f3bf 8f6f 	isb	sy
 8009d80:	e009      	b.n	8009d96 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	3310      	adds	r3, #16
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7ff fef0 	bl	8009b6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	3324      	adds	r3, #36	; 0x24
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7ff feeb 	bl	8009b6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009d96:	f002 fd8d 	bl	800c8b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009d9a:	2301      	movs	r3, #1
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3710      	adds	r7, #16
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	e000ed04 	.word	0xe000ed04

08009da8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b08e      	sub	sp, #56	; 0x38
 8009dac:	af02      	add	r7, sp, #8
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	60b9      	str	r1, [r7, #8]
 8009db2:	607a      	str	r2, [r7, #4]
 8009db4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d10c      	bne.n	8009dd6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8009dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc0:	b672      	cpsid	i
 8009dc2:	f383 8811 	msr	BASEPRI, r3
 8009dc6:	f3bf 8f6f 	isb	sy
 8009dca:	f3bf 8f4f 	dsb	sy
 8009dce:	b662      	cpsie	i
 8009dd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009dd2:	bf00      	nop
 8009dd4:	e7fe      	b.n	8009dd4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d10c      	bne.n	8009df6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8009ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de0:	b672      	cpsid	i
 8009de2:	f383 8811 	msr	BASEPRI, r3
 8009de6:	f3bf 8f6f 	isb	sy
 8009dea:	f3bf 8f4f 	dsb	sy
 8009dee:	b662      	cpsie	i
 8009df0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009df2:	bf00      	nop
 8009df4:	e7fe      	b.n	8009df4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d002      	beq.n	8009e02 <xQueueGenericCreateStatic+0x5a>
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d001      	beq.n	8009e06 <xQueueGenericCreateStatic+0x5e>
 8009e02:	2301      	movs	r3, #1
 8009e04:	e000      	b.n	8009e08 <xQueueGenericCreateStatic+0x60>
 8009e06:	2300      	movs	r3, #0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10c      	bne.n	8009e26 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8009e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e10:	b672      	cpsid	i
 8009e12:	f383 8811 	msr	BASEPRI, r3
 8009e16:	f3bf 8f6f 	isb	sy
 8009e1a:	f3bf 8f4f 	dsb	sy
 8009e1e:	b662      	cpsie	i
 8009e20:	623b      	str	r3, [r7, #32]
}
 8009e22:	bf00      	nop
 8009e24:	e7fe      	b.n	8009e24 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d102      	bne.n	8009e32 <xQueueGenericCreateStatic+0x8a>
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d101      	bne.n	8009e36 <xQueueGenericCreateStatic+0x8e>
 8009e32:	2301      	movs	r3, #1
 8009e34:	e000      	b.n	8009e38 <xQueueGenericCreateStatic+0x90>
 8009e36:	2300      	movs	r3, #0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10c      	bne.n	8009e56 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8009e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e40:	b672      	cpsid	i
 8009e42:	f383 8811 	msr	BASEPRI, r3
 8009e46:	f3bf 8f6f 	isb	sy
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	b662      	cpsie	i
 8009e50:	61fb      	str	r3, [r7, #28]
}
 8009e52:	bf00      	nop
 8009e54:	e7fe      	b.n	8009e54 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009e56:	2350      	movs	r3, #80	; 0x50
 8009e58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	2b50      	cmp	r3, #80	; 0x50
 8009e5e:	d00c      	beq.n	8009e7a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8009e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e64:	b672      	cpsid	i
 8009e66:	f383 8811 	msr	BASEPRI, r3
 8009e6a:	f3bf 8f6f 	isb	sy
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	b662      	cpsie	i
 8009e74:	61bb      	str	r3, [r7, #24]
}
 8009e76:	bf00      	nop
 8009e78:	e7fe      	b.n	8009e78 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009e7a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d00d      	beq.n	8009ea2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e88:	2201      	movs	r2, #1
 8009e8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e8e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e94:	9300      	str	r3, [sp, #0]
 8009e96:	4613      	mov	r3, r2
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	68b9      	ldr	r1, [r7, #8]
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f000 f847 	bl	8009f30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3730      	adds	r7, #48	; 0x30
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b08a      	sub	sp, #40	; 0x28
 8009eb0:	af02      	add	r7, sp, #8
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d10c      	bne.n	8009eda <xQueueGenericCreate+0x2e>
	__asm volatile
 8009ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec4:	b672      	cpsid	i
 8009ec6:	f383 8811 	msr	BASEPRI, r3
 8009eca:	f3bf 8f6f 	isb	sy
 8009ece:	f3bf 8f4f 	dsb	sy
 8009ed2:	b662      	cpsie	i
 8009ed4:	613b      	str	r3, [r7, #16]
}
 8009ed6:	bf00      	nop
 8009ed8:	e7fe      	b.n	8009ed8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d102      	bne.n	8009ee6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	61fb      	str	r3, [r7, #28]
 8009ee4:	e004      	b.n	8009ef0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	68ba      	ldr	r2, [r7, #8]
 8009eea:	fb02 f303 	mul.w	r3, r2, r3
 8009eee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	3350      	adds	r3, #80	; 0x50
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f002 fdd5 	bl	800caa4 <pvPortMalloc>
 8009efa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009efc:	69bb      	ldr	r3, [r7, #24]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d011      	beq.n	8009f26 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	3350      	adds	r3, #80	; 0x50
 8009f0a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f14:	79fa      	ldrb	r2, [r7, #7]
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	9300      	str	r3, [sp, #0]
 8009f1a:	4613      	mov	r3, r2
 8009f1c:	697a      	ldr	r2, [r7, #20]
 8009f1e:	68b9      	ldr	r1, [r7, #8]
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	f000 f805 	bl	8009f30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f26:	69bb      	ldr	r3, [r7, #24]
	}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3720      	adds	r7, #32
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	607a      	str	r2, [r7, #4]
 8009f3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d103      	bne.n	8009f4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009f44:	69bb      	ldr	r3, [r7, #24]
 8009f46:	69ba      	ldr	r2, [r7, #24]
 8009f48:	601a      	str	r2, [r3, #0]
 8009f4a:	e002      	b.n	8009f52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f5e:	2101      	movs	r1, #1
 8009f60:	69b8      	ldr	r0, [r7, #24]
 8009f62:	f7ff feb7 	bl	8009cd4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009f66:	69bb      	ldr	r3, [r7, #24]
 8009f68:	78fa      	ldrb	r2, [r7, #3]
 8009f6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009f6e:	bf00      	nop
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b082      	sub	sp, #8
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d00e      	beq.n	8009fa2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009f96:	2300      	movs	r3, #0
 8009f98:	2200      	movs	r2, #0
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 f917 	bl	800a1d0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009fa2:	bf00      	nop
 8009fa4:	3708      	adds	r7, #8
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b086      	sub	sp, #24
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	617b      	str	r3, [r7, #20]
 8009fb8:	2300      	movs	r3, #0
 8009fba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009fbc:	79fb      	ldrb	r3, [r7, #7]
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	6939      	ldr	r1, [r7, #16]
 8009fc2:	6978      	ldr	r0, [r7, #20]
 8009fc4:	f7ff ff72 	bl	8009eac <xQueueGenericCreate>
 8009fc8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009fca:	68f8      	ldr	r0, [r7, #12]
 8009fcc:	f7ff ffd3 	bl	8009f76 <prvInitialiseMutex>

		return xNewQueue;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
	}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3718      	adds	r7, #24
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b088      	sub	sp, #32
 8009fde:	af02      	add	r7, sp, #8
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	6039      	str	r1, [r7, #0]
 8009fe4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	617b      	str	r3, [r7, #20]
 8009fea:	2300      	movs	r3, #0
 8009fec:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009fee:	79fb      	ldrb	r3, [r7, #7]
 8009ff0:	9300      	str	r3, [sp, #0]
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	6939      	ldr	r1, [r7, #16]
 8009ff8:	6978      	ldr	r0, [r7, #20]
 8009ffa:	f7ff fed5 	bl	8009da8 <xQueueGenericCreateStatic>
 8009ffe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	f7ff ffb8 	bl	8009f76 <prvInitialiseMutex>

		return xNewQueue;
 800a006:	68fb      	ldr	r3, [r7, #12]
	}
 800a008:	4618      	mov	r0, r3
 800a00a:	3718      	adds	r7, #24
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a010:	b590      	push	{r4, r7, lr}
 800a012:	b087      	sub	sp, #28
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d10c      	bne.n	800a03c <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 800a022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a026:	b672      	cpsid	i
 800a028:	f383 8811 	msr	BASEPRI, r3
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	f3bf 8f4f 	dsb	sy
 800a034:	b662      	cpsie	i
 800a036:	60fb      	str	r3, [r7, #12]
}
 800a038:	bf00      	nop
 800a03a:	e7fe      	b.n	800a03a <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	689c      	ldr	r4, [r3, #8]
 800a040:	f001 fda8 	bl	800bb94 <xTaskGetCurrentTaskHandle>
 800a044:	4603      	mov	r3, r0
 800a046:	429c      	cmp	r4, r3
 800a048:	d111      	bne.n	800a06e <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	1e5a      	subs	r2, r3, #1
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d105      	bne.n	800a068 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a05c:	2300      	movs	r3, #0
 800a05e:	2200      	movs	r2, #0
 800a060:	2100      	movs	r1, #0
 800a062:	6938      	ldr	r0, [r7, #16]
 800a064:	f000 f8b4 	bl	800a1d0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a068:	2301      	movs	r3, #1
 800a06a:	617b      	str	r3, [r7, #20]
 800a06c:	e001      	b.n	800a072 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a06e:	2300      	movs	r3, #0
 800a070:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a072:	697b      	ldr	r3, [r7, #20]
	}
 800a074:	4618      	mov	r0, r3
 800a076:	371c      	adds	r7, #28
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd90      	pop	{r4, r7, pc}

0800a07c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a07c:	b590      	push	{r4, r7, lr}
 800a07e:	b087      	sub	sp, #28
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d10c      	bne.n	800a0aa <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 800a090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a094:	b672      	cpsid	i
 800a096:	f383 8811 	msr	BASEPRI, r3
 800a09a:	f3bf 8f6f 	isb	sy
 800a09e:	f3bf 8f4f 	dsb	sy
 800a0a2:	b662      	cpsie	i
 800a0a4:	60fb      	str	r3, [r7, #12]
}
 800a0a6:	bf00      	nop
 800a0a8:	e7fe      	b.n	800a0a8 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	689c      	ldr	r4, [r3, #8]
 800a0ae:	f001 fd71 	bl	800bb94 <xTaskGetCurrentTaskHandle>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	429c      	cmp	r4, r3
 800a0b6:	d107      	bne.n	800a0c8 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	1c5a      	adds	r2, r3, #1
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	617b      	str	r3, [r7, #20]
 800a0c6:	e00c      	b.n	800a0e2 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a0c8:	6839      	ldr	r1, [r7, #0]
 800a0ca:	6938      	ldr	r0, [r7, #16]
 800a0cc:	f000 fba2 	bl	800a814 <xQueueSemaphoreTake>
 800a0d0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d004      	beq.n	800a0e2 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	1c5a      	adds	r2, r3, #1
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a0e2:	697b      	ldr	r3, [r7, #20]
	}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	371c      	adds	r7, #28
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd90      	pop	{r4, r7, pc}

0800a0ec <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b08a      	sub	sp, #40	; 0x28
 800a0f0:	af02      	add	r7, sp, #8
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d10c      	bne.n	800a118 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800a0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a102:	b672      	cpsid	i
 800a104:	f383 8811 	msr	BASEPRI, r3
 800a108:	f3bf 8f6f 	isb	sy
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	b662      	cpsie	i
 800a112:	61bb      	str	r3, [r7, #24]
}
 800a114:	bf00      	nop
 800a116:	e7fe      	b.n	800a116 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a118:	68ba      	ldr	r2, [r7, #8]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d90c      	bls.n	800a13a <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800a120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a124:	b672      	cpsid	i
 800a126:	f383 8811 	msr	BASEPRI, r3
 800a12a:	f3bf 8f6f 	isb	sy
 800a12e:	f3bf 8f4f 	dsb	sy
 800a132:	b662      	cpsie	i
 800a134:	617b      	str	r3, [r7, #20]
}
 800a136:	bf00      	nop
 800a138:	e7fe      	b.n	800a138 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a13a:	2302      	movs	r3, #2
 800a13c:	9300      	str	r3, [sp, #0]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	2100      	movs	r1, #0
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f7ff fe2f 	bl	8009da8 <xQueueGenericCreateStatic>
 800a14a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d002      	beq.n	800a158 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	68ba      	ldr	r2, [r7, #8]
 800a156:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a158:	69fb      	ldr	r3, [r7, #28]
	}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3720      	adds	r7, #32
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a162:	b580      	push	{r7, lr}
 800a164:	b086      	sub	sp, #24
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
 800a16a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d10c      	bne.n	800a18c <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800a172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a176:	b672      	cpsid	i
 800a178:	f383 8811 	msr	BASEPRI, r3
 800a17c:	f3bf 8f6f 	isb	sy
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	b662      	cpsie	i
 800a186:	613b      	str	r3, [r7, #16]
}
 800a188:	bf00      	nop
 800a18a:	e7fe      	b.n	800a18a <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a18c:	683a      	ldr	r2, [r7, #0]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	429a      	cmp	r2, r3
 800a192:	d90c      	bls.n	800a1ae <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800a194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a198:	b672      	cpsid	i
 800a19a:	f383 8811 	msr	BASEPRI, r3
 800a19e:	f3bf 8f6f 	isb	sy
 800a1a2:	f3bf 8f4f 	dsb	sy
 800a1a6:	b662      	cpsie	i
 800a1a8:	60fb      	str	r3, [r7, #12]
}
 800a1aa:	bf00      	nop
 800a1ac:	e7fe      	b.n	800a1ac <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a1ae:	2202      	movs	r2, #2
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f7ff fe7a 	bl	8009eac <xQueueGenericCreate>
 800a1b8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d002      	beq.n	800a1c6 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	683a      	ldr	r2, [r7, #0]
 800a1c4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a1c6:	697b      	ldr	r3, [r7, #20]
	}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3718      	adds	r7, #24
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b08e      	sub	sp, #56	; 0x38
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	607a      	str	r2, [r7, #4]
 800a1dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d10c      	bne.n	800a206 <xQueueGenericSend+0x36>
	__asm volatile
 800a1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f0:	b672      	cpsid	i
 800a1f2:	f383 8811 	msr	BASEPRI, r3
 800a1f6:	f3bf 8f6f 	isb	sy
 800a1fa:	f3bf 8f4f 	dsb	sy
 800a1fe:	b662      	cpsie	i
 800a200:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a202:	bf00      	nop
 800a204:	e7fe      	b.n	800a204 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d103      	bne.n	800a214 <xQueueGenericSend+0x44>
 800a20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a210:	2b00      	cmp	r3, #0
 800a212:	d101      	bne.n	800a218 <xQueueGenericSend+0x48>
 800a214:	2301      	movs	r3, #1
 800a216:	e000      	b.n	800a21a <xQueueGenericSend+0x4a>
 800a218:	2300      	movs	r3, #0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d10c      	bne.n	800a238 <xQueueGenericSend+0x68>
	__asm volatile
 800a21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a222:	b672      	cpsid	i
 800a224:	f383 8811 	msr	BASEPRI, r3
 800a228:	f3bf 8f6f 	isb	sy
 800a22c:	f3bf 8f4f 	dsb	sy
 800a230:	b662      	cpsie	i
 800a232:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a234:	bf00      	nop
 800a236:	e7fe      	b.n	800a236 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	2b02      	cmp	r3, #2
 800a23c:	d103      	bne.n	800a246 <xQueueGenericSend+0x76>
 800a23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a242:	2b01      	cmp	r3, #1
 800a244:	d101      	bne.n	800a24a <xQueueGenericSend+0x7a>
 800a246:	2301      	movs	r3, #1
 800a248:	e000      	b.n	800a24c <xQueueGenericSend+0x7c>
 800a24a:	2300      	movs	r3, #0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d10c      	bne.n	800a26a <xQueueGenericSend+0x9a>
	__asm volatile
 800a250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a254:	b672      	cpsid	i
 800a256:	f383 8811 	msr	BASEPRI, r3
 800a25a:	f3bf 8f6f 	isb	sy
 800a25e:	f3bf 8f4f 	dsb	sy
 800a262:	b662      	cpsie	i
 800a264:	623b      	str	r3, [r7, #32]
}
 800a266:	bf00      	nop
 800a268:	e7fe      	b.n	800a268 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a26a:	f001 fca3 	bl	800bbb4 <xTaskGetSchedulerState>
 800a26e:	4603      	mov	r3, r0
 800a270:	2b00      	cmp	r3, #0
 800a272:	d102      	bne.n	800a27a <xQueueGenericSend+0xaa>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d101      	bne.n	800a27e <xQueueGenericSend+0xae>
 800a27a:	2301      	movs	r3, #1
 800a27c:	e000      	b.n	800a280 <xQueueGenericSend+0xb0>
 800a27e:	2300      	movs	r3, #0
 800a280:	2b00      	cmp	r3, #0
 800a282:	d10c      	bne.n	800a29e <xQueueGenericSend+0xce>
	__asm volatile
 800a284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a288:	b672      	cpsid	i
 800a28a:	f383 8811 	msr	BASEPRI, r3
 800a28e:	f3bf 8f6f 	isb	sy
 800a292:	f3bf 8f4f 	dsb	sy
 800a296:	b662      	cpsie	i
 800a298:	61fb      	str	r3, [r7, #28]
}
 800a29a:	bf00      	nop
 800a29c:	e7fe      	b.n	800a29c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a29e:	f002 fad5 	bl	800c84c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d302      	bcc.n	800a2b4 <xQueueGenericSend+0xe4>
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	d129      	bne.n	800a308 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a2b4:	683a      	ldr	r2, [r7, #0]
 800a2b6:	68b9      	ldr	r1, [r7, #8]
 800a2b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2ba:	f000 fc82 	bl	800abc2 <prvCopyDataToQueue>
 800a2be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d010      	beq.n	800a2ea <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ca:	3324      	adds	r3, #36	; 0x24
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f001 fa9b 	bl	800b808 <xTaskRemoveFromEventList>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d013      	beq.n	800a300 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a2d8:	4b3f      	ldr	r3, [pc, #252]	; (800a3d8 <xQueueGenericSend+0x208>)
 800a2da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2de:	601a      	str	r2, [r3, #0]
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	f3bf 8f6f 	isb	sy
 800a2e8:	e00a      	b.n	800a300 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d007      	beq.n	800a300 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a2f0:	4b39      	ldr	r3, [pc, #228]	; (800a3d8 <xQueueGenericSend+0x208>)
 800a2f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2f6:	601a      	str	r2, [r3, #0]
 800a2f8:	f3bf 8f4f 	dsb	sy
 800a2fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a300:	f002 fad8 	bl	800c8b4 <vPortExitCritical>
				return pdPASS;
 800a304:	2301      	movs	r3, #1
 800a306:	e063      	b.n	800a3d0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d103      	bne.n	800a316 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a30e:	f002 fad1 	bl	800c8b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a312:	2300      	movs	r3, #0
 800a314:	e05c      	b.n	800a3d0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d106      	bne.n	800a32a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a31c:	f107 0314 	add.w	r3, r7, #20
 800a320:	4618      	mov	r0, r3
 800a322:	f001 fad7 	bl	800b8d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a326:	2301      	movs	r3, #1
 800a328:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a32a:	f002 fac3 	bl	800c8b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a32e:	f001 f82b 	bl	800b388 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a332:	f002 fa8b 	bl	800c84c <vPortEnterCritical>
 800a336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a338:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a33c:	b25b      	sxtb	r3, r3
 800a33e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a342:	d103      	bne.n	800a34c <xQueueGenericSend+0x17c>
 800a344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a346:	2200      	movs	r2, #0
 800a348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a352:	b25b      	sxtb	r3, r3
 800a354:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a358:	d103      	bne.n	800a362 <xQueueGenericSend+0x192>
 800a35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35c:	2200      	movs	r2, #0
 800a35e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a362:	f002 faa7 	bl	800c8b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a366:	1d3a      	adds	r2, r7, #4
 800a368:	f107 0314 	add.w	r3, r7, #20
 800a36c:	4611      	mov	r1, r2
 800a36e:	4618      	mov	r0, r3
 800a370:	f001 fac6 	bl	800b900 <xTaskCheckForTimeOut>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d124      	bne.n	800a3c4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a37a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a37c:	f000 fd19 	bl	800adb2 <prvIsQueueFull>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d018      	beq.n	800a3b8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a388:	3310      	adds	r3, #16
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	4611      	mov	r1, r2
 800a38e:	4618      	mov	r0, r3
 800a390:	f001 f9e6 	bl	800b760 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a396:	f000 fca4 	bl	800ace2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a39a:	f001 f803 	bl	800b3a4 <xTaskResumeAll>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	f47f af7c 	bne.w	800a29e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800a3a6:	4b0c      	ldr	r3, [pc, #48]	; (800a3d8 <xQueueGenericSend+0x208>)
 800a3a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ac:	601a      	str	r2, [r3, #0]
 800a3ae:	f3bf 8f4f 	dsb	sy
 800a3b2:	f3bf 8f6f 	isb	sy
 800a3b6:	e772      	b.n	800a29e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a3b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3ba:	f000 fc92 	bl	800ace2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3be:	f000 fff1 	bl	800b3a4 <xTaskResumeAll>
 800a3c2:	e76c      	b.n	800a29e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a3c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3c6:	f000 fc8c 	bl	800ace2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3ca:	f000 ffeb 	bl	800b3a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a3ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3738      	adds	r7, #56	; 0x38
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	e000ed04 	.word	0xe000ed04

0800a3dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b08e      	sub	sp, #56	; 0x38
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	607a      	str	r2, [r7, #4]
 800a3e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d10c      	bne.n	800a40e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800a3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f8:	b672      	cpsid	i
 800a3fa:	f383 8811 	msr	BASEPRI, r3
 800a3fe:	f3bf 8f6f 	isb	sy
 800a402:	f3bf 8f4f 	dsb	sy
 800a406:	b662      	cpsie	i
 800a408:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a40a:	bf00      	nop
 800a40c:	e7fe      	b.n	800a40c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d103      	bne.n	800a41c <xQueueGenericSendFromISR+0x40>
 800a414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d101      	bne.n	800a420 <xQueueGenericSendFromISR+0x44>
 800a41c:	2301      	movs	r3, #1
 800a41e:	e000      	b.n	800a422 <xQueueGenericSendFromISR+0x46>
 800a420:	2300      	movs	r3, #0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d10c      	bne.n	800a440 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800a426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42a:	b672      	cpsid	i
 800a42c:	f383 8811 	msr	BASEPRI, r3
 800a430:	f3bf 8f6f 	isb	sy
 800a434:	f3bf 8f4f 	dsb	sy
 800a438:	b662      	cpsie	i
 800a43a:	623b      	str	r3, [r7, #32]
}
 800a43c:	bf00      	nop
 800a43e:	e7fe      	b.n	800a43e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	2b02      	cmp	r3, #2
 800a444:	d103      	bne.n	800a44e <xQueueGenericSendFromISR+0x72>
 800a446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d101      	bne.n	800a452 <xQueueGenericSendFromISR+0x76>
 800a44e:	2301      	movs	r3, #1
 800a450:	e000      	b.n	800a454 <xQueueGenericSendFromISR+0x78>
 800a452:	2300      	movs	r3, #0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d10c      	bne.n	800a472 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800a458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45c:	b672      	cpsid	i
 800a45e:	f383 8811 	msr	BASEPRI, r3
 800a462:	f3bf 8f6f 	isb	sy
 800a466:	f3bf 8f4f 	dsb	sy
 800a46a:	b662      	cpsie	i
 800a46c:	61fb      	str	r3, [r7, #28]
}
 800a46e:	bf00      	nop
 800a470:	e7fe      	b.n	800a470 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a472:	f002 fad3 	bl	800ca1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a476:	f3ef 8211 	mrs	r2, BASEPRI
 800a47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47e:	b672      	cpsid	i
 800a480:	f383 8811 	msr	BASEPRI, r3
 800a484:	f3bf 8f6f 	isb	sy
 800a488:	f3bf 8f4f 	dsb	sy
 800a48c:	b662      	cpsie	i
 800a48e:	61ba      	str	r2, [r7, #24]
 800a490:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a492:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a494:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a49c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d302      	bcc.n	800a4a8 <xQueueGenericSendFromISR+0xcc>
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	d12c      	bne.n	800a502 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a4b2:	683a      	ldr	r2, [r7, #0]
 800a4b4:	68b9      	ldr	r1, [r7, #8]
 800a4b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4b8:	f000 fb83 	bl	800abc2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a4bc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a4c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4c4:	d112      	bne.n	800a4ec <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d016      	beq.n	800a4fc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d0:	3324      	adds	r3, #36	; 0x24
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f001 f998 	bl	800b808 <xTaskRemoveFromEventList>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00e      	beq.n	800a4fc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d00b      	beq.n	800a4fc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	601a      	str	r2, [r3, #0]
 800a4ea:	e007      	b.n	800a4fc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a4ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	b25a      	sxtb	r2, r3
 800a4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a500:	e001      	b.n	800a506 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a502:	2300      	movs	r3, #0
 800a504:	637b      	str	r3, [r7, #52]	; 0x34
 800a506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a508:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a510:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a514:	4618      	mov	r0, r3
 800a516:	3738      	adds	r7, #56	; 0x38
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b08e      	sub	sp, #56	; 0x38
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d10c      	bne.n	800a54a <xQueueGiveFromISR+0x2e>
	__asm volatile
 800a530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a534:	b672      	cpsid	i
 800a536:	f383 8811 	msr	BASEPRI, r3
 800a53a:	f3bf 8f6f 	isb	sy
 800a53e:	f3bf 8f4f 	dsb	sy
 800a542:	b662      	cpsie	i
 800a544:	623b      	str	r3, [r7, #32]
}
 800a546:	bf00      	nop
 800a548:	e7fe      	b.n	800a548 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d00c      	beq.n	800a56c <xQueueGiveFromISR+0x50>
	__asm volatile
 800a552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a556:	b672      	cpsid	i
 800a558:	f383 8811 	msr	BASEPRI, r3
 800a55c:	f3bf 8f6f 	isb	sy
 800a560:	f3bf 8f4f 	dsb	sy
 800a564:	b662      	cpsie	i
 800a566:	61fb      	str	r3, [r7, #28]
}
 800a568:	bf00      	nop
 800a56a:	e7fe      	b.n	800a56a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d103      	bne.n	800a57c <xQueueGiveFromISR+0x60>
 800a574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d101      	bne.n	800a580 <xQueueGiveFromISR+0x64>
 800a57c:	2301      	movs	r3, #1
 800a57e:	e000      	b.n	800a582 <xQueueGiveFromISR+0x66>
 800a580:	2300      	movs	r3, #0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d10c      	bne.n	800a5a0 <xQueueGiveFromISR+0x84>
	__asm volatile
 800a586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58a:	b672      	cpsid	i
 800a58c:	f383 8811 	msr	BASEPRI, r3
 800a590:	f3bf 8f6f 	isb	sy
 800a594:	f3bf 8f4f 	dsb	sy
 800a598:	b662      	cpsie	i
 800a59a:	61bb      	str	r3, [r7, #24]
}
 800a59c:	bf00      	nop
 800a59e:	e7fe      	b.n	800a59e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a5a0:	f002 fa3c 	bl	800ca1c <vPortValidateInterruptPriority>
	__asm volatile
 800a5a4:	f3ef 8211 	mrs	r2, BASEPRI
 800a5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ac:	b672      	cpsid	i
 800a5ae:	f383 8811 	msr	BASEPRI, r3
 800a5b2:	f3bf 8f6f 	isb	sy
 800a5b6:	f3bf 8f4f 	dsb	sy
 800a5ba:	b662      	cpsie	i
 800a5bc:	617a      	str	r2, [r7, #20]
 800a5be:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a5c0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a5c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d22b      	bcs.n	800a62c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e0:	1c5a      	adds	r2, r3, #1
 800a5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a5e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a5ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ee:	d112      	bne.n	800a616 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d016      	beq.n	800a626 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fa:	3324      	adds	r3, #36	; 0x24
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f001 f903 	bl	800b808 <xTaskRemoveFromEventList>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d00e      	beq.n	800a626 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00b      	beq.n	800a626 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	2201      	movs	r2, #1
 800a612:	601a      	str	r2, [r3, #0]
 800a614:	e007      	b.n	800a626 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a616:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a61a:	3301      	adds	r3, #1
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	b25a      	sxtb	r2, r3
 800a620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a626:	2301      	movs	r3, #1
 800a628:	637b      	str	r3, [r7, #52]	; 0x34
 800a62a:	e001      	b.n	800a630 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a62c:	2300      	movs	r3, #0
 800a62e:	637b      	str	r3, [r7, #52]	; 0x34
 800a630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a632:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f383 8811 	msr	BASEPRI, r3
}
 800a63a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a63c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3738      	adds	r7, #56	; 0x38
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
	...

0800a648 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b08c      	sub	sp, #48	; 0x30
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a654:	2300      	movs	r3, #0
 800a656:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d10c      	bne.n	800a67c <xQueueReceive+0x34>
	__asm volatile
 800a662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a666:	b672      	cpsid	i
 800a668:	f383 8811 	msr	BASEPRI, r3
 800a66c:	f3bf 8f6f 	isb	sy
 800a670:	f3bf 8f4f 	dsb	sy
 800a674:	b662      	cpsie	i
 800a676:	623b      	str	r3, [r7, #32]
}
 800a678:	bf00      	nop
 800a67a:	e7fe      	b.n	800a67a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d103      	bne.n	800a68a <xQueueReceive+0x42>
 800a682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a686:	2b00      	cmp	r3, #0
 800a688:	d101      	bne.n	800a68e <xQueueReceive+0x46>
 800a68a:	2301      	movs	r3, #1
 800a68c:	e000      	b.n	800a690 <xQueueReceive+0x48>
 800a68e:	2300      	movs	r3, #0
 800a690:	2b00      	cmp	r3, #0
 800a692:	d10c      	bne.n	800a6ae <xQueueReceive+0x66>
	__asm volatile
 800a694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a698:	b672      	cpsid	i
 800a69a:	f383 8811 	msr	BASEPRI, r3
 800a69e:	f3bf 8f6f 	isb	sy
 800a6a2:	f3bf 8f4f 	dsb	sy
 800a6a6:	b662      	cpsie	i
 800a6a8:	61fb      	str	r3, [r7, #28]
}
 800a6aa:	bf00      	nop
 800a6ac:	e7fe      	b.n	800a6ac <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6ae:	f001 fa81 	bl	800bbb4 <xTaskGetSchedulerState>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d102      	bne.n	800a6be <xQueueReceive+0x76>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d101      	bne.n	800a6c2 <xQueueReceive+0x7a>
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e000      	b.n	800a6c4 <xQueueReceive+0x7c>
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d10c      	bne.n	800a6e2 <xQueueReceive+0x9a>
	__asm volatile
 800a6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6cc:	b672      	cpsid	i
 800a6ce:	f383 8811 	msr	BASEPRI, r3
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	f3bf 8f4f 	dsb	sy
 800a6da:	b662      	cpsie	i
 800a6dc:	61bb      	str	r3, [r7, #24]
}
 800a6de:	bf00      	nop
 800a6e0:	e7fe      	b.n	800a6e0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6e2:	f002 f8b3 	bl	800c84c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d01f      	beq.n	800a732 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a6f2:	68b9      	ldr	r1, [r7, #8]
 800a6f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6f6:	f000 face 	bl	800ac96 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fc:	1e5a      	subs	r2, r3, #1
 800a6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a700:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a704:	691b      	ldr	r3, [r3, #16]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00f      	beq.n	800a72a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a70c:	3310      	adds	r3, #16
 800a70e:	4618      	mov	r0, r3
 800a710:	f001 f87a 	bl	800b808 <xTaskRemoveFromEventList>
 800a714:	4603      	mov	r3, r0
 800a716:	2b00      	cmp	r3, #0
 800a718:	d007      	beq.n	800a72a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a71a:	4b3d      	ldr	r3, [pc, #244]	; (800a810 <xQueueReceive+0x1c8>)
 800a71c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a720:	601a      	str	r2, [r3, #0]
 800a722:	f3bf 8f4f 	dsb	sy
 800a726:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a72a:	f002 f8c3 	bl	800c8b4 <vPortExitCritical>
				return pdPASS;
 800a72e:	2301      	movs	r3, #1
 800a730:	e069      	b.n	800a806 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d103      	bne.n	800a740 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a738:	f002 f8bc 	bl	800c8b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a73c:	2300      	movs	r3, #0
 800a73e:	e062      	b.n	800a806 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a742:	2b00      	cmp	r3, #0
 800a744:	d106      	bne.n	800a754 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a746:	f107 0310 	add.w	r3, r7, #16
 800a74a:	4618      	mov	r0, r3
 800a74c:	f001 f8c2 	bl	800b8d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a750:	2301      	movs	r3, #1
 800a752:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a754:	f002 f8ae 	bl	800c8b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a758:	f000 fe16 	bl	800b388 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a75c:	f002 f876 	bl	800c84c <vPortEnterCritical>
 800a760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a762:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a766:	b25b      	sxtb	r3, r3
 800a768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76c:	d103      	bne.n	800a776 <xQueueReceive+0x12e>
 800a76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a770:	2200      	movs	r2, #0
 800a772:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a778:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a77c:	b25b      	sxtb	r3, r3
 800a77e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a782:	d103      	bne.n	800a78c <xQueueReceive+0x144>
 800a784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a786:	2200      	movs	r2, #0
 800a788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a78c:	f002 f892 	bl	800c8b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a790:	1d3a      	adds	r2, r7, #4
 800a792:	f107 0310 	add.w	r3, r7, #16
 800a796:	4611      	mov	r1, r2
 800a798:	4618      	mov	r0, r3
 800a79a:	f001 f8b1 	bl	800b900 <xTaskCheckForTimeOut>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d123      	bne.n	800a7ec <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7a6:	f000 faee 	bl	800ad86 <prvIsQueueEmpty>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d017      	beq.n	800a7e0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b2:	3324      	adds	r3, #36	; 0x24
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	4611      	mov	r1, r2
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f000 ffd1 	bl	800b760 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a7be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7c0:	f000 fa8f 	bl	800ace2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a7c4:	f000 fdee 	bl	800b3a4 <xTaskResumeAll>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d189      	bne.n	800a6e2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800a7ce:	4b10      	ldr	r3, [pc, #64]	; (800a810 <xQueueReceive+0x1c8>)
 800a7d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7d4:	601a      	str	r2, [r3, #0]
 800a7d6:	f3bf 8f4f 	dsb	sy
 800a7da:	f3bf 8f6f 	isb	sy
 800a7de:	e780      	b.n	800a6e2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a7e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7e2:	f000 fa7e 	bl	800ace2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7e6:	f000 fddd 	bl	800b3a4 <xTaskResumeAll>
 800a7ea:	e77a      	b.n	800a6e2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a7ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7ee:	f000 fa78 	bl	800ace2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7f2:	f000 fdd7 	bl	800b3a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7f8:	f000 fac5 	bl	800ad86 <prvIsQueueEmpty>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f43f af6f 	beq.w	800a6e2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a804:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a806:	4618      	mov	r0, r3
 800a808:	3730      	adds	r7, #48	; 0x30
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	e000ed04 	.word	0xe000ed04

0800a814 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b08e      	sub	sp, #56	; 0x38
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a81e:	2300      	movs	r3, #0
 800a820:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a826:	2300      	movs	r3, #0
 800a828:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d10c      	bne.n	800a84a <xQueueSemaphoreTake+0x36>
	__asm volatile
 800a830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a834:	b672      	cpsid	i
 800a836:	f383 8811 	msr	BASEPRI, r3
 800a83a:	f3bf 8f6f 	isb	sy
 800a83e:	f3bf 8f4f 	dsb	sy
 800a842:	b662      	cpsie	i
 800a844:	623b      	str	r3, [r7, #32]
}
 800a846:	bf00      	nop
 800a848:	e7fe      	b.n	800a848 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d00c      	beq.n	800a86c <xQueueSemaphoreTake+0x58>
	__asm volatile
 800a852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a856:	b672      	cpsid	i
 800a858:	f383 8811 	msr	BASEPRI, r3
 800a85c:	f3bf 8f6f 	isb	sy
 800a860:	f3bf 8f4f 	dsb	sy
 800a864:	b662      	cpsie	i
 800a866:	61fb      	str	r3, [r7, #28]
}
 800a868:	bf00      	nop
 800a86a:	e7fe      	b.n	800a86a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a86c:	f001 f9a2 	bl	800bbb4 <xTaskGetSchedulerState>
 800a870:	4603      	mov	r3, r0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d102      	bne.n	800a87c <xQueueSemaphoreTake+0x68>
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d101      	bne.n	800a880 <xQueueSemaphoreTake+0x6c>
 800a87c:	2301      	movs	r3, #1
 800a87e:	e000      	b.n	800a882 <xQueueSemaphoreTake+0x6e>
 800a880:	2300      	movs	r3, #0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d10c      	bne.n	800a8a0 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800a886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88a:	b672      	cpsid	i
 800a88c:	f383 8811 	msr	BASEPRI, r3
 800a890:	f3bf 8f6f 	isb	sy
 800a894:	f3bf 8f4f 	dsb	sy
 800a898:	b662      	cpsie	i
 800a89a:	61bb      	str	r3, [r7, #24]
}
 800a89c:	bf00      	nop
 800a89e:	e7fe      	b.n	800a89e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a8a0:	f001 ffd4 	bl	800c84c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d024      	beq.n	800a8fa <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b2:	1e5a      	subs	r2, r3, #1
 800a8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d104      	bne.n	800a8ca <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a8c0:	f001 faf6 	bl	800beb0 <pvTaskIncrementMutexHeldCount>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d00f      	beq.n	800a8f2 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d4:	3310      	adds	r3, #16
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f000 ff96 	bl	800b808 <xTaskRemoveFromEventList>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d007      	beq.n	800a8f2 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a8e2:	4b55      	ldr	r3, [pc, #340]	; (800aa38 <xQueueSemaphoreTake+0x224>)
 800a8e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8e8:	601a      	str	r2, [r3, #0]
 800a8ea:	f3bf 8f4f 	dsb	sy
 800a8ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a8f2:	f001 ffdf 	bl	800c8b4 <vPortExitCritical>
				return pdPASS;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e099      	b.n	800aa2e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d113      	bne.n	800a928 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00c      	beq.n	800a920 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800a906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90a:	b672      	cpsid	i
 800a90c:	f383 8811 	msr	BASEPRI, r3
 800a910:	f3bf 8f6f 	isb	sy
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	b662      	cpsie	i
 800a91a:	617b      	str	r3, [r7, #20]
}
 800a91c:	bf00      	nop
 800a91e:	e7fe      	b.n	800a91e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a920:	f001 ffc8 	bl	800c8b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a924:	2300      	movs	r3, #0
 800a926:	e082      	b.n	800aa2e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d106      	bne.n	800a93c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a92e:	f107 030c 	add.w	r3, r7, #12
 800a932:	4618      	mov	r0, r3
 800a934:	f000 ffce 	bl	800b8d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a938:	2301      	movs	r3, #1
 800a93a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a93c:	f001 ffba 	bl	800c8b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a940:	f000 fd22 	bl	800b388 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a944:	f001 ff82 	bl	800c84c <vPortEnterCritical>
 800a948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a94e:	b25b      	sxtb	r3, r3
 800a950:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a954:	d103      	bne.n	800a95e <xQueueSemaphoreTake+0x14a>
 800a956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a958:	2200      	movs	r2, #0
 800a95a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a960:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a964:	b25b      	sxtb	r3, r3
 800a966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a96a:	d103      	bne.n	800a974 <xQueueSemaphoreTake+0x160>
 800a96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96e:	2200      	movs	r2, #0
 800a970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a974:	f001 ff9e 	bl	800c8b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a978:	463a      	mov	r2, r7
 800a97a:	f107 030c 	add.w	r3, r7, #12
 800a97e:	4611      	mov	r1, r2
 800a980:	4618      	mov	r0, r3
 800a982:	f000 ffbd 	bl	800b900 <xTaskCheckForTimeOut>
 800a986:	4603      	mov	r3, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d132      	bne.n	800a9f2 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a98c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a98e:	f000 f9fa 	bl	800ad86 <prvIsQueueEmpty>
 800a992:	4603      	mov	r3, r0
 800a994:	2b00      	cmp	r3, #0
 800a996:	d026      	beq.n	800a9e6 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d109      	bne.n	800a9b4 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800a9a0:	f001 ff54 	bl	800c84c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f001 f921 	bl	800bbf0 <xTaskPriorityInherit>
 800a9ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a9b0:	f001 ff80 	bl	800c8b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b6:	3324      	adds	r3, #36	; 0x24
 800a9b8:	683a      	ldr	r2, [r7, #0]
 800a9ba:	4611      	mov	r1, r2
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f000 fecf 	bl	800b760 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a9c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9c4:	f000 f98d 	bl	800ace2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a9c8:	f000 fcec 	bl	800b3a4 <xTaskResumeAll>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	f47f af66 	bne.w	800a8a0 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800a9d4:	4b18      	ldr	r3, [pc, #96]	; (800aa38 <xQueueSemaphoreTake+0x224>)
 800a9d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9da:	601a      	str	r2, [r3, #0]
 800a9dc:	f3bf 8f4f 	dsb	sy
 800a9e0:	f3bf 8f6f 	isb	sy
 800a9e4:	e75c      	b.n	800a8a0 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a9e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9e8:	f000 f97b 	bl	800ace2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9ec:	f000 fcda 	bl	800b3a4 <xTaskResumeAll>
 800a9f0:	e756      	b.n	800a8a0 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a9f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9f4:	f000 f975 	bl	800ace2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9f8:	f000 fcd4 	bl	800b3a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9fe:	f000 f9c2 	bl	800ad86 <prvIsQueueEmpty>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f43f af4b 	beq.w	800a8a0 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800aa0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d00d      	beq.n	800aa2c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800aa10:	f001 ff1c 	bl	800c84c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aa14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa16:	f000 f8bc 	bl	800ab92 <prvGetDisinheritPriorityAfterTimeout>
 800aa1a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aa1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa22:	4618      	mov	r0, r3
 800aa24:	f001 f9be 	bl	800bda4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aa28:	f001 ff44 	bl	800c8b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3738      	adds	r7, #56	; 0x38
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	e000ed04 	.word	0xe000ed04

0800aa3c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b08e      	sub	sp, #56	; 0x38
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aa4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d10c      	bne.n	800aa6c <xQueueReceiveFromISR+0x30>
	__asm volatile
 800aa52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa56:	b672      	cpsid	i
 800aa58:	f383 8811 	msr	BASEPRI, r3
 800aa5c:	f3bf 8f6f 	isb	sy
 800aa60:	f3bf 8f4f 	dsb	sy
 800aa64:	b662      	cpsie	i
 800aa66:	623b      	str	r3, [r7, #32]
}
 800aa68:	bf00      	nop
 800aa6a:	e7fe      	b.n	800aa6a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d103      	bne.n	800aa7a <xQueueReceiveFromISR+0x3e>
 800aa72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d101      	bne.n	800aa7e <xQueueReceiveFromISR+0x42>
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e000      	b.n	800aa80 <xQueueReceiveFromISR+0x44>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d10c      	bne.n	800aa9e <xQueueReceiveFromISR+0x62>
	__asm volatile
 800aa84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa88:	b672      	cpsid	i
 800aa8a:	f383 8811 	msr	BASEPRI, r3
 800aa8e:	f3bf 8f6f 	isb	sy
 800aa92:	f3bf 8f4f 	dsb	sy
 800aa96:	b662      	cpsie	i
 800aa98:	61fb      	str	r3, [r7, #28]
}
 800aa9a:	bf00      	nop
 800aa9c:	e7fe      	b.n	800aa9c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa9e:	f001 ffbd 	bl	800ca1c <vPortValidateInterruptPriority>
	__asm volatile
 800aaa2:	f3ef 8211 	mrs	r2, BASEPRI
 800aaa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaaa:	b672      	cpsid	i
 800aaac:	f383 8811 	msr	BASEPRI, r3
 800aab0:	f3bf 8f6f 	isb	sy
 800aab4:	f3bf 8f4f 	dsb	sy
 800aab8:	b662      	cpsie	i
 800aaba:	61ba      	str	r2, [r7, #24]
 800aabc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800aabe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aac0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d02f      	beq.n	800ab2e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800aace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aad8:	68b9      	ldr	r1, [r7, #8]
 800aada:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aadc:	f000 f8db 	bl	800ac96 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae2:	1e5a      	subs	r2, r3, #1
 800aae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800aae8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aaec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf0:	d112      	bne.n	800ab18 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aaf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf4:	691b      	ldr	r3, [r3, #16]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d016      	beq.n	800ab28 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafc:	3310      	adds	r3, #16
 800aafe:	4618      	mov	r0, r3
 800ab00:	f000 fe82 	bl	800b808 <xTaskRemoveFromEventList>
 800ab04:	4603      	mov	r3, r0
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d00e      	beq.n	800ab28 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00b      	beq.n	800ab28 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2201      	movs	r2, #1
 800ab14:	601a      	str	r2, [r3, #0]
 800ab16:	e007      	b.n	800ab28 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ab18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	b25a      	sxtb	r2, r3
 800ab22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	637b      	str	r3, [r7, #52]	; 0x34
 800ab2c:	e001      	b.n	800ab32 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	637b      	str	r3, [r7, #52]	; 0x34
 800ab32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab34:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	f383 8811 	msr	BASEPRI, r3
}
 800ab3c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3738      	adds	r7, #56	; 0x38
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d10c      	bne.n	800ab74 <vQueueDelete+0x2c>
	__asm volatile
 800ab5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5e:	b672      	cpsid	i
 800ab60:	f383 8811 	msr	BASEPRI, r3
 800ab64:	f3bf 8f6f 	isb	sy
 800ab68:	f3bf 8f4f 	dsb	sy
 800ab6c:	b662      	cpsie	i
 800ab6e:	60bb      	str	r3, [r7, #8]
}
 800ab70:	bf00      	nop
 800ab72:	e7fe      	b.n	800ab72 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ab74:	68f8      	ldr	r0, [r7, #12]
 800ab76:	f000 f95f 	bl	800ae38 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d102      	bne.n	800ab8a <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800ab84:	68f8      	ldr	r0, [r7, #12]
 800ab86:	f002 f857 	bl	800cc38 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ab8a:	bf00      	nop
 800ab8c:	3710      	adds	r7, #16
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}

0800ab92 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ab92:	b480      	push	{r7}
 800ab94:	b085      	sub	sp, #20
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d006      	beq.n	800abb0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800abac:	60fb      	str	r3, [r7, #12]
 800abae:	e001      	b.n	800abb4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800abb0:	2300      	movs	r3, #0
 800abb2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800abb4:	68fb      	ldr	r3, [r7, #12]
	}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3714      	adds	r7, #20
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr

0800abc2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b086      	sub	sp, #24
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	60f8      	str	r0, [r7, #12]
 800abca:	60b9      	str	r1, [r7, #8]
 800abcc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800abce:	2300      	movs	r3, #0
 800abd0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d10d      	bne.n	800abfc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d14d      	bne.n	800ac84 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	4618      	mov	r0, r3
 800abee:	f001 f867 	bl	800bcc0 <xTaskPriorityDisinherit>
 800abf2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2200      	movs	r2, #0
 800abf8:	609a      	str	r2, [r3, #8]
 800abfa:	e043      	b.n	800ac84 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d119      	bne.n	800ac36 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	6858      	ldr	r0, [r3, #4]
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	68b9      	ldr	r1, [r7, #8]
 800ac0e:	f00c f9d7 	bl	8016fc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	685a      	ldr	r2, [r3, #4]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac1a:	441a      	add	r2, r3
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	685a      	ldr	r2, [r3, #4]
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d32b      	bcc.n	800ac84 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	605a      	str	r2, [r3, #4]
 800ac34:	e026      	b.n	800ac84 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	68d8      	ldr	r0, [r3, #12]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac3e:	461a      	mov	r2, r3
 800ac40:	68b9      	ldr	r1, [r7, #8]
 800ac42:	f00c f9bd 	bl	8016fc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	68da      	ldr	r2, [r3, #12]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac4e:	425b      	negs	r3, r3
 800ac50:	441a      	add	r2, r3
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	68da      	ldr	r2, [r3, #12]
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d207      	bcs.n	800ac72 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	689a      	ldr	r2, [r3, #8]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac6a:	425b      	negs	r3, r3
 800ac6c:	441a      	add	r2, r3
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2b02      	cmp	r3, #2
 800ac76:	d105      	bne.n	800ac84 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d002      	beq.n	800ac84 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	3b01      	subs	r3, #1
 800ac82:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	1c5a      	adds	r2, r3, #1
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ac8c:	697b      	ldr	r3, [r7, #20]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3718      	adds	r7, #24
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b082      	sub	sp, #8
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
 800ac9e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d018      	beq.n	800acda <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	68da      	ldr	r2, [r3, #12]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb0:	441a      	add	r2, r3
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	68da      	ldr	r2, [r3, #12]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d303      	bcc.n	800acca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	68d9      	ldr	r1, [r3, #12]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd2:	461a      	mov	r2, r3
 800acd4:	6838      	ldr	r0, [r7, #0]
 800acd6:	f00c f973 	bl	8016fc0 <memcpy>
	}
}
 800acda:	bf00      	nop
 800acdc:	3708      	adds	r7, #8
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b084      	sub	sp, #16
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800acea:	f001 fdaf 	bl	800c84c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acf4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800acf6:	e011      	b.n	800ad1c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d012      	beq.n	800ad26 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	3324      	adds	r3, #36	; 0x24
 800ad04:	4618      	mov	r0, r3
 800ad06:	f000 fd7f 	bl	800b808 <xTaskRemoveFromEventList>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d001      	beq.n	800ad14 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ad10:	f000 fe5c 	bl	800b9cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ad14:	7bfb      	ldrb	r3, [r7, #15]
 800ad16:	3b01      	subs	r3, #1
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	dce9      	bgt.n	800acf8 <prvUnlockQueue+0x16>
 800ad24:	e000      	b.n	800ad28 <prvUnlockQueue+0x46>
					break;
 800ad26:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	22ff      	movs	r2, #255	; 0xff
 800ad2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ad30:	f001 fdc0 	bl	800c8b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ad34:	f001 fd8a 	bl	800c84c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad3e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad40:	e011      	b.n	800ad66 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	691b      	ldr	r3, [r3, #16]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d012      	beq.n	800ad70 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	3310      	adds	r3, #16
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f000 fd5a 	bl	800b808 <xTaskRemoveFromEventList>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d001      	beq.n	800ad5e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ad5a:	f000 fe37 	bl	800b9cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ad5e:	7bbb      	ldrb	r3, [r7, #14]
 800ad60:	3b01      	subs	r3, #1
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	dce9      	bgt.n	800ad42 <prvUnlockQueue+0x60>
 800ad6e:	e000      	b.n	800ad72 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ad70:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	22ff      	movs	r2, #255	; 0xff
 800ad76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ad7a:	f001 fd9b 	bl	800c8b4 <vPortExitCritical>
}
 800ad7e:	bf00      	nop
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b084      	sub	sp, #16
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad8e:	f001 fd5d 	bl	800c84c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d102      	bne.n	800ada0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	60fb      	str	r3, [r7, #12]
 800ad9e:	e001      	b.n	800ada4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ada0:	2300      	movs	r3, #0
 800ada2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ada4:	f001 fd86 	bl	800c8b4 <vPortExitCritical>

	return xReturn;
 800ada8:	68fb      	ldr	r3, [r7, #12]
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b084      	sub	sp, #16
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800adba:	f001 fd47 	bl	800c84c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d102      	bne.n	800add0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800adca:	2301      	movs	r3, #1
 800adcc:	60fb      	str	r3, [r7, #12]
 800adce:	e001      	b.n	800add4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800add0:	2300      	movs	r3, #0
 800add2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800add4:	f001 fd6e 	bl	800c8b4 <vPortExitCritical>

	return xReturn;
 800add8:	68fb      	ldr	r3, [r7, #12]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
	...

0800ade4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ade4:	b480      	push	{r7}
 800ade6:	b085      	sub	sp, #20
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800adee:	2300      	movs	r3, #0
 800adf0:	60fb      	str	r3, [r7, #12]
 800adf2:	e014      	b.n	800ae1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800adf4:	4a0f      	ldr	r2, [pc, #60]	; (800ae34 <vQueueAddToRegistry+0x50>)
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d10b      	bne.n	800ae18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ae00:	490c      	ldr	r1, [pc, #48]	; (800ae34 <vQueueAddToRegistry+0x50>)
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	683a      	ldr	r2, [r7, #0]
 800ae06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ae0a:	4a0a      	ldr	r2, [pc, #40]	; (800ae34 <vQueueAddToRegistry+0x50>)
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	00db      	lsls	r3, r3, #3
 800ae10:	4413      	add	r3, r2
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ae16:	e006      	b.n	800ae26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	60fb      	str	r3, [r7, #12]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2b07      	cmp	r3, #7
 800ae22:	d9e7      	bls.n	800adf4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ae24:	bf00      	nop
 800ae26:	bf00      	nop
 800ae28:	3714      	adds	r7, #20
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	20009630 	.word	0x20009630

0800ae38 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ae38:	b480      	push	{r7}
 800ae3a:	b085      	sub	sp, #20
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae40:	2300      	movs	r3, #0
 800ae42:	60fb      	str	r3, [r7, #12]
 800ae44:	e016      	b.n	800ae74 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ae46:	4a10      	ldr	r2, [pc, #64]	; (800ae88 <vQueueUnregisterQueue+0x50>)
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	00db      	lsls	r3, r3, #3
 800ae4c:	4413      	add	r3, r2
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d10b      	bne.n	800ae6e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ae56:	4a0c      	ldr	r2, [pc, #48]	; (800ae88 <vQueueUnregisterQueue+0x50>)
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2100      	movs	r1, #0
 800ae5c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ae60:	4a09      	ldr	r2, [pc, #36]	; (800ae88 <vQueueUnregisterQueue+0x50>)
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	00db      	lsls	r3, r3, #3
 800ae66:	4413      	add	r3, r2
 800ae68:	2200      	movs	r2, #0
 800ae6a:	605a      	str	r2, [r3, #4]
				break;
 800ae6c:	e006      	b.n	800ae7c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	3301      	adds	r3, #1
 800ae72:	60fb      	str	r3, [r7, #12]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2b07      	cmp	r3, #7
 800ae78:	d9e5      	bls.n	800ae46 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ae7a:	bf00      	nop
 800ae7c:	bf00      	nop
 800ae7e:	3714      	adds	r7, #20
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr
 800ae88:	20009630 	.word	0x20009630

0800ae8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b086      	sub	sp, #24
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ae9c:	f001 fcd6 	bl	800c84c <vPortEnterCritical>
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aea6:	b25b      	sxtb	r3, r3
 800aea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeac:	d103      	bne.n	800aeb6 <vQueueWaitForMessageRestricted+0x2a>
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aebc:	b25b      	sxtb	r3, r3
 800aebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aec2:	d103      	bne.n	800aecc <vQueueWaitForMessageRestricted+0x40>
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aecc:	f001 fcf2 	bl	800c8b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d106      	bne.n	800aee6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	3324      	adds	r3, #36	; 0x24
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	68b9      	ldr	r1, [r7, #8]
 800aee0:	4618      	mov	r0, r3
 800aee2:	f000 fc63 	bl	800b7ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aee6:	6978      	ldr	r0, [r7, #20]
 800aee8:	f7ff fefb 	bl	800ace2 <prvUnlockQueue>
	}
 800aeec:	bf00      	nop
 800aeee:	3718      	adds	r7, #24
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b08e      	sub	sp, #56	; 0x38
 800aef8:	af04      	add	r7, sp, #16
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	607a      	str	r2, [r7, #4]
 800af00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800af02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af04:	2b00      	cmp	r3, #0
 800af06:	d10c      	bne.n	800af22 <xTaskCreateStatic+0x2e>
	__asm volatile
 800af08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0c:	b672      	cpsid	i
 800af0e:	f383 8811 	msr	BASEPRI, r3
 800af12:	f3bf 8f6f 	isb	sy
 800af16:	f3bf 8f4f 	dsb	sy
 800af1a:	b662      	cpsie	i
 800af1c:	623b      	str	r3, [r7, #32]
}
 800af1e:	bf00      	nop
 800af20:	e7fe      	b.n	800af20 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800af22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af24:	2b00      	cmp	r3, #0
 800af26:	d10c      	bne.n	800af42 <xTaskCreateStatic+0x4e>
	__asm volatile
 800af28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af2c:	b672      	cpsid	i
 800af2e:	f383 8811 	msr	BASEPRI, r3
 800af32:	f3bf 8f6f 	isb	sy
 800af36:	f3bf 8f4f 	dsb	sy
 800af3a:	b662      	cpsie	i
 800af3c:	61fb      	str	r3, [r7, #28]
}
 800af3e:	bf00      	nop
 800af40:	e7fe      	b.n	800af40 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800af42:	235c      	movs	r3, #92	; 0x5c
 800af44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	2b5c      	cmp	r3, #92	; 0x5c
 800af4a:	d00c      	beq.n	800af66 <xTaskCreateStatic+0x72>
	__asm volatile
 800af4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af50:	b672      	cpsid	i
 800af52:	f383 8811 	msr	BASEPRI, r3
 800af56:	f3bf 8f6f 	isb	sy
 800af5a:	f3bf 8f4f 	dsb	sy
 800af5e:	b662      	cpsie	i
 800af60:	61bb      	str	r3, [r7, #24]
}
 800af62:	bf00      	nop
 800af64:	e7fe      	b.n	800af64 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800af66:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800af68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d01e      	beq.n	800afac <xTaskCreateStatic+0xb8>
 800af6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af70:	2b00      	cmp	r3, #0
 800af72:	d01b      	beq.n	800afac <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800af74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af76:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800af78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af7c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800af7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af80:	2202      	movs	r2, #2
 800af82:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800af86:	2300      	movs	r3, #0
 800af88:	9303      	str	r3, [sp, #12]
 800af8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8c:	9302      	str	r3, [sp, #8]
 800af8e:	f107 0314 	add.w	r3, r7, #20
 800af92:	9301      	str	r3, [sp, #4]
 800af94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af96:	9300      	str	r3, [sp, #0]
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	68b9      	ldr	r1, [r7, #8]
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f000 f850 	bl	800b044 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800afa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afa6:	f000 f8df 	bl	800b168 <prvAddNewTaskToReadyList>
 800afaa:	e001      	b.n	800afb0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800afac:	2300      	movs	r3, #0
 800afae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800afb0:	697b      	ldr	r3, [r7, #20]
	}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3728      	adds	r7, #40	; 0x28
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}

0800afba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b08c      	sub	sp, #48	; 0x30
 800afbe:	af04      	add	r7, sp, #16
 800afc0:	60f8      	str	r0, [r7, #12]
 800afc2:	60b9      	str	r1, [r7, #8]
 800afc4:	603b      	str	r3, [r7, #0]
 800afc6:	4613      	mov	r3, r2
 800afc8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800afca:	88fb      	ldrh	r3, [r7, #6]
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	4618      	mov	r0, r3
 800afd0:	f001 fd68 	bl	800caa4 <pvPortMalloc>
 800afd4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d00e      	beq.n	800affa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800afdc:	205c      	movs	r0, #92	; 0x5c
 800afde:	f001 fd61 	bl	800caa4 <pvPortMalloc>
 800afe2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d003      	beq.n	800aff2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	697a      	ldr	r2, [r7, #20]
 800afee:	631a      	str	r2, [r3, #48]	; 0x30
 800aff0:	e005      	b.n	800affe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aff2:	6978      	ldr	r0, [r7, #20]
 800aff4:	f001 fe20 	bl	800cc38 <vPortFree>
 800aff8:	e001      	b.n	800affe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800affa:	2300      	movs	r3, #0
 800affc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800affe:	69fb      	ldr	r3, [r7, #28]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d017      	beq.n	800b034 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b004:	69fb      	ldr	r3, [r7, #28]
 800b006:	2200      	movs	r2, #0
 800b008:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b00c:	88fa      	ldrh	r2, [r7, #6]
 800b00e:	2300      	movs	r3, #0
 800b010:	9303      	str	r3, [sp, #12]
 800b012:	69fb      	ldr	r3, [r7, #28]
 800b014:	9302      	str	r3, [sp, #8]
 800b016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b018:	9301      	str	r3, [sp, #4]
 800b01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01c:	9300      	str	r3, [sp, #0]
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	68b9      	ldr	r1, [r7, #8]
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	f000 f80e 	bl	800b044 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b028:	69f8      	ldr	r0, [r7, #28]
 800b02a:	f000 f89d 	bl	800b168 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b02e:	2301      	movs	r3, #1
 800b030:	61bb      	str	r3, [r7, #24]
 800b032:	e002      	b.n	800b03a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b034:	f04f 33ff 	mov.w	r3, #4294967295
 800b038:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b03a:	69bb      	ldr	r3, [r7, #24]
	}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3720      	adds	r7, #32
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b088      	sub	sp, #32
 800b048:	af00      	add	r7, sp, #0
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	60b9      	str	r1, [r7, #8]
 800b04e:	607a      	str	r2, [r7, #4]
 800b050:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b054:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	009b      	lsls	r3, r3, #2
 800b05a:	461a      	mov	r2, r3
 800b05c:	21a5      	movs	r1, #165	; 0xa5
 800b05e:	f00b ffbd 	bl	8016fdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b066:	6879      	ldr	r1, [r7, #4]
 800b068:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b06c:	440b      	add	r3, r1
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	4413      	add	r3, r2
 800b072:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b074:	69bb      	ldr	r3, [r7, #24]
 800b076:	f023 0307 	bic.w	r3, r3, #7
 800b07a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b07c:	69bb      	ldr	r3, [r7, #24]
 800b07e:	f003 0307 	and.w	r3, r3, #7
 800b082:	2b00      	cmp	r3, #0
 800b084:	d00c      	beq.n	800b0a0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800b086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08a:	b672      	cpsid	i
 800b08c:	f383 8811 	msr	BASEPRI, r3
 800b090:	f3bf 8f6f 	isb	sy
 800b094:	f3bf 8f4f 	dsb	sy
 800b098:	b662      	cpsie	i
 800b09a:	617b      	str	r3, [r7, #20]
}
 800b09c:	bf00      	nop
 800b09e:	e7fe      	b.n	800b09e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d01f      	beq.n	800b0e6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	61fb      	str	r3, [r7, #28]
 800b0aa:	e012      	b.n	800b0d2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b0ac:	68ba      	ldr	r2, [r7, #8]
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	7819      	ldrb	r1, [r3, #0]
 800b0b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	3334      	adds	r3, #52	; 0x34
 800b0bc:	460a      	mov	r2, r1
 800b0be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b0c0:	68ba      	ldr	r2, [r7, #8]
 800b0c2:	69fb      	ldr	r3, [r7, #28]
 800b0c4:	4413      	add	r3, r2
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d006      	beq.n	800b0da <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	61fb      	str	r3, [r7, #28]
 800b0d2:	69fb      	ldr	r3, [r7, #28]
 800b0d4:	2b0f      	cmp	r3, #15
 800b0d6:	d9e9      	bls.n	800b0ac <prvInitialiseNewTask+0x68>
 800b0d8:	e000      	b.n	800b0dc <prvInitialiseNewTask+0x98>
			{
				break;
 800b0da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0de:	2200      	movs	r2, #0
 800b0e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b0e4:	e003      	b.n	800b0ee <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f0:	2b37      	cmp	r3, #55	; 0x37
 800b0f2:	d901      	bls.n	800b0f8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b0f4:	2337      	movs	r3, #55	; 0x37
 800b0f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b102:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b106:	2200      	movs	r2, #0
 800b108:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b10c:	3304      	adds	r3, #4
 800b10e:	4618      	mov	r0, r3
 800b110:	f7fe fd4c 	bl	8009bac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b116:	3318      	adds	r3, #24
 800b118:	4618      	mov	r0, r3
 800b11a:	f7fe fd47 	bl	8009bac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b122:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b126:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b132:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b136:	2200      	movs	r2, #0
 800b138:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13c:	2200      	movs	r2, #0
 800b13e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b142:	683a      	ldr	r2, [r7, #0]
 800b144:	68f9      	ldr	r1, [r7, #12]
 800b146:	69b8      	ldr	r0, [r7, #24]
 800b148:	f001 fa76 	bl	800c638 <pxPortInitialiseStack>
 800b14c:	4602      	mov	r2, r0
 800b14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b150:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b154:	2b00      	cmp	r3, #0
 800b156:	d002      	beq.n	800b15e <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b15a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b15c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b15e:	bf00      	nop
 800b160:	3720      	adds	r7, #32
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
	...

0800b168 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b170:	f001 fb6c 	bl	800c84c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b174:	4b2d      	ldr	r3, [pc, #180]	; (800b22c <prvAddNewTaskToReadyList+0xc4>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	3301      	adds	r3, #1
 800b17a:	4a2c      	ldr	r2, [pc, #176]	; (800b22c <prvAddNewTaskToReadyList+0xc4>)
 800b17c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b17e:	4b2c      	ldr	r3, [pc, #176]	; (800b230 <prvAddNewTaskToReadyList+0xc8>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d109      	bne.n	800b19a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b186:	4a2a      	ldr	r2, [pc, #168]	; (800b230 <prvAddNewTaskToReadyList+0xc8>)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b18c:	4b27      	ldr	r3, [pc, #156]	; (800b22c <prvAddNewTaskToReadyList+0xc4>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2b01      	cmp	r3, #1
 800b192:	d110      	bne.n	800b1b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b194:	f000 fc3e 	bl	800ba14 <prvInitialiseTaskLists>
 800b198:	e00d      	b.n	800b1b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b19a:	4b26      	ldr	r3, [pc, #152]	; (800b234 <prvAddNewTaskToReadyList+0xcc>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d109      	bne.n	800b1b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b1a2:	4b23      	ldr	r3, [pc, #140]	; (800b230 <prvAddNewTaskToReadyList+0xc8>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d802      	bhi.n	800b1b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b1b0:	4a1f      	ldr	r2, [pc, #124]	; (800b230 <prvAddNewTaskToReadyList+0xc8>)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b1b6:	4b20      	ldr	r3, [pc, #128]	; (800b238 <prvAddNewTaskToReadyList+0xd0>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	3301      	adds	r3, #1
 800b1bc:	4a1e      	ldr	r2, [pc, #120]	; (800b238 <prvAddNewTaskToReadyList+0xd0>)
 800b1be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b1c0:	4b1d      	ldr	r3, [pc, #116]	; (800b238 <prvAddNewTaskToReadyList+0xd0>)
 800b1c2:	681a      	ldr	r2, [r3, #0]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1cc:	4b1b      	ldr	r3, [pc, #108]	; (800b23c <prvAddNewTaskToReadyList+0xd4>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d903      	bls.n	800b1dc <prvAddNewTaskToReadyList+0x74>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d8:	4a18      	ldr	r2, [pc, #96]	; (800b23c <prvAddNewTaskToReadyList+0xd4>)
 800b1da:	6013      	str	r3, [r2, #0]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	4413      	add	r3, r2
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	4a15      	ldr	r2, [pc, #84]	; (800b240 <prvAddNewTaskToReadyList+0xd8>)
 800b1ea:	441a      	add	r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	3304      	adds	r3, #4
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	4610      	mov	r0, r2
 800b1f4:	f7fe fce7 	bl	8009bc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b1f8:	f001 fb5c 	bl	800c8b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b1fc:	4b0d      	ldr	r3, [pc, #52]	; (800b234 <prvAddNewTaskToReadyList+0xcc>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d00e      	beq.n	800b222 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b204:	4b0a      	ldr	r3, [pc, #40]	; (800b230 <prvAddNewTaskToReadyList+0xc8>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b20e:	429a      	cmp	r2, r3
 800b210:	d207      	bcs.n	800b222 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b212:	4b0c      	ldr	r3, [pc, #48]	; (800b244 <prvAddNewTaskToReadyList+0xdc>)
 800b214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b218:	601a      	str	r2, [r3, #0]
 800b21a:	f3bf 8f4f 	dsb	sy
 800b21e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b222:	bf00      	nop
 800b224:	3708      	adds	r7, #8
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	20009b44 	.word	0x20009b44
 800b230:	20009670 	.word	0x20009670
 800b234:	20009b50 	.word	0x20009b50
 800b238:	20009b60 	.word	0x20009b60
 800b23c:	20009b4c 	.word	0x20009b4c
 800b240:	20009674 	.word	0x20009674
 800b244:	e000ed04 	.word	0xe000ed04

0800b248 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b250:	2300      	movs	r3, #0
 800b252:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d019      	beq.n	800b28e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b25a:	4b14      	ldr	r3, [pc, #80]	; (800b2ac <vTaskDelay+0x64>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d00c      	beq.n	800b27c <vTaskDelay+0x34>
	__asm volatile
 800b262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b266:	b672      	cpsid	i
 800b268:	f383 8811 	msr	BASEPRI, r3
 800b26c:	f3bf 8f6f 	isb	sy
 800b270:	f3bf 8f4f 	dsb	sy
 800b274:	b662      	cpsie	i
 800b276:	60bb      	str	r3, [r7, #8]
}
 800b278:	bf00      	nop
 800b27a:	e7fe      	b.n	800b27a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800b27c:	f000 f884 	bl	800b388 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b280:	2100      	movs	r1, #0
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 fe28 	bl	800bed8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b288:	f000 f88c 	bl	800b3a4 <xTaskResumeAll>
 800b28c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d107      	bne.n	800b2a4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800b294:	4b06      	ldr	r3, [pc, #24]	; (800b2b0 <vTaskDelay+0x68>)
 800b296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b29a:	601a      	str	r2, [r3, #0]
 800b29c:	f3bf 8f4f 	dsb	sy
 800b2a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b2a4:	bf00      	nop
 800b2a6:	3710      	adds	r7, #16
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}
 800b2ac:	20009b6c 	.word	0x20009b6c
 800b2b0:	e000ed04 	.word	0xe000ed04

0800b2b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b08a      	sub	sp, #40	; 0x28
 800b2b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b2c2:	463a      	mov	r2, r7
 800b2c4:	1d39      	adds	r1, r7, #4
 800b2c6:	f107 0308 	add.w	r3, r7, #8
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7fe fc1a 	bl	8009b04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b2d0:	6839      	ldr	r1, [r7, #0]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	68ba      	ldr	r2, [r7, #8]
 800b2d6:	9202      	str	r2, [sp, #8]
 800b2d8:	9301      	str	r3, [sp, #4]
 800b2da:	2300      	movs	r3, #0
 800b2dc:	9300      	str	r3, [sp, #0]
 800b2de:	2300      	movs	r3, #0
 800b2e0:	460a      	mov	r2, r1
 800b2e2:	4923      	ldr	r1, [pc, #140]	; (800b370 <vTaskStartScheduler+0xbc>)
 800b2e4:	4823      	ldr	r0, [pc, #140]	; (800b374 <vTaskStartScheduler+0xc0>)
 800b2e6:	f7ff fe05 	bl	800aef4 <xTaskCreateStatic>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	4a22      	ldr	r2, [pc, #136]	; (800b378 <vTaskStartScheduler+0xc4>)
 800b2ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b2f0:	4b21      	ldr	r3, [pc, #132]	; (800b378 <vTaskStartScheduler+0xc4>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d002      	beq.n	800b2fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	617b      	str	r3, [r7, #20]
 800b2fc:	e001      	b.n	800b302 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b2fe:	2300      	movs	r3, #0
 800b300:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	2b01      	cmp	r3, #1
 800b306:	d102      	bne.n	800b30e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b308:	f000 fe3a 	bl	800bf80 <xTimerCreateTimerTask>
 800b30c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	2b01      	cmp	r3, #1
 800b312:	d118      	bne.n	800b346 <vTaskStartScheduler+0x92>
	__asm volatile
 800b314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b318:	b672      	cpsid	i
 800b31a:	f383 8811 	msr	BASEPRI, r3
 800b31e:	f3bf 8f6f 	isb	sy
 800b322:	f3bf 8f4f 	dsb	sy
 800b326:	b662      	cpsie	i
 800b328:	613b      	str	r3, [r7, #16]
}
 800b32a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b32c:	4b13      	ldr	r3, [pc, #76]	; (800b37c <vTaskStartScheduler+0xc8>)
 800b32e:	f04f 32ff 	mov.w	r2, #4294967295
 800b332:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b334:	4b12      	ldr	r3, [pc, #72]	; (800b380 <vTaskStartScheduler+0xcc>)
 800b336:	2201      	movs	r2, #1
 800b338:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b33a:	4b12      	ldr	r3, [pc, #72]	; (800b384 <vTaskStartScheduler+0xd0>)
 800b33c:	2200      	movs	r2, #0
 800b33e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b340:	f001 fa06 	bl	800c750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b344:	e010      	b.n	800b368 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b34c:	d10c      	bne.n	800b368 <vTaskStartScheduler+0xb4>
	__asm volatile
 800b34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b352:	b672      	cpsid	i
 800b354:	f383 8811 	msr	BASEPRI, r3
 800b358:	f3bf 8f6f 	isb	sy
 800b35c:	f3bf 8f4f 	dsb	sy
 800b360:	b662      	cpsie	i
 800b362:	60fb      	str	r3, [r7, #12]
}
 800b364:	bf00      	nop
 800b366:	e7fe      	b.n	800b366 <vTaskStartScheduler+0xb2>
}
 800b368:	bf00      	nop
 800b36a:	3718      	adds	r7, #24
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	08018398 	.word	0x08018398
 800b374:	0800b9e5 	.word	0x0800b9e5
 800b378:	20009b68 	.word	0x20009b68
 800b37c:	20009b64 	.word	0x20009b64
 800b380:	20009b50 	.word	0x20009b50
 800b384:	20009b48 	.word	0x20009b48

0800b388 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b388:	b480      	push	{r7}
 800b38a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b38c:	4b04      	ldr	r3, [pc, #16]	; (800b3a0 <vTaskSuspendAll+0x18>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	3301      	adds	r3, #1
 800b392:	4a03      	ldr	r2, [pc, #12]	; (800b3a0 <vTaskSuspendAll+0x18>)
 800b394:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b396:	bf00      	nop
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr
 800b3a0:	20009b6c 	.word	0x20009b6c

0800b3a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b3b2:	4b43      	ldr	r3, [pc, #268]	; (800b4c0 <xTaskResumeAll+0x11c>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d10c      	bne.n	800b3d4 <xTaskResumeAll+0x30>
	__asm volatile
 800b3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3be:	b672      	cpsid	i
 800b3c0:	f383 8811 	msr	BASEPRI, r3
 800b3c4:	f3bf 8f6f 	isb	sy
 800b3c8:	f3bf 8f4f 	dsb	sy
 800b3cc:	b662      	cpsie	i
 800b3ce:	603b      	str	r3, [r7, #0]
}
 800b3d0:	bf00      	nop
 800b3d2:	e7fe      	b.n	800b3d2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b3d4:	f001 fa3a 	bl	800c84c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b3d8:	4b39      	ldr	r3, [pc, #228]	; (800b4c0 <xTaskResumeAll+0x11c>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	3b01      	subs	r3, #1
 800b3de:	4a38      	ldr	r2, [pc, #224]	; (800b4c0 <xTaskResumeAll+0x11c>)
 800b3e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3e2:	4b37      	ldr	r3, [pc, #220]	; (800b4c0 <xTaskResumeAll+0x11c>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d162      	bne.n	800b4b0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b3ea:	4b36      	ldr	r3, [pc, #216]	; (800b4c4 <xTaskResumeAll+0x120>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d05e      	beq.n	800b4b0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3f2:	e02f      	b.n	800b454 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3f4:	4b34      	ldr	r3, [pc, #208]	; (800b4c8 <xTaskResumeAll+0x124>)
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	68db      	ldr	r3, [r3, #12]
 800b3fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	3318      	adds	r3, #24
 800b400:	4618      	mov	r0, r3
 800b402:	f7fe fc3d 	bl	8009c80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	3304      	adds	r3, #4
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7fe fc38 	bl	8009c80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b414:	4b2d      	ldr	r3, [pc, #180]	; (800b4cc <xTaskResumeAll+0x128>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	429a      	cmp	r2, r3
 800b41a:	d903      	bls.n	800b424 <xTaskResumeAll+0x80>
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b420:	4a2a      	ldr	r2, [pc, #168]	; (800b4cc <xTaskResumeAll+0x128>)
 800b422:	6013      	str	r3, [r2, #0]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b428:	4613      	mov	r3, r2
 800b42a:	009b      	lsls	r3, r3, #2
 800b42c:	4413      	add	r3, r2
 800b42e:	009b      	lsls	r3, r3, #2
 800b430:	4a27      	ldr	r2, [pc, #156]	; (800b4d0 <xTaskResumeAll+0x12c>)
 800b432:	441a      	add	r2, r3
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	3304      	adds	r3, #4
 800b438:	4619      	mov	r1, r3
 800b43a:	4610      	mov	r0, r2
 800b43c:	f7fe fbc3 	bl	8009bc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b444:	4b23      	ldr	r3, [pc, #140]	; (800b4d4 <xTaskResumeAll+0x130>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d302      	bcc.n	800b454 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800b44e:	4b22      	ldr	r3, [pc, #136]	; (800b4d8 <xTaskResumeAll+0x134>)
 800b450:	2201      	movs	r2, #1
 800b452:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b454:	4b1c      	ldr	r3, [pc, #112]	; (800b4c8 <xTaskResumeAll+0x124>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d1cb      	bne.n	800b3f4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d001      	beq.n	800b466 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b462:	f000 fb77 	bl	800bb54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b466:	4b1d      	ldr	r3, [pc, #116]	; (800b4dc <xTaskResumeAll+0x138>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d010      	beq.n	800b494 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b472:	f000 f859 	bl	800b528 <xTaskIncrementTick>
 800b476:	4603      	mov	r3, r0
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d002      	beq.n	800b482 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800b47c:	4b16      	ldr	r3, [pc, #88]	; (800b4d8 <xTaskResumeAll+0x134>)
 800b47e:	2201      	movs	r2, #1
 800b480:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	3b01      	subs	r3, #1
 800b486:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d1f1      	bne.n	800b472 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800b48e:	4b13      	ldr	r3, [pc, #76]	; (800b4dc <xTaskResumeAll+0x138>)
 800b490:	2200      	movs	r2, #0
 800b492:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b494:	4b10      	ldr	r3, [pc, #64]	; (800b4d8 <xTaskResumeAll+0x134>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d009      	beq.n	800b4b0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b49c:	2301      	movs	r3, #1
 800b49e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b4a0:	4b0f      	ldr	r3, [pc, #60]	; (800b4e0 <xTaskResumeAll+0x13c>)
 800b4a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4a6:	601a      	str	r2, [r3, #0]
 800b4a8:	f3bf 8f4f 	dsb	sy
 800b4ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b4b0:	f001 fa00 	bl	800c8b4 <vPortExitCritical>

	return xAlreadyYielded;
 800b4b4:	68bb      	ldr	r3, [r7, #8]
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3710      	adds	r7, #16
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	20009b6c 	.word	0x20009b6c
 800b4c4:	20009b44 	.word	0x20009b44
 800b4c8:	20009b04 	.word	0x20009b04
 800b4cc:	20009b4c 	.word	0x20009b4c
 800b4d0:	20009674 	.word	0x20009674
 800b4d4:	20009670 	.word	0x20009670
 800b4d8:	20009b58 	.word	0x20009b58
 800b4dc:	20009b54 	.word	0x20009b54
 800b4e0:	e000ed04 	.word	0xe000ed04

0800b4e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b4ea:	4b05      	ldr	r3, [pc, #20]	; (800b500 <xTaskGetTickCount+0x1c>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b4f0:	687b      	ldr	r3, [r7, #4]
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	370c      	adds	r7, #12
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	20009b48 	.word	0x20009b48

0800b504 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b082      	sub	sp, #8
 800b508:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b50a:	f001 fa87 	bl	800ca1c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b50e:	2300      	movs	r3, #0
 800b510:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b512:	4b04      	ldr	r3, [pc, #16]	; (800b524 <xTaskGetTickCountFromISR+0x20>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b518:	683b      	ldr	r3, [r7, #0]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3708      	adds	r7, #8
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	20009b48 	.word	0x20009b48

0800b528 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b086      	sub	sp, #24
 800b52c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b52e:	2300      	movs	r3, #0
 800b530:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b532:	4b50      	ldr	r3, [pc, #320]	; (800b674 <xTaskIncrementTick+0x14c>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	f040 808b 	bne.w	800b652 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b53c:	4b4e      	ldr	r3, [pc, #312]	; (800b678 <xTaskIncrementTick+0x150>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	3301      	adds	r3, #1
 800b542:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b544:	4a4c      	ldr	r2, [pc, #304]	; (800b678 <xTaskIncrementTick+0x150>)
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d122      	bne.n	800b596 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800b550:	4b4a      	ldr	r3, [pc, #296]	; (800b67c <xTaskIncrementTick+0x154>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d00c      	beq.n	800b574 <xTaskIncrementTick+0x4c>
	__asm volatile
 800b55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55e:	b672      	cpsid	i
 800b560:	f383 8811 	msr	BASEPRI, r3
 800b564:	f3bf 8f6f 	isb	sy
 800b568:	f3bf 8f4f 	dsb	sy
 800b56c:	b662      	cpsie	i
 800b56e:	603b      	str	r3, [r7, #0]
}
 800b570:	bf00      	nop
 800b572:	e7fe      	b.n	800b572 <xTaskIncrementTick+0x4a>
 800b574:	4b41      	ldr	r3, [pc, #260]	; (800b67c <xTaskIncrementTick+0x154>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	60fb      	str	r3, [r7, #12]
 800b57a:	4b41      	ldr	r3, [pc, #260]	; (800b680 <xTaskIncrementTick+0x158>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4a3f      	ldr	r2, [pc, #252]	; (800b67c <xTaskIncrementTick+0x154>)
 800b580:	6013      	str	r3, [r2, #0]
 800b582:	4a3f      	ldr	r2, [pc, #252]	; (800b680 <xTaskIncrementTick+0x158>)
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	6013      	str	r3, [r2, #0]
 800b588:	4b3e      	ldr	r3, [pc, #248]	; (800b684 <xTaskIncrementTick+0x15c>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	3301      	adds	r3, #1
 800b58e:	4a3d      	ldr	r2, [pc, #244]	; (800b684 <xTaskIncrementTick+0x15c>)
 800b590:	6013      	str	r3, [r2, #0]
 800b592:	f000 fadf 	bl	800bb54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b596:	4b3c      	ldr	r3, [pc, #240]	; (800b688 <xTaskIncrementTick+0x160>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	693a      	ldr	r2, [r7, #16]
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d349      	bcc.n	800b634 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5a0:	4b36      	ldr	r3, [pc, #216]	; (800b67c <xTaskIncrementTick+0x154>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d104      	bne.n	800b5b4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5aa:	4b37      	ldr	r3, [pc, #220]	; (800b688 <xTaskIncrementTick+0x160>)
 800b5ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b5b0:	601a      	str	r2, [r3, #0]
					break;
 800b5b2:	e03f      	b.n	800b634 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5b4:	4b31      	ldr	r3, [pc, #196]	; (800b67c <xTaskIncrementTick+0x154>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	68db      	ldr	r3, [r3, #12]
 800b5ba:	68db      	ldr	r3, [r3, #12]
 800b5bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b5c4:	693a      	ldr	r2, [r7, #16]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d203      	bcs.n	800b5d4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b5cc:	4a2e      	ldr	r2, [pc, #184]	; (800b688 <xTaskIncrementTick+0x160>)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b5d2:	e02f      	b.n	800b634 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	3304      	adds	r3, #4
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7fe fb51 	bl	8009c80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d004      	beq.n	800b5f0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	3318      	adds	r3, #24
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7fe fb48 	bl	8009c80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f4:	4b25      	ldr	r3, [pc, #148]	; (800b68c <xTaskIncrementTick+0x164>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d903      	bls.n	800b604 <xTaskIncrementTick+0xdc>
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b600:	4a22      	ldr	r2, [pc, #136]	; (800b68c <xTaskIncrementTick+0x164>)
 800b602:	6013      	str	r3, [r2, #0]
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b608:	4613      	mov	r3, r2
 800b60a:	009b      	lsls	r3, r3, #2
 800b60c:	4413      	add	r3, r2
 800b60e:	009b      	lsls	r3, r3, #2
 800b610:	4a1f      	ldr	r2, [pc, #124]	; (800b690 <xTaskIncrementTick+0x168>)
 800b612:	441a      	add	r2, r3
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	3304      	adds	r3, #4
 800b618:	4619      	mov	r1, r3
 800b61a:	4610      	mov	r0, r2
 800b61c:	f7fe fad3 	bl	8009bc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b624:	4b1b      	ldr	r3, [pc, #108]	; (800b694 <xTaskIncrementTick+0x16c>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d3b8      	bcc.n	800b5a0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800b62e:	2301      	movs	r3, #1
 800b630:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b632:	e7b5      	b.n	800b5a0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b634:	4b17      	ldr	r3, [pc, #92]	; (800b694 <xTaskIncrementTick+0x16c>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b63a:	4915      	ldr	r1, [pc, #84]	; (800b690 <xTaskIncrementTick+0x168>)
 800b63c:	4613      	mov	r3, r2
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	4413      	add	r3, r2
 800b642:	009b      	lsls	r3, r3, #2
 800b644:	440b      	add	r3, r1
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d907      	bls.n	800b65c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800b64c:	2301      	movs	r3, #1
 800b64e:	617b      	str	r3, [r7, #20]
 800b650:	e004      	b.n	800b65c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b652:	4b11      	ldr	r3, [pc, #68]	; (800b698 <xTaskIncrementTick+0x170>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	3301      	adds	r3, #1
 800b658:	4a0f      	ldr	r2, [pc, #60]	; (800b698 <xTaskIncrementTick+0x170>)
 800b65a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b65c:	4b0f      	ldr	r3, [pc, #60]	; (800b69c <xTaskIncrementTick+0x174>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d001      	beq.n	800b668 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800b664:	2301      	movs	r3, #1
 800b666:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b668:	697b      	ldr	r3, [r7, #20]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3718      	adds	r7, #24
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	20009b6c 	.word	0x20009b6c
 800b678:	20009b48 	.word	0x20009b48
 800b67c:	20009afc 	.word	0x20009afc
 800b680:	20009b00 	.word	0x20009b00
 800b684:	20009b5c 	.word	0x20009b5c
 800b688:	20009b64 	.word	0x20009b64
 800b68c:	20009b4c 	.word	0x20009b4c
 800b690:	20009674 	.word	0x20009674
 800b694:	20009670 	.word	0x20009670
 800b698:	20009b54 	.word	0x20009b54
 800b69c:	20009b58 	.word	0x20009b58

0800b6a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b085      	sub	sp, #20
 800b6a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b6a6:	4b29      	ldr	r3, [pc, #164]	; (800b74c <vTaskSwitchContext+0xac>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d003      	beq.n	800b6b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b6ae:	4b28      	ldr	r3, [pc, #160]	; (800b750 <vTaskSwitchContext+0xb0>)
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b6b4:	e043      	b.n	800b73e <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800b6b6:	4b26      	ldr	r3, [pc, #152]	; (800b750 <vTaskSwitchContext+0xb0>)
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6bc:	4b25      	ldr	r3, [pc, #148]	; (800b754 <vTaskSwitchContext+0xb4>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	60fb      	str	r3, [r7, #12]
 800b6c2:	e012      	b.n	800b6ea <vTaskSwitchContext+0x4a>
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d10c      	bne.n	800b6e4 <vTaskSwitchContext+0x44>
	__asm volatile
 800b6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ce:	b672      	cpsid	i
 800b6d0:	f383 8811 	msr	BASEPRI, r3
 800b6d4:	f3bf 8f6f 	isb	sy
 800b6d8:	f3bf 8f4f 	dsb	sy
 800b6dc:	b662      	cpsie	i
 800b6de:	607b      	str	r3, [r7, #4]
}
 800b6e0:	bf00      	nop
 800b6e2:	e7fe      	b.n	800b6e2 <vTaskSwitchContext+0x42>
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	3b01      	subs	r3, #1
 800b6e8:	60fb      	str	r3, [r7, #12]
 800b6ea:	491b      	ldr	r1, [pc, #108]	; (800b758 <vTaskSwitchContext+0xb8>)
 800b6ec:	68fa      	ldr	r2, [r7, #12]
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	009b      	lsls	r3, r3, #2
 800b6f2:	4413      	add	r3, r2
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	440b      	add	r3, r1
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d0e2      	beq.n	800b6c4 <vTaskSwitchContext+0x24>
 800b6fe:	68fa      	ldr	r2, [r7, #12]
 800b700:	4613      	mov	r3, r2
 800b702:	009b      	lsls	r3, r3, #2
 800b704:	4413      	add	r3, r2
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	4a13      	ldr	r2, [pc, #76]	; (800b758 <vTaskSwitchContext+0xb8>)
 800b70a:	4413      	add	r3, r2
 800b70c:	60bb      	str	r3, [r7, #8]
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	685a      	ldr	r2, [r3, #4]
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	605a      	str	r2, [r3, #4]
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	685a      	ldr	r2, [r3, #4]
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	3308      	adds	r3, #8
 800b720:	429a      	cmp	r2, r3
 800b722:	d104      	bne.n	800b72e <vTaskSwitchContext+0x8e>
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	685a      	ldr	r2, [r3, #4]
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	605a      	str	r2, [r3, #4]
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	4a09      	ldr	r2, [pc, #36]	; (800b75c <vTaskSwitchContext+0xbc>)
 800b736:	6013      	str	r3, [r2, #0]
 800b738:	4a06      	ldr	r2, [pc, #24]	; (800b754 <vTaskSwitchContext+0xb4>)
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	6013      	str	r3, [r2, #0]
}
 800b73e:	bf00      	nop
 800b740:	3714      	adds	r7, #20
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	20009b6c 	.word	0x20009b6c
 800b750:	20009b58 	.word	0x20009b58
 800b754:	20009b4c 	.word	0x20009b4c
 800b758:	20009674 	.word	0x20009674
 800b75c:	20009670 	.word	0x20009670

0800b760 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d10c      	bne.n	800b78a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800b770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b774:	b672      	cpsid	i
 800b776:	f383 8811 	msr	BASEPRI, r3
 800b77a:	f3bf 8f6f 	isb	sy
 800b77e:	f3bf 8f4f 	dsb	sy
 800b782:	b662      	cpsie	i
 800b784:	60fb      	str	r3, [r7, #12]
}
 800b786:	bf00      	nop
 800b788:	e7fe      	b.n	800b788 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b78a:	4b07      	ldr	r3, [pc, #28]	; (800b7a8 <vTaskPlaceOnEventList+0x48>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	3318      	adds	r3, #24
 800b790:	4619      	mov	r1, r3
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f7fe fa3b 	bl	8009c0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b798:	2101      	movs	r1, #1
 800b79a:	6838      	ldr	r0, [r7, #0]
 800b79c:	f000 fb9c 	bl	800bed8 <prvAddCurrentTaskToDelayedList>
}
 800b7a0:	bf00      	nop
 800b7a2:	3710      	adds	r7, #16
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	20009670 	.word	0x20009670

0800b7ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b086      	sub	sp, #24
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d10c      	bne.n	800b7d8 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800b7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c2:	b672      	cpsid	i
 800b7c4:	f383 8811 	msr	BASEPRI, r3
 800b7c8:	f3bf 8f6f 	isb	sy
 800b7cc:	f3bf 8f4f 	dsb	sy
 800b7d0:	b662      	cpsie	i
 800b7d2:	617b      	str	r3, [r7, #20]
}
 800b7d4:	bf00      	nop
 800b7d6:	e7fe      	b.n	800b7d6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b7d8:	4b0a      	ldr	r3, [pc, #40]	; (800b804 <vTaskPlaceOnEventListRestricted+0x58>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	3318      	adds	r3, #24
 800b7de:	4619      	mov	r1, r3
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	f7fe f9f0 	bl	8009bc6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d002      	beq.n	800b7f2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800b7ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b7f0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b7f2:	6879      	ldr	r1, [r7, #4]
 800b7f4:	68b8      	ldr	r0, [r7, #8]
 800b7f6:	f000 fb6f 	bl	800bed8 <prvAddCurrentTaskToDelayedList>
	}
 800b7fa:	bf00      	nop
 800b7fc:	3718      	adds	r7, #24
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
 800b802:	bf00      	nop
 800b804:	20009670 	.word	0x20009670

0800b808 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b086      	sub	sp, #24
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d10c      	bne.n	800b838 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800b81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b822:	b672      	cpsid	i
 800b824:	f383 8811 	msr	BASEPRI, r3
 800b828:	f3bf 8f6f 	isb	sy
 800b82c:	f3bf 8f4f 	dsb	sy
 800b830:	b662      	cpsie	i
 800b832:	60fb      	str	r3, [r7, #12]
}
 800b834:	bf00      	nop
 800b836:	e7fe      	b.n	800b836 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	3318      	adds	r3, #24
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7fe fa1f 	bl	8009c80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b842:	4b1e      	ldr	r3, [pc, #120]	; (800b8bc <xTaskRemoveFromEventList+0xb4>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d11d      	bne.n	800b886 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	3304      	adds	r3, #4
 800b84e:	4618      	mov	r0, r3
 800b850:	f7fe fa16 	bl	8009c80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b858:	4b19      	ldr	r3, [pc, #100]	; (800b8c0 <xTaskRemoveFromEventList+0xb8>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d903      	bls.n	800b868 <xTaskRemoveFromEventList+0x60>
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b864:	4a16      	ldr	r2, [pc, #88]	; (800b8c0 <xTaskRemoveFromEventList+0xb8>)
 800b866:	6013      	str	r3, [r2, #0]
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b86c:	4613      	mov	r3, r2
 800b86e:	009b      	lsls	r3, r3, #2
 800b870:	4413      	add	r3, r2
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	4a13      	ldr	r2, [pc, #76]	; (800b8c4 <xTaskRemoveFromEventList+0xbc>)
 800b876:	441a      	add	r2, r3
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	3304      	adds	r3, #4
 800b87c:	4619      	mov	r1, r3
 800b87e:	4610      	mov	r0, r2
 800b880:	f7fe f9a1 	bl	8009bc6 <vListInsertEnd>
 800b884:	e005      	b.n	800b892 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	3318      	adds	r3, #24
 800b88a:	4619      	mov	r1, r3
 800b88c:	480e      	ldr	r0, [pc, #56]	; (800b8c8 <xTaskRemoveFromEventList+0xc0>)
 800b88e:	f7fe f99a 	bl	8009bc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b896:	4b0d      	ldr	r3, [pc, #52]	; (800b8cc <xTaskRemoveFromEventList+0xc4>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d905      	bls.n	800b8ac <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b8a4:	4b0a      	ldr	r3, [pc, #40]	; (800b8d0 <xTaskRemoveFromEventList+0xc8>)
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	601a      	str	r2, [r3, #0]
 800b8aa:	e001      	b.n	800b8b0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b8b0:	697b      	ldr	r3, [r7, #20]
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3718      	adds	r7, #24
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	20009b6c 	.word	0x20009b6c
 800b8c0:	20009b4c 	.word	0x20009b4c
 800b8c4:	20009674 	.word	0x20009674
 800b8c8:	20009b04 	.word	0x20009b04
 800b8cc:	20009670 	.word	0x20009670
 800b8d0:	20009b58 	.word	0x20009b58

0800b8d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b8dc:	4b06      	ldr	r3, [pc, #24]	; (800b8f8 <vTaskInternalSetTimeOutState+0x24>)
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b8e4:	4b05      	ldr	r3, [pc, #20]	; (800b8fc <vTaskInternalSetTimeOutState+0x28>)
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	605a      	str	r2, [r3, #4]
}
 800b8ec:	bf00      	nop
 800b8ee:	370c      	adds	r7, #12
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr
 800b8f8:	20009b5c 	.word	0x20009b5c
 800b8fc:	20009b48 	.word	0x20009b48

0800b900 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b088      	sub	sp, #32
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d10c      	bne.n	800b92a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800b910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b914:	b672      	cpsid	i
 800b916:	f383 8811 	msr	BASEPRI, r3
 800b91a:	f3bf 8f6f 	isb	sy
 800b91e:	f3bf 8f4f 	dsb	sy
 800b922:	b662      	cpsie	i
 800b924:	613b      	str	r3, [r7, #16]
}
 800b926:	bf00      	nop
 800b928:	e7fe      	b.n	800b928 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d10c      	bne.n	800b94a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800b930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b934:	b672      	cpsid	i
 800b936:	f383 8811 	msr	BASEPRI, r3
 800b93a:	f3bf 8f6f 	isb	sy
 800b93e:	f3bf 8f4f 	dsb	sy
 800b942:	b662      	cpsie	i
 800b944:	60fb      	str	r3, [r7, #12]
}
 800b946:	bf00      	nop
 800b948:	e7fe      	b.n	800b948 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800b94a:	f000 ff7f 	bl	800c84c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b94e:	4b1d      	ldr	r3, [pc, #116]	; (800b9c4 <xTaskCheckForTimeOut+0xc4>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	69ba      	ldr	r2, [r7, #24]
 800b95a:	1ad3      	subs	r3, r2, r3
 800b95c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b966:	d102      	bne.n	800b96e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b968:	2300      	movs	r3, #0
 800b96a:	61fb      	str	r3, [r7, #28]
 800b96c:	e023      	b.n	800b9b6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	4b15      	ldr	r3, [pc, #84]	; (800b9c8 <xTaskCheckForTimeOut+0xc8>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	429a      	cmp	r2, r3
 800b978:	d007      	beq.n	800b98a <xTaskCheckForTimeOut+0x8a>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	69ba      	ldr	r2, [r7, #24]
 800b980:	429a      	cmp	r2, r3
 800b982:	d302      	bcc.n	800b98a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b984:	2301      	movs	r3, #1
 800b986:	61fb      	str	r3, [r7, #28]
 800b988:	e015      	b.n	800b9b6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	697a      	ldr	r2, [r7, #20]
 800b990:	429a      	cmp	r2, r3
 800b992:	d20b      	bcs.n	800b9ac <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	681a      	ldr	r2, [r3, #0]
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	1ad2      	subs	r2, r2, r3
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f7ff ff97 	bl	800b8d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	61fb      	str	r3, [r7, #28]
 800b9aa:	e004      	b.n	800b9b6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b9b6:	f000 ff7d 	bl	800c8b4 <vPortExitCritical>

	return xReturn;
 800b9ba:	69fb      	ldr	r3, [r7, #28]
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3720      	adds	r7, #32
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	20009b48 	.word	0x20009b48
 800b9c8:	20009b5c 	.word	0x20009b5c

0800b9cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b9d0:	4b03      	ldr	r3, [pc, #12]	; (800b9e0 <vTaskMissedYield+0x14>)
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	601a      	str	r2, [r3, #0]
}
 800b9d6:	bf00      	nop
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr
 800b9e0:	20009b58 	.word	0x20009b58

0800b9e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b9ec:	f000 f852 	bl	800ba94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b9f0:	4b06      	ldr	r3, [pc, #24]	; (800ba0c <prvIdleTask+0x28>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d9f9      	bls.n	800b9ec <prvIdleTask+0x8>
			{
				taskYIELD();
 800b9f8:	4b05      	ldr	r3, [pc, #20]	; (800ba10 <prvIdleTask+0x2c>)
 800b9fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9fe:	601a      	str	r2, [r3, #0]
 800ba00:	f3bf 8f4f 	dsb	sy
 800ba04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ba08:	e7f0      	b.n	800b9ec <prvIdleTask+0x8>
 800ba0a:	bf00      	nop
 800ba0c:	20009674 	.word	0x20009674
 800ba10:	e000ed04 	.word	0xe000ed04

0800ba14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	607b      	str	r3, [r7, #4]
 800ba1e:	e00c      	b.n	800ba3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	4613      	mov	r3, r2
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	4413      	add	r3, r2
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	4a12      	ldr	r2, [pc, #72]	; (800ba74 <prvInitialiseTaskLists+0x60>)
 800ba2c:	4413      	add	r3, r2
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7fe f89c 	bl	8009b6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	3301      	adds	r3, #1
 800ba38:	607b      	str	r3, [r7, #4]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2b37      	cmp	r3, #55	; 0x37
 800ba3e:	d9ef      	bls.n	800ba20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ba40:	480d      	ldr	r0, [pc, #52]	; (800ba78 <prvInitialiseTaskLists+0x64>)
 800ba42:	f7fe f893 	bl	8009b6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ba46:	480d      	ldr	r0, [pc, #52]	; (800ba7c <prvInitialiseTaskLists+0x68>)
 800ba48:	f7fe f890 	bl	8009b6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ba4c:	480c      	ldr	r0, [pc, #48]	; (800ba80 <prvInitialiseTaskLists+0x6c>)
 800ba4e:	f7fe f88d 	bl	8009b6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ba52:	480c      	ldr	r0, [pc, #48]	; (800ba84 <prvInitialiseTaskLists+0x70>)
 800ba54:	f7fe f88a 	bl	8009b6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba58:	480b      	ldr	r0, [pc, #44]	; (800ba88 <prvInitialiseTaskLists+0x74>)
 800ba5a:	f7fe f887 	bl	8009b6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba5e:	4b0b      	ldr	r3, [pc, #44]	; (800ba8c <prvInitialiseTaskLists+0x78>)
 800ba60:	4a05      	ldr	r2, [pc, #20]	; (800ba78 <prvInitialiseTaskLists+0x64>)
 800ba62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba64:	4b0a      	ldr	r3, [pc, #40]	; (800ba90 <prvInitialiseTaskLists+0x7c>)
 800ba66:	4a05      	ldr	r2, [pc, #20]	; (800ba7c <prvInitialiseTaskLists+0x68>)
 800ba68:	601a      	str	r2, [r3, #0]
}
 800ba6a:	bf00      	nop
 800ba6c:	3708      	adds	r7, #8
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	20009674 	.word	0x20009674
 800ba78:	20009ad4 	.word	0x20009ad4
 800ba7c:	20009ae8 	.word	0x20009ae8
 800ba80:	20009b04 	.word	0x20009b04
 800ba84:	20009b18 	.word	0x20009b18
 800ba88:	20009b30 	.word	0x20009b30
 800ba8c:	20009afc 	.word	0x20009afc
 800ba90:	20009b00 	.word	0x20009b00

0800ba94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba9a:	e019      	b.n	800bad0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ba9c:	f000 fed6 	bl	800c84c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800baa0:	4b10      	ldr	r3, [pc, #64]	; (800bae4 <prvCheckTasksWaitingTermination+0x50>)
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	68db      	ldr	r3, [r3, #12]
 800baa6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	3304      	adds	r3, #4
 800baac:	4618      	mov	r0, r3
 800baae:	f7fe f8e7 	bl	8009c80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bab2:	4b0d      	ldr	r3, [pc, #52]	; (800bae8 <prvCheckTasksWaitingTermination+0x54>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	3b01      	subs	r3, #1
 800bab8:	4a0b      	ldr	r2, [pc, #44]	; (800bae8 <prvCheckTasksWaitingTermination+0x54>)
 800baba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800babc:	4b0b      	ldr	r3, [pc, #44]	; (800baec <prvCheckTasksWaitingTermination+0x58>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	3b01      	subs	r3, #1
 800bac2:	4a0a      	ldr	r2, [pc, #40]	; (800baec <prvCheckTasksWaitingTermination+0x58>)
 800bac4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bac6:	f000 fef5 	bl	800c8b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 f810 	bl	800baf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bad0:	4b06      	ldr	r3, [pc, #24]	; (800baec <prvCheckTasksWaitingTermination+0x58>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d1e1      	bne.n	800ba9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bad8:	bf00      	nop
 800bada:	bf00      	nop
 800badc:	3708      	adds	r7, #8
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	20009b18 	.word	0x20009b18
 800bae8:	20009b44 	.word	0x20009b44
 800baec:	20009b2c 	.word	0x20009b2c

0800baf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d108      	bne.n	800bb14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb06:	4618      	mov	r0, r3
 800bb08:	f001 f896 	bl	800cc38 <vPortFree>
				vPortFree( pxTCB );
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f001 f893 	bl	800cc38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bb12:	e01a      	b.n	800bb4a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d103      	bne.n	800bb26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f001 f88a 	bl	800cc38 <vPortFree>
	}
 800bb24:	e011      	b.n	800bb4a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bb2c:	2b02      	cmp	r3, #2
 800bb2e:	d00c      	beq.n	800bb4a <prvDeleteTCB+0x5a>
	__asm volatile
 800bb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb34:	b672      	cpsid	i
 800bb36:	f383 8811 	msr	BASEPRI, r3
 800bb3a:	f3bf 8f6f 	isb	sy
 800bb3e:	f3bf 8f4f 	dsb	sy
 800bb42:	b662      	cpsie	i
 800bb44:	60fb      	str	r3, [r7, #12]
}
 800bb46:	bf00      	nop
 800bb48:	e7fe      	b.n	800bb48 <prvDeleteTCB+0x58>
	}
 800bb4a:	bf00      	nop
 800bb4c:	3710      	adds	r7, #16
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
	...

0800bb54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bb54:	b480      	push	{r7}
 800bb56:	b083      	sub	sp, #12
 800bb58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb5a:	4b0c      	ldr	r3, [pc, #48]	; (800bb8c <prvResetNextTaskUnblockTime+0x38>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d104      	bne.n	800bb6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bb64:	4b0a      	ldr	r3, [pc, #40]	; (800bb90 <prvResetNextTaskUnblockTime+0x3c>)
 800bb66:	f04f 32ff 	mov.w	r2, #4294967295
 800bb6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb6c:	e008      	b.n	800bb80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb6e:	4b07      	ldr	r3, [pc, #28]	; (800bb8c <prvResetNextTaskUnblockTime+0x38>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	68db      	ldr	r3, [r3, #12]
 800bb74:	68db      	ldr	r3, [r3, #12]
 800bb76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	4a04      	ldr	r2, [pc, #16]	; (800bb90 <prvResetNextTaskUnblockTime+0x3c>)
 800bb7e:	6013      	str	r3, [r2, #0]
}
 800bb80:	bf00      	nop
 800bb82:	370c      	adds	r7, #12
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr
 800bb8c:	20009afc 	.word	0x20009afc
 800bb90:	20009b64 	.word	0x20009b64

0800bb94 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800bb94:	b480      	push	{r7}
 800bb96:	b083      	sub	sp, #12
 800bb98:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800bb9a:	4b05      	ldr	r3, [pc, #20]	; (800bbb0 <xTaskGetCurrentTaskHandle+0x1c>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800bba0:	687b      	ldr	r3, [r7, #4]
	}
 800bba2:	4618      	mov	r0, r3
 800bba4:	370c      	adds	r7, #12
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr
 800bbae:	bf00      	nop
 800bbb0:	20009670 	.word	0x20009670

0800bbb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bbba:	4b0b      	ldr	r3, [pc, #44]	; (800bbe8 <xTaskGetSchedulerState+0x34>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d102      	bne.n	800bbc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	607b      	str	r3, [r7, #4]
 800bbc6:	e008      	b.n	800bbda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbc8:	4b08      	ldr	r3, [pc, #32]	; (800bbec <xTaskGetSchedulerState+0x38>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d102      	bne.n	800bbd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bbd0:	2302      	movs	r3, #2
 800bbd2:	607b      	str	r3, [r7, #4]
 800bbd4:	e001      	b.n	800bbda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bbda:	687b      	ldr	r3, [r7, #4]
	}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	370c      	adds	r7, #12
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr
 800bbe8:	20009b50 	.word	0x20009b50
 800bbec:	20009b6c 	.word	0x20009b6c

0800bbf0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d051      	beq.n	800bcaa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc0a:	4b2a      	ldr	r3, [pc, #168]	; (800bcb4 <xTaskPriorityInherit+0xc4>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d241      	bcs.n	800bc98 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	699b      	ldr	r3, [r3, #24]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	db06      	blt.n	800bc2a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc1c:	4b25      	ldr	r3, [pc, #148]	; (800bcb4 <xTaskPriorityInherit+0xc4>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	6959      	ldr	r1, [r3, #20]
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc32:	4613      	mov	r3, r2
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	4413      	add	r3, r2
 800bc38:	009b      	lsls	r3, r3, #2
 800bc3a:	4a1f      	ldr	r2, [pc, #124]	; (800bcb8 <xTaskPriorityInherit+0xc8>)
 800bc3c:	4413      	add	r3, r2
 800bc3e:	4299      	cmp	r1, r3
 800bc40:	d122      	bne.n	800bc88 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	3304      	adds	r3, #4
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7fe f81a 	bl	8009c80 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bc4c:	4b19      	ldr	r3, [pc, #100]	; (800bcb4 <xTaskPriorityInherit+0xc4>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc5a:	4b18      	ldr	r3, [pc, #96]	; (800bcbc <xTaskPriorityInherit+0xcc>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d903      	bls.n	800bc6a <xTaskPriorityInherit+0x7a>
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc66:	4a15      	ldr	r2, [pc, #84]	; (800bcbc <xTaskPriorityInherit+0xcc>)
 800bc68:	6013      	str	r3, [r2, #0]
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc6e:	4613      	mov	r3, r2
 800bc70:	009b      	lsls	r3, r3, #2
 800bc72:	4413      	add	r3, r2
 800bc74:	009b      	lsls	r3, r3, #2
 800bc76:	4a10      	ldr	r2, [pc, #64]	; (800bcb8 <xTaskPriorityInherit+0xc8>)
 800bc78:	441a      	add	r2, r3
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	3304      	adds	r3, #4
 800bc7e:	4619      	mov	r1, r3
 800bc80:	4610      	mov	r0, r2
 800bc82:	f7fd ffa0 	bl	8009bc6 <vListInsertEnd>
 800bc86:	e004      	b.n	800bc92 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bc88:	4b0a      	ldr	r3, [pc, #40]	; (800bcb4 <xTaskPriorityInherit+0xc4>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bc92:	2301      	movs	r3, #1
 800bc94:	60fb      	str	r3, [r7, #12]
 800bc96:	e008      	b.n	800bcaa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc9c:	4b05      	ldr	r3, [pc, #20]	; (800bcb4 <xTaskPriorityInherit+0xc4>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d201      	bcs.n	800bcaa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bca6:	2301      	movs	r3, #1
 800bca8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
	}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3710      	adds	r7, #16
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	20009670 	.word	0x20009670
 800bcb8:	20009674 	.word	0x20009674
 800bcbc:	20009b4c 	.word	0x20009b4c

0800bcc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b086      	sub	sp, #24
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bccc:	2300      	movs	r3, #0
 800bcce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d05a      	beq.n	800bd8c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bcd6:	4b30      	ldr	r3, [pc, #192]	; (800bd98 <xTaskPriorityDisinherit+0xd8>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	693a      	ldr	r2, [r7, #16]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d00c      	beq.n	800bcfa <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800bce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce4:	b672      	cpsid	i
 800bce6:	f383 8811 	msr	BASEPRI, r3
 800bcea:	f3bf 8f6f 	isb	sy
 800bcee:	f3bf 8f4f 	dsb	sy
 800bcf2:	b662      	cpsie	i
 800bcf4:	60fb      	str	r3, [r7, #12]
}
 800bcf6:	bf00      	nop
 800bcf8:	e7fe      	b.n	800bcf8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d10c      	bne.n	800bd1c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800bd02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd06:	b672      	cpsid	i
 800bd08:	f383 8811 	msr	BASEPRI, r3
 800bd0c:	f3bf 8f6f 	isb	sy
 800bd10:	f3bf 8f4f 	dsb	sy
 800bd14:	b662      	cpsie	i
 800bd16:	60bb      	str	r3, [r7, #8]
}
 800bd18:	bf00      	nop
 800bd1a:	e7fe      	b.n	800bd1a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd20:	1e5a      	subs	r2, r3, #1
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d02c      	beq.n	800bd8c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d128      	bne.n	800bd8c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	3304      	adds	r3, #4
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7fd ff9e 	bl	8009c80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd50:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd5c:	4b0f      	ldr	r3, [pc, #60]	; (800bd9c <xTaskPriorityDisinherit+0xdc>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d903      	bls.n	800bd6c <xTaskPriorityDisinherit+0xac>
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd68:	4a0c      	ldr	r2, [pc, #48]	; (800bd9c <xTaskPriorityDisinherit+0xdc>)
 800bd6a:	6013      	str	r3, [r2, #0]
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd70:	4613      	mov	r3, r2
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	4413      	add	r3, r2
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	4a09      	ldr	r2, [pc, #36]	; (800bda0 <xTaskPriorityDisinherit+0xe0>)
 800bd7a:	441a      	add	r2, r3
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	3304      	adds	r3, #4
 800bd80:	4619      	mov	r1, r3
 800bd82:	4610      	mov	r0, r2
 800bd84:	f7fd ff1f 	bl	8009bc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd8c:	697b      	ldr	r3, [r7, #20]
	}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3718      	adds	r7, #24
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	20009670 	.word	0x20009670
 800bd9c:	20009b4c 	.word	0x20009b4c
 800bda0:	20009674 	.word	0x20009674

0800bda4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b088      	sub	sp, #32
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d06e      	beq.n	800be9a <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bdbc:	69bb      	ldr	r3, [r7, #24]
 800bdbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d10c      	bne.n	800bdde <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800bdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc8:	b672      	cpsid	i
 800bdca:	f383 8811 	msr	BASEPRI, r3
 800bdce:	f3bf 8f6f 	isb	sy
 800bdd2:	f3bf 8f4f 	dsb	sy
 800bdd6:	b662      	cpsie	i
 800bdd8:	60fb      	str	r3, [r7, #12]
}
 800bdda:	bf00      	nop
 800bddc:	e7fe      	b.n	800bddc <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bdde:	69bb      	ldr	r3, [r7, #24]
 800bde0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bde2:	683a      	ldr	r2, [r7, #0]
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d902      	bls.n	800bdee <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	61fb      	str	r3, [r7, #28]
 800bdec:	e002      	b.n	800bdf4 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bdee:	69bb      	ldr	r3, [r7, #24]
 800bdf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdf2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bdf4:	69bb      	ldr	r3, [r7, #24]
 800bdf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf8:	69fa      	ldr	r2, [r7, #28]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d04d      	beq.n	800be9a <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bdfe:	69bb      	ldr	r3, [r7, #24]
 800be00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be02:	697a      	ldr	r2, [r7, #20]
 800be04:	429a      	cmp	r2, r3
 800be06:	d148      	bne.n	800be9a <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800be08:	4b26      	ldr	r3, [pc, #152]	; (800bea4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	69ba      	ldr	r2, [r7, #24]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d10c      	bne.n	800be2c <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800be12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be16:	b672      	cpsid	i
 800be18:	f383 8811 	msr	BASEPRI, r3
 800be1c:	f3bf 8f6f 	isb	sy
 800be20:	f3bf 8f4f 	dsb	sy
 800be24:	b662      	cpsie	i
 800be26:	60bb      	str	r3, [r7, #8]
}
 800be28:	bf00      	nop
 800be2a:	e7fe      	b.n	800be2a <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800be2c:	69bb      	ldr	r3, [r7, #24]
 800be2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be30:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800be32:	69bb      	ldr	r3, [r7, #24]
 800be34:	69fa      	ldr	r2, [r7, #28]
 800be36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800be38:	69bb      	ldr	r3, [r7, #24]
 800be3a:	699b      	ldr	r3, [r3, #24]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	db04      	blt.n	800be4a <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be40:	69fb      	ldr	r3, [r7, #28]
 800be42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800be46:	69bb      	ldr	r3, [r7, #24]
 800be48:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800be4a:	69bb      	ldr	r3, [r7, #24]
 800be4c:	6959      	ldr	r1, [r3, #20]
 800be4e:	693a      	ldr	r2, [r7, #16]
 800be50:	4613      	mov	r3, r2
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	4413      	add	r3, r2
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	4a13      	ldr	r2, [pc, #76]	; (800bea8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800be5a:	4413      	add	r3, r2
 800be5c:	4299      	cmp	r1, r3
 800be5e:	d11c      	bne.n	800be9a <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be60:	69bb      	ldr	r3, [r7, #24]
 800be62:	3304      	adds	r3, #4
 800be64:	4618      	mov	r0, r3
 800be66:	f7fd ff0b 	bl	8009c80 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800be6a:	69bb      	ldr	r3, [r7, #24]
 800be6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be6e:	4b0f      	ldr	r3, [pc, #60]	; (800beac <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	429a      	cmp	r2, r3
 800be74:	d903      	bls.n	800be7e <vTaskPriorityDisinheritAfterTimeout+0xda>
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be7a:	4a0c      	ldr	r2, [pc, #48]	; (800beac <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800be7c:	6013      	str	r3, [r2, #0]
 800be7e:	69bb      	ldr	r3, [r7, #24]
 800be80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be82:	4613      	mov	r3, r2
 800be84:	009b      	lsls	r3, r3, #2
 800be86:	4413      	add	r3, r2
 800be88:	009b      	lsls	r3, r3, #2
 800be8a:	4a07      	ldr	r2, [pc, #28]	; (800bea8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800be8c:	441a      	add	r2, r3
 800be8e:	69bb      	ldr	r3, [r7, #24]
 800be90:	3304      	adds	r3, #4
 800be92:	4619      	mov	r1, r3
 800be94:	4610      	mov	r0, r2
 800be96:	f7fd fe96 	bl	8009bc6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800be9a:	bf00      	nop
 800be9c:	3720      	adds	r7, #32
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop
 800bea4:	20009670 	.word	0x20009670
 800bea8:	20009674 	.word	0x20009674
 800beac:	20009b4c 	.word	0x20009b4c

0800beb0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800beb0:	b480      	push	{r7}
 800beb2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800beb4:	4b07      	ldr	r3, [pc, #28]	; (800bed4 <pvTaskIncrementMutexHeldCount+0x24>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d004      	beq.n	800bec6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bebc:	4b05      	ldr	r3, [pc, #20]	; (800bed4 <pvTaskIncrementMutexHeldCount+0x24>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bec2:	3201      	adds	r2, #1
 800bec4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bec6:	4b03      	ldr	r3, [pc, #12]	; (800bed4 <pvTaskIncrementMutexHeldCount+0x24>)
 800bec8:	681b      	ldr	r3, [r3, #0]
	}
 800beca:	4618      	mov	r0, r3
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr
 800bed4:	20009670 	.word	0x20009670

0800bed8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b084      	sub	sp, #16
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bee2:	4b21      	ldr	r3, [pc, #132]	; (800bf68 <prvAddCurrentTaskToDelayedList+0x90>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bee8:	4b20      	ldr	r3, [pc, #128]	; (800bf6c <prvAddCurrentTaskToDelayedList+0x94>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	3304      	adds	r3, #4
 800beee:	4618      	mov	r0, r3
 800bef0:	f7fd fec6 	bl	8009c80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800befa:	d10a      	bne.n	800bf12 <prvAddCurrentTaskToDelayedList+0x3a>
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d007      	beq.n	800bf12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf02:	4b1a      	ldr	r3, [pc, #104]	; (800bf6c <prvAddCurrentTaskToDelayedList+0x94>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	3304      	adds	r3, #4
 800bf08:	4619      	mov	r1, r3
 800bf0a:	4819      	ldr	r0, [pc, #100]	; (800bf70 <prvAddCurrentTaskToDelayedList+0x98>)
 800bf0c:	f7fd fe5b 	bl	8009bc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf10:	e026      	b.n	800bf60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf12:	68fa      	ldr	r2, [r7, #12]
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	4413      	add	r3, r2
 800bf18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bf1a:	4b14      	ldr	r3, [pc, #80]	; (800bf6c <prvAddCurrentTaskToDelayedList+0x94>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	68ba      	ldr	r2, [r7, #8]
 800bf20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf22:	68ba      	ldr	r2, [r7, #8]
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d209      	bcs.n	800bf3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf2a:	4b12      	ldr	r3, [pc, #72]	; (800bf74 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bf2c:	681a      	ldr	r2, [r3, #0]
 800bf2e:	4b0f      	ldr	r3, [pc, #60]	; (800bf6c <prvAddCurrentTaskToDelayedList+0x94>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	3304      	adds	r3, #4
 800bf34:	4619      	mov	r1, r3
 800bf36:	4610      	mov	r0, r2
 800bf38:	f7fd fe69 	bl	8009c0e <vListInsert>
}
 800bf3c:	e010      	b.n	800bf60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf3e:	4b0e      	ldr	r3, [pc, #56]	; (800bf78 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	4b0a      	ldr	r3, [pc, #40]	; (800bf6c <prvAddCurrentTaskToDelayedList+0x94>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	3304      	adds	r3, #4
 800bf48:	4619      	mov	r1, r3
 800bf4a:	4610      	mov	r0, r2
 800bf4c:	f7fd fe5f 	bl	8009c0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bf50:	4b0a      	ldr	r3, [pc, #40]	; (800bf7c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	68ba      	ldr	r2, [r7, #8]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d202      	bcs.n	800bf60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bf5a:	4a08      	ldr	r2, [pc, #32]	; (800bf7c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	6013      	str	r3, [r2, #0]
}
 800bf60:	bf00      	nop
 800bf62:	3710      	adds	r7, #16
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	20009b48 	.word	0x20009b48
 800bf6c:	20009670 	.word	0x20009670
 800bf70:	20009b30 	.word	0x20009b30
 800bf74:	20009b00 	.word	0x20009b00
 800bf78:	20009afc 	.word	0x20009afc
 800bf7c:	20009b64 	.word	0x20009b64

0800bf80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b08a      	sub	sp, #40	; 0x28
 800bf84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bf86:	2300      	movs	r3, #0
 800bf88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bf8a:	f000 fb15 	bl	800c5b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bf8e:	4b1d      	ldr	r3, [pc, #116]	; (800c004 <xTimerCreateTimerTask+0x84>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d021      	beq.n	800bfda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bf96:	2300      	movs	r3, #0
 800bf98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bf9e:	1d3a      	adds	r2, r7, #4
 800bfa0:	f107 0108 	add.w	r1, r7, #8
 800bfa4:	f107 030c 	add.w	r3, r7, #12
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f7fd fdc5 	bl	8009b38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bfae:	6879      	ldr	r1, [r7, #4]
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	68fa      	ldr	r2, [r7, #12]
 800bfb4:	9202      	str	r2, [sp, #8]
 800bfb6:	9301      	str	r3, [sp, #4]
 800bfb8:	2302      	movs	r3, #2
 800bfba:	9300      	str	r3, [sp, #0]
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	460a      	mov	r2, r1
 800bfc0:	4911      	ldr	r1, [pc, #68]	; (800c008 <xTimerCreateTimerTask+0x88>)
 800bfc2:	4812      	ldr	r0, [pc, #72]	; (800c00c <xTimerCreateTimerTask+0x8c>)
 800bfc4:	f7fe ff96 	bl	800aef4 <xTaskCreateStatic>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	4a11      	ldr	r2, [pc, #68]	; (800c010 <xTimerCreateTimerTask+0x90>)
 800bfcc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bfce:	4b10      	ldr	r3, [pc, #64]	; (800c010 <xTimerCreateTimerTask+0x90>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d001      	beq.n	800bfda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d10c      	bne.n	800bffa <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800bfe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe4:	b672      	cpsid	i
 800bfe6:	f383 8811 	msr	BASEPRI, r3
 800bfea:	f3bf 8f6f 	isb	sy
 800bfee:	f3bf 8f4f 	dsb	sy
 800bff2:	b662      	cpsie	i
 800bff4:	613b      	str	r3, [r7, #16]
}
 800bff6:	bf00      	nop
 800bff8:	e7fe      	b.n	800bff8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800bffa:	697b      	ldr	r3, [r7, #20]
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3718      	adds	r7, #24
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	20009ba0 	.word	0x20009ba0
 800c008:	080183a0 	.word	0x080183a0
 800c00c:	0800c151 	.word	0x0800c151
 800c010:	20009ba4 	.word	0x20009ba4

0800c014 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b08a      	sub	sp, #40	; 0x28
 800c018:	af00      	add	r7, sp, #0
 800c01a:	60f8      	str	r0, [r7, #12]
 800c01c:	60b9      	str	r1, [r7, #8]
 800c01e:	607a      	str	r2, [r7, #4]
 800c020:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c022:	2300      	movs	r3, #0
 800c024:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d10c      	bne.n	800c046 <xTimerGenericCommand+0x32>
	__asm volatile
 800c02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c030:	b672      	cpsid	i
 800c032:	f383 8811 	msr	BASEPRI, r3
 800c036:	f3bf 8f6f 	isb	sy
 800c03a:	f3bf 8f4f 	dsb	sy
 800c03e:	b662      	cpsie	i
 800c040:	623b      	str	r3, [r7, #32]
}
 800c042:	bf00      	nop
 800c044:	e7fe      	b.n	800c044 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c046:	4b1a      	ldr	r3, [pc, #104]	; (800c0b0 <xTimerGenericCommand+0x9c>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d02a      	beq.n	800c0a4 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	2b05      	cmp	r3, #5
 800c05e:	dc18      	bgt.n	800c092 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c060:	f7ff fda8 	bl	800bbb4 <xTaskGetSchedulerState>
 800c064:	4603      	mov	r3, r0
 800c066:	2b02      	cmp	r3, #2
 800c068:	d109      	bne.n	800c07e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c06a:	4b11      	ldr	r3, [pc, #68]	; (800c0b0 <xTimerGenericCommand+0x9c>)
 800c06c:	6818      	ldr	r0, [r3, #0]
 800c06e:	f107 0110 	add.w	r1, r7, #16
 800c072:	2300      	movs	r3, #0
 800c074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c076:	f7fe f8ab 	bl	800a1d0 <xQueueGenericSend>
 800c07a:	6278      	str	r0, [r7, #36]	; 0x24
 800c07c:	e012      	b.n	800c0a4 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c07e:	4b0c      	ldr	r3, [pc, #48]	; (800c0b0 <xTimerGenericCommand+0x9c>)
 800c080:	6818      	ldr	r0, [r3, #0]
 800c082:	f107 0110 	add.w	r1, r7, #16
 800c086:	2300      	movs	r3, #0
 800c088:	2200      	movs	r2, #0
 800c08a:	f7fe f8a1 	bl	800a1d0 <xQueueGenericSend>
 800c08e:	6278      	str	r0, [r7, #36]	; 0x24
 800c090:	e008      	b.n	800c0a4 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c092:	4b07      	ldr	r3, [pc, #28]	; (800c0b0 <xTimerGenericCommand+0x9c>)
 800c094:	6818      	ldr	r0, [r3, #0]
 800c096:	f107 0110 	add.w	r1, r7, #16
 800c09a:	2300      	movs	r3, #0
 800c09c:	683a      	ldr	r2, [r7, #0]
 800c09e:	f7fe f99d 	bl	800a3dc <xQueueGenericSendFromISR>
 800c0a2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3728      	adds	r7, #40	; 0x28
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	20009ba0 	.word	0x20009ba0

0800c0b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b088      	sub	sp, #32
 800c0b8:	af02      	add	r7, sp, #8
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0be:	4b23      	ldr	r3, [pc, #140]	; (800c14c <prvProcessExpiredTimer+0x98>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	68db      	ldr	r3, [r3, #12]
 800c0c4:	68db      	ldr	r3, [r3, #12]
 800c0c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	3304      	adds	r3, #4
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7fd fdd7 	bl	8009c80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0d8:	f003 0304 	and.w	r3, r3, #4
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d024      	beq.n	800c12a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	699a      	ldr	r2, [r3, #24]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	18d1      	adds	r1, r2, r3
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	683a      	ldr	r2, [r7, #0]
 800c0ec:	6978      	ldr	r0, [r7, #20]
 800c0ee:	f000 f8d3 	bl	800c298 <prvInsertTimerInActiveList>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d021      	beq.n	800c13c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	9300      	str	r3, [sp, #0]
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	2100      	movs	r1, #0
 800c102:	6978      	ldr	r0, [r7, #20]
 800c104:	f7ff ff86 	bl	800c014 <xTimerGenericCommand>
 800c108:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d115      	bne.n	800c13c <prvProcessExpiredTimer+0x88>
	__asm volatile
 800c110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c114:	b672      	cpsid	i
 800c116:	f383 8811 	msr	BASEPRI, r3
 800c11a:	f3bf 8f6f 	isb	sy
 800c11e:	f3bf 8f4f 	dsb	sy
 800c122:	b662      	cpsie	i
 800c124:	60fb      	str	r3, [r7, #12]
}
 800c126:	bf00      	nop
 800c128:	e7fe      	b.n	800c128 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c130:	f023 0301 	bic.w	r3, r3, #1
 800c134:	b2da      	uxtb	r2, r3
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	6a1b      	ldr	r3, [r3, #32]
 800c140:	6978      	ldr	r0, [r7, #20]
 800c142:	4798      	blx	r3
}
 800c144:	bf00      	nop
 800c146:	3718      	adds	r7, #24
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}
 800c14c:	20009b98 	.word	0x20009b98

0800c150 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c158:	f107 0308 	add.w	r3, r7, #8
 800c15c:	4618      	mov	r0, r3
 800c15e:	f000 f857 	bl	800c210 <prvGetNextExpireTime>
 800c162:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	4619      	mov	r1, r3
 800c168:	68f8      	ldr	r0, [r7, #12]
 800c16a:	f000 f803 	bl	800c174 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c16e:	f000 f8d5 	bl	800c31c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c172:	e7f1      	b.n	800c158 <prvTimerTask+0x8>

0800c174 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c17e:	f7ff f903 	bl	800b388 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c182:	f107 0308 	add.w	r3, r7, #8
 800c186:	4618      	mov	r0, r3
 800c188:	f000 f866 	bl	800c258 <prvSampleTimeNow>
 800c18c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d130      	bne.n	800c1f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d10a      	bne.n	800c1b0 <prvProcessTimerOrBlockTask+0x3c>
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d806      	bhi.n	800c1b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c1a2:	f7ff f8ff 	bl	800b3a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c1a6:	68f9      	ldr	r1, [r7, #12]
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f7ff ff83 	bl	800c0b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c1ae:	e024      	b.n	800c1fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d008      	beq.n	800c1c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c1b6:	4b13      	ldr	r3, [pc, #76]	; (800c204 <prvProcessTimerOrBlockTask+0x90>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d101      	bne.n	800c1c4 <prvProcessTimerOrBlockTask+0x50>
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	e000      	b.n	800c1c6 <prvProcessTimerOrBlockTask+0x52>
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c1c8:	4b0f      	ldr	r3, [pc, #60]	; (800c208 <prvProcessTimerOrBlockTask+0x94>)
 800c1ca:	6818      	ldr	r0, [r3, #0]
 800c1cc:	687a      	ldr	r2, [r7, #4]
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	1ad3      	subs	r3, r2, r3
 800c1d2:	683a      	ldr	r2, [r7, #0]
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	f7fe fe59 	bl	800ae8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c1da:	f7ff f8e3 	bl	800b3a4 <xTaskResumeAll>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d10a      	bne.n	800c1fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c1e4:	4b09      	ldr	r3, [pc, #36]	; (800c20c <prvProcessTimerOrBlockTask+0x98>)
 800c1e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1ea:	601a      	str	r2, [r3, #0]
 800c1ec:	f3bf 8f4f 	dsb	sy
 800c1f0:	f3bf 8f6f 	isb	sy
}
 800c1f4:	e001      	b.n	800c1fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c1f6:	f7ff f8d5 	bl	800b3a4 <xTaskResumeAll>
}
 800c1fa:	bf00      	nop
 800c1fc:	3710      	adds	r7, #16
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
 800c202:	bf00      	nop
 800c204:	20009b9c 	.word	0x20009b9c
 800c208:	20009ba0 	.word	0x20009ba0
 800c20c:	e000ed04 	.word	0xe000ed04

0800c210 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c210:	b480      	push	{r7}
 800c212:	b085      	sub	sp, #20
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c218:	4b0e      	ldr	r3, [pc, #56]	; (800c254 <prvGetNextExpireTime+0x44>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d101      	bne.n	800c226 <prvGetNextExpireTime+0x16>
 800c222:	2201      	movs	r2, #1
 800c224:	e000      	b.n	800c228 <prvGetNextExpireTime+0x18>
 800c226:	2200      	movs	r2, #0
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d105      	bne.n	800c240 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c234:	4b07      	ldr	r3, [pc, #28]	; (800c254 <prvGetNextExpireTime+0x44>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	68db      	ldr	r3, [r3, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	60fb      	str	r3, [r7, #12]
 800c23e:	e001      	b.n	800c244 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c240:	2300      	movs	r3, #0
 800c242:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c244:	68fb      	ldr	r3, [r7, #12]
}
 800c246:	4618      	mov	r0, r3
 800c248:	3714      	adds	r7, #20
 800c24a:	46bd      	mov	sp, r7
 800c24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c250:	4770      	bx	lr
 800c252:	bf00      	nop
 800c254:	20009b98 	.word	0x20009b98

0800c258 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c260:	f7ff f940 	bl	800b4e4 <xTaskGetTickCount>
 800c264:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c266:	4b0b      	ldr	r3, [pc, #44]	; (800c294 <prvSampleTimeNow+0x3c>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	68fa      	ldr	r2, [r7, #12]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d205      	bcs.n	800c27c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c270:	f000 f93c 	bl	800c4ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2201      	movs	r2, #1
 800c278:	601a      	str	r2, [r3, #0]
 800c27a:	e002      	b.n	800c282 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2200      	movs	r2, #0
 800c280:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c282:	4a04      	ldr	r2, [pc, #16]	; (800c294 <prvSampleTimeNow+0x3c>)
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c288:	68fb      	ldr	r3, [r7, #12]
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3710      	adds	r7, #16
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop
 800c294:	20009ba8 	.word	0x20009ba8

0800c298 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b086      	sub	sp, #24
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	60b9      	str	r1, [r7, #8]
 800c2a2:	607a      	str	r2, [r7, #4]
 800c2a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	68ba      	ldr	r2, [r7, #8]
 800c2ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	68fa      	ldr	r2, [r7, #12]
 800c2b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c2b6:	68ba      	ldr	r2, [r7, #8]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d812      	bhi.n	800c2e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2be:	687a      	ldr	r2, [r7, #4]
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	1ad2      	subs	r2, r2, r3
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	699b      	ldr	r3, [r3, #24]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d302      	bcc.n	800c2d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	617b      	str	r3, [r7, #20]
 800c2d0:	e01b      	b.n	800c30a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c2d2:	4b10      	ldr	r3, [pc, #64]	; (800c314 <prvInsertTimerInActiveList+0x7c>)
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	3304      	adds	r3, #4
 800c2da:	4619      	mov	r1, r3
 800c2dc:	4610      	mov	r0, r2
 800c2de:	f7fd fc96 	bl	8009c0e <vListInsert>
 800c2e2:	e012      	b.n	800c30a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d206      	bcs.n	800c2fa <prvInsertTimerInActiveList+0x62>
 800c2ec:	68ba      	ldr	r2, [r7, #8]
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d302      	bcc.n	800c2fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	617b      	str	r3, [r7, #20]
 800c2f8:	e007      	b.n	800c30a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c2fa:	4b07      	ldr	r3, [pc, #28]	; (800c318 <prvInsertTimerInActiveList+0x80>)
 800c2fc:	681a      	ldr	r2, [r3, #0]
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	3304      	adds	r3, #4
 800c302:	4619      	mov	r1, r3
 800c304:	4610      	mov	r0, r2
 800c306:	f7fd fc82 	bl	8009c0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c30a:	697b      	ldr	r3, [r7, #20]
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3718      	adds	r7, #24
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}
 800c314:	20009b9c 	.word	0x20009b9c
 800c318:	20009b98 	.word	0x20009b98

0800c31c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b08e      	sub	sp, #56	; 0x38
 800c320:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c322:	e0d0      	b.n	800c4c6 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2b00      	cmp	r3, #0
 800c328:	da1a      	bge.n	800c360 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c32a:	1d3b      	adds	r3, r7, #4
 800c32c:	3304      	adds	r3, #4
 800c32e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c332:	2b00      	cmp	r3, #0
 800c334:	d10c      	bne.n	800c350 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800c336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c33a:	b672      	cpsid	i
 800c33c:	f383 8811 	msr	BASEPRI, r3
 800c340:	f3bf 8f6f 	isb	sy
 800c344:	f3bf 8f4f 	dsb	sy
 800c348:	b662      	cpsie	i
 800c34a:	61fb      	str	r3, [r7, #28]
}
 800c34c:	bf00      	nop
 800c34e:	e7fe      	b.n	800c34e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c356:	6850      	ldr	r0, [r2, #4]
 800c358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c35a:	6892      	ldr	r2, [r2, #8]
 800c35c:	4611      	mov	r1, r2
 800c35e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2b00      	cmp	r3, #0
 800c364:	f2c0 80ae 	blt.w	800c4c4 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36e:	695b      	ldr	r3, [r3, #20]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d004      	beq.n	800c37e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c376:	3304      	adds	r3, #4
 800c378:	4618      	mov	r0, r3
 800c37a:	f7fd fc81 	bl	8009c80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c37e:	463b      	mov	r3, r7
 800c380:	4618      	mov	r0, r3
 800c382:	f7ff ff69 	bl	800c258 <prvSampleTimeNow>
 800c386:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2b09      	cmp	r3, #9
 800c38c:	f200 809b 	bhi.w	800c4c6 <prvProcessReceivedCommands+0x1aa>
 800c390:	a201      	add	r2, pc, #4	; (adr r2, 800c398 <prvProcessReceivedCommands+0x7c>)
 800c392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c396:	bf00      	nop
 800c398:	0800c3c1 	.word	0x0800c3c1
 800c39c:	0800c3c1 	.word	0x0800c3c1
 800c3a0:	0800c3c1 	.word	0x0800c3c1
 800c3a4:	0800c439 	.word	0x0800c439
 800c3a8:	0800c44d 	.word	0x0800c44d
 800c3ac:	0800c49b 	.word	0x0800c49b
 800c3b0:	0800c3c1 	.word	0x0800c3c1
 800c3b4:	0800c3c1 	.word	0x0800c3c1
 800c3b8:	0800c439 	.word	0x0800c439
 800c3bc:	0800c44d 	.word	0x0800c44d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3c6:	f043 0301 	orr.w	r3, r3, #1
 800c3ca:	b2da      	uxtb	r2, r3
 800c3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c3d2:	68ba      	ldr	r2, [r7, #8]
 800c3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d6:	699b      	ldr	r3, [r3, #24]
 800c3d8:	18d1      	adds	r1, r2, r3
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3e0:	f7ff ff5a 	bl	800c298 <prvInsertTimerInActiveList>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d06d      	beq.n	800c4c6 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ec:	6a1b      	ldr	r3, [r3, #32]
 800c3ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3f8:	f003 0304 	and.w	r3, r3, #4
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d062      	beq.n	800c4c6 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c400:	68ba      	ldr	r2, [r7, #8]
 800c402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c404:	699b      	ldr	r3, [r3, #24]
 800c406:	441a      	add	r2, r3
 800c408:	2300      	movs	r3, #0
 800c40a:	9300      	str	r3, [sp, #0]
 800c40c:	2300      	movs	r3, #0
 800c40e:	2100      	movs	r1, #0
 800c410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c412:	f7ff fdff 	bl	800c014 <xTimerGenericCommand>
 800c416:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c418:	6a3b      	ldr	r3, [r7, #32]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d153      	bne.n	800c4c6 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800c41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c422:	b672      	cpsid	i
 800c424:	f383 8811 	msr	BASEPRI, r3
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	b662      	cpsie	i
 800c432:	61bb      	str	r3, [r7, #24]
}
 800c434:	bf00      	nop
 800c436:	e7fe      	b.n	800c436 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c43a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c43e:	f023 0301 	bic.w	r3, r3, #1
 800c442:	b2da      	uxtb	r2, r3
 800c444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c446:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c44a:	e03c      	b.n	800c4c6 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c44e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c452:	f043 0301 	orr.w	r3, r3, #1
 800c456:	b2da      	uxtb	r2, r3
 800c458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c45a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c45e:	68ba      	ldr	r2, [r7, #8]
 800c460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c462:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c466:	699b      	ldr	r3, [r3, #24]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d10c      	bne.n	800c486 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800c46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c470:	b672      	cpsid	i
 800c472:	f383 8811 	msr	BASEPRI, r3
 800c476:	f3bf 8f6f 	isb	sy
 800c47a:	f3bf 8f4f 	dsb	sy
 800c47e:	b662      	cpsie	i
 800c480:	617b      	str	r3, [r7, #20]
}
 800c482:	bf00      	nop
 800c484:	e7fe      	b.n	800c484 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c488:	699a      	ldr	r2, [r3, #24]
 800c48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48c:	18d1      	adds	r1, r2, r3
 800c48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c494:	f7ff ff00 	bl	800c298 <prvInsertTimerInActiveList>
					break;
 800c498:	e015      	b.n	800c4c6 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4a0:	f003 0302 	and.w	r3, r3, #2
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d103      	bne.n	800c4b0 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800c4a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4aa:	f000 fbc5 	bl	800cc38 <vPortFree>
 800c4ae:	e00a      	b.n	800c4c6 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4b6:	f023 0301 	bic.w	r3, r3, #1
 800c4ba:	b2da      	uxtb	r2, r3
 800c4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c4c2:	e000      	b.n	800c4c6 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c4c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c4c6:	4b08      	ldr	r3, [pc, #32]	; (800c4e8 <prvProcessReceivedCommands+0x1cc>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	1d39      	adds	r1, r7, #4
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f7fe f8ba 	bl	800a648 <xQueueReceive>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	f47f af24 	bne.w	800c324 <prvProcessReceivedCommands+0x8>
	}
}
 800c4dc:	bf00      	nop
 800c4de:	bf00      	nop
 800c4e0:	3730      	adds	r7, #48	; 0x30
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
 800c4e6:	bf00      	nop
 800c4e8:	20009ba0 	.word	0x20009ba0

0800c4ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b088      	sub	sp, #32
 800c4f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c4f2:	e04a      	b.n	800c58a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c4f4:	4b2e      	ldr	r3, [pc, #184]	; (800c5b0 <prvSwitchTimerLists+0xc4>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	68db      	ldr	r3, [r3, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4fe:	4b2c      	ldr	r3, [pc, #176]	; (800c5b0 <prvSwitchTimerLists+0xc4>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	68db      	ldr	r3, [r3, #12]
 800c504:	68db      	ldr	r3, [r3, #12]
 800c506:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	3304      	adds	r3, #4
 800c50c:	4618      	mov	r0, r3
 800c50e:	f7fd fbb7 	bl	8009c80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	6a1b      	ldr	r3, [r3, #32]
 800c516:	68f8      	ldr	r0, [r7, #12]
 800c518:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c520:	f003 0304 	and.w	r3, r3, #4
 800c524:	2b00      	cmp	r3, #0
 800c526:	d030      	beq.n	800c58a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	699b      	ldr	r3, [r3, #24]
 800c52c:	693a      	ldr	r2, [r7, #16]
 800c52e:	4413      	add	r3, r2
 800c530:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c532:	68ba      	ldr	r2, [r7, #8]
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	429a      	cmp	r2, r3
 800c538:	d90e      	bls.n	800c558 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	68ba      	ldr	r2, [r7, #8]
 800c53e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	68fa      	ldr	r2, [r7, #12]
 800c544:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c546:	4b1a      	ldr	r3, [pc, #104]	; (800c5b0 <prvSwitchTimerLists+0xc4>)
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	3304      	adds	r3, #4
 800c54e:	4619      	mov	r1, r3
 800c550:	4610      	mov	r0, r2
 800c552:	f7fd fb5c 	bl	8009c0e <vListInsert>
 800c556:	e018      	b.n	800c58a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c558:	2300      	movs	r3, #0
 800c55a:	9300      	str	r3, [sp, #0]
 800c55c:	2300      	movs	r3, #0
 800c55e:	693a      	ldr	r2, [r7, #16]
 800c560:	2100      	movs	r1, #0
 800c562:	68f8      	ldr	r0, [r7, #12]
 800c564:	f7ff fd56 	bl	800c014 <xTimerGenericCommand>
 800c568:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d10c      	bne.n	800c58a <prvSwitchTimerLists+0x9e>
	__asm volatile
 800c570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c574:	b672      	cpsid	i
 800c576:	f383 8811 	msr	BASEPRI, r3
 800c57a:	f3bf 8f6f 	isb	sy
 800c57e:	f3bf 8f4f 	dsb	sy
 800c582:	b662      	cpsie	i
 800c584:	603b      	str	r3, [r7, #0]
}
 800c586:	bf00      	nop
 800c588:	e7fe      	b.n	800c588 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c58a:	4b09      	ldr	r3, [pc, #36]	; (800c5b0 <prvSwitchTimerLists+0xc4>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d1af      	bne.n	800c4f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c594:	4b06      	ldr	r3, [pc, #24]	; (800c5b0 <prvSwitchTimerLists+0xc4>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c59a:	4b06      	ldr	r3, [pc, #24]	; (800c5b4 <prvSwitchTimerLists+0xc8>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4a04      	ldr	r2, [pc, #16]	; (800c5b0 <prvSwitchTimerLists+0xc4>)
 800c5a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c5a2:	4a04      	ldr	r2, [pc, #16]	; (800c5b4 <prvSwitchTimerLists+0xc8>)
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	6013      	str	r3, [r2, #0]
}
 800c5a8:	bf00      	nop
 800c5aa:	3718      	adds	r7, #24
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}
 800c5b0:	20009b98 	.word	0x20009b98
 800c5b4:	20009b9c 	.word	0x20009b9c

0800c5b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c5be:	f000 f945 	bl	800c84c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c5c2:	4b15      	ldr	r3, [pc, #84]	; (800c618 <prvCheckForValidListAndQueue+0x60>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d120      	bne.n	800c60c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c5ca:	4814      	ldr	r0, [pc, #80]	; (800c61c <prvCheckForValidListAndQueue+0x64>)
 800c5cc:	f7fd face 	bl	8009b6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c5d0:	4813      	ldr	r0, [pc, #76]	; (800c620 <prvCheckForValidListAndQueue+0x68>)
 800c5d2:	f7fd facb 	bl	8009b6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c5d6:	4b13      	ldr	r3, [pc, #76]	; (800c624 <prvCheckForValidListAndQueue+0x6c>)
 800c5d8:	4a10      	ldr	r2, [pc, #64]	; (800c61c <prvCheckForValidListAndQueue+0x64>)
 800c5da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c5dc:	4b12      	ldr	r3, [pc, #72]	; (800c628 <prvCheckForValidListAndQueue+0x70>)
 800c5de:	4a10      	ldr	r2, [pc, #64]	; (800c620 <prvCheckForValidListAndQueue+0x68>)
 800c5e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	9300      	str	r3, [sp, #0]
 800c5e6:	4b11      	ldr	r3, [pc, #68]	; (800c62c <prvCheckForValidListAndQueue+0x74>)
 800c5e8:	4a11      	ldr	r2, [pc, #68]	; (800c630 <prvCheckForValidListAndQueue+0x78>)
 800c5ea:	2110      	movs	r1, #16
 800c5ec:	200a      	movs	r0, #10
 800c5ee:	f7fd fbdb 	bl	8009da8 <xQueueGenericCreateStatic>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	4a08      	ldr	r2, [pc, #32]	; (800c618 <prvCheckForValidListAndQueue+0x60>)
 800c5f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c5f8:	4b07      	ldr	r3, [pc, #28]	; (800c618 <prvCheckForValidListAndQueue+0x60>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d005      	beq.n	800c60c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c600:	4b05      	ldr	r3, [pc, #20]	; (800c618 <prvCheckForValidListAndQueue+0x60>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	490b      	ldr	r1, [pc, #44]	; (800c634 <prvCheckForValidListAndQueue+0x7c>)
 800c606:	4618      	mov	r0, r3
 800c608:	f7fe fbec 	bl	800ade4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c60c:	f000 f952 	bl	800c8b4 <vPortExitCritical>
}
 800c610:	bf00      	nop
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	20009ba0 	.word	0x20009ba0
 800c61c:	20009b70 	.word	0x20009b70
 800c620:	20009b84 	.word	0x20009b84
 800c624:	20009b98 	.word	0x20009b98
 800c628:	20009b9c 	.word	0x20009b9c
 800c62c:	20009c4c 	.word	0x20009c4c
 800c630:	20009bac 	.word	0x20009bac
 800c634:	080183a8 	.word	0x080183a8

0800c638 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c638:	b480      	push	{r7}
 800c63a:	b085      	sub	sp, #20
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	60f8      	str	r0, [r7, #12]
 800c640:	60b9      	str	r1, [r7, #8]
 800c642:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	3b04      	subs	r3, #4
 800c648:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c650:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	3b04      	subs	r3, #4
 800c656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	f023 0201 	bic.w	r2, r3, #1
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	3b04      	subs	r3, #4
 800c666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c668:	4a0c      	ldr	r2, [pc, #48]	; (800c69c <pxPortInitialiseStack+0x64>)
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	3b14      	subs	r3, #20
 800c672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c674:	687a      	ldr	r2, [r7, #4]
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	3b04      	subs	r3, #4
 800c67e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	f06f 0202 	mvn.w	r2, #2
 800c686:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	3b20      	subs	r3, #32
 800c68c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c68e:	68fb      	ldr	r3, [r7, #12]
}
 800c690:	4618      	mov	r0, r3
 800c692:	3714      	adds	r7, #20
 800c694:	46bd      	mov	sp, r7
 800c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69a:	4770      	bx	lr
 800c69c:	0800c6a1 	.word	0x0800c6a1

0800c6a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b085      	sub	sp, #20
 800c6a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c6aa:	4b14      	ldr	r3, [pc, #80]	; (800c6fc <prvTaskExitError+0x5c>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6b2:	d00c      	beq.n	800c6ce <prvTaskExitError+0x2e>
	__asm volatile
 800c6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b8:	b672      	cpsid	i
 800c6ba:	f383 8811 	msr	BASEPRI, r3
 800c6be:	f3bf 8f6f 	isb	sy
 800c6c2:	f3bf 8f4f 	dsb	sy
 800c6c6:	b662      	cpsie	i
 800c6c8:	60fb      	str	r3, [r7, #12]
}
 800c6ca:	bf00      	nop
 800c6cc:	e7fe      	b.n	800c6cc <prvTaskExitError+0x2c>
	__asm volatile
 800c6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d2:	b672      	cpsid	i
 800c6d4:	f383 8811 	msr	BASEPRI, r3
 800c6d8:	f3bf 8f6f 	isb	sy
 800c6dc:	f3bf 8f4f 	dsb	sy
 800c6e0:	b662      	cpsie	i
 800c6e2:	60bb      	str	r3, [r7, #8]
}
 800c6e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c6e6:	bf00      	nop
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d0fc      	beq.n	800c6e8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c6ee:	bf00      	nop
 800c6f0:	bf00      	nop
 800c6f2:	3714      	adds	r7, #20
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr
 800c6fc:	20000020 	.word	0x20000020

0800c700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c700:	4b07      	ldr	r3, [pc, #28]	; (800c720 <pxCurrentTCBConst2>)
 800c702:	6819      	ldr	r1, [r3, #0]
 800c704:	6808      	ldr	r0, [r1, #0]
 800c706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c70a:	f380 8809 	msr	PSP, r0
 800c70e:	f3bf 8f6f 	isb	sy
 800c712:	f04f 0000 	mov.w	r0, #0
 800c716:	f380 8811 	msr	BASEPRI, r0
 800c71a:	4770      	bx	lr
 800c71c:	f3af 8000 	nop.w

0800c720 <pxCurrentTCBConst2>:
 800c720:	20009670 	.word	0x20009670
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c724:	bf00      	nop
 800c726:	bf00      	nop

0800c728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c728:	4808      	ldr	r0, [pc, #32]	; (800c74c <prvPortStartFirstTask+0x24>)
 800c72a:	6800      	ldr	r0, [r0, #0]
 800c72c:	6800      	ldr	r0, [r0, #0]
 800c72e:	f380 8808 	msr	MSP, r0
 800c732:	f04f 0000 	mov.w	r0, #0
 800c736:	f380 8814 	msr	CONTROL, r0
 800c73a:	b662      	cpsie	i
 800c73c:	b661      	cpsie	f
 800c73e:	f3bf 8f4f 	dsb	sy
 800c742:	f3bf 8f6f 	isb	sy
 800c746:	df00      	svc	0
 800c748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c74a:	bf00      	nop
 800c74c:	e000ed08 	.word	0xe000ed08

0800c750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b084      	sub	sp, #16
 800c754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c756:	4b37      	ldr	r3, [pc, #220]	; (800c834 <xPortStartScheduler+0xe4>)
 800c758:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	22ff      	movs	r2, #255	; 0xff
 800c766:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	b2db      	uxtb	r3, r3
 800c76e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c770:	78fb      	ldrb	r3, [r7, #3]
 800c772:	b2db      	uxtb	r3, r3
 800c774:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c778:	b2da      	uxtb	r2, r3
 800c77a:	4b2f      	ldr	r3, [pc, #188]	; (800c838 <xPortStartScheduler+0xe8>)
 800c77c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c77e:	4b2f      	ldr	r3, [pc, #188]	; (800c83c <xPortStartScheduler+0xec>)
 800c780:	2207      	movs	r2, #7
 800c782:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c784:	e009      	b.n	800c79a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c786:	4b2d      	ldr	r3, [pc, #180]	; (800c83c <xPortStartScheduler+0xec>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	3b01      	subs	r3, #1
 800c78c:	4a2b      	ldr	r2, [pc, #172]	; (800c83c <xPortStartScheduler+0xec>)
 800c78e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c790:	78fb      	ldrb	r3, [r7, #3]
 800c792:	b2db      	uxtb	r3, r3
 800c794:	005b      	lsls	r3, r3, #1
 800c796:	b2db      	uxtb	r3, r3
 800c798:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c79a:	78fb      	ldrb	r3, [r7, #3]
 800c79c:	b2db      	uxtb	r3, r3
 800c79e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7a2:	2b80      	cmp	r3, #128	; 0x80
 800c7a4:	d0ef      	beq.n	800c786 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c7a6:	4b25      	ldr	r3, [pc, #148]	; (800c83c <xPortStartScheduler+0xec>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f1c3 0307 	rsb	r3, r3, #7
 800c7ae:	2b04      	cmp	r3, #4
 800c7b0:	d00c      	beq.n	800c7cc <xPortStartScheduler+0x7c>
	__asm volatile
 800c7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b6:	b672      	cpsid	i
 800c7b8:	f383 8811 	msr	BASEPRI, r3
 800c7bc:	f3bf 8f6f 	isb	sy
 800c7c0:	f3bf 8f4f 	dsb	sy
 800c7c4:	b662      	cpsie	i
 800c7c6:	60bb      	str	r3, [r7, #8]
}
 800c7c8:	bf00      	nop
 800c7ca:	e7fe      	b.n	800c7ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c7cc:	4b1b      	ldr	r3, [pc, #108]	; (800c83c <xPortStartScheduler+0xec>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	021b      	lsls	r3, r3, #8
 800c7d2:	4a1a      	ldr	r2, [pc, #104]	; (800c83c <xPortStartScheduler+0xec>)
 800c7d4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c7d6:	4b19      	ldr	r3, [pc, #100]	; (800c83c <xPortStartScheduler+0xec>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c7de:	4a17      	ldr	r2, [pc, #92]	; (800c83c <xPortStartScheduler+0xec>)
 800c7e0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	b2da      	uxtb	r2, r3
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c7ea:	4b15      	ldr	r3, [pc, #84]	; (800c840 <xPortStartScheduler+0xf0>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4a14      	ldr	r2, [pc, #80]	; (800c840 <xPortStartScheduler+0xf0>)
 800c7f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c7f4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c7f6:	4b12      	ldr	r3, [pc, #72]	; (800c840 <xPortStartScheduler+0xf0>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4a11      	ldr	r2, [pc, #68]	; (800c840 <xPortStartScheduler+0xf0>)
 800c7fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c800:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c802:	f000 f8dd 	bl	800c9c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c806:	4b0f      	ldr	r3, [pc, #60]	; (800c844 <xPortStartScheduler+0xf4>)
 800c808:	2200      	movs	r2, #0
 800c80a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c80c:	f000 f8fc 	bl	800ca08 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c810:	4b0d      	ldr	r3, [pc, #52]	; (800c848 <xPortStartScheduler+0xf8>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4a0c      	ldr	r2, [pc, #48]	; (800c848 <xPortStartScheduler+0xf8>)
 800c816:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c81a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c81c:	f7ff ff84 	bl	800c728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c820:	f7fe ff3e 	bl	800b6a0 <vTaskSwitchContext>
	prvTaskExitError();
 800c824:	f7ff ff3c 	bl	800c6a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c828:	2300      	movs	r3, #0
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3710      	adds	r7, #16
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}
 800c832:	bf00      	nop
 800c834:	e000e400 	.word	0xe000e400
 800c838:	20009c9c 	.word	0x20009c9c
 800c83c:	20009ca0 	.word	0x20009ca0
 800c840:	e000ed20 	.word	0xe000ed20
 800c844:	20000020 	.word	0x20000020
 800c848:	e000ef34 	.word	0xe000ef34

0800c84c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c84c:	b480      	push	{r7}
 800c84e:	b083      	sub	sp, #12
 800c850:	af00      	add	r7, sp, #0
	__asm volatile
 800c852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c856:	b672      	cpsid	i
 800c858:	f383 8811 	msr	BASEPRI, r3
 800c85c:	f3bf 8f6f 	isb	sy
 800c860:	f3bf 8f4f 	dsb	sy
 800c864:	b662      	cpsie	i
 800c866:	607b      	str	r3, [r7, #4]
}
 800c868:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c86a:	4b10      	ldr	r3, [pc, #64]	; (800c8ac <vPortEnterCritical+0x60>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	3301      	adds	r3, #1
 800c870:	4a0e      	ldr	r2, [pc, #56]	; (800c8ac <vPortEnterCritical+0x60>)
 800c872:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c874:	4b0d      	ldr	r3, [pc, #52]	; (800c8ac <vPortEnterCritical+0x60>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	2b01      	cmp	r3, #1
 800c87a:	d111      	bne.n	800c8a0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c87c:	4b0c      	ldr	r3, [pc, #48]	; (800c8b0 <vPortEnterCritical+0x64>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	b2db      	uxtb	r3, r3
 800c882:	2b00      	cmp	r3, #0
 800c884:	d00c      	beq.n	800c8a0 <vPortEnterCritical+0x54>
	__asm volatile
 800c886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c88a:	b672      	cpsid	i
 800c88c:	f383 8811 	msr	BASEPRI, r3
 800c890:	f3bf 8f6f 	isb	sy
 800c894:	f3bf 8f4f 	dsb	sy
 800c898:	b662      	cpsie	i
 800c89a:	603b      	str	r3, [r7, #0]
}
 800c89c:	bf00      	nop
 800c89e:	e7fe      	b.n	800c89e <vPortEnterCritical+0x52>
	}
}
 800c8a0:	bf00      	nop
 800c8a2:	370c      	adds	r7, #12
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	4770      	bx	lr
 800c8ac:	20000020 	.word	0x20000020
 800c8b0:	e000ed04 	.word	0xe000ed04

0800c8b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b083      	sub	sp, #12
 800c8b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c8ba:	4b13      	ldr	r3, [pc, #76]	; (800c908 <vPortExitCritical+0x54>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d10c      	bne.n	800c8dc <vPortExitCritical+0x28>
	__asm volatile
 800c8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c6:	b672      	cpsid	i
 800c8c8:	f383 8811 	msr	BASEPRI, r3
 800c8cc:	f3bf 8f6f 	isb	sy
 800c8d0:	f3bf 8f4f 	dsb	sy
 800c8d4:	b662      	cpsie	i
 800c8d6:	607b      	str	r3, [r7, #4]
}
 800c8d8:	bf00      	nop
 800c8da:	e7fe      	b.n	800c8da <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c8dc:	4b0a      	ldr	r3, [pc, #40]	; (800c908 <vPortExitCritical+0x54>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	3b01      	subs	r3, #1
 800c8e2:	4a09      	ldr	r2, [pc, #36]	; (800c908 <vPortExitCritical+0x54>)
 800c8e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c8e6:	4b08      	ldr	r3, [pc, #32]	; (800c908 <vPortExitCritical+0x54>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d105      	bne.n	800c8fa <vPortExitCritical+0x46>
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	f383 8811 	msr	BASEPRI, r3
}
 800c8f8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c8fa:	bf00      	nop
 800c8fc:	370c      	adds	r7, #12
 800c8fe:	46bd      	mov	sp, r7
 800c900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c904:	4770      	bx	lr
 800c906:	bf00      	nop
 800c908:	20000020 	.word	0x20000020
 800c90c:	00000000 	.word	0x00000000

0800c910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c910:	f3ef 8009 	mrs	r0, PSP
 800c914:	f3bf 8f6f 	isb	sy
 800c918:	4b15      	ldr	r3, [pc, #84]	; (800c970 <pxCurrentTCBConst>)
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	f01e 0f10 	tst.w	lr, #16
 800c920:	bf08      	it	eq
 800c922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c92a:	6010      	str	r0, [r2, #0]
 800c92c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c930:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c934:	b672      	cpsid	i
 800c936:	f380 8811 	msr	BASEPRI, r0
 800c93a:	f3bf 8f4f 	dsb	sy
 800c93e:	f3bf 8f6f 	isb	sy
 800c942:	b662      	cpsie	i
 800c944:	f7fe feac 	bl	800b6a0 <vTaskSwitchContext>
 800c948:	f04f 0000 	mov.w	r0, #0
 800c94c:	f380 8811 	msr	BASEPRI, r0
 800c950:	bc09      	pop	{r0, r3}
 800c952:	6819      	ldr	r1, [r3, #0]
 800c954:	6808      	ldr	r0, [r1, #0]
 800c956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c95a:	f01e 0f10 	tst.w	lr, #16
 800c95e:	bf08      	it	eq
 800c960:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c964:	f380 8809 	msr	PSP, r0
 800c968:	f3bf 8f6f 	isb	sy
 800c96c:	4770      	bx	lr
 800c96e:	bf00      	nop

0800c970 <pxCurrentTCBConst>:
 800c970:	20009670 	.word	0x20009670
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c974:	bf00      	nop
 800c976:	bf00      	nop

0800c978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
	__asm volatile
 800c97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c982:	b672      	cpsid	i
 800c984:	f383 8811 	msr	BASEPRI, r3
 800c988:	f3bf 8f6f 	isb	sy
 800c98c:	f3bf 8f4f 	dsb	sy
 800c990:	b662      	cpsie	i
 800c992:	607b      	str	r3, [r7, #4]
}
 800c994:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c996:	f7fe fdc7 	bl	800b528 <xTaskIncrementTick>
 800c99a:	4603      	mov	r3, r0
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d003      	beq.n	800c9a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c9a0:	4b06      	ldr	r3, [pc, #24]	; (800c9bc <SysTick_Handler+0x44>)
 800c9a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9a6:	601a      	str	r2, [r3, #0]
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	f383 8811 	msr	BASEPRI, r3
}
 800c9b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c9b4:	bf00      	nop
 800c9b6:	3708      	adds	r7, #8
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}
 800c9bc:	e000ed04 	.word	0xe000ed04

0800c9c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c9c4:	4b0b      	ldr	r3, [pc, #44]	; (800c9f4 <vPortSetupTimerInterrupt+0x34>)
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c9ca:	4b0b      	ldr	r3, [pc, #44]	; (800c9f8 <vPortSetupTimerInterrupt+0x38>)
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c9d0:	4b0a      	ldr	r3, [pc, #40]	; (800c9fc <vPortSetupTimerInterrupt+0x3c>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a0a      	ldr	r2, [pc, #40]	; (800ca00 <vPortSetupTimerInterrupt+0x40>)
 800c9d6:	fba2 2303 	umull	r2, r3, r2, r3
 800c9da:	099b      	lsrs	r3, r3, #6
 800c9dc:	4a09      	ldr	r2, [pc, #36]	; (800ca04 <vPortSetupTimerInterrupt+0x44>)
 800c9de:	3b01      	subs	r3, #1
 800c9e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c9e2:	4b04      	ldr	r3, [pc, #16]	; (800c9f4 <vPortSetupTimerInterrupt+0x34>)
 800c9e4:	2207      	movs	r2, #7
 800c9e6:	601a      	str	r2, [r3, #0]
}
 800c9e8:	bf00      	nop
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop
 800c9f4:	e000e010 	.word	0xe000e010
 800c9f8:	e000e018 	.word	0xe000e018
 800c9fc:	20000000 	.word	0x20000000
 800ca00:	10624dd3 	.word	0x10624dd3
 800ca04:	e000e014 	.word	0xe000e014

0800ca08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ca08:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ca18 <vPortEnableVFP+0x10>
 800ca0c:	6801      	ldr	r1, [r0, #0]
 800ca0e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ca12:	6001      	str	r1, [r0, #0]
 800ca14:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ca16:	bf00      	nop
 800ca18:	e000ed88 	.word	0xe000ed88

0800ca1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b085      	sub	sp, #20
 800ca20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ca22:	f3ef 8305 	mrs	r3, IPSR
 800ca26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	2b0f      	cmp	r3, #15
 800ca2c:	d916      	bls.n	800ca5c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ca2e:	4a19      	ldr	r2, [pc, #100]	; (800ca94 <vPortValidateInterruptPriority+0x78>)
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	4413      	add	r3, r2
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ca38:	4b17      	ldr	r3, [pc, #92]	; (800ca98 <vPortValidateInterruptPriority+0x7c>)
 800ca3a:	781b      	ldrb	r3, [r3, #0]
 800ca3c:	7afa      	ldrb	r2, [r7, #11]
 800ca3e:	429a      	cmp	r2, r3
 800ca40:	d20c      	bcs.n	800ca5c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800ca42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca46:	b672      	cpsid	i
 800ca48:	f383 8811 	msr	BASEPRI, r3
 800ca4c:	f3bf 8f6f 	isb	sy
 800ca50:	f3bf 8f4f 	dsb	sy
 800ca54:	b662      	cpsie	i
 800ca56:	607b      	str	r3, [r7, #4]
}
 800ca58:	bf00      	nop
 800ca5a:	e7fe      	b.n	800ca5a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ca5c:	4b0f      	ldr	r3, [pc, #60]	; (800ca9c <vPortValidateInterruptPriority+0x80>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ca64:	4b0e      	ldr	r3, [pc, #56]	; (800caa0 <vPortValidateInterruptPriority+0x84>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d90c      	bls.n	800ca86 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ca6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca70:	b672      	cpsid	i
 800ca72:	f383 8811 	msr	BASEPRI, r3
 800ca76:	f3bf 8f6f 	isb	sy
 800ca7a:	f3bf 8f4f 	dsb	sy
 800ca7e:	b662      	cpsie	i
 800ca80:	603b      	str	r3, [r7, #0]
}
 800ca82:	bf00      	nop
 800ca84:	e7fe      	b.n	800ca84 <vPortValidateInterruptPriority+0x68>
	}
 800ca86:	bf00      	nop
 800ca88:	3714      	adds	r7, #20
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr
 800ca92:	bf00      	nop
 800ca94:	e000e3f0 	.word	0xe000e3f0
 800ca98:	20009c9c 	.word	0x20009c9c
 800ca9c:	e000ed0c 	.word	0xe000ed0c
 800caa0:	20009ca0 	.word	0x20009ca0

0800caa4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b08a      	sub	sp, #40	; 0x28
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800caac:	2300      	movs	r3, #0
 800caae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cab0:	f7fe fc6a 	bl	800b388 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cab4:	4b5b      	ldr	r3, [pc, #364]	; (800cc24 <pvPortMalloc+0x180>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d101      	bne.n	800cac0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cabc:	f000 f91a 	bl	800ccf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cac0:	4b59      	ldr	r3, [pc, #356]	; (800cc28 <pvPortMalloc+0x184>)
 800cac2:	681a      	ldr	r2, [r3, #0]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	4013      	ands	r3, r2
 800cac8:	2b00      	cmp	r3, #0
 800caca:	f040 8092 	bne.w	800cbf2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d01f      	beq.n	800cb14 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800cad4:	2208      	movs	r2, #8
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	4413      	add	r3, r2
 800cada:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f003 0307 	and.w	r3, r3, #7
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d016      	beq.n	800cb14 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f023 0307 	bic.w	r3, r3, #7
 800caec:	3308      	adds	r3, #8
 800caee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f003 0307 	and.w	r3, r3, #7
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d00c      	beq.n	800cb14 <pvPortMalloc+0x70>
	__asm volatile
 800cafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafe:	b672      	cpsid	i
 800cb00:	f383 8811 	msr	BASEPRI, r3
 800cb04:	f3bf 8f6f 	isb	sy
 800cb08:	f3bf 8f4f 	dsb	sy
 800cb0c:	b662      	cpsie	i
 800cb0e:	617b      	str	r3, [r7, #20]
}
 800cb10:	bf00      	nop
 800cb12:	e7fe      	b.n	800cb12 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d06b      	beq.n	800cbf2 <pvPortMalloc+0x14e>
 800cb1a:	4b44      	ldr	r3, [pc, #272]	; (800cc2c <pvPortMalloc+0x188>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d866      	bhi.n	800cbf2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cb24:	4b42      	ldr	r3, [pc, #264]	; (800cc30 <pvPortMalloc+0x18c>)
 800cb26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cb28:	4b41      	ldr	r3, [pc, #260]	; (800cc30 <pvPortMalloc+0x18c>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb2e:	e004      	b.n	800cb3a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800cb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3c:	685b      	ldr	r3, [r3, #4]
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d903      	bls.n	800cb4c <pvPortMalloc+0xa8>
 800cb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d1f1      	bne.n	800cb30 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cb4c:	4b35      	ldr	r3, [pc, #212]	; (800cc24 <pvPortMalloc+0x180>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d04d      	beq.n	800cbf2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cb56:	6a3b      	ldr	r3, [r7, #32]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	2208      	movs	r2, #8
 800cb5c:	4413      	add	r3, r2
 800cb5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	6a3b      	ldr	r3, [r7, #32]
 800cb66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb6a:	685a      	ldr	r2, [r3, #4]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	1ad2      	subs	r2, r2, r3
 800cb70:	2308      	movs	r3, #8
 800cb72:	005b      	lsls	r3, r3, #1
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d921      	bls.n	800cbbc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cb78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	4413      	add	r3, r2
 800cb7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb80:	69bb      	ldr	r3, [r7, #24]
 800cb82:	f003 0307 	and.w	r3, r3, #7
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d00c      	beq.n	800cba4 <pvPortMalloc+0x100>
	__asm volatile
 800cb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb8e:	b672      	cpsid	i
 800cb90:	f383 8811 	msr	BASEPRI, r3
 800cb94:	f3bf 8f6f 	isb	sy
 800cb98:	f3bf 8f4f 	dsb	sy
 800cb9c:	b662      	cpsie	i
 800cb9e:	613b      	str	r3, [r7, #16]
}
 800cba0:	bf00      	nop
 800cba2:	e7fe      	b.n	800cba2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba6:	685a      	ldr	r2, [r3, #4]
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	1ad2      	subs	r2, r2, r3
 800cbac:	69bb      	ldr	r3, [r7, #24]
 800cbae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cbb6:	69b8      	ldr	r0, [r7, #24]
 800cbb8:	f000 f8fe 	bl	800cdb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cbbc:	4b1b      	ldr	r3, [pc, #108]	; (800cc2c <pvPortMalloc+0x188>)
 800cbbe:	681a      	ldr	r2, [r3, #0]
 800cbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	1ad3      	subs	r3, r2, r3
 800cbc6:	4a19      	ldr	r2, [pc, #100]	; (800cc2c <pvPortMalloc+0x188>)
 800cbc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cbca:	4b18      	ldr	r3, [pc, #96]	; (800cc2c <pvPortMalloc+0x188>)
 800cbcc:	681a      	ldr	r2, [r3, #0]
 800cbce:	4b19      	ldr	r3, [pc, #100]	; (800cc34 <pvPortMalloc+0x190>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d203      	bcs.n	800cbde <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cbd6:	4b15      	ldr	r3, [pc, #84]	; (800cc2c <pvPortMalloc+0x188>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4a16      	ldr	r2, [pc, #88]	; (800cc34 <pvPortMalloc+0x190>)
 800cbdc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe0:	685a      	ldr	r2, [r3, #4]
 800cbe2:	4b11      	ldr	r3, [pc, #68]	; (800cc28 <pvPortMalloc+0x184>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	431a      	orrs	r2, r3
 800cbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbee:	2200      	movs	r2, #0
 800cbf0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cbf2:	f7fe fbd7 	bl	800b3a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cbf6:	69fb      	ldr	r3, [r7, #28]
 800cbf8:	f003 0307 	and.w	r3, r3, #7
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d00c      	beq.n	800cc1a <pvPortMalloc+0x176>
	__asm volatile
 800cc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc04:	b672      	cpsid	i
 800cc06:	f383 8811 	msr	BASEPRI, r3
 800cc0a:	f3bf 8f6f 	isb	sy
 800cc0e:	f3bf 8f4f 	dsb	sy
 800cc12:	b662      	cpsie	i
 800cc14:	60fb      	str	r3, [r7, #12]
}
 800cc16:	bf00      	nop
 800cc18:	e7fe      	b.n	800cc18 <pvPortMalloc+0x174>
	return pvReturn;
 800cc1a:	69fb      	ldr	r3, [r7, #28]
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3728      	adds	r7, #40	; 0x28
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}
 800cc24:	2000d8ac 	.word	0x2000d8ac
 800cc28:	2000d8b8 	.word	0x2000d8b8
 800cc2c:	2000d8b0 	.word	0x2000d8b0
 800cc30:	2000d8a4 	.word	0x2000d8a4
 800cc34:	2000d8b4 	.word	0x2000d8b4

0800cc38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b086      	sub	sp, #24
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d04c      	beq.n	800cce4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cc4a:	2308      	movs	r3, #8
 800cc4c:	425b      	negs	r3, r3
 800cc4e:	697a      	ldr	r2, [r7, #20]
 800cc50:	4413      	add	r3, r2
 800cc52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	685a      	ldr	r2, [r3, #4]
 800cc5c:	4b23      	ldr	r3, [pc, #140]	; (800ccec <vPortFree+0xb4>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4013      	ands	r3, r2
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d10c      	bne.n	800cc80 <vPortFree+0x48>
	__asm volatile
 800cc66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc6a:	b672      	cpsid	i
 800cc6c:	f383 8811 	msr	BASEPRI, r3
 800cc70:	f3bf 8f6f 	isb	sy
 800cc74:	f3bf 8f4f 	dsb	sy
 800cc78:	b662      	cpsie	i
 800cc7a:	60fb      	str	r3, [r7, #12]
}
 800cc7c:	bf00      	nop
 800cc7e:	e7fe      	b.n	800cc7e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d00c      	beq.n	800cca2 <vPortFree+0x6a>
	__asm volatile
 800cc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8c:	b672      	cpsid	i
 800cc8e:	f383 8811 	msr	BASEPRI, r3
 800cc92:	f3bf 8f6f 	isb	sy
 800cc96:	f3bf 8f4f 	dsb	sy
 800cc9a:	b662      	cpsie	i
 800cc9c:	60bb      	str	r3, [r7, #8]
}
 800cc9e:	bf00      	nop
 800cca0:	e7fe      	b.n	800cca0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	685a      	ldr	r2, [r3, #4]
 800cca6:	4b11      	ldr	r3, [pc, #68]	; (800ccec <vPortFree+0xb4>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	4013      	ands	r3, r2
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d019      	beq.n	800cce4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d115      	bne.n	800cce4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	685a      	ldr	r2, [r3, #4]
 800ccbc:	4b0b      	ldr	r3, [pc, #44]	; (800ccec <vPortFree+0xb4>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	43db      	mvns	r3, r3
 800ccc2:	401a      	ands	r2, r3
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ccc8:	f7fe fb5e 	bl	800b388 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cccc:	693b      	ldr	r3, [r7, #16]
 800ccce:	685a      	ldr	r2, [r3, #4]
 800ccd0:	4b07      	ldr	r3, [pc, #28]	; (800ccf0 <vPortFree+0xb8>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	4413      	add	r3, r2
 800ccd6:	4a06      	ldr	r2, [pc, #24]	; (800ccf0 <vPortFree+0xb8>)
 800ccd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ccda:	6938      	ldr	r0, [r7, #16]
 800ccdc:	f000 f86c 	bl	800cdb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cce0:	f7fe fb60 	bl	800b3a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cce4:	bf00      	nop
 800cce6:	3718      	adds	r7, #24
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}
 800ccec:	2000d8b8 	.word	0x2000d8b8
 800ccf0:	2000d8b0 	.word	0x2000d8b0

0800ccf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b085      	sub	sp, #20
 800ccf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ccfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ccfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cd00:	4b27      	ldr	r3, [pc, #156]	; (800cda0 <prvHeapInit+0xac>)
 800cd02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	f003 0307 	and.w	r3, r3, #7
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d00c      	beq.n	800cd28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	3307      	adds	r3, #7
 800cd12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	f023 0307 	bic.w	r3, r3, #7
 800cd1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cd1c:	68ba      	ldr	r2, [r7, #8]
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	1ad3      	subs	r3, r2, r3
 800cd22:	4a1f      	ldr	r2, [pc, #124]	; (800cda0 <prvHeapInit+0xac>)
 800cd24:	4413      	add	r3, r2
 800cd26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cd2c:	4a1d      	ldr	r2, [pc, #116]	; (800cda4 <prvHeapInit+0xb0>)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cd32:	4b1c      	ldr	r3, [pc, #112]	; (800cda4 <prvHeapInit+0xb0>)
 800cd34:	2200      	movs	r2, #0
 800cd36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	68ba      	ldr	r2, [r7, #8]
 800cd3c:	4413      	add	r3, r2
 800cd3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cd40:	2208      	movs	r2, #8
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	1a9b      	subs	r3, r3, r2
 800cd46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	f023 0307 	bic.w	r3, r3, #7
 800cd4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	4a15      	ldr	r2, [pc, #84]	; (800cda8 <prvHeapInit+0xb4>)
 800cd54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cd56:	4b14      	ldr	r3, [pc, #80]	; (800cda8 <prvHeapInit+0xb4>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cd5e:	4b12      	ldr	r3, [pc, #72]	; (800cda8 <prvHeapInit+0xb4>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	2200      	movs	r2, #0
 800cd64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	68fa      	ldr	r2, [r7, #12]
 800cd6e:	1ad2      	subs	r2, r2, r3
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cd74:	4b0c      	ldr	r3, [pc, #48]	; (800cda8 <prvHeapInit+0xb4>)
 800cd76:	681a      	ldr	r2, [r3, #0]
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	685b      	ldr	r3, [r3, #4]
 800cd80:	4a0a      	ldr	r2, [pc, #40]	; (800cdac <prvHeapInit+0xb8>)
 800cd82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	4a09      	ldr	r2, [pc, #36]	; (800cdb0 <prvHeapInit+0xbc>)
 800cd8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cd8c:	4b09      	ldr	r3, [pc, #36]	; (800cdb4 <prvHeapInit+0xc0>)
 800cd8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cd92:	601a      	str	r2, [r3, #0]
}
 800cd94:	bf00      	nop
 800cd96:	3714      	adds	r7, #20
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr
 800cda0:	20009ca4 	.word	0x20009ca4
 800cda4:	2000d8a4 	.word	0x2000d8a4
 800cda8:	2000d8ac 	.word	0x2000d8ac
 800cdac:	2000d8b4 	.word	0x2000d8b4
 800cdb0:	2000d8b0 	.word	0x2000d8b0
 800cdb4:	2000d8b8 	.word	0x2000d8b8

0800cdb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b085      	sub	sp, #20
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cdc0:	4b28      	ldr	r3, [pc, #160]	; (800ce64 <prvInsertBlockIntoFreeList+0xac>)
 800cdc2:	60fb      	str	r3, [r7, #12]
 800cdc4:	e002      	b.n	800cdcc <prvInsertBlockIntoFreeList+0x14>
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	60fb      	str	r3, [r7, #12]
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	687a      	ldr	r2, [r7, #4]
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d8f7      	bhi.n	800cdc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	68ba      	ldr	r2, [r7, #8]
 800cde0:	4413      	add	r3, r2
 800cde2:	687a      	ldr	r2, [r7, #4]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d108      	bne.n	800cdfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	685a      	ldr	r2, [r3, #4]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	441a      	add	r2, r3
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	68ba      	ldr	r2, [r7, #8]
 800ce04:	441a      	add	r2, r3
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	d118      	bne.n	800ce40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681a      	ldr	r2, [r3, #0]
 800ce12:	4b15      	ldr	r3, [pc, #84]	; (800ce68 <prvInsertBlockIntoFreeList+0xb0>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d00d      	beq.n	800ce36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	685a      	ldr	r2, [r3, #4]
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	685b      	ldr	r3, [r3, #4]
 800ce24:	441a      	add	r2, r3
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	681a      	ldr	r2, [r3, #0]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	601a      	str	r2, [r3, #0]
 800ce34:	e008      	b.n	800ce48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ce36:	4b0c      	ldr	r3, [pc, #48]	; (800ce68 <prvInsertBlockIntoFreeList+0xb0>)
 800ce38:	681a      	ldr	r2, [r3, #0]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	601a      	str	r2, [r3, #0]
 800ce3e:	e003      	b.n	800ce48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	681a      	ldr	r2, [r3, #0]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ce48:	68fa      	ldr	r2, [r7, #12]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d002      	beq.n	800ce56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce56:	bf00      	nop
 800ce58:	3714      	adds	r7, #20
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr
 800ce62:	bf00      	nop
 800ce64:	2000d8a4 	.word	0x2000d8a4
 800ce68:	2000d8ac 	.word	0x2000d8ac

0800ce6c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b084      	sub	sp, #16
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800ce76:	f007 fac5 	bl	8014404 <sys_timeouts_sleeptime>
 800ce7a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce82:	d10b      	bne.n	800ce9c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800ce84:	4813      	ldr	r0, [pc, #76]	; (800ced4 <tcpip_timeouts_mbox_fetch+0x68>)
 800ce86:	f00a f81c 	bl	8016ec2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	6839      	ldr	r1, [r7, #0]
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f009 ffa4 	bl	8016ddc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ce94:	480f      	ldr	r0, [pc, #60]	; (800ced4 <tcpip_timeouts_mbox_fetch+0x68>)
 800ce96:	f00a f805 	bl	8016ea4 <sys_mutex_lock>
    return;
 800ce9a:	e018      	b.n	800cece <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d102      	bne.n	800cea8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800cea2:	f007 fa75 	bl	8014390 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cea6:	e7e6      	b.n	800ce76 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800cea8:	480a      	ldr	r0, [pc, #40]	; (800ced4 <tcpip_timeouts_mbox_fetch+0x68>)
 800ceaa:	f00a f80a 	bl	8016ec2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800ceae:	68fa      	ldr	r2, [r7, #12]
 800ceb0:	6839      	ldr	r1, [r7, #0]
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f009 ff92 	bl	8016ddc <sys_arch_mbox_fetch>
 800ceb8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800ceba:	4806      	ldr	r0, [pc, #24]	; (800ced4 <tcpip_timeouts_mbox_fetch+0x68>)
 800cebc:	f009 fff2 	bl	8016ea4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cec6:	d102      	bne.n	800cece <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800cec8:	f007 fa62 	bl	8014390 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cecc:	e7d3      	b.n	800ce76 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800cece:	3710      	adds	r7, #16
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}
 800ced4:	2000d8c8 	.word	0x2000d8c8

0800ced8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b084      	sub	sp, #16
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800cee0:	4810      	ldr	r0, [pc, #64]	; (800cf24 <tcpip_thread+0x4c>)
 800cee2:	f009 ffdf 	bl	8016ea4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800cee6:	4b10      	ldr	r3, [pc, #64]	; (800cf28 <tcpip_thread+0x50>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d005      	beq.n	800cefa <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800ceee:	4b0e      	ldr	r3, [pc, #56]	; (800cf28 <tcpip_thread+0x50>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	4a0e      	ldr	r2, [pc, #56]	; (800cf2c <tcpip_thread+0x54>)
 800cef4:	6812      	ldr	r2, [r2, #0]
 800cef6:	4610      	mov	r0, r2
 800cef8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cefa:	f107 030c 	add.w	r3, r7, #12
 800cefe:	4619      	mov	r1, r3
 800cf00:	480b      	ldr	r0, [pc, #44]	; (800cf30 <tcpip_thread+0x58>)
 800cf02:	f7ff ffb3 	bl	800ce6c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d106      	bne.n	800cf1a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cf0c:	4b09      	ldr	r3, [pc, #36]	; (800cf34 <tcpip_thread+0x5c>)
 800cf0e:	2291      	movs	r2, #145	; 0x91
 800cf10:	4909      	ldr	r1, [pc, #36]	; (800cf38 <tcpip_thread+0x60>)
 800cf12:	480a      	ldr	r0, [pc, #40]	; (800cf3c <tcpip_thread+0x64>)
 800cf14:	f00a f86a 	bl	8016fec <iprintf>
      continue;
 800cf18:	e003      	b.n	800cf22 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f000 f80f 	bl	800cf40 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cf22:	e7ea      	b.n	800cefa <tcpip_thread+0x22>
 800cf24:	2000d8c8 	.word	0x2000d8c8
 800cf28:	2000d8bc 	.word	0x2000d8bc
 800cf2c:	2000d8c0 	.word	0x2000d8c0
 800cf30:	2000d8c4 	.word	0x2000d8c4
 800cf34:	080183b0 	.word	0x080183b0
 800cf38:	080183e0 	.word	0x080183e0
 800cf3c:	08018400 	.word	0x08018400

0800cf40 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	2b02      	cmp	r3, #2
 800cf4e:	d026      	beq.n	800cf9e <tcpip_thread_handle_msg+0x5e>
 800cf50:	2b02      	cmp	r3, #2
 800cf52:	dc2b      	bgt.n	800cfac <tcpip_thread_handle_msg+0x6c>
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d002      	beq.n	800cf5e <tcpip_thread_handle_msg+0x1e>
 800cf58:	2b01      	cmp	r3, #1
 800cf5a:	d015      	beq.n	800cf88 <tcpip_thread_handle_msg+0x48>
 800cf5c:	e026      	b.n	800cfac <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	68db      	ldr	r3, [r3, #12]
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	6850      	ldr	r0, [r2, #4]
 800cf66:	687a      	ldr	r2, [r7, #4]
 800cf68:	6892      	ldr	r2, [r2, #8]
 800cf6a:	4611      	mov	r1, r2
 800cf6c:	4798      	blx	r3
 800cf6e:	4603      	mov	r3, r0
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d004      	beq.n	800cf7e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	685b      	ldr	r3, [r3, #4]
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f001 fd0b 	bl	800e994 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cf7e:	6879      	ldr	r1, [r7, #4]
 800cf80:	2009      	movs	r0, #9
 800cf82:	f000 fe63 	bl	800dc4c <memp_free>
      break;
 800cf86:	e018      	b.n	800cfba <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	685b      	ldr	r3, [r3, #4]
 800cf8c:	687a      	ldr	r2, [r7, #4]
 800cf8e:	6892      	ldr	r2, [r2, #8]
 800cf90:	4610      	mov	r0, r2
 800cf92:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800cf94:	6879      	ldr	r1, [r7, #4]
 800cf96:	2008      	movs	r0, #8
 800cf98:	f000 fe58 	bl	800dc4c <memp_free>
      break;
 800cf9c:	e00d      	b.n	800cfba <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	685b      	ldr	r3, [r3, #4]
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	6892      	ldr	r2, [r2, #8]
 800cfa6:	4610      	mov	r0, r2
 800cfa8:	4798      	blx	r3
      break;
 800cfaa:	e006      	b.n	800cfba <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cfac:	4b05      	ldr	r3, [pc, #20]	; (800cfc4 <tcpip_thread_handle_msg+0x84>)
 800cfae:	22cf      	movs	r2, #207	; 0xcf
 800cfb0:	4905      	ldr	r1, [pc, #20]	; (800cfc8 <tcpip_thread_handle_msg+0x88>)
 800cfb2:	4806      	ldr	r0, [pc, #24]	; (800cfcc <tcpip_thread_handle_msg+0x8c>)
 800cfb4:	f00a f81a 	bl	8016fec <iprintf>
      break;
 800cfb8:	bf00      	nop
  }
}
 800cfba:	bf00      	nop
 800cfbc:	3708      	adds	r7, #8
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}
 800cfc2:	bf00      	nop
 800cfc4:	080183b0 	.word	0x080183b0
 800cfc8:	080183e0 	.word	0x080183e0
 800cfcc:	08018400 	.word	0x08018400

0800cfd0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b086      	sub	sp, #24
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	60f8      	str	r0, [r7, #12]
 800cfd8:	60b9      	str	r1, [r7, #8]
 800cfda:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cfdc:	481a      	ldr	r0, [pc, #104]	; (800d048 <tcpip_inpkt+0x78>)
 800cfde:	f009 ff2e 	bl	8016e3e <sys_mbox_valid>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d105      	bne.n	800cff4 <tcpip_inpkt+0x24>
 800cfe8:	4b18      	ldr	r3, [pc, #96]	; (800d04c <tcpip_inpkt+0x7c>)
 800cfea:	22fc      	movs	r2, #252	; 0xfc
 800cfec:	4918      	ldr	r1, [pc, #96]	; (800d050 <tcpip_inpkt+0x80>)
 800cfee:	4819      	ldr	r0, [pc, #100]	; (800d054 <tcpip_inpkt+0x84>)
 800cff0:	f009 fffc 	bl	8016fec <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800cff4:	2009      	movs	r0, #9
 800cff6:	f000 fdb3 	bl	800db60 <memp_malloc>
 800cffa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d102      	bne.n	800d008 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800d002:	f04f 33ff 	mov.w	r3, #4294967295
 800d006:	e01a      	b.n	800d03e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	2200      	movs	r2, #0
 800d00c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	68fa      	ldr	r2, [r7, #12]
 800d012:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	68ba      	ldr	r2, [r7, #8]
 800d018:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	687a      	ldr	r2, [r7, #4]
 800d01e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d020:	6979      	ldr	r1, [r7, #20]
 800d022:	4809      	ldr	r0, [pc, #36]	; (800d048 <tcpip_inpkt+0x78>)
 800d024:	f009 fec0 	bl	8016da8 <sys_mbox_trypost>
 800d028:	4603      	mov	r3, r0
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d006      	beq.n	800d03c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d02e:	6979      	ldr	r1, [r7, #20]
 800d030:	2009      	movs	r0, #9
 800d032:	f000 fe0b 	bl	800dc4c <memp_free>
    return ERR_MEM;
 800d036:	f04f 33ff 	mov.w	r3, #4294967295
 800d03a:	e000      	b.n	800d03e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800d03c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3718      	adds	r7, #24
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop
 800d048:	2000d8c4 	.word	0x2000d8c4
 800d04c:	080183b0 	.word	0x080183b0
 800d050:	08018428 	.word	0x08018428
 800d054:	08018400 	.word	0x08018400

0800d058 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d068:	f003 0318 	and.w	r3, r3, #24
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d006      	beq.n	800d07e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d070:	4a08      	ldr	r2, [pc, #32]	; (800d094 <tcpip_input+0x3c>)
 800d072:	6839      	ldr	r1, [r7, #0]
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f7ff ffab 	bl	800cfd0 <tcpip_inpkt>
 800d07a:	4603      	mov	r3, r0
 800d07c:	e005      	b.n	800d08a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d07e:	4a06      	ldr	r2, [pc, #24]	; (800d098 <tcpip_input+0x40>)
 800d080:	6839      	ldr	r1, [r7, #0]
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f7ff ffa4 	bl	800cfd0 <tcpip_inpkt>
 800d088:	4603      	mov	r3, r0
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3708      	adds	r7, #8
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}
 800d092:	bf00      	nop
 800d094:	08016bc9 	.word	0x08016bc9
 800d098:	08015ad1 	.word	0x08015ad1

0800d09c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b084      	sub	sp, #16
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d0a6:	4819      	ldr	r0, [pc, #100]	; (800d10c <tcpip_try_callback+0x70>)
 800d0a8:	f009 fec9 	bl	8016e3e <sys_mbox_valid>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d106      	bne.n	800d0c0 <tcpip_try_callback+0x24>
 800d0b2:	4b17      	ldr	r3, [pc, #92]	; (800d110 <tcpip_try_callback+0x74>)
 800d0b4:	f240 125d 	movw	r2, #349	; 0x15d
 800d0b8:	4916      	ldr	r1, [pc, #88]	; (800d114 <tcpip_try_callback+0x78>)
 800d0ba:	4817      	ldr	r0, [pc, #92]	; (800d118 <tcpip_try_callback+0x7c>)
 800d0bc:	f009 ff96 	bl	8016fec <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d0c0:	2008      	movs	r0, #8
 800d0c2:	f000 fd4d 	bl	800db60 <memp_malloc>
 800d0c6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d102      	bne.n	800d0d4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800d0ce:	f04f 33ff 	mov.w	r3, #4294967295
 800d0d2:	e017      	b.n	800d104 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	687a      	ldr	r2, [r7, #4]
 800d0de:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	683a      	ldr	r2, [r7, #0]
 800d0e4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d0e6:	68f9      	ldr	r1, [r7, #12]
 800d0e8:	4808      	ldr	r0, [pc, #32]	; (800d10c <tcpip_try_callback+0x70>)
 800d0ea:	f009 fe5d 	bl	8016da8 <sys_mbox_trypost>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d006      	beq.n	800d102 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800d0f4:	68f9      	ldr	r1, [r7, #12]
 800d0f6:	2008      	movs	r0, #8
 800d0f8:	f000 fda8 	bl	800dc4c <memp_free>
    return ERR_MEM;
 800d0fc:	f04f 33ff 	mov.w	r3, #4294967295
 800d100:	e000      	b.n	800d104 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800d102:	2300      	movs	r3, #0
}
 800d104:	4618      	mov	r0, r3
 800d106:	3710      	adds	r7, #16
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}
 800d10c:	2000d8c4 	.word	0x2000d8c4
 800d110:	080183b0 	.word	0x080183b0
 800d114:	08018428 	.word	0x08018428
 800d118:	08018400 	.word	0x08018400

0800d11c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b084      	sub	sp, #16
 800d120:	af02      	add	r7, sp, #8
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	6039      	str	r1, [r7, #0]
  lwip_init();
 800d126:	f000 f871 	bl	800d20c <lwip_init>

  tcpip_init_done = initfunc;
 800d12a:	4a17      	ldr	r2, [pc, #92]	; (800d188 <tcpip_init+0x6c>)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800d130:	4a16      	ldr	r2, [pc, #88]	; (800d18c <tcpip_init+0x70>)
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800d136:	2106      	movs	r1, #6
 800d138:	4815      	ldr	r0, [pc, #84]	; (800d190 <tcpip_init+0x74>)
 800d13a:	f009 fe1b 	bl	8016d74 <sys_mbox_new>
 800d13e:	4603      	mov	r3, r0
 800d140:	2b00      	cmp	r3, #0
 800d142:	d006      	beq.n	800d152 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800d144:	4b13      	ldr	r3, [pc, #76]	; (800d194 <tcpip_init+0x78>)
 800d146:	f240 2261 	movw	r2, #609	; 0x261
 800d14a:	4913      	ldr	r1, [pc, #76]	; (800d198 <tcpip_init+0x7c>)
 800d14c:	4813      	ldr	r0, [pc, #76]	; (800d19c <tcpip_init+0x80>)
 800d14e:	f009 ff4d 	bl	8016fec <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800d152:	4813      	ldr	r0, [pc, #76]	; (800d1a0 <tcpip_init+0x84>)
 800d154:	f009 fe90 	bl	8016e78 <sys_mutex_new>
 800d158:	4603      	mov	r3, r0
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d006      	beq.n	800d16c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800d15e:	4b0d      	ldr	r3, [pc, #52]	; (800d194 <tcpip_init+0x78>)
 800d160:	f240 2265 	movw	r2, #613	; 0x265
 800d164:	490f      	ldr	r1, [pc, #60]	; (800d1a4 <tcpip_init+0x88>)
 800d166:	480d      	ldr	r0, [pc, #52]	; (800d19c <tcpip_init+0x80>)
 800d168:	f009 ff40 	bl	8016fec <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d16c:	2318      	movs	r3, #24
 800d16e:	9300      	str	r3, [sp, #0]
 800d170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d174:	2200      	movs	r2, #0
 800d176:	490c      	ldr	r1, [pc, #48]	; (800d1a8 <tcpip_init+0x8c>)
 800d178:	480c      	ldr	r0, [pc, #48]	; (800d1ac <tcpip_init+0x90>)
 800d17a:	f009 feaf 	bl	8016edc <sys_thread_new>
}
 800d17e:	bf00      	nop
 800d180:	3708      	adds	r7, #8
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}
 800d186:	bf00      	nop
 800d188:	2000d8bc 	.word	0x2000d8bc
 800d18c:	2000d8c0 	.word	0x2000d8c0
 800d190:	2000d8c4 	.word	0x2000d8c4
 800d194:	080183b0 	.word	0x080183b0
 800d198:	08018438 	.word	0x08018438
 800d19c:	08018400 	.word	0x08018400
 800d1a0:	2000d8c8 	.word	0x2000d8c8
 800d1a4:	0801845c 	.word	0x0801845c
 800d1a8:	0800ced9 	.word	0x0800ced9
 800d1ac:	08018480 	.word	0x08018480

0800d1b0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b083      	sub	sp, #12
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d1ba:	88fb      	ldrh	r3, [r7, #6]
 800d1bc:	021b      	lsls	r3, r3, #8
 800d1be:	b21a      	sxth	r2, r3
 800d1c0:	88fb      	ldrh	r3, [r7, #6]
 800d1c2:	0a1b      	lsrs	r3, r3, #8
 800d1c4:	b29b      	uxth	r3, r3
 800d1c6:	b21b      	sxth	r3, r3
 800d1c8:	4313      	orrs	r3, r2
 800d1ca:	b21b      	sxth	r3, r3
 800d1cc:	b29b      	uxth	r3, r3
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	370c      	adds	r7, #12
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d8:	4770      	bx	lr

0800d1da <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d1da:	b480      	push	{r7}
 800d1dc:	b083      	sub	sp, #12
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	061a      	lsls	r2, r3, #24
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	021b      	lsls	r3, r3, #8
 800d1ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d1ee:	431a      	orrs	r2, r3
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	0a1b      	lsrs	r3, r3, #8
 800d1f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d1f8:	431a      	orrs	r2, r3
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	0e1b      	lsrs	r3, r3, #24
 800d1fe:	4313      	orrs	r3, r2
}
 800d200:	4618      	mov	r0, r3
 800d202:	370c      	adds	r7, #12
 800d204:	46bd      	mov	sp, r7
 800d206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20a:	4770      	bx	lr

0800d20c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b082      	sub	sp, #8
 800d210:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d212:	2300      	movs	r3, #0
 800d214:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d216:	f009 fe23 	bl	8016e60 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d21a:	f000 f8d5 	bl	800d3c8 <mem_init>
  memp_init();
 800d21e:	f000 fc31 	bl	800da84 <memp_init>
  pbuf_init();
  netif_init();
 800d222:	f000 fd3d 	bl	800dca0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d226:	f007 f925 	bl	8014474 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d22a:	f001 fe4d 	bl	800eec8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d22e:	f007 f867 	bl	8014300 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d232:	bf00      	nop
 800d234:	3708      	adds	r7, #8
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
	...

0800d23c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d23c:	b480      	push	{r7}
 800d23e:	b083      	sub	sp, #12
 800d240:	af00      	add	r7, sp, #0
 800d242:	4603      	mov	r3, r0
 800d244:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d246:	4b05      	ldr	r3, [pc, #20]	; (800d25c <ptr_to_mem+0x20>)
 800d248:	681a      	ldr	r2, [r3, #0]
 800d24a:	88fb      	ldrh	r3, [r7, #6]
 800d24c:	4413      	add	r3, r2
}
 800d24e:	4618      	mov	r0, r3
 800d250:	370c      	adds	r7, #12
 800d252:	46bd      	mov	sp, r7
 800d254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d258:	4770      	bx	lr
 800d25a:	bf00      	nop
 800d25c:	2000df38 	.word	0x2000df38

0800d260 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d260:	b480      	push	{r7}
 800d262:	b083      	sub	sp, #12
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d268:	4b05      	ldr	r3, [pc, #20]	; (800d280 <mem_to_ptr+0x20>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	687a      	ldr	r2, [r7, #4]
 800d26e:	1ad3      	subs	r3, r2, r3
 800d270:	b29b      	uxth	r3, r3
}
 800d272:	4618      	mov	r0, r3
 800d274:	370c      	adds	r7, #12
 800d276:	46bd      	mov	sp, r7
 800d278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27c:	4770      	bx	lr
 800d27e:	bf00      	nop
 800d280:	2000df38 	.word	0x2000df38

0800d284 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d284:	b590      	push	{r4, r7, lr}
 800d286:	b085      	sub	sp, #20
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d28c:	4b45      	ldr	r3, [pc, #276]	; (800d3a4 <plug_holes+0x120>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	687a      	ldr	r2, [r7, #4]
 800d292:	429a      	cmp	r2, r3
 800d294:	d206      	bcs.n	800d2a4 <plug_holes+0x20>
 800d296:	4b44      	ldr	r3, [pc, #272]	; (800d3a8 <plug_holes+0x124>)
 800d298:	f240 12df 	movw	r2, #479	; 0x1df
 800d29c:	4943      	ldr	r1, [pc, #268]	; (800d3ac <plug_holes+0x128>)
 800d29e:	4844      	ldr	r0, [pc, #272]	; (800d3b0 <plug_holes+0x12c>)
 800d2a0:	f009 fea4 	bl	8016fec <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d2a4:	4b43      	ldr	r3, [pc, #268]	; (800d3b4 <plug_holes+0x130>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	687a      	ldr	r2, [r7, #4]
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d306      	bcc.n	800d2bc <plug_holes+0x38>
 800d2ae:	4b3e      	ldr	r3, [pc, #248]	; (800d3a8 <plug_holes+0x124>)
 800d2b0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d2b4:	4940      	ldr	r1, [pc, #256]	; (800d3b8 <plug_holes+0x134>)
 800d2b6:	483e      	ldr	r0, [pc, #248]	; (800d3b0 <plug_holes+0x12c>)
 800d2b8:	f009 fe98 	bl	8016fec <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	791b      	ldrb	r3, [r3, #4]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d006      	beq.n	800d2d2 <plug_holes+0x4e>
 800d2c4:	4b38      	ldr	r3, [pc, #224]	; (800d3a8 <plug_holes+0x124>)
 800d2c6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d2ca:	493c      	ldr	r1, [pc, #240]	; (800d3bc <plug_holes+0x138>)
 800d2cc:	4838      	ldr	r0, [pc, #224]	; (800d3b0 <plug_holes+0x12c>)
 800d2ce:	f009 fe8d 	bl	8016fec <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	881b      	ldrh	r3, [r3, #0]
 800d2d6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d2da:	d906      	bls.n	800d2ea <plug_holes+0x66>
 800d2dc:	4b32      	ldr	r3, [pc, #200]	; (800d3a8 <plug_holes+0x124>)
 800d2de:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d2e2:	4937      	ldr	r1, [pc, #220]	; (800d3c0 <plug_holes+0x13c>)
 800d2e4:	4832      	ldr	r0, [pc, #200]	; (800d3b0 <plug_holes+0x12c>)
 800d2e6:	f009 fe81 	bl	8016fec <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	881b      	ldrh	r3, [r3, #0]
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f7ff ffa4 	bl	800d23c <ptr_to_mem>
 800d2f4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d2f6:	687a      	ldr	r2, [r7, #4]
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d024      	beq.n	800d348 <plug_holes+0xc4>
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	791b      	ldrb	r3, [r3, #4]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d120      	bne.n	800d348 <plug_holes+0xc4>
 800d306:	4b2b      	ldr	r3, [pc, #172]	; (800d3b4 <plug_holes+0x130>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	68fa      	ldr	r2, [r7, #12]
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d01b      	beq.n	800d348 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d310:	4b2c      	ldr	r3, [pc, #176]	; (800d3c4 <plug_holes+0x140>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	68fa      	ldr	r2, [r7, #12]
 800d316:	429a      	cmp	r2, r3
 800d318:	d102      	bne.n	800d320 <plug_holes+0x9c>
      lfree = mem;
 800d31a:	4a2a      	ldr	r2, [pc, #168]	; (800d3c4 <plug_holes+0x140>)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	881a      	ldrh	r2, [r3, #0]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	881b      	ldrh	r3, [r3, #0]
 800d32c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d330:	d00a      	beq.n	800d348 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	881b      	ldrh	r3, [r3, #0]
 800d336:	4618      	mov	r0, r3
 800d338:	f7ff ff80 	bl	800d23c <ptr_to_mem>
 800d33c:	4604      	mov	r4, r0
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f7ff ff8e 	bl	800d260 <mem_to_ptr>
 800d344:	4603      	mov	r3, r0
 800d346:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	885b      	ldrh	r3, [r3, #2]
 800d34c:	4618      	mov	r0, r3
 800d34e:	f7ff ff75 	bl	800d23c <ptr_to_mem>
 800d352:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d354:	68ba      	ldr	r2, [r7, #8]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	429a      	cmp	r2, r3
 800d35a:	d01f      	beq.n	800d39c <plug_holes+0x118>
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	791b      	ldrb	r3, [r3, #4]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d11b      	bne.n	800d39c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d364:	4b17      	ldr	r3, [pc, #92]	; (800d3c4 <plug_holes+0x140>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	687a      	ldr	r2, [r7, #4]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d102      	bne.n	800d374 <plug_holes+0xf0>
      lfree = pmem;
 800d36e:	4a15      	ldr	r2, [pc, #84]	; (800d3c4 <plug_holes+0x140>)
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	881a      	ldrh	r2, [r3, #0]
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	881b      	ldrh	r3, [r3, #0]
 800d380:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d384:	d00a      	beq.n	800d39c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	881b      	ldrh	r3, [r3, #0]
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7ff ff56 	bl	800d23c <ptr_to_mem>
 800d390:	4604      	mov	r4, r0
 800d392:	68b8      	ldr	r0, [r7, #8]
 800d394:	f7ff ff64 	bl	800d260 <mem_to_ptr>
 800d398:	4603      	mov	r3, r0
 800d39a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d39c:	bf00      	nop
 800d39e:	3714      	adds	r7, #20
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd90      	pop	{r4, r7, pc}
 800d3a4:	2000df38 	.word	0x2000df38
 800d3a8:	08018490 	.word	0x08018490
 800d3ac:	080184c0 	.word	0x080184c0
 800d3b0:	080184d8 	.word	0x080184d8
 800d3b4:	2000df3c 	.word	0x2000df3c
 800d3b8:	08018500 	.word	0x08018500
 800d3bc:	0801851c 	.word	0x0801851c
 800d3c0:	08018538 	.word	0x08018538
 800d3c4:	2000df44 	.word	0x2000df44

0800d3c8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d3ce:	4b1f      	ldr	r3, [pc, #124]	; (800d44c <mem_init+0x84>)
 800d3d0:	3303      	adds	r3, #3
 800d3d2:	f023 0303 	bic.w	r3, r3, #3
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	4b1d      	ldr	r3, [pc, #116]	; (800d450 <mem_init+0x88>)
 800d3da:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d3dc:	4b1c      	ldr	r3, [pc, #112]	; (800d450 <mem_init+0x88>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d3e8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d3f6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800d3fa:	f7ff ff1f 	bl	800d23c <ptr_to_mem>
 800d3fe:	4603      	mov	r3, r0
 800d400:	4a14      	ldr	r2, [pc, #80]	; (800d454 <mem_init+0x8c>)
 800d402:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d404:	4b13      	ldr	r3, [pc, #76]	; (800d454 <mem_init+0x8c>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	2201      	movs	r2, #1
 800d40a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d40c:	4b11      	ldr	r3, [pc, #68]	; (800d454 <mem_init+0x8c>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d414:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d416:	4b0f      	ldr	r3, [pc, #60]	; (800d454 <mem_init+0x8c>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d41e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d420:	4b0b      	ldr	r3, [pc, #44]	; (800d450 <mem_init+0x88>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4a0c      	ldr	r2, [pc, #48]	; (800d458 <mem_init+0x90>)
 800d426:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d428:	480c      	ldr	r0, [pc, #48]	; (800d45c <mem_init+0x94>)
 800d42a:	f009 fd25 	bl	8016e78 <sys_mutex_new>
 800d42e:	4603      	mov	r3, r0
 800d430:	2b00      	cmp	r3, #0
 800d432:	d006      	beq.n	800d442 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d434:	4b0a      	ldr	r3, [pc, #40]	; (800d460 <mem_init+0x98>)
 800d436:	f240 221f 	movw	r2, #543	; 0x21f
 800d43a:	490a      	ldr	r1, [pc, #40]	; (800d464 <mem_init+0x9c>)
 800d43c:	480a      	ldr	r0, [pc, #40]	; (800d468 <mem_init+0xa0>)
 800d43e:	f009 fdd5 	bl	8016fec <iprintf>
  }
}
 800d442:	bf00      	nop
 800d444:	3708      	adds	r7, #8
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}
 800d44a:	bf00      	nop
 800d44c:	2000d8e4 	.word	0x2000d8e4
 800d450:	2000df38 	.word	0x2000df38
 800d454:	2000df3c 	.word	0x2000df3c
 800d458:	2000df44 	.word	0x2000df44
 800d45c:	2000df40 	.word	0x2000df40
 800d460:	08018490 	.word	0x08018490
 800d464:	08018564 	.word	0x08018564
 800d468:	080184d8 	.word	0x080184d8

0800d46c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b086      	sub	sp, #24
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f7ff fef3 	bl	800d260 <mem_to_ptr>
 800d47a:	4603      	mov	r3, r0
 800d47c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	881b      	ldrh	r3, [r3, #0]
 800d482:	4618      	mov	r0, r3
 800d484:	f7ff feda 	bl	800d23c <ptr_to_mem>
 800d488:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	885b      	ldrh	r3, [r3, #2]
 800d48e:	4618      	mov	r0, r3
 800d490:	f7ff fed4 	bl	800d23c <ptr_to_mem>
 800d494:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	881b      	ldrh	r3, [r3, #0]
 800d49a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d49e:	d818      	bhi.n	800d4d2 <mem_link_valid+0x66>
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	885b      	ldrh	r3, [r3, #2]
 800d4a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d4a8:	d813      	bhi.n	800d4d2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d4ae:	8afa      	ldrh	r2, [r7, #22]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d004      	beq.n	800d4be <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	881b      	ldrh	r3, [r3, #0]
 800d4b8:	8afa      	ldrh	r2, [r7, #22]
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d109      	bne.n	800d4d2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d4be:	4b08      	ldr	r3, [pc, #32]	; (800d4e0 <mem_link_valid+0x74>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d4c2:	693a      	ldr	r2, [r7, #16]
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d006      	beq.n	800d4d6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d4c8:	693b      	ldr	r3, [r7, #16]
 800d4ca:	885b      	ldrh	r3, [r3, #2]
 800d4cc:	8afa      	ldrh	r2, [r7, #22]
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	d001      	beq.n	800d4d6 <mem_link_valid+0x6a>
    return 0;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	e000      	b.n	800d4d8 <mem_link_valid+0x6c>
  }
  return 1;
 800d4d6:	2301      	movs	r3, #1
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3718      	adds	r7, #24
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}
 800d4e0:	2000df3c 	.word	0x2000df3c

0800d4e4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b088      	sub	sp, #32
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d070      	beq.n	800d5d4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f003 0303 	and.w	r3, r3, #3
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d00d      	beq.n	800d518 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d4fc:	4b37      	ldr	r3, [pc, #220]	; (800d5dc <mem_free+0xf8>)
 800d4fe:	f240 2273 	movw	r2, #627	; 0x273
 800d502:	4937      	ldr	r1, [pc, #220]	; (800d5e0 <mem_free+0xfc>)
 800d504:	4837      	ldr	r0, [pc, #220]	; (800d5e4 <mem_free+0x100>)
 800d506:	f009 fd71 	bl	8016fec <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d50a:	f009 fd07 	bl	8016f1c <sys_arch_protect>
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	68f8      	ldr	r0, [r7, #12]
 800d512:	f009 fd11 	bl	8016f38 <sys_arch_unprotect>
    return;
 800d516:	e05e      	b.n	800d5d6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	3b08      	subs	r3, #8
 800d51c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d51e:	4b32      	ldr	r3, [pc, #200]	; (800d5e8 <mem_free+0x104>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	69fa      	ldr	r2, [r7, #28]
 800d524:	429a      	cmp	r2, r3
 800d526:	d306      	bcc.n	800d536 <mem_free+0x52>
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f103 020c 	add.w	r2, r3, #12
 800d52e:	4b2f      	ldr	r3, [pc, #188]	; (800d5ec <mem_free+0x108>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	429a      	cmp	r2, r3
 800d534:	d90d      	bls.n	800d552 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d536:	4b29      	ldr	r3, [pc, #164]	; (800d5dc <mem_free+0xf8>)
 800d538:	f240 227f 	movw	r2, #639	; 0x27f
 800d53c:	492c      	ldr	r1, [pc, #176]	; (800d5f0 <mem_free+0x10c>)
 800d53e:	4829      	ldr	r0, [pc, #164]	; (800d5e4 <mem_free+0x100>)
 800d540:	f009 fd54 	bl	8016fec <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d544:	f009 fcea 	bl	8016f1c <sys_arch_protect>
 800d548:	6138      	str	r0, [r7, #16]
 800d54a:	6938      	ldr	r0, [r7, #16]
 800d54c:	f009 fcf4 	bl	8016f38 <sys_arch_unprotect>
    return;
 800d550:	e041      	b.n	800d5d6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d552:	4828      	ldr	r0, [pc, #160]	; (800d5f4 <mem_free+0x110>)
 800d554:	f009 fca6 	bl	8016ea4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d558:	69fb      	ldr	r3, [r7, #28]
 800d55a:	791b      	ldrb	r3, [r3, #4]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d110      	bne.n	800d582 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d560:	4b1e      	ldr	r3, [pc, #120]	; (800d5dc <mem_free+0xf8>)
 800d562:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d566:	4924      	ldr	r1, [pc, #144]	; (800d5f8 <mem_free+0x114>)
 800d568:	481e      	ldr	r0, [pc, #120]	; (800d5e4 <mem_free+0x100>)
 800d56a:	f009 fd3f 	bl	8016fec <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d56e:	4821      	ldr	r0, [pc, #132]	; (800d5f4 <mem_free+0x110>)
 800d570:	f009 fca7 	bl	8016ec2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d574:	f009 fcd2 	bl	8016f1c <sys_arch_protect>
 800d578:	6178      	str	r0, [r7, #20]
 800d57a:	6978      	ldr	r0, [r7, #20]
 800d57c:	f009 fcdc 	bl	8016f38 <sys_arch_unprotect>
    return;
 800d580:	e029      	b.n	800d5d6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d582:	69f8      	ldr	r0, [r7, #28]
 800d584:	f7ff ff72 	bl	800d46c <mem_link_valid>
 800d588:	4603      	mov	r3, r0
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d110      	bne.n	800d5b0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d58e:	4b13      	ldr	r3, [pc, #76]	; (800d5dc <mem_free+0xf8>)
 800d590:	f240 2295 	movw	r2, #661	; 0x295
 800d594:	4919      	ldr	r1, [pc, #100]	; (800d5fc <mem_free+0x118>)
 800d596:	4813      	ldr	r0, [pc, #76]	; (800d5e4 <mem_free+0x100>)
 800d598:	f009 fd28 	bl	8016fec <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d59c:	4815      	ldr	r0, [pc, #84]	; (800d5f4 <mem_free+0x110>)
 800d59e:	f009 fc90 	bl	8016ec2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d5a2:	f009 fcbb 	bl	8016f1c <sys_arch_protect>
 800d5a6:	61b8      	str	r0, [r7, #24]
 800d5a8:	69b8      	ldr	r0, [r7, #24]
 800d5aa:	f009 fcc5 	bl	8016f38 <sys_arch_unprotect>
    return;
 800d5ae:	e012      	b.n	800d5d6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d5b0:	69fb      	ldr	r3, [r7, #28]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d5b6:	4b12      	ldr	r3, [pc, #72]	; (800d600 <mem_free+0x11c>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	69fa      	ldr	r2, [r7, #28]
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d202      	bcs.n	800d5c6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d5c0:	4a0f      	ldr	r2, [pc, #60]	; (800d600 <mem_free+0x11c>)
 800d5c2:	69fb      	ldr	r3, [r7, #28]
 800d5c4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d5c6:	69f8      	ldr	r0, [r7, #28]
 800d5c8:	f7ff fe5c 	bl	800d284 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d5cc:	4809      	ldr	r0, [pc, #36]	; (800d5f4 <mem_free+0x110>)
 800d5ce:	f009 fc78 	bl	8016ec2 <sys_mutex_unlock>
 800d5d2:	e000      	b.n	800d5d6 <mem_free+0xf2>
    return;
 800d5d4:	bf00      	nop
}
 800d5d6:	3720      	adds	r7, #32
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}
 800d5dc:	08018490 	.word	0x08018490
 800d5e0:	08018580 	.word	0x08018580
 800d5e4:	080184d8 	.word	0x080184d8
 800d5e8:	2000df38 	.word	0x2000df38
 800d5ec:	2000df3c 	.word	0x2000df3c
 800d5f0:	080185a4 	.word	0x080185a4
 800d5f4:	2000df40 	.word	0x2000df40
 800d5f8:	080185c0 	.word	0x080185c0
 800d5fc:	080185e8 	.word	0x080185e8
 800d600:	2000df44 	.word	0x2000df44

0800d604 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b088      	sub	sp, #32
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	460b      	mov	r3, r1
 800d60e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d610:	887b      	ldrh	r3, [r7, #2]
 800d612:	3303      	adds	r3, #3
 800d614:	b29b      	uxth	r3, r3
 800d616:	f023 0303 	bic.w	r3, r3, #3
 800d61a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d61c:	8bfb      	ldrh	r3, [r7, #30]
 800d61e:	2b0b      	cmp	r3, #11
 800d620:	d801      	bhi.n	800d626 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d622:	230c      	movs	r3, #12
 800d624:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d626:	8bfb      	ldrh	r3, [r7, #30]
 800d628:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d62c:	d803      	bhi.n	800d636 <mem_trim+0x32>
 800d62e:	8bfa      	ldrh	r2, [r7, #30]
 800d630:	887b      	ldrh	r3, [r7, #2]
 800d632:	429a      	cmp	r2, r3
 800d634:	d201      	bcs.n	800d63a <mem_trim+0x36>
    return NULL;
 800d636:	2300      	movs	r3, #0
 800d638:	e0d8      	b.n	800d7ec <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d63a:	4b6e      	ldr	r3, [pc, #440]	; (800d7f4 <mem_trim+0x1f0>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	687a      	ldr	r2, [r7, #4]
 800d640:	429a      	cmp	r2, r3
 800d642:	d304      	bcc.n	800d64e <mem_trim+0x4a>
 800d644:	4b6c      	ldr	r3, [pc, #432]	; (800d7f8 <mem_trim+0x1f4>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	687a      	ldr	r2, [r7, #4]
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d306      	bcc.n	800d65c <mem_trim+0x58>
 800d64e:	4b6b      	ldr	r3, [pc, #428]	; (800d7fc <mem_trim+0x1f8>)
 800d650:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d654:	496a      	ldr	r1, [pc, #424]	; (800d800 <mem_trim+0x1fc>)
 800d656:	486b      	ldr	r0, [pc, #428]	; (800d804 <mem_trim+0x200>)
 800d658:	f009 fcc8 	bl	8016fec <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d65c:	4b65      	ldr	r3, [pc, #404]	; (800d7f4 <mem_trim+0x1f0>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	687a      	ldr	r2, [r7, #4]
 800d662:	429a      	cmp	r2, r3
 800d664:	d304      	bcc.n	800d670 <mem_trim+0x6c>
 800d666:	4b64      	ldr	r3, [pc, #400]	; (800d7f8 <mem_trim+0x1f4>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	687a      	ldr	r2, [r7, #4]
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d307      	bcc.n	800d680 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d670:	f009 fc54 	bl	8016f1c <sys_arch_protect>
 800d674:	60b8      	str	r0, [r7, #8]
 800d676:	68b8      	ldr	r0, [r7, #8]
 800d678:	f009 fc5e 	bl	8016f38 <sys_arch_unprotect>
    return rmem;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	e0b5      	b.n	800d7ec <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	3b08      	subs	r3, #8
 800d684:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d686:	69b8      	ldr	r0, [r7, #24]
 800d688:	f7ff fdea 	bl	800d260 <mem_to_ptr>
 800d68c:	4603      	mov	r3, r0
 800d68e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d690:	69bb      	ldr	r3, [r7, #24]
 800d692:	881a      	ldrh	r2, [r3, #0]
 800d694:	8afb      	ldrh	r3, [r7, #22]
 800d696:	1ad3      	subs	r3, r2, r3
 800d698:	b29b      	uxth	r3, r3
 800d69a:	3b08      	subs	r3, #8
 800d69c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d69e:	8bfa      	ldrh	r2, [r7, #30]
 800d6a0:	8abb      	ldrh	r3, [r7, #20]
 800d6a2:	429a      	cmp	r2, r3
 800d6a4:	d906      	bls.n	800d6b4 <mem_trim+0xb0>
 800d6a6:	4b55      	ldr	r3, [pc, #340]	; (800d7fc <mem_trim+0x1f8>)
 800d6a8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d6ac:	4956      	ldr	r1, [pc, #344]	; (800d808 <mem_trim+0x204>)
 800d6ae:	4855      	ldr	r0, [pc, #340]	; (800d804 <mem_trim+0x200>)
 800d6b0:	f009 fc9c 	bl	8016fec <iprintf>
  if (newsize > size) {
 800d6b4:	8bfa      	ldrh	r2, [r7, #30]
 800d6b6:	8abb      	ldrh	r3, [r7, #20]
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d901      	bls.n	800d6c0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	e095      	b.n	800d7ec <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d6c0:	8bfa      	ldrh	r2, [r7, #30]
 800d6c2:	8abb      	ldrh	r3, [r7, #20]
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	d101      	bne.n	800d6cc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	e08f      	b.n	800d7ec <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d6cc:	484f      	ldr	r0, [pc, #316]	; (800d80c <mem_trim+0x208>)
 800d6ce:	f009 fbe9 	bl	8016ea4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d6d2:	69bb      	ldr	r3, [r7, #24]
 800d6d4:	881b      	ldrh	r3, [r3, #0]
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7ff fdb0 	bl	800d23c <ptr_to_mem>
 800d6dc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	791b      	ldrb	r3, [r3, #4]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d13f      	bne.n	800d766 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d6e6:	69bb      	ldr	r3, [r7, #24]
 800d6e8:	881b      	ldrh	r3, [r3, #0]
 800d6ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d6ee:	d106      	bne.n	800d6fe <mem_trim+0xfa>
 800d6f0:	4b42      	ldr	r3, [pc, #264]	; (800d7fc <mem_trim+0x1f8>)
 800d6f2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d6f6:	4946      	ldr	r1, [pc, #280]	; (800d810 <mem_trim+0x20c>)
 800d6f8:	4842      	ldr	r0, [pc, #264]	; (800d804 <mem_trim+0x200>)
 800d6fa:	f009 fc77 	bl	8016fec <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	881b      	ldrh	r3, [r3, #0]
 800d702:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d704:	8afa      	ldrh	r2, [r7, #22]
 800d706:	8bfb      	ldrh	r3, [r7, #30]
 800d708:	4413      	add	r3, r2
 800d70a:	b29b      	uxth	r3, r3
 800d70c:	3308      	adds	r3, #8
 800d70e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d710:	4b40      	ldr	r3, [pc, #256]	; (800d814 <mem_trim+0x210>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	693a      	ldr	r2, [r7, #16]
 800d716:	429a      	cmp	r2, r3
 800d718:	d106      	bne.n	800d728 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d71a:	89fb      	ldrh	r3, [r7, #14]
 800d71c:	4618      	mov	r0, r3
 800d71e:	f7ff fd8d 	bl	800d23c <ptr_to_mem>
 800d722:	4603      	mov	r3, r0
 800d724:	4a3b      	ldr	r2, [pc, #236]	; (800d814 <mem_trim+0x210>)
 800d726:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d728:	89fb      	ldrh	r3, [r7, #14]
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7ff fd86 	bl	800d23c <ptr_to_mem>
 800d730:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	2200      	movs	r2, #0
 800d736:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	89ba      	ldrh	r2, [r7, #12]
 800d73c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	8afa      	ldrh	r2, [r7, #22]
 800d742:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d744:	69bb      	ldr	r3, [r7, #24]
 800d746:	89fa      	ldrh	r2, [r7, #14]
 800d748:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d74a:	693b      	ldr	r3, [r7, #16]
 800d74c:	881b      	ldrh	r3, [r3, #0]
 800d74e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d752:	d047      	beq.n	800d7e4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	881b      	ldrh	r3, [r3, #0]
 800d758:	4618      	mov	r0, r3
 800d75a:	f7ff fd6f 	bl	800d23c <ptr_to_mem>
 800d75e:	4602      	mov	r2, r0
 800d760:	89fb      	ldrh	r3, [r7, #14]
 800d762:	8053      	strh	r3, [r2, #2]
 800d764:	e03e      	b.n	800d7e4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d766:	8bfb      	ldrh	r3, [r7, #30]
 800d768:	f103 0214 	add.w	r2, r3, #20
 800d76c:	8abb      	ldrh	r3, [r7, #20]
 800d76e:	429a      	cmp	r2, r3
 800d770:	d838      	bhi.n	800d7e4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d772:	8afa      	ldrh	r2, [r7, #22]
 800d774:	8bfb      	ldrh	r3, [r7, #30]
 800d776:	4413      	add	r3, r2
 800d778:	b29b      	uxth	r3, r3
 800d77a:	3308      	adds	r3, #8
 800d77c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d77e:	69bb      	ldr	r3, [r7, #24]
 800d780:	881b      	ldrh	r3, [r3, #0]
 800d782:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d786:	d106      	bne.n	800d796 <mem_trim+0x192>
 800d788:	4b1c      	ldr	r3, [pc, #112]	; (800d7fc <mem_trim+0x1f8>)
 800d78a:	f240 3216 	movw	r2, #790	; 0x316
 800d78e:	4920      	ldr	r1, [pc, #128]	; (800d810 <mem_trim+0x20c>)
 800d790:	481c      	ldr	r0, [pc, #112]	; (800d804 <mem_trim+0x200>)
 800d792:	f009 fc2b 	bl	8016fec <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d796:	89fb      	ldrh	r3, [r7, #14]
 800d798:	4618      	mov	r0, r3
 800d79a:	f7ff fd4f 	bl	800d23c <ptr_to_mem>
 800d79e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d7a0:	4b1c      	ldr	r3, [pc, #112]	; (800d814 <mem_trim+0x210>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	693a      	ldr	r2, [r7, #16]
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d202      	bcs.n	800d7b0 <mem_trim+0x1ac>
      lfree = mem2;
 800d7aa:	4a1a      	ldr	r2, [pc, #104]	; (800d814 <mem_trim+0x210>)
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d7b6:	69bb      	ldr	r3, [r7, #24]
 800d7b8:	881a      	ldrh	r2, [r3, #0]
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	8afa      	ldrh	r2, [r7, #22]
 800d7c2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d7c4:	69bb      	ldr	r3, [r7, #24]
 800d7c6:	89fa      	ldrh	r2, [r7, #14]
 800d7c8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	881b      	ldrh	r3, [r3, #0]
 800d7ce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d7d2:	d007      	beq.n	800d7e4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	881b      	ldrh	r3, [r3, #0]
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7ff fd2f 	bl	800d23c <ptr_to_mem>
 800d7de:	4602      	mov	r2, r0
 800d7e0:	89fb      	ldrh	r3, [r7, #14]
 800d7e2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d7e4:	4809      	ldr	r0, [pc, #36]	; (800d80c <mem_trim+0x208>)
 800d7e6:	f009 fb6c 	bl	8016ec2 <sys_mutex_unlock>
  return rmem;
 800d7ea:	687b      	ldr	r3, [r7, #4]
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3720      	adds	r7, #32
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}
 800d7f4:	2000df38 	.word	0x2000df38
 800d7f8:	2000df3c 	.word	0x2000df3c
 800d7fc:	08018490 	.word	0x08018490
 800d800:	0801861c 	.word	0x0801861c
 800d804:	080184d8 	.word	0x080184d8
 800d808:	08018634 	.word	0x08018634
 800d80c:	2000df40 	.word	0x2000df40
 800d810:	08018654 	.word	0x08018654
 800d814:	2000df44 	.word	0x2000df44

0800d818 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b088      	sub	sp, #32
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	4603      	mov	r3, r0
 800d820:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d822:	88fb      	ldrh	r3, [r7, #6]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d101      	bne.n	800d82c <mem_malloc+0x14>
    return NULL;
 800d828:	2300      	movs	r3, #0
 800d82a:	e0e2      	b.n	800d9f2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d82c:	88fb      	ldrh	r3, [r7, #6]
 800d82e:	3303      	adds	r3, #3
 800d830:	b29b      	uxth	r3, r3
 800d832:	f023 0303 	bic.w	r3, r3, #3
 800d836:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d838:	8bbb      	ldrh	r3, [r7, #28]
 800d83a:	2b0b      	cmp	r3, #11
 800d83c:	d801      	bhi.n	800d842 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d83e:	230c      	movs	r3, #12
 800d840:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d842:	8bbb      	ldrh	r3, [r7, #28]
 800d844:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d848:	d803      	bhi.n	800d852 <mem_malloc+0x3a>
 800d84a:	8bba      	ldrh	r2, [r7, #28]
 800d84c:	88fb      	ldrh	r3, [r7, #6]
 800d84e:	429a      	cmp	r2, r3
 800d850:	d201      	bcs.n	800d856 <mem_malloc+0x3e>
    return NULL;
 800d852:	2300      	movs	r3, #0
 800d854:	e0cd      	b.n	800d9f2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d856:	4869      	ldr	r0, [pc, #420]	; (800d9fc <mem_malloc+0x1e4>)
 800d858:	f009 fb24 	bl	8016ea4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d85c:	4b68      	ldr	r3, [pc, #416]	; (800da00 <mem_malloc+0x1e8>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	4618      	mov	r0, r3
 800d862:	f7ff fcfd 	bl	800d260 <mem_to_ptr>
 800d866:	4603      	mov	r3, r0
 800d868:	83fb      	strh	r3, [r7, #30]
 800d86a:	e0b7      	b.n	800d9dc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d86c:	8bfb      	ldrh	r3, [r7, #30]
 800d86e:	4618      	mov	r0, r3
 800d870:	f7ff fce4 	bl	800d23c <ptr_to_mem>
 800d874:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	791b      	ldrb	r3, [r3, #4]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	f040 80a7 	bne.w	800d9ce <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	881b      	ldrh	r3, [r3, #0]
 800d884:	461a      	mov	r2, r3
 800d886:	8bfb      	ldrh	r3, [r7, #30]
 800d888:	1ad3      	subs	r3, r2, r3
 800d88a:	f1a3 0208 	sub.w	r2, r3, #8
 800d88e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d890:	429a      	cmp	r2, r3
 800d892:	f0c0 809c 	bcc.w	800d9ce <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	881b      	ldrh	r3, [r3, #0]
 800d89a:	461a      	mov	r2, r3
 800d89c:	8bfb      	ldrh	r3, [r7, #30]
 800d89e:	1ad3      	subs	r3, r2, r3
 800d8a0:	f1a3 0208 	sub.w	r2, r3, #8
 800d8a4:	8bbb      	ldrh	r3, [r7, #28]
 800d8a6:	3314      	adds	r3, #20
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d333      	bcc.n	800d914 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d8ac:	8bfa      	ldrh	r2, [r7, #30]
 800d8ae:	8bbb      	ldrh	r3, [r7, #28]
 800d8b0:	4413      	add	r3, r2
 800d8b2:	b29b      	uxth	r3, r3
 800d8b4:	3308      	adds	r3, #8
 800d8b6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d8b8:	8a7b      	ldrh	r3, [r7, #18]
 800d8ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d8be:	d106      	bne.n	800d8ce <mem_malloc+0xb6>
 800d8c0:	4b50      	ldr	r3, [pc, #320]	; (800da04 <mem_malloc+0x1ec>)
 800d8c2:	f240 3287 	movw	r2, #903	; 0x387
 800d8c6:	4950      	ldr	r1, [pc, #320]	; (800da08 <mem_malloc+0x1f0>)
 800d8c8:	4850      	ldr	r0, [pc, #320]	; (800da0c <mem_malloc+0x1f4>)
 800d8ca:	f009 fb8f 	bl	8016fec <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d8ce:	8a7b      	ldrh	r3, [r7, #18]
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7ff fcb3 	bl	800d23c <ptr_to_mem>
 800d8d6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	2200      	movs	r2, #0
 800d8dc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	881a      	ldrh	r2, [r3, #0]
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	8bfa      	ldrh	r2, [r7, #30]
 800d8ea:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	8a7a      	ldrh	r2, [r7, #18]
 800d8f0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	2201      	movs	r2, #1
 800d8f6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	881b      	ldrh	r3, [r3, #0]
 800d8fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d900:	d00b      	beq.n	800d91a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	881b      	ldrh	r3, [r3, #0]
 800d906:	4618      	mov	r0, r3
 800d908:	f7ff fc98 	bl	800d23c <ptr_to_mem>
 800d90c:	4602      	mov	r2, r0
 800d90e:	8a7b      	ldrh	r3, [r7, #18]
 800d910:	8053      	strh	r3, [r2, #2]
 800d912:	e002      	b.n	800d91a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	2201      	movs	r2, #1
 800d918:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d91a:	4b39      	ldr	r3, [pc, #228]	; (800da00 <mem_malloc+0x1e8>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	697a      	ldr	r2, [r7, #20]
 800d920:	429a      	cmp	r2, r3
 800d922:	d127      	bne.n	800d974 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d924:	4b36      	ldr	r3, [pc, #216]	; (800da00 <mem_malloc+0x1e8>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d92a:	e005      	b.n	800d938 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d92c:	69bb      	ldr	r3, [r7, #24]
 800d92e:	881b      	ldrh	r3, [r3, #0]
 800d930:	4618      	mov	r0, r3
 800d932:	f7ff fc83 	bl	800d23c <ptr_to_mem>
 800d936:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d938:	69bb      	ldr	r3, [r7, #24]
 800d93a:	791b      	ldrb	r3, [r3, #4]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d004      	beq.n	800d94a <mem_malloc+0x132>
 800d940:	4b33      	ldr	r3, [pc, #204]	; (800da10 <mem_malloc+0x1f8>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	69ba      	ldr	r2, [r7, #24]
 800d946:	429a      	cmp	r2, r3
 800d948:	d1f0      	bne.n	800d92c <mem_malloc+0x114>
          }
          lfree = cur;
 800d94a:	4a2d      	ldr	r2, [pc, #180]	; (800da00 <mem_malloc+0x1e8>)
 800d94c:	69bb      	ldr	r3, [r7, #24]
 800d94e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d950:	4b2b      	ldr	r3, [pc, #172]	; (800da00 <mem_malloc+0x1e8>)
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	4b2e      	ldr	r3, [pc, #184]	; (800da10 <mem_malloc+0x1f8>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	429a      	cmp	r2, r3
 800d95a:	d00b      	beq.n	800d974 <mem_malloc+0x15c>
 800d95c:	4b28      	ldr	r3, [pc, #160]	; (800da00 <mem_malloc+0x1e8>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	791b      	ldrb	r3, [r3, #4]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d006      	beq.n	800d974 <mem_malloc+0x15c>
 800d966:	4b27      	ldr	r3, [pc, #156]	; (800da04 <mem_malloc+0x1ec>)
 800d968:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d96c:	4929      	ldr	r1, [pc, #164]	; (800da14 <mem_malloc+0x1fc>)
 800d96e:	4827      	ldr	r0, [pc, #156]	; (800da0c <mem_malloc+0x1f4>)
 800d970:	f009 fb3c 	bl	8016fec <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d974:	4821      	ldr	r0, [pc, #132]	; (800d9fc <mem_malloc+0x1e4>)
 800d976:	f009 faa4 	bl	8016ec2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d97a:	8bba      	ldrh	r2, [r7, #28]
 800d97c:	697b      	ldr	r3, [r7, #20]
 800d97e:	4413      	add	r3, r2
 800d980:	3308      	adds	r3, #8
 800d982:	4a23      	ldr	r2, [pc, #140]	; (800da10 <mem_malloc+0x1f8>)
 800d984:	6812      	ldr	r2, [r2, #0]
 800d986:	4293      	cmp	r3, r2
 800d988:	d906      	bls.n	800d998 <mem_malloc+0x180>
 800d98a:	4b1e      	ldr	r3, [pc, #120]	; (800da04 <mem_malloc+0x1ec>)
 800d98c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d990:	4921      	ldr	r1, [pc, #132]	; (800da18 <mem_malloc+0x200>)
 800d992:	481e      	ldr	r0, [pc, #120]	; (800da0c <mem_malloc+0x1f4>)
 800d994:	f009 fb2a 	bl	8016fec <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	f003 0303 	and.w	r3, r3, #3
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d006      	beq.n	800d9b0 <mem_malloc+0x198>
 800d9a2:	4b18      	ldr	r3, [pc, #96]	; (800da04 <mem_malloc+0x1ec>)
 800d9a4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d9a8:	491c      	ldr	r1, [pc, #112]	; (800da1c <mem_malloc+0x204>)
 800d9aa:	4818      	ldr	r0, [pc, #96]	; (800da0c <mem_malloc+0x1f4>)
 800d9ac:	f009 fb1e 	bl	8016fec <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	f003 0303 	and.w	r3, r3, #3
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d006      	beq.n	800d9c8 <mem_malloc+0x1b0>
 800d9ba:	4b12      	ldr	r3, [pc, #72]	; (800da04 <mem_malloc+0x1ec>)
 800d9bc:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d9c0:	4917      	ldr	r1, [pc, #92]	; (800da20 <mem_malloc+0x208>)
 800d9c2:	4812      	ldr	r0, [pc, #72]	; (800da0c <mem_malloc+0x1f4>)
 800d9c4:	f009 fb12 	bl	8016fec <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	3308      	adds	r3, #8
 800d9cc:	e011      	b.n	800d9f2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d9ce:	8bfb      	ldrh	r3, [r7, #30]
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7ff fc33 	bl	800d23c <ptr_to_mem>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	881b      	ldrh	r3, [r3, #0]
 800d9da:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d9dc:	8bfa      	ldrh	r2, [r7, #30]
 800d9de:	8bbb      	ldrh	r3, [r7, #28]
 800d9e0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	f4ff af41 	bcc.w	800d86c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d9ea:	4804      	ldr	r0, [pc, #16]	; (800d9fc <mem_malloc+0x1e4>)
 800d9ec:	f009 fa69 	bl	8016ec2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d9f0:	2300      	movs	r3, #0
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3720      	adds	r7, #32
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}
 800d9fa:	bf00      	nop
 800d9fc:	2000df40 	.word	0x2000df40
 800da00:	2000df44 	.word	0x2000df44
 800da04:	08018490 	.word	0x08018490
 800da08:	08018654 	.word	0x08018654
 800da0c:	080184d8 	.word	0x080184d8
 800da10:	2000df3c 	.word	0x2000df3c
 800da14:	08018668 	.word	0x08018668
 800da18:	08018684 	.word	0x08018684
 800da1c:	080186b4 	.word	0x080186b4
 800da20:	080186e4 	.word	0x080186e4

0800da24 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800da24:	b480      	push	{r7}
 800da26:	b085      	sub	sp, #20
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	689b      	ldr	r3, [r3, #8]
 800da30:	2200      	movs	r2, #0
 800da32:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	3303      	adds	r3, #3
 800da3a:	f023 0303 	bic.w	r3, r3, #3
 800da3e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800da40:	2300      	movs	r3, #0
 800da42:	60fb      	str	r3, [r7, #12]
 800da44:	e011      	b.n	800da6a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	689b      	ldr	r3, [r3, #8]
 800da4a:	681a      	ldr	r2, [r3, #0]
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	689b      	ldr	r3, [r3, #8]
 800da54:	68ba      	ldr	r2, [r7, #8]
 800da56:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	881b      	ldrh	r3, [r3, #0]
 800da5c:	461a      	mov	r2, r3
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	4413      	add	r3, r2
 800da62:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	3301      	adds	r3, #1
 800da68:	60fb      	str	r3, [r7, #12]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	885b      	ldrh	r3, [r3, #2]
 800da6e:	461a      	mov	r2, r3
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	4293      	cmp	r3, r2
 800da74:	dbe7      	blt.n	800da46 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800da76:	bf00      	nop
 800da78:	bf00      	nop
 800da7a:	3714      	adds	r7, #20
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr

0800da84 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800da8a:	2300      	movs	r3, #0
 800da8c:	80fb      	strh	r3, [r7, #6]
 800da8e:	e009      	b.n	800daa4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800da90:	88fb      	ldrh	r3, [r7, #6]
 800da92:	4a08      	ldr	r2, [pc, #32]	; (800dab4 <memp_init+0x30>)
 800da94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da98:	4618      	mov	r0, r3
 800da9a:	f7ff ffc3 	bl	800da24 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800da9e:	88fb      	ldrh	r3, [r7, #6]
 800daa0:	3301      	adds	r3, #1
 800daa2:	80fb      	strh	r3, [r7, #6]
 800daa4:	88fb      	ldrh	r3, [r7, #6]
 800daa6:	2b0c      	cmp	r3, #12
 800daa8:	d9f2      	bls.n	800da90 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800daaa:	bf00      	nop
 800daac:	bf00      	nop
 800daae:	3708      	adds	r7, #8
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}
 800dab4:	0801af6c 	.word	0x0801af6c

0800dab8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b084      	sub	sp, #16
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800dac0:	f009 fa2c 	bl	8016f1c <sys_arch_protect>
 800dac4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	689b      	ldr	r3, [r3, #8]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d015      	beq.n	800db00 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	689b      	ldr	r3, [r3, #8]
 800dad8:	68ba      	ldr	r2, [r7, #8]
 800dada:	6812      	ldr	r2, [r2, #0]
 800dadc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	f003 0303 	and.w	r3, r3, #3
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d006      	beq.n	800daf6 <do_memp_malloc_pool+0x3e>
 800dae8:	4b09      	ldr	r3, [pc, #36]	; (800db10 <do_memp_malloc_pool+0x58>)
 800daea:	f44f 728c 	mov.w	r2, #280	; 0x118
 800daee:	4909      	ldr	r1, [pc, #36]	; (800db14 <do_memp_malloc_pool+0x5c>)
 800daf0:	4809      	ldr	r0, [pc, #36]	; (800db18 <do_memp_malloc_pool+0x60>)
 800daf2:	f009 fa7b 	bl	8016fec <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800daf6:	68f8      	ldr	r0, [r7, #12]
 800daf8:	f009 fa1e 	bl	8016f38 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	e003      	b.n	800db08 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800db00:	68f8      	ldr	r0, [r7, #12]
 800db02:	f009 fa19 	bl	8016f38 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800db06:	2300      	movs	r3, #0
}
 800db08:	4618      	mov	r0, r3
 800db0a:	3710      	adds	r7, #16
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}
 800db10:	08018708 	.word	0x08018708
 800db14:	08018738 	.word	0x08018738
 800db18:	0801875c 	.word	0x0801875c

0800db1c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b082      	sub	sp, #8
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d106      	bne.n	800db38 <memp_malloc_pool+0x1c>
 800db2a:	4b0a      	ldr	r3, [pc, #40]	; (800db54 <memp_malloc_pool+0x38>)
 800db2c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800db30:	4909      	ldr	r1, [pc, #36]	; (800db58 <memp_malloc_pool+0x3c>)
 800db32:	480a      	ldr	r0, [pc, #40]	; (800db5c <memp_malloc_pool+0x40>)
 800db34:	f009 fa5a 	bl	8016fec <iprintf>
  if (desc == NULL) {
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d101      	bne.n	800db42 <memp_malloc_pool+0x26>
    return NULL;
 800db3e:	2300      	movs	r3, #0
 800db40:	e003      	b.n	800db4a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f7ff ffb8 	bl	800dab8 <do_memp_malloc_pool>
 800db48:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3708      	adds	r7, #8
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}
 800db52:	bf00      	nop
 800db54:	08018708 	.word	0x08018708
 800db58:	08018784 	.word	0x08018784
 800db5c:	0801875c 	.word	0x0801875c

0800db60 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b084      	sub	sp, #16
 800db64:	af00      	add	r7, sp, #0
 800db66:	4603      	mov	r3, r0
 800db68:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800db6a:	79fb      	ldrb	r3, [r7, #7]
 800db6c:	2b0c      	cmp	r3, #12
 800db6e:	d908      	bls.n	800db82 <memp_malloc+0x22>
 800db70:	4b0a      	ldr	r3, [pc, #40]	; (800db9c <memp_malloc+0x3c>)
 800db72:	f240 1257 	movw	r2, #343	; 0x157
 800db76:	490a      	ldr	r1, [pc, #40]	; (800dba0 <memp_malloc+0x40>)
 800db78:	480a      	ldr	r0, [pc, #40]	; (800dba4 <memp_malloc+0x44>)
 800db7a:	f009 fa37 	bl	8016fec <iprintf>
 800db7e:	2300      	movs	r3, #0
 800db80:	e008      	b.n	800db94 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800db82:	79fb      	ldrb	r3, [r7, #7]
 800db84:	4a08      	ldr	r2, [pc, #32]	; (800dba8 <memp_malloc+0x48>)
 800db86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db8a:	4618      	mov	r0, r3
 800db8c:	f7ff ff94 	bl	800dab8 <do_memp_malloc_pool>
 800db90:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800db92:	68fb      	ldr	r3, [r7, #12]
}
 800db94:	4618      	mov	r0, r3
 800db96:	3710      	adds	r7, #16
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}
 800db9c:	08018708 	.word	0x08018708
 800dba0:	08018798 	.word	0x08018798
 800dba4:	0801875c 	.word	0x0801875c
 800dba8:	0801af6c 	.word	0x0801af6c

0800dbac <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	f003 0303 	and.w	r3, r3, #3
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d006      	beq.n	800dbce <do_memp_free_pool+0x22>
 800dbc0:	4b0d      	ldr	r3, [pc, #52]	; (800dbf8 <do_memp_free_pool+0x4c>)
 800dbc2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800dbc6:	490d      	ldr	r1, [pc, #52]	; (800dbfc <do_memp_free_pool+0x50>)
 800dbc8:	480d      	ldr	r0, [pc, #52]	; (800dc00 <do_memp_free_pool+0x54>)
 800dbca:	f009 fa0f 	bl	8016fec <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800dbd2:	f009 f9a3 	bl	8016f1c <sys_arch_protect>
 800dbd6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	689b      	ldr	r3, [r3, #8]
 800dbdc:	681a      	ldr	r2, [r3, #0]
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	689b      	ldr	r3, [r3, #8]
 800dbe6:	68fa      	ldr	r2, [r7, #12]
 800dbe8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800dbea:	68b8      	ldr	r0, [r7, #8]
 800dbec:	f009 f9a4 	bl	8016f38 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800dbf0:	bf00      	nop
 800dbf2:	3710      	adds	r7, #16
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}
 800dbf8:	08018708 	.word	0x08018708
 800dbfc:	080187b8 	.word	0x080187b8
 800dc00:	0801875c 	.word	0x0801875c

0800dc04 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b082      	sub	sp, #8
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
 800dc0c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d106      	bne.n	800dc22 <memp_free_pool+0x1e>
 800dc14:	4b0a      	ldr	r3, [pc, #40]	; (800dc40 <memp_free_pool+0x3c>)
 800dc16:	f240 1295 	movw	r2, #405	; 0x195
 800dc1a:	490a      	ldr	r1, [pc, #40]	; (800dc44 <memp_free_pool+0x40>)
 800dc1c:	480a      	ldr	r0, [pc, #40]	; (800dc48 <memp_free_pool+0x44>)
 800dc1e:	f009 f9e5 	bl	8016fec <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d007      	beq.n	800dc38 <memp_free_pool+0x34>
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d004      	beq.n	800dc38 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800dc2e:	6839      	ldr	r1, [r7, #0]
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f7ff ffbb 	bl	800dbac <do_memp_free_pool>
 800dc36:	e000      	b.n	800dc3a <memp_free_pool+0x36>
    return;
 800dc38:	bf00      	nop
}
 800dc3a:	3708      	adds	r7, #8
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}
 800dc40:	08018708 	.word	0x08018708
 800dc44:	08018784 	.word	0x08018784
 800dc48:	0801875c 	.word	0x0801875c

0800dc4c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b082      	sub	sp, #8
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	4603      	mov	r3, r0
 800dc54:	6039      	str	r1, [r7, #0]
 800dc56:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800dc58:	79fb      	ldrb	r3, [r7, #7]
 800dc5a:	2b0c      	cmp	r3, #12
 800dc5c:	d907      	bls.n	800dc6e <memp_free+0x22>
 800dc5e:	4b0c      	ldr	r3, [pc, #48]	; (800dc90 <memp_free+0x44>)
 800dc60:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800dc64:	490b      	ldr	r1, [pc, #44]	; (800dc94 <memp_free+0x48>)
 800dc66:	480c      	ldr	r0, [pc, #48]	; (800dc98 <memp_free+0x4c>)
 800dc68:	f009 f9c0 	bl	8016fec <iprintf>
 800dc6c:	e00c      	b.n	800dc88 <memp_free+0x3c>

  if (mem == NULL) {
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d008      	beq.n	800dc86 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800dc74:	79fb      	ldrb	r3, [r7, #7]
 800dc76:	4a09      	ldr	r2, [pc, #36]	; (800dc9c <memp_free+0x50>)
 800dc78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc7c:	6839      	ldr	r1, [r7, #0]
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7ff ff94 	bl	800dbac <do_memp_free_pool>
 800dc84:	e000      	b.n	800dc88 <memp_free+0x3c>
    return;
 800dc86:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800dc88:	3708      	adds	r7, #8
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
 800dc8e:	bf00      	nop
 800dc90:	08018708 	.word	0x08018708
 800dc94:	080187d8 	.word	0x080187d8
 800dc98:	0801875c 	.word	0x0801875c
 800dc9c:	0801af6c 	.word	0x0801af6c

0800dca0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800dca0:	b480      	push	{r7}
 800dca2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800dca4:	bf00      	nop
 800dca6:	46bd      	mov	sp, r7
 800dca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcac:	4770      	bx	lr
	...

0800dcb0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b086      	sub	sp, #24
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	60f8      	str	r0, [r7, #12]
 800dcb8:	60b9      	str	r1, [r7, #8]
 800dcba:	607a      	str	r2, [r7, #4]
 800dcbc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d108      	bne.n	800dcd6 <netif_add+0x26>
 800dcc4:	4b57      	ldr	r3, [pc, #348]	; (800de24 <netif_add+0x174>)
 800dcc6:	f240 1227 	movw	r2, #295	; 0x127
 800dcca:	4957      	ldr	r1, [pc, #348]	; (800de28 <netif_add+0x178>)
 800dccc:	4857      	ldr	r0, [pc, #348]	; (800de2c <netif_add+0x17c>)
 800dcce:	f009 f98d 	bl	8016fec <iprintf>
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	e0a2      	b.n	800de1c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800dcd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d108      	bne.n	800dcee <netif_add+0x3e>
 800dcdc:	4b51      	ldr	r3, [pc, #324]	; (800de24 <netif_add+0x174>)
 800dcde:	f44f 7294 	mov.w	r2, #296	; 0x128
 800dce2:	4953      	ldr	r1, [pc, #332]	; (800de30 <netif_add+0x180>)
 800dce4:	4851      	ldr	r0, [pc, #324]	; (800de2c <netif_add+0x17c>)
 800dce6:	f009 f981 	bl	8016fec <iprintf>
 800dcea:	2300      	movs	r3, #0
 800dcec:	e096      	b.n	800de1c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d101      	bne.n	800dcf8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800dcf4:	4b4f      	ldr	r3, [pc, #316]	; (800de34 <netif_add+0x184>)
 800dcf6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d101      	bne.n	800dd02 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800dcfe:	4b4d      	ldr	r3, [pc, #308]	; (800de34 <netif_add+0x184>)
 800dd00:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d101      	bne.n	800dd0c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800dd08:	4b4a      	ldr	r3, [pc, #296]	; (800de34 <netif_add+0x184>)
 800dd0a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	2200      	movs	r2, #0
 800dd10:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	2200      	movs	r2, #0
 800dd16:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	4a45      	ldr	r2, [pc, #276]	; (800de38 <netif_add+0x188>)
 800dd22:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	2200      	movs	r2, #0
 800dd28:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	2200      	movs	r2, #0
 800dd36:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	6a3a      	ldr	r2, [r7, #32]
 800dd3c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800dd3e:	4b3f      	ldr	r3, [pc, #252]	; (800de3c <netif_add+0x18c>)
 800dd40:	781a      	ldrb	r2, [r3, #0]
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd4c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	687a      	ldr	r2, [r7, #4]
 800dd52:	68b9      	ldr	r1, [r7, #8]
 800dd54:	68f8      	ldr	r0, [r7, #12]
 800dd56:	f000 f913 	bl	800df80 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800dd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd5c:	68f8      	ldr	r0, [r7, #12]
 800dd5e:	4798      	blx	r3
 800dd60:	4603      	mov	r3, r0
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d001      	beq.n	800dd6a <netif_add+0xba>
    return NULL;
 800dd66:	2300      	movs	r3, #0
 800dd68:	e058      	b.n	800de1c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd70:	2bff      	cmp	r3, #255	; 0xff
 800dd72:	d103      	bne.n	800dd7c <netif_add+0xcc>
        netif->num = 0;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	2200      	movs	r2, #0
 800dd78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dd80:	4b2f      	ldr	r3, [pc, #188]	; (800de40 <netif_add+0x190>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	617b      	str	r3, [r7, #20]
 800dd86:	e02b      	b.n	800dde0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800dd88:	697a      	ldr	r2, [r7, #20]
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d106      	bne.n	800dd9e <netif_add+0xee>
 800dd90:	4b24      	ldr	r3, [pc, #144]	; (800de24 <netif_add+0x174>)
 800dd92:	f240 128b 	movw	r2, #395	; 0x18b
 800dd96:	492b      	ldr	r1, [pc, #172]	; (800de44 <netif_add+0x194>)
 800dd98:	4824      	ldr	r0, [pc, #144]	; (800de2c <netif_add+0x17c>)
 800dd9a:	f009 f927 	bl	8016fec <iprintf>
        num_netifs++;
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	3301      	adds	r3, #1
 800dda2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800dda4:	693b      	ldr	r3, [r7, #16]
 800dda6:	2bff      	cmp	r3, #255	; 0xff
 800dda8:	dd06      	ble.n	800ddb8 <netif_add+0x108>
 800ddaa:	4b1e      	ldr	r3, [pc, #120]	; (800de24 <netif_add+0x174>)
 800ddac:	f240 128d 	movw	r2, #397	; 0x18d
 800ddb0:	4925      	ldr	r1, [pc, #148]	; (800de48 <netif_add+0x198>)
 800ddb2:	481e      	ldr	r0, [pc, #120]	; (800de2c <netif_add+0x17c>)
 800ddb4:	f009 f91a 	bl	8016fec <iprintf>
        if (netif2->num == netif->num) {
 800ddb8:	697b      	ldr	r3, [r7, #20]
 800ddba:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d108      	bne.n	800ddda <netif_add+0x12a>
          netif->num++;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ddce:	3301      	adds	r3, #1
 800ddd0:	b2da      	uxtb	r2, r3
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800ddd8:	e005      	b.n	800dde6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ddda:	697b      	ldr	r3, [r7, #20]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	617b      	str	r3, [r7, #20]
 800dde0:	697b      	ldr	r3, [r7, #20]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d1d0      	bne.n	800dd88 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d1be      	bne.n	800dd6a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ddf2:	2bfe      	cmp	r3, #254	; 0xfe
 800ddf4:	d103      	bne.n	800ddfe <netif_add+0x14e>
    netif_num = 0;
 800ddf6:	4b11      	ldr	r3, [pc, #68]	; (800de3c <netif_add+0x18c>)
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	701a      	strb	r2, [r3, #0]
 800ddfc:	e006      	b.n	800de0c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de04:	3301      	adds	r3, #1
 800de06:	b2da      	uxtb	r2, r3
 800de08:	4b0c      	ldr	r3, [pc, #48]	; (800de3c <netif_add+0x18c>)
 800de0a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800de0c:	4b0c      	ldr	r3, [pc, #48]	; (800de40 <netif_add+0x190>)
 800de0e:	681a      	ldr	r2, [r3, #0]
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800de14:	4a0a      	ldr	r2, [pc, #40]	; (800de40 <netif_add+0x190>)
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800de1a:	68fb      	ldr	r3, [r7, #12]
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	3718      	adds	r7, #24
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}
 800de24:	080187f4 	.word	0x080187f4
 800de28:	08018888 	.word	0x08018888
 800de2c:	08018844 	.word	0x08018844
 800de30:	080188a4 	.word	0x080188a4
 800de34:	0801afe0 	.word	0x0801afe0
 800de38:	0800e25b 	.word	0x0800e25b
 800de3c:	2001101c 	.word	0x2001101c
 800de40:	20011014 	.word	0x20011014
 800de44:	080188c8 	.word	0x080188c8
 800de48:	080188dc 	.word	0x080188dc

0800de4c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b082      	sub	sp, #8
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
 800de54:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800de56:	6839      	ldr	r1, [r7, #0]
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f002 fb7d 	bl	8010558 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800de5e:	6839      	ldr	r1, [r7, #0]
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f006 fc91 	bl	8014788 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800de66:	bf00      	nop
 800de68:	3708      	adds	r7, #8
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
	...

0800de70 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b086      	sub	sp, #24
 800de74:	af00      	add	r7, sp, #0
 800de76:	60f8      	str	r0, [r7, #12]
 800de78:	60b9      	str	r1, [r7, #8]
 800de7a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d106      	bne.n	800de90 <netif_do_set_ipaddr+0x20>
 800de82:	4b1d      	ldr	r3, [pc, #116]	; (800def8 <netif_do_set_ipaddr+0x88>)
 800de84:	f240 12cb 	movw	r2, #459	; 0x1cb
 800de88:	491c      	ldr	r1, [pc, #112]	; (800defc <netif_do_set_ipaddr+0x8c>)
 800de8a:	481d      	ldr	r0, [pc, #116]	; (800df00 <netif_do_set_ipaddr+0x90>)
 800de8c:	f009 f8ae 	bl	8016fec <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d106      	bne.n	800dea4 <netif_do_set_ipaddr+0x34>
 800de96:	4b18      	ldr	r3, [pc, #96]	; (800def8 <netif_do_set_ipaddr+0x88>)
 800de98:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800de9c:	4917      	ldr	r1, [pc, #92]	; (800defc <netif_do_set_ipaddr+0x8c>)
 800de9e:	4818      	ldr	r0, [pc, #96]	; (800df00 <netif_do_set_ipaddr+0x90>)
 800dea0:	f009 f8a4 	bl	8016fec <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	681a      	ldr	r2, [r3, #0]
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	3304      	adds	r3, #4
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	429a      	cmp	r2, r3
 800deb0:	d01c      	beq.n	800deec <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	3304      	adds	r3, #4
 800debc:	681a      	ldr	r2, [r3, #0]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800dec2:	f107 0314 	add.w	r3, r7, #20
 800dec6:	4619      	mov	r1, r3
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f7ff ffbf 	bl	800de4c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d002      	beq.n	800deda <netif_do_set_ipaddr+0x6a>
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	e000      	b.n	800dedc <netif_do_set_ipaddr+0x6c>
 800deda:	2300      	movs	r3, #0
 800dedc:	68fa      	ldr	r2, [r7, #12]
 800dede:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800dee0:	2101      	movs	r1, #1
 800dee2:	68f8      	ldr	r0, [r7, #12]
 800dee4:	f000 f8d2 	bl	800e08c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800dee8:	2301      	movs	r3, #1
 800deea:	e000      	b.n	800deee <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800deec:	2300      	movs	r3, #0
}
 800deee:	4618      	mov	r0, r3
 800def0:	3718      	adds	r7, #24
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}
 800def6:	bf00      	nop
 800def8:	080187f4 	.word	0x080187f4
 800defc:	0801890c 	.word	0x0801890c
 800df00:	08018844 	.word	0x08018844

0800df04 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800df04:	b480      	push	{r7}
 800df06:	b085      	sub	sp, #20
 800df08:	af00      	add	r7, sp, #0
 800df0a:	60f8      	str	r0, [r7, #12]
 800df0c:	60b9      	str	r1, [r7, #8]
 800df0e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	681a      	ldr	r2, [r3, #0]
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	3308      	adds	r3, #8
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d00a      	beq.n	800df34 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d002      	beq.n	800df2a <netif_do_set_netmask+0x26>
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	e000      	b.n	800df2c <netif_do_set_netmask+0x28>
 800df2a:	2300      	movs	r3, #0
 800df2c:	68fa      	ldr	r2, [r7, #12]
 800df2e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800df30:	2301      	movs	r3, #1
 800df32:	e000      	b.n	800df36 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800df34:	2300      	movs	r3, #0
}
 800df36:	4618      	mov	r0, r3
 800df38:	3714      	adds	r7, #20
 800df3a:	46bd      	mov	sp, r7
 800df3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df40:	4770      	bx	lr

0800df42 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800df42:	b480      	push	{r7}
 800df44:	b085      	sub	sp, #20
 800df46:	af00      	add	r7, sp, #0
 800df48:	60f8      	str	r0, [r7, #12]
 800df4a:	60b9      	str	r1, [r7, #8]
 800df4c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	681a      	ldr	r2, [r3, #0]
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	330c      	adds	r3, #12
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	429a      	cmp	r2, r3
 800df5a:	d00a      	beq.n	800df72 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d002      	beq.n	800df68 <netif_do_set_gw+0x26>
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	e000      	b.n	800df6a <netif_do_set_gw+0x28>
 800df68:	2300      	movs	r3, #0
 800df6a:	68fa      	ldr	r2, [r7, #12]
 800df6c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800df6e:	2301      	movs	r3, #1
 800df70:	e000      	b.n	800df74 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800df72:	2300      	movs	r3, #0
}
 800df74:	4618      	mov	r0, r3
 800df76:	3714      	adds	r7, #20
 800df78:	46bd      	mov	sp, r7
 800df7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7e:	4770      	bx	lr

0800df80 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b088      	sub	sp, #32
 800df84:	af00      	add	r7, sp, #0
 800df86:	60f8      	str	r0, [r7, #12]
 800df88:	60b9      	str	r1, [r7, #8]
 800df8a:	607a      	str	r2, [r7, #4]
 800df8c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800df8e:	2300      	movs	r3, #0
 800df90:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800df92:	2300      	movs	r3, #0
 800df94:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d101      	bne.n	800dfa0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800df9c:	4b1c      	ldr	r3, [pc, #112]	; (800e010 <netif_set_addr+0x90>)
 800df9e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d101      	bne.n	800dfaa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800dfa6:	4b1a      	ldr	r3, [pc, #104]	; (800e010 <netif_set_addr+0x90>)
 800dfa8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d101      	bne.n	800dfb4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800dfb0:	4b17      	ldr	r3, [pc, #92]	; (800e010 <netif_set_addr+0x90>)
 800dfb2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d003      	beq.n	800dfc2 <netif_set_addr+0x42>
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d101      	bne.n	800dfc6 <netif_set_addr+0x46>
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	e000      	b.n	800dfc8 <netif_set_addr+0x48>
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d006      	beq.n	800dfde <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dfd0:	f107 0310 	add.w	r3, r7, #16
 800dfd4:	461a      	mov	r2, r3
 800dfd6:	68b9      	ldr	r1, [r7, #8]
 800dfd8:	68f8      	ldr	r0, [r7, #12]
 800dfda:	f7ff ff49 	bl	800de70 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800dfde:	69fa      	ldr	r2, [r7, #28]
 800dfe0:	6879      	ldr	r1, [r7, #4]
 800dfe2:	68f8      	ldr	r0, [r7, #12]
 800dfe4:	f7ff ff8e 	bl	800df04 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800dfe8:	69ba      	ldr	r2, [r7, #24]
 800dfea:	6839      	ldr	r1, [r7, #0]
 800dfec:	68f8      	ldr	r0, [r7, #12]
 800dfee:	f7ff ffa8 	bl	800df42 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d106      	bne.n	800e006 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dff8:	f107 0310 	add.w	r3, r7, #16
 800dffc:	461a      	mov	r2, r3
 800dffe:	68b9      	ldr	r1, [r7, #8]
 800e000:	68f8      	ldr	r0, [r7, #12]
 800e002:	f7ff ff35 	bl	800de70 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e006:	bf00      	nop
 800e008:	3720      	adds	r7, #32
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}
 800e00e:	bf00      	nop
 800e010:	0801afe0 	.word	0x0801afe0

0800e014 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e014:	b480      	push	{r7}
 800e016:	b083      	sub	sp, #12
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e01c:	4a04      	ldr	r2, [pc, #16]	; (800e030 <netif_set_default+0x1c>)
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e022:	bf00      	nop
 800e024:	370c      	adds	r7, #12
 800e026:	46bd      	mov	sp, r7
 800e028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02c:	4770      	bx	lr
 800e02e:	bf00      	nop
 800e030:	20011018 	.word	0x20011018

0800e034 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b082      	sub	sp, #8
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d107      	bne.n	800e052 <netif_set_up+0x1e>
 800e042:	4b0f      	ldr	r3, [pc, #60]	; (800e080 <netif_set_up+0x4c>)
 800e044:	f44f 7254 	mov.w	r2, #848	; 0x350
 800e048:	490e      	ldr	r1, [pc, #56]	; (800e084 <netif_set_up+0x50>)
 800e04a:	480f      	ldr	r0, [pc, #60]	; (800e088 <netif_set_up+0x54>)
 800e04c:	f008 ffce 	bl	8016fec <iprintf>
 800e050:	e013      	b.n	800e07a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e058:	f003 0301 	and.w	r3, r3, #1
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d10c      	bne.n	800e07a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e066:	f043 0301 	orr.w	r3, r3, #1
 800e06a:	b2da      	uxtb	r2, r3
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e072:	2103      	movs	r1, #3
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f000 f809 	bl	800e08c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e07a:	3708      	adds	r7, #8
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}
 800e080:	080187f4 	.word	0x080187f4
 800e084:	0801897c 	.word	0x0801897c
 800e088:	08018844 	.word	0x08018844

0800e08c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b082      	sub	sp, #8
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	460b      	mov	r3, r1
 800e096:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d106      	bne.n	800e0ac <netif_issue_reports+0x20>
 800e09e:	4b18      	ldr	r3, [pc, #96]	; (800e100 <netif_issue_reports+0x74>)
 800e0a0:	f240 326d 	movw	r2, #877	; 0x36d
 800e0a4:	4917      	ldr	r1, [pc, #92]	; (800e104 <netif_issue_reports+0x78>)
 800e0a6:	4818      	ldr	r0, [pc, #96]	; (800e108 <netif_issue_reports+0x7c>)
 800e0a8:	f008 ffa0 	bl	8016fec <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e0b2:	f003 0304 	and.w	r3, r3, #4
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d01e      	beq.n	800e0f8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e0c0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d017      	beq.n	800e0f8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e0c8:	78fb      	ldrb	r3, [r7, #3]
 800e0ca:	f003 0301 	and.w	r3, r3, #1
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d013      	beq.n	800e0fa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	3304      	adds	r3, #4
 800e0d6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d00e      	beq.n	800e0fa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e0e2:	f003 0308 	and.w	r3, r3, #8
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d007      	beq.n	800e0fa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	3304      	adds	r3, #4
 800e0ee:	4619      	mov	r1, r3
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f007 fab3 	bl	801565c <etharp_request>
 800e0f6:	e000      	b.n	800e0fa <netif_issue_reports+0x6e>
    return;
 800e0f8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e0fa:	3708      	adds	r7, #8
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}
 800e100:	080187f4 	.word	0x080187f4
 800e104:	08018998 	.word	0x08018998
 800e108:	08018844 	.word	0x08018844

0800e10c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b082      	sub	sp, #8
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d107      	bne.n	800e12a <netif_set_down+0x1e>
 800e11a:	4b12      	ldr	r3, [pc, #72]	; (800e164 <netif_set_down+0x58>)
 800e11c:	f240 329b 	movw	r2, #923	; 0x39b
 800e120:	4911      	ldr	r1, [pc, #68]	; (800e168 <netif_set_down+0x5c>)
 800e122:	4812      	ldr	r0, [pc, #72]	; (800e16c <netif_set_down+0x60>)
 800e124:	f008 ff62 	bl	8016fec <iprintf>
 800e128:	e019      	b.n	800e15e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e130:	f003 0301 	and.w	r3, r3, #1
 800e134:	2b00      	cmp	r3, #0
 800e136:	d012      	beq.n	800e15e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e13e:	f023 0301 	bic.w	r3, r3, #1
 800e142:	b2da      	uxtb	r2, r3
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e150:	f003 0308 	and.w	r3, r3, #8
 800e154:	2b00      	cmp	r3, #0
 800e156:	d002      	beq.n	800e15e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f006 fe3d 	bl	8014dd8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e15e:	3708      	adds	r7, #8
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}
 800e164:	080187f4 	.word	0x080187f4
 800e168:	080189bc 	.word	0x080189bc
 800e16c:	08018844 	.word	0x08018844

0800e170 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b082      	sub	sp, #8
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d107      	bne.n	800e18e <netif_set_link_up+0x1e>
 800e17e:	4b13      	ldr	r3, [pc, #76]	; (800e1cc <netif_set_link_up+0x5c>)
 800e180:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800e184:	4912      	ldr	r1, [pc, #72]	; (800e1d0 <netif_set_link_up+0x60>)
 800e186:	4813      	ldr	r0, [pc, #76]	; (800e1d4 <netif_set_link_up+0x64>)
 800e188:	f008 ff30 	bl	8016fec <iprintf>
 800e18c:	e01b      	b.n	800e1c6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e194:	f003 0304 	and.w	r3, r3, #4
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d114      	bne.n	800e1c6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e1a2:	f043 0304 	orr.w	r3, r3, #4
 800e1a6:	b2da      	uxtb	r2, r3
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e1ae:	2103      	movs	r1, #3
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f7ff ff6b 	bl	800e08c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	69db      	ldr	r3, [r3, #28]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d003      	beq.n	800e1c6 <netif_set_link_up+0x56>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	69db      	ldr	r3, [r3, #28]
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e1c6:	3708      	adds	r7, #8
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}
 800e1cc:	080187f4 	.word	0x080187f4
 800e1d0:	080189dc 	.word	0x080189dc
 800e1d4:	08018844 	.word	0x08018844

0800e1d8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b082      	sub	sp, #8
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d107      	bne.n	800e1f6 <netif_set_link_down+0x1e>
 800e1e6:	4b11      	ldr	r3, [pc, #68]	; (800e22c <netif_set_link_down+0x54>)
 800e1e8:	f240 4206 	movw	r2, #1030	; 0x406
 800e1ec:	4910      	ldr	r1, [pc, #64]	; (800e230 <netif_set_link_down+0x58>)
 800e1ee:	4811      	ldr	r0, [pc, #68]	; (800e234 <netif_set_link_down+0x5c>)
 800e1f0:	f008 fefc 	bl	8016fec <iprintf>
 800e1f4:	e017      	b.n	800e226 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e1fc:	f003 0304 	and.w	r3, r3, #4
 800e200:	2b00      	cmp	r3, #0
 800e202:	d010      	beq.n	800e226 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e20a:	f023 0304 	bic.w	r3, r3, #4
 800e20e:	b2da      	uxtb	r2, r3
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	69db      	ldr	r3, [r3, #28]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d003      	beq.n	800e226 <netif_set_link_down+0x4e>
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	69db      	ldr	r3, [r3, #28]
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e226:	3708      	adds	r7, #8
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}
 800e22c:	080187f4 	.word	0x080187f4
 800e230:	08018a00 	.word	0x08018a00
 800e234:	08018844 	.word	0x08018844

0800e238 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e238:	b480      	push	{r7}
 800e23a:	b083      	sub	sp, #12
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d002      	beq.n	800e24e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	683a      	ldr	r2, [r7, #0]
 800e24c:	61da      	str	r2, [r3, #28]
  }
}
 800e24e:	bf00      	nop
 800e250:	370c      	adds	r7, #12
 800e252:	46bd      	mov	sp, r7
 800e254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e258:	4770      	bx	lr

0800e25a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e25a:	b480      	push	{r7}
 800e25c:	b085      	sub	sp, #20
 800e25e:	af00      	add	r7, sp, #0
 800e260:	60f8      	str	r0, [r7, #12]
 800e262:	60b9      	str	r1, [r7, #8]
 800e264:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e266:	f06f 030b 	mvn.w	r3, #11
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3714      	adds	r7, #20
 800e26e:	46bd      	mov	sp, r7
 800e270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e274:	4770      	bx	lr
	...

0800e278 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e278:	b480      	push	{r7}
 800e27a:	b085      	sub	sp, #20
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	4603      	mov	r3, r0
 800e280:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e282:	79fb      	ldrb	r3, [r7, #7]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d013      	beq.n	800e2b0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e288:	4b0d      	ldr	r3, [pc, #52]	; (800e2c0 <netif_get_by_index+0x48>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	60fb      	str	r3, [r7, #12]
 800e28e:	e00c      	b.n	800e2aa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e296:	3301      	adds	r3, #1
 800e298:	b2db      	uxtb	r3, r3
 800e29a:	79fa      	ldrb	r2, [r7, #7]
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d101      	bne.n	800e2a4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	e006      	b.n	800e2b2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	60fb      	str	r3, [r7, #12]
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d1ef      	bne.n	800e290 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e2b0:	2300      	movs	r3, #0
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3714      	adds	r7, #20
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2bc:	4770      	bx	lr
 800e2be:	bf00      	nop
 800e2c0:	20011014 	.word	0x20011014

0800e2c4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e2ca:	f008 fe27 	bl	8016f1c <sys_arch_protect>
 800e2ce:	6038      	str	r0, [r7, #0]
 800e2d0:	4b0d      	ldr	r3, [pc, #52]	; (800e308 <pbuf_free_ooseq+0x44>)
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	701a      	strb	r2, [r3, #0]
 800e2d6:	6838      	ldr	r0, [r7, #0]
 800e2d8:	f008 fe2e 	bl	8016f38 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e2dc:	4b0b      	ldr	r3, [pc, #44]	; (800e30c <pbuf_free_ooseq+0x48>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	607b      	str	r3, [r7, #4]
 800e2e2:	e00a      	b.n	800e2fa <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d003      	beq.n	800e2f4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f002 f971 	bl	80105d4 <tcp_free_ooseq>
      return;
 800e2f2:	e005      	b.n	800e300 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	68db      	ldr	r3, [r3, #12]
 800e2f8:	607b      	str	r3, [r7, #4]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d1f1      	bne.n	800e2e4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800e300:	3708      	adds	r7, #8
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}
 800e306:	bf00      	nop
 800e308:	2001101d 	.word	0x2001101d
 800e30c:	2001102c 	.word	0x2001102c

0800e310 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b082      	sub	sp, #8
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e318:	f7ff ffd4 	bl	800e2c4 <pbuf_free_ooseq>
}
 800e31c:	bf00      	nop
 800e31e:	3708      	adds	r7, #8
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}

0800e324 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b082      	sub	sp, #8
 800e328:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e32a:	f008 fdf7 	bl	8016f1c <sys_arch_protect>
 800e32e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e330:	4b0f      	ldr	r3, [pc, #60]	; (800e370 <pbuf_pool_is_empty+0x4c>)
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e336:	4b0e      	ldr	r3, [pc, #56]	; (800e370 <pbuf_pool_is_empty+0x4c>)
 800e338:	2201      	movs	r2, #1
 800e33a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f008 fdfb 	bl	8016f38 <sys_arch_unprotect>

  if (!queued) {
 800e342:	78fb      	ldrb	r3, [r7, #3]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d10f      	bne.n	800e368 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e348:	2100      	movs	r1, #0
 800e34a:	480a      	ldr	r0, [pc, #40]	; (800e374 <pbuf_pool_is_empty+0x50>)
 800e34c:	f7fe fea6 	bl	800d09c <tcpip_try_callback>
 800e350:	4603      	mov	r3, r0
 800e352:	2b00      	cmp	r3, #0
 800e354:	d008      	beq.n	800e368 <pbuf_pool_is_empty+0x44>
 800e356:	f008 fde1 	bl	8016f1c <sys_arch_protect>
 800e35a:	6078      	str	r0, [r7, #4]
 800e35c:	4b04      	ldr	r3, [pc, #16]	; (800e370 <pbuf_pool_is_empty+0x4c>)
 800e35e:	2200      	movs	r2, #0
 800e360:	701a      	strb	r2, [r3, #0]
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f008 fde8 	bl	8016f38 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e368:	bf00      	nop
 800e36a:	3708      	adds	r7, #8
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}
 800e370:	2001101d 	.word	0x2001101d
 800e374:	0800e311 	.word	0x0800e311

0800e378 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e378:	b480      	push	{r7}
 800e37a:	b085      	sub	sp, #20
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	60f8      	str	r0, [r7, #12]
 800e380:	60b9      	str	r1, [r7, #8]
 800e382:	4611      	mov	r1, r2
 800e384:	461a      	mov	r2, r3
 800e386:	460b      	mov	r3, r1
 800e388:	80fb      	strh	r3, [r7, #6]
 800e38a:	4613      	mov	r3, r2
 800e38c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	2200      	movs	r2, #0
 800e392:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	68ba      	ldr	r2, [r7, #8]
 800e398:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	88fa      	ldrh	r2, [r7, #6]
 800e39e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	88ba      	ldrh	r2, [r7, #4]
 800e3a4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e3a6:	8b3b      	ldrh	r3, [r7, #24]
 800e3a8:	b2da      	uxtb	r2, r3
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	7f3a      	ldrb	r2, [r7, #28]
 800e3b2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	2200      	movs	r2, #0
 800e3be:	73da      	strb	r2, [r3, #15]
}
 800e3c0:	bf00      	nop
 800e3c2:	3714      	adds	r7, #20
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ca:	4770      	bx	lr

0800e3cc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b08c      	sub	sp, #48	; 0x30
 800e3d0:	af02      	add	r7, sp, #8
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	71fb      	strb	r3, [r7, #7]
 800e3d6:	460b      	mov	r3, r1
 800e3d8:	80bb      	strh	r3, [r7, #4]
 800e3da:	4613      	mov	r3, r2
 800e3dc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e3de:	79fb      	ldrb	r3, [r7, #7]
 800e3e0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e3e2:	887b      	ldrh	r3, [r7, #2]
 800e3e4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e3e8:	d07f      	beq.n	800e4ea <pbuf_alloc+0x11e>
 800e3ea:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e3ee:	f300 80c8 	bgt.w	800e582 <pbuf_alloc+0x1b6>
 800e3f2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e3f6:	d010      	beq.n	800e41a <pbuf_alloc+0x4e>
 800e3f8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e3fc:	f300 80c1 	bgt.w	800e582 <pbuf_alloc+0x1b6>
 800e400:	2b01      	cmp	r3, #1
 800e402:	d002      	beq.n	800e40a <pbuf_alloc+0x3e>
 800e404:	2b41      	cmp	r3, #65	; 0x41
 800e406:	f040 80bc 	bne.w	800e582 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e40a:	887a      	ldrh	r2, [r7, #2]
 800e40c:	88bb      	ldrh	r3, [r7, #4]
 800e40e:	4619      	mov	r1, r3
 800e410:	2000      	movs	r0, #0
 800e412:	f000 f8d1 	bl	800e5b8 <pbuf_alloc_reference>
 800e416:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e418:	e0bd      	b.n	800e596 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e41a:	2300      	movs	r3, #0
 800e41c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e41e:	2300      	movs	r3, #0
 800e420:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e422:	88bb      	ldrh	r3, [r7, #4]
 800e424:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e426:	200c      	movs	r0, #12
 800e428:	f7ff fb9a 	bl	800db60 <memp_malloc>
 800e42c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e42e:	693b      	ldr	r3, [r7, #16]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d109      	bne.n	800e448 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e434:	f7ff ff76 	bl	800e324 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d002      	beq.n	800e444 <pbuf_alloc+0x78>
            pbuf_free(p);
 800e43e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e440:	f000 faa8 	bl	800e994 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e444:	2300      	movs	r3, #0
 800e446:	e0a7      	b.n	800e598 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e448:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e44a:	3303      	adds	r3, #3
 800e44c:	b29b      	uxth	r3, r3
 800e44e:	f023 0303 	bic.w	r3, r3, #3
 800e452:	b29b      	uxth	r3, r3
 800e454:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e458:	b29b      	uxth	r3, r3
 800e45a:	8b7a      	ldrh	r2, [r7, #26]
 800e45c:	4293      	cmp	r3, r2
 800e45e:	bf28      	it	cs
 800e460:	4613      	movcs	r3, r2
 800e462:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e464:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e466:	3310      	adds	r3, #16
 800e468:	693a      	ldr	r2, [r7, #16]
 800e46a:	4413      	add	r3, r2
 800e46c:	3303      	adds	r3, #3
 800e46e:	f023 0303 	bic.w	r3, r3, #3
 800e472:	4618      	mov	r0, r3
 800e474:	89f9      	ldrh	r1, [r7, #14]
 800e476:	8b7a      	ldrh	r2, [r7, #26]
 800e478:	2300      	movs	r3, #0
 800e47a:	9301      	str	r3, [sp, #4]
 800e47c:	887b      	ldrh	r3, [r7, #2]
 800e47e:	9300      	str	r3, [sp, #0]
 800e480:	460b      	mov	r3, r1
 800e482:	4601      	mov	r1, r0
 800e484:	6938      	ldr	r0, [r7, #16]
 800e486:	f7ff ff77 	bl	800e378 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e48a:	693b      	ldr	r3, [r7, #16]
 800e48c:	685b      	ldr	r3, [r3, #4]
 800e48e:	f003 0303 	and.w	r3, r3, #3
 800e492:	2b00      	cmp	r3, #0
 800e494:	d006      	beq.n	800e4a4 <pbuf_alloc+0xd8>
 800e496:	4b42      	ldr	r3, [pc, #264]	; (800e5a0 <pbuf_alloc+0x1d4>)
 800e498:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e49c:	4941      	ldr	r1, [pc, #260]	; (800e5a4 <pbuf_alloc+0x1d8>)
 800e49e:	4842      	ldr	r0, [pc, #264]	; (800e5a8 <pbuf_alloc+0x1dc>)
 800e4a0:	f008 fda4 	bl	8016fec <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e4a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e4a6:	3303      	adds	r3, #3
 800e4a8:	f023 0303 	bic.w	r3, r3, #3
 800e4ac:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e4b0:	d106      	bne.n	800e4c0 <pbuf_alloc+0xf4>
 800e4b2:	4b3b      	ldr	r3, [pc, #236]	; (800e5a0 <pbuf_alloc+0x1d4>)
 800e4b4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e4b8:	493c      	ldr	r1, [pc, #240]	; (800e5ac <pbuf_alloc+0x1e0>)
 800e4ba:	483b      	ldr	r0, [pc, #236]	; (800e5a8 <pbuf_alloc+0x1dc>)
 800e4bc:	f008 fd96 	bl	8016fec <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d102      	bne.n	800e4cc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	627b      	str	r3, [r7, #36]	; 0x24
 800e4ca:	e002      	b.n	800e4d2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e4cc:	69fb      	ldr	r3, [r7, #28]
 800e4ce:	693a      	ldr	r2, [r7, #16]
 800e4d0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e4d6:	8b7a      	ldrh	r2, [r7, #26]
 800e4d8:	89fb      	ldrh	r3, [r7, #14]
 800e4da:	1ad3      	subs	r3, r2, r3
 800e4dc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e4e2:	8b7b      	ldrh	r3, [r7, #26]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d19e      	bne.n	800e426 <pbuf_alloc+0x5a>
      break;
 800e4e8:	e055      	b.n	800e596 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e4ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e4ec:	3303      	adds	r3, #3
 800e4ee:	b29b      	uxth	r3, r3
 800e4f0:	f023 0303 	bic.w	r3, r3, #3
 800e4f4:	b29a      	uxth	r2, r3
 800e4f6:	88bb      	ldrh	r3, [r7, #4]
 800e4f8:	3303      	adds	r3, #3
 800e4fa:	b29b      	uxth	r3, r3
 800e4fc:	f023 0303 	bic.w	r3, r3, #3
 800e500:	b29b      	uxth	r3, r3
 800e502:	4413      	add	r3, r2
 800e504:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e506:	8b3b      	ldrh	r3, [r7, #24]
 800e508:	3310      	adds	r3, #16
 800e50a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e50c:	8b3a      	ldrh	r2, [r7, #24]
 800e50e:	88bb      	ldrh	r3, [r7, #4]
 800e510:	3303      	adds	r3, #3
 800e512:	f023 0303 	bic.w	r3, r3, #3
 800e516:	429a      	cmp	r2, r3
 800e518:	d306      	bcc.n	800e528 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e51a:	8afa      	ldrh	r2, [r7, #22]
 800e51c:	88bb      	ldrh	r3, [r7, #4]
 800e51e:	3303      	adds	r3, #3
 800e520:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e524:	429a      	cmp	r2, r3
 800e526:	d201      	bcs.n	800e52c <pbuf_alloc+0x160>
        return NULL;
 800e528:	2300      	movs	r3, #0
 800e52a:	e035      	b.n	800e598 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e52c:	8afb      	ldrh	r3, [r7, #22]
 800e52e:	4618      	mov	r0, r3
 800e530:	f7ff f972 	bl	800d818 <mem_malloc>
 800e534:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d101      	bne.n	800e540 <pbuf_alloc+0x174>
        return NULL;
 800e53c:	2300      	movs	r3, #0
 800e53e:	e02b      	b.n	800e598 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e540:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e542:	3310      	adds	r3, #16
 800e544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e546:	4413      	add	r3, r2
 800e548:	3303      	adds	r3, #3
 800e54a:	f023 0303 	bic.w	r3, r3, #3
 800e54e:	4618      	mov	r0, r3
 800e550:	88b9      	ldrh	r1, [r7, #4]
 800e552:	88ba      	ldrh	r2, [r7, #4]
 800e554:	2300      	movs	r3, #0
 800e556:	9301      	str	r3, [sp, #4]
 800e558:	887b      	ldrh	r3, [r7, #2]
 800e55a:	9300      	str	r3, [sp, #0]
 800e55c:	460b      	mov	r3, r1
 800e55e:	4601      	mov	r1, r0
 800e560:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e562:	f7ff ff09 	bl	800e378 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	f003 0303 	and.w	r3, r3, #3
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d010      	beq.n	800e594 <pbuf_alloc+0x1c8>
 800e572:	4b0b      	ldr	r3, [pc, #44]	; (800e5a0 <pbuf_alloc+0x1d4>)
 800e574:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e578:	490d      	ldr	r1, [pc, #52]	; (800e5b0 <pbuf_alloc+0x1e4>)
 800e57a:	480b      	ldr	r0, [pc, #44]	; (800e5a8 <pbuf_alloc+0x1dc>)
 800e57c:	f008 fd36 	bl	8016fec <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e580:	e008      	b.n	800e594 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e582:	4b07      	ldr	r3, [pc, #28]	; (800e5a0 <pbuf_alloc+0x1d4>)
 800e584:	f240 1227 	movw	r2, #295	; 0x127
 800e588:	490a      	ldr	r1, [pc, #40]	; (800e5b4 <pbuf_alloc+0x1e8>)
 800e58a:	4807      	ldr	r0, [pc, #28]	; (800e5a8 <pbuf_alloc+0x1dc>)
 800e58c:	f008 fd2e 	bl	8016fec <iprintf>
      return NULL;
 800e590:	2300      	movs	r3, #0
 800e592:	e001      	b.n	800e598 <pbuf_alloc+0x1cc>
      break;
 800e594:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e598:	4618      	mov	r0, r3
 800e59a:	3728      	adds	r7, #40	; 0x28
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}
 800e5a0:	08018a24 	.word	0x08018a24
 800e5a4:	08018a54 	.word	0x08018a54
 800e5a8:	08018a84 	.word	0x08018a84
 800e5ac:	08018aac 	.word	0x08018aac
 800e5b0:	08018ae0 	.word	0x08018ae0
 800e5b4:	08018b0c 	.word	0x08018b0c

0800e5b8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b086      	sub	sp, #24
 800e5bc:	af02      	add	r7, sp, #8
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	460b      	mov	r3, r1
 800e5c2:	807b      	strh	r3, [r7, #2]
 800e5c4:	4613      	mov	r3, r2
 800e5c6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e5c8:	883b      	ldrh	r3, [r7, #0]
 800e5ca:	2b41      	cmp	r3, #65	; 0x41
 800e5cc:	d009      	beq.n	800e5e2 <pbuf_alloc_reference+0x2a>
 800e5ce:	883b      	ldrh	r3, [r7, #0]
 800e5d0:	2b01      	cmp	r3, #1
 800e5d2:	d006      	beq.n	800e5e2 <pbuf_alloc_reference+0x2a>
 800e5d4:	4b0f      	ldr	r3, [pc, #60]	; (800e614 <pbuf_alloc_reference+0x5c>)
 800e5d6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e5da:	490f      	ldr	r1, [pc, #60]	; (800e618 <pbuf_alloc_reference+0x60>)
 800e5dc:	480f      	ldr	r0, [pc, #60]	; (800e61c <pbuf_alloc_reference+0x64>)
 800e5de:	f008 fd05 	bl	8016fec <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e5e2:	200b      	movs	r0, #11
 800e5e4:	f7ff fabc 	bl	800db60 <memp_malloc>
 800e5e8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d101      	bne.n	800e5f4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	e00b      	b.n	800e60c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e5f4:	8879      	ldrh	r1, [r7, #2]
 800e5f6:	887a      	ldrh	r2, [r7, #2]
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	9301      	str	r3, [sp, #4]
 800e5fc:	883b      	ldrh	r3, [r7, #0]
 800e5fe:	9300      	str	r3, [sp, #0]
 800e600:	460b      	mov	r3, r1
 800e602:	6879      	ldr	r1, [r7, #4]
 800e604:	68f8      	ldr	r0, [r7, #12]
 800e606:	f7ff feb7 	bl	800e378 <pbuf_init_alloced_pbuf>
  return p;
 800e60a:	68fb      	ldr	r3, [r7, #12]
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3710      	adds	r7, #16
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}
 800e614:	08018a24 	.word	0x08018a24
 800e618:	08018b28 	.word	0x08018b28
 800e61c:	08018a84 	.word	0x08018a84

0800e620 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b088      	sub	sp, #32
 800e624:	af02      	add	r7, sp, #8
 800e626:	607b      	str	r3, [r7, #4]
 800e628:	4603      	mov	r3, r0
 800e62a:	73fb      	strb	r3, [r7, #15]
 800e62c:	460b      	mov	r3, r1
 800e62e:	81bb      	strh	r3, [r7, #12]
 800e630:	4613      	mov	r3, r2
 800e632:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e634:	7bfb      	ldrb	r3, [r7, #15]
 800e636:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e638:	8a7b      	ldrh	r3, [r7, #18]
 800e63a:	3303      	adds	r3, #3
 800e63c:	f023 0203 	bic.w	r2, r3, #3
 800e640:	89bb      	ldrh	r3, [r7, #12]
 800e642:	441a      	add	r2, r3
 800e644:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e646:	429a      	cmp	r2, r3
 800e648:	d901      	bls.n	800e64e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e64a:	2300      	movs	r3, #0
 800e64c:	e018      	b.n	800e680 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e64e:	6a3b      	ldr	r3, [r7, #32]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d007      	beq.n	800e664 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e654:	8a7b      	ldrh	r3, [r7, #18]
 800e656:	3303      	adds	r3, #3
 800e658:	f023 0303 	bic.w	r3, r3, #3
 800e65c:	6a3a      	ldr	r2, [r7, #32]
 800e65e:	4413      	add	r3, r2
 800e660:	617b      	str	r3, [r7, #20]
 800e662:	e001      	b.n	800e668 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e664:	2300      	movs	r3, #0
 800e666:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	89b9      	ldrh	r1, [r7, #12]
 800e66c:	89ba      	ldrh	r2, [r7, #12]
 800e66e:	2302      	movs	r3, #2
 800e670:	9301      	str	r3, [sp, #4]
 800e672:	897b      	ldrh	r3, [r7, #10]
 800e674:	9300      	str	r3, [sp, #0]
 800e676:	460b      	mov	r3, r1
 800e678:	6979      	ldr	r1, [r7, #20]
 800e67a:	f7ff fe7d 	bl	800e378 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e67e:	687b      	ldr	r3, [r7, #4]
}
 800e680:	4618      	mov	r0, r3
 800e682:	3718      	adds	r7, #24
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}

0800e688 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b084      	sub	sp, #16
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
 800e690:	460b      	mov	r3, r1
 800e692:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d106      	bne.n	800e6a8 <pbuf_realloc+0x20>
 800e69a:	4b3a      	ldr	r3, [pc, #232]	; (800e784 <pbuf_realloc+0xfc>)
 800e69c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e6a0:	4939      	ldr	r1, [pc, #228]	; (800e788 <pbuf_realloc+0x100>)
 800e6a2:	483a      	ldr	r0, [pc, #232]	; (800e78c <pbuf_realloc+0x104>)
 800e6a4:	f008 fca2 	bl	8016fec <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	891b      	ldrh	r3, [r3, #8]
 800e6ac:	887a      	ldrh	r2, [r7, #2]
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	d263      	bcs.n	800e77a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	891a      	ldrh	r2, [r3, #8]
 800e6b6:	887b      	ldrh	r3, [r7, #2]
 800e6b8:	1ad3      	subs	r3, r2, r3
 800e6ba:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e6bc:	887b      	ldrh	r3, [r7, #2]
 800e6be:	817b      	strh	r3, [r7, #10]
  q = p;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e6c4:	e018      	b.n	800e6f8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	895b      	ldrh	r3, [r3, #10]
 800e6ca:	897a      	ldrh	r2, [r7, #10]
 800e6cc:	1ad3      	subs	r3, r2, r3
 800e6ce:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	891a      	ldrh	r2, [r3, #8]
 800e6d4:	893b      	ldrh	r3, [r7, #8]
 800e6d6:	1ad3      	subs	r3, r2, r3
 800e6d8:	b29a      	uxth	r2, r3
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d106      	bne.n	800e6f8 <pbuf_realloc+0x70>
 800e6ea:	4b26      	ldr	r3, [pc, #152]	; (800e784 <pbuf_realloc+0xfc>)
 800e6ec:	f240 12af 	movw	r2, #431	; 0x1af
 800e6f0:	4927      	ldr	r1, [pc, #156]	; (800e790 <pbuf_realloc+0x108>)
 800e6f2:	4826      	ldr	r0, [pc, #152]	; (800e78c <pbuf_realloc+0x104>)
 800e6f4:	f008 fc7a 	bl	8016fec <iprintf>
  while (rem_len > q->len) {
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	895b      	ldrh	r3, [r3, #10]
 800e6fc:	897a      	ldrh	r2, [r7, #10]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d8e1      	bhi.n	800e6c6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	7b1b      	ldrb	r3, [r3, #12]
 800e706:	f003 030f 	and.w	r3, r3, #15
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d121      	bne.n	800e752 <pbuf_realloc+0xca>
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	895b      	ldrh	r3, [r3, #10]
 800e712:	897a      	ldrh	r2, [r7, #10]
 800e714:	429a      	cmp	r2, r3
 800e716:	d01c      	beq.n	800e752 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	7b5b      	ldrb	r3, [r3, #13]
 800e71c:	f003 0302 	and.w	r3, r3, #2
 800e720:	2b00      	cmp	r3, #0
 800e722:	d116      	bne.n	800e752 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	685a      	ldr	r2, [r3, #4]
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	1ad3      	subs	r3, r2, r3
 800e72c:	b29a      	uxth	r2, r3
 800e72e:	897b      	ldrh	r3, [r7, #10]
 800e730:	4413      	add	r3, r2
 800e732:	b29b      	uxth	r3, r3
 800e734:	4619      	mov	r1, r3
 800e736:	68f8      	ldr	r0, [r7, #12]
 800e738:	f7fe ff64 	bl	800d604 <mem_trim>
 800e73c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d106      	bne.n	800e752 <pbuf_realloc+0xca>
 800e744:	4b0f      	ldr	r3, [pc, #60]	; (800e784 <pbuf_realloc+0xfc>)
 800e746:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e74a:	4912      	ldr	r1, [pc, #72]	; (800e794 <pbuf_realloc+0x10c>)
 800e74c:	480f      	ldr	r0, [pc, #60]	; (800e78c <pbuf_realloc+0x104>)
 800e74e:	f008 fc4d 	bl	8016fec <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	897a      	ldrh	r2, [r7, #10]
 800e756:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	895a      	ldrh	r2, [r3, #10]
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d004      	beq.n	800e772 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	4618      	mov	r0, r3
 800e76e:	f000 f911 	bl	800e994 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	2200      	movs	r2, #0
 800e776:	601a      	str	r2, [r3, #0]
 800e778:	e000      	b.n	800e77c <pbuf_realloc+0xf4>
    return;
 800e77a:	bf00      	nop

}
 800e77c:	3710      	adds	r7, #16
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}
 800e782:	bf00      	nop
 800e784:	08018a24 	.word	0x08018a24
 800e788:	08018b3c 	.word	0x08018b3c
 800e78c:	08018a84 	.word	0x08018a84
 800e790:	08018b54 	.word	0x08018b54
 800e794:	08018b6c 	.word	0x08018b6c

0800e798 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b086      	sub	sp, #24
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	60f8      	str	r0, [r7, #12]
 800e7a0:	60b9      	str	r1, [r7, #8]
 800e7a2:	4613      	mov	r3, r2
 800e7a4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d106      	bne.n	800e7ba <pbuf_add_header_impl+0x22>
 800e7ac:	4b2b      	ldr	r3, [pc, #172]	; (800e85c <pbuf_add_header_impl+0xc4>)
 800e7ae:	f240 12df 	movw	r2, #479	; 0x1df
 800e7b2:	492b      	ldr	r1, [pc, #172]	; (800e860 <pbuf_add_header_impl+0xc8>)
 800e7b4:	482b      	ldr	r0, [pc, #172]	; (800e864 <pbuf_add_header_impl+0xcc>)
 800e7b6:	f008 fc19 	bl	8016fec <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d003      	beq.n	800e7c8 <pbuf_add_header_impl+0x30>
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7c6:	d301      	bcc.n	800e7cc <pbuf_add_header_impl+0x34>
    return 1;
 800e7c8:	2301      	movs	r3, #1
 800e7ca:	e043      	b.n	800e854 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d101      	bne.n	800e7d6 <pbuf_add_header_impl+0x3e>
    return 0;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	e03e      	b.n	800e854 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	891a      	ldrh	r2, [r3, #8]
 800e7de:	8a7b      	ldrh	r3, [r7, #18]
 800e7e0:	4413      	add	r3, r2
 800e7e2:	b29b      	uxth	r3, r3
 800e7e4:	8a7a      	ldrh	r2, [r7, #18]
 800e7e6:	429a      	cmp	r2, r3
 800e7e8:	d901      	bls.n	800e7ee <pbuf_add_header_impl+0x56>
    return 1;
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	e032      	b.n	800e854 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	7b1b      	ldrb	r3, [r3, #12]
 800e7f2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e7f4:	8a3b      	ldrh	r3, [r7, #16]
 800e7f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d00c      	beq.n	800e818 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	685a      	ldr	r2, [r3, #4]
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	425b      	negs	r3, r3
 800e806:	4413      	add	r3, r2
 800e808:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	3310      	adds	r3, #16
 800e80e:	697a      	ldr	r2, [r7, #20]
 800e810:	429a      	cmp	r2, r3
 800e812:	d20d      	bcs.n	800e830 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e814:	2301      	movs	r3, #1
 800e816:	e01d      	b.n	800e854 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e818:	79fb      	ldrb	r3, [r7, #7]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d006      	beq.n	800e82c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	685a      	ldr	r2, [r3, #4]
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	425b      	negs	r3, r3
 800e826:	4413      	add	r3, r2
 800e828:	617b      	str	r3, [r7, #20]
 800e82a:	e001      	b.n	800e830 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e82c:	2301      	movs	r3, #1
 800e82e:	e011      	b.n	800e854 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	697a      	ldr	r2, [r7, #20]
 800e834:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	895a      	ldrh	r2, [r3, #10]
 800e83a:	8a7b      	ldrh	r3, [r7, #18]
 800e83c:	4413      	add	r3, r2
 800e83e:	b29a      	uxth	r2, r3
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	891a      	ldrh	r2, [r3, #8]
 800e848:	8a7b      	ldrh	r3, [r7, #18]
 800e84a:	4413      	add	r3, r2
 800e84c:	b29a      	uxth	r2, r3
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	811a      	strh	r2, [r3, #8]


  return 0;
 800e852:	2300      	movs	r3, #0
}
 800e854:	4618      	mov	r0, r3
 800e856:	3718      	adds	r7, #24
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}
 800e85c:	08018a24 	.word	0x08018a24
 800e860:	08018b88 	.word	0x08018b88
 800e864:	08018a84 	.word	0x08018a84

0800e868 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b082      	sub	sp, #8
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
 800e870:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e872:	2200      	movs	r2, #0
 800e874:	6839      	ldr	r1, [r7, #0]
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f7ff ff8e 	bl	800e798 <pbuf_add_header_impl>
 800e87c:	4603      	mov	r3, r0
}
 800e87e:	4618      	mov	r0, r3
 800e880:	3708      	adds	r7, #8
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}
	...

0800e888 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b084      	sub	sp, #16
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d106      	bne.n	800e8a6 <pbuf_remove_header+0x1e>
 800e898:	4b20      	ldr	r3, [pc, #128]	; (800e91c <pbuf_remove_header+0x94>)
 800e89a:	f240 224b 	movw	r2, #587	; 0x24b
 800e89e:	4920      	ldr	r1, [pc, #128]	; (800e920 <pbuf_remove_header+0x98>)
 800e8a0:	4820      	ldr	r0, [pc, #128]	; (800e924 <pbuf_remove_header+0x9c>)
 800e8a2:	f008 fba3 	bl	8016fec <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d003      	beq.n	800e8b4 <pbuf_remove_header+0x2c>
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8b2:	d301      	bcc.n	800e8b8 <pbuf_remove_header+0x30>
    return 1;
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	e02c      	b.n	800e912 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d101      	bne.n	800e8c2 <pbuf_remove_header+0x3a>
    return 0;
 800e8be:	2300      	movs	r3, #0
 800e8c0:	e027      	b.n	800e912 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	895b      	ldrh	r3, [r3, #10]
 800e8ca:	89fa      	ldrh	r2, [r7, #14]
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d908      	bls.n	800e8e2 <pbuf_remove_header+0x5a>
 800e8d0:	4b12      	ldr	r3, [pc, #72]	; (800e91c <pbuf_remove_header+0x94>)
 800e8d2:	f240 2255 	movw	r2, #597	; 0x255
 800e8d6:	4914      	ldr	r1, [pc, #80]	; (800e928 <pbuf_remove_header+0xa0>)
 800e8d8:	4812      	ldr	r0, [pc, #72]	; (800e924 <pbuf_remove_header+0x9c>)
 800e8da:	f008 fb87 	bl	8016fec <iprintf>
 800e8de:	2301      	movs	r3, #1
 800e8e0:	e017      	b.n	800e912 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	685a      	ldr	r2, [r3, #4]
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	441a      	add	r2, r3
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	895a      	ldrh	r2, [r3, #10]
 800e8f8:	89fb      	ldrh	r3, [r7, #14]
 800e8fa:	1ad3      	subs	r3, r2, r3
 800e8fc:	b29a      	uxth	r2, r3
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	891a      	ldrh	r2, [r3, #8]
 800e906:	89fb      	ldrh	r3, [r7, #14]
 800e908:	1ad3      	subs	r3, r2, r3
 800e90a:	b29a      	uxth	r2, r3
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e910:	2300      	movs	r3, #0
}
 800e912:	4618      	mov	r0, r3
 800e914:	3710      	adds	r7, #16
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}
 800e91a:	bf00      	nop
 800e91c:	08018a24 	.word	0x08018a24
 800e920:	08018b88 	.word	0x08018b88
 800e924:	08018a84 	.word	0x08018a84
 800e928:	08018b94 	.word	0x08018b94

0800e92c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b082      	sub	sp, #8
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
 800e934:	460b      	mov	r3, r1
 800e936:	807b      	strh	r3, [r7, #2]
 800e938:	4613      	mov	r3, r2
 800e93a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e93c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e940:	2b00      	cmp	r3, #0
 800e942:	da08      	bge.n	800e956 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e944:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e948:	425b      	negs	r3, r3
 800e94a:	4619      	mov	r1, r3
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f7ff ff9b 	bl	800e888 <pbuf_remove_header>
 800e952:	4603      	mov	r3, r0
 800e954:	e007      	b.n	800e966 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e956:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e95a:	787a      	ldrb	r2, [r7, #1]
 800e95c:	4619      	mov	r1, r3
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f7ff ff1a 	bl	800e798 <pbuf_add_header_impl>
 800e964:	4603      	mov	r3, r0
  }
}
 800e966:	4618      	mov	r0, r3
 800e968:	3708      	adds	r7, #8
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}

0800e96e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e96e:	b580      	push	{r7, lr}
 800e970:	b082      	sub	sp, #8
 800e972:	af00      	add	r7, sp, #0
 800e974:	6078      	str	r0, [r7, #4]
 800e976:	460b      	mov	r3, r1
 800e978:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e97a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e97e:	2201      	movs	r2, #1
 800e980:	4619      	mov	r1, r3
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f7ff ffd2 	bl	800e92c <pbuf_header_impl>
 800e988:	4603      	mov	r3, r0
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	3708      	adds	r7, #8
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
	...

0800e994 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b088      	sub	sp, #32
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d10b      	bne.n	800e9ba <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d106      	bne.n	800e9b6 <pbuf_free+0x22>
 800e9a8:	4b3b      	ldr	r3, [pc, #236]	; (800ea98 <pbuf_free+0x104>)
 800e9aa:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e9ae:	493b      	ldr	r1, [pc, #236]	; (800ea9c <pbuf_free+0x108>)
 800e9b0:	483b      	ldr	r0, [pc, #236]	; (800eaa0 <pbuf_free+0x10c>)
 800e9b2:	f008 fb1b 	bl	8016fec <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	e069      	b.n	800ea8e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e9be:	e062      	b.n	800ea86 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e9c0:	f008 faac 	bl	8016f1c <sys_arch_protect>
 800e9c4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	7b9b      	ldrb	r3, [r3, #14]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d106      	bne.n	800e9dc <pbuf_free+0x48>
 800e9ce:	4b32      	ldr	r3, [pc, #200]	; (800ea98 <pbuf_free+0x104>)
 800e9d0:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e9d4:	4933      	ldr	r1, [pc, #204]	; (800eaa4 <pbuf_free+0x110>)
 800e9d6:	4832      	ldr	r0, [pc, #200]	; (800eaa0 <pbuf_free+0x10c>)
 800e9d8:	f008 fb08 	bl	8016fec <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	7b9b      	ldrb	r3, [r3, #14]
 800e9e0:	3b01      	subs	r3, #1
 800e9e2:	b2da      	uxtb	r2, r3
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	739a      	strb	r2, [r3, #14]
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	7b9b      	ldrb	r3, [r3, #14]
 800e9ec:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e9ee:	69b8      	ldr	r0, [r7, #24]
 800e9f0:	f008 faa2 	bl	8016f38 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e9f4:	7dfb      	ldrb	r3, [r7, #23]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d143      	bne.n	800ea82 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	7b1b      	ldrb	r3, [r3, #12]
 800ea04:	f003 030f 	and.w	r3, r3, #15
 800ea08:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	7b5b      	ldrb	r3, [r3, #13]
 800ea0e:	f003 0302 	and.w	r3, r3, #2
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d011      	beq.n	800ea3a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	691b      	ldr	r3, [r3, #16]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d106      	bne.n	800ea30 <pbuf_free+0x9c>
 800ea22:	4b1d      	ldr	r3, [pc, #116]	; (800ea98 <pbuf_free+0x104>)
 800ea24:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ea28:	491f      	ldr	r1, [pc, #124]	; (800eaa8 <pbuf_free+0x114>)
 800ea2a:	481d      	ldr	r0, [pc, #116]	; (800eaa0 <pbuf_free+0x10c>)
 800ea2c:	f008 fade 	bl	8016fec <iprintf>
        pc->custom_free_function(p);
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	691b      	ldr	r3, [r3, #16]
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	4798      	blx	r3
 800ea38:	e01d      	b.n	800ea76 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ea3a:	7bfb      	ldrb	r3, [r7, #15]
 800ea3c:	2b02      	cmp	r3, #2
 800ea3e:	d104      	bne.n	800ea4a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ea40:	6879      	ldr	r1, [r7, #4]
 800ea42:	200c      	movs	r0, #12
 800ea44:	f7ff f902 	bl	800dc4c <memp_free>
 800ea48:	e015      	b.n	800ea76 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ea4a:	7bfb      	ldrb	r3, [r7, #15]
 800ea4c:	2b01      	cmp	r3, #1
 800ea4e:	d104      	bne.n	800ea5a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800ea50:	6879      	ldr	r1, [r7, #4]
 800ea52:	200b      	movs	r0, #11
 800ea54:	f7ff f8fa 	bl	800dc4c <memp_free>
 800ea58:	e00d      	b.n	800ea76 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ea5a:	7bfb      	ldrb	r3, [r7, #15]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d103      	bne.n	800ea68 <pbuf_free+0xd4>
          mem_free(p);
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f7fe fd3f 	bl	800d4e4 <mem_free>
 800ea66:	e006      	b.n	800ea76 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ea68:	4b0b      	ldr	r3, [pc, #44]	; (800ea98 <pbuf_free+0x104>)
 800ea6a:	f240 320f 	movw	r2, #783	; 0x30f
 800ea6e:	490f      	ldr	r1, [pc, #60]	; (800eaac <pbuf_free+0x118>)
 800ea70:	480b      	ldr	r0, [pc, #44]	; (800eaa0 <pbuf_free+0x10c>)
 800ea72:	f008 fabb 	bl	8016fec <iprintf>
        }
      }
      count++;
 800ea76:	7ffb      	ldrb	r3, [r7, #31]
 800ea78:	3301      	adds	r3, #1
 800ea7a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	607b      	str	r3, [r7, #4]
 800ea80:	e001      	b.n	800ea86 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ea82:	2300      	movs	r3, #0
 800ea84:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d199      	bne.n	800e9c0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ea8c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ea8e:	4618      	mov	r0, r3
 800ea90:	3720      	adds	r7, #32
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}
 800ea96:	bf00      	nop
 800ea98:	08018a24 	.word	0x08018a24
 800ea9c:	08018b88 	.word	0x08018b88
 800eaa0:	08018a84 	.word	0x08018a84
 800eaa4:	08018bb4 	.word	0x08018bb4
 800eaa8:	08018bcc 	.word	0x08018bcc
 800eaac:	08018bf0 	.word	0x08018bf0

0800eab0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800eab0:	b480      	push	{r7}
 800eab2:	b085      	sub	sp, #20
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800eab8:	2300      	movs	r3, #0
 800eaba:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800eabc:	e005      	b.n	800eaca <pbuf_clen+0x1a>
    ++len;
 800eabe:	89fb      	ldrh	r3, [r7, #14]
 800eac0:	3301      	adds	r3, #1
 800eac2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d1f6      	bne.n	800eabe <pbuf_clen+0xe>
  }
  return len;
 800ead0:	89fb      	ldrh	r3, [r7, #14]
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3714      	adds	r7, #20
 800ead6:	46bd      	mov	sp, r7
 800ead8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eadc:	4770      	bx	lr
	...

0800eae0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b084      	sub	sp, #16
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d016      	beq.n	800eb1c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800eaee:	f008 fa15 	bl	8016f1c <sys_arch_protect>
 800eaf2:	60f8      	str	r0, [r7, #12]
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	7b9b      	ldrb	r3, [r3, #14]
 800eaf8:	3301      	adds	r3, #1
 800eafa:	b2da      	uxtb	r2, r3
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	739a      	strb	r2, [r3, #14]
 800eb00:	68f8      	ldr	r0, [r7, #12]
 800eb02:	f008 fa19 	bl	8016f38 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	7b9b      	ldrb	r3, [r3, #14]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d106      	bne.n	800eb1c <pbuf_ref+0x3c>
 800eb0e:	4b05      	ldr	r3, [pc, #20]	; (800eb24 <pbuf_ref+0x44>)
 800eb10:	f240 3242 	movw	r2, #834	; 0x342
 800eb14:	4904      	ldr	r1, [pc, #16]	; (800eb28 <pbuf_ref+0x48>)
 800eb16:	4805      	ldr	r0, [pc, #20]	; (800eb2c <pbuf_ref+0x4c>)
 800eb18:	f008 fa68 	bl	8016fec <iprintf>
  }
}
 800eb1c:	bf00      	nop
 800eb1e:	3710      	adds	r7, #16
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}
 800eb24:	08018a24 	.word	0x08018a24
 800eb28:	08018c04 	.word	0x08018c04
 800eb2c:	08018a84 	.word	0x08018a84

0800eb30 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b084      	sub	sp, #16
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d002      	beq.n	800eb46 <pbuf_cat+0x16>
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d107      	bne.n	800eb56 <pbuf_cat+0x26>
 800eb46:	4b20      	ldr	r3, [pc, #128]	; (800ebc8 <pbuf_cat+0x98>)
 800eb48:	f240 3259 	movw	r2, #857	; 0x359
 800eb4c:	491f      	ldr	r1, [pc, #124]	; (800ebcc <pbuf_cat+0x9c>)
 800eb4e:	4820      	ldr	r0, [pc, #128]	; (800ebd0 <pbuf_cat+0xa0>)
 800eb50:	f008 fa4c 	bl	8016fec <iprintf>
 800eb54:	e034      	b.n	800ebc0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	60fb      	str	r3, [r7, #12]
 800eb5a:	e00a      	b.n	800eb72 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	891a      	ldrh	r2, [r3, #8]
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	891b      	ldrh	r3, [r3, #8]
 800eb64:	4413      	add	r3, r2
 800eb66:	b29a      	uxth	r2, r3
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	60fb      	str	r3, [r7, #12]
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d1f0      	bne.n	800eb5c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	891a      	ldrh	r2, [r3, #8]
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	895b      	ldrh	r3, [r3, #10]
 800eb82:	429a      	cmp	r2, r3
 800eb84:	d006      	beq.n	800eb94 <pbuf_cat+0x64>
 800eb86:	4b10      	ldr	r3, [pc, #64]	; (800ebc8 <pbuf_cat+0x98>)
 800eb88:	f240 3262 	movw	r2, #866	; 0x362
 800eb8c:	4911      	ldr	r1, [pc, #68]	; (800ebd4 <pbuf_cat+0xa4>)
 800eb8e:	4810      	ldr	r0, [pc, #64]	; (800ebd0 <pbuf_cat+0xa0>)
 800eb90:	f008 fa2c 	bl	8016fec <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d006      	beq.n	800ebaa <pbuf_cat+0x7a>
 800eb9c:	4b0a      	ldr	r3, [pc, #40]	; (800ebc8 <pbuf_cat+0x98>)
 800eb9e:	f240 3263 	movw	r2, #867	; 0x363
 800eba2:	490d      	ldr	r1, [pc, #52]	; (800ebd8 <pbuf_cat+0xa8>)
 800eba4:	480a      	ldr	r0, [pc, #40]	; (800ebd0 <pbuf_cat+0xa0>)
 800eba6:	f008 fa21 	bl	8016fec <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	891a      	ldrh	r2, [r3, #8]
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	891b      	ldrh	r3, [r3, #8]
 800ebb2:	4413      	add	r3, r2
 800ebb4:	b29a      	uxth	r2, r3
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	683a      	ldr	r2, [r7, #0]
 800ebbe:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ebc0:	3710      	adds	r7, #16
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}
 800ebc6:	bf00      	nop
 800ebc8:	08018a24 	.word	0x08018a24
 800ebcc:	08018c18 	.word	0x08018c18
 800ebd0:	08018a84 	.word	0x08018a84
 800ebd4:	08018c50 	.word	0x08018c50
 800ebd8:	08018c80 	.word	0x08018c80

0800ebdc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b086      	sub	sp, #24
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	617b      	str	r3, [r7, #20]
 800ebea:	2300      	movs	r3, #0
 800ebec:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d008      	beq.n	800ec06 <pbuf_copy+0x2a>
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d005      	beq.n	800ec06 <pbuf_copy+0x2a>
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	891a      	ldrh	r2, [r3, #8]
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	891b      	ldrh	r3, [r3, #8]
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d209      	bcs.n	800ec1a <pbuf_copy+0x3e>
 800ec06:	4b57      	ldr	r3, [pc, #348]	; (800ed64 <pbuf_copy+0x188>)
 800ec08:	f240 32c9 	movw	r2, #969	; 0x3c9
 800ec0c:	4956      	ldr	r1, [pc, #344]	; (800ed68 <pbuf_copy+0x18c>)
 800ec0e:	4857      	ldr	r0, [pc, #348]	; (800ed6c <pbuf_copy+0x190>)
 800ec10:	f008 f9ec 	bl	8016fec <iprintf>
 800ec14:	f06f 030f 	mvn.w	r3, #15
 800ec18:	e09f      	b.n	800ed5a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	895b      	ldrh	r3, [r3, #10]
 800ec1e:	461a      	mov	r2, r3
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	1ad2      	subs	r2, r2, r3
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	895b      	ldrh	r3, [r3, #10]
 800ec28:	4619      	mov	r1, r3
 800ec2a:	693b      	ldr	r3, [r7, #16]
 800ec2c:	1acb      	subs	r3, r1, r3
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	d306      	bcc.n	800ec40 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	895b      	ldrh	r3, [r3, #10]
 800ec36:	461a      	mov	r2, r3
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	1ad3      	subs	r3, r2, r3
 800ec3c:	60fb      	str	r3, [r7, #12]
 800ec3e:	e005      	b.n	800ec4c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	895b      	ldrh	r3, [r3, #10]
 800ec44:	461a      	mov	r2, r3
 800ec46:	697b      	ldr	r3, [r7, #20]
 800ec48:	1ad3      	subs	r3, r2, r3
 800ec4a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	685a      	ldr	r2, [r3, #4]
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	18d0      	adds	r0, r2, r3
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	685a      	ldr	r2, [r3, #4]
 800ec58:	693b      	ldr	r3, [r7, #16]
 800ec5a:	4413      	add	r3, r2
 800ec5c:	68fa      	ldr	r2, [r7, #12]
 800ec5e:	4619      	mov	r1, r3
 800ec60:	f008 f9ae 	bl	8016fc0 <memcpy>
    offset_to += len;
 800ec64:	697a      	ldr	r2, [r7, #20]
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	4413      	add	r3, r2
 800ec6a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ec6c:	693a      	ldr	r2, [r7, #16]
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	4413      	add	r3, r2
 800ec72:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	895b      	ldrh	r3, [r3, #10]
 800ec78:	461a      	mov	r2, r3
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	4293      	cmp	r3, r2
 800ec7e:	d906      	bls.n	800ec8e <pbuf_copy+0xb2>
 800ec80:	4b38      	ldr	r3, [pc, #224]	; (800ed64 <pbuf_copy+0x188>)
 800ec82:	f240 32d9 	movw	r2, #985	; 0x3d9
 800ec86:	493a      	ldr	r1, [pc, #232]	; (800ed70 <pbuf_copy+0x194>)
 800ec88:	4838      	ldr	r0, [pc, #224]	; (800ed6c <pbuf_copy+0x190>)
 800ec8a:	f008 f9af 	bl	8016fec <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	895b      	ldrh	r3, [r3, #10]
 800ec92:	461a      	mov	r2, r3
 800ec94:	693b      	ldr	r3, [r7, #16]
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d906      	bls.n	800eca8 <pbuf_copy+0xcc>
 800ec9a:	4b32      	ldr	r3, [pc, #200]	; (800ed64 <pbuf_copy+0x188>)
 800ec9c:	f240 32da 	movw	r2, #986	; 0x3da
 800eca0:	4934      	ldr	r1, [pc, #208]	; (800ed74 <pbuf_copy+0x198>)
 800eca2:	4832      	ldr	r0, [pc, #200]	; (800ed6c <pbuf_copy+0x190>)
 800eca4:	f008 f9a2 	bl	8016fec <iprintf>
    if (offset_from >= p_from->len) {
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	895b      	ldrh	r3, [r3, #10]
 800ecac:	461a      	mov	r2, r3
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	4293      	cmp	r3, r2
 800ecb2:	d304      	bcc.n	800ecbe <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	895b      	ldrh	r3, [r3, #10]
 800ecc2:	461a      	mov	r2, r3
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	4293      	cmp	r3, r2
 800ecc8:	d114      	bne.n	800ecf4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ecca:	2300      	movs	r3, #0
 800eccc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d10c      	bne.n	800ecf4 <pbuf_copy+0x118>
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d009      	beq.n	800ecf4 <pbuf_copy+0x118>
 800ece0:	4b20      	ldr	r3, [pc, #128]	; (800ed64 <pbuf_copy+0x188>)
 800ece2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800ece6:	4924      	ldr	r1, [pc, #144]	; (800ed78 <pbuf_copy+0x19c>)
 800ece8:	4820      	ldr	r0, [pc, #128]	; (800ed6c <pbuf_copy+0x190>)
 800ecea:	f008 f97f 	bl	8016fec <iprintf>
 800ecee:	f06f 030f 	mvn.w	r3, #15
 800ecf2:	e032      	b.n	800ed5a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d013      	beq.n	800ed22 <pbuf_copy+0x146>
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	895a      	ldrh	r2, [r3, #10]
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	891b      	ldrh	r3, [r3, #8]
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d10d      	bne.n	800ed22 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d009      	beq.n	800ed22 <pbuf_copy+0x146>
 800ed0e:	4b15      	ldr	r3, [pc, #84]	; (800ed64 <pbuf_copy+0x188>)
 800ed10:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ed14:	4919      	ldr	r1, [pc, #100]	; (800ed7c <pbuf_copy+0x1a0>)
 800ed16:	4815      	ldr	r0, [pc, #84]	; (800ed6c <pbuf_copy+0x190>)
 800ed18:	f008 f968 	bl	8016fec <iprintf>
 800ed1c:	f06f 0305 	mvn.w	r3, #5
 800ed20:	e01b      	b.n	800ed5a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d013      	beq.n	800ed50 <pbuf_copy+0x174>
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	895a      	ldrh	r2, [r3, #10]
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	891b      	ldrh	r3, [r3, #8]
 800ed30:	429a      	cmp	r2, r3
 800ed32:	d10d      	bne.n	800ed50 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d009      	beq.n	800ed50 <pbuf_copy+0x174>
 800ed3c:	4b09      	ldr	r3, [pc, #36]	; (800ed64 <pbuf_copy+0x188>)
 800ed3e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ed42:	490e      	ldr	r1, [pc, #56]	; (800ed7c <pbuf_copy+0x1a0>)
 800ed44:	4809      	ldr	r0, [pc, #36]	; (800ed6c <pbuf_copy+0x190>)
 800ed46:	f008 f951 	bl	8016fec <iprintf>
 800ed4a:	f06f 0305 	mvn.w	r3, #5
 800ed4e:	e004      	b.n	800ed5a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	f47f af61 	bne.w	800ec1a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ed58:	2300      	movs	r3, #0
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3718      	adds	r7, #24
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}
 800ed62:	bf00      	nop
 800ed64:	08018a24 	.word	0x08018a24
 800ed68:	08018ccc 	.word	0x08018ccc
 800ed6c:	08018a84 	.word	0x08018a84
 800ed70:	08018cfc 	.word	0x08018cfc
 800ed74:	08018d14 	.word	0x08018d14
 800ed78:	08018d30 	.word	0x08018d30
 800ed7c:	08018d40 	.word	0x08018d40

0800ed80 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b088      	sub	sp, #32
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	60f8      	str	r0, [r7, #12]
 800ed88:	60b9      	str	r1, [r7, #8]
 800ed8a:	4611      	mov	r1, r2
 800ed8c:	461a      	mov	r2, r3
 800ed8e:	460b      	mov	r3, r1
 800ed90:	80fb      	strh	r3, [r7, #6]
 800ed92:	4613      	mov	r3, r2
 800ed94:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ed96:	2300      	movs	r3, #0
 800ed98:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d108      	bne.n	800edb6 <pbuf_copy_partial+0x36>
 800eda4:	4b2b      	ldr	r3, [pc, #172]	; (800ee54 <pbuf_copy_partial+0xd4>)
 800eda6:	f240 420a 	movw	r2, #1034	; 0x40a
 800edaa:	492b      	ldr	r1, [pc, #172]	; (800ee58 <pbuf_copy_partial+0xd8>)
 800edac:	482b      	ldr	r0, [pc, #172]	; (800ee5c <pbuf_copy_partial+0xdc>)
 800edae:	f008 f91d 	bl	8016fec <iprintf>
 800edb2:	2300      	movs	r3, #0
 800edb4:	e04a      	b.n	800ee4c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d108      	bne.n	800edce <pbuf_copy_partial+0x4e>
 800edbc:	4b25      	ldr	r3, [pc, #148]	; (800ee54 <pbuf_copy_partial+0xd4>)
 800edbe:	f240 420b 	movw	r2, #1035	; 0x40b
 800edc2:	4927      	ldr	r1, [pc, #156]	; (800ee60 <pbuf_copy_partial+0xe0>)
 800edc4:	4825      	ldr	r0, [pc, #148]	; (800ee5c <pbuf_copy_partial+0xdc>)
 800edc6:	f008 f911 	bl	8016fec <iprintf>
 800edca:	2300      	movs	r3, #0
 800edcc:	e03e      	b.n	800ee4c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	61fb      	str	r3, [r7, #28]
 800edd2:	e034      	b.n	800ee3e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800edd4:	88bb      	ldrh	r3, [r7, #4]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d00a      	beq.n	800edf0 <pbuf_copy_partial+0x70>
 800edda:	69fb      	ldr	r3, [r7, #28]
 800eddc:	895b      	ldrh	r3, [r3, #10]
 800edde:	88ba      	ldrh	r2, [r7, #4]
 800ede0:	429a      	cmp	r2, r3
 800ede2:	d305      	bcc.n	800edf0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ede4:	69fb      	ldr	r3, [r7, #28]
 800ede6:	895b      	ldrh	r3, [r3, #10]
 800ede8:	88ba      	ldrh	r2, [r7, #4]
 800edea:	1ad3      	subs	r3, r2, r3
 800edec:	80bb      	strh	r3, [r7, #4]
 800edee:	e023      	b.n	800ee38 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800edf0:	69fb      	ldr	r3, [r7, #28]
 800edf2:	895a      	ldrh	r2, [r3, #10]
 800edf4:	88bb      	ldrh	r3, [r7, #4]
 800edf6:	1ad3      	subs	r3, r2, r3
 800edf8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800edfa:	8b3a      	ldrh	r2, [r7, #24]
 800edfc:	88fb      	ldrh	r3, [r7, #6]
 800edfe:	429a      	cmp	r2, r3
 800ee00:	d901      	bls.n	800ee06 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ee02:	88fb      	ldrh	r3, [r7, #6]
 800ee04:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ee06:	8b7b      	ldrh	r3, [r7, #26]
 800ee08:	68ba      	ldr	r2, [r7, #8]
 800ee0a:	18d0      	adds	r0, r2, r3
 800ee0c:	69fb      	ldr	r3, [r7, #28]
 800ee0e:	685a      	ldr	r2, [r3, #4]
 800ee10:	88bb      	ldrh	r3, [r7, #4]
 800ee12:	4413      	add	r3, r2
 800ee14:	8b3a      	ldrh	r2, [r7, #24]
 800ee16:	4619      	mov	r1, r3
 800ee18:	f008 f8d2 	bl	8016fc0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ee1c:	8afa      	ldrh	r2, [r7, #22]
 800ee1e:	8b3b      	ldrh	r3, [r7, #24]
 800ee20:	4413      	add	r3, r2
 800ee22:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ee24:	8b7a      	ldrh	r2, [r7, #26]
 800ee26:	8b3b      	ldrh	r3, [r7, #24]
 800ee28:	4413      	add	r3, r2
 800ee2a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ee2c:	88fa      	ldrh	r2, [r7, #6]
 800ee2e:	8b3b      	ldrh	r3, [r7, #24]
 800ee30:	1ad3      	subs	r3, r2, r3
 800ee32:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ee34:	2300      	movs	r3, #0
 800ee36:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ee38:	69fb      	ldr	r3, [r7, #28]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	61fb      	str	r3, [r7, #28]
 800ee3e:	88fb      	ldrh	r3, [r7, #6]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d002      	beq.n	800ee4a <pbuf_copy_partial+0xca>
 800ee44:	69fb      	ldr	r3, [r7, #28]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d1c4      	bne.n	800edd4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ee4a:	8afb      	ldrh	r3, [r7, #22]
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3720      	adds	r7, #32
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}
 800ee54:	08018a24 	.word	0x08018a24
 800ee58:	08018d6c 	.word	0x08018d6c
 800ee5c:	08018a84 	.word	0x08018a84
 800ee60:	08018d8c 	.word	0x08018d8c

0800ee64 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b084      	sub	sp, #16
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	603a      	str	r2, [r7, #0]
 800ee6e:	71fb      	strb	r3, [r7, #7]
 800ee70:	460b      	mov	r3, r1
 800ee72:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	8919      	ldrh	r1, [r3, #8]
 800ee78:	88ba      	ldrh	r2, [r7, #4]
 800ee7a:	79fb      	ldrb	r3, [r7, #7]
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f7ff faa5 	bl	800e3cc <pbuf_alloc>
 800ee82:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d101      	bne.n	800ee8e <pbuf_clone+0x2a>
    return NULL;
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	e011      	b.n	800eeb2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ee8e:	6839      	ldr	r1, [r7, #0]
 800ee90:	68f8      	ldr	r0, [r7, #12]
 800ee92:	f7ff fea3 	bl	800ebdc <pbuf_copy>
 800ee96:	4603      	mov	r3, r0
 800ee98:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ee9a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d006      	beq.n	800eeb0 <pbuf_clone+0x4c>
 800eea2:	4b06      	ldr	r3, [pc, #24]	; (800eebc <pbuf_clone+0x58>)
 800eea4:	f240 5224 	movw	r2, #1316	; 0x524
 800eea8:	4905      	ldr	r1, [pc, #20]	; (800eec0 <pbuf_clone+0x5c>)
 800eeaa:	4806      	ldr	r0, [pc, #24]	; (800eec4 <pbuf_clone+0x60>)
 800eeac:	f008 f89e 	bl	8016fec <iprintf>
  return q;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	3710      	adds	r7, #16
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}
 800eeba:	bf00      	nop
 800eebc:	08018a24 	.word	0x08018a24
 800eec0:	08018e98 	.word	0x08018e98
 800eec4:	08018a84 	.word	0x08018a84

0800eec8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800eecc:	f008 f91c 	bl	8017108 <rand>
 800eed0:	4603      	mov	r3, r0
 800eed2:	b29b      	uxth	r3, r3
 800eed4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800eed8:	b29b      	uxth	r3, r3
 800eeda:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800eede:	b29a      	uxth	r2, r3
 800eee0:	4b01      	ldr	r3, [pc, #4]	; (800eee8 <tcp_init+0x20>)
 800eee2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800eee4:	bf00      	nop
 800eee6:	bd80      	pop	{r7, pc}
 800eee8:	20000024 	.word	0x20000024

0800eeec <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b082      	sub	sp, #8
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	7d1b      	ldrb	r3, [r3, #20]
 800eef8:	2b01      	cmp	r3, #1
 800eefa:	d105      	bne.n	800ef08 <tcp_free+0x1c>
 800eefc:	4b06      	ldr	r3, [pc, #24]	; (800ef18 <tcp_free+0x2c>)
 800eefe:	22d4      	movs	r2, #212	; 0xd4
 800ef00:	4906      	ldr	r1, [pc, #24]	; (800ef1c <tcp_free+0x30>)
 800ef02:	4807      	ldr	r0, [pc, #28]	; (800ef20 <tcp_free+0x34>)
 800ef04:	f008 f872 	bl	8016fec <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ef08:	6879      	ldr	r1, [r7, #4]
 800ef0a:	2001      	movs	r0, #1
 800ef0c:	f7fe fe9e 	bl	800dc4c <memp_free>
}
 800ef10:	bf00      	nop
 800ef12:	3708      	adds	r7, #8
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}
 800ef18:	08018f24 	.word	0x08018f24
 800ef1c:	08018f54 	.word	0x08018f54
 800ef20:	08018f68 	.word	0x08018f68

0800ef24 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b082      	sub	sp, #8
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	7d1b      	ldrb	r3, [r3, #20]
 800ef30:	2b01      	cmp	r3, #1
 800ef32:	d105      	bne.n	800ef40 <tcp_free_listen+0x1c>
 800ef34:	4b06      	ldr	r3, [pc, #24]	; (800ef50 <tcp_free_listen+0x2c>)
 800ef36:	22df      	movs	r2, #223	; 0xdf
 800ef38:	4906      	ldr	r1, [pc, #24]	; (800ef54 <tcp_free_listen+0x30>)
 800ef3a:	4807      	ldr	r0, [pc, #28]	; (800ef58 <tcp_free_listen+0x34>)
 800ef3c:	f008 f856 	bl	8016fec <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ef40:	6879      	ldr	r1, [r7, #4]
 800ef42:	2002      	movs	r0, #2
 800ef44:	f7fe fe82 	bl	800dc4c <memp_free>
}
 800ef48:	bf00      	nop
 800ef4a:	3708      	adds	r7, #8
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}
 800ef50:	08018f24 	.word	0x08018f24
 800ef54:	08018f90 	.word	0x08018f90
 800ef58:	08018f68 	.word	0x08018f68

0800ef5c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ef60:	f000 fea2 	bl	800fca8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ef64:	4b07      	ldr	r3, [pc, #28]	; (800ef84 <tcp_tmr+0x28>)
 800ef66:	781b      	ldrb	r3, [r3, #0]
 800ef68:	3301      	adds	r3, #1
 800ef6a:	b2da      	uxtb	r2, r3
 800ef6c:	4b05      	ldr	r3, [pc, #20]	; (800ef84 <tcp_tmr+0x28>)
 800ef6e:	701a      	strb	r2, [r3, #0]
 800ef70:	4b04      	ldr	r3, [pc, #16]	; (800ef84 <tcp_tmr+0x28>)
 800ef72:	781b      	ldrb	r3, [r3, #0]
 800ef74:	f003 0301 	and.w	r3, r3, #1
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d001      	beq.n	800ef80 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ef7c:	f000 fb54 	bl	800f628 <tcp_slowtmr>
  }
}
 800ef80:	bf00      	nop
 800ef82:	bd80      	pop	{r7, pc}
 800ef84:	20011035 	.word	0x20011035

0800ef88 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b084      	sub	sp, #16
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d105      	bne.n	800efa4 <tcp_remove_listener+0x1c>
 800ef98:	4b0d      	ldr	r3, [pc, #52]	; (800efd0 <tcp_remove_listener+0x48>)
 800ef9a:	22ff      	movs	r2, #255	; 0xff
 800ef9c:	490d      	ldr	r1, [pc, #52]	; (800efd4 <tcp_remove_listener+0x4c>)
 800ef9e:	480e      	ldr	r0, [pc, #56]	; (800efd8 <tcp_remove_listener+0x50>)
 800efa0:	f008 f824 	bl	8016fec <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	60fb      	str	r3, [r7, #12]
 800efa8:	e00a      	b.n	800efc0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efae:	683a      	ldr	r2, [r7, #0]
 800efb0:	429a      	cmp	r2, r3
 800efb2:	d102      	bne.n	800efba <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	2200      	movs	r2, #0
 800efb8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	68db      	ldr	r3, [r3, #12]
 800efbe:	60fb      	str	r3, [r7, #12]
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d1f1      	bne.n	800efaa <tcp_remove_listener+0x22>
    }
  }
}
 800efc6:	bf00      	nop
 800efc8:	bf00      	nop
 800efca:	3710      	adds	r7, #16
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}
 800efd0:	08018f24 	.word	0x08018f24
 800efd4:	08018fac 	.word	0x08018fac
 800efd8:	08018f68 	.word	0x08018f68

0800efdc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b084      	sub	sp, #16
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d106      	bne.n	800eff8 <tcp_listen_closed+0x1c>
 800efea:	4b14      	ldr	r3, [pc, #80]	; (800f03c <tcp_listen_closed+0x60>)
 800efec:	f240 1211 	movw	r2, #273	; 0x111
 800eff0:	4913      	ldr	r1, [pc, #76]	; (800f040 <tcp_listen_closed+0x64>)
 800eff2:	4814      	ldr	r0, [pc, #80]	; (800f044 <tcp_listen_closed+0x68>)
 800eff4:	f007 fffa 	bl	8016fec <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	7d1b      	ldrb	r3, [r3, #20]
 800effc:	2b01      	cmp	r3, #1
 800effe:	d006      	beq.n	800f00e <tcp_listen_closed+0x32>
 800f000:	4b0e      	ldr	r3, [pc, #56]	; (800f03c <tcp_listen_closed+0x60>)
 800f002:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f006:	4910      	ldr	r1, [pc, #64]	; (800f048 <tcp_listen_closed+0x6c>)
 800f008:	480e      	ldr	r0, [pc, #56]	; (800f044 <tcp_listen_closed+0x68>)
 800f00a:	f007 ffef 	bl	8016fec <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f00e:	2301      	movs	r3, #1
 800f010:	60fb      	str	r3, [r7, #12]
 800f012:	e00b      	b.n	800f02c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f014:	4a0d      	ldr	r2, [pc, #52]	; (800f04c <tcp_listen_closed+0x70>)
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	6879      	ldr	r1, [r7, #4]
 800f020:	4618      	mov	r0, r3
 800f022:	f7ff ffb1 	bl	800ef88 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	3301      	adds	r3, #1
 800f02a:	60fb      	str	r3, [r7, #12]
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	2b03      	cmp	r3, #3
 800f030:	d9f0      	bls.n	800f014 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f032:	bf00      	nop
 800f034:	bf00      	nop
 800f036:	3710      	adds	r7, #16
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}
 800f03c:	08018f24 	.word	0x08018f24
 800f040:	08018fd4 	.word	0x08018fd4
 800f044:	08018f68 	.word	0x08018f68
 800f048:	08018fe0 	.word	0x08018fe0
 800f04c:	0801afb8 	.word	0x0801afb8

0800f050 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f050:	b5b0      	push	{r4, r5, r7, lr}
 800f052:	b088      	sub	sp, #32
 800f054:	af04      	add	r7, sp, #16
 800f056:	6078      	str	r0, [r7, #4]
 800f058:	460b      	mov	r3, r1
 800f05a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d106      	bne.n	800f070 <tcp_close_shutdown+0x20>
 800f062:	4b63      	ldr	r3, [pc, #396]	; (800f1f0 <tcp_close_shutdown+0x1a0>)
 800f064:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f068:	4962      	ldr	r1, [pc, #392]	; (800f1f4 <tcp_close_shutdown+0x1a4>)
 800f06a:	4863      	ldr	r0, [pc, #396]	; (800f1f8 <tcp_close_shutdown+0x1a8>)
 800f06c:	f007 ffbe 	bl	8016fec <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f070:	78fb      	ldrb	r3, [r7, #3]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d066      	beq.n	800f144 <tcp_close_shutdown+0xf4>
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	7d1b      	ldrb	r3, [r3, #20]
 800f07a:	2b04      	cmp	r3, #4
 800f07c:	d003      	beq.n	800f086 <tcp_close_shutdown+0x36>
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	7d1b      	ldrb	r3, [r3, #20]
 800f082:	2b07      	cmp	r3, #7
 800f084:	d15e      	bne.n	800f144 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d104      	bne.n	800f098 <tcp_close_shutdown+0x48>
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f092:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f096:	d055      	beq.n	800f144 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	8b5b      	ldrh	r3, [r3, #26]
 800f09c:	f003 0310 	and.w	r3, r3, #16
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d106      	bne.n	800f0b2 <tcp_close_shutdown+0x62>
 800f0a4:	4b52      	ldr	r3, [pc, #328]	; (800f1f0 <tcp_close_shutdown+0x1a0>)
 800f0a6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800f0aa:	4954      	ldr	r1, [pc, #336]	; (800f1fc <tcp_close_shutdown+0x1ac>)
 800f0ac:	4852      	ldr	r0, [pc, #328]	; (800f1f8 <tcp_close_shutdown+0x1a8>)
 800f0ae:	f007 ff9d 	bl	8016fec <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f0ba:	687d      	ldr	r5, [r7, #4]
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	3304      	adds	r3, #4
 800f0c0:	687a      	ldr	r2, [r7, #4]
 800f0c2:	8ad2      	ldrh	r2, [r2, #22]
 800f0c4:	6879      	ldr	r1, [r7, #4]
 800f0c6:	8b09      	ldrh	r1, [r1, #24]
 800f0c8:	9102      	str	r1, [sp, #8]
 800f0ca:	9201      	str	r2, [sp, #4]
 800f0cc:	9300      	str	r3, [sp, #0]
 800f0ce:	462b      	mov	r3, r5
 800f0d0:	4622      	mov	r2, r4
 800f0d2:	4601      	mov	r1, r0
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f004 fe91 	bl	8013dfc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f001 f8c6 	bl	801026c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f0e0:	4b47      	ldr	r3, [pc, #284]	; (800f200 <tcp_close_shutdown+0x1b0>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	687a      	ldr	r2, [r7, #4]
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d105      	bne.n	800f0f6 <tcp_close_shutdown+0xa6>
 800f0ea:	4b45      	ldr	r3, [pc, #276]	; (800f200 <tcp_close_shutdown+0x1b0>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	68db      	ldr	r3, [r3, #12]
 800f0f0:	4a43      	ldr	r2, [pc, #268]	; (800f200 <tcp_close_shutdown+0x1b0>)
 800f0f2:	6013      	str	r3, [r2, #0]
 800f0f4:	e013      	b.n	800f11e <tcp_close_shutdown+0xce>
 800f0f6:	4b42      	ldr	r3, [pc, #264]	; (800f200 <tcp_close_shutdown+0x1b0>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	60fb      	str	r3, [r7, #12]
 800f0fc:	e00c      	b.n	800f118 <tcp_close_shutdown+0xc8>
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	68db      	ldr	r3, [r3, #12]
 800f102:	687a      	ldr	r2, [r7, #4]
 800f104:	429a      	cmp	r2, r3
 800f106:	d104      	bne.n	800f112 <tcp_close_shutdown+0xc2>
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	68da      	ldr	r2, [r3, #12]
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	60da      	str	r2, [r3, #12]
 800f110:	e005      	b.n	800f11e <tcp_close_shutdown+0xce>
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	68db      	ldr	r3, [r3, #12]
 800f116:	60fb      	str	r3, [r7, #12]
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d1ef      	bne.n	800f0fe <tcp_close_shutdown+0xae>
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2200      	movs	r2, #0
 800f122:	60da      	str	r2, [r3, #12]
 800f124:	4b37      	ldr	r3, [pc, #220]	; (800f204 <tcp_close_shutdown+0x1b4>)
 800f126:	2201      	movs	r2, #1
 800f128:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f12a:	4b37      	ldr	r3, [pc, #220]	; (800f208 <tcp_close_shutdown+0x1b8>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	687a      	ldr	r2, [r7, #4]
 800f130:	429a      	cmp	r2, r3
 800f132:	d102      	bne.n	800f13a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f134:	f003 fd5e 	bl	8012bf4 <tcp_trigger_input_pcb_close>
 800f138:	e002      	b.n	800f140 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800f13a:	6878      	ldr	r0, [r7, #4]
 800f13c:	f7ff fed6 	bl	800eeec <tcp_free>
      }
      return ERR_OK;
 800f140:	2300      	movs	r3, #0
 800f142:	e050      	b.n	800f1e6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	7d1b      	ldrb	r3, [r3, #20]
 800f148:	2b02      	cmp	r3, #2
 800f14a:	d03b      	beq.n	800f1c4 <tcp_close_shutdown+0x174>
 800f14c:	2b02      	cmp	r3, #2
 800f14e:	dc44      	bgt.n	800f1da <tcp_close_shutdown+0x18a>
 800f150:	2b00      	cmp	r3, #0
 800f152:	d002      	beq.n	800f15a <tcp_close_shutdown+0x10a>
 800f154:	2b01      	cmp	r3, #1
 800f156:	d02a      	beq.n	800f1ae <tcp_close_shutdown+0x15e>
 800f158:	e03f      	b.n	800f1da <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	8adb      	ldrh	r3, [r3, #22]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d021      	beq.n	800f1a6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f162:	4b2a      	ldr	r3, [pc, #168]	; (800f20c <tcp_close_shutdown+0x1bc>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	687a      	ldr	r2, [r7, #4]
 800f168:	429a      	cmp	r2, r3
 800f16a:	d105      	bne.n	800f178 <tcp_close_shutdown+0x128>
 800f16c:	4b27      	ldr	r3, [pc, #156]	; (800f20c <tcp_close_shutdown+0x1bc>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	68db      	ldr	r3, [r3, #12]
 800f172:	4a26      	ldr	r2, [pc, #152]	; (800f20c <tcp_close_shutdown+0x1bc>)
 800f174:	6013      	str	r3, [r2, #0]
 800f176:	e013      	b.n	800f1a0 <tcp_close_shutdown+0x150>
 800f178:	4b24      	ldr	r3, [pc, #144]	; (800f20c <tcp_close_shutdown+0x1bc>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	60bb      	str	r3, [r7, #8]
 800f17e:	e00c      	b.n	800f19a <tcp_close_shutdown+0x14a>
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	68db      	ldr	r3, [r3, #12]
 800f184:	687a      	ldr	r2, [r7, #4]
 800f186:	429a      	cmp	r2, r3
 800f188:	d104      	bne.n	800f194 <tcp_close_shutdown+0x144>
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	68da      	ldr	r2, [r3, #12]
 800f18e:	68bb      	ldr	r3, [r7, #8]
 800f190:	60da      	str	r2, [r3, #12]
 800f192:	e005      	b.n	800f1a0 <tcp_close_shutdown+0x150>
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	68db      	ldr	r3, [r3, #12]
 800f198:	60bb      	str	r3, [r7, #8]
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d1ef      	bne.n	800f180 <tcp_close_shutdown+0x130>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	f7ff fea0 	bl	800eeec <tcp_free>
      break;
 800f1ac:	e01a      	b.n	800f1e4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f7ff ff14 	bl	800efdc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f1b4:	6879      	ldr	r1, [r7, #4]
 800f1b6:	4816      	ldr	r0, [pc, #88]	; (800f210 <tcp_close_shutdown+0x1c0>)
 800f1b8:	f001 f8a8 	bl	801030c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f7ff feb1 	bl	800ef24 <tcp_free_listen>
      break;
 800f1c2:	e00f      	b.n	800f1e4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f1c4:	6879      	ldr	r1, [r7, #4]
 800f1c6:	480e      	ldr	r0, [pc, #56]	; (800f200 <tcp_close_shutdown+0x1b0>)
 800f1c8:	f001 f8a0 	bl	801030c <tcp_pcb_remove>
 800f1cc:	4b0d      	ldr	r3, [pc, #52]	; (800f204 <tcp_close_shutdown+0x1b4>)
 800f1ce:	2201      	movs	r2, #1
 800f1d0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f7ff fe8a 	bl	800eeec <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f1d8:	e004      	b.n	800f1e4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f000 f81a 	bl	800f214 <tcp_close_shutdown_fin>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	e000      	b.n	800f1e6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800f1e4:	2300      	movs	r3, #0
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	3710      	adds	r7, #16
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bdb0      	pop	{r4, r5, r7, pc}
 800f1ee:	bf00      	nop
 800f1f0:	08018f24 	.word	0x08018f24
 800f1f4:	08018ff8 	.word	0x08018ff8
 800f1f8:	08018f68 	.word	0x08018f68
 800f1fc:	08019018 	.word	0x08019018
 800f200:	2001102c 	.word	0x2001102c
 800f204:	20011034 	.word	0x20011034
 800f208:	2001106c 	.word	0x2001106c
 800f20c:	20011024 	.word	0x20011024
 800f210:	20011028 	.word	0x20011028

0800f214 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b084      	sub	sp, #16
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d106      	bne.n	800f230 <tcp_close_shutdown_fin+0x1c>
 800f222:	4b2e      	ldr	r3, [pc, #184]	; (800f2dc <tcp_close_shutdown_fin+0xc8>)
 800f224:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f228:	492d      	ldr	r1, [pc, #180]	; (800f2e0 <tcp_close_shutdown_fin+0xcc>)
 800f22a:	482e      	ldr	r0, [pc, #184]	; (800f2e4 <tcp_close_shutdown_fin+0xd0>)
 800f22c:	f007 fede 	bl	8016fec <iprintf>

  switch (pcb->state) {
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	7d1b      	ldrb	r3, [r3, #20]
 800f234:	2b07      	cmp	r3, #7
 800f236:	d020      	beq.n	800f27a <tcp_close_shutdown_fin+0x66>
 800f238:	2b07      	cmp	r3, #7
 800f23a:	dc2b      	bgt.n	800f294 <tcp_close_shutdown_fin+0x80>
 800f23c:	2b03      	cmp	r3, #3
 800f23e:	d002      	beq.n	800f246 <tcp_close_shutdown_fin+0x32>
 800f240:	2b04      	cmp	r3, #4
 800f242:	d00d      	beq.n	800f260 <tcp_close_shutdown_fin+0x4c>
 800f244:	e026      	b.n	800f294 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f003 fee6 	bl	8013018 <tcp_send_fin>
 800f24c:	4603      	mov	r3, r0
 800f24e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d11f      	bne.n	800f298 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2205      	movs	r2, #5
 800f25c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f25e:	e01b      	b.n	800f298 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f003 fed9 	bl	8013018 <tcp_send_fin>
 800f266:	4603      	mov	r3, r0
 800f268:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f26a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d114      	bne.n	800f29c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2205      	movs	r2, #5
 800f276:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f278:	e010      	b.n	800f29c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f003 fecc 	bl	8013018 <tcp_send_fin>
 800f280:	4603      	mov	r3, r0
 800f282:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f284:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d109      	bne.n	800f2a0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2209      	movs	r2, #9
 800f290:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f292:	e005      	b.n	800f2a0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f294:	2300      	movs	r3, #0
 800f296:	e01c      	b.n	800f2d2 <tcp_close_shutdown_fin+0xbe>
      break;
 800f298:	bf00      	nop
 800f29a:	e002      	b.n	800f2a2 <tcp_close_shutdown_fin+0x8e>
      break;
 800f29c:	bf00      	nop
 800f29e:	e000      	b.n	800f2a2 <tcp_close_shutdown_fin+0x8e>
      break;
 800f2a0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f2a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d103      	bne.n	800f2b2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f003 fff2 	bl	8013294 <tcp_output>
 800f2b0:	e00d      	b.n	800f2ce <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f2b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2ba:	d108      	bne.n	800f2ce <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	8b5b      	ldrh	r3, [r3, #26]
 800f2c0:	f043 0308 	orr.w	r3, r3, #8
 800f2c4:	b29a      	uxth	r2, r3
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	e001      	b.n	800f2d2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f2ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3710      	adds	r7, #16
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}
 800f2da:	bf00      	nop
 800f2dc:	08018f24 	.word	0x08018f24
 800f2e0:	08018fd4 	.word	0x08018fd4
 800f2e4:	08018f68 	.word	0x08018f68

0800f2e8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b082      	sub	sp, #8
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d109      	bne.n	800f30a <tcp_close+0x22>
 800f2f6:	4b0f      	ldr	r3, [pc, #60]	; (800f334 <tcp_close+0x4c>)
 800f2f8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f2fc:	490e      	ldr	r1, [pc, #56]	; (800f338 <tcp_close+0x50>)
 800f2fe:	480f      	ldr	r0, [pc, #60]	; (800f33c <tcp_close+0x54>)
 800f300:	f007 fe74 	bl	8016fec <iprintf>
 800f304:	f06f 030f 	mvn.w	r3, #15
 800f308:	e00f      	b.n	800f32a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	7d1b      	ldrb	r3, [r3, #20]
 800f30e:	2b01      	cmp	r3, #1
 800f310:	d006      	beq.n	800f320 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	8b5b      	ldrh	r3, [r3, #26]
 800f316:	f043 0310 	orr.w	r3, r3, #16
 800f31a:	b29a      	uxth	r2, r3
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f320:	2101      	movs	r1, #1
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f7ff fe94 	bl	800f050 <tcp_close_shutdown>
 800f328:	4603      	mov	r3, r0
}
 800f32a:	4618      	mov	r0, r3
 800f32c:	3708      	adds	r7, #8
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}
 800f332:	bf00      	nop
 800f334:	08018f24 	.word	0x08018f24
 800f338:	08019034 	.word	0x08019034
 800f33c:	08018f68 	.word	0x08018f68

0800f340 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b08e      	sub	sp, #56	; 0x38
 800f344:	af04      	add	r7, sp, #16
 800f346:	6078      	str	r0, [r7, #4]
 800f348:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d107      	bne.n	800f360 <tcp_abandon+0x20>
 800f350:	4b52      	ldr	r3, [pc, #328]	; (800f49c <tcp_abandon+0x15c>)
 800f352:	f240 223d 	movw	r2, #573	; 0x23d
 800f356:	4952      	ldr	r1, [pc, #328]	; (800f4a0 <tcp_abandon+0x160>)
 800f358:	4852      	ldr	r0, [pc, #328]	; (800f4a4 <tcp_abandon+0x164>)
 800f35a:	f007 fe47 	bl	8016fec <iprintf>
 800f35e:	e099      	b.n	800f494 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	7d1b      	ldrb	r3, [r3, #20]
 800f364:	2b01      	cmp	r3, #1
 800f366:	d106      	bne.n	800f376 <tcp_abandon+0x36>
 800f368:	4b4c      	ldr	r3, [pc, #304]	; (800f49c <tcp_abandon+0x15c>)
 800f36a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f36e:	494e      	ldr	r1, [pc, #312]	; (800f4a8 <tcp_abandon+0x168>)
 800f370:	484c      	ldr	r0, [pc, #304]	; (800f4a4 <tcp_abandon+0x164>)
 800f372:	f007 fe3b 	bl	8016fec <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	7d1b      	ldrb	r3, [r3, #20]
 800f37a:	2b0a      	cmp	r3, #10
 800f37c:	d107      	bne.n	800f38e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f37e:	6879      	ldr	r1, [r7, #4]
 800f380:	484a      	ldr	r0, [pc, #296]	; (800f4ac <tcp_abandon+0x16c>)
 800f382:	f000 ffc3 	bl	801030c <tcp_pcb_remove>
    tcp_free(pcb);
 800f386:	6878      	ldr	r0, [r7, #4]
 800f388:	f7ff fdb0 	bl	800eeec <tcp_free>
 800f38c:	e082      	b.n	800f494 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f38e:	2300      	movs	r3, #0
 800f390:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f392:	2300      	movs	r3, #0
 800f394:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f39a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3a0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f3a8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	691b      	ldr	r3, [r3, #16]
 800f3ae:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	7d1b      	ldrb	r3, [r3, #20]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d126      	bne.n	800f406 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	8adb      	ldrh	r3, [r3, #22]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d02e      	beq.n	800f41e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f3c0:	4b3b      	ldr	r3, [pc, #236]	; (800f4b0 <tcp_abandon+0x170>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	687a      	ldr	r2, [r7, #4]
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d105      	bne.n	800f3d6 <tcp_abandon+0x96>
 800f3ca:	4b39      	ldr	r3, [pc, #228]	; (800f4b0 <tcp_abandon+0x170>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	68db      	ldr	r3, [r3, #12]
 800f3d0:	4a37      	ldr	r2, [pc, #220]	; (800f4b0 <tcp_abandon+0x170>)
 800f3d2:	6013      	str	r3, [r2, #0]
 800f3d4:	e013      	b.n	800f3fe <tcp_abandon+0xbe>
 800f3d6:	4b36      	ldr	r3, [pc, #216]	; (800f4b0 <tcp_abandon+0x170>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	61fb      	str	r3, [r7, #28]
 800f3dc:	e00c      	b.n	800f3f8 <tcp_abandon+0xb8>
 800f3de:	69fb      	ldr	r3, [r7, #28]
 800f3e0:	68db      	ldr	r3, [r3, #12]
 800f3e2:	687a      	ldr	r2, [r7, #4]
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	d104      	bne.n	800f3f2 <tcp_abandon+0xb2>
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	68da      	ldr	r2, [r3, #12]
 800f3ec:	69fb      	ldr	r3, [r7, #28]
 800f3ee:	60da      	str	r2, [r3, #12]
 800f3f0:	e005      	b.n	800f3fe <tcp_abandon+0xbe>
 800f3f2:	69fb      	ldr	r3, [r7, #28]
 800f3f4:	68db      	ldr	r3, [r3, #12]
 800f3f6:	61fb      	str	r3, [r7, #28]
 800f3f8:	69fb      	ldr	r3, [r7, #28]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d1ef      	bne.n	800f3de <tcp_abandon+0x9e>
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2200      	movs	r2, #0
 800f402:	60da      	str	r2, [r3, #12]
 800f404:	e00b      	b.n	800f41e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	8adb      	ldrh	r3, [r3, #22]
 800f40e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f410:	6879      	ldr	r1, [r7, #4]
 800f412:	4828      	ldr	r0, [pc, #160]	; (800f4b4 <tcp_abandon+0x174>)
 800f414:	f000 ff7a 	bl	801030c <tcp_pcb_remove>
 800f418:	4b27      	ldr	r3, [pc, #156]	; (800f4b8 <tcp_abandon+0x178>)
 800f41a:	2201      	movs	r2, #1
 800f41c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f422:	2b00      	cmp	r3, #0
 800f424:	d004      	beq.n	800f430 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f42a:	4618      	mov	r0, r3
 800f42c:	f000 fd1c 	bl	800fe68 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f434:	2b00      	cmp	r3, #0
 800f436:	d004      	beq.n	800f442 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f43c:	4618      	mov	r0, r3
 800f43e:	f000 fd13 	bl	800fe68 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f446:	2b00      	cmp	r3, #0
 800f448:	d004      	beq.n	800f454 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f44e:	4618      	mov	r0, r3
 800f450:	f000 fd0a 	bl	800fe68 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f456:	2b00      	cmp	r3, #0
 800f458:	d00e      	beq.n	800f478 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f45a:	6879      	ldr	r1, [r7, #4]
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	3304      	adds	r3, #4
 800f460:	687a      	ldr	r2, [r7, #4]
 800f462:	8b12      	ldrh	r2, [r2, #24]
 800f464:	9202      	str	r2, [sp, #8]
 800f466:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f468:	9201      	str	r2, [sp, #4]
 800f46a:	9300      	str	r3, [sp, #0]
 800f46c:	460b      	mov	r3, r1
 800f46e:	697a      	ldr	r2, [r7, #20]
 800f470:	69b9      	ldr	r1, [r7, #24]
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	f004 fcc2 	bl	8013dfc <tcp_rst>
    }
    last_state = pcb->state;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	7d1b      	ldrb	r3, [r3, #20]
 800f47c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f7ff fd34 	bl	800eeec <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f484:	693b      	ldr	r3, [r7, #16]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d004      	beq.n	800f494 <tcp_abandon+0x154>
 800f48a:	693b      	ldr	r3, [r7, #16]
 800f48c:	f06f 010c 	mvn.w	r1, #12
 800f490:	68f8      	ldr	r0, [r7, #12]
 800f492:	4798      	blx	r3
  }
}
 800f494:	3728      	adds	r7, #40	; 0x28
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}
 800f49a:	bf00      	nop
 800f49c:	08018f24 	.word	0x08018f24
 800f4a0:	08019068 	.word	0x08019068
 800f4a4:	08018f68 	.word	0x08018f68
 800f4a8:	08019084 	.word	0x08019084
 800f4ac:	20011030 	.word	0x20011030
 800f4b0:	20011024 	.word	0x20011024
 800f4b4:	2001102c 	.word	0x2001102c
 800f4b8:	20011034 	.word	0x20011034

0800f4bc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b082      	sub	sp, #8
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f4c4:	2101      	movs	r1, #1
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	f7ff ff3a 	bl	800f340 <tcp_abandon>
}
 800f4cc:	bf00      	nop
 800f4ce:	3708      	adds	r7, #8
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}

0800f4d4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b084      	sub	sp, #16
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d106      	bne.n	800f4f0 <tcp_update_rcv_ann_wnd+0x1c>
 800f4e2:	4b25      	ldr	r3, [pc, #148]	; (800f578 <tcp_update_rcv_ann_wnd+0xa4>)
 800f4e4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f4e8:	4924      	ldr	r1, [pc, #144]	; (800f57c <tcp_update_rcv_ann_wnd+0xa8>)
 800f4ea:	4825      	ldr	r0, [pc, #148]	; (800f580 <tcp_update_rcv_ann_wnd+0xac>)
 800f4ec:	f007 fd7e 	bl	8016fec <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4f4:	687a      	ldr	r2, [r7, #4]
 800f4f6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f4f8:	4413      	add	r3, r2
 800f4fa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f500:	687a      	ldr	r2, [r7, #4]
 800f502:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f504:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f508:	bf28      	it	cs
 800f50a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f50e:	b292      	uxth	r2, r2
 800f510:	4413      	add	r3, r2
 800f512:	68fa      	ldr	r2, [r7, #12]
 800f514:	1ad3      	subs	r3, r2, r3
 800f516:	2b00      	cmp	r3, #0
 800f518:	db08      	blt.n	800f52c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f526:	68fa      	ldr	r2, [r7, #12]
 800f528:	1ad3      	subs	r3, r2, r3
 800f52a:	e020      	b.n	800f56e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f534:	1ad3      	subs	r3, r2, r3
 800f536:	2b00      	cmp	r3, #0
 800f538:	dd03      	ble.n	800f542 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2200      	movs	r2, #0
 800f53e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f540:	e014      	b.n	800f56c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f54a:	1ad3      	subs	r3, r2, r3
 800f54c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f554:	d306      	bcc.n	800f564 <tcp_update_rcv_ann_wnd+0x90>
 800f556:	4b08      	ldr	r3, [pc, #32]	; (800f578 <tcp_update_rcv_ann_wnd+0xa4>)
 800f558:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f55c:	4909      	ldr	r1, [pc, #36]	; (800f584 <tcp_update_rcv_ann_wnd+0xb0>)
 800f55e:	4808      	ldr	r0, [pc, #32]	; (800f580 <tcp_update_rcv_ann_wnd+0xac>)
 800f560:	f007 fd44 	bl	8016fec <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	b29a      	uxth	r2, r3
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f56c:	2300      	movs	r3, #0
  }
}
 800f56e:	4618      	mov	r0, r3
 800f570:	3710      	adds	r7, #16
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}
 800f576:	bf00      	nop
 800f578:	08018f24 	.word	0x08018f24
 800f57c:	08019180 	.word	0x08019180
 800f580:	08018f68 	.word	0x08018f68
 800f584:	080191a4 	.word	0x080191a4

0800f588 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b084      	sub	sp, #16
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	460b      	mov	r3, r1
 800f592:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d107      	bne.n	800f5aa <tcp_recved+0x22>
 800f59a:	4b1f      	ldr	r3, [pc, #124]	; (800f618 <tcp_recved+0x90>)
 800f59c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f5a0:	491e      	ldr	r1, [pc, #120]	; (800f61c <tcp_recved+0x94>)
 800f5a2:	481f      	ldr	r0, [pc, #124]	; (800f620 <tcp_recved+0x98>)
 800f5a4:	f007 fd22 	bl	8016fec <iprintf>
 800f5a8:	e032      	b.n	800f610 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	7d1b      	ldrb	r3, [r3, #20]
 800f5ae:	2b01      	cmp	r3, #1
 800f5b0:	d106      	bne.n	800f5c0 <tcp_recved+0x38>
 800f5b2:	4b19      	ldr	r3, [pc, #100]	; (800f618 <tcp_recved+0x90>)
 800f5b4:	f240 32d2 	movw	r2, #978	; 0x3d2
 800f5b8:	491a      	ldr	r1, [pc, #104]	; (800f624 <tcp_recved+0x9c>)
 800f5ba:	4819      	ldr	r0, [pc, #100]	; (800f620 <tcp_recved+0x98>)
 800f5bc:	f007 fd16 	bl	8016fec <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f5c4:	887b      	ldrh	r3, [r7, #2]
 800f5c6:	4413      	add	r3, r2
 800f5c8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f5ca:	89fb      	ldrh	r3, [r7, #14]
 800f5cc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f5d0:	d804      	bhi.n	800f5dc <tcp_recved+0x54>
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f5d6:	89fa      	ldrh	r2, [r7, #14]
 800f5d8:	429a      	cmp	r2, r3
 800f5da:	d204      	bcs.n	800f5e6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f5e2:	851a      	strh	r2, [r3, #40]	; 0x28
 800f5e4:	e002      	b.n	800f5ec <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	89fa      	ldrh	r2, [r7, #14]
 800f5ea:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f7ff ff71 	bl	800f4d4 <tcp_update_rcv_ann_wnd>
 800f5f2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f5fa:	d309      	bcc.n	800f610 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	8b5b      	ldrh	r3, [r3, #26]
 800f600:	f043 0302 	orr.w	r3, r3, #2
 800f604:	b29a      	uxth	r2, r3
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f60a:	6878      	ldr	r0, [r7, #4]
 800f60c:	f003 fe42 	bl	8013294 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f610:	3710      	adds	r7, #16
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
 800f616:	bf00      	nop
 800f618:	08018f24 	.word	0x08018f24
 800f61c:	080191c0 	.word	0x080191c0
 800f620:	08018f68 	.word	0x08018f68
 800f624:	080191d8 	.word	0x080191d8

0800f628 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f628:	b5b0      	push	{r4, r5, r7, lr}
 800f62a:	b090      	sub	sp, #64	; 0x40
 800f62c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f62e:	2300      	movs	r3, #0
 800f630:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f634:	4b94      	ldr	r3, [pc, #592]	; (800f888 <tcp_slowtmr+0x260>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	3301      	adds	r3, #1
 800f63a:	4a93      	ldr	r2, [pc, #588]	; (800f888 <tcp_slowtmr+0x260>)
 800f63c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f63e:	4b93      	ldr	r3, [pc, #588]	; (800f88c <tcp_slowtmr+0x264>)
 800f640:	781b      	ldrb	r3, [r3, #0]
 800f642:	3301      	adds	r3, #1
 800f644:	b2da      	uxtb	r2, r3
 800f646:	4b91      	ldr	r3, [pc, #580]	; (800f88c <tcp_slowtmr+0x264>)
 800f648:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f64a:	2300      	movs	r3, #0
 800f64c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f64e:	4b90      	ldr	r3, [pc, #576]	; (800f890 <tcp_slowtmr+0x268>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f654:	e29d      	b.n	800fb92 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f658:	7d1b      	ldrb	r3, [r3, #20]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d106      	bne.n	800f66c <tcp_slowtmr+0x44>
 800f65e:	4b8d      	ldr	r3, [pc, #564]	; (800f894 <tcp_slowtmr+0x26c>)
 800f660:	f240 42be 	movw	r2, #1214	; 0x4be
 800f664:	498c      	ldr	r1, [pc, #560]	; (800f898 <tcp_slowtmr+0x270>)
 800f666:	488d      	ldr	r0, [pc, #564]	; (800f89c <tcp_slowtmr+0x274>)
 800f668:	f007 fcc0 	bl	8016fec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f66e:	7d1b      	ldrb	r3, [r3, #20]
 800f670:	2b01      	cmp	r3, #1
 800f672:	d106      	bne.n	800f682 <tcp_slowtmr+0x5a>
 800f674:	4b87      	ldr	r3, [pc, #540]	; (800f894 <tcp_slowtmr+0x26c>)
 800f676:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f67a:	4989      	ldr	r1, [pc, #548]	; (800f8a0 <tcp_slowtmr+0x278>)
 800f67c:	4887      	ldr	r0, [pc, #540]	; (800f89c <tcp_slowtmr+0x274>)
 800f67e:	f007 fcb5 	bl	8016fec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f684:	7d1b      	ldrb	r3, [r3, #20]
 800f686:	2b0a      	cmp	r3, #10
 800f688:	d106      	bne.n	800f698 <tcp_slowtmr+0x70>
 800f68a:	4b82      	ldr	r3, [pc, #520]	; (800f894 <tcp_slowtmr+0x26c>)
 800f68c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f690:	4984      	ldr	r1, [pc, #528]	; (800f8a4 <tcp_slowtmr+0x27c>)
 800f692:	4882      	ldr	r0, [pc, #520]	; (800f89c <tcp_slowtmr+0x274>)
 800f694:	f007 fcaa 	bl	8016fec <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f69a:	7f9a      	ldrb	r2, [r3, #30]
 800f69c:	4b7b      	ldr	r3, [pc, #492]	; (800f88c <tcp_slowtmr+0x264>)
 800f69e:	781b      	ldrb	r3, [r3, #0]
 800f6a0:	429a      	cmp	r2, r3
 800f6a2:	d105      	bne.n	800f6b0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6aa:	68db      	ldr	r3, [r3, #12]
 800f6ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f6ae:	e270      	b.n	800fb92 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f6b0:	4b76      	ldr	r3, [pc, #472]	; (800f88c <tcp_slowtmr+0x264>)
 800f6b2:	781a      	ldrb	r2, [r3, #0]
 800f6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6b6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6c6:	7d1b      	ldrb	r3, [r3, #20]
 800f6c8:	2b02      	cmp	r3, #2
 800f6ca:	d10a      	bne.n	800f6e2 <tcp_slowtmr+0xba>
 800f6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f6d2:	2b05      	cmp	r3, #5
 800f6d4:	d905      	bls.n	800f6e2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f6d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6da:	3301      	adds	r3, #1
 800f6dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f6e0:	e11e      	b.n	800f920 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f6e8:	2b0b      	cmp	r3, #11
 800f6ea:	d905      	bls.n	800f6f8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f6ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6f0:	3301      	adds	r3, #1
 800f6f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f6f6:	e113      	b.n	800f920 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d075      	beq.n	800f7ee <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f706:	2b00      	cmp	r3, #0
 800f708:	d006      	beq.n	800f718 <tcp_slowtmr+0xf0>
 800f70a:	4b62      	ldr	r3, [pc, #392]	; (800f894 <tcp_slowtmr+0x26c>)
 800f70c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f710:	4965      	ldr	r1, [pc, #404]	; (800f8a8 <tcp_slowtmr+0x280>)
 800f712:	4862      	ldr	r0, [pc, #392]	; (800f89c <tcp_slowtmr+0x274>)
 800f714:	f007 fc6a 	bl	8016fec <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f71a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d106      	bne.n	800f72e <tcp_slowtmr+0x106>
 800f720:	4b5c      	ldr	r3, [pc, #368]	; (800f894 <tcp_slowtmr+0x26c>)
 800f722:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f726:	4961      	ldr	r1, [pc, #388]	; (800f8ac <tcp_slowtmr+0x284>)
 800f728:	485c      	ldr	r0, [pc, #368]	; (800f89c <tcp_slowtmr+0x274>)
 800f72a:	f007 fc5f 	bl	8016fec <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f730:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f734:	2b0b      	cmp	r3, #11
 800f736:	d905      	bls.n	800f744 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f73c:	3301      	adds	r3, #1
 800f73e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f742:	e0ed      	b.n	800f920 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f746:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f74a:	3b01      	subs	r3, #1
 800f74c:	4a58      	ldr	r2, [pc, #352]	; (800f8b0 <tcp_slowtmr+0x288>)
 800f74e:	5cd3      	ldrb	r3, [r2, r3]
 800f750:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f754:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f758:	7c7a      	ldrb	r2, [r7, #17]
 800f75a:	429a      	cmp	r2, r3
 800f75c:	d907      	bls.n	800f76e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f760:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f764:	3301      	adds	r3, #1
 800f766:	b2da      	uxtb	r2, r3
 800f768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f76a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f770:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f774:	7c7a      	ldrb	r2, [r7, #17]
 800f776:	429a      	cmp	r2, r3
 800f778:	f200 80d2 	bhi.w	800f920 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f77c:	2301      	movs	r3, #1
 800f77e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f782:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f786:	2b00      	cmp	r3, #0
 800f788:	d108      	bne.n	800f79c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f78a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f78c:	f004 fc2a 	bl	8013fe4 <tcp_zero_window_probe>
 800f790:	4603      	mov	r3, r0
 800f792:	2b00      	cmp	r3, #0
 800f794:	d014      	beq.n	800f7c0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f796:	2300      	movs	r3, #0
 800f798:	623b      	str	r3, [r7, #32]
 800f79a:	e011      	b.n	800f7c0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f79e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f7a2:	4619      	mov	r1, r3
 800f7a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f7a6:	f003 faef 	bl	8012d88 <tcp_split_unsent_seg>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d107      	bne.n	800f7c0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f7b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f7b2:	f003 fd6f 	bl	8013294 <tcp_output>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d101      	bne.n	800f7c0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f7c0:	6a3b      	ldr	r3, [r7, #32]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	f000 80ac 	beq.w	800f920 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f7d6:	2b06      	cmp	r3, #6
 800f7d8:	f200 80a2 	bhi.w	800f920 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	b2da      	uxtb	r2, r3
 800f7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7e8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f7ec:	e098      	b.n	800f920 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	db0f      	blt.n	800f818 <tcp_slowtmr+0x1f0>
 800f7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7fa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f7fe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f802:	4293      	cmp	r3, r2
 800f804:	d008      	beq.n	800f818 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f808:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f80c:	b29b      	uxth	r3, r3
 800f80e:	3301      	adds	r3, #1
 800f810:	b29b      	uxth	r3, r3
 800f812:	b21a      	sxth	r2, r3
 800f814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f816:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f81a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f820:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f824:	429a      	cmp	r2, r3
 800f826:	db7b      	blt.n	800f920 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f828:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f82a:	f004 f825 	bl	8013878 <tcp_rexmit_rto_prepare>
 800f82e:	4603      	mov	r3, r0
 800f830:	2b00      	cmp	r3, #0
 800f832:	d007      	beq.n	800f844 <tcp_slowtmr+0x21c>
 800f834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d171      	bne.n	800f920 <tcp_slowtmr+0x2f8>
 800f83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f83e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f840:	2b00      	cmp	r3, #0
 800f842:	d06d      	beq.n	800f920 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f846:	7d1b      	ldrb	r3, [r3, #20]
 800f848:	2b02      	cmp	r3, #2
 800f84a:	d03a      	beq.n	800f8c2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f84e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f852:	2b0c      	cmp	r3, #12
 800f854:	bf28      	it	cs
 800f856:	230c      	movcs	r3, #12
 800f858:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f85c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f860:	10db      	asrs	r3, r3, #3
 800f862:	b21b      	sxth	r3, r3
 800f864:	461a      	mov	r2, r3
 800f866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f868:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f86c:	4413      	add	r3, r2
 800f86e:	7efa      	ldrb	r2, [r7, #27]
 800f870:	4910      	ldr	r1, [pc, #64]	; (800f8b4 <tcp_slowtmr+0x28c>)
 800f872:	5c8a      	ldrb	r2, [r1, r2]
 800f874:	4093      	lsls	r3, r2
 800f876:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f87e:	4293      	cmp	r3, r2
 800f880:	dc1a      	bgt.n	800f8b8 <tcp_slowtmr+0x290>
 800f882:	697b      	ldr	r3, [r7, #20]
 800f884:	b21a      	sxth	r2, r3
 800f886:	e019      	b.n	800f8bc <tcp_slowtmr+0x294>
 800f888:	20011020 	.word	0x20011020
 800f88c:	20011036 	.word	0x20011036
 800f890:	2001102c 	.word	0x2001102c
 800f894:	08018f24 	.word	0x08018f24
 800f898:	08019268 	.word	0x08019268
 800f89c:	08018f68 	.word	0x08018f68
 800f8a0:	08019294 	.word	0x08019294
 800f8a4:	080192c0 	.word	0x080192c0
 800f8a8:	080192f0 	.word	0x080192f0
 800f8ac:	08019324 	.word	0x08019324
 800f8b0:	0801afb0 	.word	0x0801afb0
 800f8b4:	0801afa0 	.word	0x0801afa0
 800f8b8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f8d4:	4293      	cmp	r3, r2
 800f8d6:	bf28      	it	cs
 800f8d8:	4613      	movcs	r3, r2
 800f8da:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f8dc:	8a7b      	ldrh	r3, [r7, #18]
 800f8de:	085b      	lsrs	r3, r3, #1
 800f8e0:	b29a      	uxth	r2, r3
 800f8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8f2:	005b      	lsls	r3, r3, #1
 800f8f4:	b29b      	uxth	r3, r3
 800f8f6:	429a      	cmp	r2, r3
 800f8f8:	d206      	bcs.n	800f908 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8fe:	005b      	lsls	r3, r3, #1
 800f900:	b29a      	uxth	r2, r3
 800f902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f904:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f90a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f90e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f914:	2200      	movs	r2, #0
 800f916:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f91a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f91c:	f004 f81c 	bl	8013958 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f922:	7d1b      	ldrb	r3, [r3, #20]
 800f924:	2b06      	cmp	r3, #6
 800f926:	d111      	bne.n	800f94c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f92a:	8b5b      	ldrh	r3, [r3, #26]
 800f92c:	f003 0310 	and.w	r3, r3, #16
 800f930:	2b00      	cmp	r3, #0
 800f932:	d00b      	beq.n	800f94c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f934:	4b9c      	ldr	r3, [pc, #624]	; (800fba8 <tcp_slowtmr+0x580>)
 800f936:	681a      	ldr	r2, [r3, #0]
 800f938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f93a:	6a1b      	ldr	r3, [r3, #32]
 800f93c:	1ad3      	subs	r3, r2, r3
 800f93e:	2b28      	cmp	r3, #40	; 0x28
 800f940:	d904      	bls.n	800f94c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f942:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f946:	3301      	adds	r3, #1
 800f948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f94e:	7a5b      	ldrb	r3, [r3, #9]
 800f950:	f003 0308 	and.w	r3, r3, #8
 800f954:	2b00      	cmp	r3, #0
 800f956:	d04a      	beq.n	800f9ee <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800f958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f95a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f95c:	2b04      	cmp	r3, #4
 800f95e:	d003      	beq.n	800f968 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f962:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f964:	2b07      	cmp	r3, #7
 800f966:	d142      	bne.n	800f9ee <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f968:	4b8f      	ldr	r3, [pc, #572]	; (800fba8 <tcp_slowtmr+0x580>)
 800f96a:	681a      	ldr	r2, [r3, #0]
 800f96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f96e:	6a1b      	ldr	r3, [r3, #32]
 800f970:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f974:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f978:	4b8c      	ldr	r3, [pc, #560]	; (800fbac <tcp_slowtmr+0x584>)
 800f97a:	440b      	add	r3, r1
 800f97c:	498c      	ldr	r1, [pc, #560]	; (800fbb0 <tcp_slowtmr+0x588>)
 800f97e:	fba1 1303 	umull	r1, r3, r1, r3
 800f982:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f984:	429a      	cmp	r2, r3
 800f986:	d90a      	bls.n	800f99e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f98c:	3301      	adds	r3, #1
 800f98e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f992:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f996:	3301      	adds	r3, #1
 800f998:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f99c:	e027      	b.n	800f9ee <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f99e:	4b82      	ldr	r3, [pc, #520]	; (800fba8 <tcp_slowtmr+0x580>)
 800f9a0:	681a      	ldr	r2, [r3, #0]
 800f9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a4:	6a1b      	ldr	r3, [r3, #32]
 800f9a6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9aa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	4b7f      	ldr	r3, [pc, #508]	; (800fbb4 <tcp_slowtmr+0x58c>)
 800f9b8:	fb00 f303 	mul.w	r3, r0, r3
 800f9bc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f9be:	497c      	ldr	r1, [pc, #496]	; (800fbb0 <tcp_slowtmr+0x588>)
 800f9c0:	fba1 1303 	umull	r1, r3, r1, r3
 800f9c4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d911      	bls.n	800f9ee <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800f9ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9cc:	f004 faca 	bl	8013f64 <tcp_keepalive>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f9d6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d107      	bne.n	800f9ee <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800f9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9e0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f9e4:	3301      	adds	r3, #1
 800f9e6:	b2da      	uxtb	r2, r3
 800f9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ea:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d011      	beq.n	800fa1a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f9f6:	4b6c      	ldr	r3, [pc, #432]	; (800fba8 <tcp_slowtmr+0x580>)
 800f9f8:	681a      	ldr	r2, [r3, #0]
 800f9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9fc:	6a1b      	ldr	r3, [r3, #32]
 800f9fe:	1ad2      	subs	r2, r2, r3
 800fa00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa02:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fa06:	4619      	mov	r1, r3
 800fa08:	460b      	mov	r3, r1
 800fa0a:	005b      	lsls	r3, r3, #1
 800fa0c:	440b      	add	r3, r1
 800fa0e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800fa10:	429a      	cmp	r2, r3
 800fa12:	d302      	bcc.n	800fa1a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800fa14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa16:	f000 fddd 	bl	80105d4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800fa1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa1c:	7d1b      	ldrb	r3, [r3, #20]
 800fa1e:	2b03      	cmp	r3, #3
 800fa20:	d10b      	bne.n	800fa3a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fa22:	4b61      	ldr	r3, [pc, #388]	; (800fba8 <tcp_slowtmr+0x580>)
 800fa24:	681a      	ldr	r2, [r3, #0]
 800fa26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa28:	6a1b      	ldr	r3, [r3, #32]
 800fa2a:	1ad3      	subs	r3, r2, r3
 800fa2c:	2b28      	cmp	r3, #40	; 0x28
 800fa2e:	d904      	bls.n	800fa3a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800fa30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa34:	3301      	adds	r3, #1
 800fa36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800fa3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa3c:	7d1b      	ldrb	r3, [r3, #20]
 800fa3e:	2b09      	cmp	r3, #9
 800fa40:	d10b      	bne.n	800fa5a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fa42:	4b59      	ldr	r3, [pc, #356]	; (800fba8 <tcp_slowtmr+0x580>)
 800fa44:	681a      	ldr	r2, [r3, #0]
 800fa46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa48:	6a1b      	ldr	r3, [r3, #32]
 800fa4a:	1ad3      	subs	r3, r2, r3
 800fa4c:	2bf0      	cmp	r3, #240	; 0xf0
 800fa4e:	d904      	bls.n	800fa5a <tcp_slowtmr+0x432>
        ++pcb_remove;
 800fa50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa54:	3301      	adds	r3, #1
 800fa56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fa5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d060      	beq.n	800fb24 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800fa62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa68:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800fa6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa6c:	f000 fbfe 	bl	801026c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800fa70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d010      	beq.n	800fa98 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fa76:	4b50      	ldr	r3, [pc, #320]	; (800fbb8 <tcp_slowtmr+0x590>)
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa7c:	429a      	cmp	r2, r3
 800fa7e:	d106      	bne.n	800fa8e <tcp_slowtmr+0x466>
 800fa80:	4b4e      	ldr	r3, [pc, #312]	; (800fbbc <tcp_slowtmr+0x594>)
 800fa82:	f240 526d 	movw	r2, #1389	; 0x56d
 800fa86:	494e      	ldr	r1, [pc, #312]	; (800fbc0 <tcp_slowtmr+0x598>)
 800fa88:	484e      	ldr	r0, [pc, #312]	; (800fbc4 <tcp_slowtmr+0x59c>)
 800fa8a:	f007 faaf 	bl	8016fec <iprintf>
        prev->next = pcb->next;
 800fa8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa90:	68da      	ldr	r2, [r3, #12]
 800fa92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa94:	60da      	str	r2, [r3, #12]
 800fa96:	e00f      	b.n	800fab8 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800fa98:	4b47      	ldr	r3, [pc, #284]	; (800fbb8 <tcp_slowtmr+0x590>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	d006      	beq.n	800fab0 <tcp_slowtmr+0x488>
 800faa2:	4b46      	ldr	r3, [pc, #280]	; (800fbbc <tcp_slowtmr+0x594>)
 800faa4:	f240 5271 	movw	r2, #1393	; 0x571
 800faa8:	4947      	ldr	r1, [pc, #284]	; (800fbc8 <tcp_slowtmr+0x5a0>)
 800faaa:	4846      	ldr	r0, [pc, #280]	; (800fbc4 <tcp_slowtmr+0x59c>)
 800faac:	f007 fa9e 	bl	8016fec <iprintf>
        tcp_active_pcbs = pcb->next;
 800fab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fab2:	68db      	ldr	r3, [r3, #12]
 800fab4:	4a40      	ldr	r2, [pc, #256]	; (800fbb8 <tcp_slowtmr+0x590>)
 800fab6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800fab8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d013      	beq.n	800fae8 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fac8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800faca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800facc:	3304      	adds	r3, #4
 800face:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fad0:	8ad2      	ldrh	r2, [r2, #22]
 800fad2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fad4:	8b09      	ldrh	r1, [r1, #24]
 800fad6:	9102      	str	r1, [sp, #8]
 800fad8:	9201      	str	r2, [sp, #4]
 800fada:	9300      	str	r3, [sp, #0]
 800fadc:	462b      	mov	r3, r5
 800fade:	4622      	mov	r2, r4
 800fae0:	4601      	mov	r1, r0
 800fae2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fae4:	f004 f98a 	bl	8013dfc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800fae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faea:	691b      	ldr	r3, [r3, #16]
 800faec:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800faee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf0:	7d1b      	ldrb	r3, [r3, #20]
 800faf2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800faf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800faf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fafa:	68db      	ldr	r3, [r3, #12]
 800fafc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fafe:	6838      	ldr	r0, [r7, #0]
 800fb00:	f7ff f9f4 	bl	800eeec <tcp_free>

      tcp_active_pcbs_changed = 0;
 800fb04:	4b31      	ldr	r3, [pc, #196]	; (800fbcc <tcp_slowtmr+0x5a4>)
 800fb06:	2200      	movs	r2, #0
 800fb08:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d004      	beq.n	800fb1a <tcp_slowtmr+0x4f2>
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	f06f 010c 	mvn.w	r1, #12
 800fb16:	68b8      	ldr	r0, [r7, #8]
 800fb18:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800fb1a:	4b2c      	ldr	r3, [pc, #176]	; (800fbcc <tcp_slowtmr+0x5a4>)
 800fb1c:	781b      	ldrb	r3, [r3, #0]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d037      	beq.n	800fb92 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800fb22:	e592      	b.n	800f64a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800fb24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb26:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb2a:	68db      	ldr	r3, [r3, #12]
 800fb2c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800fb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb30:	7f1b      	ldrb	r3, [r3, #28]
 800fb32:	3301      	adds	r3, #1
 800fb34:	b2da      	uxtb	r2, r3
 800fb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb38:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800fb3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb3c:	7f1a      	ldrb	r2, [r3, #28]
 800fb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb40:	7f5b      	ldrb	r3, [r3, #29]
 800fb42:	429a      	cmp	r2, r3
 800fb44:	d325      	bcc.n	800fb92 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800fb46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb48:	2200      	movs	r2, #0
 800fb4a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800fb4c:	4b1f      	ldr	r3, [pc, #124]	; (800fbcc <tcp_slowtmr+0x5a4>)
 800fb4e:	2200      	movs	r2, #0
 800fb50:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800fb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d00b      	beq.n	800fb74 <tcp_slowtmr+0x54c>
 800fb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb64:	6912      	ldr	r2, [r2, #16]
 800fb66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fb68:	4610      	mov	r0, r2
 800fb6a:	4798      	blx	r3
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800fb72:	e002      	b.n	800fb7a <tcp_slowtmr+0x552>
 800fb74:	2300      	movs	r3, #0
 800fb76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800fb7a:	4b14      	ldr	r3, [pc, #80]	; (800fbcc <tcp_slowtmr+0x5a4>)
 800fb7c:	781b      	ldrb	r3, [r3, #0]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d000      	beq.n	800fb84 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800fb82:	e562      	b.n	800f64a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800fb84:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d102      	bne.n	800fb92 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800fb8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb8e:	f003 fb81 	bl	8013294 <tcp_output>
  while (pcb != NULL) {
 800fb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	f47f ad5e 	bne.w	800f656 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800fb9e:	4b0c      	ldr	r3, [pc, #48]	; (800fbd0 <tcp_slowtmr+0x5a8>)
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fba4:	e069      	b.n	800fc7a <tcp_slowtmr+0x652>
 800fba6:	bf00      	nop
 800fba8:	20011020 	.word	0x20011020
 800fbac:	000a4cb8 	.word	0x000a4cb8
 800fbb0:	10624dd3 	.word	0x10624dd3
 800fbb4:	000124f8 	.word	0x000124f8
 800fbb8:	2001102c 	.word	0x2001102c
 800fbbc:	08018f24 	.word	0x08018f24
 800fbc0:	0801935c 	.word	0x0801935c
 800fbc4:	08018f68 	.word	0x08018f68
 800fbc8:	08019388 	.word	0x08019388
 800fbcc:	20011034 	.word	0x20011034
 800fbd0:	20011030 	.word	0x20011030
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd6:	7d1b      	ldrb	r3, [r3, #20]
 800fbd8:	2b0a      	cmp	r3, #10
 800fbda:	d006      	beq.n	800fbea <tcp_slowtmr+0x5c2>
 800fbdc:	4b2b      	ldr	r3, [pc, #172]	; (800fc8c <tcp_slowtmr+0x664>)
 800fbde:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800fbe2:	492b      	ldr	r1, [pc, #172]	; (800fc90 <tcp_slowtmr+0x668>)
 800fbe4:	482b      	ldr	r0, [pc, #172]	; (800fc94 <tcp_slowtmr+0x66c>)
 800fbe6:	f007 fa01 	bl	8016fec <iprintf>
    pcb_remove = 0;
 800fbea:	2300      	movs	r3, #0
 800fbec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fbf0:	4b29      	ldr	r3, [pc, #164]	; (800fc98 <tcp_slowtmr+0x670>)
 800fbf2:	681a      	ldr	r2, [r3, #0]
 800fbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf6:	6a1b      	ldr	r3, [r3, #32]
 800fbf8:	1ad3      	subs	r3, r2, r3
 800fbfa:	2bf0      	cmp	r3, #240	; 0xf0
 800fbfc:	d904      	bls.n	800fc08 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800fbfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc02:	3301      	adds	r3, #1
 800fc04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fc08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d02f      	beq.n	800fc70 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800fc10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc12:	f000 fb2b 	bl	801026c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800fc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d010      	beq.n	800fc3e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800fc1c:	4b1f      	ldr	r3, [pc, #124]	; (800fc9c <tcp_slowtmr+0x674>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc22:	429a      	cmp	r2, r3
 800fc24:	d106      	bne.n	800fc34 <tcp_slowtmr+0x60c>
 800fc26:	4b19      	ldr	r3, [pc, #100]	; (800fc8c <tcp_slowtmr+0x664>)
 800fc28:	f240 52af 	movw	r2, #1455	; 0x5af
 800fc2c:	491c      	ldr	r1, [pc, #112]	; (800fca0 <tcp_slowtmr+0x678>)
 800fc2e:	4819      	ldr	r0, [pc, #100]	; (800fc94 <tcp_slowtmr+0x66c>)
 800fc30:	f007 f9dc 	bl	8016fec <iprintf>
        prev->next = pcb->next;
 800fc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc36:	68da      	ldr	r2, [r3, #12]
 800fc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc3a:	60da      	str	r2, [r3, #12]
 800fc3c:	e00f      	b.n	800fc5e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800fc3e:	4b17      	ldr	r3, [pc, #92]	; (800fc9c <tcp_slowtmr+0x674>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc44:	429a      	cmp	r2, r3
 800fc46:	d006      	beq.n	800fc56 <tcp_slowtmr+0x62e>
 800fc48:	4b10      	ldr	r3, [pc, #64]	; (800fc8c <tcp_slowtmr+0x664>)
 800fc4a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800fc4e:	4915      	ldr	r1, [pc, #84]	; (800fca4 <tcp_slowtmr+0x67c>)
 800fc50:	4810      	ldr	r0, [pc, #64]	; (800fc94 <tcp_slowtmr+0x66c>)
 800fc52:	f007 f9cb 	bl	8016fec <iprintf>
        tcp_tw_pcbs = pcb->next;
 800fc56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc58:	68db      	ldr	r3, [r3, #12]
 800fc5a:	4a10      	ldr	r2, [pc, #64]	; (800fc9c <tcp_slowtmr+0x674>)
 800fc5c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800fc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc60:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800fc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc64:	68db      	ldr	r3, [r3, #12]
 800fc66:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fc68:	69f8      	ldr	r0, [r7, #28]
 800fc6a:	f7ff f93f 	bl	800eeec <tcp_free>
 800fc6e:	e004      	b.n	800fc7a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800fc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc72:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc76:	68db      	ldr	r3, [r3, #12]
 800fc78:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fc7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d1a9      	bne.n	800fbd4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800fc80:	bf00      	nop
 800fc82:	bf00      	nop
 800fc84:	3730      	adds	r7, #48	; 0x30
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bdb0      	pop	{r4, r5, r7, pc}
 800fc8a:	bf00      	nop
 800fc8c:	08018f24 	.word	0x08018f24
 800fc90:	080193b4 	.word	0x080193b4
 800fc94:	08018f68 	.word	0x08018f68
 800fc98:	20011020 	.word	0x20011020
 800fc9c:	20011030 	.word	0x20011030
 800fca0:	080193e4 	.word	0x080193e4
 800fca4:	0801940c 	.word	0x0801940c

0800fca8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b082      	sub	sp, #8
 800fcac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800fcae:	4b2d      	ldr	r3, [pc, #180]	; (800fd64 <tcp_fasttmr+0xbc>)
 800fcb0:	781b      	ldrb	r3, [r3, #0]
 800fcb2:	3301      	adds	r3, #1
 800fcb4:	b2da      	uxtb	r2, r3
 800fcb6:	4b2b      	ldr	r3, [pc, #172]	; (800fd64 <tcp_fasttmr+0xbc>)
 800fcb8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800fcba:	4b2b      	ldr	r3, [pc, #172]	; (800fd68 <tcp_fasttmr+0xc0>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fcc0:	e048      	b.n	800fd54 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	7f9a      	ldrb	r2, [r3, #30]
 800fcc6:	4b27      	ldr	r3, [pc, #156]	; (800fd64 <tcp_fasttmr+0xbc>)
 800fcc8:	781b      	ldrb	r3, [r3, #0]
 800fcca:	429a      	cmp	r2, r3
 800fccc:	d03f      	beq.n	800fd4e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800fcce:	4b25      	ldr	r3, [pc, #148]	; (800fd64 <tcp_fasttmr+0xbc>)
 800fcd0:	781a      	ldrb	r2, [r3, #0]
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	8b5b      	ldrh	r3, [r3, #26]
 800fcda:	f003 0301 	and.w	r3, r3, #1
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d010      	beq.n	800fd04 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	8b5b      	ldrh	r3, [r3, #26]
 800fce6:	f043 0302 	orr.w	r3, r3, #2
 800fcea:	b29a      	uxth	r2, r3
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f003 facf 	bl	8013294 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	8b5b      	ldrh	r3, [r3, #26]
 800fcfa:	f023 0303 	bic.w	r3, r3, #3
 800fcfe:	b29a      	uxth	r2, r3
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	8b5b      	ldrh	r3, [r3, #26]
 800fd08:	f003 0308 	and.w	r3, r3, #8
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d009      	beq.n	800fd24 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	8b5b      	ldrh	r3, [r3, #26]
 800fd14:	f023 0308 	bic.w	r3, r3, #8
 800fd18:	b29a      	uxth	r2, r3
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800fd1e:	6878      	ldr	r0, [r7, #4]
 800fd20:	f7ff fa78 	bl	800f214 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	68db      	ldr	r3, [r3, #12]
 800fd28:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d00a      	beq.n	800fd48 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800fd32:	4b0e      	ldr	r3, [pc, #56]	; (800fd6c <tcp_fasttmr+0xc4>)
 800fd34:	2200      	movs	r2, #0
 800fd36:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f000 f819 	bl	800fd70 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800fd3e:	4b0b      	ldr	r3, [pc, #44]	; (800fd6c <tcp_fasttmr+0xc4>)
 800fd40:	781b      	ldrb	r3, [r3, #0]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d000      	beq.n	800fd48 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800fd46:	e7b8      	b.n	800fcba <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	607b      	str	r3, [r7, #4]
 800fd4c:	e002      	b.n	800fd54 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	68db      	ldr	r3, [r3, #12]
 800fd52:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d1b3      	bne.n	800fcc2 <tcp_fasttmr+0x1a>
    }
  }
}
 800fd5a:	bf00      	nop
 800fd5c:	bf00      	nop
 800fd5e:	3708      	adds	r7, #8
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}
 800fd64:	20011036 	.word	0x20011036
 800fd68:	2001102c 	.word	0x2001102c
 800fd6c:	20011034 	.word	0x20011034

0800fd70 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800fd70:	b590      	push	{r4, r7, lr}
 800fd72:	b085      	sub	sp, #20
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d109      	bne.n	800fd92 <tcp_process_refused_data+0x22>
 800fd7e:	4b37      	ldr	r3, [pc, #220]	; (800fe5c <tcp_process_refused_data+0xec>)
 800fd80:	f240 6209 	movw	r2, #1545	; 0x609
 800fd84:	4936      	ldr	r1, [pc, #216]	; (800fe60 <tcp_process_refused_data+0xf0>)
 800fd86:	4837      	ldr	r0, [pc, #220]	; (800fe64 <tcp_process_refused_data+0xf4>)
 800fd88:	f007 f930 	bl	8016fec <iprintf>
 800fd8c:	f06f 030f 	mvn.w	r3, #15
 800fd90:	e060      	b.n	800fe54 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd96:	7b5b      	ldrb	r3, [r3, #13]
 800fd98:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd9e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2200      	movs	r2, #0
 800fda4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d00b      	beq.n	800fdc8 <tcp_process_refused_data+0x58>
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6918      	ldr	r0, [r3, #16]
 800fdba:	2300      	movs	r3, #0
 800fdbc:	68ba      	ldr	r2, [r7, #8]
 800fdbe:	6879      	ldr	r1, [r7, #4]
 800fdc0:	47a0      	blx	r4
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	73fb      	strb	r3, [r7, #15]
 800fdc6:	e007      	b.n	800fdd8 <tcp_process_refused_data+0x68>
 800fdc8:	2300      	movs	r3, #0
 800fdca:	68ba      	ldr	r2, [r7, #8]
 800fdcc:	6879      	ldr	r1, [r7, #4]
 800fdce:	2000      	movs	r0, #0
 800fdd0:	f000 f8a4 	bl	800ff1c <tcp_recv_null>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800fdd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d12a      	bne.n	800fe36 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800fde0:	7bbb      	ldrb	r3, [r7, #14]
 800fde2:	f003 0320 	and.w	r3, r3, #32
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d033      	beq.n	800fe52 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fdee:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fdf2:	d005      	beq.n	800fe00 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fdf8:	3301      	adds	r3, #1
 800fdfa:	b29a      	uxth	r2, r3
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d00b      	beq.n	800fe22 <tcp_process_refused_data+0xb2>
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	6918      	ldr	r0, [r3, #16]
 800fe14:	2300      	movs	r3, #0
 800fe16:	2200      	movs	r2, #0
 800fe18:	6879      	ldr	r1, [r7, #4]
 800fe1a:	47a0      	blx	r4
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	73fb      	strb	r3, [r7, #15]
 800fe20:	e001      	b.n	800fe26 <tcp_process_refused_data+0xb6>
 800fe22:	2300      	movs	r3, #0
 800fe24:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800fe26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe2a:	f113 0f0d 	cmn.w	r3, #13
 800fe2e:	d110      	bne.n	800fe52 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800fe30:	f06f 030c 	mvn.w	r3, #12
 800fe34:	e00e      	b.n	800fe54 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800fe36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe3a:	f113 0f0d 	cmn.w	r3, #13
 800fe3e:	d102      	bne.n	800fe46 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800fe40:	f06f 030c 	mvn.w	r3, #12
 800fe44:	e006      	b.n	800fe54 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	68ba      	ldr	r2, [r7, #8]
 800fe4a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800fe4c:	f06f 0304 	mvn.w	r3, #4
 800fe50:	e000      	b.n	800fe54 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800fe52:	2300      	movs	r3, #0
}
 800fe54:	4618      	mov	r0, r3
 800fe56:	3714      	adds	r7, #20
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd90      	pop	{r4, r7, pc}
 800fe5c:	08018f24 	.word	0x08018f24
 800fe60:	08019434 	.word	0x08019434
 800fe64:	08018f68 	.word	0x08018f68

0800fe68 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b084      	sub	sp, #16
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800fe70:	e007      	b.n	800fe82 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f000 f80a 	bl	800fe92 <tcp_seg_free>
    seg = next;
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d1f4      	bne.n	800fe72 <tcp_segs_free+0xa>
  }
}
 800fe88:	bf00      	nop
 800fe8a:	bf00      	nop
 800fe8c:	3710      	adds	r7, #16
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	bd80      	pop	{r7, pc}

0800fe92 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800fe92:	b580      	push	{r7, lr}
 800fe94:	b082      	sub	sp, #8
 800fe96:	af00      	add	r7, sp, #0
 800fe98:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d00c      	beq.n	800feba <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	685b      	ldr	r3, [r3, #4]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d004      	beq.n	800feb2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	685b      	ldr	r3, [r3, #4]
 800feac:	4618      	mov	r0, r3
 800feae:	f7fe fd71 	bl	800e994 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800feb2:	6879      	ldr	r1, [r7, #4]
 800feb4:	2003      	movs	r0, #3
 800feb6:	f7fd fec9 	bl	800dc4c <memp_free>
  }
}
 800feba:	bf00      	nop
 800febc:	3708      	adds	r7, #8
 800febe:	46bd      	mov	sp, r7
 800fec0:	bd80      	pop	{r7, pc}
	...

0800fec4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b084      	sub	sp, #16
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d106      	bne.n	800fee0 <tcp_seg_copy+0x1c>
 800fed2:	4b0f      	ldr	r3, [pc, #60]	; (800ff10 <tcp_seg_copy+0x4c>)
 800fed4:	f240 6282 	movw	r2, #1666	; 0x682
 800fed8:	490e      	ldr	r1, [pc, #56]	; (800ff14 <tcp_seg_copy+0x50>)
 800feda:	480f      	ldr	r0, [pc, #60]	; (800ff18 <tcp_seg_copy+0x54>)
 800fedc:	f007 f886 	bl	8016fec <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800fee0:	2003      	movs	r0, #3
 800fee2:	f7fd fe3d 	bl	800db60 <memp_malloc>
 800fee6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d101      	bne.n	800fef2 <tcp_seg_copy+0x2e>
    return NULL;
 800feee:	2300      	movs	r3, #0
 800fef0:	e00a      	b.n	800ff08 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800fef2:	2210      	movs	r2, #16
 800fef4:	6879      	ldr	r1, [r7, #4]
 800fef6:	68f8      	ldr	r0, [r7, #12]
 800fef8:	f007 f862 	bl	8016fc0 <memcpy>
  pbuf_ref(cseg->p);
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	685b      	ldr	r3, [r3, #4]
 800ff00:	4618      	mov	r0, r3
 800ff02:	f7fe fded 	bl	800eae0 <pbuf_ref>
  return cseg;
 800ff06:	68fb      	ldr	r3, [r7, #12]
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	3710      	adds	r7, #16
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	bd80      	pop	{r7, pc}
 800ff10:	08018f24 	.word	0x08018f24
 800ff14:	08019478 	.word	0x08019478
 800ff18:	08018f68 	.word	0x08018f68

0800ff1c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b084      	sub	sp, #16
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	60f8      	str	r0, [r7, #12]
 800ff24:	60b9      	str	r1, [r7, #8]
 800ff26:	607a      	str	r2, [r7, #4]
 800ff28:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ff2a:	68bb      	ldr	r3, [r7, #8]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d109      	bne.n	800ff44 <tcp_recv_null+0x28>
 800ff30:	4b12      	ldr	r3, [pc, #72]	; (800ff7c <tcp_recv_null+0x60>)
 800ff32:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ff36:	4912      	ldr	r1, [pc, #72]	; (800ff80 <tcp_recv_null+0x64>)
 800ff38:	4812      	ldr	r0, [pc, #72]	; (800ff84 <tcp_recv_null+0x68>)
 800ff3a:	f007 f857 	bl	8016fec <iprintf>
 800ff3e:	f06f 030f 	mvn.w	r3, #15
 800ff42:	e016      	b.n	800ff72 <tcp_recv_null+0x56>

  if (p != NULL) {
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d009      	beq.n	800ff5e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	891b      	ldrh	r3, [r3, #8]
 800ff4e:	4619      	mov	r1, r3
 800ff50:	68b8      	ldr	r0, [r7, #8]
 800ff52:	f7ff fb19 	bl	800f588 <tcp_recved>
    pbuf_free(p);
 800ff56:	6878      	ldr	r0, [r7, #4]
 800ff58:	f7fe fd1c 	bl	800e994 <pbuf_free>
 800ff5c:	e008      	b.n	800ff70 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ff5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d104      	bne.n	800ff70 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ff66:	68b8      	ldr	r0, [r7, #8]
 800ff68:	f7ff f9be 	bl	800f2e8 <tcp_close>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	e000      	b.n	800ff72 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ff70:	2300      	movs	r3, #0
}
 800ff72:	4618      	mov	r0, r3
 800ff74:	3710      	adds	r7, #16
 800ff76:	46bd      	mov	sp, r7
 800ff78:	bd80      	pop	{r7, pc}
 800ff7a:	bf00      	nop
 800ff7c:	08018f24 	.word	0x08018f24
 800ff80:	08019494 	.word	0x08019494
 800ff84:	08018f68 	.word	0x08018f68

0800ff88 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b086      	sub	sp, #24
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	4603      	mov	r3, r0
 800ff90:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ff92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	db01      	blt.n	800ff9e <tcp_kill_prio+0x16>
 800ff9a:	79fb      	ldrb	r3, [r7, #7]
 800ff9c:	e000      	b.n	800ffa0 <tcp_kill_prio+0x18>
 800ff9e:	237f      	movs	r3, #127	; 0x7f
 800ffa0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ffa2:	7afb      	ldrb	r3, [r7, #11]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d034      	beq.n	8010012 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ffa8:	7afb      	ldrb	r3, [r7, #11]
 800ffaa:	3b01      	subs	r3, #1
 800ffac:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ffb6:	4b19      	ldr	r3, [pc, #100]	; (801001c <tcp_kill_prio+0x94>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	617b      	str	r3, [r7, #20]
 800ffbc:	e01f      	b.n	800fffe <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ffbe:	697b      	ldr	r3, [r7, #20]
 800ffc0:	7d5b      	ldrb	r3, [r3, #21]
 800ffc2:	7afa      	ldrb	r2, [r7, #11]
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	d80c      	bhi.n	800ffe2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ffcc:	7afa      	ldrb	r2, [r7, #11]
 800ffce:	429a      	cmp	r2, r3
 800ffd0:	d112      	bne.n	800fff8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ffd2:	4b13      	ldr	r3, [pc, #76]	; (8010020 <tcp_kill_prio+0x98>)
 800ffd4:	681a      	ldr	r2, [r3, #0]
 800ffd6:	697b      	ldr	r3, [r7, #20]
 800ffd8:	6a1b      	ldr	r3, [r3, #32]
 800ffda:	1ad3      	subs	r3, r2, r3
 800ffdc:	68fa      	ldr	r2, [r7, #12]
 800ffde:	429a      	cmp	r2, r3
 800ffe0:	d80a      	bhi.n	800fff8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ffe2:	4b0f      	ldr	r3, [pc, #60]	; (8010020 <tcp_kill_prio+0x98>)
 800ffe4:	681a      	ldr	r2, [r3, #0]
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	6a1b      	ldr	r3, [r3, #32]
 800ffea:	1ad3      	subs	r3, r2, r3
 800ffec:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800fff2:	697b      	ldr	r3, [r7, #20]
 800fff4:	7d5b      	ldrb	r3, [r3, #21]
 800fff6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fff8:	697b      	ldr	r3, [r7, #20]
 800fffa:	68db      	ldr	r3, [r3, #12]
 800fffc:	617b      	str	r3, [r7, #20]
 800fffe:	697b      	ldr	r3, [r7, #20]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d1dc      	bne.n	800ffbe <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010004:	693b      	ldr	r3, [r7, #16]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d004      	beq.n	8010014 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801000a:	6938      	ldr	r0, [r7, #16]
 801000c:	f7ff fa56 	bl	800f4bc <tcp_abort>
 8010010:	e000      	b.n	8010014 <tcp_kill_prio+0x8c>
    return;
 8010012:	bf00      	nop
  }
}
 8010014:	3718      	adds	r7, #24
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}
 801001a:	bf00      	nop
 801001c:	2001102c 	.word	0x2001102c
 8010020:	20011020 	.word	0x20011020

08010024 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b086      	sub	sp, #24
 8010028:	af00      	add	r7, sp, #0
 801002a:	4603      	mov	r3, r0
 801002c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801002e:	79fb      	ldrb	r3, [r7, #7]
 8010030:	2b08      	cmp	r3, #8
 8010032:	d009      	beq.n	8010048 <tcp_kill_state+0x24>
 8010034:	79fb      	ldrb	r3, [r7, #7]
 8010036:	2b09      	cmp	r3, #9
 8010038:	d006      	beq.n	8010048 <tcp_kill_state+0x24>
 801003a:	4b1a      	ldr	r3, [pc, #104]	; (80100a4 <tcp_kill_state+0x80>)
 801003c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010040:	4919      	ldr	r1, [pc, #100]	; (80100a8 <tcp_kill_state+0x84>)
 8010042:	481a      	ldr	r0, [pc, #104]	; (80100ac <tcp_kill_state+0x88>)
 8010044:	f006 ffd2 	bl	8016fec <iprintf>

  inactivity = 0;
 8010048:	2300      	movs	r3, #0
 801004a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801004c:	2300      	movs	r3, #0
 801004e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010050:	4b17      	ldr	r3, [pc, #92]	; (80100b0 <tcp_kill_state+0x8c>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	617b      	str	r3, [r7, #20]
 8010056:	e017      	b.n	8010088 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010058:	697b      	ldr	r3, [r7, #20]
 801005a:	7d1b      	ldrb	r3, [r3, #20]
 801005c:	79fa      	ldrb	r2, [r7, #7]
 801005e:	429a      	cmp	r2, r3
 8010060:	d10f      	bne.n	8010082 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010062:	4b14      	ldr	r3, [pc, #80]	; (80100b4 <tcp_kill_state+0x90>)
 8010064:	681a      	ldr	r2, [r3, #0]
 8010066:	697b      	ldr	r3, [r7, #20]
 8010068:	6a1b      	ldr	r3, [r3, #32]
 801006a:	1ad3      	subs	r3, r2, r3
 801006c:	68fa      	ldr	r2, [r7, #12]
 801006e:	429a      	cmp	r2, r3
 8010070:	d807      	bhi.n	8010082 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010072:	4b10      	ldr	r3, [pc, #64]	; (80100b4 <tcp_kill_state+0x90>)
 8010074:	681a      	ldr	r2, [r3, #0]
 8010076:	697b      	ldr	r3, [r7, #20]
 8010078:	6a1b      	ldr	r3, [r3, #32]
 801007a:	1ad3      	subs	r3, r2, r3
 801007c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010082:	697b      	ldr	r3, [r7, #20]
 8010084:	68db      	ldr	r3, [r3, #12]
 8010086:	617b      	str	r3, [r7, #20]
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d1e4      	bne.n	8010058 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801008e:	693b      	ldr	r3, [r7, #16]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d003      	beq.n	801009c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010094:	2100      	movs	r1, #0
 8010096:	6938      	ldr	r0, [r7, #16]
 8010098:	f7ff f952 	bl	800f340 <tcp_abandon>
  }
}
 801009c:	bf00      	nop
 801009e:	3718      	adds	r7, #24
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}
 80100a4:	08018f24 	.word	0x08018f24
 80100a8:	080194b0 	.word	0x080194b0
 80100ac:	08018f68 	.word	0x08018f68
 80100b0:	2001102c 	.word	0x2001102c
 80100b4:	20011020 	.word	0x20011020

080100b8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b084      	sub	sp, #16
 80100bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80100be:	2300      	movs	r3, #0
 80100c0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80100c2:	2300      	movs	r3, #0
 80100c4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80100c6:	4b12      	ldr	r3, [pc, #72]	; (8010110 <tcp_kill_timewait+0x58>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	60fb      	str	r3, [r7, #12]
 80100cc:	e012      	b.n	80100f4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80100ce:	4b11      	ldr	r3, [pc, #68]	; (8010114 <tcp_kill_timewait+0x5c>)
 80100d0:	681a      	ldr	r2, [r3, #0]
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	6a1b      	ldr	r3, [r3, #32]
 80100d6:	1ad3      	subs	r3, r2, r3
 80100d8:	687a      	ldr	r2, [r7, #4]
 80100da:	429a      	cmp	r2, r3
 80100dc:	d807      	bhi.n	80100ee <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80100de:	4b0d      	ldr	r3, [pc, #52]	; (8010114 <tcp_kill_timewait+0x5c>)
 80100e0:	681a      	ldr	r2, [r3, #0]
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	6a1b      	ldr	r3, [r3, #32]
 80100e6:	1ad3      	subs	r3, r2, r3
 80100e8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	68db      	ldr	r3, [r3, #12]
 80100f2:	60fb      	str	r3, [r7, #12]
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d1e9      	bne.n	80100ce <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d002      	beq.n	8010106 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010100:	68b8      	ldr	r0, [r7, #8]
 8010102:	f7ff f9db 	bl	800f4bc <tcp_abort>
  }
}
 8010106:	bf00      	nop
 8010108:	3710      	adds	r7, #16
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}
 801010e:	bf00      	nop
 8010110:	20011030 	.word	0x20011030
 8010114:	20011020 	.word	0x20011020

08010118 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b082      	sub	sp, #8
 801011c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801011e:	4b10      	ldr	r3, [pc, #64]	; (8010160 <tcp_handle_closepend+0x48>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010124:	e014      	b.n	8010150 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	68db      	ldr	r3, [r3, #12]
 801012a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	8b5b      	ldrh	r3, [r3, #26]
 8010130:	f003 0308 	and.w	r3, r3, #8
 8010134:	2b00      	cmp	r3, #0
 8010136:	d009      	beq.n	801014c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	8b5b      	ldrh	r3, [r3, #26]
 801013c:	f023 0308 	bic.w	r3, r3, #8
 8010140:	b29a      	uxth	r2, r3
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010146:	6878      	ldr	r0, [r7, #4]
 8010148:	f7ff f864 	bl	800f214 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d1e7      	bne.n	8010126 <tcp_handle_closepend+0xe>
  }
}
 8010156:	bf00      	nop
 8010158:	bf00      	nop
 801015a:	3708      	adds	r7, #8
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}
 8010160:	2001102c 	.word	0x2001102c

08010164 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b084      	sub	sp, #16
 8010168:	af00      	add	r7, sp, #0
 801016a:	4603      	mov	r3, r0
 801016c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801016e:	2001      	movs	r0, #1
 8010170:	f7fd fcf6 	bl	800db60 <memp_malloc>
 8010174:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d126      	bne.n	80101ca <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801017c:	f7ff ffcc 	bl	8010118 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010180:	f7ff ff9a 	bl	80100b8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010184:	2001      	movs	r0, #1
 8010186:	f7fd fceb 	bl	800db60 <memp_malloc>
 801018a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d11b      	bne.n	80101ca <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010192:	2009      	movs	r0, #9
 8010194:	f7ff ff46 	bl	8010024 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010198:	2001      	movs	r0, #1
 801019a:	f7fd fce1 	bl	800db60 <memp_malloc>
 801019e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d111      	bne.n	80101ca <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80101a6:	2008      	movs	r0, #8
 80101a8:	f7ff ff3c 	bl	8010024 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80101ac:	2001      	movs	r0, #1
 80101ae:	f7fd fcd7 	bl	800db60 <memp_malloc>
 80101b2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d107      	bne.n	80101ca <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80101ba:	79fb      	ldrb	r3, [r7, #7]
 80101bc:	4618      	mov	r0, r3
 80101be:	f7ff fee3 	bl	800ff88 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80101c2:	2001      	movs	r0, #1
 80101c4:	f7fd fccc 	bl	800db60 <memp_malloc>
 80101c8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d03f      	beq.n	8010250 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80101d0:	229c      	movs	r2, #156	; 0x9c
 80101d2:	2100      	movs	r1, #0
 80101d4:	68f8      	ldr	r0, [r7, #12]
 80101d6:	f006 ff01 	bl	8016fdc <memset>
    pcb->prio = prio;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	79fa      	ldrb	r2, [r7, #7]
 80101de:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80101e6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80101f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	22ff      	movs	r2, #255	; 0xff
 80101fe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010206:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	2206      	movs	r2, #6
 801020c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	2206      	movs	r2, #6
 8010214:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801021c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	2201      	movs	r2, #1
 8010222:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010226:	4b0d      	ldr	r3, [pc, #52]	; (801025c <tcp_alloc+0xf8>)
 8010228:	681a      	ldr	r2, [r3, #0]
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801022e:	4b0c      	ldr	r3, [pc, #48]	; (8010260 <tcp_alloc+0xfc>)
 8010230:	781a      	ldrb	r2, [r3, #0]
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801023c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	4a08      	ldr	r2, [pc, #32]	; (8010264 <tcp_alloc+0x100>)
 8010244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	4a07      	ldr	r2, [pc, #28]	; (8010268 <tcp_alloc+0x104>)
 801024c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010250:	68fb      	ldr	r3, [r7, #12]
}
 8010252:	4618      	mov	r0, r3
 8010254:	3710      	adds	r7, #16
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}
 801025a:	bf00      	nop
 801025c:	20011020 	.word	0x20011020
 8010260:	20011036 	.word	0x20011036
 8010264:	0800ff1d 	.word	0x0800ff1d
 8010268:	006ddd00 	.word	0x006ddd00

0801026c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b082      	sub	sp, #8
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d107      	bne.n	801028a <tcp_pcb_purge+0x1e>
 801027a:	4b21      	ldr	r3, [pc, #132]	; (8010300 <tcp_pcb_purge+0x94>)
 801027c:	f640 0251 	movw	r2, #2129	; 0x851
 8010280:	4920      	ldr	r1, [pc, #128]	; (8010304 <tcp_pcb_purge+0x98>)
 8010282:	4821      	ldr	r0, [pc, #132]	; (8010308 <tcp_pcb_purge+0x9c>)
 8010284:	f006 feb2 	bl	8016fec <iprintf>
 8010288:	e037      	b.n	80102fa <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	7d1b      	ldrb	r3, [r3, #20]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d033      	beq.n	80102fa <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010296:	2b0a      	cmp	r3, #10
 8010298:	d02f      	beq.n	80102fa <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801029e:	2b01      	cmp	r3, #1
 80102a0:	d02b      	beq.n	80102fa <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d007      	beq.n	80102ba <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80102ae:	4618      	mov	r0, r3
 80102b0:	f7fe fb70 	bl	800e994 <pbuf_free>
      pcb->refused_data = NULL;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2200      	movs	r2, #0
 80102b8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d002      	beq.n	80102c8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80102c2:	6878      	ldr	r0, [r7, #4]
 80102c4:	f000 f986 	bl	80105d4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102ce:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102d4:	4618      	mov	r0, r3
 80102d6:	f7ff fdc7 	bl	800fe68 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102de:	4618      	mov	r0, r3
 80102e0:	f7ff fdc2 	bl	800fe68 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2200      	movs	r2, #0
 80102e8:	66da      	str	r2, [r3, #108]	; 0x6c
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	2200      	movs	r2, #0
 80102f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80102fa:	3708      	adds	r7, #8
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}
 8010300:	08018f24 	.word	0x08018f24
 8010304:	08019570 	.word	0x08019570
 8010308:	08018f68 	.word	0x08018f68

0801030c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b084      	sub	sp, #16
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
 8010314:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8010316:	683b      	ldr	r3, [r7, #0]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d106      	bne.n	801032a <tcp_pcb_remove+0x1e>
 801031c:	4b3e      	ldr	r3, [pc, #248]	; (8010418 <tcp_pcb_remove+0x10c>)
 801031e:	f640 0283 	movw	r2, #2179	; 0x883
 8010322:	493e      	ldr	r1, [pc, #248]	; (801041c <tcp_pcb_remove+0x110>)
 8010324:	483e      	ldr	r0, [pc, #248]	; (8010420 <tcp_pcb_remove+0x114>)
 8010326:	f006 fe61 	bl	8016fec <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d106      	bne.n	801033e <tcp_pcb_remove+0x32>
 8010330:	4b39      	ldr	r3, [pc, #228]	; (8010418 <tcp_pcb_remove+0x10c>)
 8010332:	f640 0284 	movw	r2, #2180	; 0x884
 8010336:	493b      	ldr	r1, [pc, #236]	; (8010424 <tcp_pcb_remove+0x118>)
 8010338:	4839      	ldr	r0, [pc, #228]	; (8010420 <tcp_pcb_remove+0x114>)
 801033a:	f006 fe57 	bl	8016fec <iprintf>

  TCP_RMV(pcblist, pcb);
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	683a      	ldr	r2, [r7, #0]
 8010344:	429a      	cmp	r2, r3
 8010346:	d105      	bne.n	8010354 <tcp_pcb_remove+0x48>
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	68da      	ldr	r2, [r3, #12]
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	601a      	str	r2, [r3, #0]
 8010352:	e013      	b.n	801037c <tcp_pcb_remove+0x70>
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	60fb      	str	r3, [r7, #12]
 801035a:	e00c      	b.n	8010376 <tcp_pcb_remove+0x6a>
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	68db      	ldr	r3, [r3, #12]
 8010360:	683a      	ldr	r2, [r7, #0]
 8010362:	429a      	cmp	r2, r3
 8010364:	d104      	bne.n	8010370 <tcp_pcb_remove+0x64>
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	68da      	ldr	r2, [r3, #12]
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	60da      	str	r2, [r3, #12]
 801036e:	e005      	b.n	801037c <tcp_pcb_remove+0x70>
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	68db      	ldr	r3, [r3, #12]
 8010374:	60fb      	str	r3, [r7, #12]
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d1ef      	bne.n	801035c <tcp_pcb_remove+0x50>
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	2200      	movs	r2, #0
 8010380:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010382:	6838      	ldr	r0, [r7, #0]
 8010384:	f7ff ff72 	bl	801026c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	7d1b      	ldrb	r3, [r3, #20]
 801038c:	2b0a      	cmp	r3, #10
 801038e:	d013      	beq.n	80103b8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010394:	2b01      	cmp	r3, #1
 8010396:	d00f      	beq.n	80103b8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	8b5b      	ldrh	r3, [r3, #26]
 801039c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d009      	beq.n	80103b8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	8b5b      	ldrh	r3, [r3, #26]
 80103a8:	f043 0302 	orr.w	r3, r3, #2
 80103ac:	b29a      	uxth	r2, r3
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80103b2:	6838      	ldr	r0, [r7, #0]
 80103b4:	f002 ff6e 	bl	8013294 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80103b8:	683b      	ldr	r3, [r7, #0]
 80103ba:	7d1b      	ldrb	r3, [r3, #20]
 80103bc:	2b01      	cmp	r3, #1
 80103be:	d020      	beq.n	8010402 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d006      	beq.n	80103d6 <tcp_pcb_remove+0xca>
 80103c8:	4b13      	ldr	r3, [pc, #76]	; (8010418 <tcp_pcb_remove+0x10c>)
 80103ca:	f640 0293 	movw	r2, #2195	; 0x893
 80103ce:	4916      	ldr	r1, [pc, #88]	; (8010428 <tcp_pcb_remove+0x11c>)
 80103d0:	4813      	ldr	r0, [pc, #76]	; (8010420 <tcp_pcb_remove+0x114>)
 80103d2:	f006 fe0b 	bl	8016fec <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d006      	beq.n	80103ec <tcp_pcb_remove+0xe0>
 80103de:	4b0e      	ldr	r3, [pc, #56]	; (8010418 <tcp_pcb_remove+0x10c>)
 80103e0:	f640 0294 	movw	r2, #2196	; 0x894
 80103e4:	4911      	ldr	r1, [pc, #68]	; (801042c <tcp_pcb_remove+0x120>)
 80103e6:	480e      	ldr	r0, [pc, #56]	; (8010420 <tcp_pcb_remove+0x114>)
 80103e8:	f006 fe00 	bl	8016fec <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80103ec:	683b      	ldr	r3, [r7, #0]
 80103ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d006      	beq.n	8010402 <tcp_pcb_remove+0xf6>
 80103f4:	4b08      	ldr	r3, [pc, #32]	; (8010418 <tcp_pcb_remove+0x10c>)
 80103f6:	f640 0296 	movw	r2, #2198	; 0x896
 80103fa:	490d      	ldr	r1, [pc, #52]	; (8010430 <tcp_pcb_remove+0x124>)
 80103fc:	4808      	ldr	r0, [pc, #32]	; (8010420 <tcp_pcb_remove+0x114>)
 80103fe:	f006 fdf5 	bl	8016fec <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	2200      	movs	r2, #0
 8010406:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	2200      	movs	r2, #0
 801040c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801040e:	bf00      	nop
 8010410:	3710      	adds	r7, #16
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}
 8010416:	bf00      	nop
 8010418:	08018f24 	.word	0x08018f24
 801041c:	0801958c 	.word	0x0801958c
 8010420:	08018f68 	.word	0x08018f68
 8010424:	080195a8 	.word	0x080195a8
 8010428:	080195c8 	.word	0x080195c8
 801042c:	080195e0 	.word	0x080195e0
 8010430:	080195fc 	.word	0x080195fc

08010434 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b082      	sub	sp, #8
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d106      	bne.n	8010450 <tcp_next_iss+0x1c>
 8010442:	4b0a      	ldr	r3, [pc, #40]	; (801046c <tcp_next_iss+0x38>)
 8010444:	f640 02af 	movw	r2, #2223	; 0x8af
 8010448:	4909      	ldr	r1, [pc, #36]	; (8010470 <tcp_next_iss+0x3c>)
 801044a:	480a      	ldr	r0, [pc, #40]	; (8010474 <tcp_next_iss+0x40>)
 801044c:	f006 fdce 	bl	8016fec <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010450:	4b09      	ldr	r3, [pc, #36]	; (8010478 <tcp_next_iss+0x44>)
 8010452:	681a      	ldr	r2, [r3, #0]
 8010454:	4b09      	ldr	r3, [pc, #36]	; (801047c <tcp_next_iss+0x48>)
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	4413      	add	r3, r2
 801045a:	4a07      	ldr	r2, [pc, #28]	; (8010478 <tcp_next_iss+0x44>)
 801045c:	6013      	str	r3, [r2, #0]
  return iss;
 801045e:	4b06      	ldr	r3, [pc, #24]	; (8010478 <tcp_next_iss+0x44>)
 8010460:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010462:	4618      	mov	r0, r3
 8010464:	3708      	adds	r7, #8
 8010466:	46bd      	mov	sp, r7
 8010468:	bd80      	pop	{r7, pc}
 801046a:	bf00      	nop
 801046c:	08018f24 	.word	0x08018f24
 8010470:	08019614 	.word	0x08019614
 8010474:	08018f68 	.word	0x08018f68
 8010478:	20000028 	.word	0x20000028
 801047c:	20011020 	.word	0x20011020

08010480 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b086      	sub	sp, #24
 8010484:	af00      	add	r7, sp, #0
 8010486:	4603      	mov	r3, r0
 8010488:	60b9      	str	r1, [r7, #8]
 801048a:	607a      	str	r2, [r7, #4]
 801048c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d106      	bne.n	80104a2 <tcp_eff_send_mss_netif+0x22>
 8010494:	4b14      	ldr	r3, [pc, #80]	; (80104e8 <tcp_eff_send_mss_netif+0x68>)
 8010496:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801049a:	4914      	ldr	r1, [pc, #80]	; (80104ec <tcp_eff_send_mss_netif+0x6c>)
 801049c:	4814      	ldr	r0, [pc, #80]	; (80104f0 <tcp_eff_send_mss_netif+0x70>)
 801049e:	f006 fda5 	bl	8016fec <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d101      	bne.n	80104ac <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80104a8:	89fb      	ldrh	r3, [r7, #14]
 80104aa:	e019      	b.n	80104e0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80104ac:	68bb      	ldr	r3, [r7, #8]
 80104ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80104b0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80104b2:	8afb      	ldrh	r3, [r7, #22]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d012      	beq.n	80104de <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80104b8:	2328      	movs	r3, #40	; 0x28
 80104ba:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80104bc:	8afa      	ldrh	r2, [r7, #22]
 80104be:	8abb      	ldrh	r3, [r7, #20]
 80104c0:	429a      	cmp	r2, r3
 80104c2:	d904      	bls.n	80104ce <tcp_eff_send_mss_netif+0x4e>
 80104c4:	8afa      	ldrh	r2, [r7, #22]
 80104c6:	8abb      	ldrh	r3, [r7, #20]
 80104c8:	1ad3      	subs	r3, r2, r3
 80104ca:	b29b      	uxth	r3, r3
 80104cc:	e000      	b.n	80104d0 <tcp_eff_send_mss_netif+0x50>
 80104ce:	2300      	movs	r3, #0
 80104d0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80104d2:	8a7a      	ldrh	r2, [r7, #18]
 80104d4:	89fb      	ldrh	r3, [r7, #14]
 80104d6:	4293      	cmp	r3, r2
 80104d8:	bf28      	it	cs
 80104da:	4613      	movcs	r3, r2
 80104dc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80104de:	89fb      	ldrh	r3, [r7, #14]
}
 80104e0:	4618      	mov	r0, r3
 80104e2:	3718      	adds	r7, #24
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd80      	pop	{r7, pc}
 80104e8:	08018f24 	.word	0x08018f24
 80104ec:	08019630 	.word	0x08019630
 80104f0:	08018f68 	.word	0x08018f68

080104f4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b084      	sub	sp, #16
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
 80104fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d119      	bne.n	801053c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010508:	4b10      	ldr	r3, [pc, #64]	; (801054c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801050a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801050e:	4910      	ldr	r1, [pc, #64]	; (8010550 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010510:	4810      	ldr	r0, [pc, #64]	; (8010554 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8010512:	f006 fd6b 	bl	8016fec <iprintf>

  while (pcb != NULL) {
 8010516:	e011      	b.n	801053c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	681a      	ldr	r2, [r3, #0]
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	429a      	cmp	r2, r3
 8010522:	d108      	bne.n	8010536 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	68db      	ldr	r3, [r3, #12]
 8010528:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801052a:	68f8      	ldr	r0, [r7, #12]
 801052c:	f7fe ffc6 	bl	800f4bc <tcp_abort>
      pcb = next;
 8010530:	68bb      	ldr	r3, [r7, #8]
 8010532:	60fb      	str	r3, [r7, #12]
 8010534:	e002      	b.n	801053c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	68db      	ldr	r3, [r3, #12]
 801053a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d1ea      	bne.n	8010518 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010542:	bf00      	nop
 8010544:	bf00      	nop
 8010546:	3710      	adds	r7, #16
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}
 801054c:	08018f24 	.word	0x08018f24
 8010550:	08019658 	.word	0x08019658
 8010554:	08018f68 	.word	0x08018f68

08010558 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b084      	sub	sp, #16
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
 8010560:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d02a      	beq.n	80105be <tcp_netif_ip_addr_changed+0x66>
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d026      	beq.n	80105be <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010570:	4b15      	ldr	r3, [pc, #84]	; (80105c8 <tcp_netif_ip_addr_changed+0x70>)
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	4619      	mov	r1, r3
 8010576:	6878      	ldr	r0, [r7, #4]
 8010578:	f7ff ffbc 	bl	80104f4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801057c:	4b13      	ldr	r3, [pc, #76]	; (80105cc <tcp_netif_ip_addr_changed+0x74>)
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	4619      	mov	r1, r3
 8010582:	6878      	ldr	r0, [r7, #4]
 8010584:	f7ff ffb6 	bl	80104f4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d017      	beq.n	80105be <tcp_netif_ip_addr_changed+0x66>
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d013      	beq.n	80105be <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010596:	4b0e      	ldr	r3, [pc, #56]	; (80105d0 <tcp_netif_ip_addr_changed+0x78>)
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	60fb      	str	r3, [r7, #12]
 801059c:	e00c      	b.n	80105b8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	681a      	ldr	r2, [r3, #0]
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	429a      	cmp	r2, r3
 80105a8:	d103      	bne.n	80105b2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80105aa:	683b      	ldr	r3, [r7, #0]
 80105ac:	681a      	ldr	r2, [r3, #0]
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	68db      	ldr	r3, [r3, #12]
 80105b6:	60fb      	str	r3, [r7, #12]
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d1ef      	bne.n	801059e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80105be:	bf00      	nop
 80105c0:	3710      	adds	r7, #16
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bd80      	pop	{r7, pc}
 80105c6:	bf00      	nop
 80105c8:	2001102c 	.word	0x2001102c
 80105cc:	20011024 	.word	0x20011024
 80105d0:	20011028 	.word	0x20011028

080105d4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b082      	sub	sp, #8
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d007      	beq.n	80105f4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105e8:	4618      	mov	r0, r3
 80105ea:	f7ff fc3d 	bl	800fe68 <tcp_segs_free>
    pcb->ooseq = NULL;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2200      	movs	r2, #0
 80105f2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80105f4:	bf00      	nop
 80105f6:	3708      	adds	r7, #8
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}

080105fc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80105fc:	b590      	push	{r4, r7, lr}
 80105fe:	b08d      	sub	sp, #52	; 0x34
 8010600:	af04      	add	r7, sp, #16
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d105      	bne.n	8010618 <tcp_input+0x1c>
 801060c:	4b9b      	ldr	r3, [pc, #620]	; (801087c <tcp_input+0x280>)
 801060e:	2283      	movs	r2, #131	; 0x83
 8010610:	499b      	ldr	r1, [pc, #620]	; (8010880 <tcp_input+0x284>)
 8010612:	489c      	ldr	r0, [pc, #624]	; (8010884 <tcp_input+0x288>)
 8010614:	f006 fcea 	bl	8016fec <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	685b      	ldr	r3, [r3, #4]
 801061c:	4a9a      	ldr	r2, [pc, #616]	; (8010888 <tcp_input+0x28c>)
 801061e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	895b      	ldrh	r3, [r3, #10]
 8010624:	2b13      	cmp	r3, #19
 8010626:	f240 83d1 	bls.w	8010dcc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801062a:	4b98      	ldr	r3, [pc, #608]	; (801088c <tcp_input+0x290>)
 801062c:	695b      	ldr	r3, [r3, #20]
 801062e:	4a97      	ldr	r2, [pc, #604]	; (801088c <tcp_input+0x290>)
 8010630:	6812      	ldr	r2, [r2, #0]
 8010632:	4611      	mov	r1, r2
 8010634:	4618      	mov	r0, r3
 8010636:	f005 fc47 	bl	8015ec8 <ip4_addr_isbroadcast_u32>
 801063a:	4603      	mov	r3, r0
 801063c:	2b00      	cmp	r3, #0
 801063e:	f040 83c7 	bne.w	8010dd0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010642:	4b92      	ldr	r3, [pc, #584]	; (801088c <tcp_input+0x290>)
 8010644:	695b      	ldr	r3, [r3, #20]
 8010646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801064a:	2be0      	cmp	r3, #224	; 0xe0
 801064c:	f000 83c0 	beq.w	8010dd0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010650:	4b8d      	ldr	r3, [pc, #564]	; (8010888 <tcp_input+0x28c>)
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	899b      	ldrh	r3, [r3, #12]
 8010656:	b29b      	uxth	r3, r3
 8010658:	4618      	mov	r0, r3
 801065a:	f7fc fda9 	bl	800d1b0 <lwip_htons>
 801065e:	4603      	mov	r3, r0
 8010660:	0b1b      	lsrs	r3, r3, #12
 8010662:	b29b      	uxth	r3, r3
 8010664:	b2db      	uxtb	r3, r3
 8010666:	009b      	lsls	r3, r3, #2
 8010668:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801066a:	7cbb      	ldrb	r3, [r7, #18]
 801066c:	2b13      	cmp	r3, #19
 801066e:	f240 83b1 	bls.w	8010dd4 <tcp_input+0x7d8>
 8010672:	7cbb      	ldrb	r3, [r7, #18]
 8010674:	b29a      	uxth	r2, r3
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	891b      	ldrh	r3, [r3, #8]
 801067a:	429a      	cmp	r2, r3
 801067c:	f200 83aa 	bhi.w	8010dd4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010680:	7cbb      	ldrb	r3, [r7, #18]
 8010682:	b29b      	uxth	r3, r3
 8010684:	3b14      	subs	r3, #20
 8010686:	b29a      	uxth	r2, r3
 8010688:	4b81      	ldr	r3, [pc, #516]	; (8010890 <tcp_input+0x294>)
 801068a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801068c:	4b81      	ldr	r3, [pc, #516]	; (8010894 <tcp_input+0x298>)
 801068e:	2200      	movs	r2, #0
 8010690:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	895a      	ldrh	r2, [r3, #10]
 8010696:	7cbb      	ldrb	r3, [r7, #18]
 8010698:	b29b      	uxth	r3, r3
 801069a:	429a      	cmp	r2, r3
 801069c:	d309      	bcc.n	80106b2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801069e:	4b7c      	ldr	r3, [pc, #496]	; (8010890 <tcp_input+0x294>)
 80106a0:	881a      	ldrh	r2, [r3, #0]
 80106a2:	4b7d      	ldr	r3, [pc, #500]	; (8010898 <tcp_input+0x29c>)
 80106a4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80106a6:	7cbb      	ldrb	r3, [r7, #18]
 80106a8:	4619      	mov	r1, r3
 80106aa:	6878      	ldr	r0, [r7, #4]
 80106ac:	f7fe f8ec 	bl	800e888 <pbuf_remove_header>
 80106b0:	e04e      	b.n	8010750 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d105      	bne.n	80106c6 <tcp_input+0xca>
 80106ba:	4b70      	ldr	r3, [pc, #448]	; (801087c <tcp_input+0x280>)
 80106bc:	22c2      	movs	r2, #194	; 0xc2
 80106be:	4977      	ldr	r1, [pc, #476]	; (801089c <tcp_input+0x2a0>)
 80106c0:	4870      	ldr	r0, [pc, #448]	; (8010884 <tcp_input+0x288>)
 80106c2:	f006 fc93 	bl	8016fec <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80106c6:	2114      	movs	r1, #20
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	f7fe f8dd 	bl	800e888 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	895a      	ldrh	r2, [r3, #10]
 80106d2:	4b71      	ldr	r3, [pc, #452]	; (8010898 <tcp_input+0x29c>)
 80106d4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80106d6:	4b6e      	ldr	r3, [pc, #440]	; (8010890 <tcp_input+0x294>)
 80106d8:	881a      	ldrh	r2, [r3, #0]
 80106da:	4b6f      	ldr	r3, [pc, #444]	; (8010898 <tcp_input+0x29c>)
 80106dc:	881b      	ldrh	r3, [r3, #0]
 80106de:	1ad3      	subs	r3, r2, r3
 80106e0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80106e2:	4b6d      	ldr	r3, [pc, #436]	; (8010898 <tcp_input+0x29c>)
 80106e4:	881b      	ldrh	r3, [r3, #0]
 80106e6:	4619      	mov	r1, r3
 80106e8:	6878      	ldr	r0, [r7, #4]
 80106ea:	f7fe f8cd 	bl	800e888 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	895b      	ldrh	r3, [r3, #10]
 80106f4:	8a3a      	ldrh	r2, [r7, #16]
 80106f6:	429a      	cmp	r2, r3
 80106f8:	f200 836e 	bhi.w	8010dd8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	685b      	ldr	r3, [r3, #4]
 8010702:	4a64      	ldr	r2, [pc, #400]	; (8010894 <tcp_input+0x298>)
 8010704:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	8a3a      	ldrh	r2, [r7, #16]
 801070c:	4611      	mov	r1, r2
 801070e:	4618      	mov	r0, r3
 8010710:	f7fe f8ba 	bl	800e888 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	891a      	ldrh	r2, [r3, #8]
 8010718:	8a3b      	ldrh	r3, [r7, #16]
 801071a:	1ad3      	subs	r3, r2, r3
 801071c:	b29a      	uxth	r2, r3
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	895b      	ldrh	r3, [r3, #10]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d005      	beq.n	8010736 <tcp_input+0x13a>
 801072a:	4b54      	ldr	r3, [pc, #336]	; (801087c <tcp_input+0x280>)
 801072c:	22df      	movs	r2, #223	; 0xdf
 801072e:	495c      	ldr	r1, [pc, #368]	; (80108a0 <tcp_input+0x2a4>)
 8010730:	4854      	ldr	r0, [pc, #336]	; (8010884 <tcp_input+0x288>)
 8010732:	f006 fc5b 	bl	8016fec <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	891a      	ldrh	r2, [r3, #8]
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	891b      	ldrh	r3, [r3, #8]
 8010740:	429a      	cmp	r2, r3
 8010742:	d005      	beq.n	8010750 <tcp_input+0x154>
 8010744:	4b4d      	ldr	r3, [pc, #308]	; (801087c <tcp_input+0x280>)
 8010746:	22e0      	movs	r2, #224	; 0xe0
 8010748:	4956      	ldr	r1, [pc, #344]	; (80108a4 <tcp_input+0x2a8>)
 801074a:	484e      	ldr	r0, [pc, #312]	; (8010884 <tcp_input+0x288>)
 801074c:	f006 fc4e 	bl	8016fec <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010750:	4b4d      	ldr	r3, [pc, #308]	; (8010888 <tcp_input+0x28c>)
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	881b      	ldrh	r3, [r3, #0]
 8010756:	b29b      	uxth	r3, r3
 8010758:	4a4b      	ldr	r2, [pc, #300]	; (8010888 <tcp_input+0x28c>)
 801075a:	6814      	ldr	r4, [r2, #0]
 801075c:	4618      	mov	r0, r3
 801075e:	f7fc fd27 	bl	800d1b0 <lwip_htons>
 8010762:	4603      	mov	r3, r0
 8010764:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010766:	4b48      	ldr	r3, [pc, #288]	; (8010888 <tcp_input+0x28c>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	885b      	ldrh	r3, [r3, #2]
 801076c:	b29b      	uxth	r3, r3
 801076e:	4a46      	ldr	r2, [pc, #280]	; (8010888 <tcp_input+0x28c>)
 8010770:	6814      	ldr	r4, [r2, #0]
 8010772:	4618      	mov	r0, r3
 8010774:	f7fc fd1c 	bl	800d1b0 <lwip_htons>
 8010778:	4603      	mov	r3, r0
 801077a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801077c:	4b42      	ldr	r3, [pc, #264]	; (8010888 <tcp_input+0x28c>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	685b      	ldr	r3, [r3, #4]
 8010782:	4a41      	ldr	r2, [pc, #260]	; (8010888 <tcp_input+0x28c>)
 8010784:	6814      	ldr	r4, [r2, #0]
 8010786:	4618      	mov	r0, r3
 8010788:	f7fc fd27 	bl	800d1da <lwip_htonl>
 801078c:	4603      	mov	r3, r0
 801078e:	6063      	str	r3, [r4, #4]
 8010790:	6863      	ldr	r3, [r4, #4]
 8010792:	4a45      	ldr	r2, [pc, #276]	; (80108a8 <tcp_input+0x2ac>)
 8010794:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010796:	4b3c      	ldr	r3, [pc, #240]	; (8010888 <tcp_input+0x28c>)
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	689b      	ldr	r3, [r3, #8]
 801079c:	4a3a      	ldr	r2, [pc, #232]	; (8010888 <tcp_input+0x28c>)
 801079e:	6814      	ldr	r4, [r2, #0]
 80107a0:	4618      	mov	r0, r3
 80107a2:	f7fc fd1a 	bl	800d1da <lwip_htonl>
 80107a6:	4603      	mov	r3, r0
 80107a8:	60a3      	str	r3, [r4, #8]
 80107aa:	68a3      	ldr	r3, [r4, #8]
 80107ac:	4a3f      	ldr	r2, [pc, #252]	; (80108ac <tcp_input+0x2b0>)
 80107ae:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80107b0:	4b35      	ldr	r3, [pc, #212]	; (8010888 <tcp_input+0x28c>)
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	89db      	ldrh	r3, [r3, #14]
 80107b6:	b29b      	uxth	r3, r3
 80107b8:	4a33      	ldr	r2, [pc, #204]	; (8010888 <tcp_input+0x28c>)
 80107ba:	6814      	ldr	r4, [r2, #0]
 80107bc:	4618      	mov	r0, r3
 80107be:	f7fc fcf7 	bl	800d1b0 <lwip_htons>
 80107c2:	4603      	mov	r3, r0
 80107c4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80107c6:	4b30      	ldr	r3, [pc, #192]	; (8010888 <tcp_input+0x28c>)
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	899b      	ldrh	r3, [r3, #12]
 80107cc:	b29b      	uxth	r3, r3
 80107ce:	4618      	mov	r0, r3
 80107d0:	f7fc fcee 	bl	800d1b0 <lwip_htons>
 80107d4:	4603      	mov	r3, r0
 80107d6:	b2db      	uxtb	r3, r3
 80107d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80107dc:	b2da      	uxtb	r2, r3
 80107de:	4b34      	ldr	r3, [pc, #208]	; (80108b0 <tcp_input+0x2b4>)
 80107e0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	891a      	ldrh	r2, [r3, #8]
 80107e6:	4b33      	ldr	r3, [pc, #204]	; (80108b4 <tcp_input+0x2b8>)
 80107e8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80107ea:	4b31      	ldr	r3, [pc, #196]	; (80108b0 <tcp_input+0x2b4>)
 80107ec:	781b      	ldrb	r3, [r3, #0]
 80107ee:	f003 0303 	and.w	r3, r3, #3
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d00c      	beq.n	8010810 <tcp_input+0x214>
    tcplen++;
 80107f6:	4b2f      	ldr	r3, [pc, #188]	; (80108b4 <tcp_input+0x2b8>)
 80107f8:	881b      	ldrh	r3, [r3, #0]
 80107fa:	3301      	adds	r3, #1
 80107fc:	b29a      	uxth	r2, r3
 80107fe:	4b2d      	ldr	r3, [pc, #180]	; (80108b4 <tcp_input+0x2b8>)
 8010800:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	891a      	ldrh	r2, [r3, #8]
 8010806:	4b2b      	ldr	r3, [pc, #172]	; (80108b4 <tcp_input+0x2b8>)
 8010808:	881b      	ldrh	r3, [r3, #0]
 801080a:	429a      	cmp	r2, r3
 801080c:	f200 82e6 	bhi.w	8010ddc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010810:	2300      	movs	r3, #0
 8010812:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010814:	4b28      	ldr	r3, [pc, #160]	; (80108b8 <tcp_input+0x2bc>)
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	61fb      	str	r3, [r7, #28]
 801081a:	e09d      	b.n	8010958 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801081c:	69fb      	ldr	r3, [r7, #28]
 801081e:	7d1b      	ldrb	r3, [r3, #20]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d105      	bne.n	8010830 <tcp_input+0x234>
 8010824:	4b15      	ldr	r3, [pc, #84]	; (801087c <tcp_input+0x280>)
 8010826:	22fb      	movs	r2, #251	; 0xfb
 8010828:	4924      	ldr	r1, [pc, #144]	; (80108bc <tcp_input+0x2c0>)
 801082a:	4816      	ldr	r0, [pc, #88]	; (8010884 <tcp_input+0x288>)
 801082c:	f006 fbde 	bl	8016fec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010830:	69fb      	ldr	r3, [r7, #28]
 8010832:	7d1b      	ldrb	r3, [r3, #20]
 8010834:	2b0a      	cmp	r3, #10
 8010836:	d105      	bne.n	8010844 <tcp_input+0x248>
 8010838:	4b10      	ldr	r3, [pc, #64]	; (801087c <tcp_input+0x280>)
 801083a:	22fc      	movs	r2, #252	; 0xfc
 801083c:	4920      	ldr	r1, [pc, #128]	; (80108c0 <tcp_input+0x2c4>)
 801083e:	4811      	ldr	r0, [pc, #68]	; (8010884 <tcp_input+0x288>)
 8010840:	f006 fbd4 	bl	8016fec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010844:	69fb      	ldr	r3, [r7, #28]
 8010846:	7d1b      	ldrb	r3, [r3, #20]
 8010848:	2b01      	cmp	r3, #1
 801084a:	d105      	bne.n	8010858 <tcp_input+0x25c>
 801084c:	4b0b      	ldr	r3, [pc, #44]	; (801087c <tcp_input+0x280>)
 801084e:	22fd      	movs	r2, #253	; 0xfd
 8010850:	491c      	ldr	r1, [pc, #112]	; (80108c4 <tcp_input+0x2c8>)
 8010852:	480c      	ldr	r0, [pc, #48]	; (8010884 <tcp_input+0x288>)
 8010854:	f006 fbca 	bl	8016fec <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010858:	69fb      	ldr	r3, [r7, #28]
 801085a:	7a1b      	ldrb	r3, [r3, #8]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d033      	beq.n	80108c8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010860:	69fb      	ldr	r3, [r7, #28]
 8010862:	7a1a      	ldrb	r2, [r3, #8]
 8010864:	4b09      	ldr	r3, [pc, #36]	; (801088c <tcp_input+0x290>)
 8010866:	685b      	ldr	r3, [r3, #4]
 8010868:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801086c:	3301      	adds	r3, #1
 801086e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010870:	429a      	cmp	r2, r3
 8010872:	d029      	beq.n	80108c8 <tcp_input+0x2cc>
      prev = pcb;
 8010874:	69fb      	ldr	r3, [r7, #28]
 8010876:	61bb      	str	r3, [r7, #24]
      continue;
 8010878:	e06b      	b.n	8010952 <tcp_input+0x356>
 801087a:	bf00      	nop
 801087c:	0801968c 	.word	0x0801968c
 8010880:	080196c0 	.word	0x080196c0
 8010884:	080196d8 	.word	0x080196d8
 8010888:	20011048 	.word	0x20011048
 801088c:	2000d8cc 	.word	0x2000d8cc
 8010890:	2001104c 	.word	0x2001104c
 8010894:	20011050 	.word	0x20011050
 8010898:	2001104e 	.word	0x2001104e
 801089c:	08019700 	.word	0x08019700
 80108a0:	08019710 	.word	0x08019710
 80108a4:	0801971c 	.word	0x0801971c
 80108a8:	20011058 	.word	0x20011058
 80108ac:	2001105c 	.word	0x2001105c
 80108b0:	20011064 	.word	0x20011064
 80108b4:	20011062 	.word	0x20011062
 80108b8:	2001102c 	.word	0x2001102c
 80108bc:	0801973c 	.word	0x0801973c
 80108c0:	08019764 	.word	0x08019764
 80108c4:	08019790 	.word	0x08019790
    }

    if (pcb->remote_port == tcphdr->src &&
 80108c8:	69fb      	ldr	r3, [r7, #28]
 80108ca:	8b1a      	ldrh	r2, [r3, #24]
 80108cc:	4b72      	ldr	r3, [pc, #456]	; (8010a98 <tcp_input+0x49c>)
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	881b      	ldrh	r3, [r3, #0]
 80108d2:	b29b      	uxth	r3, r3
 80108d4:	429a      	cmp	r2, r3
 80108d6:	d13a      	bne.n	801094e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80108d8:	69fb      	ldr	r3, [r7, #28]
 80108da:	8ada      	ldrh	r2, [r3, #22]
 80108dc:	4b6e      	ldr	r3, [pc, #440]	; (8010a98 <tcp_input+0x49c>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	885b      	ldrh	r3, [r3, #2]
 80108e2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80108e4:	429a      	cmp	r2, r3
 80108e6:	d132      	bne.n	801094e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80108e8:	69fb      	ldr	r3, [r7, #28]
 80108ea:	685a      	ldr	r2, [r3, #4]
 80108ec:	4b6b      	ldr	r3, [pc, #428]	; (8010a9c <tcp_input+0x4a0>)
 80108ee:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80108f0:	429a      	cmp	r2, r3
 80108f2:	d12c      	bne.n	801094e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80108f4:	69fb      	ldr	r3, [r7, #28]
 80108f6:	681a      	ldr	r2, [r3, #0]
 80108f8:	4b68      	ldr	r3, [pc, #416]	; (8010a9c <tcp_input+0x4a0>)
 80108fa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80108fc:	429a      	cmp	r2, r3
 80108fe:	d126      	bne.n	801094e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010900:	69fb      	ldr	r3, [r7, #28]
 8010902:	68db      	ldr	r3, [r3, #12]
 8010904:	69fa      	ldr	r2, [r7, #28]
 8010906:	429a      	cmp	r2, r3
 8010908:	d106      	bne.n	8010918 <tcp_input+0x31c>
 801090a:	4b65      	ldr	r3, [pc, #404]	; (8010aa0 <tcp_input+0x4a4>)
 801090c:	f240 120d 	movw	r2, #269	; 0x10d
 8010910:	4964      	ldr	r1, [pc, #400]	; (8010aa4 <tcp_input+0x4a8>)
 8010912:	4865      	ldr	r0, [pc, #404]	; (8010aa8 <tcp_input+0x4ac>)
 8010914:	f006 fb6a 	bl	8016fec <iprintf>
      if (prev != NULL) {
 8010918:	69bb      	ldr	r3, [r7, #24]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d00a      	beq.n	8010934 <tcp_input+0x338>
        prev->next = pcb->next;
 801091e:	69fb      	ldr	r3, [r7, #28]
 8010920:	68da      	ldr	r2, [r3, #12]
 8010922:	69bb      	ldr	r3, [r7, #24]
 8010924:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010926:	4b61      	ldr	r3, [pc, #388]	; (8010aac <tcp_input+0x4b0>)
 8010928:	681a      	ldr	r2, [r3, #0]
 801092a:	69fb      	ldr	r3, [r7, #28]
 801092c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801092e:	4a5f      	ldr	r2, [pc, #380]	; (8010aac <tcp_input+0x4b0>)
 8010930:	69fb      	ldr	r3, [r7, #28]
 8010932:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010934:	69fb      	ldr	r3, [r7, #28]
 8010936:	68db      	ldr	r3, [r3, #12]
 8010938:	69fa      	ldr	r2, [r7, #28]
 801093a:	429a      	cmp	r2, r3
 801093c:	d111      	bne.n	8010962 <tcp_input+0x366>
 801093e:	4b58      	ldr	r3, [pc, #352]	; (8010aa0 <tcp_input+0x4a4>)
 8010940:	f240 1215 	movw	r2, #277	; 0x115
 8010944:	495a      	ldr	r1, [pc, #360]	; (8010ab0 <tcp_input+0x4b4>)
 8010946:	4858      	ldr	r0, [pc, #352]	; (8010aa8 <tcp_input+0x4ac>)
 8010948:	f006 fb50 	bl	8016fec <iprintf>
      break;
 801094c:	e009      	b.n	8010962 <tcp_input+0x366>
    }
    prev = pcb;
 801094e:	69fb      	ldr	r3, [r7, #28]
 8010950:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010952:	69fb      	ldr	r3, [r7, #28]
 8010954:	68db      	ldr	r3, [r3, #12]
 8010956:	61fb      	str	r3, [r7, #28]
 8010958:	69fb      	ldr	r3, [r7, #28]
 801095a:	2b00      	cmp	r3, #0
 801095c:	f47f af5e 	bne.w	801081c <tcp_input+0x220>
 8010960:	e000      	b.n	8010964 <tcp_input+0x368>
      break;
 8010962:	bf00      	nop
  }

  if (pcb == NULL) {
 8010964:	69fb      	ldr	r3, [r7, #28]
 8010966:	2b00      	cmp	r3, #0
 8010968:	f040 80aa 	bne.w	8010ac0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801096c:	4b51      	ldr	r3, [pc, #324]	; (8010ab4 <tcp_input+0x4b8>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	61fb      	str	r3, [r7, #28]
 8010972:	e03f      	b.n	80109f4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010974:	69fb      	ldr	r3, [r7, #28]
 8010976:	7d1b      	ldrb	r3, [r3, #20]
 8010978:	2b0a      	cmp	r3, #10
 801097a:	d006      	beq.n	801098a <tcp_input+0x38e>
 801097c:	4b48      	ldr	r3, [pc, #288]	; (8010aa0 <tcp_input+0x4a4>)
 801097e:	f240 121f 	movw	r2, #287	; 0x11f
 8010982:	494d      	ldr	r1, [pc, #308]	; (8010ab8 <tcp_input+0x4bc>)
 8010984:	4848      	ldr	r0, [pc, #288]	; (8010aa8 <tcp_input+0x4ac>)
 8010986:	f006 fb31 	bl	8016fec <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801098a:	69fb      	ldr	r3, [r7, #28]
 801098c:	7a1b      	ldrb	r3, [r3, #8]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d009      	beq.n	80109a6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010992:	69fb      	ldr	r3, [r7, #28]
 8010994:	7a1a      	ldrb	r2, [r3, #8]
 8010996:	4b41      	ldr	r3, [pc, #260]	; (8010a9c <tcp_input+0x4a0>)
 8010998:	685b      	ldr	r3, [r3, #4]
 801099a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801099e:	3301      	adds	r3, #1
 80109a0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80109a2:	429a      	cmp	r2, r3
 80109a4:	d122      	bne.n	80109ec <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80109a6:	69fb      	ldr	r3, [r7, #28]
 80109a8:	8b1a      	ldrh	r2, [r3, #24]
 80109aa:	4b3b      	ldr	r3, [pc, #236]	; (8010a98 <tcp_input+0x49c>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	881b      	ldrh	r3, [r3, #0]
 80109b0:	b29b      	uxth	r3, r3
 80109b2:	429a      	cmp	r2, r3
 80109b4:	d11b      	bne.n	80109ee <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80109b6:	69fb      	ldr	r3, [r7, #28]
 80109b8:	8ada      	ldrh	r2, [r3, #22]
 80109ba:	4b37      	ldr	r3, [pc, #220]	; (8010a98 <tcp_input+0x49c>)
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	885b      	ldrh	r3, [r3, #2]
 80109c0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80109c2:	429a      	cmp	r2, r3
 80109c4:	d113      	bne.n	80109ee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80109c6:	69fb      	ldr	r3, [r7, #28]
 80109c8:	685a      	ldr	r2, [r3, #4]
 80109ca:	4b34      	ldr	r3, [pc, #208]	; (8010a9c <tcp_input+0x4a0>)
 80109cc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80109ce:	429a      	cmp	r2, r3
 80109d0:	d10d      	bne.n	80109ee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80109d2:	69fb      	ldr	r3, [r7, #28]
 80109d4:	681a      	ldr	r2, [r3, #0]
 80109d6:	4b31      	ldr	r3, [pc, #196]	; (8010a9c <tcp_input+0x4a0>)
 80109d8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80109da:	429a      	cmp	r2, r3
 80109dc:	d107      	bne.n	80109ee <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80109de:	69f8      	ldr	r0, [r7, #28]
 80109e0:	f000 fb56 	bl	8011090 <tcp_timewait_input>
        }
        pbuf_free(p);
 80109e4:	6878      	ldr	r0, [r7, #4]
 80109e6:	f7fd ffd5 	bl	800e994 <pbuf_free>
        return;
 80109ea:	e1fd      	b.n	8010de8 <tcp_input+0x7ec>
        continue;
 80109ec:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80109ee:	69fb      	ldr	r3, [r7, #28]
 80109f0:	68db      	ldr	r3, [r3, #12]
 80109f2:	61fb      	str	r3, [r7, #28]
 80109f4:	69fb      	ldr	r3, [r7, #28]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d1bc      	bne.n	8010974 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80109fa:	2300      	movs	r3, #0
 80109fc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80109fe:	4b2f      	ldr	r3, [pc, #188]	; (8010abc <tcp_input+0x4c0>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	617b      	str	r3, [r7, #20]
 8010a04:	e02a      	b.n	8010a5c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010a06:	697b      	ldr	r3, [r7, #20]
 8010a08:	7a1b      	ldrb	r3, [r3, #8]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d00c      	beq.n	8010a28 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010a0e:	697b      	ldr	r3, [r7, #20]
 8010a10:	7a1a      	ldrb	r2, [r3, #8]
 8010a12:	4b22      	ldr	r3, [pc, #136]	; (8010a9c <tcp_input+0x4a0>)
 8010a14:	685b      	ldr	r3, [r3, #4]
 8010a16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a1a:	3301      	adds	r3, #1
 8010a1c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010a1e:	429a      	cmp	r2, r3
 8010a20:	d002      	beq.n	8010a28 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010a22:	697b      	ldr	r3, [r7, #20]
 8010a24:	61bb      	str	r3, [r7, #24]
        continue;
 8010a26:	e016      	b.n	8010a56 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010a28:	697b      	ldr	r3, [r7, #20]
 8010a2a:	8ada      	ldrh	r2, [r3, #22]
 8010a2c:	4b1a      	ldr	r3, [pc, #104]	; (8010a98 <tcp_input+0x49c>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	885b      	ldrh	r3, [r3, #2]
 8010a32:	b29b      	uxth	r3, r3
 8010a34:	429a      	cmp	r2, r3
 8010a36:	d10c      	bne.n	8010a52 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010a38:	697b      	ldr	r3, [r7, #20]
 8010a3a:	681a      	ldr	r2, [r3, #0]
 8010a3c:	4b17      	ldr	r3, [pc, #92]	; (8010a9c <tcp_input+0x4a0>)
 8010a3e:	695b      	ldr	r3, [r3, #20]
 8010a40:	429a      	cmp	r2, r3
 8010a42:	d00f      	beq.n	8010a64 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010a44:	697b      	ldr	r3, [r7, #20]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d00d      	beq.n	8010a66 <tcp_input+0x46a>
 8010a4a:	697b      	ldr	r3, [r7, #20]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d009      	beq.n	8010a66 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010a52:	697b      	ldr	r3, [r7, #20]
 8010a54:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010a56:	697b      	ldr	r3, [r7, #20]
 8010a58:	68db      	ldr	r3, [r3, #12]
 8010a5a:	617b      	str	r3, [r7, #20]
 8010a5c:	697b      	ldr	r3, [r7, #20]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d1d1      	bne.n	8010a06 <tcp_input+0x40a>
 8010a62:	e000      	b.n	8010a66 <tcp_input+0x46a>
            break;
 8010a64:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010a66:	697b      	ldr	r3, [r7, #20]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d029      	beq.n	8010ac0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010a6c:	69bb      	ldr	r3, [r7, #24]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d00a      	beq.n	8010a88 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010a72:	697b      	ldr	r3, [r7, #20]
 8010a74:	68da      	ldr	r2, [r3, #12]
 8010a76:	69bb      	ldr	r3, [r7, #24]
 8010a78:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010a7a:	4b10      	ldr	r3, [pc, #64]	; (8010abc <tcp_input+0x4c0>)
 8010a7c:	681a      	ldr	r2, [r3, #0]
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010a82:	4a0e      	ldr	r2, [pc, #56]	; (8010abc <tcp_input+0x4c0>)
 8010a84:	697b      	ldr	r3, [r7, #20]
 8010a86:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010a88:	6978      	ldr	r0, [r7, #20]
 8010a8a:	f000 fa03 	bl	8010e94 <tcp_listen_input>
      }
      pbuf_free(p);
 8010a8e:	6878      	ldr	r0, [r7, #4]
 8010a90:	f7fd ff80 	bl	800e994 <pbuf_free>
      return;
 8010a94:	e1a8      	b.n	8010de8 <tcp_input+0x7ec>
 8010a96:	bf00      	nop
 8010a98:	20011048 	.word	0x20011048
 8010a9c:	2000d8cc 	.word	0x2000d8cc
 8010aa0:	0801968c 	.word	0x0801968c
 8010aa4:	080197b8 	.word	0x080197b8
 8010aa8:	080196d8 	.word	0x080196d8
 8010aac:	2001102c 	.word	0x2001102c
 8010ab0:	080197e4 	.word	0x080197e4
 8010ab4:	20011030 	.word	0x20011030
 8010ab8:	08019810 	.word	0x08019810
 8010abc:	20011028 	.word	0x20011028
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010ac0:	69fb      	ldr	r3, [r7, #28]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	f000 8158 	beq.w	8010d78 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010ac8:	4b95      	ldr	r3, [pc, #596]	; (8010d20 <tcp_input+0x724>)
 8010aca:	2200      	movs	r2, #0
 8010acc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	891a      	ldrh	r2, [r3, #8]
 8010ad2:	4b93      	ldr	r3, [pc, #588]	; (8010d20 <tcp_input+0x724>)
 8010ad4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010ad6:	4a92      	ldr	r2, [pc, #584]	; (8010d20 <tcp_input+0x724>)
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010adc:	4b91      	ldr	r3, [pc, #580]	; (8010d24 <tcp_input+0x728>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	4a8f      	ldr	r2, [pc, #572]	; (8010d20 <tcp_input+0x724>)
 8010ae2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010ae4:	4b90      	ldr	r3, [pc, #576]	; (8010d28 <tcp_input+0x72c>)
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010aea:	4b90      	ldr	r3, [pc, #576]	; (8010d2c <tcp_input+0x730>)
 8010aec:	2200      	movs	r2, #0
 8010aee:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010af0:	4b8f      	ldr	r3, [pc, #572]	; (8010d30 <tcp_input+0x734>)
 8010af2:	2200      	movs	r2, #0
 8010af4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010af6:	4b8f      	ldr	r3, [pc, #572]	; (8010d34 <tcp_input+0x738>)
 8010af8:	781b      	ldrb	r3, [r3, #0]
 8010afa:	f003 0308 	and.w	r3, r3, #8
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d006      	beq.n	8010b10 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	7b5b      	ldrb	r3, [r3, #13]
 8010b06:	f043 0301 	orr.w	r3, r3, #1
 8010b0a:	b2da      	uxtb	r2, r3
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010b10:	69fb      	ldr	r3, [r7, #28]
 8010b12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d017      	beq.n	8010b48 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010b18:	69f8      	ldr	r0, [r7, #28]
 8010b1a:	f7ff f929 	bl	800fd70 <tcp_process_refused_data>
 8010b1e:	4603      	mov	r3, r0
 8010b20:	f113 0f0d 	cmn.w	r3, #13
 8010b24:	d007      	beq.n	8010b36 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010b26:	69fb      	ldr	r3, [r7, #28]
 8010b28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d00c      	beq.n	8010b48 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010b2e:	4b82      	ldr	r3, [pc, #520]	; (8010d38 <tcp_input+0x73c>)
 8010b30:	881b      	ldrh	r3, [r3, #0]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d008      	beq.n	8010b48 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010b36:	69fb      	ldr	r3, [r7, #28]
 8010b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	f040 80e3 	bne.w	8010d06 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010b40:	69f8      	ldr	r0, [r7, #28]
 8010b42:	f003 f9ad 	bl	8013ea0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010b46:	e0de      	b.n	8010d06 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8010b48:	4a7c      	ldr	r2, [pc, #496]	; (8010d3c <tcp_input+0x740>)
 8010b4a:	69fb      	ldr	r3, [r7, #28]
 8010b4c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010b4e:	69f8      	ldr	r0, [r7, #28]
 8010b50:	f000 fb18 	bl	8011184 <tcp_process>
 8010b54:	4603      	mov	r3, r0
 8010b56:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010b58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010b5c:	f113 0f0d 	cmn.w	r3, #13
 8010b60:	f000 80d3 	beq.w	8010d0a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8010b64:	4b71      	ldr	r3, [pc, #452]	; (8010d2c <tcp_input+0x730>)
 8010b66:	781b      	ldrb	r3, [r3, #0]
 8010b68:	f003 0308 	and.w	r3, r3, #8
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d015      	beq.n	8010b9c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010b70:	69fb      	ldr	r3, [r7, #28]
 8010b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d008      	beq.n	8010b8c <tcp_input+0x590>
 8010b7a:	69fb      	ldr	r3, [r7, #28]
 8010b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b80:	69fa      	ldr	r2, [r7, #28]
 8010b82:	6912      	ldr	r2, [r2, #16]
 8010b84:	f06f 010d 	mvn.w	r1, #13
 8010b88:	4610      	mov	r0, r2
 8010b8a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010b8c:	69f9      	ldr	r1, [r7, #28]
 8010b8e:	486c      	ldr	r0, [pc, #432]	; (8010d40 <tcp_input+0x744>)
 8010b90:	f7ff fbbc 	bl	801030c <tcp_pcb_remove>
        tcp_free(pcb);
 8010b94:	69f8      	ldr	r0, [r7, #28]
 8010b96:	f7fe f9a9 	bl	800eeec <tcp_free>
 8010b9a:	e0da      	b.n	8010d52 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010ba0:	4b63      	ldr	r3, [pc, #396]	; (8010d30 <tcp_input+0x734>)
 8010ba2:	881b      	ldrh	r3, [r3, #0]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d01d      	beq.n	8010be4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010ba8:	4b61      	ldr	r3, [pc, #388]	; (8010d30 <tcp_input+0x734>)
 8010baa:	881b      	ldrh	r3, [r3, #0]
 8010bac:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010bae:	69fb      	ldr	r3, [r7, #28]
 8010bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d00a      	beq.n	8010bce <tcp_input+0x5d2>
 8010bb8:	69fb      	ldr	r3, [r7, #28]
 8010bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bbe:	69fa      	ldr	r2, [r7, #28]
 8010bc0:	6910      	ldr	r0, [r2, #16]
 8010bc2:	89fa      	ldrh	r2, [r7, #14]
 8010bc4:	69f9      	ldr	r1, [r7, #28]
 8010bc6:	4798      	blx	r3
 8010bc8:	4603      	mov	r3, r0
 8010bca:	74fb      	strb	r3, [r7, #19]
 8010bcc:	e001      	b.n	8010bd2 <tcp_input+0x5d6>
 8010bce:	2300      	movs	r3, #0
 8010bd0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010bd2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010bd6:	f113 0f0d 	cmn.w	r3, #13
 8010bda:	f000 8098 	beq.w	8010d0e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010bde:	4b54      	ldr	r3, [pc, #336]	; (8010d30 <tcp_input+0x734>)
 8010be0:	2200      	movs	r2, #0
 8010be2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010be4:	69f8      	ldr	r0, [r7, #28]
 8010be6:	f000 f915 	bl	8010e14 <tcp_input_delayed_close>
 8010bea:	4603      	mov	r3, r0
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	f040 8090 	bne.w	8010d12 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010bf2:	4b4d      	ldr	r3, [pc, #308]	; (8010d28 <tcp_input+0x72c>)
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d041      	beq.n	8010c7e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010bfa:	69fb      	ldr	r3, [r7, #28]
 8010bfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d006      	beq.n	8010c10 <tcp_input+0x614>
 8010c02:	4b50      	ldr	r3, [pc, #320]	; (8010d44 <tcp_input+0x748>)
 8010c04:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010c08:	494f      	ldr	r1, [pc, #316]	; (8010d48 <tcp_input+0x74c>)
 8010c0a:	4850      	ldr	r0, [pc, #320]	; (8010d4c <tcp_input+0x750>)
 8010c0c:	f006 f9ee 	bl	8016fec <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010c10:	69fb      	ldr	r3, [r7, #28]
 8010c12:	8b5b      	ldrh	r3, [r3, #26]
 8010c14:	f003 0310 	and.w	r3, r3, #16
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d008      	beq.n	8010c2e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010c1c:	4b42      	ldr	r3, [pc, #264]	; (8010d28 <tcp_input+0x72c>)
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	4618      	mov	r0, r3
 8010c22:	f7fd feb7 	bl	800e994 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010c26:	69f8      	ldr	r0, [r7, #28]
 8010c28:	f7fe fc48 	bl	800f4bc <tcp_abort>
            goto aborted;
 8010c2c:	e091      	b.n	8010d52 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010c2e:	69fb      	ldr	r3, [r7, #28]
 8010c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d00c      	beq.n	8010c52 <tcp_input+0x656>
 8010c38:	69fb      	ldr	r3, [r7, #28]
 8010c3a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010c3e:	69fb      	ldr	r3, [r7, #28]
 8010c40:	6918      	ldr	r0, [r3, #16]
 8010c42:	4b39      	ldr	r3, [pc, #228]	; (8010d28 <tcp_input+0x72c>)
 8010c44:	681a      	ldr	r2, [r3, #0]
 8010c46:	2300      	movs	r3, #0
 8010c48:	69f9      	ldr	r1, [r7, #28]
 8010c4a:	47a0      	blx	r4
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	74fb      	strb	r3, [r7, #19]
 8010c50:	e008      	b.n	8010c64 <tcp_input+0x668>
 8010c52:	4b35      	ldr	r3, [pc, #212]	; (8010d28 <tcp_input+0x72c>)
 8010c54:	681a      	ldr	r2, [r3, #0]
 8010c56:	2300      	movs	r3, #0
 8010c58:	69f9      	ldr	r1, [r7, #28]
 8010c5a:	2000      	movs	r0, #0
 8010c5c:	f7ff f95e 	bl	800ff1c <tcp_recv_null>
 8010c60:	4603      	mov	r3, r0
 8010c62:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010c64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010c68:	f113 0f0d 	cmn.w	r3, #13
 8010c6c:	d053      	beq.n	8010d16 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010c6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d003      	beq.n	8010c7e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010c76:	4b2c      	ldr	r3, [pc, #176]	; (8010d28 <tcp_input+0x72c>)
 8010c78:	681a      	ldr	r2, [r3, #0]
 8010c7a:	69fb      	ldr	r3, [r7, #28]
 8010c7c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010c7e:	4b2b      	ldr	r3, [pc, #172]	; (8010d2c <tcp_input+0x730>)
 8010c80:	781b      	ldrb	r3, [r3, #0]
 8010c82:	f003 0320 	and.w	r3, r3, #32
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d030      	beq.n	8010cec <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8010c8a:	69fb      	ldr	r3, [r7, #28]
 8010c8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d009      	beq.n	8010ca6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010c92:	69fb      	ldr	r3, [r7, #28]
 8010c94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c96:	7b5a      	ldrb	r2, [r3, #13]
 8010c98:	69fb      	ldr	r3, [r7, #28]
 8010c9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c9c:	f042 0220 	orr.w	r2, r2, #32
 8010ca0:	b2d2      	uxtb	r2, r2
 8010ca2:	735a      	strb	r2, [r3, #13]
 8010ca4:	e022      	b.n	8010cec <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010ca6:	69fb      	ldr	r3, [r7, #28]
 8010ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010caa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010cae:	d005      	beq.n	8010cbc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8010cb0:	69fb      	ldr	r3, [r7, #28]
 8010cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010cb4:	3301      	adds	r3, #1
 8010cb6:	b29a      	uxth	r2, r3
 8010cb8:	69fb      	ldr	r3, [r7, #28]
 8010cba:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010cbc:	69fb      	ldr	r3, [r7, #28]
 8010cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d00b      	beq.n	8010cde <tcp_input+0x6e2>
 8010cc6:	69fb      	ldr	r3, [r7, #28]
 8010cc8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010ccc:	69fb      	ldr	r3, [r7, #28]
 8010cce:	6918      	ldr	r0, [r3, #16]
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	69f9      	ldr	r1, [r7, #28]
 8010cd6:	47a0      	blx	r4
 8010cd8:	4603      	mov	r3, r0
 8010cda:	74fb      	strb	r3, [r7, #19]
 8010cdc:	e001      	b.n	8010ce2 <tcp_input+0x6e6>
 8010cde:	2300      	movs	r3, #0
 8010ce0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010ce2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010ce6:	f113 0f0d 	cmn.w	r3, #13
 8010cea:	d016      	beq.n	8010d1a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010cec:	4b13      	ldr	r3, [pc, #76]	; (8010d3c <tcp_input+0x740>)
 8010cee:	2200      	movs	r2, #0
 8010cf0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010cf2:	69f8      	ldr	r0, [r7, #28]
 8010cf4:	f000 f88e 	bl	8010e14 <tcp_input_delayed_close>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d128      	bne.n	8010d50 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010cfe:	69f8      	ldr	r0, [r7, #28]
 8010d00:	f002 fac8 	bl	8013294 <tcp_output>
 8010d04:	e025      	b.n	8010d52 <tcp_input+0x756>
        goto aborted;
 8010d06:	bf00      	nop
 8010d08:	e023      	b.n	8010d52 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010d0a:	bf00      	nop
 8010d0c:	e021      	b.n	8010d52 <tcp_input+0x756>
              goto aborted;
 8010d0e:	bf00      	nop
 8010d10:	e01f      	b.n	8010d52 <tcp_input+0x756>
          goto aborted;
 8010d12:	bf00      	nop
 8010d14:	e01d      	b.n	8010d52 <tcp_input+0x756>
            goto aborted;
 8010d16:	bf00      	nop
 8010d18:	e01b      	b.n	8010d52 <tcp_input+0x756>
              goto aborted;
 8010d1a:	bf00      	nop
 8010d1c:	e019      	b.n	8010d52 <tcp_input+0x756>
 8010d1e:	bf00      	nop
 8010d20:	20011038 	.word	0x20011038
 8010d24:	20011048 	.word	0x20011048
 8010d28:	20011068 	.word	0x20011068
 8010d2c:	20011065 	.word	0x20011065
 8010d30:	20011060 	.word	0x20011060
 8010d34:	20011064 	.word	0x20011064
 8010d38:	20011062 	.word	0x20011062
 8010d3c:	2001106c 	.word	0x2001106c
 8010d40:	2001102c 	.word	0x2001102c
 8010d44:	0801968c 	.word	0x0801968c
 8010d48:	08019840 	.word	0x08019840
 8010d4c:	080196d8 	.word	0x080196d8
          goto aborted;
 8010d50:	bf00      	nop
    tcp_input_pcb = NULL;
 8010d52:	4b27      	ldr	r3, [pc, #156]	; (8010df0 <tcp_input+0x7f4>)
 8010d54:	2200      	movs	r2, #0
 8010d56:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010d58:	4b26      	ldr	r3, [pc, #152]	; (8010df4 <tcp_input+0x7f8>)
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010d5e:	4b26      	ldr	r3, [pc, #152]	; (8010df8 <tcp_input+0x7fc>)
 8010d60:	685b      	ldr	r3, [r3, #4]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d03f      	beq.n	8010de6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8010d66:	4b24      	ldr	r3, [pc, #144]	; (8010df8 <tcp_input+0x7fc>)
 8010d68:	685b      	ldr	r3, [r3, #4]
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f7fd fe12 	bl	800e994 <pbuf_free>
      inseg.p = NULL;
 8010d70:	4b21      	ldr	r3, [pc, #132]	; (8010df8 <tcp_input+0x7fc>)
 8010d72:	2200      	movs	r2, #0
 8010d74:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010d76:	e036      	b.n	8010de6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010d78:	4b20      	ldr	r3, [pc, #128]	; (8010dfc <tcp_input+0x800>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	899b      	ldrh	r3, [r3, #12]
 8010d7e:	b29b      	uxth	r3, r3
 8010d80:	4618      	mov	r0, r3
 8010d82:	f7fc fa15 	bl	800d1b0 <lwip_htons>
 8010d86:	4603      	mov	r3, r0
 8010d88:	b2db      	uxtb	r3, r3
 8010d8a:	f003 0304 	and.w	r3, r3, #4
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d118      	bne.n	8010dc4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d92:	4b1b      	ldr	r3, [pc, #108]	; (8010e00 <tcp_input+0x804>)
 8010d94:	6819      	ldr	r1, [r3, #0]
 8010d96:	4b1b      	ldr	r3, [pc, #108]	; (8010e04 <tcp_input+0x808>)
 8010d98:	881b      	ldrh	r3, [r3, #0]
 8010d9a:	461a      	mov	r2, r3
 8010d9c:	4b1a      	ldr	r3, [pc, #104]	; (8010e08 <tcp_input+0x80c>)
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010da2:	4b16      	ldr	r3, [pc, #88]	; (8010dfc <tcp_input+0x800>)
 8010da4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010da6:	885b      	ldrh	r3, [r3, #2]
 8010da8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010daa:	4a14      	ldr	r2, [pc, #80]	; (8010dfc <tcp_input+0x800>)
 8010dac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010dae:	8812      	ldrh	r2, [r2, #0]
 8010db0:	b292      	uxth	r2, r2
 8010db2:	9202      	str	r2, [sp, #8]
 8010db4:	9301      	str	r3, [sp, #4]
 8010db6:	4b15      	ldr	r3, [pc, #84]	; (8010e0c <tcp_input+0x810>)
 8010db8:	9300      	str	r3, [sp, #0]
 8010dba:	4b15      	ldr	r3, [pc, #84]	; (8010e10 <tcp_input+0x814>)
 8010dbc:	4602      	mov	r2, r0
 8010dbe:	2000      	movs	r0, #0
 8010dc0:	f003 f81c 	bl	8013dfc <tcp_rst>
    pbuf_free(p);
 8010dc4:	6878      	ldr	r0, [r7, #4]
 8010dc6:	f7fd fde5 	bl	800e994 <pbuf_free>
  return;
 8010dca:	e00c      	b.n	8010de6 <tcp_input+0x7ea>
    goto dropped;
 8010dcc:	bf00      	nop
 8010dce:	e006      	b.n	8010dde <tcp_input+0x7e2>
    goto dropped;
 8010dd0:	bf00      	nop
 8010dd2:	e004      	b.n	8010dde <tcp_input+0x7e2>
    goto dropped;
 8010dd4:	bf00      	nop
 8010dd6:	e002      	b.n	8010dde <tcp_input+0x7e2>
      goto dropped;
 8010dd8:	bf00      	nop
 8010dda:	e000      	b.n	8010dde <tcp_input+0x7e2>
      goto dropped;
 8010ddc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010dde:	6878      	ldr	r0, [r7, #4]
 8010de0:	f7fd fdd8 	bl	800e994 <pbuf_free>
 8010de4:	e000      	b.n	8010de8 <tcp_input+0x7ec>
  return;
 8010de6:	bf00      	nop
}
 8010de8:	3724      	adds	r7, #36	; 0x24
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd90      	pop	{r4, r7, pc}
 8010dee:	bf00      	nop
 8010df0:	2001106c 	.word	0x2001106c
 8010df4:	20011068 	.word	0x20011068
 8010df8:	20011038 	.word	0x20011038
 8010dfc:	20011048 	.word	0x20011048
 8010e00:	2001105c 	.word	0x2001105c
 8010e04:	20011062 	.word	0x20011062
 8010e08:	20011058 	.word	0x20011058
 8010e0c:	2000d8dc 	.word	0x2000d8dc
 8010e10:	2000d8e0 	.word	0x2000d8e0

08010e14 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b082      	sub	sp, #8
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d106      	bne.n	8010e30 <tcp_input_delayed_close+0x1c>
 8010e22:	4b17      	ldr	r3, [pc, #92]	; (8010e80 <tcp_input_delayed_close+0x6c>)
 8010e24:	f240 225a 	movw	r2, #602	; 0x25a
 8010e28:	4916      	ldr	r1, [pc, #88]	; (8010e84 <tcp_input_delayed_close+0x70>)
 8010e2a:	4817      	ldr	r0, [pc, #92]	; (8010e88 <tcp_input_delayed_close+0x74>)
 8010e2c:	f006 f8de 	bl	8016fec <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010e30:	4b16      	ldr	r3, [pc, #88]	; (8010e8c <tcp_input_delayed_close+0x78>)
 8010e32:	781b      	ldrb	r3, [r3, #0]
 8010e34:	f003 0310 	and.w	r3, r3, #16
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d01c      	beq.n	8010e76 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	8b5b      	ldrh	r3, [r3, #26]
 8010e40:	f003 0310 	and.w	r3, r3, #16
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d10d      	bne.n	8010e64 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d008      	beq.n	8010e64 <tcp_input_delayed_close+0x50>
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e58:	687a      	ldr	r2, [r7, #4]
 8010e5a:	6912      	ldr	r2, [r2, #16]
 8010e5c:	f06f 010e 	mvn.w	r1, #14
 8010e60:	4610      	mov	r0, r2
 8010e62:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010e64:	6879      	ldr	r1, [r7, #4]
 8010e66:	480a      	ldr	r0, [pc, #40]	; (8010e90 <tcp_input_delayed_close+0x7c>)
 8010e68:	f7ff fa50 	bl	801030c <tcp_pcb_remove>
    tcp_free(pcb);
 8010e6c:	6878      	ldr	r0, [r7, #4]
 8010e6e:	f7fe f83d 	bl	800eeec <tcp_free>
    return 1;
 8010e72:	2301      	movs	r3, #1
 8010e74:	e000      	b.n	8010e78 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010e76:	2300      	movs	r3, #0
}
 8010e78:	4618      	mov	r0, r3
 8010e7a:	3708      	adds	r7, #8
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bd80      	pop	{r7, pc}
 8010e80:	0801968c 	.word	0x0801968c
 8010e84:	0801985c 	.word	0x0801985c
 8010e88:	080196d8 	.word	0x080196d8
 8010e8c:	20011065 	.word	0x20011065
 8010e90:	2001102c 	.word	0x2001102c

08010e94 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010e94:	b590      	push	{r4, r7, lr}
 8010e96:	b08b      	sub	sp, #44	; 0x2c
 8010e98:	af04      	add	r7, sp, #16
 8010e9a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010e9c:	4b6f      	ldr	r3, [pc, #444]	; (801105c <tcp_listen_input+0x1c8>)
 8010e9e:	781b      	ldrb	r3, [r3, #0]
 8010ea0:	f003 0304 	and.w	r3, r3, #4
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	f040 80d2 	bne.w	801104e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d106      	bne.n	8010ebe <tcp_listen_input+0x2a>
 8010eb0:	4b6b      	ldr	r3, [pc, #428]	; (8011060 <tcp_listen_input+0x1cc>)
 8010eb2:	f240 2281 	movw	r2, #641	; 0x281
 8010eb6:	496b      	ldr	r1, [pc, #428]	; (8011064 <tcp_listen_input+0x1d0>)
 8010eb8:	486b      	ldr	r0, [pc, #428]	; (8011068 <tcp_listen_input+0x1d4>)
 8010eba:	f006 f897 	bl	8016fec <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8010ebe:	4b67      	ldr	r3, [pc, #412]	; (801105c <tcp_listen_input+0x1c8>)
 8010ec0:	781b      	ldrb	r3, [r3, #0]
 8010ec2:	f003 0310 	and.w	r3, r3, #16
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d019      	beq.n	8010efe <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010eca:	4b68      	ldr	r3, [pc, #416]	; (801106c <tcp_listen_input+0x1d8>)
 8010ecc:	6819      	ldr	r1, [r3, #0]
 8010ece:	4b68      	ldr	r3, [pc, #416]	; (8011070 <tcp_listen_input+0x1dc>)
 8010ed0:	881b      	ldrh	r3, [r3, #0]
 8010ed2:	461a      	mov	r2, r3
 8010ed4:	4b67      	ldr	r3, [pc, #412]	; (8011074 <tcp_listen_input+0x1e0>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010eda:	4b67      	ldr	r3, [pc, #412]	; (8011078 <tcp_listen_input+0x1e4>)
 8010edc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ede:	885b      	ldrh	r3, [r3, #2]
 8010ee0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ee2:	4a65      	ldr	r2, [pc, #404]	; (8011078 <tcp_listen_input+0x1e4>)
 8010ee4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ee6:	8812      	ldrh	r2, [r2, #0]
 8010ee8:	b292      	uxth	r2, r2
 8010eea:	9202      	str	r2, [sp, #8]
 8010eec:	9301      	str	r3, [sp, #4]
 8010eee:	4b63      	ldr	r3, [pc, #396]	; (801107c <tcp_listen_input+0x1e8>)
 8010ef0:	9300      	str	r3, [sp, #0]
 8010ef2:	4b63      	ldr	r3, [pc, #396]	; (8011080 <tcp_listen_input+0x1ec>)
 8010ef4:	4602      	mov	r2, r0
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f002 ff80 	bl	8013dfc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010efc:	e0a9      	b.n	8011052 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8010efe:	4b57      	ldr	r3, [pc, #348]	; (801105c <tcp_listen_input+0x1c8>)
 8010f00:	781b      	ldrb	r3, [r3, #0]
 8010f02:	f003 0302 	and.w	r3, r3, #2
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	f000 80a3 	beq.w	8011052 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	7d5b      	ldrb	r3, [r3, #21]
 8010f10:	4618      	mov	r0, r3
 8010f12:	f7ff f927 	bl	8010164 <tcp_alloc>
 8010f16:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010f18:	697b      	ldr	r3, [r7, #20]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d111      	bne.n	8010f42 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	699b      	ldr	r3, [r3, #24]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d00a      	beq.n	8010f3c <tcp_listen_input+0xa8>
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	699b      	ldr	r3, [r3, #24]
 8010f2a:	687a      	ldr	r2, [r7, #4]
 8010f2c:	6910      	ldr	r0, [r2, #16]
 8010f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8010f32:	2100      	movs	r1, #0
 8010f34:	4798      	blx	r3
 8010f36:	4603      	mov	r3, r0
 8010f38:	73bb      	strb	r3, [r7, #14]
      return;
 8010f3a:	e08b      	b.n	8011054 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010f3c:	23f0      	movs	r3, #240	; 0xf0
 8010f3e:	73bb      	strb	r3, [r7, #14]
      return;
 8010f40:	e088      	b.n	8011054 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010f42:	4b50      	ldr	r3, [pc, #320]	; (8011084 <tcp_listen_input+0x1f0>)
 8010f44:	695a      	ldr	r2, [r3, #20]
 8010f46:	697b      	ldr	r3, [r7, #20]
 8010f48:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010f4a:	4b4e      	ldr	r3, [pc, #312]	; (8011084 <tcp_listen_input+0x1f0>)
 8010f4c:	691a      	ldr	r2, [r3, #16]
 8010f4e:	697b      	ldr	r3, [r7, #20]
 8010f50:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	8ada      	ldrh	r2, [r3, #22]
 8010f56:	697b      	ldr	r3, [r7, #20]
 8010f58:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010f5a:	4b47      	ldr	r3, [pc, #284]	; (8011078 <tcp_listen_input+0x1e4>)
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	881b      	ldrh	r3, [r3, #0]
 8010f60:	b29a      	uxth	r2, r3
 8010f62:	697b      	ldr	r3, [r7, #20]
 8010f64:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010f66:	697b      	ldr	r3, [r7, #20]
 8010f68:	2203      	movs	r2, #3
 8010f6a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010f6c:	4b41      	ldr	r3, [pc, #260]	; (8011074 <tcp_listen_input+0x1e0>)
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	1c5a      	adds	r2, r3, #1
 8010f72:	697b      	ldr	r3, [r7, #20]
 8010f74:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010f76:	697b      	ldr	r3, [r7, #20]
 8010f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8010f7e:	6978      	ldr	r0, [r7, #20]
 8010f80:	f7ff fa58 	bl	8010434 <tcp_next_iss>
 8010f84:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010f86:	697b      	ldr	r3, [r7, #20]
 8010f88:	693a      	ldr	r2, [r7, #16]
 8010f8a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010f8c:	697b      	ldr	r3, [r7, #20]
 8010f8e:	693a      	ldr	r2, [r7, #16]
 8010f90:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8010f92:	697b      	ldr	r3, [r7, #20]
 8010f94:	693a      	ldr	r2, [r7, #16]
 8010f96:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010f98:	697b      	ldr	r3, [r7, #20]
 8010f9a:	693a      	ldr	r2, [r7, #16]
 8010f9c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010f9e:	4b35      	ldr	r3, [pc, #212]	; (8011074 <tcp_listen_input+0x1e0>)
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	1e5a      	subs	r2, r3, #1
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	691a      	ldr	r2, [r3, #16]
 8010fac:	697b      	ldr	r3, [r7, #20]
 8010fae:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010fb0:	697b      	ldr	r3, [r7, #20]
 8010fb2:	687a      	ldr	r2, [r7, #4]
 8010fb4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	7a5b      	ldrb	r3, [r3, #9]
 8010fba:	f003 030c 	and.w	r3, r3, #12
 8010fbe:	b2da      	uxtb	r2, r3
 8010fc0:	697b      	ldr	r3, [r7, #20]
 8010fc2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	7a1a      	ldrb	r2, [r3, #8]
 8010fc8:	697b      	ldr	r3, [r7, #20]
 8010fca:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010fcc:	4b2e      	ldr	r3, [pc, #184]	; (8011088 <tcp_listen_input+0x1f4>)
 8010fce:	681a      	ldr	r2, [r3, #0]
 8010fd0:	697b      	ldr	r3, [r7, #20]
 8010fd2:	60da      	str	r2, [r3, #12]
 8010fd4:	4a2c      	ldr	r2, [pc, #176]	; (8011088 <tcp_listen_input+0x1f4>)
 8010fd6:	697b      	ldr	r3, [r7, #20]
 8010fd8:	6013      	str	r3, [r2, #0]
 8010fda:	f003 f8d1 	bl	8014180 <tcp_timer_needed>
 8010fde:	4b2b      	ldr	r3, [pc, #172]	; (801108c <tcp_listen_input+0x1f8>)
 8010fe0:	2201      	movs	r2, #1
 8010fe2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010fe4:	6978      	ldr	r0, [r7, #20]
 8010fe6:	f001 fd8f 	bl	8012b08 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010fea:	4b23      	ldr	r3, [pc, #140]	; (8011078 <tcp_listen_input+0x1e4>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	89db      	ldrh	r3, [r3, #14]
 8010ff0:	b29a      	uxth	r2, r3
 8010ff2:	697b      	ldr	r3, [r7, #20]
 8010ff4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010ff8:	697b      	ldr	r3, [r7, #20]
 8010ffa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010ffe:	697b      	ldr	r3, [r7, #20]
 8011000:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011004:	697b      	ldr	r3, [r7, #20]
 8011006:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011008:	697b      	ldr	r3, [r7, #20]
 801100a:	3304      	adds	r3, #4
 801100c:	4618      	mov	r0, r3
 801100e:	f004 fcc5 	bl	801599c <ip4_route>
 8011012:	4601      	mov	r1, r0
 8011014:	697b      	ldr	r3, [r7, #20]
 8011016:	3304      	adds	r3, #4
 8011018:	461a      	mov	r2, r3
 801101a:	4620      	mov	r0, r4
 801101c:	f7ff fa30 	bl	8010480 <tcp_eff_send_mss_netif>
 8011020:	4603      	mov	r3, r0
 8011022:	461a      	mov	r2, r3
 8011024:	697b      	ldr	r3, [r7, #20]
 8011026:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011028:	2112      	movs	r1, #18
 801102a:	6978      	ldr	r0, [r7, #20]
 801102c:	f002 f844 	bl	80130b8 <tcp_enqueue_flags>
 8011030:	4603      	mov	r3, r0
 8011032:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d004      	beq.n	8011046 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801103c:	2100      	movs	r1, #0
 801103e:	6978      	ldr	r0, [r7, #20]
 8011040:	f7fe f97e 	bl	800f340 <tcp_abandon>
      return;
 8011044:	e006      	b.n	8011054 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8011046:	6978      	ldr	r0, [r7, #20]
 8011048:	f002 f924 	bl	8013294 <tcp_output>
  return;
 801104c:	e001      	b.n	8011052 <tcp_listen_input+0x1be>
    return;
 801104e:	bf00      	nop
 8011050:	e000      	b.n	8011054 <tcp_listen_input+0x1c0>
  return;
 8011052:	bf00      	nop
}
 8011054:	371c      	adds	r7, #28
 8011056:	46bd      	mov	sp, r7
 8011058:	bd90      	pop	{r4, r7, pc}
 801105a:	bf00      	nop
 801105c:	20011064 	.word	0x20011064
 8011060:	0801968c 	.word	0x0801968c
 8011064:	08019884 	.word	0x08019884
 8011068:	080196d8 	.word	0x080196d8
 801106c:	2001105c 	.word	0x2001105c
 8011070:	20011062 	.word	0x20011062
 8011074:	20011058 	.word	0x20011058
 8011078:	20011048 	.word	0x20011048
 801107c:	2000d8dc 	.word	0x2000d8dc
 8011080:	2000d8e0 	.word	0x2000d8e0
 8011084:	2000d8cc 	.word	0x2000d8cc
 8011088:	2001102c 	.word	0x2001102c
 801108c:	20011034 	.word	0x20011034

08011090 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011090:	b580      	push	{r7, lr}
 8011092:	b086      	sub	sp, #24
 8011094:	af04      	add	r7, sp, #16
 8011096:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011098:	4b2f      	ldr	r3, [pc, #188]	; (8011158 <tcp_timewait_input+0xc8>)
 801109a:	781b      	ldrb	r3, [r3, #0]
 801109c:	f003 0304 	and.w	r3, r3, #4
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d153      	bne.n	801114c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d106      	bne.n	80110b8 <tcp_timewait_input+0x28>
 80110aa:	4b2c      	ldr	r3, [pc, #176]	; (801115c <tcp_timewait_input+0xcc>)
 80110ac:	f240 22ee 	movw	r2, #750	; 0x2ee
 80110b0:	492b      	ldr	r1, [pc, #172]	; (8011160 <tcp_timewait_input+0xd0>)
 80110b2:	482c      	ldr	r0, [pc, #176]	; (8011164 <tcp_timewait_input+0xd4>)
 80110b4:	f005 ff9a 	bl	8016fec <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80110b8:	4b27      	ldr	r3, [pc, #156]	; (8011158 <tcp_timewait_input+0xc8>)
 80110ba:	781b      	ldrb	r3, [r3, #0]
 80110bc:	f003 0302 	and.w	r3, r3, #2
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d02a      	beq.n	801111a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80110c4:	4b28      	ldr	r3, [pc, #160]	; (8011168 <tcp_timewait_input+0xd8>)
 80110c6:	681a      	ldr	r2, [r3, #0]
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110cc:	1ad3      	subs	r3, r2, r3
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	db2d      	blt.n	801112e <tcp_timewait_input+0x9e>
 80110d2:	4b25      	ldr	r3, [pc, #148]	; (8011168 <tcp_timewait_input+0xd8>)
 80110d4:	681a      	ldr	r2, [r3, #0]
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110da:	6879      	ldr	r1, [r7, #4]
 80110dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80110de:	440b      	add	r3, r1
 80110e0:	1ad3      	subs	r3, r2, r3
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	dc23      	bgt.n	801112e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80110e6:	4b21      	ldr	r3, [pc, #132]	; (801116c <tcp_timewait_input+0xdc>)
 80110e8:	6819      	ldr	r1, [r3, #0]
 80110ea:	4b21      	ldr	r3, [pc, #132]	; (8011170 <tcp_timewait_input+0xe0>)
 80110ec:	881b      	ldrh	r3, [r3, #0]
 80110ee:	461a      	mov	r2, r3
 80110f0:	4b1d      	ldr	r3, [pc, #116]	; (8011168 <tcp_timewait_input+0xd8>)
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80110f6:	4b1f      	ldr	r3, [pc, #124]	; (8011174 <tcp_timewait_input+0xe4>)
 80110f8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80110fa:	885b      	ldrh	r3, [r3, #2]
 80110fc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80110fe:	4a1d      	ldr	r2, [pc, #116]	; (8011174 <tcp_timewait_input+0xe4>)
 8011100:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011102:	8812      	ldrh	r2, [r2, #0]
 8011104:	b292      	uxth	r2, r2
 8011106:	9202      	str	r2, [sp, #8]
 8011108:	9301      	str	r3, [sp, #4]
 801110a:	4b1b      	ldr	r3, [pc, #108]	; (8011178 <tcp_timewait_input+0xe8>)
 801110c:	9300      	str	r3, [sp, #0]
 801110e:	4b1b      	ldr	r3, [pc, #108]	; (801117c <tcp_timewait_input+0xec>)
 8011110:	4602      	mov	r2, r0
 8011112:	6878      	ldr	r0, [r7, #4]
 8011114:	f002 fe72 	bl	8013dfc <tcp_rst>
      return;
 8011118:	e01b      	b.n	8011152 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801111a:	4b0f      	ldr	r3, [pc, #60]	; (8011158 <tcp_timewait_input+0xc8>)
 801111c:	781b      	ldrb	r3, [r3, #0]
 801111e:	f003 0301 	and.w	r3, r3, #1
 8011122:	2b00      	cmp	r3, #0
 8011124:	d003      	beq.n	801112e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011126:	4b16      	ldr	r3, [pc, #88]	; (8011180 <tcp_timewait_input+0xf0>)
 8011128:	681a      	ldr	r2, [r3, #0]
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801112e:	4b10      	ldr	r3, [pc, #64]	; (8011170 <tcp_timewait_input+0xe0>)
 8011130:	881b      	ldrh	r3, [r3, #0]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d00c      	beq.n	8011150 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	8b5b      	ldrh	r3, [r3, #26]
 801113a:	f043 0302 	orr.w	r3, r3, #2
 801113e:	b29a      	uxth	r2, r3
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011144:	6878      	ldr	r0, [r7, #4]
 8011146:	f002 f8a5 	bl	8013294 <tcp_output>
  }
  return;
 801114a:	e001      	b.n	8011150 <tcp_timewait_input+0xc0>
    return;
 801114c:	bf00      	nop
 801114e:	e000      	b.n	8011152 <tcp_timewait_input+0xc2>
  return;
 8011150:	bf00      	nop
}
 8011152:	3708      	adds	r7, #8
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}
 8011158:	20011064 	.word	0x20011064
 801115c:	0801968c 	.word	0x0801968c
 8011160:	080198a4 	.word	0x080198a4
 8011164:	080196d8 	.word	0x080196d8
 8011168:	20011058 	.word	0x20011058
 801116c:	2001105c 	.word	0x2001105c
 8011170:	20011062 	.word	0x20011062
 8011174:	20011048 	.word	0x20011048
 8011178:	2000d8dc 	.word	0x2000d8dc
 801117c:	2000d8e0 	.word	0x2000d8e0
 8011180:	20011020 	.word	0x20011020

08011184 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011184:	b590      	push	{r4, r7, lr}
 8011186:	b08d      	sub	sp, #52	; 0x34
 8011188:	af04      	add	r7, sp, #16
 801118a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801118c:	2300      	movs	r3, #0
 801118e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011190:	2300      	movs	r3, #0
 8011192:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d106      	bne.n	80111a8 <tcp_process+0x24>
 801119a:	4b9d      	ldr	r3, [pc, #628]	; (8011410 <tcp_process+0x28c>)
 801119c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80111a0:	499c      	ldr	r1, [pc, #624]	; (8011414 <tcp_process+0x290>)
 80111a2:	489d      	ldr	r0, [pc, #628]	; (8011418 <tcp_process+0x294>)
 80111a4:	f005 ff22 	bl	8016fec <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80111a8:	4b9c      	ldr	r3, [pc, #624]	; (801141c <tcp_process+0x298>)
 80111aa:	781b      	ldrb	r3, [r3, #0]
 80111ac:	f003 0304 	and.w	r3, r3, #4
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d04e      	beq.n	8011252 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	7d1b      	ldrb	r3, [r3, #20]
 80111b8:	2b02      	cmp	r3, #2
 80111ba:	d108      	bne.n	80111ce <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80111c0:	4b97      	ldr	r3, [pc, #604]	; (8011420 <tcp_process+0x29c>)
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	429a      	cmp	r2, r3
 80111c6:	d123      	bne.n	8011210 <tcp_process+0x8c>
        acceptable = 1;
 80111c8:	2301      	movs	r3, #1
 80111ca:	76fb      	strb	r3, [r7, #27]
 80111cc:	e020      	b.n	8011210 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80111d2:	4b94      	ldr	r3, [pc, #592]	; (8011424 <tcp_process+0x2a0>)
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	429a      	cmp	r2, r3
 80111d8:	d102      	bne.n	80111e0 <tcp_process+0x5c>
        acceptable = 1;
 80111da:	2301      	movs	r3, #1
 80111dc:	76fb      	strb	r3, [r7, #27]
 80111de:	e017      	b.n	8011210 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80111e0:	4b90      	ldr	r3, [pc, #576]	; (8011424 <tcp_process+0x2a0>)
 80111e2:	681a      	ldr	r2, [r3, #0]
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111e8:	1ad3      	subs	r3, r2, r3
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	db10      	blt.n	8011210 <tcp_process+0x8c>
 80111ee:	4b8d      	ldr	r3, [pc, #564]	; (8011424 <tcp_process+0x2a0>)
 80111f0:	681a      	ldr	r2, [r3, #0]
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111f6:	6879      	ldr	r1, [r7, #4]
 80111f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80111fa:	440b      	add	r3, r1
 80111fc:	1ad3      	subs	r3, r2, r3
 80111fe:	2b00      	cmp	r3, #0
 8011200:	dc06      	bgt.n	8011210 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	8b5b      	ldrh	r3, [r3, #26]
 8011206:	f043 0302 	orr.w	r3, r3, #2
 801120a:	b29a      	uxth	r2, r3
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011210:	7efb      	ldrb	r3, [r7, #27]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d01b      	beq.n	801124e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	7d1b      	ldrb	r3, [r3, #20]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d106      	bne.n	801122c <tcp_process+0xa8>
 801121e:	4b7c      	ldr	r3, [pc, #496]	; (8011410 <tcp_process+0x28c>)
 8011220:	f44f 724e 	mov.w	r2, #824	; 0x338
 8011224:	4980      	ldr	r1, [pc, #512]	; (8011428 <tcp_process+0x2a4>)
 8011226:	487c      	ldr	r0, [pc, #496]	; (8011418 <tcp_process+0x294>)
 8011228:	f005 fee0 	bl	8016fec <iprintf>
      recv_flags |= TF_RESET;
 801122c:	4b7f      	ldr	r3, [pc, #508]	; (801142c <tcp_process+0x2a8>)
 801122e:	781b      	ldrb	r3, [r3, #0]
 8011230:	f043 0308 	orr.w	r3, r3, #8
 8011234:	b2da      	uxtb	r2, r3
 8011236:	4b7d      	ldr	r3, [pc, #500]	; (801142c <tcp_process+0x2a8>)
 8011238:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	8b5b      	ldrh	r3, [r3, #26]
 801123e:	f023 0301 	bic.w	r3, r3, #1
 8011242:	b29a      	uxth	r2, r3
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011248:	f06f 030d 	mvn.w	r3, #13
 801124c:	e37a      	b.n	8011944 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801124e:	2300      	movs	r3, #0
 8011250:	e378      	b.n	8011944 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011252:	4b72      	ldr	r3, [pc, #456]	; (801141c <tcp_process+0x298>)
 8011254:	781b      	ldrb	r3, [r3, #0]
 8011256:	f003 0302 	and.w	r3, r3, #2
 801125a:	2b00      	cmp	r3, #0
 801125c:	d010      	beq.n	8011280 <tcp_process+0xfc>
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	7d1b      	ldrb	r3, [r3, #20]
 8011262:	2b02      	cmp	r3, #2
 8011264:	d00c      	beq.n	8011280 <tcp_process+0xfc>
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	7d1b      	ldrb	r3, [r3, #20]
 801126a:	2b03      	cmp	r3, #3
 801126c:	d008      	beq.n	8011280 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	8b5b      	ldrh	r3, [r3, #26]
 8011272:	f043 0302 	orr.w	r3, r3, #2
 8011276:	b29a      	uxth	r2, r3
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801127c:	2300      	movs	r3, #0
 801127e:	e361      	b.n	8011944 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	8b5b      	ldrh	r3, [r3, #26]
 8011284:	f003 0310 	and.w	r3, r3, #16
 8011288:	2b00      	cmp	r3, #0
 801128a:	d103      	bne.n	8011294 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801128c:	4b68      	ldr	r3, [pc, #416]	; (8011430 <tcp_process+0x2ac>)
 801128e:	681a      	ldr	r2, [r3, #0]
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	2200      	movs	r2, #0
 8011298:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	2200      	movs	r2, #0
 80112a0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80112a4:	6878      	ldr	r0, [r7, #4]
 80112a6:	f001 fc2f 	bl	8012b08 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	7d1b      	ldrb	r3, [r3, #20]
 80112ae:	3b02      	subs	r3, #2
 80112b0:	2b07      	cmp	r3, #7
 80112b2:	f200 8337 	bhi.w	8011924 <tcp_process+0x7a0>
 80112b6:	a201      	add	r2, pc, #4	; (adr r2, 80112bc <tcp_process+0x138>)
 80112b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112bc:	080112dd 	.word	0x080112dd
 80112c0:	0801150d 	.word	0x0801150d
 80112c4:	08011685 	.word	0x08011685
 80112c8:	080116af 	.word	0x080116af
 80112cc:	080117d3 	.word	0x080117d3
 80112d0:	08011685 	.word	0x08011685
 80112d4:	0801185f 	.word	0x0801185f
 80112d8:	080118ef 	.word	0x080118ef
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80112dc:	4b4f      	ldr	r3, [pc, #316]	; (801141c <tcp_process+0x298>)
 80112de:	781b      	ldrb	r3, [r3, #0]
 80112e0:	f003 0310 	and.w	r3, r3, #16
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	f000 80e4 	beq.w	80114b2 <tcp_process+0x32e>
 80112ea:	4b4c      	ldr	r3, [pc, #304]	; (801141c <tcp_process+0x298>)
 80112ec:	781b      	ldrb	r3, [r3, #0]
 80112ee:	f003 0302 	and.w	r3, r3, #2
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	f000 80dd 	beq.w	80114b2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112fc:	1c5a      	adds	r2, r3, #1
 80112fe:	4b48      	ldr	r3, [pc, #288]	; (8011420 <tcp_process+0x29c>)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	429a      	cmp	r2, r3
 8011304:	f040 80d5 	bne.w	80114b2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011308:	4b46      	ldr	r3, [pc, #280]	; (8011424 <tcp_process+0x2a0>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	1c5a      	adds	r2, r3, #1
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801131a:	4b41      	ldr	r3, [pc, #260]	; (8011420 <tcp_process+0x29c>)
 801131c:	681a      	ldr	r2, [r3, #0]
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8011322:	4b44      	ldr	r3, [pc, #272]	; (8011434 <tcp_process+0x2b0>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	89db      	ldrh	r3, [r3, #14]
 8011328:	b29a      	uxth	r2, r3
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801133c:	4b39      	ldr	r3, [pc, #228]	; (8011424 <tcp_process+0x2a0>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	1e5a      	subs	r2, r3, #1
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	2204      	movs	r2, #4
 801134a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	3304      	adds	r3, #4
 8011354:	4618      	mov	r0, r3
 8011356:	f004 fb21 	bl	801599c <ip4_route>
 801135a:	4601      	mov	r1, r0
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	3304      	adds	r3, #4
 8011360:	461a      	mov	r2, r3
 8011362:	4620      	mov	r0, r4
 8011364:	f7ff f88c 	bl	8010480 <tcp_eff_send_mss_netif>
 8011368:	4603      	mov	r3, r0
 801136a:	461a      	mov	r2, r3
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011374:	009a      	lsls	r2, r3, #2
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801137a:	005b      	lsls	r3, r3, #1
 801137c:	f241 111c 	movw	r1, #4380	; 0x111c
 8011380:	428b      	cmp	r3, r1
 8011382:	bf38      	it	cc
 8011384:	460b      	movcc	r3, r1
 8011386:	429a      	cmp	r2, r3
 8011388:	d204      	bcs.n	8011394 <tcp_process+0x210>
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801138e:	009b      	lsls	r3, r3, #2
 8011390:	b29b      	uxth	r3, r3
 8011392:	e00d      	b.n	80113b0 <tcp_process+0x22c>
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011398:	005b      	lsls	r3, r3, #1
 801139a:	f241 121c 	movw	r2, #4380	; 0x111c
 801139e:	4293      	cmp	r3, r2
 80113a0:	d904      	bls.n	80113ac <tcp_process+0x228>
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80113a6:	005b      	lsls	r3, r3, #1
 80113a8:	b29b      	uxth	r3, r3
 80113aa:	e001      	b.n	80113b0 <tcp_process+0x22c>
 80113ac:	f241 131c 	movw	r3, #4380	; 0x111c
 80113b0:	687a      	ldr	r2, [r7, #4]
 80113b2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d106      	bne.n	80113ce <tcp_process+0x24a>
 80113c0:	4b13      	ldr	r3, [pc, #76]	; (8011410 <tcp_process+0x28c>)
 80113c2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80113c6:	491c      	ldr	r1, [pc, #112]	; (8011438 <tcp_process+0x2b4>)
 80113c8:	4813      	ldr	r0, [pc, #76]	; (8011418 <tcp_process+0x294>)
 80113ca:	f005 fe0f 	bl	8016fec <iprintf>
        --pcb->snd_queuelen;
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80113d4:	3b01      	subs	r3, #1
 80113d6:	b29a      	uxth	r2, r3
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113e2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80113e4:	69fb      	ldr	r3, [r7, #28]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d12a      	bne.n	8011440 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113ee:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80113f0:	69fb      	ldr	r3, [r7, #28]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d106      	bne.n	8011404 <tcp_process+0x280>
 80113f6:	4b06      	ldr	r3, [pc, #24]	; (8011410 <tcp_process+0x28c>)
 80113f8:	f44f 725d 	mov.w	r2, #884	; 0x374
 80113fc:	490f      	ldr	r1, [pc, #60]	; (801143c <tcp_process+0x2b8>)
 80113fe:	4806      	ldr	r0, [pc, #24]	; (8011418 <tcp_process+0x294>)
 8011400:	f005 fdf4 	bl	8016fec <iprintf>
          pcb->unsent = rseg->next;
 8011404:	69fb      	ldr	r3, [r7, #28]
 8011406:	681a      	ldr	r2, [r3, #0]
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	66da      	str	r2, [r3, #108]	; 0x6c
 801140c:	e01c      	b.n	8011448 <tcp_process+0x2c4>
 801140e:	bf00      	nop
 8011410:	0801968c 	.word	0x0801968c
 8011414:	080198c4 	.word	0x080198c4
 8011418:	080196d8 	.word	0x080196d8
 801141c:	20011064 	.word	0x20011064
 8011420:	2001105c 	.word	0x2001105c
 8011424:	20011058 	.word	0x20011058
 8011428:	080198e0 	.word	0x080198e0
 801142c:	20011065 	.word	0x20011065
 8011430:	20011020 	.word	0x20011020
 8011434:	20011048 	.word	0x20011048
 8011438:	08019900 	.word	0x08019900
 801143c:	08019918 	.word	0x08019918
        } else {
          pcb->unacked = rseg->next;
 8011440:	69fb      	ldr	r3, [r7, #28]
 8011442:	681a      	ldr	r2, [r3, #0]
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011448:	69f8      	ldr	r0, [r7, #28]
 801144a:	f7fe fd22 	bl	800fe92 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011452:	2b00      	cmp	r3, #0
 8011454:	d104      	bne.n	8011460 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801145c:	861a      	strh	r2, [r3, #48]	; 0x30
 801145e:	e006      	b.n	801146e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	2200      	movs	r2, #0
 8011464:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	2200      	movs	r2, #0
 801146a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011474:	2b00      	cmp	r3, #0
 8011476:	d00a      	beq.n	801148e <tcp_process+0x30a>
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801147e:	687a      	ldr	r2, [r7, #4]
 8011480:	6910      	ldr	r0, [r2, #16]
 8011482:	2200      	movs	r2, #0
 8011484:	6879      	ldr	r1, [r7, #4]
 8011486:	4798      	blx	r3
 8011488:	4603      	mov	r3, r0
 801148a:	76bb      	strb	r3, [r7, #26]
 801148c:	e001      	b.n	8011492 <tcp_process+0x30e>
 801148e:	2300      	movs	r3, #0
 8011490:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8011492:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011496:	f113 0f0d 	cmn.w	r3, #13
 801149a:	d102      	bne.n	80114a2 <tcp_process+0x31e>
          return ERR_ABRT;
 801149c:	f06f 030c 	mvn.w	r3, #12
 80114a0:	e250      	b.n	8011944 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	8b5b      	ldrh	r3, [r3, #26]
 80114a6:	f043 0302 	orr.w	r3, r3, #2
 80114aa:	b29a      	uxth	r2, r3
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80114b0:	e23a      	b.n	8011928 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80114b2:	4b98      	ldr	r3, [pc, #608]	; (8011714 <tcp_process+0x590>)
 80114b4:	781b      	ldrb	r3, [r3, #0]
 80114b6:	f003 0310 	and.w	r3, r3, #16
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	f000 8234 	beq.w	8011928 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80114c0:	4b95      	ldr	r3, [pc, #596]	; (8011718 <tcp_process+0x594>)
 80114c2:	6819      	ldr	r1, [r3, #0]
 80114c4:	4b95      	ldr	r3, [pc, #596]	; (801171c <tcp_process+0x598>)
 80114c6:	881b      	ldrh	r3, [r3, #0]
 80114c8:	461a      	mov	r2, r3
 80114ca:	4b95      	ldr	r3, [pc, #596]	; (8011720 <tcp_process+0x59c>)
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80114d0:	4b94      	ldr	r3, [pc, #592]	; (8011724 <tcp_process+0x5a0>)
 80114d2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80114d4:	885b      	ldrh	r3, [r3, #2]
 80114d6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80114d8:	4a92      	ldr	r2, [pc, #584]	; (8011724 <tcp_process+0x5a0>)
 80114da:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80114dc:	8812      	ldrh	r2, [r2, #0]
 80114de:	b292      	uxth	r2, r2
 80114e0:	9202      	str	r2, [sp, #8]
 80114e2:	9301      	str	r3, [sp, #4]
 80114e4:	4b90      	ldr	r3, [pc, #576]	; (8011728 <tcp_process+0x5a4>)
 80114e6:	9300      	str	r3, [sp, #0]
 80114e8:	4b90      	ldr	r3, [pc, #576]	; (801172c <tcp_process+0x5a8>)
 80114ea:	4602      	mov	r2, r0
 80114ec:	6878      	ldr	r0, [r7, #4]
 80114ee:	f002 fc85 	bl	8013dfc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80114f8:	2b05      	cmp	r3, #5
 80114fa:	f200 8215 	bhi.w	8011928 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	2200      	movs	r2, #0
 8011502:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8011504:	6878      	ldr	r0, [r7, #4]
 8011506:	f002 fa4f 	bl	80139a8 <tcp_rexmit_rto>
      break;
 801150a:	e20d      	b.n	8011928 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801150c:	4b81      	ldr	r3, [pc, #516]	; (8011714 <tcp_process+0x590>)
 801150e:	781b      	ldrb	r3, [r3, #0]
 8011510:	f003 0310 	and.w	r3, r3, #16
 8011514:	2b00      	cmp	r3, #0
 8011516:	f000 80a1 	beq.w	801165c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801151a:	4b7f      	ldr	r3, [pc, #508]	; (8011718 <tcp_process+0x594>)
 801151c:	681a      	ldr	r2, [r3, #0]
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011522:	1ad3      	subs	r3, r2, r3
 8011524:	3b01      	subs	r3, #1
 8011526:	2b00      	cmp	r3, #0
 8011528:	db7e      	blt.n	8011628 <tcp_process+0x4a4>
 801152a:	4b7b      	ldr	r3, [pc, #492]	; (8011718 <tcp_process+0x594>)
 801152c:	681a      	ldr	r2, [r3, #0]
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011532:	1ad3      	subs	r3, r2, r3
 8011534:	2b00      	cmp	r3, #0
 8011536:	dc77      	bgt.n	8011628 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	2204      	movs	r2, #4
 801153c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011542:	2b00      	cmp	r3, #0
 8011544:	d102      	bne.n	801154c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011546:	23fa      	movs	r3, #250	; 0xfa
 8011548:	76bb      	strb	r3, [r7, #26]
 801154a:	e01d      	b.n	8011588 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011550:	699b      	ldr	r3, [r3, #24]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d106      	bne.n	8011564 <tcp_process+0x3e0>
 8011556:	4b76      	ldr	r3, [pc, #472]	; (8011730 <tcp_process+0x5ac>)
 8011558:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801155c:	4975      	ldr	r1, [pc, #468]	; (8011734 <tcp_process+0x5b0>)
 801155e:	4876      	ldr	r0, [pc, #472]	; (8011738 <tcp_process+0x5b4>)
 8011560:	f005 fd44 	bl	8016fec <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011568:	699b      	ldr	r3, [r3, #24]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d00a      	beq.n	8011584 <tcp_process+0x400>
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011572:	699b      	ldr	r3, [r3, #24]
 8011574:	687a      	ldr	r2, [r7, #4]
 8011576:	6910      	ldr	r0, [r2, #16]
 8011578:	2200      	movs	r2, #0
 801157a:	6879      	ldr	r1, [r7, #4]
 801157c:	4798      	blx	r3
 801157e:	4603      	mov	r3, r0
 8011580:	76bb      	strb	r3, [r7, #26]
 8011582:	e001      	b.n	8011588 <tcp_process+0x404>
 8011584:	23f0      	movs	r3, #240	; 0xf0
 8011586:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011588:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d00a      	beq.n	80115a6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011590:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011594:	f113 0f0d 	cmn.w	r3, #13
 8011598:	d002      	beq.n	80115a0 <tcp_process+0x41c>
              tcp_abort(pcb);
 801159a:	6878      	ldr	r0, [r7, #4]
 801159c:	f7fd ff8e 	bl	800f4bc <tcp_abort>
            }
            return ERR_ABRT;
 80115a0:	f06f 030c 	mvn.w	r3, #12
 80115a4:	e1ce      	b.n	8011944 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80115a6:	6878      	ldr	r0, [r7, #4]
 80115a8:	f000 fae0 	bl	8011b6c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80115ac:	4b63      	ldr	r3, [pc, #396]	; (801173c <tcp_process+0x5b8>)
 80115ae:	881b      	ldrh	r3, [r3, #0]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d005      	beq.n	80115c0 <tcp_process+0x43c>
            recv_acked--;
 80115b4:	4b61      	ldr	r3, [pc, #388]	; (801173c <tcp_process+0x5b8>)
 80115b6:	881b      	ldrh	r3, [r3, #0]
 80115b8:	3b01      	subs	r3, #1
 80115ba:	b29a      	uxth	r2, r3
 80115bc:	4b5f      	ldr	r3, [pc, #380]	; (801173c <tcp_process+0x5b8>)
 80115be:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115c4:	009a      	lsls	r2, r3, #2
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115ca:	005b      	lsls	r3, r3, #1
 80115cc:	f241 111c 	movw	r1, #4380	; 0x111c
 80115d0:	428b      	cmp	r3, r1
 80115d2:	bf38      	it	cc
 80115d4:	460b      	movcc	r3, r1
 80115d6:	429a      	cmp	r2, r3
 80115d8:	d204      	bcs.n	80115e4 <tcp_process+0x460>
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115de:	009b      	lsls	r3, r3, #2
 80115e0:	b29b      	uxth	r3, r3
 80115e2:	e00d      	b.n	8011600 <tcp_process+0x47c>
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115e8:	005b      	lsls	r3, r3, #1
 80115ea:	f241 121c 	movw	r2, #4380	; 0x111c
 80115ee:	4293      	cmp	r3, r2
 80115f0:	d904      	bls.n	80115fc <tcp_process+0x478>
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115f6:	005b      	lsls	r3, r3, #1
 80115f8:	b29b      	uxth	r3, r3
 80115fa:	e001      	b.n	8011600 <tcp_process+0x47c>
 80115fc:	f241 131c 	movw	r3, #4380	; 0x111c
 8011600:	687a      	ldr	r2, [r7, #4]
 8011602:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011606:	4b4e      	ldr	r3, [pc, #312]	; (8011740 <tcp_process+0x5bc>)
 8011608:	781b      	ldrb	r3, [r3, #0]
 801160a:	f003 0320 	and.w	r3, r3, #32
 801160e:	2b00      	cmp	r3, #0
 8011610:	d037      	beq.n	8011682 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	8b5b      	ldrh	r3, [r3, #26]
 8011616:	f043 0302 	orr.w	r3, r3, #2
 801161a:	b29a      	uxth	r2, r3
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	2207      	movs	r2, #7
 8011624:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011626:	e02c      	b.n	8011682 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011628:	4b3b      	ldr	r3, [pc, #236]	; (8011718 <tcp_process+0x594>)
 801162a:	6819      	ldr	r1, [r3, #0]
 801162c:	4b3b      	ldr	r3, [pc, #236]	; (801171c <tcp_process+0x598>)
 801162e:	881b      	ldrh	r3, [r3, #0]
 8011630:	461a      	mov	r2, r3
 8011632:	4b3b      	ldr	r3, [pc, #236]	; (8011720 <tcp_process+0x59c>)
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011638:	4b3a      	ldr	r3, [pc, #232]	; (8011724 <tcp_process+0x5a0>)
 801163a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801163c:	885b      	ldrh	r3, [r3, #2]
 801163e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011640:	4a38      	ldr	r2, [pc, #224]	; (8011724 <tcp_process+0x5a0>)
 8011642:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011644:	8812      	ldrh	r2, [r2, #0]
 8011646:	b292      	uxth	r2, r2
 8011648:	9202      	str	r2, [sp, #8]
 801164a:	9301      	str	r3, [sp, #4]
 801164c:	4b36      	ldr	r3, [pc, #216]	; (8011728 <tcp_process+0x5a4>)
 801164e:	9300      	str	r3, [sp, #0]
 8011650:	4b36      	ldr	r3, [pc, #216]	; (801172c <tcp_process+0x5a8>)
 8011652:	4602      	mov	r2, r0
 8011654:	6878      	ldr	r0, [r7, #4]
 8011656:	f002 fbd1 	bl	8013dfc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801165a:	e167      	b.n	801192c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801165c:	4b2d      	ldr	r3, [pc, #180]	; (8011714 <tcp_process+0x590>)
 801165e:	781b      	ldrb	r3, [r3, #0]
 8011660:	f003 0302 	and.w	r3, r3, #2
 8011664:	2b00      	cmp	r3, #0
 8011666:	f000 8161 	beq.w	801192c <tcp_process+0x7a8>
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801166e:	1e5a      	subs	r2, r3, #1
 8011670:	4b2b      	ldr	r3, [pc, #172]	; (8011720 <tcp_process+0x59c>)
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	429a      	cmp	r2, r3
 8011676:	f040 8159 	bne.w	801192c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801167a:	6878      	ldr	r0, [r7, #4]
 801167c:	f002 f9b6 	bl	80139ec <tcp_rexmit>
      break;
 8011680:	e154      	b.n	801192c <tcp_process+0x7a8>
 8011682:	e153      	b.n	801192c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011684:	6878      	ldr	r0, [r7, #4]
 8011686:	f000 fa71 	bl	8011b6c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801168a:	4b2d      	ldr	r3, [pc, #180]	; (8011740 <tcp_process+0x5bc>)
 801168c:	781b      	ldrb	r3, [r3, #0]
 801168e:	f003 0320 	and.w	r3, r3, #32
 8011692:	2b00      	cmp	r3, #0
 8011694:	f000 814c 	beq.w	8011930 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	8b5b      	ldrh	r3, [r3, #26]
 801169c:	f043 0302 	orr.w	r3, r3, #2
 80116a0:	b29a      	uxth	r2, r3
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2207      	movs	r2, #7
 80116aa:	751a      	strb	r2, [r3, #20]
      }
      break;
 80116ac:	e140      	b.n	8011930 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80116ae:	6878      	ldr	r0, [r7, #4]
 80116b0:	f000 fa5c 	bl	8011b6c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80116b4:	4b22      	ldr	r3, [pc, #136]	; (8011740 <tcp_process+0x5bc>)
 80116b6:	781b      	ldrb	r3, [r3, #0]
 80116b8:	f003 0320 	and.w	r3, r3, #32
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d071      	beq.n	80117a4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80116c0:	4b14      	ldr	r3, [pc, #80]	; (8011714 <tcp_process+0x590>)
 80116c2:	781b      	ldrb	r3, [r3, #0]
 80116c4:	f003 0310 	and.w	r3, r3, #16
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d060      	beq.n	801178e <tcp_process+0x60a>
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80116d0:	4b11      	ldr	r3, [pc, #68]	; (8011718 <tcp_process+0x594>)
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	429a      	cmp	r2, r3
 80116d6:	d15a      	bne.n	801178e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d156      	bne.n	801178e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	8b5b      	ldrh	r3, [r3, #26]
 80116e4:	f043 0302 	orr.w	r3, r3, #2
 80116e8:	b29a      	uxth	r2, r3
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80116ee:	6878      	ldr	r0, [r7, #4]
 80116f0:	f7fe fdbc 	bl	801026c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80116f4:	4b13      	ldr	r3, [pc, #76]	; (8011744 <tcp_process+0x5c0>)
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	687a      	ldr	r2, [r7, #4]
 80116fa:	429a      	cmp	r2, r3
 80116fc:	d105      	bne.n	801170a <tcp_process+0x586>
 80116fe:	4b11      	ldr	r3, [pc, #68]	; (8011744 <tcp_process+0x5c0>)
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	68db      	ldr	r3, [r3, #12]
 8011704:	4a0f      	ldr	r2, [pc, #60]	; (8011744 <tcp_process+0x5c0>)
 8011706:	6013      	str	r3, [r2, #0]
 8011708:	e02e      	b.n	8011768 <tcp_process+0x5e4>
 801170a:	4b0e      	ldr	r3, [pc, #56]	; (8011744 <tcp_process+0x5c0>)
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	617b      	str	r3, [r7, #20]
 8011710:	e027      	b.n	8011762 <tcp_process+0x5de>
 8011712:	bf00      	nop
 8011714:	20011064 	.word	0x20011064
 8011718:	2001105c 	.word	0x2001105c
 801171c:	20011062 	.word	0x20011062
 8011720:	20011058 	.word	0x20011058
 8011724:	20011048 	.word	0x20011048
 8011728:	2000d8dc 	.word	0x2000d8dc
 801172c:	2000d8e0 	.word	0x2000d8e0
 8011730:	0801968c 	.word	0x0801968c
 8011734:	0801992c 	.word	0x0801992c
 8011738:	080196d8 	.word	0x080196d8
 801173c:	20011060 	.word	0x20011060
 8011740:	20011065 	.word	0x20011065
 8011744:	2001102c 	.word	0x2001102c
 8011748:	697b      	ldr	r3, [r7, #20]
 801174a:	68db      	ldr	r3, [r3, #12]
 801174c:	687a      	ldr	r2, [r7, #4]
 801174e:	429a      	cmp	r2, r3
 8011750:	d104      	bne.n	801175c <tcp_process+0x5d8>
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	68da      	ldr	r2, [r3, #12]
 8011756:	697b      	ldr	r3, [r7, #20]
 8011758:	60da      	str	r2, [r3, #12]
 801175a:	e005      	b.n	8011768 <tcp_process+0x5e4>
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	68db      	ldr	r3, [r3, #12]
 8011760:	617b      	str	r3, [r7, #20]
 8011762:	697b      	ldr	r3, [r7, #20]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d1ef      	bne.n	8011748 <tcp_process+0x5c4>
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	2200      	movs	r2, #0
 801176c:	60da      	str	r2, [r3, #12]
 801176e:	4b77      	ldr	r3, [pc, #476]	; (801194c <tcp_process+0x7c8>)
 8011770:	2201      	movs	r2, #1
 8011772:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	220a      	movs	r2, #10
 8011778:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801177a:	4b75      	ldr	r3, [pc, #468]	; (8011950 <tcp_process+0x7cc>)
 801177c:	681a      	ldr	r2, [r3, #0]
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	60da      	str	r2, [r3, #12]
 8011782:	4a73      	ldr	r2, [pc, #460]	; (8011950 <tcp_process+0x7cc>)
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	6013      	str	r3, [r2, #0]
 8011788:	f002 fcfa 	bl	8014180 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801178c:	e0d2      	b.n	8011934 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	8b5b      	ldrh	r3, [r3, #26]
 8011792:	f043 0302 	orr.w	r3, r3, #2
 8011796:	b29a      	uxth	r2, r3
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	2208      	movs	r2, #8
 80117a0:	751a      	strb	r2, [r3, #20]
      break;
 80117a2:	e0c7      	b.n	8011934 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80117a4:	4b6b      	ldr	r3, [pc, #428]	; (8011954 <tcp_process+0x7d0>)
 80117a6:	781b      	ldrb	r3, [r3, #0]
 80117a8:	f003 0310 	and.w	r3, r3, #16
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	f000 80c1 	beq.w	8011934 <tcp_process+0x7b0>
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80117b6:	4b68      	ldr	r3, [pc, #416]	; (8011958 <tcp_process+0x7d4>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	429a      	cmp	r2, r3
 80117bc:	f040 80ba 	bne.w	8011934 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	f040 80b5 	bne.w	8011934 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	2206      	movs	r2, #6
 80117ce:	751a      	strb	r2, [r3, #20]
      break;
 80117d0:	e0b0      	b.n	8011934 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80117d2:	6878      	ldr	r0, [r7, #4]
 80117d4:	f000 f9ca 	bl	8011b6c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80117d8:	4b60      	ldr	r3, [pc, #384]	; (801195c <tcp_process+0x7d8>)
 80117da:	781b      	ldrb	r3, [r3, #0]
 80117dc:	f003 0320 	and.w	r3, r3, #32
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	f000 80a9 	beq.w	8011938 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	8b5b      	ldrh	r3, [r3, #26]
 80117ea:	f043 0302 	orr.w	r3, r3, #2
 80117ee:	b29a      	uxth	r2, r3
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80117f4:	6878      	ldr	r0, [r7, #4]
 80117f6:	f7fe fd39 	bl	801026c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80117fa:	4b59      	ldr	r3, [pc, #356]	; (8011960 <tcp_process+0x7dc>)
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	687a      	ldr	r2, [r7, #4]
 8011800:	429a      	cmp	r2, r3
 8011802:	d105      	bne.n	8011810 <tcp_process+0x68c>
 8011804:	4b56      	ldr	r3, [pc, #344]	; (8011960 <tcp_process+0x7dc>)
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	68db      	ldr	r3, [r3, #12]
 801180a:	4a55      	ldr	r2, [pc, #340]	; (8011960 <tcp_process+0x7dc>)
 801180c:	6013      	str	r3, [r2, #0]
 801180e:	e013      	b.n	8011838 <tcp_process+0x6b4>
 8011810:	4b53      	ldr	r3, [pc, #332]	; (8011960 <tcp_process+0x7dc>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	613b      	str	r3, [r7, #16]
 8011816:	e00c      	b.n	8011832 <tcp_process+0x6ae>
 8011818:	693b      	ldr	r3, [r7, #16]
 801181a:	68db      	ldr	r3, [r3, #12]
 801181c:	687a      	ldr	r2, [r7, #4]
 801181e:	429a      	cmp	r2, r3
 8011820:	d104      	bne.n	801182c <tcp_process+0x6a8>
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	68da      	ldr	r2, [r3, #12]
 8011826:	693b      	ldr	r3, [r7, #16]
 8011828:	60da      	str	r2, [r3, #12]
 801182a:	e005      	b.n	8011838 <tcp_process+0x6b4>
 801182c:	693b      	ldr	r3, [r7, #16]
 801182e:	68db      	ldr	r3, [r3, #12]
 8011830:	613b      	str	r3, [r7, #16]
 8011832:	693b      	ldr	r3, [r7, #16]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d1ef      	bne.n	8011818 <tcp_process+0x694>
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	2200      	movs	r2, #0
 801183c:	60da      	str	r2, [r3, #12]
 801183e:	4b43      	ldr	r3, [pc, #268]	; (801194c <tcp_process+0x7c8>)
 8011840:	2201      	movs	r2, #1
 8011842:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	220a      	movs	r2, #10
 8011848:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801184a:	4b41      	ldr	r3, [pc, #260]	; (8011950 <tcp_process+0x7cc>)
 801184c:	681a      	ldr	r2, [r3, #0]
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	60da      	str	r2, [r3, #12]
 8011852:	4a3f      	ldr	r2, [pc, #252]	; (8011950 <tcp_process+0x7cc>)
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	6013      	str	r3, [r2, #0]
 8011858:	f002 fc92 	bl	8014180 <tcp_timer_needed>
      }
      break;
 801185c:	e06c      	b.n	8011938 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801185e:	6878      	ldr	r0, [r7, #4]
 8011860:	f000 f984 	bl	8011b6c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011864:	4b3b      	ldr	r3, [pc, #236]	; (8011954 <tcp_process+0x7d0>)
 8011866:	781b      	ldrb	r3, [r3, #0]
 8011868:	f003 0310 	and.w	r3, r3, #16
 801186c:	2b00      	cmp	r3, #0
 801186e:	d065      	beq.n	801193c <tcp_process+0x7b8>
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011874:	4b38      	ldr	r3, [pc, #224]	; (8011958 <tcp_process+0x7d4>)
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	429a      	cmp	r2, r3
 801187a:	d15f      	bne.n	801193c <tcp_process+0x7b8>
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011880:	2b00      	cmp	r3, #0
 8011882:	d15b      	bne.n	801193c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011884:	6878      	ldr	r0, [r7, #4]
 8011886:	f7fe fcf1 	bl	801026c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801188a:	4b35      	ldr	r3, [pc, #212]	; (8011960 <tcp_process+0x7dc>)
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	687a      	ldr	r2, [r7, #4]
 8011890:	429a      	cmp	r2, r3
 8011892:	d105      	bne.n	80118a0 <tcp_process+0x71c>
 8011894:	4b32      	ldr	r3, [pc, #200]	; (8011960 <tcp_process+0x7dc>)
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	68db      	ldr	r3, [r3, #12]
 801189a:	4a31      	ldr	r2, [pc, #196]	; (8011960 <tcp_process+0x7dc>)
 801189c:	6013      	str	r3, [r2, #0]
 801189e:	e013      	b.n	80118c8 <tcp_process+0x744>
 80118a0:	4b2f      	ldr	r3, [pc, #188]	; (8011960 <tcp_process+0x7dc>)
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	60fb      	str	r3, [r7, #12]
 80118a6:	e00c      	b.n	80118c2 <tcp_process+0x73e>
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	68db      	ldr	r3, [r3, #12]
 80118ac:	687a      	ldr	r2, [r7, #4]
 80118ae:	429a      	cmp	r2, r3
 80118b0:	d104      	bne.n	80118bc <tcp_process+0x738>
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	68da      	ldr	r2, [r3, #12]
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	60da      	str	r2, [r3, #12]
 80118ba:	e005      	b.n	80118c8 <tcp_process+0x744>
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	68db      	ldr	r3, [r3, #12]
 80118c0:	60fb      	str	r3, [r7, #12]
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d1ef      	bne.n	80118a8 <tcp_process+0x724>
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2200      	movs	r2, #0
 80118cc:	60da      	str	r2, [r3, #12]
 80118ce:	4b1f      	ldr	r3, [pc, #124]	; (801194c <tcp_process+0x7c8>)
 80118d0:	2201      	movs	r2, #1
 80118d2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	220a      	movs	r2, #10
 80118d8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80118da:	4b1d      	ldr	r3, [pc, #116]	; (8011950 <tcp_process+0x7cc>)
 80118dc:	681a      	ldr	r2, [r3, #0]
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	60da      	str	r2, [r3, #12]
 80118e2:	4a1b      	ldr	r2, [pc, #108]	; (8011950 <tcp_process+0x7cc>)
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	6013      	str	r3, [r2, #0]
 80118e8:	f002 fc4a 	bl	8014180 <tcp_timer_needed>
      }
      break;
 80118ec:	e026      	b.n	801193c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80118ee:	6878      	ldr	r0, [r7, #4]
 80118f0:	f000 f93c 	bl	8011b6c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80118f4:	4b17      	ldr	r3, [pc, #92]	; (8011954 <tcp_process+0x7d0>)
 80118f6:	781b      	ldrb	r3, [r3, #0]
 80118f8:	f003 0310 	and.w	r3, r3, #16
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d01f      	beq.n	8011940 <tcp_process+0x7bc>
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011904:	4b14      	ldr	r3, [pc, #80]	; (8011958 <tcp_process+0x7d4>)
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	429a      	cmp	r2, r3
 801190a:	d119      	bne.n	8011940 <tcp_process+0x7bc>
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011910:	2b00      	cmp	r3, #0
 8011912:	d115      	bne.n	8011940 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011914:	4b11      	ldr	r3, [pc, #68]	; (801195c <tcp_process+0x7d8>)
 8011916:	781b      	ldrb	r3, [r3, #0]
 8011918:	f043 0310 	orr.w	r3, r3, #16
 801191c:	b2da      	uxtb	r2, r3
 801191e:	4b0f      	ldr	r3, [pc, #60]	; (801195c <tcp_process+0x7d8>)
 8011920:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011922:	e00d      	b.n	8011940 <tcp_process+0x7bc>
    default:
      break;
 8011924:	bf00      	nop
 8011926:	e00c      	b.n	8011942 <tcp_process+0x7be>
      break;
 8011928:	bf00      	nop
 801192a:	e00a      	b.n	8011942 <tcp_process+0x7be>
      break;
 801192c:	bf00      	nop
 801192e:	e008      	b.n	8011942 <tcp_process+0x7be>
      break;
 8011930:	bf00      	nop
 8011932:	e006      	b.n	8011942 <tcp_process+0x7be>
      break;
 8011934:	bf00      	nop
 8011936:	e004      	b.n	8011942 <tcp_process+0x7be>
      break;
 8011938:	bf00      	nop
 801193a:	e002      	b.n	8011942 <tcp_process+0x7be>
      break;
 801193c:	bf00      	nop
 801193e:	e000      	b.n	8011942 <tcp_process+0x7be>
      break;
 8011940:	bf00      	nop
  }
  return ERR_OK;
 8011942:	2300      	movs	r3, #0
}
 8011944:	4618      	mov	r0, r3
 8011946:	3724      	adds	r7, #36	; 0x24
 8011948:	46bd      	mov	sp, r7
 801194a:	bd90      	pop	{r4, r7, pc}
 801194c:	20011034 	.word	0x20011034
 8011950:	20011030 	.word	0x20011030
 8011954:	20011064 	.word	0x20011064
 8011958:	2001105c 	.word	0x2001105c
 801195c:	20011065 	.word	0x20011065
 8011960:	2001102c 	.word	0x2001102c

08011964 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011964:	b590      	push	{r4, r7, lr}
 8011966:	b085      	sub	sp, #20
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
 801196c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d106      	bne.n	8011982 <tcp_oos_insert_segment+0x1e>
 8011974:	4b3b      	ldr	r3, [pc, #236]	; (8011a64 <tcp_oos_insert_segment+0x100>)
 8011976:	f240 421f 	movw	r2, #1055	; 0x41f
 801197a:	493b      	ldr	r1, [pc, #236]	; (8011a68 <tcp_oos_insert_segment+0x104>)
 801197c:	483b      	ldr	r0, [pc, #236]	; (8011a6c <tcp_oos_insert_segment+0x108>)
 801197e:	f005 fb35 	bl	8016fec <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	68db      	ldr	r3, [r3, #12]
 8011986:	899b      	ldrh	r3, [r3, #12]
 8011988:	b29b      	uxth	r3, r3
 801198a:	4618      	mov	r0, r3
 801198c:	f7fb fc10 	bl	800d1b0 <lwip_htons>
 8011990:	4603      	mov	r3, r0
 8011992:	b2db      	uxtb	r3, r3
 8011994:	f003 0301 	and.w	r3, r3, #1
 8011998:	2b00      	cmp	r3, #0
 801199a:	d028      	beq.n	80119ee <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801199c:	6838      	ldr	r0, [r7, #0]
 801199e:	f7fe fa63 	bl	800fe68 <tcp_segs_free>
    next = NULL;
 80119a2:	2300      	movs	r3, #0
 80119a4:	603b      	str	r3, [r7, #0]
 80119a6:	e056      	b.n	8011a56 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80119a8:	683b      	ldr	r3, [r7, #0]
 80119aa:	68db      	ldr	r3, [r3, #12]
 80119ac:	899b      	ldrh	r3, [r3, #12]
 80119ae:	b29b      	uxth	r3, r3
 80119b0:	4618      	mov	r0, r3
 80119b2:	f7fb fbfd 	bl	800d1b0 <lwip_htons>
 80119b6:	4603      	mov	r3, r0
 80119b8:	b2db      	uxtb	r3, r3
 80119ba:	f003 0301 	and.w	r3, r3, #1
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d00d      	beq.n	80119de <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	68db      	ldr	r3, [r3, #12]
 80119c6:	899b      	ldrh	r3, [r3, #12]
 80119c8:	b29c      	uxth	r4, r3
 80119ca:	2001      	movs	r0, #1
 80119cc:	f7fb fbf0 	bl	800d1b0 <lwip_htons>
 80119d0:	4603      	mov	r3, r0
 80119d2:	461a      	mov	r2, r3
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	68db      	ldr	r3, [r3, #12]
 80119d8:	4322      	orrs	r2, r4
 80119da:	b292      	uxth	r2, r2
 80119dc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80119de:	683b      	ldr	r3, [r7, #0]
 80119e0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80119e2:	683b      	ldr	r3, [r7, #0]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80119e8:	68f8      	ldr	r0, [r7, #12]
 80119ea:	f7fe fa52 	bl	800fe92 <tcp_seg_free>
    while (next &&
 80119ee:	683b      	ldr	r3, [r7, #0]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d00e      	beq.n	8011a12 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	891b      	ldrh	r3, [r3, #8]
 80119f8:	461a      	mov	r2, r3
 80119fa:	4b1d      	ldr	r3, [pc, #116]	; (8011a70 <tcp_oos_insert_segment+0x10c>)
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	441a      	add	r2, r3
 8011a00:	683b      	ldr	r3, [r7, #0]
 8011a02:	68db      	ldr	r3, [r3, #12]
 8011a04:	685b      	ldr	r3, [r3, #4]
 8011a06:	6839      	ldr	r1, [r7, #0]
 8011a08:	8909      	ldrh	r1, [r1, #8]
 8011a0a:	440b      	add	r3, r1
 8011a0c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	daca      	bge.n	80119a8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011a12:	683b      	ldr	r3, [r7, #0]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d01e      	beq.n	8011a56 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	891b      	ldrh	r3, [r3, #8]
 8011a1c:	461a      	mov	r2, r3
 8011a1e:	4b14      	ldr	r3, [pc, #80]	; (8011a70 <tcp_oos_insert_segment+0x10c>)
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	441a      	add	r2, r3
 8011a24:	683b      	ldr	r3, [r7, #0]
 8011a26:	68db      	ldr	r3, [r3, #12]
 8011a28:	685b      	ldr	r3, [r3, #4]
 8011a2a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	dd12      	ble.n	8011a56 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	68db      	ldr	r3, [r3, #12]
 8011a34:	685b      	ldr	r3, [r3, #4]
 8011a36:	b29a      	uxth	r2, r3
 8011a38:	4b0d      	ldr	r3, [pc, #52]	; (8011a70 <tcp_oos_insert_segment+0x10c>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	b29b      	uxth	r3, r3
 8011a3e:	1ad3      	subs	r3, r2, r3
 8011a40:	b29a      	uxth	r2, r3
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	685a      	ldr	r2, [r3, #4]
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	891b      	ldrh	r3, [r3, #8]
 8011a4e:	4619      	mov	r1, r3
 8011a50:	4610      	mov	r0, r2
 8011a52:	f7fc fe19 	bl	800e688 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	683a      	ldr	r2, [r7, #0]
 8011a5a:	601a      	str	r2, [r3, #0]
}
 8011a5c:	bf00      	nop
 8011a5e:	3714      	adds	r7, #20
 8011a60:	46bd      	mov	sp, r7
 8011a62:	bd90      	pop	{r4, r7, pc}
 8011a64:	0801968c 	.word	0x0801968c
 8011a68:	0801994c 	.word	0x0801994c
 8011a6c:	080196d8 	.word	0x080196d8
 8011a70:	20011058 	.word	0x20011058

08011a74 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011a74:	b5b0      	push	{r4, r5, r7, lr}
 8011a76:	b086      	sub	sp, #24
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	60f8      	str	r0, [r7, #12]
 8011a7c:	60b9      	str	r1, [r7, #8]
 8011a7e:	607a      	str	r2, [r7, #4]
 8011a80:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011a82:	e03e      	b.n	8011b02 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011a84:	68bb      	ldr	r3, [r7, #8]
 8011a86:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011a88:	68bb      	ldr	r3, [r7, #8]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	685b      	ldr	r3, [r3, #4]
 8011a92:	4618      	mov	r0, r3
 8011a94:	f7fd f80c 	bl	800eab0 <pbuf_clen>
 8011a98:	4603      	mov	r3, r0
 8011a9a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011aa2:	8a7a      	ldrh	r2, [r7, #18]
 8011aa4:	429a      	cmp	r2, r3
 8011aa6:	d906      	bls.n	8011ab6 <tcp_free_acked_segments+0x42>
 8011aa8:	4b2a      	ldr	r3, [pc, #168]	; (8011b54 <tcp_free_acked_segments+0xe0>)
 8011aaa:	f240 4257 	movw	r2, #1111	; 0x457
 8011aae:	492a      	ldr	r1, [pc, #168]	; (8011b58 <tcp_free_acked_segments+0xe4>)
 8011ab0:	482a      	ldr	r0, [pc, #168]	; (8011b5c <tcp_free_acked_segments+0xe8>)
 8011ab2:	f005 fa9b 	bl	8016fec <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011abc:	8a7b      	ldrh	r3, [r7, #18]
 8011abe:	1ad3      	subs	r3, r2, r3
 8011ac0:	b29a      	uxth	r2, r3
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011ac8:	697b      	ldr	r3, [r7, #20]
 8011aca:	891a      	ldrh	r2, [r3, #8]
 8011acc:	4b24      	ldr	r3, [pc, #144]	; (8011b60 <tcp_free_acked_segments+0xec>)
 8011ace:	881b      	ldrh	r3, [r3, #0]
 8011ad0:	4413      	add	r3, r2
 8011ad2:	b29a      	uxth	r2, r3
 8011ad4:	4b22      	ldr	r3, [pc, #136]	; (8011b60 <tcp_free_acked_segments+0xec>)
 8011ad6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011ad8:	6978      	ldr	r0, [r7, #20]
 8011ada:	f7fe f9da 	bl	800fe92 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d00c      	beq.n	8011b02 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011ae8:	68bb      	ldr	r3, [r7, #8]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d109      	bne.n	8011b02 <tcp_free_acked_segments+0x8e>
 8011aee:	683b      	ldr	r3, [r7, #0]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d106      	bne.n	8011b02 <tcp_free_acked_segments+0x8e>
 8011af4:	4b17      	ldr	r3, [pc, #92]	; (8011b54 <tcp_free_acked_segments+0xe0>)
 8011af6:	f240 4261 	movw	r2, #1121	; 0x461
 8011afa:	491a      	ldr	r1, [pc, #104]	; (8011b64 <tcp_free_acked_segments+0xf0>)
 8011afc:	4817      	ldr	r0, [pc, #92]	; (8011b5c <tcp_free_acked_segments+0xe8>)
 8011afe:	f005 fa75 	bl	8016fec <iprintf>
  while (seg_list != NULL &&
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d020      	beq.n	8011b4a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011b08:	68bb      	ldr	r3, [r7, #8]
 8011b0a:	68db      	ldr	r3, [r3, #12]
 8011b0c:	685b      	ldr	r3, [r3, #4]
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f7fb fb63 	bl	800d1da <lwip_htonl>
 8011b14:	4604      	mov	r4, r0
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	891b      	ldrh	r3, [r3, #8]
 8011b1a:	461d      	mov	r5, r3
 8011b1c:	68bb      	ldr	r3, [r7, #8]
 8011b1e:	68db      	ldr	r3, [r3, #12]
 8011b20:	899b      	ldrh	r3, [r3, #12]
 8011b22:	b29b      	uxth	r3, r3
 8011b24:	4618      	mov	r0, r3
 8011b26:	f7fb fb43 	bl	800d1b0 <lwip_htons>
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	b2db      	uxtb	r3, r3
 8011b2e:	f003 0303 	and.w	r3, r3, #3
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d001      	beq.n	8011b3a <tcp_free_acked_segments+0xc6>
 8011b36:	2301      	movs	r3, #1
 8011b38:	e000      	b.n	8011b3c <tcp_free_acked_segments+0xc8>
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	442b      	add	r3, r5
 8011b3e:	18e2      	adds	r2, r4, r3
 8011b40:	4b09      	ldr	r3, [pc, #36]	; (8011b68 <tcp_free_acked_segments+0xf4>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	dd9c      	ble.n	8011a84 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011b4a:	68bb      	ldr	r3, [r7, #8]
}
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	3718      	adds	r7, #24
 8011b50:	46bd      	mov	sp, r7
 8011b52:	bdb0      	pop	{r4, r5, r7, pc}
 8011b54:	0801968c 	.word	0x0801968c
 8011b58:	08019974 	.word	0x08019974
 8011b5c:	080196d8 	.word	0x080196d8
 8011b60:	20011060 	.word	0x20011060
 8011b64:	0801999c 	.word	0x0801999c
 8011b68:	2001105c 	.word	0x2001105c

08011b6c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011b6c:	b5b0      	push	{r4, r5, r7, lr}
 8011b6e:	b094      	sub	sp, #80	; 0x50
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011b74:	2300      	movs	r3, #0
 8011b76:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d106      	bne.n	8011b8c <tcp_receive+0x20>
 8011b7e:	4b91      	ldr	r3, [pc, #580]	; (8011dc4 <tcp_receive+0x258>)
 8011b80:	f240 427b 	movw	r2, #1147	; 0x47b
 8011b84:	4990      	ldr	r1, [pc, #576]	; (8011dc8 <tcp_receive+0x25c>)
 8011b86:	4891      	ldr	r0, [pc, #580]	; (8011dcc <tcp_receive+0x260>)
 8011b88:	f005 fa30 	bl	8016fec <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	7d1b      	ldrb	r3, [r3, #20]
 8011b90:	2b03      	cmp	r3, #3
 8011b92:	d806      	bhi.n	8011ba2 <tcp_receive+0x36>
 8011b94:	4b8b      	ldr	r3, [pc, #556]	; (8011dc4 <tcp_receive+0x258>)
 8011b96:	f240 427c 	movw	r2, #1148	; 0x47c
 8011b9a:	498d      	ldr	r1, [pc, #564]	; (8011dd0 <tcp_receive+0x264>)
 8011b9c:	488b      	ldr	r0, [pc, #556]	; (8011dcc <tcp_receive+0x260>)
 8011b9e:	f005 fa25 	bl	8016fec <iprintf>

  if (flags & TCP_ACK) {
 8011ba2:	4b8c      	ldr	r3, [pc, #560]	; (8011dd4 <tcp_receive+0x268>)
 8011ba4:	781b      	ldrb	r3, [r3, #0]
 8011ba6:	f003 0310 	and.w	r3, r3, #16
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	f000 8264 	beq.w	8012078 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011bb6:	461a      	mov	r2, r3
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011bbc:	4413      	add	r3, r2
 8011bbe:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011bc4:	4b84      	ldr	r3, [pc, #528]	; (8011dd8 <tcp_receive+0x26c>)
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	1ad3      	subs	r3, r2, r3
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	db1b      	blt.n	8011c06 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011bd2:	4b81      	ldr	r3, [pc, #516]	; (8011dd8 <tcp_receive+0x26c>)
 8011bd4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011bd6:	429a      	cmp	r2, r3
 8011bd8:	d106      	bne.n	8011be8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011bde:	4b7f      	ldr	r3, [pc, #508]	; (8011ddc <tcp_receive+0x270>)
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	1ad3      	subs	r3, r2, r3
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	db0e      	blt.n	8011c06 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011bec:	4b7b      	ldr	r3, [pc, #492]	; (8011ddc <tcp_receive+0x270>)
 8011bee:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011bf0:	429a      	cmp	r2, r3
 8011bf2:	d125      	bne.n	8011c40 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011bf4:	4b7a      	ldr	r3, [pc, #488]	; (8011de0 <tcp_receive+0x274>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	89db      	ldrh	r3, [r3, #14]
 8011bfa:	b29a      	uxth	r2, r3
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011c02:	429a      	cmp	r2, r3
 8011c04:	d91c      	bls.n	8011c40 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011c06:	4b76      	ldr	r3, [pc, #472]	; (8011de0 <tcp_receive+0x274>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	89db      	ldrh	r3, [r3, #14]
 8011c0c:	b29a      	uxth	r2, r3
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011c20:	429a      	cmp	r2, r3
 8011c22:	d205      	bcs.n	8011c30 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011c30:	4b69      	ldr	r3, [pc, #420]	; (8011dd8 <tcp_receive+0x26c>)
 8011c32:	681a      	ldr	r2, [r3, #0]
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011c38:	4b68      	ldr	r3, [pc, #416]	; (8011ddc <tcp_receive+0x270>)
 8011c3a:	681a      	ldr	r2, [r3, #0]
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011c40:	4b66      	ldr	r3, [pc, #408]	; (8011ddc <tcp_receive+0x270>)
 8011c42:	681a      	ldr	r2, [r3, #0]
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c48:	1ad3      	subs	r3, r2, r3
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	dc58      	bgt.n	8011d00 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8011c4e:	4b65      	ldr	r3, [pc, #404]	; (8011de4 <tcp_receive+0x278>)
 8011c50:	881b      	ldrh	r3, [r3, #0]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d14b      	bne.n	8011cee <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c5a:	687a      	ldr	r2, [r7, #4]
 8011c5c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011c60:	4413      	add	r3, r2
 8011c62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c64:	429a      	cmp	r2, r3
 8011c66:	d142      	bne.n	8011cee <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	db3d      	blt.n	8011cee <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011c76:	4b59      	ldr	r3, [pc, #356]	; (8011ddc <tcp_receive+0x270>)
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	429a      	cmp	r2, r3
 8011c7c:	d137      	bne.n	8011cee <tcp_receive+0x182>
              found_dupack = 1;
 8011c7e:	2301      	movs	r3, #1
 8011c80:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011c88:	2bff      	cmp	r3, #255	; 0xff
 8011c8a:	d007      	beq.n	8011c9c <tcp_receive+0x130>
                ++pcb->dupacks;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011c92:	3301      	adds	r3, #1
 8011c94:	b2da      	uxtb	r2, r3
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011ca2:	2b03      	cmp	r3, #3
 8011ca4:	d91b      	bls.n	8011cde <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011cb0:	4413      	add	r3, r2
 8011cb2:	b29a      	uxth	r2, r3
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d30a      	bcc.n	8011cd4 <tcp_receive+0x168>
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011cc8:	4413      	add	r3, r2
 8011cca:	b29a      	uxth	r2, r3
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011cd2:	e004      	b.n	8011cde <tcp_receive+0x172>
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011cda:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011ce4:	2b02      	cmp	r3, #2
 8011ce6:	d902      	bls.n	8011cee <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011ce8:	6878      	ldr	r0, [r7, #4]
 8011cea:	f001 feeb 	bl	8013ac4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	f040 8161 	bne.w	8011fb8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011cfe:	e15b      	b.n	8011fb8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011d00:	4b36      	ldr	r3, [pc, #216]	; (8011ddc <tcp_receive+0x270>)
 8011d02:	681a      	ldr	r2, [r3, #0]
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d08:	1ad3      	subs	r3, r2, r3
 8011d0a:	3b01      	subs	r3, #1
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	f2c0 814e 	blt.w	8011fae <tcp_receive+0x442>
 8011d12:	4b32      	ldr	r3, [pc, #200]	; (8011ddc <tcp_receive+0x270>)
 8011d14:	681a      	ldr	r2, [r3, #0]
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d1a:	1ad3      	subs	r3, r2, r3
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	f300 8146 	bgt.w	8011fae <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	8b5b      	ldrh	r3, [r3, #26]
 8011d26:	f003 0304 	and.w	r3, r3, #4
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d010      	beq.n	8011d50 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	8b5b      	ldrh	r3, [r3, #26]
 8011d32:	f023 0304 	bic.w	r3, r3, #4
 8011d36:	b29a      	uxth	r2, r3
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	2200      	movs	r2, #0
 8011d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011d5e:	10db      	asrs	r3, r3, #3
 8011d60:	b21b      	sxth	r3, r3
 8011d62:	b29a      	uxth	r2, r3
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011d6a:	b29b      	uxth	r3, r3
 8011d6c:	4413      	add	r3, r2
 8011d6e:	b29b      	uxth	r3, r3
 8011d70:	b21a      	sxth	r2, r3
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011d78:	4b18      	ldr	r3, [pc, #96]	; (8011ddc <tcp_receive+0x270>)
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	b29a      	uxth	r2, r3
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d82:	b29b      	uxth	r3, r3
 8011d84:	1ad3      	subs	r3, r2, r3
 8011d86:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011d90:	4b12      	ldr	r3, [pc, #72]	; (8011ddc <tcp_receive+0x270>)
 8011d92:	681a      	ldr	r2, [r3, #0]
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	7d1b      	ldrb	r3, [r3, #20]
 8011d9c:	2b03      	cmp	r3, #3
 8011d9e:	f240 8097 	bls.w	8011ed0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011dae:	429a      	cmp	r2, r3
 8011db0:	d245      	bcs.n	8011e3e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	8b5b      	ldrh	r3, [r3, #26]
 8011db6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d014      	beq.n	8011de8 <tcp_receive+0x27c>
 8011dbe:	2301      	movs	r3, #1
 8011dc0:	e013      	b.n	8011dea <tcp_receive+0x27e>
 8011dc2:	bf00      	nop
 8011dc4:	0801968c 	.word	0x0801968c
 8011dc8:	080199bc 	.word	0x080199bc
 8011dcc:	080196d8 	.word	0x080196d8
 8011dd0:	080199d8 	.word	0x080199d8
 8011dd4:	20011064 	.word	0x20011064
 8011dd8:	20011058 	.word	0x20011058
 8011ddc:	2001105c 	.word	0x2001105c
 8011de0:	20011048 	.word	0x20011048
 8011de4:	20011062 	.word	0x20011062
 8011de8:	2302      	movs	r3, #2
 8011dea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011dee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011df2:	b29a      	uxth	r2, r3
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011df8:	fb12 f303 	smulbb	r3, r2, r3
 8011dfc:	b29b      	uxth	r3, r3
 8011dfe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011e00:	4293      	cmp	r3, r2
 8011e02:	bf28      	it	cs
 8011e04:	4613      	movcs	r3, r2
 8011e06:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011e0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011e10:	4413      	add	r3, r2
 8011e12:	b29a      	uxth	r2, r3
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011e1a:	429a      	cmp	r2, r3
 8011e1c:	d309      	bcc.n	8011e32 <tcp_receive+0x2c6>
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011e24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011e26:	4413      	add	r3, r2
 8011e28:	b29a      	uxth	r2, r3
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011e30:	e04e      	b.n	8011ed0 <tcp_receive+0x364>
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e38:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011e3c:	e048      	b.n	8011ed0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011e44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011e46:	4413      	add	r3, r2
 8011e48:	b29a      	uxth	r2, r3
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011e50:	429a      	cmp	r2, r3
 8011e52:	d309      	bcc.n	8011e68 <tcp_receive+0x2fc>
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011e5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011e5c:	4413      	add	r3, r2
 8011e5e:	b29a      	uxth	r2, r3
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011e66:	e004      	b.n	8011e72 <tcp_receive+0x306>
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011e7e:	429a      	cmp	r2, r3
 8011e80:	d326      	bcc.n	8011ed0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011e8e:	1ad3      	subs	r3, r2, r3
 8011e90:	b29a      	uxth	r2, r3
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ea2:	4413      	add	r3, r2
 8011ea4:	b29a      	uxth	r2, r3
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011eac:	429a      	cmp	r2, r3
 8011eae:	d30a      	bcc.n	8011ec6 <tcp_receive+0x35a>
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011eba:	4413      	add	r3, r2
 8011ebc:	b29a      	uxth	r2, r3
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011ec4:	e004      	b.n	8011ed0 <tcp_receive+0x364>
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ecc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ed8:	4a98      	ldr	r2, [pc, #608]	; (801213c <tcp_receive+0x5d0>)
 8011eda:	6878      	ldr	r0, [r7, #4]
 8011edc:	f7ff fdca 	bl	8011a74 <tcp_free_acked_segments>
 8011ee0:	4602      	mov	r2, r0
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011eee:	4a94      	ldr	r2, [pc, #592]	; (8012140 <tcp_receive+0x5d4>)
 8011ef0:	6878      	ldr	r0, [r7, #4]
 8011ef2:	f7ff fdbf 	bl	8011a74 <tcp_free_acked_segments>
 8011ef6:	4602      	mov	r2, r0
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d104      	bne.n	8011f0e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f0a:	861a      	strh	r2, [r3, #48]	; 0x30
 8011f0c:	e002      	b.n	8011f14 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	2200      	movs	r2, #0
 8011f12:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	2200      	movs	r2, #0
 8011f18:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d103      	bne.n	8011f2a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	2200      	movs	r2, #0
 8011f26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011f30:	4b84      	ldr	r3, [pc, #528]	; (8012144 <tcp_receive+0x5d8>)
 8011f32:	881b      	ldrh	r3, [r3, #0]
 8011f34:	4413      	add	r3, r2
 8011f36:	b29a      	uxth	r2, r3
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	8b5b      	ldrh	r3, [r3, #26]
 8011f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d035      	beq.n	8011fb6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d118      	bne.n	8011f84 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d00c      	beq.n	8011f74 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f62:	68db      	ldr	r3, [r3, #12]
 8011f64:	685b      	ldr	r3, [r3, #4]
 8011f66:	4618      	mov	r0, r3
 8011f68:	f7fb f937 	bl	800d1da <lwip_htonl>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	dc20      	bgt.n	8011fb6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	8b5b      	ldrh	r3, [r3, #26]
 8011f78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011f7c:	b29a      	uxth	r2, r3
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011f82:	e018      	b.n	8011fb6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f8c:	68db      	ldr	r3, [r3, #12]
 8011f8e:	685b      	ldr	r3, [r3, #4]
 8011f90:	4618      	mov	r0, r3
 8011f92:	f7fb f922 	bl	800d1da <lwip_htonl>
 8011f96:	4603      	mov	r3, r0
 8011f98:	1ae3      	subs	r3, r4, r3
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	dc0b      	bgt.n	8011fb6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	8b5b      	ldrh	r3, [r3, #26]
 8011fa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011fa6:	b29a      	uxth	r2, r3
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011fac:	e003      	b.n	8011fb6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011fae:	6878      	ldr	r0, [r7, #4]
 8011fb0:	f001 ff76 	bl	8013ea0 <tcp_send_empty_ack>
 8011fb4:	e000      	b.n	8011fb8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011fb6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d05b      	beq.n	8012078 <tcp_receive+0x50c>
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011fc4:	4b60      	ldr	r3, [pc, #384]	; (8012148 <tcp_receive+0x5dc>)
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	1ad3      	subs	r3, r2, r3
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	da54      	bge.n	8012078 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011fce:	4b5f      	ldr	r3, [pc, #380]	; (801214c <tcp_receive+0x5e0>)
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	b29a      	uxth	r2, r3
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fd8:	b29b      	uxth	r3, r3
 8011fda:	1ad3      	subs	r3, r2, r3
 8011fdc:	b29b      	uxth	r3, r3
 8011fde:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011fe2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011fec:	10db      	asrs	r3, r3, #3
 8011fee:	b21b      	sxth	r3, r3
 8011ff0:	b29b      	uxth	r3, r3
 8011ff2:	1ad3      	subs	r3, r2, r3
 8011ff4:	b29b      	uxth	r3, r3
 8011ff6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012000:	b29a      	uxth	r2, r3
 8012002:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012006:	4413      	add	r3, r2
 8012008:	b29b      	uxth	r3, r3
 801200a:	b21a      	sxth	r2, r3
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8012010:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012014:	2b00      	cmp	r3, #0
 8012016:	da05      	bge.n	8012024 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8012018:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801201c:	425b      	negs	r3, r3
 801201e:	b29b      	uxth	r3, r3
 8012020:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012024:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801202e:	109b      	asrs	r3, r3, #2
 8012030:	b21b      	sxth	r3, r3
 8012032:	b29b      	uxth	r3, r3
 8012034:	1ad3      	subs	r3, r2, r3
 8012036:	b29b      	uxth	r3, r3
 8012038:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012042:	b29a      	uxth	r2, r3
 8012044:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012048:	4413      	add	r3, r2
 801204a:	b29b      	uxth	r3, r3
 801204c:	b21a      	sxth	r2, r3
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012058:	10db      	asrs	r3, r3, #3
 801205a:	b21b      	sxth	r3, r3
 801205c:	b29a      	uxth	r2, r3
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012064:	b29b      	uxth	r3, r3
 8012066:	4413      	add	r3, r2
 8012068:	b29b      	uxth	r3, r3
 801206a:	b21a      	sxth	r2, r3
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	2200      	movs	r2, #0
 8012076:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012078:	4b35      	ldr	r3, [pc, #212]	; (8012150 <tcp_receive+0x5e4>)
 801207a:	881b      	ldrh	r3, [r3, #0]
 801207c:	2b00      	cmp	r3, #0
 801207e:	f000 84e2 	beq.w	8012a46 <tcp_receive+0xeda>
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	7d1b      	ldrb	r3, [r3, #20]
 8012086:	2b06      	cmp	r3, #6
 8012088:	f200 84dd 	bhi.w	8012a46 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012090:	4b30      	ldr	r3, [pc, #192]	; (8012154 <tcp_receive+0x5e8>)
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	1ad3      	subs	r3, r2, r3
 8012096:	3b01      	subs	r3, #1
 8012098:	2b00      	cmp	r3, #0
 801209a:	f2c0 808f 	blt.w	80121bc <tcp_receive+0x650>
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80120a2:	4b2b      	ldr	r3, [pc, #172]	; (8012150 <tcp_receive+0x5e4>)
 80120a4:	881b      	ldrh	r3, [r3, #0]
 80120a6:	4619      	mov	r1, r3
 80120a8:	4b2a      	ldr	r3, [pc, #168]	; (8012154 <tcp_receive+0x5e8>)
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	440b      	add	r3, r1
 80120ae:	1ad3      	subs	r3, r2, r3
 80120b0:	3301      	adds	r3, #1
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	f300 8082 	bgt.w	80121bc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80120b8:	4b27      	ldr	r3, [pc, #156]	; (8012158 <tcp_receive+0x5ec>)
 80120ba:	685b      	ldr	r3, [r3, #4]
 80120bc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80120c2:	4b24      	ldr	r3, [pc, #144]	; (8012154 <tcp_receive+0x5e8>)
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	1ad3      	subs	r3, r2, r3
 80120c8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80120ca:	4b23      	ldr	r3, [pc, #140]	; (8012158 <tcp_receive+0x5ec>)
 80120cc:	685b      	ldr	r3, [r3, #4]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d106      	bne.n	80120e0 <tcp_receive+0x574>
 80120d2:	4b22      	ldr	r3, [pc, #136]	; (801215c <tcp_receive+0x5f0>)
 80120d4:	f240 5294 	movw	r2, #1428	; 0x594
 80120d8:	4921      	ldr	r1, [pc, #132]	; (8012160 <tcp_receive+0x5f4>)
 80120da:	4822      	ldr	r0, [pc, #136]	; (8012164 <tcp_receive+0x5f8>)
 80120dc:	f004 ff86 	bl	8016fec <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80120e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80120e6:	4293      	cmp	r3, r2
 80120e8:	d906      	bls.n	80120f8 <tcp_receive+0x58c>
 80120ea:	4b1c      	ldr	r3, [pc, #112]	; (801215c <tcp_receive+0x5f0>)
 80120ec:	f240 5295 	movw	r2, #1429	; 0x595
 80120f0:	491d      	ldr	r1, [pc, #116]	; (8012168 <tcp_receive+0x5fc>)
 80120f2:	481c      	ldr	r0, [pc, #112]	; (8012164 <tcp_receive+0x5f8>)
 80120f4:	f004 ff7a 	bl	8016fec <iprintf>
      off = (u16_t)off32;
 80120f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80120fe:	4b16      	ldr	r3, [pc, #88]	; (8012158 <tcp_receive+0x5ec>)
 8012100:	685b      	ldr	r3, [r3, #4]
 8012102:	891b      	ldrh	r3, [r3, #8]
 8012104:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012108:	429a      	cmp	r2, r3
 801210a:	d906      	bls.n	801211a <tcp_receive+0x5ae>
 801210c:	4b13      	ldr	r3, [pc, #76]	; (801215c <tcp_receive+0x5f0>)
 801210e:	f240 5297 	movw	r2, #1431	; 0x597
 8012112:	4916      	ldr	r1, [pc, #88]	; (801216c <tcp_receive+0x600>)
 8012114:	4813      	ldr	r0, [pc, #76]	; (8012164 <tcp_receive+0x5f8>)
 8012116:	f004 ff69 	bl	8016fec <iprintf>
      inseg.len -= off;
 801211a:	4b0f      	ldr	r3, [pc, #60]	; (8012158 <tcp_receive+0x5ec>)
 801211c:	891a      	ldrh	r2, [r3, #8]
 801211e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012122:	1ad3      	subs	r3, r2, r3
 8012124:	b29a      	uxth	r2, r3
 8012126:	4b0c      	ldr	r3, [pc, #48]	; (8012158 <tcp_receive+0x5ec>)
 8012128:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801212a:	4b0b      	ldr	r3, [pc, #44]	; (8012158 <tcp_receive+0x5ec>)
 801212c:	685b      	ldr	r3, [r3, #4]
 801212e:	891a      	ldrh	r2, [r3, #8]
 8012130:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012134:	1ad3      	subs	r3, r2, r3
 8012136:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012138:	e02a      	b.n	8012190 <tcp_receive+0x624>
 801213a:	bf00      	nop
 801213c:	080199f4 	.word	0x080199f4
 8012140:	080199fc 	.word	0x080199fc
 8012144:	20011060 	.word	0x20011060
 8012148:	2001105c 	.word	0x2001105c
 801214c:	20011020 	.word	0x20011020
 8012150:	20011062 	.word	0x20011062
 8012154:	20011058 	.word	0x20011058
 8012158:	20011038 	.word	0x20011038
 801215c:	0801968c 	.word	0x0801968c
 8012160:	08019a04 	.word	0x08019a04
 8012164:	080196d8 	.word	0x080196d8
 8012168:	08019a14 	.word	0x08019a14
 801216c:	08019a24 	.word	0x08019a24
        off -= p->len;
 8012170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012172:	895b      	ldrh	r3, [r3, #10]
 8012174:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012178:	1ad3      	subs	r3, r2, r3
 801217a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801217e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012180:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012182:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012186:	2200      	movs	r2, #0
 8012188:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801218a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012192:	895b      	ldrh	r3, [r3, #10]
 8012194:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012198:	429a      	cmp	r2, r3
 801219a:	d8e9      	bhi.n	8012170 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801219c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80121a0:	4619      	mov	r1, r3
 80121a2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80121a4:	f7fc fb70 	bl	800e888 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121ac:	4a91      	ldr	r2, [pc, #580]	; (80123f4 <tcp_receive+0x888>)
 80121ae:	6013      	str	r3, [r2, #0]
 80121b0:	4b91      	ldr	r3, [pc, #580]	; (80123f8 <tcp_receive+0x88c>)
 80121b2:	68db      	ldr	r3, [r3, #12]
 80121b4:	4a8f      	ldr	r2, [pc, #572]	; (80123f4 <tcp_receive+0x888>)
 80121b6:	6812      	ldr	r2, [r2, #0]
 80121b8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80121ba:	e00d      	b.n	80121d8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80121bc:	4b8d      	ldr	r3, [pc, #564]	; (80123f4 <tcp_receive+0x888>)
 80121be:	681a      	ldr	r2, [r3, #0]
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121c4:	1ad3      	subs	r3, r2, r3
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	da06      	bge.n	80121d8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	8b5b      	ldrh	r3, [r3, #26]
 80121ce:	f043 0302 	orr.w	r3, r3, #2
 80121d2:	b29a      	uxth	r2, r3
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80121d8:	4b86      	ldr	r3, [pc, #536]	; (80123f4 <tcp_receive+0x888>)
 80121da:	681a      	ldr	r2, [r3, #0]
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121e0:	1ad3      	subs	r3, r2, r3
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	f2c0 842a 	blt.w	8012a3c <tcp_receive+0xed0>
 80121e8:	4b82      	ldr	r3, [pc, #520]	; (80123f4 <tcp_receive+0x888>)
 80121ea:	681a      	ldr	r2, [r3, #0]
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121f0:	6879      	ldr	r1, [r7, #4]
 80121f2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80121f4:	440b      	add	r3, r1
 80121f6:	1ad3      	subs	r3, r2, r3
 80121f8:	3301      	adds	r3, #1
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	f300 841e 	bgt.w	8012a3c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012204:	4b7b      	ldr	r3, [pc, #492]	; (80123f4 <tcp_receive+0x888>)
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	429a      	cmp	r2, r3
 801220a:	f040 829a 	bne.w	8012742 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801220e:	4b7a      	ldr	r3, [pc, #488]	; (80123f8 <tcp_receive+0x88c>)
 8012210:	891c      	ldrh	r4, [r3, #8]
 8012212:	4b79      	ldr	r3, [pc, #484]	; (80123f8 <tcp_receive+0x88c>)
 8012214:	68db      	ldr	r3, [r3, #12]
 8012216:	899b      	ldrh	r3, [r3, #12]
 8012218:	b29b      	uxth	r3, r3
 801221a:	4618      	mov	r0, r3
 801221c:	f7fa ffc8 	bl	800d1b0 <lwip_htons>
 8012220:	4603      	mov	r3, r0
 8012222:	b2db      	uxtb	r3, r3
 8012224:	f003 0303 	and.w	r3, r3, #3
 8012228:	2b00      	cmp	r3, #0
 801222a:	d001      	beq.n	8012230 <tcp_receive+0x6c4>
 801222c:	2301      	movs	r3, #1
 801222e:	e000      	b.n	8012232 <tcp_receive+0x6c6>
 8012230:	2300      	movs	r3, #0
 8012232:	4423      	add	r3, r4
 8012234:	b29a      	uxth	r2, r3
 8012236:	4b71      	ldr	r3, [pc, #452]	; (80123fc <tcp_receive+0x890>)
 8012238:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801223e:	4b6f      	ldr	r3, [pc, #444]	; (80123fc <tcp_receive+0x890>)
 8012240:	881b      	ldrh	r3, [r3, #0]
 8012242:	429a      	cmp	r2, r3
 8012244:	d275      	bcs.n	8012332 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012246:	4b6c      	ldr	r3, [pc, #432]	; (80123f8 <tcp_receive+0x88c>)
 8012248:	68db      	ldr	r3, [r3, #12]
 801224a:	899b      	ldrh	r3, [r3, #12]
 801224c:	b29b      	uxth	r3, r3
 801224e:	4618      	mov	r0, r3
 8012250:	f7fa ffae 	bl	800d1b0 <lwip_htons>
 8012254:	4603      	mov	r3, r0
 8012256:	b2db      	uxtb	r3, r3
 8012258:	f003 0301 	and.w	r3, r3, #1
 801225c:	2b00      	cmp	r3, #0
 801225e:	d01f      	beq.n	80122a0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012260:	4b65      	ldr	r3, [pc, #404]	; (80123f8 <tcp_receive+0x88c>)
 8012262:	68db      	ldr	r3, [r3, #12]
 8012264:	899b      	ldrh	r3, [r3, #12]
 8012266:	b29b      	uxth	r3, r3
 8012268:	b21b      	sxth	r3, r3
 801226a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801226e:	b21c      	sxth	r4, r3
 8012270:	4b61      	ldr	r3, [pc, #388]	; (80123f8 <tcp_receive+0x88c>)
 8012272:	68db      	ldr	r3, [r3, #12]
 8012274:	899b      	ldrh	r3, [r3, #12]
 8012276:	b29b      	uxth	r3, r3
 8012278:	4618      	mov	r0, r3
 801227a:	f7fa ff99 	bl	800d1b0 <lwip_htons>
 801227e:	4603      	mov	r3, r0
 8012280:	b2db      	uxtb	r3, r3
 8012282:	b29b      	uxth	r3, r3
 8012284:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012288:	b29b      	uxth	r3, r3
 801228a:	4618      	mov	r0, r3
 801228c:	f7fa ff90 	bl	800d1b0 <lwip_htons>
 8012290:	4603      	mov	r3, r0
 8012292:	b21b      	sxth	r3, r3
 8012294:	4323      	orrs	r3, r4
 8012296:	b21a      	sxth	r2, r3
 8012298:	4b57      	ldr	r3, [pc, #348]	; (80123f8 <tcp_receive+0x88c>)
 801229a:	68db      	ldr	r3, [r3, #12]
 801229c:	b292      	uxth	r2, r2
 801229e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80122a4:	4b54      	ldr	r3, [pc, #336]	; (80123f8 <tcp_receive+0x88c>)
 80122a6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80122a8:	4b53      	ldr	r3, [pc, #332]	; (80123f8 <tcp_receive+0x88c>)
 80122aa:	68db      	ldr	r3, [r3, #12]
 80122ac:	899b      	ldrh	r3, [r3, #12]
 80122ae:	b29b      	uxth	r3, r3
 80122b0:	4618      	mov	r0, r3
 80122b2:	f7fa ff7d 	bl	800d1b0 <lwip_htons>
 80122b6:	4603      	mov	r3, r0
 80122b8:	b2db      	uxtb	r3, r3
 80122ba:	f003 0302 	and.w	r3, r3, #2
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d005      	beq.n	80122ce <tcp_receive+0x762>
            inseg.len -= 1;
 80122c2:	4b4d      	ldr	r3, [pc, #308]	; (80123f8 <tcp_receive+0x88c>)
 80122c4:	891b      	ldrh	r3, [r3, #8]
 80122c6:	3b01      	subs	r3, #1
 80122c8:	b29a      	uxth	r2, r3
 80122ca:	4b4b      	ldr	r3, [pc, #300]	; (80123f8 <tcp_receive+0x88c>)
 80122cc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80122ce:	4b4a      	ldr	r3, [pc, #296]	; (80123f8 <tcp_receive+0x88c>)
 80122d0:	685b      	ldr	r3, [r3, #4]
 80122d2:	4a49      	ldr	r2, [pc, #292]	; (80123f8 <tcp_receive+0x88c>)
 80122d4:	8912      	ldrh	r2, [r2, #8]
 80122d6:	4611      	mov	r1, r2
 80122d8:	4618      	mov	r0, r3
 80122da:	f7fc f9d5 	bl	800e688 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80122de:	4b46      	ldr	r3, [pc, #280]	; (80123f8 <tcp_receive+0x88c>)
 80122e0:	891c      	ldrh	r4, [r3, #8]
 80122e2:	4b45      	ldr	r3, [pc, #276]	; (80123f8 <tcp_receive+0x88c>)
 80122e4:	68db      	ldr	r3, [r3, #12]
 80122e6:	899b      	ldrh	r3, [r3, #12]
 80122e8:	b29b      	uxth	r3, r3
 80122ea:	4618      	mov	r0, r3
 80122ec:	f7fa ff60 	bl	800d1b0 <lwip_htons>
 80122f0:	4603      	mov	r3, r0
 80122f2:	b2db      	uxtb	r3, r3
 80122f4:	f003 0303 	and.w	r3, r3, #3
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d001      	beq.n	8012300 <tcp_receive+0x794>
 80122fc:	2301      	movs	r3, #1
 80122fe:	e000      	b.n	8012302 <tcp_receive+0x796>
 8012300:	2300      	movs	r3, #0
 8012302:	4423      	add	r3, r4
 8012304:	b29a      	uxth	r2, r3
 8012306:	4b3d      	ldr	r3, [pc, #244]	; (80123fc <tcp_receive+0x890>)
 8012308:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801230a:	4b3c      	ldr	r3, [pc, #240]	; (80123fc <tcp_receive+0x890>)
 801230c:	881b      	ldrh	r3, [r3, #0]
 801230e:	461a      	mov	r2, r3
 8012310:	4b38      	ldr	r3, [pc, #224]	; (80123f4 <tcp_receive+0x888>)
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	441a      	add	r2, r3
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801231a:	6879      	ldr	r1, [r7, #4]
 801231c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801231e:	440b      	add	r3, r1
 8012320:	429a      	cmp	r2, r3
 8012322:	d006      	beq.n	8012332 <tcp_receive+0x7c6>
 8012324:	4b36      	ldr	r3, [pc, #216]	; (8012400 <tcp_receive+0x894>)
 8012326:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801232a:	4936      	ldr	r1, [pc, #216]	; (8012404 <tcp_receive+0x898>)
 801232c:	4836      	ldr	r0, [pc, #216]	; (8012408 <tcp_receive+0x89c>)
 801232e:	f004 fe5d 	bl	8016fec <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012336:	2b00      	cmp	r3, #0
 8012338:	f000 80e7 	beq.w	801250a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801233c:	4b2e      	ldr	r3, [pc, #184]	; (80123f8 <tcp_receive+0x88c>)
 801233e:	68db      	ldr	r3, [r3, #12]
 8012340:	899b      	ldrh	r3, [r3, #12]
 8012342:	b29b      	uxth	r3, r3
 8012344:	4618      	mov	r0, r3
 8012346:	f7fa ff33 	bl	800d1b0 <lwip_htons>
 801234a:	4603      	mov	r3, r0
 801234c:	b2db      	uxtb	r3, r3
 801234e:	f003 0301 	and.w	r3, r3, #1
 8012352:	2b00      	cmp	r3, #0
 8012354:	d010      	beq.n	8012378 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8012356:	e00a      	b.n	801236e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801235c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012362:	681a      	ldr	r2, [r3, #0]
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8012368:	68f8      	ldr	r0, [r7, #12]
 801236a:	f7fd fd92 	bl	800fe92 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012372:	2b00      	cmp	r3, #0
 8012374:	d1f0      	bne.n	8012358 <tcp_receive+0x7ec>
 8012376:	e0c8      	b.n	801250a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801237c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801237e:	e052      	b.n	8012426 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012382:	68db      	ldr	r3, [r3, #12]
 8012384:	899b      	ldrh	r3, [r3, #12]
 8012386:	b29b      	uxth	r3, r3
 8012388:	4618      	mov	r0, r3
 801238a:	f7fa ff11 	bl	800d1b0 <lwip_htons>
 801238e:	4603      	mov	r3, r0
 8012390:	b2db      	uxtb	r3, r3
 8012392:	f003 0301 	and.w	r3, r3, #1
 8012396:	2b00      	cmp	r3, #0
 8012398:	d03d      	beq.n	8012416 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801239a:	4b17      	ldr	r3, [pc, #92]	; (80123f8 <tcp_receive+0x88c>)
 801239c:	68db      	ldr	r3, [r3, #12]
 801239e:	899b      	ldrh	r3, [r3, #12]
 80123a0:	b29b      	uxth	r3, r3
 80123a2:	4618      	mov	r0, r3
 80123a4:	f7fa ff04 	bl	800d1b0 <lwip_htons>
 80123a8:	4603      	mov	r3, r0
 80123aa:	b2db      	uxtb	r3, r3
 80123ac:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d130      	bne.n	8012416 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80123b4:	4b10      	ldr	r3, [pc, #64]	; (80123f8 <tcp_receive+0x88c>)
 80123b6:	68db      	ldr	r3, [r3, #12]
 80123b8:	899b      	ldrh	r3, [r3, #12]
 80123ba:	b29c      	uxth	r4, r3
 80123bc:	2001      	movs	r0, #1
 80123be:	f7fa fef7 	bl	800d1b0 <lwip_htons>
 80123c2:	4603      	mov	r3, r0
 80123c4:	461a      	mov	r2, r3
 80123c6:	4b0c      	ldr	r3, [pc, #48]	; (80123f8 <tcp_receive+0x88c>)
 80123c8:	68db      	ldr	r3, [r3, #12]
 80123ca:	4322      	orrs	r2, r4
 80123cc:	b292      	uxth	r2, r2
 80123ce:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80123d0:	4b09      	ldr	r3, [pc, #36]	; (80123f8 <tcp_receive+0x88c>)
 80123d2:	891c      	ldrh	r4, [r3, #8]
 80123d4:	4b08      	ldr	r3, [pc, #32]	; (80123f8 <tcp_receive+0x88c>)
 80123d6:	68db      	ldr	r3, [r3, #12]
 80123d8:	899b      	ldrh	r3, [r3, #12]
 80123da:	b29b      	uxth	r3, r3
 80123dc:	4618      	mov	r0, r3
 80123de:	f7fa fee7 	bl	800d1b0 <lwip_htons>
 80123e2:	4603      	mov	r3, r0
 80123e4:	b2db      	uxtb	r3, r3
 80123e6:	f003 0303 	and.w	r3, r3, #3
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d00e      	beq.n	801240c <tcp_receive+0x8a0>
 80123ee:	2301      	movs	r3, #1
 80123f0:	e00d      	b.n	801240e <tcp_receive+0x8a2>
 80123f2:	bf00      	nop
 80123f4:	20011058 	.word	0x20011058
 80123f8:	20011038 	.word	0x20011038
 80123fc:	20011062 	.word	0x20011062
 8012400:	0801968c 	.word	0x0801968c
 8012404:	08019a34 	.word	0x08019a34
 8012408:	080196d8 	.word	0x080196d8
 801240c:	2300      	movs	r3, #0
 801240e:	4423      	add	r3, r4
 8012410:	b29a      	uxth	r2, r3
 8012412:	4b98      	ldr	r3, [pc, #608]	; (8012674 <tcp_receive+0xb08>)
 8012414:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012418:	613b      	str	r3, [r7, #16]
              next = next->next;
 801241a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012420:	6938      	ldr	r0, [r7, #16]
 8012422:	f7fd fd36 	bl	800fe92 <tcp_seg_free>
            while (next &&
 8012426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012428:	2b00      	cmp	r3, #0
 801242a:	d00e      	beq.n	801244a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801242c:	4b91      	ldr	r3, [pc, #580]	; (8012674 <tcp_receive+0xb08>)
 801242e:	881b      	ldrh	r3, [r3, #0]
 8012430:	461a      	mov	r2, r3
 8012432:	4b91      	ldr	r3, [pc, #580]	; (8012678 <tcp_receive+0xb0c>)
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	441a      	add	r2, r3
 8012438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801243a:	68db      	ldr	r3, [r3, #12]
 801243c:	685b      	ldr	r3, [r3, #4]
 801243e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012440:	8909      	ldrh	r1, [r1, #8]
 8012442:	440b      	add	r3, r1
 8012444:	1ad3      	subs	r3, r2, r3
            while (next &&
 8012446:	2b00      	cmp	r3, #0
 8012448:	da9a      	bge.n	8012380 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801244a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801244c:	2b00      	cmp	r3, #0
 801244e:	d059      	beq.n	8012504 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8012450:	4b88      	ldr	r3, [pc, #544]	; (8012674 <tcp_receive+0xb08>)
 8012452:	881b      	ldrh	r3, [r3, #0]
 8012454:	461a      	mov	r2, r3
 8012456:	4b88      	ldr	r3, [pc, #544]	; (8012678 <tcp_receive+0xb0c>)
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	441a      	add	r2, r3
 801245c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801245e:	68db      	ldr	r3, [r3, #12]
 8012460:	685b      	ldr	r3, [r3, #4]
 8012462:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012464:	2b00      	cmp	r3, #0
 8012466:	dd4d      	ble.n	8012504 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801246a:	68db      	ldr	r3, [r3, #12]
 801246c:	685b      	ldr	r3, [r3, #4]
 801246e:	b29a      	uxth	r2, r3
 8012470:	4b81      	ldr	r3, [pc, #516]	; (8012678 <tcp_receive+0xb0c>)
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	b29b      	uxth	r3, r3
 8012476:	1ad3      	subs	r3, r2, r3
 8012478:	b29a      	uxth	r2, r3
 801247a:	4b80      	ldr	r3, [pc, #512]	; (801267c <tcp_receive+0xb10>)
 801247c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801247e:	4b7f      	ldr	r3, [pc, #508]	; (801267c <tcp_receive+0xb10>)
 8012480:	68db      	ldr	r3, [r3, #12]
 8012482:	899b      	ldrh	r3, [r3, #12]
 8012484:	b29b      	uxth	r3, r3
 8012486:	4618      	mov	r0, r3
 8012488:	f7fa fe92 	bl	800d1b0 <lwip_htons>
 801248c:	4603      	mov	r3, r0
 801248e:	b2db      	uxtb	r3, r3
 8012490:	f003 0302 	and.w	r3, r3, #2
 8012494:	2b00      	cmp	r3, #0
 8012496:	d005      	beq.n	80124a4 <tcp_receive+0x938>
                inseg.len -= 1;
 8012498:	4b78      	ldr	r3, [pc, #480]	; (801267c <tcp_receive+0xb10>)
 801249a:	891b      	ldrh	r3, [r3, #8]
 801249c:	3b01      	subs	r3, #1
 801249e:	b29a      	uxth	r2, r3
 80124a0:	4b76      	ldr	r3, [pc, #472]	; (801267c <tcp_receive+0xb10>)
 80124a2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80124a4:	4b75      	ldr	r3, [pc, #468]	; (801267c <tcp_receive+0xb10>)
 80124a6:	685b      	ldr	r3, [r3, #4]
 80124a8:	4a74      	ldr	r2, [pc, #464]	; (801267c <tcp_receive+0xb10>)
 80124aa:	8912      	ldrh	r2, [r2, #8]
 80124ac:	4611      	mov	r1, r2
 80124ae:	4618      	mov	r0, r3
 80124b0:	f7fc f8ea 	bl	800e688 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80124b4:	4b71      	ldr	r3, [pc, #452]	; (801267c <tcp_receive+0xb10>)
 80124b6:	891c      	ldrh	r4, [r3, #8]
 80124b8:	4b70      	ldr	r3, [pc, #448]	; (801267c <tcp_receive+0xb10>)
 80124ba:	68db      	ldr	r3, [r3, #12]
 80124bc:	899b      	ldrh	r3, [r3, #12]
 80124be:	b29b      	uxth	r3, r3
 80124c0:	4618      	mov	r0, r3
 80124c2:	f7fa fe75 	bl	800d1b0 <lwip_htons>
 80124c6:	4603      	mov	r3, r0
 80124c8:	b2db      	uxtb	r3, r3
 80124ca:	f003 0303 	and.w	r3, r3, #3
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d001      	beq.n	80124d6 <tcp_receive+0x96a>
 80124d2:	2301      	movs	r3, #1
 80124d4:	e000      	b.n	80124d8 <tcp_receive+0x96c>
 80124d6:	2300      	movs	r3, #0
 80124d8:	4423      	add	r3, r4
 80124da:	b29a      	uxth	r2, r3
 80124dc:	4b65      	ldr	r3, [pc, #404]	; (8012674 <tcp_receive+0xb08>)
 80124de:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80124e0:	4b64      	ldr	r3, [pc, #400]	; (8012674 <tcp_receive+0xb08>)
 80124e2:	881b      	ldrh	r3, [r3, #0]
 80124e4:	461a      	mov	r2, r3
 80124e6:	4b64      	ldr	r3, [pc, #400]	; (8012678 <tcp_receive+0xb0c>)
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	441a      	add	r2, r3
 80124ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124ee:	68db      	ldr	r3, [r3, #12]
 80124f0:	685b      	ldr	r3, [r3, #4]
 80124f2:	429a      	cmp	r2, r3
 80124f4:	d006      	beq.n	8012504 <tcp_receive+0x998>
 80124f6:	4b62      	ldr	r3, [pc, #392]	; (8012680 <tcp_receive+0xb14>)
 80124f8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80124fc:	4961      	ldr	r1, [pc, #388]	; (8012684 <tcp_receive+0xb18>)
 80124fe:	4862      	ldr	r0, [pc, #392]	; (8012688 <tcp_receive+0xb1c>)
 8012500:	f004 fd74 	bl	8016fec <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012508:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801250a:	4b5a      	ldr	r3, [pc, #360]	; (8012674 <tcp_receive+0xb08>)
 801250c:	881b      	ldrh	r3, [r3, #0]
 801250e:	461a      	mov	r2, r3
 8012510:	4b59      	ldr	r3, [pc, #356]	; (8012678 <tcp_receive+0xb0c>)
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	441a      	add	r2, r3
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801251e:	4b55      	ldr	r3, [pc, #340]	; (8012674 <tcp_receive+0xb08>)
 8012520:	881b      	ldrh	r3, [r3, #0]
 8012522:	429a      	cmp	r2, r3
 8012524:	d206      	bcs.n	8012534 <tcp_receive+0x9c8>
 8012526:	4b56      	ldr	r3, [pc, #344]	; (8012680 <tcp_receive+0xb14>)
 8012528:	f240 6207 	movw	r2, #1543	; 0x607
 801252c:	4957      	ldr	r1, [pc, #348]	; (801268c <tcp_receive+0xb20>)
 801252e:	4856      	ldr	r0, [pc, #344]	; (8012688 <tcp_receive+0xb1c>)
 8012530:	f004 fd5c 	bl	8016fec <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012538:	4b4e      	ldr	r3, [pc, #312]	; (8012674 <tcp_receive+0xb08>)
 801253a:	881b      	ldrh	r3, [r3, #0]
 801253c:	1ad3      	subs	r3, r2, r3
 801253e:	b29a      	uxth	r2, r3
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012544:	6878      	ldr	r0, [r7, #4]
 8012546:	f7fc ffc5 	bl	800f4d4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801254a:	4b4c      	ldr	r3, [pc, #304]	; (801267c <tcp_receive+0xb10>)
 801254c:	685b      	ldr	r3, [r3, #4]
 801254e:	891b      	ldrh	r3, [r3, #8]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d006      	beq.n	8012562 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8012554:	4b49      	ldr	r3, [pc, #292]	; (801267c <tcp_receive+0xb10>)
 8012556:	685b      	ldr	r3, [r3, #4]
 8012558:	4a4d      	ldr	r2, [pc, #308]	; (8012690 <tcp_receive+0xb24>)
 801255a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801255c:	4b47      	ldr	r3, [pc, #284]	; (801267c <tcp_receive+0xb10>)
 801255e:	2200      	movs	r2, #0
 8012560:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012562:	4b46      	ldr	r3, [pc, #280]	; (801267c <tcp_receive+0xb10>)
 8012564:	68db      	ldr	r3, [r3, #12]
 8012566:	899b      	ldrh	r3, [r3, #12]
 8012568:	b29b      	uxth	r3, r3
 801256a:	4618      	mov	r0, r3
 801256c:	f7fa fe20 	bl	800d1b0 <lwip_htons>
 8012570:	4603      	mov	r3, r0
 8012572:	b2db      	uxtb	r3, r3
 8012574:	f003 0301 	and.w	r3, r3, #1
 8012578:	2b00      	cmp	r3, #0
 801257a:	f000 80b8 	beq.w	80126ee <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801257e:	4b45      	ldr	r3, [pc, #276]	; (8012694 <tcp_receive+0xb28>)
 8012580:	781b      	ldrb	r3, [r3, #0]
 8012582:	f043 0320 	orr.w	r3, r3, #32
 8012586:	b2da      	uxtb	r2, r3
 8012588:	4b42      	ldr	r3, [pc, #264]	; (8012694 <tcp_receive+0xb28>)
 801258a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801258c:	e0af      	b.n	80126ee <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012592:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012598:	68db      	ldr	r3, [r3, #12]
 801259a:	685b      	ldr	r3, [r3, #4]
 801259c:	4a36      	ldr	r2, [pc, #216]	; (8012678 <tcp_receive+0xb0c>)
 801259e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80125a0:	68bb      	ldr	r3, [r7, #8]
 80125a2:	891b      	ldrh	r3, [r3, #8]
 80125a4:	461c      	mov	r4, r3
 80125a6:	68bb      	ldr	r3, [r7, #8]
 80125a8:	68db      	ldr	r3, [r3, #12]
 80125aa:	899b      	ldrh	r3, [r3, #12]
 80125ac:	b29b      	uxth	r3, r3
 80125ae:	4618      	mov	r0, r3
 80125b0:	f7fa fdfe 	bl	800d1b0 <lwip_htons>
 80125b4:	4603      	mov	r3, r0
 80125b6:	b2db      	uxtb	r3, r3
 80125b8:	f003 0303 	and.w	r3, r3, #3
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d001      	beq.n	80125c4 <tcp_receive+0xa58>
 80125c0:	2301      	movs	r3, #1
 80125c2:	e000      	b.n	80125c6 <tcp_receive+0xa5a>
 80125c4:	2300      	movs	r3, #0
 80125c6:	191a      	adds	r2, r3, r4
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125cc:	441a      	add	r2, r3
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80125d6:	461c      	mov	r4, r3
 80125d8:	68bb      	ldr	r3, [r7, #8]
 80125da:	891b      	ldrh	r3, [r3, #8]
 80125dc:	461d      	mov	r5, r3
 80125de:	68bb      	ldr	r3, [r7, #8]
 80125e0:	68db      	ldr	r3, [r3, #12]
 80125e2:	899b      	ldrh	r3, [r3, #12]
 80125e4:	b29b      	uxth	r3, r3
 80125e6:	4618      	mov	r0, r3
 80125e8:	f7fa fde2 	bl	800d1b0 <lwip_htons>
 80125ec:	4603      	mov	r3, r0
 80125ee:	b2db      	uxtb	r3, r3
 80125f0:	f003 0303 	and.w	r3, r3, #3
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d001      	beq.n	80125fc <tcp_receive+0xa90>
 80125f8:	2301      	movs	r3, #1
 80125fa:	e000      	b.n	80125fe <tcp_receive+0xa92>
 80125fc:	2300      	movs	r3, #0
 80125fe:	442b      	add	r3, r5
 8012600:	429c      	cmp	r4, r3
 8012602:	d206      	bcs.n	8012612 <tcp_receive+0xaa6>
 8012604:	4b1e      	ldr	r3, [pc, #120]	; (8012680 <tcp_receive+0xb14>)
 8012606:	f240 622b 	movw	r2, #1579	; 0x62b
 801260a:	4923      	ldr	r1, [pc, #140]	; (8012698 <tcp_receive+0xb2c>)
 801260c:	481e      	ldr	r0, [pc, #120]	; (8012688 <tcp_receive+0xb1c>)
 801260e:	f004 fced 	bl	8016fec <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012612:	68bb      	ldr	r3, [r7, #8]
 8012614:	891b      	ldrh	r3, [r3, #8]
 8012616:	461c      	mov	r4, r3
 8012618:	68bb      	ldr	r3, [r7, #8]
 801261a:	68db      	ldr	r3, [r3, #12]
 801261c:	899b      	ldrh	r3, [r3, #12]
 801261e:	b29b      	uxth	r3, r3
 8012620:	4618      	mov	r0, r3
 8012622:	f7fa fdc5 	bl	800d1b0 <lwip_htons>
 8012626:	4603      	mov	r3, r0
 8012628:	b2db      	uxtb	r3, r3
 801262a:	f003 0303 	and.w	r3, r3, #3
 801262e:	2b00      	cmp	r3, #0
 8012630:	d001      	beq.n	8012636 <tcp_receive+0xaca>
 8012632:	2301      	movs	r3, #1
 8012634:	e000      	b.n	8012638 <tcp_receive+0xacc>
 8012636:	2300      	movs	r3, #0
 8012638:	1919      	adds	r1, r3, r4
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801263e:	b28b      	uxth	r3, r1
 8012640:	1ad3      	subs	r3, r2, r3
 8012642:	b29a      	uxth	r2, r3
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012648:	6878      	ldr	r0, [r7, #4]
 801264a:	f7fc ff43 	bl	800f4d4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801264e:	68bb      	ldr	r3, [r7, #8]
 8012650:	685b      	ldr	r3, [r3, #4]
 8012652:	891b      	ldrh	r3, [r3, #8]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d028      	beq.n	80126aa <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012658:	4b0d      	ldr	r3, [pc, #52]	; (8012690 <tcp_receive+0xb24>)
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d01d      	beq.n	801269c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8012660:	4b0b      	ldr	r3, [pc, #44]	; (8012690 <tcp_receive+0xb24>)
 8012662:	681a      	ldr	r2, [r3, #0]
 8012664:	68bb      	ldr	r3, [r7, #8]
 8012666:	685b      	ldr	r3, [r3, #4]
 8012668:	4619      	mov	r1, r3
 801266a:	4610      	mov	r0, r2
 801266c:	f7fc fa60 	bl	800eb30 <pbuf_cat>
 8012670:	e018      	b.n	80126a4 <tcp_receive+0xb38>
 8012672:	bf00      	nop
 8012674:	20011062 	.word	0x20011062
 8012678:	20011058 	.word	0x20011058
 801267c:	20011038 	.word	0x20011038
 8012680:	0801968c 	.word	0x0801968c
 8012684:	08019a6c 	.word	0x08019a6c
 8012688:	080196d8 	.word	0x080196d8
 801268c:	08019aa8 	.word	0x08019aa8
 8012690:	20011068 	.word	0x20011068
 8012694:	20011065 	.word	0x20011065
 8012698:	08019ac8 	.word	0x08019ac8
            } else {
              recv_data = cseg->p;
 801269c:	68bb      	ldr	r3, [r7, #8]
 801269e:	685b      	ldr	r3, [r3, #4]
 80126a0:	4a70      	ldr	r2, [pc, #448]	; (8012864 <tcp_receive+0xcf8>)
 80126a2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80126a4:	68bb      	ldr	r3, [r7, #8]
 80126a6:	2200      	movs	r2, #0
 80126a8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80126aa:	68bb      	ldr	r3, [r7, #8]
 80126ac:	68db      	ldr	r3, [r3, #12]
 80126ae:	899b      	ldrh	r3, [r3, #12]
 80126b0:	b29b      	uxth	r3, r3
 80126b2:	4618      	mov	r0, r3
 80126b4:	f7fa fd7c 	bl	800d1b0 <lwip_htons>
 80126b8:	4603      	mov	r3, r0
 80126ba:	b2db      	uxtb	r3, r3
 80126bc:	f003 0301 	and.w	r3, r3, #1
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d00d      	beq.n	80126e0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80126c4:	4b68      	ldr	r3, [pc, #416]	; (8012868 <tcp_receive+0xcfc>)
 80126c6:	781b      	ldrb	r3, [r3, #0]
 80126c8:	f043 0320 	orr.w	r3, r3, #32
 80126cc:	b2da      	uxtb	r2, r3
 80126ce:	4b66      	ldr	r3, [pc, #408]	; (8012868 <tcp_receive+0xcfc>)
 80126d0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	7d1b      	ldrb	r3, [r3, #20]
 80126d6:	2b04      	cmp	r3, #4
 80126d8:	d102      	bne.n	80126e0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	2207      	movs	r2, #7
 80126de:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80126e0:	68bb      	ldr	r3, [r7, #8]
 80126e2:	681a      	ldr	r2, [r3, #0]
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80126e8:	68b8      	ldr	r0, [r7, #8]
 80126ea:	f7fd fbd2 	bl	800fe92 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d008      	beq.n	8012708 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126fa:	68db      	ldr	r3, [r3, #12]
 80126fc:	685a      	ldr	r2, [r3, #4]
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012702:	429a      	cmp	r2, r3
 8012704:	f43f af43 	beq.w	801258e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	8b5b      	ldrh	r3, [r3, #26]
 801270c:	f003 0301 	and.w	r3, r3, #1
 8012710:	2b00      	cmp	r3, #0
 8012712:	d00e      	beq.n	8012732 <tcp_receive+0xbc6>
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	8b5b      	ldrh	r3, [r3, #26]
 8012718:	f023 0301 	bic.w	r3, r3, #1
 801271c:	b29a      	uxth	r2, r3
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	835a      	strh	r2, [r3, #26]
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	8b5b      	ldrh	r3, [r3, #26]
 8012726:	f043 0302 	orr.w	r3, r3, #2
 801272a:	b29a      	uxth	r2, r3
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012730:	e188      	b.n	8012a44 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	8b5b      	ldrh	r3, [r3, #26]
 8012736:	f043 0301 	orr.w	r3, r3, #1
 801273a:	b29a      	uxth	r2, r3
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012740:	e180      	b.n	8012a44 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012746:	2b00      	cmp	r3, #0
 8012748:	d106      	bne.n	8012758 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801274a:	4848      	ldr	r0, [pc, #288]	; (801286c <tcp_receive+0xd00>)
 801274c:	f7fd fbba 	bl	800fec4 <tcp_seg_copy>
 8012750:	4602      	mov	r2, r0
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	675a      	str	r2, [r3, #116]	; 0x74
 8012756:	e16d      	b.n	8012a34 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012758:	2300      	movs	r3, #0
 801275a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012760:	63bb      	str	r3, [r7, #56]	; 0x38
 8012762:	e157      	b.n	8012a14 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8012764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012766:	68db      	ldr	r3, [r3, #12]
 8012768:	685a      	ldr	r2, [r3, #4]
 801276a:	4b41      	ldr	r3, [pc, #260]	; (8012870 <tcp_receive+0xd04>)
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	429a      	cmp	r2, r3
 8012770:	d11d      	bne.n	80127ae <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012772:	4b3e      	ldr	r3, [pc, #248]	; (801286c <tcp_receive+0xd00>)
 8012774:	891a      	ldrh	r2, [r3, #8]
 8012776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012778:	891b      	ldrh	r3, [r3, #8]
 801277a:	429a      	cmp	r2, r3
 801277c:	f240 814f 	bls.w	8012a1e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012780:	483a      	ldr	r0, [pc, #232]	; (801286c <tcp_receive+0xd00>)
 8012782:	f7fd fb9f 	bl	800fec4 <tcp_seg_copy>
 8012786:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012788:	697b      	ldr	r3, [r7, #20]
 801278a:	2b00      	cmp	r3, #0
 801278c:	f000 8149 	beq.w	8012a22 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8012790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012792:	2b00      	cmp	r3, #0
 8012794:	d003      	beq.n	801279e <tcp_receive+0xc32>
                    prev->next = cseg;
 8012796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012798:	697a      	ldr	r2, [r7, #20]
 801279a:	601a      	str	r2, [r3, #0]
 801279c:	e002      	b.n	80127a4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	697a      	ldr	r2, [r7, #20]
 80127a2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80127a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80127a6:	6978      	ldr	r0, [r7, #20]
 80127a8:	f7ff f8dc 	bl	8011964 <tcp_oos_insert_segment>
                }
                break;
 80127ac:	e139      	b.n	8012a22 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80127ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d117      	bne.n	80127e4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80127b4:	4b2e      	ldr	r3, [pc, #184]	; (8012870 <tcp_receive+0xd04>)
 80127b6:	681a      	ldr	r2, [r3, #0]
 80127b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ba:	68db      	ldr	r3, [r3, #12]
 80127bc:	685b      	ldr	r3, [r3, #4]
 80127be:	1ad3      	subs	r3, r2, r3
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	da57      	bge.n	8012874 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80127c4:	4829      	ldr	r0, [pc, #164]	; (801286c <tcp_receive+0xd00>)
 80127c6:	f7fd fb7d 	bl	800fec4 <tcp_seg_copy>
 80127ca:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80127cc:	69bb      	ldr	r3, [r7, #24]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	f000 8129 	beq.w	8012a26 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	69ba      	ldr	r2, [r7, #24]
 80127d8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80127da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80127dc:	69b8      	ldr	r0, [r7, #24]
 80127de:	f7ff f8c1 	bl	8011964 <tcp_oos_insert_segment>
                  }
                  break;
 80127e2:	e120      	b.n	8012a26 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80127e4:	4b22      	ldr	r3, [pc, #136]	; (8012870 <tcp_receive+0xd04>)
 80127e6:	681a      	ldr	r2, [r3, #0]
 80127e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127ea:	68db      	ldr	r3, [r3, #12]
 80127ec:	685b      	ldr	r3, [r3, #4]
 80127ee:	1ad3      	subs	r3, r2, r3
 80127f0:	3b01      	subs	r3, #1
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	db3e      	blt.n	8012874 <tcp_receive+0xd08>
 80127f6:	4b1e      	ldr	r3, [pc, #120]	; (8012870 <tcp_receive+0xd04>)
 80127f8:	681a      	ldr	r2, [r3, #0]
 80127fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127fc:	68db      	ldr	r3, [r3, #12]
 80127fe:	685b      	ldr	r3, [r3, #4]
 8012800:	1ad3      	subs	r3, r2, r3
 8012802:	3301      	adds	r3, #1
 8012804:	2b00      	cmp	r3, #0
 8012806:	dc35      	bgt.n	8012874 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012808:	4818      	ldr	r0, [pc, #96]	; (801286c <tcp_receive+0xd00>)
 801280a:	f7fd fb5b 	bl	800fec4 <tcp_seg_copy>
 801280e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012810:	69fb      	ldr	r3, [r7, #28]
 8012812:	2b00      	cmp	r3, #0
 8012814:	f000 8109 	beq.w	8012a2a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801281a:	68db      	ldr	r3, [r3, #12]
 801281c:	685b      	ldr	r3, [r3, #4]
 801281e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012820:	8912      	ldrh	r2, [r2, #8]
 8012822:	441a      	add	r2, r3
 8012824:	4b12      	ldr	r3, [pc, #72]	; (8012870 <tcp_receive+0xd04>)
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	1ad3      	subs	r3, r2, r3
 801282a:	2b00      	cmp	r3, #0
 801282c:	dd12      	ble.n	8012854 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801282e:	4b10      	ldr	r3, [pc, #64]	; (8012870 <tcp_receive+0xd04>)
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	b29a      	uxth	r2, r3
 8012834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012836:	68db      	ldr	r3, [r3, #12]
 8012838:	685b      	ldr	r3, [r3, #4]
 801283a:	b29b      	uxth	r3, r3
 801283c:	1ad3      	subs	r3, r2, r3
 801283e:	b29a      	uxth	r2, r3
 8012840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012842:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012846:	685a      	ldr	r2, [r3, #4]
 8012848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801284a:	891b      	ldrh	r3, [r3, #8]
 801284c:	4619      	mov	r1, r3
 801284e:	4610      	mov	r0, r2
 8012850:	f7fb ff1a 	bl	800e688 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012856:	69fa      	ldr	r2, [r7, #28]
 8012858:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801285a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801285c:	69f8      	ldr	r0, [r7, #28]
 801285e:	f7ff f881 	bl	8011964 <tcp_oos_insert_segment>
                  }
                  break;
 8012862:	e0e2      	b.n	8012a2a <tcp_receive+0xebe>
 8012864:	20011068 	.word	0x20011068
 8012868:	20011065 	.word	0x20011065
 801286c:	20011038 	.word	0x20011038
 8012870:	20011058 	.word	0x20011058
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012876:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	2b00      	cmp	r3, #0
 801287e:	f040 80c6 	bne.w	8012a0e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012882:	4b80      	ldr	r3, [pc, #512]	; (8012a84 <tcp_receive+0xf18>)
 8012884:	681a      	ldr	r2, [r3, #0]
 8012886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012888:	68db      	ldr	r3, [r3, #12]
 801288a:	685b      	ldr	r3, [r3, #4]
 801288c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801288e:	2b00      	cmp	r3, #0
 8012890:	f340 80bd 	ble.w	8012a0e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012896:	68db      	ldr	r3, [r3, #12]
 8012898:	899b      	ldrh	r3, [r3, #12]
 801289a:	b29b      	uxth	r3, r3
 801289c:	4618      	mov	r0, r3
 801289e:	f7fa fc87 	bl	800d1b0 <lwip_htons>
 80128a2:	4603      	mov	r3, r0
 80128a4:	b2db      	uxtb	r3, r3
 80128a6:	f003 0301 	and.w	r3, r3, #1
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	f040 80bf 	bne.w	8012a2e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80128b0:	4875      	ldr	r0, [pc, #468]	; (8012a88 <tcp_receive+0xf1c>)
 80128b2:	f7fd fb07 	bl	800fec4 <tcp_seg_copy>
 80128b6:	4602      	mov	r2, r0
 80128b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ba:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80128bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	f000 80b6 	beq.w	8012a32 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80128c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128c8:	68db      	ldr	r3, [r3, #12]
 80128ca:	685b      	ldr	r3, [r3, #4]
 80128cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80128ce:	8912      	ldrh	r2, [r2, #8]
 80128d0:	441a      	add	r2, r3
 80128d2:	4b6c      	ldr	r3, [pc, #432]	; (8012a84 <tcp_receive+0xf18>)
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	1ad3      	subs	r3, r2, r3
 80128d8:	2b00      	cmp	r3, #0
 80128da:	dd12      	ble.n	8012902 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80128dc:	4b69      	ldr	r3, [pc, #420]	; (8012a84 <tcp_receive+0xf18>)
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	b29a      	uxth	r2, r3
 80128e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128e4:	68db      	ldr	r3, [r3, #12]
 80128e6:	685b      	ldr	r3, [r3, #4]
 80128e8:	b29b      	uxth	r3, r3
 80128ea:	1ad3      	subs	r3, r2, r3
 80128ec:	b29a      	uxth	r2, r3
 80128ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128f0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80128f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128f4:	685a      	ldr	r2, [r3, #4]
 80128f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128f8:	891b      	ldrh	r3, [r3, #8]
 80128fa:	4619      	mov	r1, r3
 80128fc:	4610      	mov	r0, r2
 80128fe:	f7fb fec3 	bl	800e688 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012902:	4b62      	ldr	r3, [pc, #392]	; (8012a8c <tcp_receive+0xf20>)
 8012904:	881b      	ldrh	r3, [r3, #0]
 8012906:	461a      	mov	r2, r3
 8012908:	4b5e      	ldr	r3, [pc, #376]	; (8012a84 <tcp_receive+0xf18>)
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	441a      	add	r2, r3
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012912:	6879      	ldr	r1, [r7, #4]
 8012914:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012916:	440b      	add	r3, r1
 8012918:	1ad3      	subs	r3, r2, r3
 801291a:	2b00      	cmp	r3, #0
 801291c:	f340 8089 	ble.w	8012a32 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	68db      	ldr	r3, [r3, #12]
 8012926:	899b      	ldrh	r3, [r3, #12]
 8012928:	b29b      	uxth	r3, r3
 801292a:	4618      	mov	r0, r3
 801292c:	f7fa fc40 	bl	800d1b0 <lwip_htons>
 8012930:	4603      	mov	r3, r0
 8012932:	b2db      	uxtb	r3, r3
 8012934:	f003 0301 	and.w	r3, r3, #1
 8012938:	2b00      	cmp	r3, #0
 801293a:	d022      	beq.n	8012982 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801293c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	68db      	ldr	r3, [r3, #12]
 8012942:	899b      	ldrh	r3, [r3, #12]
 8012944:	b29b      	uxth	r3, r3
 8012946:	b21b      	sxth	r3, r3
 8012948:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801294c:	b21c      	sxth	r4, r3
 801294e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	68db      	ldr	r3, [r3, #12]
 8012954:	899b      	ldrh	r3, [r3, #12]
 8012956:	b29b      	uxth	r3, r3
 8012958:	4618      	mov	r0, r3
 801295a:	f7fa fc29 	bl	800d1b0 <lwip_htons>
 801295e:	4603      	mov	r3, r0
 8012960:	b2db      	uxtb	r3, r3
 8012962:	b29b      	uxth	r3, r3
 8012964:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012968:	b29b      	uxth	r3, r3
 801296a:	4618      	mov	r0, r3
 801296c:	f7fa fc20 	bl	800d1b0 <lwip_htons>
 8012970:	4603      	mov	r3, r0
 8012972:	b21b      	sxth	r3, r3
 8012974:	4323      	orrs	r3, r4
 8012976:	b21a      	sxth	r2, r3
 8012978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	68db      	ldr	r3, [r3, #12]
 801297e:	b292      	uxth	r2, r2
 8012980:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012986:	b29a      	uxth	r2, r3
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801298c:	4413      	add	r3, r2
 801298e:	b299      	uxth	r1, r3
 8012990:	4b3c      	ldr	r3, [pc, #240]	; (8012a84 <tcp_receive+0xf18>)
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	b29a      	uxth	r2, r3
 8012996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	1a8a      	subs	r2, r1, r2
 801299c:	b292      	uxth	r2, r2
 801299e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80129a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	685a      	ldr	r2, [r3, #4]
 80129a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	891b      	ldrh	r3, [r3, #8]
 80129ac:	4619      	mov	r1, r3
 80129ae:	4610      	mov	r0, r2
 80129b0:	f7fb fe6a 	bl	800e688 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80129b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	891c      	ldrh	r4, [r3, #8]
 80129ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	68db      	ldr	r3, [r3, #12]
 80129c0:	899b      	ldrh	r3, [r3, #12]
 80129c2:	b29b      	uxth	r3, r3
 80129c4:	4618      	mov	r0, r3
 80129c6:	f7fa fbf3 	bl	800d1b0 <lwip_htons>
 80129ca:	4603      	mov	r3, r0
 80129cc:	b2db      	uxtb	r3, r3
 80129ce:	f003 0303 	and.w	r3, r3, #3
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d001      	beq.n	80129da <tcp_receive+0xe6e>
 80129d6:	2301      	movs	r3, #1
 80129d8:	e000      	b.n	80129dc <tcp_receive+0xe70>
 80129da:	2300      	movs	r3, #0
 80129dc:	4423      	add	r3, r4
 80129de:	b29a      	uxth	r2, r3
 80129e0:	4b2a      	ldr	r3, [pc, #168]	; (8012a8c <tcp_receive+0xf20>)
 80129e2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80129e4:	4b29      	ldr	r3, [pc, #164]	; (8012a8c <tcp_receive+0xf20>)
 80129e6:	881b      	ldrh	r3, [r3, #0]
 80129e8:	461a      	mov	r2, r3
 80129ea:	4b26      	ldr	r3, [pc, #152]	; (8012a84 <tcp_receive+0xf18>)
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	441a      	add	r2, r3
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129f4:	6879      	ldr	r1, [r7, #4]
 80129f6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80129f8:	440b      	add	r3, r1
 80129fa:	429a      	cmp	r2, r3
 80129fc:	d019      	beq.n	8012a32 <tcp_receive+0xec6>
 80129fe:	4b24      	ldr	r3, [pc, #144]	; (8012a90 <tcp_receive+0xf24>)
 8012a00:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012a04:	4923      	ldr	r1, [pc, #140]	; (8012a94 <tcp_receive+0xf28>)
 8012a06:	4824      	ldr	r0, [pc, #144]	; (8012a98 <tcp_receive+0xf2c>)
 8012a08:	f004 faf0 	bl	8016fec <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012a0c:	e011      	b.n	8012a32 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	63bb      	str	r3, [r7, #56]	; 0x38
 8012a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	f47f aea4 	bne.w	8012764 <tcp_receive+0xbf8>
 8012a1c:	e00a      	b.n	8012a34 <tcp_receive+0xec8>
                break;
 8012a1e:	bf00      	nop
 8012a20:	e008      	b.n	8012a34 <tcp_receive+0xec8>
                break;
 8012a22:	bf00      	nop
 8012a24:	e006      	b.n	8012a34 <tcp_receive+0xec8>
                  break;
 8012a26:	bf00      	nop
 8012a28:	e004      	b.n	8012a34 <tcp_receive+0xec8>
                  break;
 8012a2a:	bf00      	nop
 8012a2c:	e002      	b.n	8012a34 <tcp_receive+0xec8>
                  break;
 8012a2e:	bf00      	nop
 8012a30:	e000      	b.n	8012a34 <tcp_receive+0xec8>
                break;
 8012a32:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012a34:	6878      	ldr	r0, [r7, #4]
 8012a36:	f001 fa33 	bl	8013ea0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012a3a:	e003      	b.n	8012a44 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012a3c:	6878      	ldr	r0, [r7, #4]
 8012a3e:	f001 fa2f 	bl	8013ea0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012a42:	e01a      	b.n	8012a7a <tcp_receive+0xf0e>
 8012a44:	e019      	b.n	8012a7a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012a46:	4b0f      	ldr	r3, [pc, #60]	; (8012a84 <tcp_receive+0xf18>)
 8012a48:	681a      	ldr	r2, [r3, #0]
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a4e:	1ad3      	subs	r3, r2, r3
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	db0a      	blt.n	8012a6a <tcp_receive+0xefe>
 8012a54:	4b0b      	ldr	r3, [pc, #44]	; (8012a84 <tcp_receive+0xf18>)
 8012a56:	681a      	ldr	r2, [r3, #0]
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a5c:	6879      	ldr	r1, [r7, #4]
 8012a5e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012a60:	440b      	add	r3, r1
 8012a62:	1ad3      	subs	r3, r2, r3
 8012a64:	3301      	adds	r3, #1
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	dd07      	ble.n	8012a7a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	8b5b      	ldrh	r3, [r3, #26]
 8012a6e:	f043 0302 	orr.w	r3, r3, #2
 8012a72:	b29a      	uxth	r2, r3
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012a78:	e7ff      	b.n	8012a7a <tcp_receive+0xf0e>
 8012a7a:	bf00      	nop
 8012a7c:	3750      	adds	r7, #80	; 0x50
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	bdb0      	pop	{r4, r5, r7, pc}
 8012a82:	bf00      	nop
 8012a84:	20011058 	.word	0x20011058
 8012a88:	20011038 	.word	0x20011038
 8012a8c:	20011062 	.word	0x20011062
 8012a90:	0801968c 	.word	0x0801968c
 8012a94:	08019a34 	.word	0x08019a34
 8012a98:	080196d8 	.word	0x080196d8

08012a9c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012a9c:	b480      	push	{r7}
 8012a9e:	b083      	sub	sp, #12
 8012aa0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012aa2:	4b15      	ldr	r3, [pc, #84]	; (8012af8 <tcp_get_next_optbyte+0x5c>)
 8012aa4:	881b      	ldrh	r3, [r3, #0]
 8012aa6:	1c5a      	adds	r2, r3, #1
 8012aa8:	b291      	uxth	r1, r2
 8012aaa:	4a13      	ldr	r2, [pc, #76]	; (8012af8 <tcp_get_next_optbyte+0x5c>)
 8012aac:	8011      	strh	r1, [r2, #0]
 8012aae:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012ab0:	4b12      	ldr	r3, [pc, #72]	; (8012afc <tcp_get_next_optbyte+0x60>)
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d004      	beq.n	8012ac2 <tcp_get_next_optbyte+0x26>
 8012ab8:	4b11      	ldr	r3, [pc, #68]	; (8012b00 <tcp_get_next_optbyte+0x64>)
 8012aba:	881b      	ldrh	r3, [r3, #0]
 8012abc:	88fa      	ldrh	r2, [r7, #6]
 8012abe:	429a      	cmp	r2, r3
 8012ac0:	d208      	bcs.n	8012ad4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012ac2:	4b10      	ldr	r3, [pc, #64]	; (8012b04 <tcp_get_next_optbyte+0x68>)
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	3314      	adds	r3, #20
 8012ac8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012aca:	88fb      	ldrh	r3, [r7, #6]
 8012acc:	683a      	ldr	r2, [r7, #0]
 8012ace:	4413      	add	r3, r2
 8012ad0:	781b      	ldrb	r3, [r3, #0]
 8012ad2:	e00b      	b.n	8012aec <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012ad4:	88fb      	ldrh	r3, [r7, #6]
 8012ad6:	b2da      	uxtb	r2, r3
 8012ad8:	4b09      	ldr	r3, [pc, #36]	; (8012b00 <tcp_get_next_optbyte+0x64>)
 8012ada:	881b      	ldrh	r3, [r3, #0]
 8012adc:	b2db      	uxtb	r3, r3
 8012ade:	1ad3      	subs	r3, r2, r3
 8012ae0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012ae2:	4b06      	ldr	r3, [pc, #24]	; (8012afc <tcp_get_next_optbyte+0x60>)
 8012ae4:	681a      	ldr	r2, [r3, #0]
 8012ae6:	797b      	ldrb	r3, [r7, #5]
 8012ae8:	4413      	add	r3, r2
 8012aea:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012aec:	4618      	mov	r0, r3
 8012aee:	370c      	adds	r7, #12
 8012af0:	46bd      	mov	sp, r7
 8012af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af6:	4770      	bx	lr
 8012af8:	20011054 	.word	0x20011054
 8012afc:	20011050 	.word	0x20011050
 8012b00:	2001104e 	.word	0x2001104e
 8012b04:	20011048 	.word	0x20011048

08012b08 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b084      	sub	sp, #16
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d106      	bne.n	8012b24 <tcp_parseopt+0x1c>
 8012b16:	4b32      	ldr	r3, [pc, #200]	; (8012be0 <tcp_parseopt+0xd8>)
 8012b18:	f240 727d 	movw	r2, #1917	; 0x77d
 8012b1c:	4931      	ldr	r1, [pc, #196]	; (8012be4 <tcp_parseopt+0xdc>)
 8012b1e:	4832      	ldr	r0, [pc, #200]	; (8012be8 <tcp_parseopt+0xe0>)
 8012b20:	f004 fa64 	bl	8016fec <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012b24:	4b31      	ldr	r3, [pc, #196]	; (8012bec <tcp_parseopt+0xe4>)
 8012b26:	881b      	ldrh	r3, [r3, #0]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d055      	beq.n	8012bd8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012b2c:	4b30      	ldr	r3, [pc, #192]	; (8012bf0 <tcp_parseopt+0xe8>)
 8012b2e:	2200      	movs	r2, #0
 8012b30:	801a      	strh	r2, [r3, #0]
 8012b32:	e045      	b.n	8012bc0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8012b34:	f7ff ffb2 	bl	8012a9c <tcp_get_next_optbyte>
 8012b38:	4603      	mov	r3, r0
 8012b3a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012b3c:	7bfb      	ldrb	r3, [r7, #15]
 8012b3e:	2b02      	cmp	r3, #2
 8012b40:	d006      	beq.n	8012b50 <tcp_parseopt+0x48>
 8012b42:	2b02      	cmp	r3, #2
 8012b44:	dc2b      	bgt.n	8012b9e <tcp_parseopt+0x96>
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d041      	beq.n	8012bce <tcp_parseopt+0xc6>
 8012b4a:	2b01      	cmp	r3, #1
 8012b4c:	d127      	bne.n	8012b9e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8012b4e:	e037      	b.n	8012bc0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012b50:	f7ff ffa4 	bl	8012a9c <tcp_get_next_optbyte>
 8012b54:	4603      	mov	r3, r0
 8012b56:	2b04      	cmp	r3, #4
 8012b58:	d13b      	bne.n	8012bd2 <tcp_parseopt+0xca>
 8012b5a:	4b25      	ldr	r3, [pc, #148]	; (8012bf0 <tcp_parseopt+0xe8>)
 8012b5c:	881b      	ldrh	r3, [r3, #0]
 8012b5e:	3301      	adds	r3, #1
 8012b60:	4a22      	ldr	r2, [pc, #136]	; (8012bec <tcp_parseopt+0xe4>)
 8012b62:	8812      	ldrh	r2, [r2, #0]
 8012b64:	4293      	cmp	r3, r2
 8012b66:	da34      	bge.n	8012bd2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012b68:	f7ff ff98 	bl	8012a9c <tcp_get_next_optbyte>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	b29b      	uxth	r3, r3
 8012b70:	021b      	lsls	r3, r3, #8
 8012b72:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012b74:	f7ff ff92 	bl	8012a9c <tcp_get_next_optbyte>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	b29a      	uxth	r2, r3
 8012b7c:	89bb      	ldrh	r3, [r7, #12]
 8012b7e:	4313      	orrs	r3, r2
 8012b80:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012b82:	89bb      	ldrh	r3, [r7, #12]
 8012b84:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012b88:	d804      	bhi.n	8012b94 <tcp_parseopt+0x8c>
 8012b8a:	89bb      	ldrh	r3, [r7, #12]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d001      	beq.n	8012b94 <tcp_parseopt+0x8c>
 8012b90:	89ba      	ldrh	r2, [r7, #12]
 8012b92:	e001      	b.n	8012b98 <tcp_parseopt+0x90>
 8012b94:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012b9c:	e010      	b.n	8012bc0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012b9e:	f7ff ff7d 	bl	8012a9c <tcp_get_next_optbyte>
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012ba6:	7afb      	ldrb	r3, [r7, #11]
 8012ba8:	2b01      	cmp	r3, #1
 8012baa:	d914      	bls.n	8012bd6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012bac:	7afb      	ldrb	r3, [r7, #11]
 8012bae:	b29a      	uxth	r2, r3
 8012bb0:	4b0f      	ldr	r3, [pc, #60]	; (8012bf0 <tcp_parseopt+0xe8>)
 8012bb2:	881b      	ldrh	r3, [r3, #0]
 8012bb4:	4413      	add	r3, r2
 8012bb6:	b29b      	uxth	r3, r3
 8012bb8:	3b02      	subs	r3, #2
 8012bba:	b29a      	uxth	r2, r3
 8012bbc:	4b0c      	ldr	r3, [pc, #48]	; (8012bf0 <tcp_parseopt+0xe8>)
 8012bbe:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012bc0:	4b0b      	ldr	r3, [pc, #44]	; (8012bf0 <tcp_parseopt+0xe8>)
 8012bc2:	881a      	ldrh	r2, [r3, #0]
 8012bc4:	4b09      	ldr	r3, [pc, #36]	; (8012bec <tcp_parseopt+0xe4>)
 8012bc6:	881b      	ldrh	r3, [r3, #0]
 8012bc8:	429a      	cmp	r2, r3
 8012bca:	d3b3      	bcc.n	8012b34 <tcp_parseopt+0x2c>
 8012bcc:	e004      	b.n	8012bd8 <tcp_parseopt+0xd0>
          return;
 8012bce:	bf00      	nop
 8012bd0:	e002      	b.n	8012bd8 <tcp_parseopt+0xd0>
            return;
 8012bd2:	bf00      	nop
 8012bd4:	e000      	b.n	8012bd8 <tcp_parseopt+0xd0>
            return;
 8012bd6:	bf00      	nop
      }
    }
  }
}
 8012bd8:	3710      	adds	r7, #16
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	bd80      	pop	{r7, pc}
 8012bde:	bf00      	nop
 8012be0:	0801968c 	.word	0x0801968c
 8012be4:	08019af0 	.word	0x08019af0
 8012be8:	080196d8 	.word	0x080196d8
 8012bec:	2001104c 	.word	0x2001104c
 8012bf0:	20011054 	.word	0x20011054

08012bf4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012bf4:	b480      	push	{r7}
 8012bf6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012bf8:	4b05      	ldr	r3, [pc, #20]	; (8012c10 <tcp_trigger_input_pcb_close+0x1c>)
 8012bfa:	781b      	ldrb	r3, [r3, #0]
 8012bfc:	f043 0310 	orr.w	r3, r3, #16
 8012c00:	b2da      	uxtb	r2, r3
 8012c02:	4b03      	ldr	r3, [pc, #12]	; (8012c10 <tcp_trigger_input_pcb_close+0x1c>)
 8012c04:	701a      	strb	r2, [r3, #0]
}
 8012c06:	bf00      	nop
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0e:	4770      	bx	lr
 8012c10:	20011065 	.word	0x20011065

08012c14 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b084      	sub	sp, #16
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	60f8      	str	r0, [r7, #12]
 8012c1c:	60b9      	str	r1, [r7, #8]
 8012c1e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d00a      	beq.n	8012c3c <tcp_route+0x28>
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	7a1b      	ldrb	r3, [r3, #8]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d006      	beq.n	8012c3c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	7a1b      	ldrb	r3, [r3, #8]
 8012c32:	4618      	mov	r0, r3
 8012c34:	f7fb fb20 	bl	800e278 <netif_get_by_index>
 8012c38:	4603      	mov	r3, r0
 8012c3a:	e003      	b.n	8012c44 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012c3c:	6878      	ldr	r0, [r7, #4]
 8012c3e:	f002 fead 	bl	801599c <ip4_route>
 8012c42:	4603      	mov	r3, r0
  }
}
 8012c44:	4618      	mov	r0, r3
 8012c46:	3710      	adds	r7, #16
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	bd80      	pop	{r7, pc}

08012c4c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012c4c:	b590      	push	{r4, r7, lr}
 8012c4e:	b087      	sub	sp, #28
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	60f8      	str	r0, [r7, #12]
 8012c54:	60b9      	str	r1, [r7, #8]
 8012c56:	603b      	str	r3, [r7, #0]
 8012c58:	4613      	mov	r3, r2
 8012c5a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d105      	bne.n	8012c6e <tcp_create_segment+0x22>
 8012c62:	4b44      	ldr	r3, [pc, #272]	; (8012d74 <tcp_create_segment+0x128>)
 8012c64:	22a3      	movs	r2, #163	; 0xa3
 8012c66:	4944      	ldr	r1, [pc, #272]	; (8012d78 <tcp_create_segment+0x12c>)
 8012c68:	4844      	ldr	r0, [pc, #272]	; (8012d7c <tcp_create_segment+0x130>)
 8012c6a:	f004 f9bf 	bl	8016fec <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012c6e:	68bb      	ldr	r3, [r7, #8]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d105      	bne.n	8012c80 <tcp_create_segment+0x34>
 8012c74:	4b3f      	ldr	r3, [pc, #252]	; (8012d74 <tcp_create_segment+0x128>)
 8012c76:	22a4      	movs	r2, #164	; 0xa4
 8012c78:	4941      	ldr	r1, [pc, #260]	; (8012d80 <tcp_create_segment+0x134>)
 8012c7a:	4840      	ldr	r0, [pc, #256]	; (8012d7c <tcp_create_segment+0x130>)
 8012c7c:	f004 f9b6 	bl	8016fec <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012c80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012c84:	009b      	lsls	r3, r3, #2
 8012c86:	b2db      	uxtb	r3, r3
 8012c88:	f003 0304 	and.w	r3, r3, #4
 8012c8c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012c8e:	2003      	movs	r0, #3
 8012c90:	f7fa ff66 	bl	800db60 <memp_malloc>
 8012c94:	6138      	str	r0, [r7, #16]
 8012c96:	693b      	ldr	r3, [r7, #16]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d104      	bne.n	8012ca6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012c9c:	68b8      	ldr	r0, [r7, #8]
 8012c9e:	f7fb fe79 	bl	800e994 <pbuf_free>
    return NULL;
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	e061      	b.n	8012d6a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8012ca6:	693b      	ldr	r3, [r7, #16]
 8012ca8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012cac:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012cae:	693b      	ldr	r3, [r7, #16]
 8012cb0:	2200      	movs	r2, #0
 8012cb2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012cb4:	693b      	ldr	r3, [r7, #16]
 8012cb6:	68ba      	ldr	r2, [r7, #8]
 8012cb8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012cba:	68bb      	ldr	r3, [r7, #8]
 8012cbc:	891a      	ldrh	r2, [r3, #8]
 8012cbe:	7dfb      	ldrb	r3, [r7, #23]
 8012cc0:	b29b      	uxth	r3, r3
 8012cc2:	429a      	cmp	r2, r3
 8012cc4:	d205      	bcs.n	8012cd2 <tcp_create_segment+0x86>
 8012cc6:	4b2b      	ldr	r3, [pc, #172]	; (8012d74 <tcp_create_segment+0x128>)
 8012cc8:	22b0      	movs	r2, #176	; 0xb0
 8012cca:	492e      	ldr	r1, [pc, #184]	; (8012d84 <tcp_create_segment+0x138>)
 8012ccc:	482b      	ldr	r0, [pc, #172]	; (8012d7c <tcp_create_segment+0x130>)
 8012cce:	f004 f98d 	bl	8016fec <iprintf>
  seg->len = p->tot_len - optlen;
 8012cd2:	68bb      	ldr	r3, [r7, #8]
 8012cd4:	891a      	ldrh	r2, [r3, #8]
 8012cd6:	7dfb      	ldrb	r3, [r7, #23]
 8012cd8:	b29b      	uxth	r3, r3
 8012cda:	1ad3      	subs	r3, r2, r3
 8012cdc:	b29a      	uxth	r2, r3
 8012cde:	693b      	ldr	r3, [r7, #16]
 8012ce0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012ce2:	2114      	movs	r1, #20
 8012ce4:	68b8      	ldr	r0, [r7, #8]
 8012ce6:	f7fb fdbf 	bl	800e868 <pbuf_add_header>
 8012cea:	4603      	mov	r3, r0
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d004      	beq.n	8012cfa <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012cf0:	6938      	ldr	r0, [r7, #16]
 8012cf2:	f7fd f8ce 	bl	800fe92 <tcp_seg_free>
    return NULL;
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	e037      	b.n	8012d6a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012cfa:	693b      	ldr	r3, [r7, #16]
 8012cfc:	685b      	ldr	r3, [r3, #4]
 8012cfe:	685a      	ldr	r2, [r3, #4]
 8012d00:	693b      	ldr	r3, [r7, #16]
 8012d02:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	8ada      	ldrh	r2, [r3, #22]
 8012d08:	693b      	ldr	r3, [r7, #16]
 8012d0a:	68dc      	ldr	r4, [r3, #12]
 8012d0c:	4610      	mov	r0, r2
 8012d0e:	f7fa fa4f 	bl	800d1b0 <lwip_htons>
 8012d12:	4603      	mov	r3, r0
 8012d14:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	8b1a      	ldrh	r2, [r3, #24]
 8012d1a:	693b      	ldr	r3, [r7, #16]
 8012d1c:	68dc      	ldr	r4, [r3, #12]
 8012d1e:	4610      	mov	r0, r2
 8012d20:	f7fa fa46 	bl	800d1b0 <lwip_htons>
 8012d24:	4603      	mov	r3, r0
 8012d26:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012d28:	693b      	ldr	r3, [r7, #16]
 8012d2a:	68dc      	ldr	r4, [r3, #12]
 8012d2c:	6838      	ldr	r0, [r7, #0]
 8012d2e:	f7fa fa54 	bl	800d1da <lwip_htonl>
 8012d32:	4603      	mov	r3, r0
 8012d34:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012d36:	7dfb      	ldrb	r3, [r7, #23]
 8012d38:	089b      	lsrs	r3, r3, #2
 8012d3a:	b2db      	uxtb	r3, r3
 8012d3c:	b29b      	uxth	r3, r3
 8012d3e:	3305      	adds	r3, #5
 8012d40:	b29b      	uxth	r3, r3
 8012d42:	031b      	lsls	r3, r3, #12
 8012d44:	b29a      	uxth	r2, r3
 8012d46:	79fb      	ldrb	r3, [r7, #7]
 8012d48:	b29b      	uxth	r3, r3
 8012d4a:	4313      	orrs	r3, r2
 8012d4c:	b29a      	uxth	r2, r3
 8012d4e:	693b      	ldr	r3, [r7, #16]
 8012d50:	68dc      	ldr	r4, [r3, #12]
 8012d52:	4610      	mov	r0, r2
 8012d54:	f7fa fa2c 	bl	800d1b0 <lwip_htons>
 8012d58:	4603      	mov	r3, r0
 8012d5a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012d5c:	693b      	ldr	r3, [r7, #16]
 8012d5e:	68db      	ldr	r3, [r3, #12]
 8012d60:	2200      	movs	r2, #0
 8012d62:	749a      	strb	r2, [r3, #18]
 8012d64:	2200      	movs	r2, #0
 8012d66:	74da      	strb	r2, [r3, #19]
  return seg;
 8012d68:	693b      	ldr	r3, [r7, #16]
}
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	371c      	adds	r7, #28
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	bd90      	pop	{r4, r7, pc}
 8012d72:	bf00      	nop
 8012d74:	08019b0c 	.word	0x08019b0c
 8012d78:	08019b40 	.word	0x08019b40
 8012d7c:	08019b60 	.word	0x08019b60
 8012d80:	08019b88 	.word	0x08019b88
 8012d84:	08019bac 	.word	0x08019bac

08012d88 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012d88:	b590      	push	{r4, r7, lr}
 8012d8a:	b08b      	sub	sp, #44	; 0x2c
 8012d8c:	af02      	add	r7, sp, #8
 8012d8e:	6078      	str	r0, [r7, #4]
 8012d90:	460b      	mov	r3, r1
 8012d92:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012d94:	2300      	movs	r3, #0
 8012d96:	61fb      	str	r3, [r7, #28]
 8012d98:	2300      	movs	r3, #0
 8012d9a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d106      	bne.n	8012db4 <tcp_split_unsent_seg+0x2c>
 8012da6:	4b95      	ldr	r3, [pc, #596]	; (8012ffc <tcp_split_unsent_seg+0x274>)
 8012da8:	f240 324b 	movw	r2, #843	; 0x34b
 8012dac:	4994      	ldr	r1, [pc, #592]	; (8013000 <tcp_split_unsent_seg+0x278>)
 8012dae:	4895      	ldr	r0, [pc, #596]	; (8013004 <tcp_split_unsent_seg+0x27c>)
 8012db0:	f004 f91c 	bl	8016fec <iprintf>

  useg = pcb->unsent;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012db8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012dba:	697b      	ldr	r3, [r7, #20]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d102      	bne.n	8012dc6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8012dc4:	e116      	b.n	8012ff4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012dc6:	887b      	ldrh	r3, [r7, #2]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d109      	bne.n	8012de0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012dcc:	4b8b      	ldr	r3, [pc, #556]	; (8012ffc <tcp_split_unsent_seg+0x274>)
 8012dce:	f240 3253 	movw	r2, #851	; 0x353
 8012dd2:	498d      	ldr	r1, [pc, #564]	; (8013008 <tcp_split_unsent_seg+0x280>)
 8012dd4:	488b      	ldr	r0, [pc, #556]	; (8013004 <tcp_split_unsent_seg+0x27c>)
 8012dd6:	f004 f909 	bl	8016fec <iprintf>
    return ERR_VAL;
 8012dda:	f06f 0305 	mvn.w	r3, #5
 8012dde:	e109      	b.n	8012ff4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012de0:	697b      	ldr	r3, [r7, #20]
 8012de2:	891b      	ldrh	r3, [r3, #8]
 8012de4:	887a      	ldrh	r2, [r7, #2]
 8012de6:	429a      	cmp	r2, r3
 8012de8:	d301      	bcc.n	8012dee <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012dea:	2300      	movs	r3, #0
 8012dec:	e102      	b.n	8012ff4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012df2:	887a      	ldrh	r2, [r7, #2]
 8012df4:	429a      	cmp	r2, r3
 8012df6:	d906      	bls.n	8012e06 <tcp_split_unsent_seg+0x7e>
 8012df8:	4b80      	ldr	r3, [pc, #512]	; (8012ffc <tcp_split_unsent_seg+0x274>)
 8012dfa:	f240 325b 	movw	r2, #859	; 0x35b
 8012dfe:	4983      	ldr	r1, [pc, #524]	; (801300c <tcp_split_unsent_seg+0x284>)
 8012e00:	4880      	ldr	r0, [pc, #512]	; (8013004 <tcp_split_unsent_seg+0x27c>)
 8012e02:	f004 f8f3 	bl	8016fec <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012e06:	697b      	ldr	r3, [r7, #20]
 8012e08:	891b      	ldrh	r3, [r3, #8]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d106      	bne.n	8012e1c <tcp_split_unsent_seg+0x94>
 8012e0e:	4b7b      	ldr	r3, [pc, #492]	; (8012ffc <tcp_split_unsent_seg+0x274>)
 8012e10:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012e14:	497e      	ldr	r1, [pc, #504]	; (8013010 <tcp_split_unsent_seg+0x288>)
 8012e16:	487b      	ldr	r0, [pc, #492]	; (8013004 <tcp_split_unsent_seg+0x27c>)
 8012e18:	f004 f8e8 	bl	8016fec <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012e1c:	697b      	ldr	r3, [r7, #20]
 8012e1e:	7a9b      	ldrb	r3, [r3, #10]
 8012e20:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012e22:	7bfb      	ldrb	r3, [r7, #15]
 8012e24:	009b      	lsls	r3, r3, #2
 8012e26:	b2db      	uxtb	r3, r3
 8012e28:	f003 0304 	and.w	r3, r3, #4
 8012e2c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012e2e:	697b      	ldr	r3, [r7, #20]
 8012e30:	891a      	ldrh	r2, [r3, #8]
 8012e32:	887b      	ldrh	r3, [r7, #2]
 8012e34:	1ad3      	subs	r3, r2, r3
 8012e36:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012e38:	7bbb      	ldrb	r3, [r7, #14]
 8012e3a:	b29a      	uxth	r2, r3
 8012e3c:	89bb      	ldrh	r3, [r7, #12]
 8012e3e:	4413      	add	r3, r2
 8012e40:	b29b      	uxth	r3, r3
 8012e42:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012e46:	4619      	mov	r1, r3
 8012e48:	2036      	movs	r0, #54	; 0x36
 8012e4a:	f7fb fabf 	bl	800e3cc <pbuf_alloc>
 8012e4e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012e50:	693b      	ldr	r3, [r7, #16]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	f000 80b7 	beq.w	8012fc6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012e58:	697b      	ldr	r3, [r7, #20]
 8012e5a:	685b      	ldr	r3, [r3, #4]
 8012e5c:	891a      	ldrh	r2, [r3, #8]
 8012e5e:	697b      	ldr	r3, [r7, #20]
 8012e60:	891b      	ldrh	r3, [r3, #8]
 8012e62:	1ad3      	subs	r3, r2, r3
 8012e64:	b29a      	uxth	r2, r3
 8012e66:	887b      	ldrh	r3, [r7, #2]
 8012e68:	4413      	add	r3, r2
 8012e6a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012e6c:	697b      	ldr	r3, [r7, #20]
 8012e6e:	6858      	ldr	r0, [r3, #4]
 8012e70:	693b      	ldr	r3, [r7, #16]
 8012e72:	685a      	ldr	r2, [r3, #4]
 8012e74:	7bbb      	ldrb	r3, [r7, #14]
 8012e76:	18d1      	adds	r1, r2, r3
 8012e78:	897b      	ldrh	r3, [r7, #10]
 8012e7a:	89ba      	ldrh	r2, [r7, #12]
 8012e7c:	f7fb ff80 	bl	800ed80 <pbuf_copy_partial>
 8012e80:	4603      	mov	r3, r0
 8012e82:	461a      	mov	r2, r3
 8012e84:	89bb      	ldrh	r3, [r7, #12]
 8012e86:	4293      	cmp	r3, r2
 8012e88:	f040 809f 	bne.w	8012fca <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012e8c:	697b      	ldr	r3, [r7, #20]
 8012e8e:	68db      	ldr	r3, [r3, #12]
 8012e90:	899b      	ldrh	r3, [r3, #12]
 8012e92:	b29b      	uxth	r3, r3
 8012e94:	4618      	mov	r0, r3
 8012e96:	f7fa f98b 	bl	800d1b0 <lwip_htons>
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	b2db      	uxtb	r3, r3
 8012e9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ea2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012ea8:	7efb      	ldrb	r3, [r7, #27]
 8012eaa:	f003 0308 	and.w	r3, r3, #8
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d007      	beq.n	8012ec2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012eb2:	7efb      	ldrb	r3, [r7, #27]
 8012eb4:	f023 0308 	bic.w	r3, r3, #8
 8012eb8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012eba:	7ebb      	ldrb	r3, [r7, #26]
 8012ebc:	f043 0308 	orr.w	r3, r3, #8
 8012ec0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012ec2:	7efb      	ldrb	r3, [r7, #27]
 8012ec4:	f003 0301 	and.w	r3, r3, #1
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d007      	beq.n	8012edc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012ecc:	7efb      	ldrb	r3, [r7, #27]
 8012ece:	f023 0301 	bic.w	r3, r3, #1
 8012ed2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012ed4:	7ebb      	ldrb	r3, [r7, #26]
 8012ed6:	f043 0301 	orr.w	r3, r3, #1
 8012eda:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012edc:	697b      	ldr	r3, [r7, #20]
 8012ede:	68db      	ldr	r3, [r3, #12]
 8012ee0:	685b      	ldr	r3, [r3, #4]
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f7fa f979 	bl	800d1da <lwip_htonl>
 8012ee8:	4602      	mov	r2, r0
 8012eea:	887b      	ldrh	r3, [r7, #2]
 8012eec:	18d1      	adds	r1, r2, r3
 8012eee:	7eba      	ldrb	r2, [r7, #26]
 8012ef0:	7bfb      	ldrb	r3, [r7, #15]
 8012ef2:	9300      	str	r3, [sp, #0]
 8012ef4:	460b      	mov	r3, r1
 8012ef6:	6939      	ldr	r1, [r7, #16]
 8012ef8:	6878      	ldr	r0, [r7, #4]
 8012efa:	f7ff fea7 	bl	8012c4c <tcp_create_segment>
 8012efe:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012f00:	69fb      	ldr	r3, [r7, #28]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d063      	beq.n	8012fce <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012f06:	697b      	ldr	r3, [r7, #20]
 8012f08:	685b      	ldr	r3, [r3, #4]
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f7fb fdd0 	bl	800eab0 <pbuf_clen>
 8012f10:	4603      	mov	r3, r0
 8012f12:	461a      	mov	r2, r3
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012f1a:	1a9b      	subs	r3, r3, r2
 8012f1c:	b29a      	uxth	r2, r3
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012f24:	697b      	ldr	r3, [r7, #20]
 8012f26:	6858      	ldr	r0, [r3, #4]
 8012f28:	697b      	ldr	r3, [r7, #20]
 8012f2a:	685b      	ldr	r3, [r3, #4]
 8012f2c:	891a      	ldrh	r2, [r3, #8]
 8012f2e:	89bb      	ldrh	r3, [r7, #12]
 8012f30:	1ad3      	subs	r3, r2, r3
 8012f32:	b29b      	uxth	r3, r3
 8012f34:	4619      	mov	r1, r3
 8012f36:	f7fb fba7 	bl	800e688 <pbuf_realloc>
  useg->len -= remainder;
 8012f3a:	697b      	ldr	r3, [r7, #20]
 8012f3c:	891a      	ldrh	r2, [r3, #8]
 8012f3e:	89bb      	ldrh	r3, [r7, #12]
 8012f40:	1ad3      	subs	r3, r2, r3
 8012f42:	b29a      	uxth	r2, r3
 8012f44:	697b      	ldr	r3, [r7, #20]
 8012f46:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012f48:	697b      	ldr	r3, [r7, #20]
 8012f4a:	68db      	ldr	r3, [r3, #12]
 8012f4c:	899b      	ldrh	r3, [r3, #12]
 8012f4e:	b29c      	uxth	r4, r3
 8012f50:	7efb      	ldrb	r3, [r7, #27]
 8012f52:	b29b      	uxth	r3, r3
 8012f54:	4618      	mov	r0, r3
 8012f56:	f7fa f92b 	bl	800d1b0 <lwip_htons>
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	461a      	mov	r2, r3
 8012f5e:	697b      	ldr	r3, [r7, #20]
 8012f60:	68db      	ldr	r3, [r3, #12]
 8012f62:	4322      	orrs	r2, r4
 8012f64:	b292      	uxth	r2, r2
 8012f66:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012f68:	697b      	ldr	r3, [r7, #20]
 8012f6a:	685b      	ldr	r3, [r3, #4]
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f7fb fd9f 	bl	800eab0 <pbuf_clen>
 8012f72:	4603      	mov	r3, r0
 8012f74:	461a      	mov	r2, r3
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012f7c:	4413      	add	r3, r2
 8012f7e:	b29a      	uxth	r2, r3
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012f86:	69fb      	ldr	r3, [r7, #28]
 8012f88:	685b      	ldr	r3, [r3, #4]
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	f7fb fd90 	bl	800eab0 <pbuf_clen>
 8012f90:	4603      	mov	r3, r0
 8012f92:	461a      	mov	r2, r3
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012f9a:	4413      	add	r3, r2
 8012f9c:	b29a      	uxth	r2, r3
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012fa4:	697b      	ldr	r3, [r7, #20]
 8012fa6:	681a      	ldr	r2, [r3, #0]
 8012fa8:	69fb      	ldr	r3, [r7, #28]
 8012faa:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012fac:	697b      	ldr	r3, [r7, #20]
 8012fae:	69fa      	ldr	r2, [r7, #28]
 8012fb0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012fb2:	69fb      	ldr	r3, [r7, #28]
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d103      	bne.n	8012fc2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	2200      	movs	r2, #0
 8012fbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	e016      	b.n	8012ff4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012fc6:	bf00      	nop
 8012fc8:	e002      	b.n	8012fd0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012fca:	bf00      	nop
 8012fcc:	e000      	b.n	8012fd0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012fce:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012fd0:	69fb      	ldr	r3, [r7, #28]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d006      	beq.n	8012fe4 <tcp_split_unsent_seg+0x25c>
 8012fd6:	4b09      	ldr	r3, [pc, #36]	; (8012ffc <tcp_split_unsent_seg+0x274>)
 8012fd8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012fdc:	490d      	ldr	r1, [pc, #52]	; (8013014 <tcp_split_unsent_seg+0x28c>)
 8012fde:	4809      	ldr	r0, [pc, #36]	; (8013004 <tcp_split_unsent_seg+0x27c>)
 8012fe0:	f004 f804 	bl	8016fec <iprintf>
  if (p != NULL) {
 8012fe4:	693b      	ldr	r3, [r7, #16]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d002      	beq.n	8012ff0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012fea:	6938      	ldr	r0, [r7, #16]
 8012fec:	f7fb fcd2 	bl	800e994 <pbuf_free>
  }

  return ERR_MEM;
 8012ff0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	3724      	adds	r7, #36	; 0x24
 8012ff8:	46bd      	mov	sp, r7
 8012ffa:	bd90      	pop	{r4, r7, pc}
 8012ffc:	08019b0c 	.word	0x08019b0c
 8013000:	08019ea0 	.word	0x08019ea0
 8013004:	08019b60 	.word	0x08019b60
 8013008:	08019ec4 	.word	0x08019ec4
 801300c:	08019ee8 	.word	0x08019ee8
 8013010:	08019ef8 	.word	0x08019ef8
 8013014:	08019f08 	.word	0x08019f08

08013018 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013018:	b590      	push	{r4, r7, lr}
 801301a:	b085      	sub	sp, #20
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d106      	bne.n	8013034 <tcp_send_fin+0x1c>
 8013026:	4b21      	ldr	r3, [pc, #132]	; (80130ac <tcp_send_fin+0x94>)
 8013028:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801302c:	4920      	ldr	r1, [pc, #128]	; (80130b0 <tcp_send_fin+0x98>)
 801302e:	4821      	ldr	r0, [pc, #132]	; (80130b4 <tcp_send_fin+0x9c>)
 8013030:	f003 ffdc 	bl	8016fec <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013038:	2b00      	cmp	r3, #0
 801303a:	d02e      	beq.n	801309a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013040:	60fb      	str	r3, [r7, #12]
 8013042:	e002      	b.n	801304a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d1f8      	bne.n	8013044 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	68db      	ldr	r3, [r3, #12]
 8013056:	899b      	ldrh	r3, [r3, #12]
 8013058:	b29b      	uxth	r3, r3
 801305a:	4618      	mov	r0, r3
 801305c:	f7fa f8a8 	bl	800d1b0 <lwip_htons>
 8013060:	4603      	mov	r3, r0
 8013062:	b2db      	uxtb	r3, r3
 8013064:	f003 0307 	and.w	r3, r3, #7
 8013068:	2b00      	cmp	r3, #0
 801306a:	d116      	bne.n	801309a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	68db      	ldr	r3, [r3, #12]
 8013070:	899b      	ldrh	r3, [r3, #12]
 8013072:	b29c      	uxth	r4, r3
 8013074:	2001      	movs	r0, #1
 8013076:	f7fa f89b 	bl	800d1b0 <lwip_htons>
 801307a:	4603      	mov	r3, r0
 801307c:	461a      	mov	r2, r3
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	68db      	ldr	r3, [r3, #12]
 8013082:	4322      	orrs	r2, r4
 8013084:	b292      	uxth	r2, r2
 8013086:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	8b5b      	ldrh	r3, [r3, #26]
 801308c:	f043 0320 	orr.w	r3, r3, #32
 8013090:	b29a      	uxth	r2, r3
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013096:	2300      	movs	r3, #0
 8013098:	e004      	b.n	80130a4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801309a:	2101      	movs	r1, #1
 801309c:	6878      	ldr	r0, [r7, #4]
 801309e:	f000 f80b 	bl	80130b8 <tcp_enqueue_flags>
 80130a2:	4603      	mov	r3, r0
}
 80130a4:	4618      	mov	r0, r3
 80130a6:	3714      	adds	r7, #20
 80130a8:	46bd      	mov	sp, r7
 80130aa:	bd90      	pop	{r4, r7, pc}
 80130ac:	08019b0c 	.word	0x08019b0c
 80130b0:	08019f14 	.word	0x08019f14
 80130b4:	08019b60 	.word	0x08019b60

080130b8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b08a      	sub	sp, #40	; 0x28
 80130bc:	af02      	add	r7, sp, #8
 80130be:	6078      	str	r0, [r7, #4]
 80130c0:	460b      	mov	r3, r1
 80130c2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80130c4:	2300      	movs	r3, #0
 80130c6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80130c8:	2300      	movs	r3, #0
 80130ca:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80130cc:	78fb      	ldrb	r3, [r7, #3]
 80130ce:	f003 0303 	and.w	r3, r3, #3
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d106      	bne.n	80130e4 <tcp_enqueue_flags+0x2c>
 80130d6:	4b67      	ldr	r3, [pc, #412]	; (8013274 <tcp_enqueue_flags+0x1bc>)
 80130d8:	f240 4211 	movw	r2, #1041	; 0x411
 80130dc:	4966      	ldr	r1, [pc, #408]	; (8013278 <tcp_enqueue_flags+0x1c0>)
 80130de:	4867      	ldr	r0, [pc, #412]	; (801327c <tcp_enqueue_flags+0x1c4>)
 80130e0:	f003 ff84 	bl	8016fec <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d106      	bne.n	80130f8 <tcp_enqueue_flags+0x40>
 80130ea:	4b62      	ldr	r3, [pc, #392]	; (8013274 <tcp_enqueue_flags+0x1bc>)
 80130ec:	f240 4213 	movw	r2, #1043	; 0x413
 80130f0:	4963      	ldr	r1, [pc, #396]	; (8013280 <tcp_enqueue_flags+0x1c8>)
 80130f2:	4862      	ldr	r0, [pc, #392]	; (801327c <tcp_enqueue_flags+0x1c4>)
 80130f4:	f003 ff7a 	bl	8016fec <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80130f8:	78fb      	ldrb	r3, [r7, #3]
 80130fa:	f003 0302 	and.w	r3, r3, #2
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d001      	beq.n	8013106 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013102:	2301      	movs	r3, #1
 8013104:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013106:	7ffb      	ldrb	r3, [r7, #31]
 8013108:	009b      	lsls	r3, r3, #2
 801310a:	b2db      	uxtb	r3, r3
 801310c:	f003 0304 	and.w	r3, r3, #4
 8013110:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013112:	7dfb      	ldrb	r3, [r7, #23]
 8013114:	b29b      	uxth	r3, r3
 8013116:	f44f 7220 	mov.w	r2, #640	; 0x280
 801311a:	4619      	mov	r1, r3
 801311c:	2036      	movs	r0, #54	; 0x36
 801311e:	f7fb f955 	bl	800e3cc <pbuf_alloc>
 8013122:	6138      	str	r0, [r7, #16]
 8013124:	693b      	ldr	r3, [r7, #16]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d109      	bne.n	801313e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	8b5b      	ldrh	r3, [r3, #26]
 801312e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013132:	b29a      	uxth	r2, r3
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013138:	f04f 33ff 	mov.w	r3, #4294967295
 801313c:	e095      	b.n	801326a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801313e:	693b      	ldr	r3, [r7, #16]
 8013140:	895a      	ldrh	r2, [r3, #10]
 8013142:	7dfb      	ldrb	r3, [r7, #23]
 8013144:	b29b      	uxth	r3, r3
 8013146:	429a      	cmp	r2, r3
 8013148:	d206      	bcs.n	8013158 <tcp_enqueue_flags+0xa0>
 801314a:	4b4a      	ldr	r3, [pc, #296]	; (8013274 <tcp_enqueue_flags+0x1bc>)
 801314c:	f240 4239 	movw	r2, #1081	; 0x439
 8013150:	494c      	ldr	r1, [pc, #304]	; (8013284 <tcp_enqueue_flags+0x1cc>)
 8013152:	484a      	ldr	r0, [pc, #296]	; (801327c <tcp_enqueue_flags+0x1c4>)
 8013154:	f003 ff4a 	bl	8016fec <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801315c:	78fa      	ldrb	r2, [r7, #3]
 801315e:	7ffb      	ldrb	r3, [r7, #31]
 8013160:	9300      	str	r3, [sp, #0]
 8013162:	460b      	mov	r3, r1
 8013164:	6939      	ldr	r1, [r7, #16]
 8013166:	6878      	ldr	r0, [r7, #4]
 8013168:	f7ff fd70 	bl	8012c4c <tcp_create_segment>
 801316c:	60f8      	str	r0, [r7, #12]
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d109      	bne.n	8013188 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	8b5b      	ldrh	r3, [r3, #26]
 8013178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801317c:	b29a      	uxth	r2, r3
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013182:	f04f 33ff 	mov.w	r3, #4294967295
 8013186:	e070      	b.n	801326a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	68db      	ldr	r3, [r3, #12]
 801318c:	f003 0303 	and.w	r3, r3, #3
 8013190:	2b00      	cmp	r3, #0
 8013192:	d006      	beq.n	80131a2 <tcp_enqueue_flags+0xea>
 8013194:	4b37      	ldr	r3, [pc, #220]	; (8013274 <tcp_enqueue_flags+0x1bc>)
 8013196:	f240 4242 	movw	r2, #1090	; 0x442
 801319a:	493b      	ldr	r1, [pc, #236]	; (8013288 <tcp_enqueue_flags+0x1d0>)
 801319c:	4837      	ldr	r0, [pc, #220]	; (801327c <tcp_enqueue_flags+0x1c4>)
 801319e:	f003 ff25 	bl	8016fec <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	891b      	ldrh	r3, [r3, #8]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d006      	beq.n	80131b8 <tcp_enqueue_flags+0x100>
 80131aa:	4b32      	ldr	r3, [pc, #200]	; (8013274 <tcp_enqueue_flags+0x1bc>)
 80131ac:	f240 4243 	movw	r2, #1091	; 0x443
 80131b0:	4936      	ldr	r1, [pc, #216]	; (801328c <tcp_enqueue_flags+0x1d4>)
 80131b2:	4832      	ldr	r0, [pc, #200]	; (801327c <tcp_enqueue_flags+0x1c4>)
 80131b4:	f003 ff1a 	bl	8016fec <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d103      	bne.n	80131c8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	68fa      	ldr	r2, [r7, #12]
 80131c4:	66da      	str	r2, [r3, #108]	; 0x6c
 80131c6:	e00d      	b.n	80131e4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131cc:	61bb      	str	r3, [r7, #24]
 80131ce:	e002      	b.n	80131d6 <tcp_enqueue_flags+0x11e>
 80131d0:	69bb      	ldr	r3, [r7, #24]
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	61bb      	str	r3, [r7, #24]
 80131d6:	69bb      	ldr	r3, [r7, #24]
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d1f8      	bne.n	80131d0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80131de:	69bb      	ldr	r3, [r7, #24]
 80131e0:	68fa      	ldr	r2, [r7, #12]
 80131e2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	2200      	movs	r2, #0
 80131e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80131ec:	78fb      	ldrb	r3, [r7, #3]
 80131ee:	f003 0302 	and.w	r3, r3, #2
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d104      	bne.n	8013200 <tcp_enqueue_flags+0x148>
 80131f6:	78fb      	ldrb	r3, [r7, #3]
 80131f8:	f003 0301 	and.w	r3, r3, #1
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d004      	beq.n	801320a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013204:	1c5a      	adds	r2, r3, #1
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801320a:	78fb      	ldrb	r3, [r7, #3]
 801320c:	f003 0301 	and.w	r3, r3, #1
 8013210:	2b00      	cmp	r3, #0
 8013212:	d006      	beq.n	8013222 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	8b5b      	ldrh	r3, [r3, #26]
 8013218:	f043 0320 	orr.w	r3, r3, #32
 801321c:	b29a      	uxth	r2, r3
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	685b      	ldr	r3, [r3, #4]
 8013226:	4618      	mov	r0, r3
 8013228:	f7fb fc42 	bl	800eab0 <pbuf_clen>
 801322c:	4603      	mov	r3, r0
 801322e:	461a      	mov	r2, r3
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013236:	4413      	add	r3, r2
 8013238:	b29a      	uxth	r2, r3
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013246:	2b00      	cmp	r3, #0
 8013248:	d00e      	beq.n	8013268 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801324e:	2b00      	cmp	r3, #0
 8013250:	d10a      	bne.n	8013268 <tcp_enqueue_flags+0x1b0>
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013256:	2b00      	cmp	r3, #0
 8013258:	d106      	bne.n	8013268 <tcp_enqueue_flags+0x1b0>
 801325a:	4b06      	ldr	r3, [pc, #24]	; (8013274 <tcp_enqueue_flags+0x1bc>)
 801325c:	f240 4265 	movw	r2, #1125	; 0x465
 8013260:	490b      	ldr	r1, [pc, #44]	; (8013290 <tcp_enqueue_flags+0x1d8>)
 8013262:	4806      	ldr	r0, [pc, #24]	; (801327c <tcp_enqueue_flags+0x1c4>)
 8013264:	f003 fec2 	bl	8016fec <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013268:	2300      	movs	r3, #0
}
 801326a:	4618      	mov	r0, r3
 801326c:	3720      	adds	r7, #32
 801326e:	46bd      	mov	sp, r7
 8013270:	bd80      	pop	{r7, pc}
 8013272:	bf00      	nop
 8013274:	08019b0c 	.word	0x08019b0c
 8013278:	08019f30 	.word	0x08019f30
 801327c:	08019b60 	.word	0x08019b60
 8013280:	08019f88 	.word	0x08019f88
 8013284:	08019fa8 	.word	0x08019fa8
 8013288:	08019fe4 	.word	0x08019fe4
 801328c:	08019ffc 	.word	0x08019ffc
 8013290:	0801a028 	.word	0x0801a028

08013294 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013294:	b5b0      	push	{r4, r5, r7, lr}
 8013296:	b08a      	sub	sp, #40	; 0x28
 8013298:	af00      	add	r7, sp, #0
 801329a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d106      	bne.n	80132b0 <tcp_output+0x1c>
 80132a2:	4b8a      	ldr	r3, [pc, #552]	; (80134cc <tcp_output+0x238>)
 80132a4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80132a8:	4989      	ldr	r1, [pc, #548]	; (80134d0 <tcp_output+0x23c>)
 80132aa:	488a      	ldr	r0, [pc, #552]	; (80134d4 <tcp_output+0x240>)
 80132ac:	f003 fe9e 	bl	8016fec <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	7d1b      	ldrb	r3, [r3, #20]
 80132b4:	2b01      	cmp	r3, #1
 80132b6:	d106      	bne.n	80132c6 <tcp_output+0x32>
 80132b8:	4b84      	ldr	r3, [pc, #528]	; (80134cc <tcp_output+0x238>)
 80132ba:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80132be:	4986      	ldr	r1, [pc, #536]	; (80134d8 <tcp_output+0x244>)
 80132c0:	4884      	ldr	r0, [pc, #528]	; (80134d4 <tcp_output+0x240>)
 80132c2:	f003 fe93 	bl	8016fec <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80132c6:	4b85      	ldr	r3, [pc, #532]	; (80134dc <tcp_output+0x248>)
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	687a      	ldr	r2, [r7, #4]
 80132cc:	429a      	cmp	r2, r3
 80132ce:	d101      	bne.n	80132d4 <tcp_output+0x40>
    return ERR_OK;
 80132d0:	2300      	movs	r3, #0
 80132d2:	e1ce      	b.n	8013672 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80132e0:	4293      	cmp	r3, r2
 80132e2:	bf28      	it	cs
 80132e4:	4613      	movcs	r3, r2
 80132e6:	b29b      	uxth	r3, r3
 80132e8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80132f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d10b      	bne.n	801330e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	8b5b      	ldrh	r3, [r3, #26]
 80132fa:	f003 0302 	and.w	r3, r3, #2
 80132fe:	2b00      	cmp	r3, #0
 8013300:	f000 81aa 	beq.w	8013658 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013304:	6878      	ldr	r0, [r7, #4]
 8013306:	f000 fdcb 	bl	8013ea0 <tcp_send_empty_ack>
 801330a:	4603      	mov	r3, r0
 801330c:	e1b1      	b.n	8013672 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801330e:	6879      	ldr	r1, [r7, #4]
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	3304      	adds	r3, #4
 8013314:	461a      	mov	r2, r3
 8013316:	6878      	ldr	r0, [r7, #4]
 8013318:	f7ff fc7c 	bl	8012c14 <tcp_route>
 801331c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801331e:	697b      	ldr	r3, [r7, #20]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d102      	bne.n	801332a <tcp_output+0x96>
    return ERR_RTE;
 8013324:	f06f 0303 	mvn.w	r3, #3
 8013328:	e1a3      	b.n	8013672 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d003      	beq.n	8013338 <tcp_output+0xa4>
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	2b00      	cmp	r3, #0
 8013336:	d111      	bne.n	801335c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013338:	697b      	ldr	r3, [r7, #20]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d002      	beq.n	8013344 <tcp_output+0xb0>
 801333e:	697b      	ldr	r3, [r7, #20]
 8013340:	3304      	adds	r3, #4
 8013342:	e000      	b.n	8013346 <tcp_output+0xb2>
 8013344:	2300      	movs	r3, #0
 8013346:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013348:	693b      	ldr	r3, [r7, #16]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d102      	bne.n	8013354 <tcp_output+0xc0>
      return ERR_RTE;
 801334e:	f06f 0303 	mvn.w	r3, #3
 8013352:	e18e      	b.n	8013672 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013354:	693b      	ldr	r3, [r7, #16]
 8013356:	681a      	ldr	r2, [r3, #0]
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801335e:	68db      	ldr	r3, [r3, #12]
 8013360:	685b      	ldr	r3, [r3, #4]
 8013362:	4618      	mov	r0, r3
 8013364:	f7f9 ff39 	bl	800d1da <lwip_htonl>
 8013368:	4602      	mov	r2, r0
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801336e:	1ad3      	subs	r3, r2, r3
 8013370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013372:	8912      	ldrh	r2, [r2, #8]
 8013374:	4413      	add	r3, r2
 8013376:	69ba      	ldr	r2, [r7, #24]
 8013378:	429a      	cmp	r2, r3
 801337a:	d227      	bcs.n	80133cc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013382:	461a      	mov	r2, r3
 8013384:	69bb      	ldr	r3, [r7, #24]
 8013386:	4293      	cmp	r3, r2
 8013388:	d114      	bne.n	80133b4 <tcp_output+0x120>
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801338e:	2b00      	cmp	r3, #0
 8013390:	d110      	bne.n	80133b4 <tcp_output+0x120>
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013398:	2b00      	cmp	r3, #0
 801339a:	d10b      	bne.n	80133b4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	2200      	movs	r2, #0
 80133a0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	2201      	movs	r2, #1
 80133a8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	2200      	movs	r2, #0
 80133b0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	8b5b      	ldrh	r3, [r3, #26]
 80133b8:	f003 0302 	and.w	r3, r3, #2
 80133bc:	2b00      	cmp	r3, #0
 80133be:	f000 814d 	beq.w	801365c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80133c2:	6878      	ldr	r0, [r7, #4]
 80133c4:	f000 fd6c 	bl	8013ea0 <tcp_send_empty_ack>
 80133c8:	4603      	mov	r3, r0
 80133ca:	e152      	b.n	8013672 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	2200      	movs	r2, #0
 80133d0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133d8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80133da:	6a3b      	ldr	r3, [r7, #32]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	f000 811c 	beq.w	801361a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80133e2:	e002      	b.n	80133ea <tcp_output+0x156>
 80133e4:	6a3b      	ldr	r3, [r7, #32]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	623b      	str	r3, [r7, #32]
 80133ea:	6a3b      	ldr	r3, [r7, #32]
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d1f8      	bne.n	80133e4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80133f2:	e112      	b.n	801361a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80133f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133f6:	68db      	ldr	r3, [r3, #12]
 80133f8:	899b      	ldrh	r3, [r3, #12]
 80133fa:	b29b      	uxth	r3, r3
 80133fc:	4618      	mov	r0, r3
 80133fe:	f7f9 fed7 	bl	800d1b0 <lwip_htons>
 8013402:	4603      	mov	r3, r0
 8013404:	b2db      	uxtb	r3, r3
 8013406:	f003 0304 	and.w	r3, r3, #4
 801340a:	2b00      	cmp	r3, #0
 801340c:	d006      	beq.n	801341c <tcp_output+0x188>
 801340e:	4b2f      	ldr	r3, [pc, #188]	; (80134cc <tcp_output+0x238>)
 8013410:	f240 5236 	movw	r2, #1334	; 0x536
 8013414:	4932      	ldr	r1, [pc, #200]	; (80134e0 <tcp_output+0x24c>)
 8013416:	482f      	ldr	r0, [pc, #188]	; (80134d4 <tcp_output+0x240>)
 8013418:	f003 fde8 	bl	8016fec <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013420:	2b00      	cmp	r3, #0
 8013422:	d01f      	beq.n	8013464 <tcp_output+0x1d0>
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	8b5b      	ldrh	r3, [r3, #26]
 8013428:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801342c:	2b00      	cmp	r3, #0
 801342e:	d119      	bne.n	8013464 <tcp_output+0x1d0>
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013434:	2b00      	cmp	r3, #0
 8013436:	d00b      	beq.n	8013450 <tcp_output+0x1bc>
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d110      	bne.n	8013464 <tcp_output+0x1d0>
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013446:	891a      	ldrh	r2, [r3, #8]
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801344c:	429a      	cmp	r2, r3
 801344e:	d209      	bcs.n	8013464 <tcp_output+0x1d0>
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013456:	2b00      	cmp	r3, #0
 8013458:	d004      	beq.n	8013464 <tcp_output+0x1d0>
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013460:	2b08      	cmp	r3, #8
 8013462:	d901      	bls.n	8013468 <tcp_output+0x1d4>
 8013464:	2301      	movs	r3, #1
 8013466:	e000      	b.n	801346a <tcp_output+0x1d6>
 8013468:	2300      	movs	r3, #0
 801346a:	2b00      	cmp	r3, #0
 801346c:	d106      	bne.n	801347c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	8b5b      	ldrh	r3, [r3, #26]
 8013472:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013476:	2b00      	cmp	r3, #0
 8013478:	f000 80e4 	beq.w	8013644 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	7d1b      	ldrb	r3, [r3, #20]
 8013480:	2b02      	cmp	r3, #2
 8013482:	d00d      	beq.n	80134a0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013486:	68db      	ldr	r3, [r3, #12]
 8013488:	899b      	ldrh	r3, [r3, #12]
 801348a:	b29c      	uxth	r4, r3
 801348c:	2010      	movs	r0, #16
 801348e:	f7f9 fe8f 	bl	800d1b0 <lwip_htons>
 8013492:	4603      	mov	r3, r0
 8013494:	461a      	mov	r2, r3
 8013496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013498:	68db      	ldr	r3, [r3, #12]
 801349a:	4322      	orrs	r2, r4
 801349c:	b292      	uxth	r2, r2
 801349e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80134a0:	697a      	ldr	r2, [r7, #20]
 80134a2:	6879      	ldr	r1, [r7, #4]
 80134a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80134a6:	f000 f909 	bl	80136bc <tcp_output_segment>
 80134aa:	4603      	mov	r3, r0
 80134ac:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80134ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d016      	beq.n	80134e4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	8b5b      	ldrh	r3, [r3, #26]
 80134ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134be:	b29a      	uxth	r2, r3
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	835a      	strh	r2, [r3, #26]
      return err;
 80134c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80134c8:	e0d3      	b.n	8013672 <tcp_output+0x3de>
 80134ca:	bf00      	nop
 80134cc:	08019b0c 	.word	0x08019b0c
 80134d0:	0801a050 	.word	0x0801a050
 80134d4:	08019b60 	.word	0x08019b60
 80134d8:	0801a068 	.word	0x0801a068
 80134dc:	2001106c 	.word	0x2001106c
 80134e0:	0801a090 	.word	0x0801a090
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80134e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134e6:	681a      	ldr	r2, [r3, #0]
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	7d1b      	ldrb	r3, [r3, #20]
 80134f0:	2b02      	cmp	r3, #2
 80134f2:	d006      	beq.n	8013502 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	8b5b      	ldrh	r3, [r3, #26]
 80134f8:	f023 0303 	bic.w	r3, r3, #3
 80134fc:	b29a      	uxth	r2, r3
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013504:	68db      	ldr	r3, [r3, #12]
 8013506:	685b      	ldr	r3, [r3, #4]
 8013508:	4618      	mov	r0, r3
 801350a:	f7f9 fe66 	bl	800d1da <lwip_htonl>
 801350e:	4604      	mov	r4, r0
 8013510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013512:	891b      	ldrh	r3, [r3, #8]
 8013514:	461d      	mov	r5, r3
 8013516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013518:	68db      	ldr	r3, [r3, #12]
 801351a:	899b      	ldrh	r3, [r3, #12]
 801351c:	b29b      	uxth	r3, r3
 801351e:	4618      	mov	r0, r3
 8013520:	f7f9 fe46 	bl	800d1b0 <lwip_htons>
 8013524:	4603      	mov	r3, r0
 8013526:	b2db      	uxtb	r3, r3
 8013528:	f003 0303 	and.w	r3, r3, #3
 801352c:	2b00      	cmp	r3, #0
 801352e:	d001      	beq.n	8013534 <tcp_output+0x2a0>
 8013530:	2301      	movs	r3, #1
 8013532:	e000      	b.n	8013536 <tcp_output+0x2a2>
 8013534:	2300      	movs	r3, #0
 8013536:	442b      	add	r3, r5
 8013538:	4423      	add	r3, r4
 801353a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013540:	68bb      	ldr	r3, [r7, #8]
 8013542:	1ad3      	subs	r3, r2, r3
 8013544:	2b00      	cmp	r3, #0
 8013546:	da02      	bge.n	801354e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	68ba      	ldr	r2, [r7, #8]
 801354c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013550:	891b      	ldrh	r3, [r3, #8]
 8013552:	461c      	mov	r4, r3
 8013554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013556:	68db      	ldr	r3, [r3, #12]
 8013558:	899b      	ldrh	r3, [r3, #12]
 801355a:	b29b      	uxth	r3, r3
 801355c:	4618      	mov	r0, r3
 801355e:	f7f9 fe27 	bl	800d1b0 <lwip_htons>
 8013562:	4603      	mov	r3, r0
 8013564:	b2db      	uxtb	r3, r3
 8013566:	f003 0303 	and.w	r3, r3, #3
 801356a:	2b00      	cmp	r3, #0
 801356c:	d001      	beq.n	8013572 <tcp_output+0x2de>
 801356e:	2301      	movs	r3, #1
 8013570:	e000      	b.n	8013574 <tcp_output+0x2e0>
 8013572:	2300      	movs	r3, #0
 8013574:	4423      	add	r3, r4
 8013576:	2b00      	cmp	r3, #0
 8013578:	d049      	beq.n	801360e <tcp_output+0x37a>
      seg->next = NULL;
 801357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801357c:	2200      	movs	r2, #0
 801357e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013584:	2b00      	cmp	r3, #0
 8013586:	d105      	bne.n	8013594 <tcp_output+0x300>
        pcb->unacked = seg;
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801358c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013590:	623b      	str	r3, [r7, #32]
 8013592:	e03f      	b.n	8013614 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013596:	68db      	ldr	r3, [r3, #12]
 8013598:	685b      	ldr	r3, [r3, #4]
 801359a:	4618      	mov	r0, r3
 801359c:	f7f9 fe1d 	bl	800d1da <lwip_htonl>
 80135a0:	4604      	mov	r4, r0
 80135a2:	6a3b      	ldr	r3, [r7, #32]
 80135a4:	68db      	ldr	r3, [r3, #12]
 80135a6:	685b      	ldr	r3, [r3, #4]
 80135a8:	4618      	mov	r0, r3
 80135aa:	f7f9 fe16 	bl	800d1da <lwip_htonl>
 80135ae:	4603      	mov	r3, r0
 80135b0:	1ae3      	subs	r3, r4, r3
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	da24      	bge.n	8013600 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	3370      	adds	r3, #112	; 0x70
 80135ba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80135bc:	e002      	b.n	80135c4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80135be:	69fb      	ldr	r3, [r7, #28]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80135c4:	69fb      	ldr	r3, [r7, #28]
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d011      	beq.n	80135f0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80135cc:	69fb      	ldr	r3, [r7, #28]
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	68db      	ldr	r3, [r3, #12]
 80135d2:	685b      	ldr	r3, [r3, #4]
 80135d4:	4618      	mov	r0, r3
 80135d6:	f7f9 fe00 	bl	800d1da <lwip_htonl>
 80135da:	4604      	mov	r4, r0
 80135dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135de:	68db      	ldr	r3, [r3, #12]
 80135e0:	685b      	ldr	r3, [r3, #4]
 80135e2:	4618      	mov	r0, r3
 80135e4:	f7f9 fdf9 	bl	800d1da <lwip_htonl>
 80135e8:	4603      	mov	r3, r0
 80135ea:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	dbe6      	blt.n	80135be <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80135f0:	69fb      	ldr	r3, [r7, #28]
 80135f2:	681a      	ldr	r2, [r3, #0]
 80135f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135f6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80135f8:	69fb      	ldr	r3, [r7, #28]
 80135fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135fc:	601a      	str	r2, [r3, #0]
 80135fe:	e009      	b.n	8013614 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013600:	6a3b      	ldr	r3, [r7, #32]
 8013602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013604:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013606:	6a3b      	ldr	r3, [r7, #32]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	623b      	str	r3, [r7, #32]
 801360c:	e002      	b.n	8013614 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801360e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013610:	f7fc fc3f 	bl	800fe92 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013618:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801361c:	2b00      	cmp	r3, #0
 801361e:	d012      	beq.n	8013646 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013622:	68db      	ldr	r3, [r3, #12]
 8013624:	685b      	ldr	r3, [r3, #4]
 8013626:	4618      	mov	r0, r3
 8013628:	f7f9 fdd7 	bl	800d1da <lwip_htonl>
 801362c:	4602      	mov	r2, r0
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013632:	1ad3      	subs	r3, r2, r3
 8013634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013636:	8912      	ldrh	r2, [r2, #8]
 8013638:	4413      	add	r3, r2
  while (seg != NULL &&
 801363a:	69ba      	ldr	r2, [r7, #24]
 801363c:	429a      	cmp	r2, r3
 801363e:	f4bf aed9 	bcs.w	80133f4 <tcp_output+0x160>
 8013642:	e000      	b.n	8013646 <tcp_output+0x3b2>
      break;
 8013644:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801364a:	2b00      	cmp	r3, #0
 801364c:	d108      	bne.n	8013660 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	2200      	movs	r2, #0
 8013652:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8013656:	e004      	b.n	8013662 <tcp_output+0x3ce>
    goto output_done;
 8013658:	bf00      	nop
 801365a:	e002      	b.n	8013662 <tcp_output+0x3ce>
    goto output_done;
 801365c:	bf00      	nop
 801365e:	e000      	b.n	8013662 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013660:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	8b5b      	ldrh	r3, [r3, #26]
 8013666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801366a:	b29a      	uxth	r2, r3
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013670:	2300      	movs	r3, #0
}
 8013672:	4618      	mov	r0, r3
 8013674:	3728      	adds	r7, #40	; 0x28
 8013676:	46bd      	mov	sp, r7
 8013678:	bdb0      	pop	{r4, r5, r7, pc}
 801367a:	bf00      	nop

0801367c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801367c:	b580      	push	{r7, lr}
 801367e:	b082      	sub	sp, #8
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d106      	bne.n	8013698 <tcp_output_segment_busy+0x1c>
 801368a:	4b09      	ldr	r3, [pc, #36]	; (80136b0 <tcp_output_segment_busy+0x34>)
 801368c:	f240 529a 	movw	r2, #1434	; 0x59a
 8013690:	4908      	ldr	r1, [pc, #32]	; (80136b4 <tcp_output_segment_busy+0x38>)
 8013692:	4809      	ldr	r0, [pc, #36]	; (80136b8 <tcp_output_segment_busy+0x3c>)
 8013694:	f003 fcaa 	bl	8016fec <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	685b      	ldr	r3, [r3, #4]
 801369c:	7b9b      	ldrb	r3, [r3, #14]
 801369e:	2b01      	cmp	r3, #1
 80136a0:	d001      	beq.n	80136a6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80136a2:	2301      	movs	r3, #1
 80136a4:	e000      	b.n	80136a8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80136a6:	2300      	movs	r3, #0
}
 80136a8:	4618      	mov	r0, r3
 80136aa:	3708      	adds	r7, #8
 80136ac:	46bd      	mov	sp, r7
 80136ae:	bd80      	pop	{r7, pc}
 80136b0:	08019b0c 	.word	0x08019b0c
 80136b4:	0801a0a8 	.word	0x0801a0a8
 80136b8:	08019b60 	.word	0x08019b60

080136bc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80136bc:	b5b0      	push	{r4, r5, r7, lr}
 80136be:	b08c      	sub	sp, #48	; 0x30
 80136c0:	af04      	add	r7, sp, #16
 80136c2:	60f8      	str	r0, [r7, #12]
 80136c4:	60b9      	str	r1, [r7, #8]
 80136c6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d106      	bne.n	80136dc <tcp_output_segment+0x20>
 80136ce:	4b63      	ldr	r3, [pc, #396]	; (801385c <tcp_output_segment+0x1a0>)
 80136d0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80136d4:	4962      	ldr	r1, [pc, #392]	; (8013860 <tcp_output_segment+0x1a4>)
 80136d6:	4863      	ldr	r0, [pc, #396]	; (8013864 <tcp_output_segment+0x1a8>)
 80136d8:	f003 fc88 	bl	8016fec <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80136dc:	68bb      	ldr	r3, [r7, #8]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d106      	bne.n	80136f0 <tcp_output_segment+0x34>
 80136e2:	4b5e      	ldr	r3, [pc, #376]	; (801385c <tcp_output_segment+0x1a0>)
 80136e4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80136e8:	495f      	ldr	r1, [pc, #380]	; (8013868 <tcp_output_segment+0x1ac>)
 80136ea:	485e      	ldr	r0, [pc, #376]	; (8013864 <tcp_output_segment+0x1a8>)
 80136ec:	f003 fc7e 	bl	8016fec <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d106      	bne.n	8013704 <tcp_output_segment+0x48>
 80136f6:	4b59      	ldr	r3, [pc, #356]	; (801385c <tcp_output_segment+0x1a0>)
 80136f8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80136fc:	495b      	ldr	r1, [pc, #364]	; (801386c <tcp_output_segment+0x1b0>)
 80136fe:	4859      	ldr	r0, [pc, #356]	; (8013864 <tcp_output_segment+0x1a8>)
 8013700:	f003 fc74 	bl	8016fec <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013704:	68f8      	ldr	r0, [r7, #12]
 8013706:	f7ff ffb9 	bl	801367c <tcp_output_segment_busy>
 801370a:	4603      	mov	r3, r0
 801370c:	2b00      	cmp	r3, #0
 801370e:	d001      	beq.n	8013714 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013710:	2300      	movs	r3, #0
 8013712:	e09f      	b.n	8013854 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013714:	68bb      	ldr	r3, [r7, #8]
 8013716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	68dc      	ldr	r4, [r3, #12]
 801371c:	4610      	mov	r0, r2
 801371e:	f7f9 fd5c 	bl	800d1da <lwip_htonl>
 8013722:	4603      	mov	r3, r0
 8013724:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013726:	68bb      	ldr	r3, [r7, #8]
 8013728:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	68dc      	ldr	r4, [r3, #12]
 801372e:	4610      	mov	r0, r2
 8013730:	f7f9 fd3e 	bl	800d1b0 <lwip_htons>
 8013734:	4603      	mov	r3, r0
 8013736:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013738:	68bb      	ldr	r3, [r7, #8]
 801373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801373c:	68ba      	ldr	r2, [r7, #8]
 801373e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013740:	441a      	add	r2, r3
 8013742:	68bb      	ldr	r3, [r7, #8]
 8013744:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	68db      	ldr	r3, [r3, #12]
 801374a:	3314      	adds	r3, #20
 801374c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	7a9b      	ldrb	r3, [r3, #10]
 8013752:	f003 0301 	and.w	r3, r3, #1
 8013756:	2b00      	cmp	r3, #0
 8013758:	d015      	beq.n	8013786 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801375a:	68bb      	ldr	r3, [r7, #8]
 801375c:	3304      	adds	r3, #4
 801375e:	461a      	mov	r2, r3
 8013760:	6879      	ldr	r1, [r7, #4]
 8013762:	f44f 7006 	mov.w	r0, #536	; 0x218
 8013766:	f7fc fe8b 	bl	8010480 <tcp_eff_send_mss_netif>
 801376a:	4603      	mov	r3, r0
 801376c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801376e:	8b7b      	ldrh	r3, [r7, #26]
 8013770:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013774:	4618      	mov	r0, r3
 8013776:	f7f9 fd30 	bl	800d1da <lwip_htonl>
 801377a:	4602      	mov	r2, r0
 801377c:	69fb      	ldr	r3, [r7, #28]
 801377e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013780:	69fb      	ldr	r3, [r7, #28]
 8013782:	3304      	adds	r3, #4
 8013784:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013786:	68bb      	ldr	r3, [r7, #8]
 8013788:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801378c:	2b00      	cmp	r3, #0
 801378e:	da02      	bge.n	8013796 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013790:	68bb      	ldr	r3, [r7, #8]
 8013792:	2200      	movs	r2, #0
 8013794:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8013796:	68bb      	ldr	r3, [r7, #8]
 8013798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801379a:	2b00      	cmp	r3, #0
 801379c:	d10c      	bne.n	80137b8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801379e:	4b34      	ldr	r3, [pc, #208]	; (8013870 <tcp_output_segment+0x1b4>)
 80137a0:	681a      	ldr	r2, [r3, #0]
 80137a2:	68bb      	ldr	r3, [r7, #8]
 80137a4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	68db      	ldr	r3, [r3, #12]
 80137aa:	685b      	ldr	r3, [r3, #4]
 80137ac:	4618      	mov	r0, r3
 80137ae:	f7f9 fd14 	bl	800d1da <lwip_htonl>
 80137b2:	4602      	mov	r2, r0
 80137b4:	68bb      	ldr	r3, [r7, #8]
 80137b6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	68da      	ldr	r2, [r3, #12]
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	685b      	ldr	r3, [r3, #4]
 80137c0:	685b      	ldr	r3, [r3, #4]
 80137c2:	1ad3      	subs	r3, r2, r3
 80137c4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	685b      	ldr	r3, [r3, #4]
 80137ca:	8959      	ldrh	r1, [r3, #10]
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	685b      	ldr	r3, [r3, #4]
 80137d0:	8b3a      	ldrh	r2, [r7, #24]
 80137d2:	1a8a      	subs	r2, r1, r2
 80137d4:	b292      	uxth	r2, r2
 80137d6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	685b      	ldr	r3, [r3, #4]
 80137dc:	8919      	ldrh	r1, [r3, #8]
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	685b      	ldr	r3, [r3, #4]
 80137e2:	8b3a      	ldrh	r2, [r7, #24]
 80137e4:	1a8a      	subs	r2, r1, r2
 80137e6:	b292      	uxth	r2, r2
 80137e8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	685b      	ldr	r3, [r3, #4]
 80137ee:	68fa      	ldr	r2, [r7, #12]
 80137f0:	68d2      	ldr	r2, [r2, #12]
 80137f2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	68db      	ldr	r3, [r3, #12]
 80137f8:	2200      	movs	r2, #0
 80137fa:	741a      	strb	r2, [r3, #16]
 80137fc:	2200      	movs	r2, #0
 80137fe:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	68db      	ldr	r3, [r3, #12]
 8013804:	f103 0214 	add.w	r2, r3, #20
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	7a9b      	ldrb	r3, [r3, #10]
 801380c:	009b      	lsls	r3, r3, #2
 801380e:	f003 0304 	and.w	r3, r3, #4
 8013812:	4413      	add	r3, r2
 8013814:	69fa      	ldr	r2, [r7, #28]
 8013816:	429a      	cmp	r2, r3
 8013818:	d006      	beq.n	8013828 <tcp_output_segment+0x16c>
 801381a:	4b10      	ldr	r3, [pc, #64]	; (801385c <tcp_output_segment+0x1a0>)
 801381c:	f240 621c 	movw	r2, #1564	; 0x61c
 8013820:	4914      	ldr	r1, [pc, #80]	; (8013874 <tcp_output_segment+0x1b8>)
 8013822:	4810      	ldr	r0, [pc, #64]	; (8013864 <tcp_output_segment+0x1a8>)
 8013824:	f003 fbe2 	bl	8016fec <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	6858      	ldr	r0, [r3, #4]
 801382c:	68b9      	ldr	r1, [r7, #8]
 801382e:	68bb      	ldr	r3, [r7, #8]
 8013830:	1d1c      	adds	r4, r3, #4
 8013832:	68bb      	ldr	r3, [r7, #8]
 8013834:	7add      	ldrb	r5, [r3, #11]
 8013836:	68bb      	ldr	r3, [r7, #8]
 8013838:	7a9b      	ldrb	r3, [r3, #10]
 801383a:	687a      	ldr	r2, [r7, #4]
 801383c:	9202      	str	r2, [sp, #8]
 801383e:	2206      	movs	r2, #6
 8013840:	9201      	str	r2, [sp, #4]
 8013842:	9300      	str	r3, [sp, #0]
 8013844:	462b      	mov	r3, r5
 8013846:	4622      	mov	r2, r4
 8013848:	f002 fa66 	bl	8015d18 <ip4_output_if>
 801384c:	4603      	mov	r3, r0
 801384e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013850:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013854:	4618      	mov	r0, r3
 8013856:	3720      	adds	r7, #32
 8013858:	46bd      	mov	sp, r7
 801385a:	bdb0      	pop	{r4, r5, r7, pc}
 801385c:	08019b0c 	.word	0x08019b0c
 8013860:	0801a0d0 	.word	0x0801a0d0
 8013864:	08019b60 	.word	0x08019b60
 8013868:	0801a0f0 	.word	0x0801a0f0
 801386c:	0801a110 	.word	0x0801a110
 8013870:	20011020 	.word	0x20011020
 8013874:	0801a134 	.word	0x0801a134

08013878 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013878:	b5b0      	push	{r4, r5, r7, lr}
 801387a:	b084      	sub	sp, #16
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d106      	bne.n	8013894 <tcp_rexmit_rto_prepare+0x1c>
 8013886:	4b31      	ldr	r3, [pc, #196]	; (801394c <tcp_rexmit_rto_prepare+0xd4>)
 8013888:	f240 6263 	movw	r2, #1635	; 0x663
 801388c:	4930      	ldr	r1, [pc, #192]	; (8013950 <tcp_rexmit_rto_prepare+0xd8>)
 801388e:	4831      	ldr	r0, [pc, #196]	; (8013954 <tcp_rexmit_rto_prepare+0xdc>)
 8013890:	f003 fbac 	bl	8016fec <iprintf>

  if (pcb->unacked == NULL) {
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013898:	2b00      	cmp	r3, #0
 801389a:	d102      	bne.n	80138a2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801389c:	f06f 0305 	mvn.w	r3, #5
 80138a0:	e050      	b.n	8013944 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138a6:	60fb      	str	r3, [r7, #12]
 80138a8:	e00b      	b.n	80138c2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80138aa:	68f8      	ldr	r0, [r7, #12]
 80138ac:	f7ff fee6 	bl	801367c <tcp_output_segment_busy>
 80138b0:	4603      	mov	r3, r0
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d002      	beq.n	80138bc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80138b6:	f06f 0305 	mvn.w	r3, #5
 80138ba:	e043      	b.n	8013944 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	60fb      	str	r3, [r7, #12]
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d1ef      	bne.n	80138aa <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80138ca:	68f8      	ldr	r0, [r7, #12]
 80138cc:	f7ff fed6 	bl	801367c <tcp_output_segment_busy>
 80138d0:	4603      	mov	r3, r0
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d002      	beq.n	80138dc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80138d6:	f06f 0305 	mvn.w	r3, #5
 80138da:	e033      	b.n	8013944 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	2200      	movs	r2, #0
 80138f0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	8b5b      	ldrh	r3, [r3, #26]
 80138f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80138fa:	b29a      	uxth	r2, r3
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	68db      	ldr	r3, [r3, #12]
 8013904:	685b      	ldr	r3, [r3, #4]
 8013906:	4618      	mov	r0, r3
 8013908:	f7f9 fc67 	bl	800d1da <lwip_htonl>
 801390c:	4604      	mov	r4, r0
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	891b      	ldrh	r3, [r3, #8]
 8013912:	461d      	mov	r5, r3
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	68db      	ldr	r3, [r3, #12]
 8013918:	899b      	ldrh	r3, [r3, #12]
 801391a:	b29b      	uxth	r3, r3
 801391c:	4618      	mov	r0, r3
 801391e:	f7f9 fc47 	bl	800d1b0 <lwip_htons>
 8013922:	4603      	mov	r3, r0
 8013924:	b2db      	uxtb	r3, r3
 8013926:	f003 0303 	and.w	r3, r3, #3
 801392a:	2b00      	cmp	r3, #0
 801392c:	d001      	beq.n	8013932 <tcp_rexmit_rto_prepare+0xba>
 801392e:	2301      	movs	r3, #1
 8013930:	e000      	b.n	8013934 <tcp_rexmit_rto_prepare+0xbc>
 8013932:	2300      	movs	r3, #0
 8013934:	442b      	add	r3, r5
 8013936:	18e2      	adds	r2, r4, r3
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	2200      	movs	r2, #0
 8013940:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013942:	2300      	movs	r3, #0
}
 8013944:	4618      	mov	r0, r3
 8013946:	3710      	adds	r7, #16
 8013948:	46bd      	mov	sp, r7
 801394a:	bdb0      	pop	{r4, r5, r7, pc}
 801394c:	08019b0c 	.word	0x08019b0c
 8013950:	0801a148 	.word	0x0801a148
 8013954:	08019b60 	.word	0x08019b60

08013958 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013958:	b580      	push	{r7, lr}
 801395a:	b082      	sub	sp, #8
 801395c:	af00      	add	r7, sp, #0
 801395e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d106      	bne.n	8013974 <tcp_rexmit_rto_commit+0x1c>
 8013966:	4b0d      	ldr	r3, [pc, #52]	; (801399c <tcp_rexmit_rto_commit+0x44>)
 8013968:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801396c:	490c      	ldr	r1, [pc, #48]	; (80139a0 <tcp_rexmit_rto_commit+0x48>)
 801396e:	480d      	ldr	r0, [pc, #52]	; (80139a4 <tcp_rexmit_rto_commit+0x4c>)
 8013970:	f003 fb3c 	bl	8016fec <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801397a:	2bff      	cmp	r3, #255	; 0xff
 801397c:	d007      	beq.n	801398e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013984:	3301      	adds	r3, #1
 8013986:	b2da      	uxtb	r2, r3
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801398e:	6878      	ldr	r0, [r7, #4]
 8013990:	f7ff fc80 	bl	8013294 <tcp_output>
}
 8013994:	bf00      	nop
 8013996:	3708      	adds	r7, #8
 8013998:	46bd      	mov	sp, r7
 801399a:	bd80      	pop	{r7, pc}
 801399c:	08019b0c 	.word	0x08019b0c
 80139a0:	0801a16c 	.word	0x0801a16c
 80139a4:	08019b60 	.word	0x08019b60

080139a8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b082      	sub	sp, #8
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d106      	bne.n	80139c4 <tcp_rexmit_rto+0x1c>
 80139b6:	4b0a      	ldr	r3, [pc, #40]	; (80139e0 <tcp_rexmit_rto+0x38>)
 80139b8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80139bc:	4909      	ldr	r1, [pc, #36]	; (80139e4 <tcp_rexmit_rto+0x3c>)
 80139be:	480a      	ldr	r0, [pc, #40]	; (80139e8 <tcp_rexmit_rto+0x40>)
 80139c0:	f003 fb14 	bl	8016fec <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80139c4:	6878      	ldr	r0, [r7, #4]
 80139c6:	f7ff ff57 	bl	8013878 <tcp_rexmit_rto_prepare>
 80139ca:	4603      	mov	r3, r0
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d102      	bne.n	80139d6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80139d0:	6878      	ldr	r0, [r7, #4]
 80139d2:	f7ff ffc1 	bl	8013958 <tcp_rexmit_rto_commit>
  }
}
 80139d6:	bf00      	nop
 80139d8:	3708      	adds	r7, #8
 80139da:	46bd      	mov	sp, r7
 80139dc:	bd80      	pop	{r7, pc}
 80139de:	bf00      	nop
 80139e0:	08019b0c 	.word	0x08019b0c
 80139e4:	0801a190 	.word	0x0801a190
 80139e8:	08019b60 	.word	0x08019b60

080139ec <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80139ec:	b590      	push	{r4, r7, lr}
 80139ee:	b085      	sub	sp, #20
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d106      	bne.n	8013a08 <tcp_rexmit+0x1c>
 80139fa:	4b2f      	ldr	r3, [pc, #188]	; (8013ab8 <tcp_rexmit+0xcc>)
 80139fc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013a00:	492e      	ldr	r1, [pc, #184]	; (8013abc <tcp_rexmit+0xd0>)
 8013a02:	482f      	ldr	r0, [pc, #188]	; (8013ac0 <tcp_rexmit+0xd4>)
 8013a04:	f003 faf2 	bl	8016fec <iprintf>

  if (pcb->unacked == NULL) {
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d102      	bne.n	8013a16 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013a10:	f06f 0305 	mvn.w	r3, #5
 8013a14:	e04c      	b.n	8013ab0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a1a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013a1c:	68b8      	ldr	r0, [r7, #8]
 8013a1e:	f7ff fe2d 	bl	801367c <tcp_output_segment_busy>
 8013a22:	4603      	mov	r3, r0
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d002      	beq.n	8013a2e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013a28:	f06f 0305 	mvn.w	r3, #5
 8013a2c:	e040      	b.n	8013ab0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013a2e:	68bb      	ldr	r3, [r7, #8]
 8013a30:	681a      	ldr	r2, [r3, #0]
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	336c      	adds	r3, #108	; 0x6c
 8013a3a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013a3c:	e002      	b.n	8013a44 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d011      	beq.n	8013a70 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	68db      	ldr	r3, [r3, #12]
 8013a52:	685b      	ldr	r3, [r3, #4]
 8013a54:	4618      	mov	r0, r3
 8013a56:	f7f9 fbc0 	bl	800d1da <lwip_htonl>
 8013a5a:	4604      	mov	r4, r0
 8013a5c:	68bb      	ldr	r3, [r7, #8]
 8013a5e:	68db      	ldr	r3, [r3, #12]
 8013a60:	685b      	ldr	r3, [r3, #4]
 8013a62:	4618      	mov	r0, r3
 8013a64:	f7f9 fbb9 	bl	800d1da <lwip_htonl>
 8013a68:	4603      	mov	r3, r0
 8013a6a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	dbe6      	blt.n	8013a3e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	681a      	ldr	r2, [r3, #0]
 8013a74:	68bb      	ldr	r3, [r7, #8]
 8013a76:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	68ba      	ldr	r2, [r7, #8]
 8013a7c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013a7e:	68bb      	ldr	r3, [r7, #8]
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d103      	bne.n	8013a8e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	2200      	movs	r2, #0
 8013a8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013a94:	2bff      	cmp	r3, #255	; 0xff
 8013a96:	d007      	beq.n	8013aa8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013a9e:	3301      	adds	r3, #1
 8013aa0:	b2da      	uxtb	r2, r3
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	2200      	movs	r2, #0
 8013aac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013aae:	2300      	movs	r3, #0
}
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	3714      	adds	r7, #20
 8013ab4:	46bd      	mov	sp, r7
 8013ab6:	bd90      	pop	{r4, r7, pc}
 8013ab8:	08019b0c 	.word	0x08019b0c
 8013abc:	0801a1ac 	.word	0x0801a1ac
 8013ac0:	08019b60 	.word	0x08019b60

08013ac4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013ac4:	b580      	push	{r7, lr}
 8013ac6:	b082      	sub	sp, #8
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d106      	bne.n	8013ae0 <tcp_rexmit_fast+0x1c>
 8013ad2:	4b2a      	ldr	r3, [pc, #168]	; (8013b7c <tcp_rexmit_fast+0xb8>)
 8013ad4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013ad8:	4929      	ldr	r1, [pc, #164]	; (8013b80 <tcp_rexmit_fast+0xbc>)
 8013ada:	482a      	ldr	r0, [pc, #168]	; (8013b84 <tcp_rexmit_fast+0xc0>)
 8013adc:	f003 fa86 	bl	8016fec <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d045      	beq.n	8013b74 <tcp_rexmit_fast+0xb0>
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	8b5b      	ldrh	r3, [r3, #26]
 8013aec:	f003 0304 	and.w	r3, r3, #4
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d13f      	bne.n	8013b74 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013af4:	6878      	ldr	r0, [r7, #4]
 8013af6:	f7ff ff79 	bl	80139ec <tcp_rexmit>
 8013afa:	4603      	mov	r3, r0
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d139      	bne.n	8013b74 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013b0c:	4293      	cmp	r3, r2
 8013b0e:	bf28      	it	cs
 8013b10:	4613      	movcs	r3, r2
 8013b12:	b29b      	uxth	r3, r3
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	da00      	bge.n	8013b1a <tcp_rexmit_fast+0x56>
 8013b18:	3301      	adds	r3, #1
 8013b1a:	105b      	asrs	r3, r3, #1
 8013b1c:	b29a      	uxth	r2, r3
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013b2a:	461a      	mov	r2, r3
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b30:	005b      	lsls	r3, r3, #1
 8013b32:	429a      	cmp	r2, r3
 8013b34:	d206      	bcs.n	8013b44 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b3a:	005b      	lsls	r3, r3, #1
 8013b3c:	b29a      	uxth	r2, r3
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b4e:	4619      	mov	r1, r3
 8013b50:	0049      	lsls	r1, r1, #1
 8013b52:	440b      	add	r3, r1
 8013b54:	b29b      	uxth	r3, r3
 8013b56:	4413      	add	r3, r2
 8013b58:	b29a      	uxth	r2, r3
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	8b5b      	ldrh	r3, [r3, #26]
 8013b64:	f043 0304 	orr.w	r3, r3, #4
 8013b68:	b29a      	uxth	r2, r3
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	2200      	movs	r2, #0
 8013b72:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013b74:	bf00      	nop
 8013b76:	3708      	adds	r7, #8
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	bd80      	pop	{r7, pc}
 8013b7c:	08019b0c 	.word	0x08019b0c
 8013b80:	0801a1c4 	.word	0x0801a1c4
 8013b84:	08019b60 	.word	0x08019b60

08013b88 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b086      	sub	sp, #24
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	60f8      	str	r0, [r7, #12]
 8013b90:	607b      	str	r3, [r7, #4]
 8013b92:	460b      	mov	r3, r1
 8013b94:	817b      	strh	r3, [r7, #10]
 8013b96:	4613      	mov	r3, r2
 8013b98:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013b9a:	897a      	ldrh	r2, [r7, #10]
 8013b9c:	893b      	ldrh	r3, [r7, #8]
 8013b9e:	4413      	add	r3, r2
 8013ba0:	b29b      	uxth	r3, r3
 8013ba2:	3314      	adds	r3, #20
 8013ba4:	b29b      	uxth	r3, r3
 8013ba6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013baa:	4619      	mov	r1, r3
 8013bac:	2022      	movs	r0, #34	; 0x22
 8013bae:	f7fa fc0d 	bl	800e3cc <pbuf_alloc>
 8013bb2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013bb4:	697b      	ldr	r3, [r7, #20]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d04d      	beq.n	8013c56 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013bba:	897b      	ldrh	r3, [r7, #10]
 8013bbc:	3313      	adds	r3, #19
 8013bbe:	697a      	ldr	r2, [r7, #20]
 8013bc0:	8952      	ldrh	r2, [r2, #10]
 8013bc2:	4293      	cmp	r3, r2
 8013bc4:	db06      	blt.n	8013bd4 <tcp_output_alloc_header_common+0x4c>
 8013bc6:	4b26      	ldr	r3, [pc, #152]	; (8013c60 <tcp_output_alloc_header_common+0xd8>)
 8013bc8:	f240 7223 	movw	r2, #1827	; 0x723
 8013bcc:	4925      	ldr	r1, [pc, #148]	; (8013c64 <tcp_output_alloc_header_common+0xdc>)
 8013bce:	4826      	ldr	r0, [pc, #152]	; (8013c68 <tcp_output_alloc_header_common+0xe0>)
 8013bd0:	f003 fa0c 	bl	8016fec <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013bd4:	697b      	ldr	r3, [r7, #20]
 8013bd6:	685b      	ldr	r3, [r3, #4]
 8013bd8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013bda:	8c3b      	ldrh	r3, [r7, #32]
 8013bdc:	4618      	mov	r0, r3
 8013bde:	f7f9 fae7 	bl	800d1b0 <lwip_htons>
 8013be2:	4603      	mov	r3, r0
 8013be4:	461a      	mov	r2, r3
 8013be6:	693b      	ldr	r3, [r7, #16]
 8013be8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013bea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013bec:	4618      	mov	r0, r3
 8013bee:	f7f9 fadf 	bl	800d1b0 <lwip_htons>
 8013bf2:	4603      	mov	r3, r0
 8013bf4:	461a      	mov	r2, r3
 8013bf6:	693b      	ldr	r3, [r7, #16]
 8013bf8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013bfa:	693b      	ldr	r3, [r7, #16]
 8013bfc:	687a      	ldr	r2, [r7, #4]
 8013bfe:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013c00:	68f8      	ldr	r0, [r7, #12]
 8013c02:	f7f9 faea 	bl	800d1da <lwip_htonl>
 8013c06:	4602      	mov	r2, r0
 8013c08:	693b      	ldr	r3, [r7, #16]
 8013c0a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013c0c:	897b      	ldrh	r3, [r7, #10]
 8013c0e:	089b      	lsrs	r3, r3, #2
 8013c10:	b29b      	uxth	r3, r3
 8013c12:	3305      	adds	r3, #5
 8013c14:	b29b      	uxth	r3, r3
 8013c16:	031b      	lsls	r3, r3, #12
 8013c18:	b29a      	uxth	r2, r3
 8013c1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013c1e:	b29b      	uxth	r3, r3
 8013c20:	4313      	orrs	r3, r2
 8013c22:	b29b      	uxth	r3, r3
 8013c24:	4618      	mov	r0, r3
 8013c26:	f7f9 fac3 	bl	800d1b0 <lwip_htons>
 8013c2a:	4603      	mov	r3, r0
 8013c2c:	461a      	mov	r2, r3
 8013c2e:	693b      	ldr	r3, [r7, #16]
 8013c30:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013c32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013c34:	4618      	mov	r0, r3
 8013c36:	f7f9 fabb 	bl	800d1b0 <lwip_htons>
 8013c3a:	4603      	mov	r3, r0
 8013c3c:	461a      	mov	r2, r3
 8013c3e:	693b      	ldr	r3, [r7, #16]
 8013c40:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013c42:	693b      	ldr	r3, [r7, #16]
 8013c44:	2200      	movs	r2, #0
 8013c46:	741a      	strb	r2, [r3, #16]
 8013c48:	2200      	movs	r2, #0
 8013c4a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013c4c:	693b      	ldr	r3, [r7, #16]
 8013c4e:	2200      	movs	r2, #0
 8013c50:	749a      	strb	r2, [r3, #18]
 8013c52:	2200      	movs	r2, #0
 8013c54:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013c56:	697b      	ldr	r3, [r7, #20]
}
 8013c58:	4618      	mov	r0, r3
 8013c5a:	3718      	adds	r7, #24
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	bd80      	pop	{r7, pc}
 8013c60:	08019b0c 	.word	0x08019b0c
 8013c64:	0801a1e4 	.word	0x0801a1e4
 8013c68:	08019b60 	.word	0x08019b60

08013c6c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013c6c:	b5b0      	push	{r4, r5, r7, lr}
 8013c6e:	b08a      	sub	sp, #40	; 0x28
 8013c70:	af04      	add	r7, sp, #16
 8013c72:	60f8      	str	r0, [r7, #12]
 8013c74:	607b      	str	r3, [r7, #4]
 8013c76:	460b      	mov	r3, r1
 8013c78:	817b      	strh	r3, [r7, #10]
 8013c7a:	4613      	mov	r3, r2
 8013c7c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d106      	bne.n	8013c92 <tcp_output_alloc_header+0x26>
 8013c84:	4b15      	ldr	r3, [pc, #84]	; (8013cdc <tcp_output_alloc_header+0x70>)
 8013c86:	f240 7242 	movw	r2, #1858	; 0x742
 8013c8a:	4915      	ldr	r1, [pc, #84]	; (8013ce0 <tcp_output_alloc_header+0x74>)
 8013c8c:	4815      	ldr	r0, [pc, #84]	; (8013ce4 <tcp_output_alloc_header+0x78>)
 8013c8e:	f003 f9ad 	bl	8016fec <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	8adb      	ldrh	r3, [r3, #22]
 8013c9a:	68fa      	ldr	r2, [r7, #12]
 8013c9c:	8b12      	ldrh	r2, [r2, #24]
 8013c9e:	68f9      	ldr	r1, [r7, #12]
 8013ca0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013ca2:	893d      	ldrh	r5, [r7, #8]
 8013ca4:	897c      	ldrh	r4, [r7, #10]
 8013ca6:	9103      	str	r1, [sp, #12]
 8013ca8:	2110      	movs	r1, #16
 8013caa:	9102      	str	r1, [sp, #8]
 8013cac:	9201      	str	r2, [sp, #4]
 8013cae:	9300      	str	r3, [sp, #0]
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	462a      	mov	r2, r5
 8013cb4:	4621      	mov	r1, r4
 8013cb6:	f7ff ff67 	bl	8013b88 <tcp_output_alloc_header_common>
 8013cba:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013cbc:	697b      	ldr	r3, [r7, #20]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d006      	beq.n	8013cd0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cc6:	68fa      	ldr	r2, [r7, #12]
 8013cc8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013cca:	441a      	add	r2, r3
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013cd0:	697b      	ldr	r3, [r7, #20]
}
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	3718      	adds	r7, #24
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	bdb0      	pop	{r4, r5, r7, pc}
 8013cda:	bf00      	nop
 8013cdc:	08019b0c 	.word	0x08019b0c
 8013ce0:	0801a214 	.word	0x0801a214
 8013ce4:	08019b60 	.word	0x08019b60

08013ce8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b088      	sub	sp, #32
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	60f8      	str	r0, [r7, #12]
 8013cf0:	60b9      	str	r1, [r7, #8]
 8013cf2:	4611      	mov	r1, r2
 8013cf4:	461a      	mov	r2, r3
 8013cf6:	460b      	mov	r3, r1
 8013cf8:	71fb      	strb	r3, [r7, #7]
 8013cfa:	4613      	mov	r3, r2
 8013cfc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013cfe:	2300      	movs	r3, #0
 8013d00:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013d02:	68bb      	ldr	r3, [r7, #8]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d106      	bne.n	8013d16 <tcp_output_fill_options+0x2e>
 8013d08:	4b13      	ldr	r3, [pc, #76]	; (8013d58 <tcp_output_fill_options+0x70>)
 8013d0a:	f240 7256 	movw	r2, #1878	; 0x756
 8013d0e:	4913      	ldr	r1, [pc, #76]	; (8013d5c <tcp_output_fill_options+0x74>)
 8013d10:	4813      	ldr	r0, [pc, #76]	; (8013d60 <tcp_output_fill_options+0x78>)
 8013d12:	f003 f96b 	bl	8016fec <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013d16:	68bb      	ldr	r3, [r7, #8]
 8013d18:	685b      	ldr	r3, [r3, #4]
 8013d1a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013d1c:	69bb      	ldr	r3, [r7, #24]
 8013d1e:	3314      	adds	r3, #20
 8013d20:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013d22:	69bb      	ldr	r3, [r7, #24]
 8013d24:	f103 0214 	add.w	r2, r3, #20
 8013d28:	8bfb      	ldrh	r3, [r7, #30]
 8013d2a:	009b      	lsls	r3, r3, #2
 8013d2c:	4619      	mov	r1, r3
 8013d2e:	79fb      	ldrb	r3, [r7, #7]
 8013d30:	009b      	lsls	r3, r3, #2
 8013d32:	f003 0304 	and.w	r3, r3, #4
 8013d36:	440b      	add	r3, r1
 8013d38:	4413      	add	r3, r2
 8013d3a:	697a      	ldr	r2, [r7, #20]
 8013d3c:	429a      	cmp	r2, r3
 8013d3e:	d006      	beq.n	8013d4e <tcp_output_fill_options+0x66>
 8013d40:	4b05      	ldr	r3, [pc, #20]	; (8013d58 <tcp_output_fill_options+0x70>)
 8013d42:	f240 7275 	movw	r2, #1909	; 0x775
 8013d46:	4907      	ldr	r1, [pc, #28]	; (8013d64 <tcp_output_fill_options+0x7c>)
 8013d48:	4805      	ldr	r0, [pc, #20]	; (8013d60 <tcp_output_fill_options+0x78>)
 8013d4a:	f003 f94f 	bl	8016fec <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013d4e:	bf00      	nop
 8013d50:	3720      	adds	r7, #32
 8013d52:	46bd      	mov	sp, r7
 8013d54:	bd80      	pop	{r7, pc}
 8013d56:	bf00      	nop
 8013d58:	08019b0c 	.word	0x08019b0c
 8013d5c:	0801a23c 	.word	0x0801a23c
 8013d60:	08019b60 	.word	0x08019b60
 8013d64:	0801a134 	.word	0x0801a134

08013d68 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b08a      	sub	sp, #40	; 0x28
 8013d6c:	af04      	add	r7, sp, #16
 8013d6e:	60f8      	str	r0, [r7, #12]
 8013d70:	60b9      	str	r1, [r7, #8]
 8013d72:	607a      	str	r2, [r7, #4]
 8013d74:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013d76:	68bb      	ldr	r3, [r7, #8]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d106      	bne.n	8013d8a <tcp_output_control_segment+0x22>
 8013d7c:	4b1c      	ldr	r3, [pc, #112]	; (8013df0 <tcp_output_control_segment+0x88>)
 8013d7e:	f240 7287 	movw	r2, #1927	; 0x787
 8013d82:	491c      	ldr	r1, [pc, #112]	; (8013df4 <tcp_output_control_segment+0x8c>)
 8013d84:	481c      	ldr	r0, [pc, #112]	; (8013df8 <tcp_output_control_segment+0x90>)
 8013d86:	f003 f931 	bl	8016fec <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013d8a:	683a      	ldr	r2, [r7, #0]
 8013d8c:	6879      	ldr	r1, [r7, #4]
 8013d8e:	68f8      	ldr	r0, [r7, #12]
 8013d90:	f7fe ff40 	bl	8012c14 <tcp_route>
 8013d94:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013d96:	693b      	ldr	r3, [r7, #16]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d102      	bne.n	8013da2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013d9c:	23fc      	movs	r3, #252	; 0xfc
 8013d9e:	75fb      	strb	r3, [r7, #23]
 8013da0:	e01c      	b.n	8013ddc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d006      	beq.n	8013db6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	7adb      	ldrb	r3, [r3, #11]
 8013dac:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	7a9b      	ldrb	r3, [r3, #10]
 8013db2:	757b      	strb	r3, [r7, #21]
 8013db4:	e003      	b.n	8013dbe <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013db6:	23ff      	movs	r3, #255	; 0xff
 8013db8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013dba:	2300      	movs	r3, #0
 8013dbc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013dbe:	7dba      	ldrb	r2, [r7, #22]
 8013dc0:	693b      	ldr	r3, [r7, #16]
 8013dc2:	9302      	str	r3, [sp, #8]
 8013dc4:	2306      	movs	r3, #6
 8013dc6:	9301      	str	r3, [sp, #4]
 8013dc8:	7d7b      	ldrb	r3, [r7, #21]
 8013dca:	9300      	str	r3, [sp, #0]
 8013dcc:	4613      	mov	r3, r2
 8013dce:	683a      	ldr	r2, [r7, #0]
 8013dd0:	6879      	ldr	r1, [r7, #4]
 8013dd2:	68b8      	ldr	r0, [r7, #8]
 8013dd4:	f001 ffa0 	bl	8015d18 <ip4_output_if>
 8013dd8:	4603      	mov	r3, r0
 8013dda:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013ddc:	68b8      	ldr	r0, [r7, #8]
 8013dde:	f7fa fdd9 	bl	800e994 <pbuf_free>
  return err;
 8013de2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013de6:	4618      	mov	r0, r3
 8013de8:	3718      	adds	r7, #24
 8013dea:	46bd      	mov	sp, r7
 8013dec:	bd80      	pop	{r7, pc}
 8013dee:	bf00      	nop
 8013df0:	08019b0c 	.word	0x08019b0c
 8013df4:	0801a264 	.word	0x0801a264
 8013df8:	08019b60 	.word	0x08019b60

08013dfc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013dfc:	b590      	push	{r4, r7, lr}
 8013dfe:	b08b      	sub	sp, #44	; 0x2c
 8013e00:	af04      	add	r7, sp, #16
 8013e02:	60f8      	str	r0, [r7, #12]
 8013e04:	60b9      	str	r1, [r7, #8]
 8013e06:	607a      	str	r2, [r7, #4]
 8013e08:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013e0a:	683b      	ldr	r3, [r7, #0]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d106      	bne.n	8013e1e <tcp_rst+0x22>
 8013e10:	4b1f      	ldr	r3, [pc, #124]	; (8013e90 <tcp_rst+0x94>)
 8013e12:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013e16:	491f      	ldr	r1, [pc, #124]	; (8013e94 <tcp_rst+0x98>)
 8013e18:	481f      	ldr	r0, [pc, #124]	; (8013e98 <tcp_rst+0x9c>)
 8013e1a:	f003 f8e7 	bl	8016fec <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d106      	bne.n	8013e32 <tcp_rst+0x36>
 8013e24:	4b1a      	ldr	r3, [pc, #104]	; (8013e90 <tcp_rst+0x94>)
 8013e26:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013e2a:	491c      	ldr	r1, [pc, #112]	; (8013e9c <tcp_rst+0xa0>)
 8013e2c:	481a      	ldr	r0, [pc, #104]	; (8013e98 <tcp_rst+0x9c>)
 8013e2e:	f003 f8dd 	bl	8016fec <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013e32:	2300      	movs	r3, #0
 8013e34:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013e36:	f246 0308 	movw	r3, #24584	; 0x6008
 8013e3a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013e3c:	7dfb      	ldrb	r3, [r7, #23]
 8013e3e:	b29c      	uxth	r4, r3
 8013e40:	68b8      	ldr	r0, [r7, #8]
 8013e42:	f7f9 f9ca 	bl	800d1da <lwip_htonl>
 8013e46:	4602      	mov	r2, r0
 8013e48:	8abb      	ldrh	r3, [r7, #20]
 8013e4a:	9303      	str	r3, [sp, #12]
 8013e4c:	2314      	movs	r3, #20
 8013e4e:	9302      	str	r3, [sp, #8]
 8013e50:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013e52:	9301      	str	r3, [sp, #4]
 8013e54:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013e56:	9300      	str	r3, [sp, #0]
 8013e58:	4613      	mov	r3, r2
 8013e5a:	2200      	movs	r2, #0
 8013e5c:	4621      	mov	r1, r4
 8013e5e:	6878      	ldr	r0, [r7, #4]
 8013e60:	f7ff fe92 	bl	8013b88 <tcp_output_alloc_header_common>
 8013e64:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013e66:	693b      	ldr	r3, [r7, #16]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d00c      	beq.n	8013e86 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013e6c:	7dfb      	ldrb	r3, [r7, #23]
 8013e6e:	2200      	movs	r2, #0
 8013e70:	6939      	ldr	r1, [r7, #16]
 8013e72:	68f8      	ldr	r0, [r7, #12]
 8013e74:	f7ff ff38 	bl	8013ce8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e7a:	683a      	ldr	r2, [r7, #0]
 8013e7c:	6939      	ldr	r1, [r7, #16]
 8013e7e:	68f8      	ldr	r0, [r7, #12]
 8013e80:	f7ff ff72 	bl	8013d68 <tcp_output_control_segment>
 8013e84:	e000      	b.n	8013e88 <tcp_rst+0x8c>
    return;
 8013e86:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013e88:	371c      	adds	r7, #28
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	bd90      	pop	{r4, r7, pc}
 8013e8e:	bf00      	nop
 8013e90:	08019b0c 	.word	0x08019b0c
 8013e94:	0801a290 	.word	0x0801a290
 8013e98:	08019b60 	.word	0x08019b60
 8013e9c:	0801a2ac 	.word	0x0801a2ac

08013ea0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013ea0:	b590      	push	{r4, r7, lr}
 8013ea2:	b087      	sub	sp, #28
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013eac:	2300      	movs	r3, #0
 8013eae:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d106      	bne.n	8013ec4 <tcp_send_empty_ack+0x24>
 8013eb6:	4b28      	ldr	r3, [pc, #160]	; (8013f58 <tcp_send_empty_ack+0xb8>)
 8013eb8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013ebc:	4927      	ldr	r1, [pc, #156]	; (8013f5c <tcp_send_empty_ack+0xbc>)
 8013ebe:	4828      	ldr	r0, [pc, #160]	; (8013f60 <tcp_send_empty_ack+0xc0>)
 8013ec0:	f003 f894 	bl	8016fec <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013ec4:	7dfb      	ldrb	r3, [r7, #23]
 8013ec6:	009b      	lsls	r3, r3, #2
 8013ec8:	b2db      	uxtb	r3, r3
 8013eca:	f003 0304 	and.w	r3, r3, #4
 8013ece:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013ed0:	7d7b      	ldrb	r3, [r7, #21]
 8013ed2:	b29c      	uxth	r4, r3
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013ed8:	4618      	mov	r0, r3
 8013eda:	f7f9 f97e 	bl	800d1da <lwip_htonl>
 8013ede:	4603      	mov	r3, r0
 8013ee0:	2200      	movs	r2, #0
 8013ee2:	4621      	mov	r1, r4
 8013ee4:	6878      	ldr	r0, [r7, #4]
 8013ee6:	f7ff fec1 	bl	8013c6c <tcp_output_alloc_header>
 8013eea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013eec:	693b      	ldr	r3, [r7, #16]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d109      	bne.n	8013f06 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	8b5b      	ldrh	r3, [r3, #26]
 8013ef6:	f043 0303 	orr.w	r3, r3, #3
 8013efa:	b29a      	uxth	r2, r3
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013f00:	f06f 0301 	mvn.w	r3, #1
 8013f04:	e023      	b.n	8013f4e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013f06:	7dbb      	ldrb	r3, [r7, #22]
 8013f08:	7dfa      	ldrb	r2, [r7, #23]
 8013f0a:	6939      	ldr	r1, [r7, #16]
 8013f0c:	6878      	ldr	r0, [r7, #4]
 8013f0e:	f7ff feeb 	bl	8013ce8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013f12:	687a      	ldr	r2, [r7, #4]
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	3304      	adds	r3, #4
 8013f18:	6939      	ldr	r1, [r7, #16]
 8013f1a:	6878      	ldr	r0, [r7, #4]
 8013f1c:	f7ff ff24 	bl	8013d68 <tcp_output_control_segment>
 8013f20:	4603      	mov	r3, r0
 8013f22:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d007      	beq.n	8013f3c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	8b5b      	ldrh	r3, [r3, #26]
 8013f30:	f043 0303 	orr.w	r3, r3, #3
 8013f34:	b29a      	uxth	r2, r3
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	835a      	strh	r2, [r3, #26]
 8013f3a:	e006      	b.n	8013f4a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	8b5b      	ldrh	r3, [r3, #26]
 8013f40:	f023 0303 	bic.w	r3, r3, #3
 8013f44:	b29a      	uxth	r2, r3
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013f4e:	4618      	mov	r0, r3
 8013f50:	371c      	adds	r7, #28
 8013f52:	46bd      	mov	sp, r7
 8013f54:	bd90      	pop	{r4, r7, pc}
 8013f56:	bf00      	nop
 8013f58:	08019b0c 	.word	0x08019b0c
 8013f5c:	0801a2c8 	.word	0x0801a2c8
 8013f60:	08019b60 	.word	0x08019b60

08013f64 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013f64:	b590      	push	{r4, r7, lr}
 8013f66:	b087      	sub	sp, #28
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d106      	bne.n	8013f84 <tcp_keepalive+0x20>
 8013f76:	4b18      	ldr	r3, [pc, #96]	; (8013fd8 <tcp_keepalive+0x74>)
 8013f78:	f640 0224 	movw	r2, #2084	; 0x824
 8013f7c:	4917      	ldr	r1, [pc, #92]	; (8013fdc <tcp_keepalive+0x78>)
 8013f7e:	4818      	ldr	r0, [pc, #96]	; (8013fe0 <tcp_keepalive+0x7c>)
 8013f80:	f003 f834 	bl	8016fec <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013f84:	7dfb      	ldrb	r3, [r7, #23]
 8013f86:	b29c      	uxth	r4, r3
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013f8c:	3b01      	subs	r3, #1
 8013f8e:	4618      	mov	r0, r3
 8013f90:	f7f9 f923 	bl	800d1da <lwip_htonl>
 8013f94:	4603      	mov	r3, r0
 8013f96:	2200      	movs	r2, #0
 8013f98:	4621      	mov	r1, r4
 8013f9a:	6878      	ldr	r0, [r7, #4]
 8013f9c:	f7ff fe66 	bl	8013c6c <tcp_output_alloc_header>
 8013fa0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013fa2:	693b      	ldr	r3, [r7, #16]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d102      	bne.n	8013fae <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8013fac:	e010      	b.n	8013fd0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013fae:	7dfb      	ldrb	r3, [r7, #23]
 8013fb0:	2200      	movs	r2, #0
 8013fb2:	6939      	ldr	r1, [r7, #16]
 8013fb4:	6878      	ldr	r0, [r7, #4]
 8013fb6:	f7ff fe97 	bl	8013ce8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013fba:	687a      	ldr	r2, [r7, #4]
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	3304      	adds	r3, #4
 8013fc0:	6939      	ldr	r1, [r7, #16]
 8013fc2:	6878      	ldr	r0, [r7, #4]
 8013fc4:	f7ff fed0 	bl	8013d68 <tcp_output_control_segment>
 8013fc8:	4603      	mov	r3, r0
 8013fca:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	371c      	adds	r7, #28
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	bd90      	pop	{r4, r7, pc}
 8013fd8:	08019b0c 	.word	0x08019b0c
 8013fdc:	0801a2e8 	.word	0x0801a2e8
 8013fe0:	08019b60 	.word	0x08019b60

08013fe4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013fe4:	b590      	push	{r4, r7, lr}
 8013fe6:	b08b      	sub	sp, #44	; 0x2c
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013fec:	2300      	movs	r3, #0
 8013fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d106      	bne.n	8014006 <tcp_zero_window_probe+0x22>
 8013ff8:	4b4c      	ldr	r3, [pc, #304]	; (801412c <tcp_zero_window_probe+0x148>)
 8013ffa:	f640 024f 	movw	r2, #2127	; 0x84f
 8013ffe:	494c      	ldr	r1, [pc, #304]	; (8014130 <tcp_zero_window_probe+0x14c>)
 8014000:	484c      	ldr	r0, [pc, #304]	; (8014134 <tcp_zero_window_probe+0x150>)
 8014002:	f002 fff3 	bl	8016fec <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801400a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801400c:	6a3b      	ldr	r3, [r7, #32]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d101      	bne.n	8014016 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014012:	2300      	movs	r3, #0
 8014014:	e086      	b.n	8014124 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801401c:	2bff      	cmp	r3, #255	; 0xff
 801401e:	d007      	beq.n	8014030 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014026:	3301      	adds	r3, #1
 8014028:	b2da      	uxtb	r2, r3
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014030:	6a3b      	ldr	r3, [r7, #32]
 8014032:	68db      	ldr	r3, [r3, #12]
 8014034:	899b      	ldrh	r3, [r3, #12]
 8014036:	b29b      	uxth	r3, r3
 8014038:	4618      	mov	r0, r3
 801403a:	f7f9 f8b9 	bl	800d1b0 <lwip_htons>
 801403e:	4603      	mov	r3, r0
 8014040:	b2db      	uxtb	r3, r3
 8014042:	f003 0301 	and.w	r3, r3, #1
 8014046:	2b00      	cmp	r3, #0
 8014048:	d005      	beq.n	8014056 <tcp_zero_window_probe+0x72>
 801404a:	6a3b      	ldr	r3, [r7, #32]
 801404c:	891b      	ldrh	r3, [r3, #8]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d101      	bne.n	8014056 <tcp_zero_window_probe+0x72>
 8014052:	2301      	movs	r3, #1
 8014054:	e000      	b.n	8014058 <tcp_zero_window_probe+0x74>
 8014056:	2300      	movs	r3, #0
 8014058:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801405a:	7ffb      	ldrb	r3, [r7, #31]
 801405c:	2b00      	cmp	r3, #0
 801405e:	bf0c      	ite	eq
 8014060:	2301      	moveq	r3, #1
 8014062:	2300      	movne	r3, #0
 8014064:	b2db      	uxtb	r3, r3
 8014066:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801406c:	b299      	uxth	r1, r3
 801406e:	6a3b      	ldr	r3, [r7, #32]
 8014070:	68db      	ldr	r3, [r3, #12]
 8014072:	685b      	ldr	r3, [r3, #4]
 8014074:	8bba      	ldrh	r2, [r7, #28]
 8014076:	6878      	ldr	r0, [r7, #4]
 8014078:	f7ff fdf8 	bl	8013c6c <tcp_output_alloc_header>
 801407c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801407e:	69bb      	ldr	r3, [r7, #24]
 8014080:	2b00      	cmp	r3, #0
 8014082:	d102      	bne.n	801408a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014084:	f04f 33ff 	mov.w	r3, #4294967295
 8014088:	e04c      	b.n	8014124 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801408a:	69bb      	ldr	r3, [r7, #24]
 801408c:	685b      	ldr	r3, [r3, #4]
 801408e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014090:	7ffb      	ldrb	r3, [r7, #31]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d011      	beq.n	80140ba <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014096:	697b      	ldr	r3, [r7, #20]
 8014098:	899b      	ldrh	r3, [r3, #12]
 801409a:	b29b      	uxth	r3, r3
 801409c:	b21b      	sxth	r3, r3
 801409e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80140a2:	b21c      	sxth	r4, r3
 80140a4:	2011      	movs	r0, #17
 80140a6:	f7f9 f883 	bl	800d1b0 <lwip_htons>
 80140aa:	4603      	mov	r3, r0
 80140ac:	b21b      	sxth	r3, r3
 80140ae:	4323      	orrs	r3, r4
 80140b0:	b21b      	sxth	r3, r3
 80140b2:	b29a      	uxth	r2, r3
 80140b4:	697b      	ldr	r3, [r7, #20]
 80140b6:	819a      	strh	r2, [r3, #12]
 80140b8:	e010      	b.n	80140dc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80140ba:	69bb      	ldr	r3, [r7, #24]
 80140bc:	685b      	ldr	r3, [r3, #4]
 80140be:	3314      	adds	r3, #20
 80140c0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80140c2:	6a3b      	ldr	r3, [r7, #32]
 80140c4:	6858      	ldr	r0, [r3, #4]
 80140c6:	6a3b      	ldr	r3, [r7, #32]
 80140c8:	685b      	ldr	r3, [r3, #4]
 80140ca:	891a      	ldrh	r2, [r3, #8]
 80140cc:	6a3b      	ldr	r3, [r7, #32]
 80140ce:	891b      	ldrh	r3, [r3, #8]
 80140d0:	1ad3      	subs	r3, r2, r3
 80140d2:	b29b      	uxth	r3, r3
 80140d4:	2201      	movs	r2, #1
 80140d6:	6939      	ldr	r1, [r7, #16]
 80140d8:	f7fa fe52 	bl	800ed80 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80140dc:	6a3b      	ldr	r3, [r7, #32]
 80140de:	68db      	ldr	r3, [r3, #12]
 80140e0:	685b      	ldr	r3, [r3, #4]
 80140e2:	4618      	mov	r0, r3
 80140e4:	f7f9 f879 	bl	800d1da <lwip_htonl>
 80140e8:	4603      	mov	r3, r0
 80140ea:	3301      	adds	r3, #1
 80140ec:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	1ad3      	subs	r3, r2, r3
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	da02      	bge.n	8014100 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	68fa      	ldr	r2, [r7, #12]
 80140fe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014104:	2200      	movs	r2, #0
 8014106:	69b9      	ldr	r1, [r7, #24]
 8014108:	6878      	ldr	r0, [r7, #4]
 801410a:	f7ff fded 	bl	8013ce8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801410e:	687a      	ldr	r2, [r7, #4]
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	3304      	adds	r3, #4
 8014114:	69b9      	ldr	r1, [r7, #24]
 8014116:	6878      	ldr	r0, [r7, #4]
 8014118:	f7ff fe26 	bl	8013d68 <tcp_output_control_segment>
 801411c:	4603      	mov	r3, r0
 801411e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014120:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014124:	4618      	mov	r0, r3
 8014126:	372c      	adds	r7, #44	; 0x2c
 8014128:	46bd      	mov	sp, r7
 801412a:	bd90      	pop	{r4, r7, pc}
 801412c:	08019b0c 	.word	0x08019b0c
 8014130:	0801a304 	.word	0x0801a304
 8014134:	08019b60 	.word	0x08019b60

08014138 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014138:	b580      	push	{r7, lr}
 801413a:	b082      	sub	sp, #8
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014140:	f7fa ff0c 	bl	800ef5c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014144:	4b0a      	ldr	r3, [pc, #40]	; (8014170 <tcpip_tcp_timer+0x38>)
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d103      	bne.n	8014154 <tcpip_tcp_timer+0x1c>
 801414c:	4b09      	ldr	r3, [pc, #36]	; (8014174 <tcpip_tcp_timer+0x3c>)
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d005      	beq.n	8014160 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014154:	2200      	movs	r2, #0
 8014156:	4908      	ldr	r1, [pc, #32]	; (8014178 <tcpip_tcp_timer+0x40>)
 8014158:	20fa      	movs	r0, #250	; 0xfa
 801415a:	f000 f8f3 	bl	8014344 <sys_timeout>
 801415e:	e003      	b.n	8014168 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014160:	4b06      	ldr	r3, [pc, #24]	; (801417c <tcpip_tcp_timer+0x44>)
 8014162:	2200      	movs	r2, #0
 8014164:	601a      	str	r2, [r3, #0]
  }
}
 8014166:	bf00      	nop
 8014168:	bf00      	nop
 801416a:	3708      	adds	r7, #8
 801416c:	46bd      	mov	sp, r7
 801416e:	bd80      	pop	{r7, pc}
 8014170:	2001102c 	.word	0x2001102c
 8014174:	20011030 	.word	0x20011030
 8014178:	08014139 	.word	0x08014139
 801417c:	20011078 	.word	0x20011078

08014180 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014180:	b580      	push	{r7, lr}
 8014182:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014184:	4b0a      	ldr	r3, [pc, #40]	; (80141b0 <tcp_timer_needed+0x30>)
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d10f      	bne.n	80141ac <tcp_timer_needed+0x2c>
 801418c:	4b09      	ldr	r3, [pc, #36]	; (80141b4 <tcp_timer_needed+0x34>)
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	2b00      	cmp	r3, #0
 8014192:	d103      	bne.n	801419c <tcp_timer_needed+0x1c>
 8014194:	4b08      	ldr	r3, [pc, #32]	; (80141b8 <tcp_timer_needed+0x38>)
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d007      	beq.n	80141ac <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801419c:	4b04      	ldr	r3, [pc, #16]	; (80141b0 <tcp_timer_needed+0x30>)
 801419e:	2201      	movs	r2, #1
 80141a0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80141a2:	2200      	movs	r2, #0
 80141a4:	4905      	ldr	r1, [pc, #20]	; (80141bc <tcp_timer_needed+0x3c>)
 80141a6:	20fa      	movs	r0, #250	; 0xfa
 80141a8:	f000 f8cc 	bl	8014344 <sys_timeout>
  }
}
 80141ac:	bf00      	nop
 80141ae:	bd80      	pop	{r7, pc}
 80141b0:	20011078 	.word	0x20011078
 80141b4:	2001102c 	.word	0x2001102c
 80141b8:	20011030 	.word	0x20011030
 80141bc:	08014139 	.word	0x08014139

080141c0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b086      	sub	sp, #24
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	60f8      	str	r0, [r7, #12]
 80141c8:	60b9      	str	r1, [r7, #8]
 80141ca:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80141cc:	200a      	movs	r0, #10
 80141ce:	f7f9 fcc7 	bl	800db60 <memp_malloc>
 80141d2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80141d4:	693b      	ldr	r3, [r7, #16]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d109      	bne.n	80141ee <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80141da:	693b      	ldr	r3, [r7, #16]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d151      	bne.n	8014284 <sys_timeout_abs+0xc4>
 80141e0:	4b2a      	ldr	r3, [pc, #168]	; (801428c <sys_timeout_abs+0xcc>)
 80141e2:	22be      	movs	r2, #190	; 0xbe
 80141e4:	492a      	ldr	r1, [pc, #168]	; (8014290 <sys_timeout_abs+0xd0>)
 80141e6:	482b      	ldr	r0, [pc, #172]	; (8014294 <sys_timeout_abs+0xd4>)
 80141e8:	f002 ff00 	bl	8016fec <iprintf>
    return;
 80141ec:	e04a      	b.n	8014284 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80141ee:	693b      	ldr	r3, [r7, #16]
 80141f0:	2200      	movs	r2, #0
 80141f2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80141f4:	693b      	ldr	r3, [r7, #16]
 80141f6:	68ba      	ldr	r2, [r7, #8]
 80141f8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80141fa:	693b      	ldr	r3, [r7, #16]
 80141fc:	687a      	ldr	r2, [r7, #4]
 80141fe:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014200:	693b      	ldr	r3, [r7, #16]
 8014202:	68fa      	ldr	r2, [r7, #12]
 8014204:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014206:	4b24      	ldr	r3, [pc, #144]	; (8014298 <sys_timeout_abs+0xd8>)
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d103      	bne.n	8014216 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801420e:	4a22      	ldr	r2, [pc, #136]	; (8014298 <sys_timeout_abs+0xd8>)
 8014210:	693b      	ldr	r3, [r7, #16]
 8014212:	6013      	str	r3, [r2, #0]
    return;
 8014214:	e037      	b.n	8014286 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014216:	693b      	ldr	r3, [r7, #16]
 8014218:	685a      	ldr	r2, [r3, #4]
 801421a:	4b1f      	ldr	r3, [pc, #124]	; (8014298 <sys_timeout_abs+0xd8>)
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	685b      	ldr	r3, [r3, #4]
 8014220:	1ad3      	subs	r3, r2, r3
 8014222:	0fdb      	lsrs	r3, r3, #31
 8014224:	f003 0301 	and.w	r3, r3, #1
 8014228:	b2db      	uxtb	r3, r3
 801422a:	2b00      	cmp	r3, #0
 801422c:	d007      	beq.n	801423e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801422e:	4b1a      	ldr	r3, [pc, #104]	; (8014298 <sys_timeout_abs+0xd8>)
 8014230:	681a      	ldr	r2, [r3, #0]
 8014232:	693b      	ldr	r3, [r7, #16]
 8014234:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014236:	4a18      	ldr	r2, [pc, #96]	; (8014298 <sys_timeout_abs+0xd8>)
 8014238:	693b      	ldr	r3, [r7, #16]
 801423a:	6013      	str	r3, [r2, #0]
 801423c:	e023      	b.n	8014286 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801423e:	4b16      	ldr	r3, [pc, #88]	; (8014298 <sys_timeout_abs+0xd8>)
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	617b      	str	r3, [r7, #20]
 8014244:	e01a      	b.n	801427c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014246:	697b      	ldr	r3, [r7, #20]
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	2b00      	cmp	r3, #0
 801424c:	d00b      	beq.n	8014266 <sys_timeout_abs+0xa6>
 801424e:	693b      	ldr	r3, [r7, #16]
 8014250:	685a      	ldr	r2, [r3, #4]
 8014252:	697b      	ldr	r3, [r7, #20]
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	685b      	ldr	r3, [r3, #4]
 8014258:	1ad3      	subs	r3, r2, r3
 801425a:	0fdb      	lsrs	r3, r3, #31
 801425c:	f003 0301 	and.w	r3, r3, #1
 8014260:	b2db      	uxtb	r3, r3
 8014262:	2b00      	cmp	r3, #0
 8014264:	d007      	beq.n	8014276 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014266:	697b      	ldr	r3, [r7, #20]
 8014268:	681a      	ldr	r2, [r3, #0]
 801426a:	693b      	ldr	r3, [r7, #16]
 801426c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801426e:	697b      	ldr	r3, [r7, #20]
 8014270:	693a      	ldr	r2, [r7, #16]
 8014272:	601a      	str	r2, [r3, #0]
        break;
 8014274:	e007      	b.n	8014286 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014276:	697b      	ldr	r3, [r7, #20]
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	617b      	str	r3, [r7, #20]
 801427c:	697b      	ldr	r3, [r7, #20]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d1e1      	bne.n	8014246 <sys_timeout_abs+0x86>
 8014282:	e000      	b.n	8014286 <sys_timeout_abs+0xc6>
    return;
 8014284:	bf00      	nop
      }
    }
  }
}
 8014286:	3718      	adds	r7, #24
 8014288:	46bd      	mov	sp, r7
 801428a:	bd80      	pop	{r7, pc}
 801428c:	0801a328 	.word	0x0801a328
 8014290:	0801a35c 	.word	0x0801a35c
 8014294:	0801a39c 	.word	0x0801a39c
 8014298:	20011070 	.word	0x20011070

0801429c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801429c:	b580      	push	{r7, lr}
 801429e:	b086      	sub	sp, #24
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80142a8:	697b      	ldr	r3, [r7, #20]
 80142aa:	685b      	ldr	r3, [r3, #4]
 80142ac:	4798      	blx	r3

  now = sys_now();
 80142ae:	f7f4 fc8d 	bl	8008bcc <sys_now>
 80142b2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80142b4:	697b      	ldr	r3, [r7, #20]
 80142b6:	681a      	ldr	r2, [r3, #0]
 80142b8:	4b0f      	ldr	r3, [pc, #60]	; (80142f8 <lwip_cyclic_timer+0x5c>)
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	4413      	add	r3, r2
 80142be:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80142c0:	68fa      	ldr	r2, [r7, #12]
 80142c2:	693b      	ldr	r3, [r7, #16]
 80142c4:	1ad3      	subs	r3, r2, r3
 80142c6:	0fdb      	lsrs	r3, r3, #31
 80142c8:	f003 0301 	and.w	r3, r3, #1
 80142cc:	b2db      	uxtb	r3, r3
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d009      	beq.n	80142e6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80142d2:	697b      	ldr	r3, [r7, #20]
 80142d4:	681a      	ldr	r2, [r3, #0]
 80142d6:	693b      	ldr	r3, [r7, #16]
 80142d8:	4413      	add	r3, r2
 80142da:	687a      	ldr	r2, [r7, #4]
 80142dc:	4907      	ldr	r1, [pc, #28]	; (80142fc <lwip_cyclic_timer+0x60>)
 80142de:	4618      	mov	r0, r3
 80142e0:	f7ff ff6e 	bl	80141c0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80142e4:	e004      	b.n	80142f0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80142e6:	687a      	ldr	r2, [r7, #4]
 80142e8:	4904      	ldr	r1, [pc, #16]	; (80142fc <lwip_cyclic_timer+0x60>)
 80142ea:	68f8      	ldr	r0, [r7, #12]
 80142ec:	f7ff ff68 	bl	80141c0 <sys_timeout_abs>
}
 80142f0:	bf00      	nop
 80142f2:	3718      	adds	r7, #24
 80142f4:	46bd      	mov	sp, r7
 80142f6:	bd80      	pop	{r7, pc}
 80142f8:	20011074 	.word	0x20011074
 80142fc:	0801429d 	.word	0x0801429d

08014300 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014300:	b580      	push	{r7, lr}
 8014302:	b082      	sub	sp, #8
 8014304:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014306:	2301      	movs	r3, #1
 8014308:	607b      	str	r3, [r7, #4]
 801430a:	e00e      	b.n	801432a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801430c:	4a0b      	ldr	r2, [pc, #44]	; (801433c <sys_timeouts_init+0x3c>)
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	00db      	lsls	r3, r3, #3
 8014318:	4a08      	ldr	r2, [pc, #32]	; (801433c <sys_timeouts_init+0x3c>)
 801431a:	4413      	add	r3, r2
 801431c:	461a      	mov	r2, r3
 801431e:	4908      	ldr	r1, [pc, #32]	; (8014340 <sys_timeouts_init+0x40>)
 8014320:	f000 f810 	bl	8014344 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	3301      	adds	r3, #1
 8014328:	607b      	str	r3, [r7, #4]
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	2b02      	cmp	r3, #2
 801432e:	d9ed      	bls.n	801430c <sys_timeouts_init+0xc>
  }
}
 8014330:	bf00      	nop
 8014332:	bf00      	nop
 8014334:	3708      	adds	r7, #8
 8014336:	46bd      	mov	sp, r7
 8014338:	bd80      	pop	{r7, pc}
 801433a:	bf00      	nop
 801433c:	0801afc8 	.word	0x0801afc8
 8014340:	0801429d 	.word	0x0801429d

08014344 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014344:	b580      	push	{r7, lr}
 8014346:	b086      	sub	sp, #24
 8014348:	af00      	add	r7, sp, #0
 801434a:	60f8      	str	r0, [r7, #12]
 801434c:	60b9      	str	r1, [r7, #8]
 801434e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014356:	d306      	bcc.n	8014366 <sys_timeout+0x22>
 8014358:	4b0a      	ldr	r3, [pc, #40]	; (8014384 <sys_timeout+0x40>)
 801435a:	f240 1229 	movw	r2, #297	; 0x129
 801435e:	490a      	ldr	r1, [pc, #40]	; (8014388 <sys_timeout+0x44>)
 8014360:	480a      	ldr	r0, [pc, #40]	; (801438c <sys_timeout+0x48>)
 8014362:	f002 fe43 	bl	8016fec <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014366:	f7f4 fc31 	bl	8008bcc <sys_now>
 801436a:	4602      	mov	r2, r0
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	4413      	add	r3, r2
 8014370:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014372:	687a      	ldr	r2, [r7, #4]
 8014374:	68b9      	ldr	r1, [r7, #8]
 8014376:	6978      	ldr	r0, [r7, #20]
 8014378:	f7ff ff22 	bl	80141c0 <sys_timeout_abs>
#endif
}
 801437c:	bf00      	nop
 801437e:	3718      	adds	r7, #24
 8014380:	46bd      	mov	sp, r7
 8014382:	bd80      	pop	{r7, pc}
 8014384:	0801a328 	.word	0x0801a328
 8014388:	0801a3c4 	.word	0x0801a3c4
 801438c:	0801a39c 	.word	0x0801a39c

08014390 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b084      	sub	sp, #16
 8014394:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014396:	f7f4 fc19 	bl	8008bcc <sys_now>
 801439a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801439c:	4b17      	ldr	r3, [pc, #92]	; (80143fc <sys_check_timeouts+0x6c>)
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80143a2:	68bb      	ldr	r3, [r7, #8]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d022      	beq.n	80143ee <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80143a8:	68bb      	ldr	r3, [r7, #8]
 80143aa:	685b      	ldr	r3, [r3, #4]
 80143ac:	68fa      	ldr	r2, [r7, #12]
 80143ae:	1ad3      	subs	r3, r2, r3
 80143b0:	0fdb      	lsrs	r3, r3, #31
 80143b2:	f003 0301 	and.w	r3, r3, #1
 80143b6:	b2db      	uxtb	r3, r3
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d11a      	bne.n	80143f2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80143bc:	68bb      	ldr	r3, [r7, #8]
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	4a0e      	ldr	r2, [pc, #56]	; (80143fc <sys_check_timeouts+0x6c>)
 80143c2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80143c4:	68bb      	ldr	r3, [r7, #8]
 80143c6:	689b      	ldr	r3, [r3, #8]
 80143c8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80143ca:	68bb      	ldr	r3, [r7, #8]
 80143cc:	68db      	ldr	r3, [r3, #12]
 80143ce:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80143d0:	68bb      	ldr	r3, [r7, #8]
 80143d2:	685b      	ldr	r3, [r3, #4]
 80143d4:	4a0a      	ldr	r2, [pc, #40]	; (8014400 <sys_check_timeouts+0x70>)
 80143d6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80143d8:	68b9      	ldr	r1, [r7, #8]
 80143da:	200a      	movs	r0, #10
 80143dc:	f7f9 fc36 	bl	800dc4c <memp_free>
    if (handler != NULL) {
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d0da      	beq.n	801439c <sys_check_timeouts+0xc>
      handler(arg);
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	6838      	ldr	r0, [r7, #0]
 80143ea:	4798      	blx	r3
  do {
 80143ec:	e7d6      	b.n	801439c <sys_check_timeouts+0xc>
      return;
 80143ee:	bf00      	nop
 80143f0:	e000      	b.n	80143f4 <sys_check_timeouts+0x64>
      return;
 80143f2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80143f4:	3710      	adds	r7, #16
 80143f6:	46bd      	mov	sp, r7
 80143f8:	bd80      	pop	{r7, pc}
 80143fa:	bf00      	nop
 80143fc:	20011070 	.word	0x20011070
 8014400:	20011074 	.word	0x20011074

08014404 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b082      	sub	sp, #8
 8014408:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801440a:	4b16      	ldr	r3, [pc, #88]	; (8014464 <sys_timeouts_sleeptime+0x60>)
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d102      	bne.n	8014418 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014412:	f04f 33ff 	mov.w	r3, #4294967295
 8014416:	e020      	b.n	801445a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014418:	f7f4 fbd8 	bl	8008bcc <sys_now>
 801441c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801441e:	4b11      	ldr	r3, [pc, #68]	; (8014464 <sys_timeouts_sleeptime+0x60>)
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	685a      	ldr	r2, [r3, #4]
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	1ad3      	subs	r3, r2, r3
 8014428:	0fdb      	lsrs	r3, r3, #31
 801442a:	f003 0301 	and.w	r3, r3, #1
 801442e:	b2db      	uxtb	r3, r3
 8014430:	2b00      	cmp	r3, #0
 8014432:	d001      	beq.n	8014438 <sys_timeouts_sleeptime+0x34>
    return 0;
 8014434:	2300      	movs	r3, #0
 8014436:	e010      	b.n	801445a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014438:	4b0a      	ldr	r3, [pc, #40]	; (8014464 <sys_timeouts_sleeptime+0x60>)
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	685a      	ldr	r2, [r3, #4]
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	1ad3      	subs	r3, r2, r3
 8014442:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014444:	683b      	ldr	r3, [r7, #0]
 8014446:	2b00      	cmp	r3, #0
 8014448:	da06      	bge.n	8014458 <sys_timeouts_sleeptime+0x54>
 801444a:	4b07      	ldr	r3, [pc, #28]	; (8014468 <sys_timeouts_sleeptime+0x64>)
 801444c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014450:	4906      	ldr	r1, [pc, #24]	; (801446c <sys_timeouts_sleeptime+0x68>)
 8014452:	4807      	ldr	r0, [pc, #28]	; (8014470 <sys_timeouts_sleeptime+0x6c>)
 8014454:	f002 fdca 	bl	8016fec <iprintf>
    return ret;
 8014458:	683b      	ldr	r3, [r7, #0]
  }
}
 801445a:	4618      	mov	r0, r3
 801445c:	3708      	adds	r7, #8
 801445e:	46bd      	mov	sp, r7
 8014460:	bd80      	pop	{r7, pc}
 8014462:	bf00      	nop
 8014464:	20011070 	.word	0x20011070
 8014468:	0801a328 	.word	0x0801a328
 801446c:	0801a3fc 	.word	0x0801a3fc
 8014470:	0801a39c 	.word	0x0801a39c

08014474 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014474:	b580      	push	{r7, lr}
 8014476:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014478:	f002 fe46 	bl	8017108 <rand>
 801447c:	4603      	mov	r3, r0
 801447e:	b29b      	uxth	r3, r3
 8014480:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014484:	b29b      	uxth	r3, r3
 8014486:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801448a:	b29a      	uxth	r2, r3
 801448c:	4b01      	ldr	r3, [pc, #4]	; (8014494 <udp_init+0x20>)
 801448e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014490:	bf00      	nop
 8014492:	bd80      	pop	{r7, pc}
 8014494:	2000002c 	.word	0x2000002c

08014498 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014498:	b580      	push	{r7, lr}
 801449a:	b084      	sub	sp, #16
 801449c:	af00      	add	r7, sp, #0
 801449e:	60f8      	str	r0, [r7, #12]
 80144a0:	60b9      	str	r1, [r7, #8]
 80144a2:	4613      	mov	r3, r2
 80144a4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d105      	bne.n	80144b8 <udp_input_local_match+0x20>
 80144ac:	4b27      	ldr	r3, [pc, #156]	; (801454c <udp_input_local_match+0xb4>)
 80144ae:	2287      	movs	r2, #135	; 0x87
 80144b0:	4927      	ldr	r1, [pc, #156]	; (8014550 <udp_input_local_match+0xb8>)
 80144b2:	4828      	ldr	r0, [pc, #160]	; (8014554 <udp_input_local_match+0xbc>)
 80144b4:	f002 fd9a 	bl	8016fec <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80144b8:	68bb      	ldr	r3, [r7, #8]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d105      	bne.n	80144ca <udp_input_local_match+0x32>
 80144be:	4b23      	ldr	r3, [pc, #140]	; (801454c <udp_input_local_match+0xb4>)
 80144c0:	2288      	movs	r2, #136	; 0x88
 80144c2:	4925      	ldr	r1, [pc, #148]	; (8014558 <udp_input_local_match+0xc0>)
 80144c4:	4823      	ldr	r0, [pc, #140]	; (8014554 <udp_input_local_match+0xbc>)
 80144c6:	f002 fd91 	bl	8016fec <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	7a1b      	ldrb	r3, [r3, #8]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d00b      	beq.n	80144ea <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	7a1a      	ldrb	r2, [r3, #8]
 80144d6:	4b21      	ldr	r3, [pc, #132]	; (801455c <udp_input_local_match+0xc4>)
 80144d8:	685b      	ldr	r3, [r3, #4]
 80144da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80144de:	3301      	adds	r3, #1
 80144e0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80144e2:	429a      	cmp	r2, r3
 80144e4:	d001      	beq.n	80144ea <udp_input_local_match+0x52>
    return 0;
 80144e6:	2300      	movs	r3, #0
 80144e8:	e02b      	b.n	8014542 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80144ea:	79fb      	ldrb	r3, [r7, #7]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d018      	beq.n	8014522 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d013      	beq.n	801451e <udp_input_local_match+0x86>
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d00f      	beq.n	801451e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80144fe:	4b17      	ldr	r3, [pc, #92]	; (801455c <udp_input_local_match+0xc4>)
 8014500:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014506:	d00a      	beq.n	801451e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	681a      	ldr	r2, [r3, #0]
 801450c:	4b13      	ldr	r3, [pc, #76]	; (801455c <udp_input_local_match+0xc4>)
 801450e:	695b      	ldr	r3, [r3, #20]
 8014510:	405a      	eors	r2, r3
 8014512:	68bb      	ldr	r3, [r7, #8]
 8014514:	3308      	adds	r3, #8
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801451a:	2b00      	cmp	r3, #0
 801451c:	d110      	bne.n	8014540 <udp_input_local_match+0xa8>
          return 1;
 801451e:	2301      	movs	r3, #1
 8014520:	e00f      	b.n	8014542 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d009      	beq.n	801453c <udp_input_local_match+0xa4>
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d005      	beq.n	801453c <udp_input_local_match+0xa4>
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	681a      	ldr	r2, [r3, #0]
 8014534:	4b09      	ldr	r3, [pc, #36]	; (801455c <udp_input_local_match+0xc4>)
 8014536:	695b      	ldr	r3, [r3, #20]
 8014538:	429a      	cmp	r2, r3
 801453a:	d101      	bne.n	8014540 <udp_input_local_match+0xa8>
        return 1;
 801453c:	2301      	movs	r3, #1
 801453e:	e000      	b.n	8014542 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014540:	2300      	movs	r3, #0
}
 8014542:	4618      	mov	r0, r3
 8014544:	3710      	adds	r7, #16
 8014546:	46bd      	mov	sp, r7
 8014548:	bd80      	pop	{r7, pc}
 801454a:	bf00      	nop
 801454c:	0801a410 	.word	0x0801a410
 8014550:	0801a440 	.word	0x0801a440
 8014554:	0801a464 	.word	0x0801a464
 8014558:	0801a48c 	.word	0x0801a48c
 801455c:	2000d8cc 	.word	0x2000d8cc

08014560 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014560:	b590      	push	{r4, r7, lr}
 8014562:	b08d      	sub	sp, #52	; 0x34
 8014564:	af02      	add	r7, sp, #8
 8014566:	6078      	str	r0, [r7, #4]
 8014568:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801456a:	2300      	movs	r3, #0
 801456c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d105      	bne.n	8014580 <udp_input+0x20>
 8014574:	4b7c      	ldr	r3, [pc, #496]	; (8014768 <udp_input+0x208>)
 8014576:	22cf      	movs	r2, #207	; 0xcf
 8014578:	497c      	ldr	r1, [pc, #496]	; (801476c <udp_input+0x20c>)
 801457a:	487d      	ldr	r0, [pc, #500]	; (8014770 <udp_input+0x210>)
 801457c:	f002 fd36 	bl	8016fec <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014580:	683b      	ldr	r3, [r7, #0]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d105      	bne.n	8014592 <udp_input+0x32>
 8014586:	4b78      	ldr	r3, [pc, #480]	; (8014768 <udp_input+0x208>)
 8014588:	22d0      	movs	r2, #208	; 0xd0
 801458a:	497a      	ldr	r1, [pc, #488]	; (8014774 <udp_input+0x214>)
 801458c:	4878      	ldr	r0, [pc, #480]	; (8014770 <udp_input+0x210>)
 801458e:	f002 fd2d 	bl	8016fec <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	895b      	ldrh	r3, [r3, #10]
 8014596:	2b07      	cmp	r3, #7
 8014598:	d803      	bhi.n	80145a2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801459a:	6878      	ldr	r0, [r7, #4]
 801459c:	f7fa f9fa 	bl	800e994 <pbuf_free>
    goto end;
 80145a0:	e0de      	b.n	8014760 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	685b      	ldr	r3, [r3, #4]
 80145a6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80145a8:	4b73      	ldr	r3, [pc, #460]	; (8014778 <udp_input+0x218>)
 80145aa:	695b      	ldr	r3, [r3, #20]
 80145ac:	4a72      	ldr	r2, [pc, #456]	; (8014778 <udp_input+0x218>)
 80145ae:	6812      	ldr	r2, [r2, #0]
 80145b0:	4611      	mov	r1, r2
 80145b2:	4618      	mov	r0, r3
 80145b4:	f001 fc88 	bl	8015ec8 <ip4_addr_isbroadcast_u32>
 80145b8:	4603      	mov	r3, r0
 80145ba:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80145bc:	697b      	ldr	r3, [r7, #20]
 80145be:	881b      	ldrh	r3, [r3, #0]
 80145c0:	b29b      	uxth	r3, r3
 80145c2:	4618      	mov	r0, r3
 80145c4:	f7f8 fdf4 	bl	800d1b0 <lwip_htons>
 80145c8:	4603      	mov	r3, r0
 80145ca:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80145cc:	697b      	ldr	r3, [r7, #20]
 80145ce:	885b      	ldrh	r3, [r3, #2]
 80145d0:	b29b      	uxth	r3, r3
 80145d2:	4618      	mov	r0, r3
 80145d4:	f7f8 fdec 	bl	800d1b0 <lwip_htons>
 80145d8:	4603      	mov	r3, r0
 80145da:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80145dc:	2300      	movs	r3, #0
 80145de:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80145e0:	2300      	movs	r3, #0
 80145e2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80145e4:	2300      	movs	r3, #0
 80145e6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80145e8:	4b64      	ldr	r3, [pc, #400]	; (801477c <udp_input+0x21c>)
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	627b      	str	r3, [r7, #36]	; 0x24
 80145ee:	e054      	b.n	801469a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80145f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145f2:	8a5b      	ldrh	r3, [r3, #18]
 80145f4:	89fa      	ldrh	r2, [r7, #14]
 80145f6:	429a      	cmp	r2, r3
 80145f8:	d14a      	bne.n	8014690 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80145fa:	7cfb      	ldrb	r3, [r7, #19]
 80145fc:	461a      	mov	r2, r3
 80145fe:	6839      	ldr	r1, [r7, #0]
 8014600:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014602:	f7ff ff49 	bl	8014498 <udp_input_local_match>
 8014606:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014608:	2b00      	cmp	r3, #0
 801460a:	d041      	beq.n	8014690 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801460e:	7c1b      	ldrb	r3, [r3, #16]
 8014610:	f003 0304 	and.w	r3, r3, #4
 8014614:	2b00      	cmp	r3, #0
 8014616:	d11d      	bne.n	8014654 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014618:	69fb      	ldr	r3, [r7, #28]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d102      	bne.n	8014624 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014620:	61fb      	str	r3, [r7, #28]
 8014622:	e017      	b.n	8014654 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014624:	7cfb      	ldrb	r3, [r7, #19]
 8014626:	2b00      	cmp	r3, #0
 8014628:	d014      	beq.n	8014654 <udp_input+0xf4>
 801462a:	4b53      	ldr	r3, [pc, #332]	; (8014778 <udp_input+0x218>)
 801462c:	695b      	ldr	r3, [r3, #20]
 801462e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014632:	d10f      	bne.n	8014654 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014634:	69fb      	ldr	r3, [r7, #28]
 8014636:	681a      	ldr	r2, [r3, #0]
 8014638:	683b      	ldr	r3, [r7, #0]
 801463a:	3304      	adds	r3, #4
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	429a      	cmp	r2, r3
 8014640:	d008      	beq.n	8014654 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014644:	681a      	ldr	r2, [r3, #0]
 8014646:	683b      	ldr	r3, [r7, #0]
 8014648:	3304      	adds	r3, #4
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	429a      	cmp	r2, r3
 801464e:	d101      	bne.n	8014654 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014652:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014656:	8a9b      	ldrh	r3, [r3, #20]
 8014658:	8a3a      	ldrh	r2, [r7, #16]
 801465a:	429a      	cmp	r2, r3
 801465c:	d118      	bne.n	8014690 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014660:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014662:	2b00      	cmp	r3, #0
 8014664:	d005      	beq.n	8014672 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014668:	685a      	ldr	r2, [r3, #4]
 801466a:	4b43      	ldr	r3, [pc, #268]	; (8014778 <udp_input+0x218>)
 801466c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801466e:	429a      	cmp	r2, r3
 8014670:	d10e      	bne.n	8014690 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014672:	6a3b      	ldr	r3, [r7, #32]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d014      	beq.n	80146a2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801467a:	68da      	ldr	r2, [r3, #12]
 801467c:	6a3b      	ldr	r3, [r7, #32]
 801467e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014680:	4b3e      	ldr	r3, [pc, #248]	; (801477c <udp_input+0x21c>)
 8014682:	681a      	ldr	r2, [r3, #0]
 8014684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014686:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014688:	4a3c      	ldr	r2, [pc, #240]	; (801477c <udp_input+0x21c>)
 801468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801468c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801468e:	e008      	b.n	80146a2 <udp_input+0x142>
      }
    }

    prev = pcb;
 8014690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014692:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014696:	68db      	ldr	r3, [r3, #12]
 8014698:	627b      	str	r3, [r7, #36]	; 0x24
 801469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801469c:	2b00      	cmp	r3, #0
 801469e:	d1a7      	bne.n	80145f0 <udp_input+0x90>
 80146a0:	e000      	b.n	80146a4 <udp_input+0x144>
        break;
 80146a2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80146a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d101      	bne.n	80146ae <udp_input+0x14e>
    pcb = uncon_pcb;
 80146aa:	69fb      	ldr	r3, [r7, #28]
 80146ac:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80146ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d002      	beq.n	80146ba <udp_input+0x15a>
    for_us = 1;
 80146b4:	2301      	movs	r3, #1
 80146b6:	76fb      	strb	r3, [r7, #27]
 80146b8:	e00a      	b.n	80146d0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80146ba:	683b      	ldr	r3, [r7, #0]
 80146bc:	3304      	adds	r3, #4
 80146be:	681a      	ldr	r2, [r3, #0]
 80146c0:	4b2d      	ldr	r3, [pc, #180]	; (8014778 <udp_input+0x218>)
 80146c2:	695b      	ldr	r3, [r3, #20]
 80146c4:	429a      	cmp	r2, r3
 80146c6:	bf0c      	ite	eq
 80146c8:	2301      	moveq	r3, #1
 80146ca:	2300      	movne	r3, #0
 80146cc:	b2db      	uxtb	r3, r3
 80146ce:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80146d0:	7efb      	ldrb	r3, [r7, #27]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d041      	beq.n	801475a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80146d6:	2108      	movs	r1, #8
 80146d8:	6878      	ldr	r0, [r7, #4]
 80146da:	f7fa f8d5 	bl	800e888 <pbuf_remove_header>
 80146de:	4603      	mov	r3, r0
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d00a      	beq.n	80146fa <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80146e4:	4b20      	ldr	r3, [pc, #128]	; (8014768 <udp_input+0x208>)
 80146e6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80146ea:	4925      	ldr	r1, [pc, #148]	; (8014780 <udp_input+0x220>)
 80146ec:	4820      	ldr	r0, [pc, #128]	; (8014770 <udp_input+0x210>)
 80146ee:	f002 fc7d 	bl	8016fec <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80146f2:	6878      	ldr	r0, [r7, #4]
 80146f4:	f7fa f94e 	bl	800e994 <pbuf_free>
      goto end;
 80146f8:	e032      	b.n	8014760 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80146fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d012      	beq.n	8014726 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014702:	699b      	ldr	r3, [r3, #24]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d00a      	beq.n	801471e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801470a:	699c      	ldr	r4, [r3, #24]
 801470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801470e:	69d8      	ldr	r0, [r3, #28]
 8014710:	8a3b      	ldrh	r3, [r7, #16]
 8014712:	9300      	str	r3, [sp, #0]
 8014714:	4b1b      	ldr	r3, [pc, #108]	; (8014784 <udp_input+0x224>)
 8014716:	687a      	ldr	r2, [r7, #4]
 8014718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801471a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801471c:	e021      	b.n	8014762 <udp_input+0x202>
        pbuf_free(p);
 801471e:	6878      	ldr	r0, [r7, #4]
 8014720:	f7fa f938 	bl	800e994 <pbuf_free>
        goto end;
 8014724:	e01c      	b.n	8014760 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014726:	7cfb      	ldrb	r3, [r7, #19]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d112      	bne.n	8014752 <udp_input+0x1f2>
 801472c:	4b12      	ldr	r3, [pc, #72]	; (8014778 <udp_input+0x218>)
 801472e:	695b      	ldr	r3, [r3, #20]
 8014730:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014734:	2be0      	cmp	r3, #224	; 0xe0
 8014736:	d00c      	beq.n	8014752 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014738:	4b0f      	ldr	r3, [pc, #60]	; (8014778 <udp_input+0x218>)
 801473a:	899b      	ldrh	r3, [r3, #12]
 801473c:	3308      	adds	r3, #8
 801473e:	b29b      	uxth	r3, r3
 8014740:	b21b      	sxth	r3, r3
 8014742:	4619      	mov	r1, r3
 8014744:	6878      	ldr	r0, [r7, #4]
 8014746:	f7fa f912 	bl	800e96e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801474a:	2103      	movs	r1, #3
 801474c:	6878      	ldr	r0, [r7, #4]
 801474e:	f001 f89b 	bl	8015888 <icmp_dest_unreach>
      pbuf_free(p);
 8014752:	6878      	ldr	r0, [r7, #4]
 8014754:	f7fa f91e 	bl	800e994 <pbuf_free>
  return;
 8014758:	e003      	b.n	8014762 <udp_input+0x202>
    pbuf_free(p);
 801475a:	6878      	ldr	r0, [r7, #4]
 801475c:	f7fa f91a 	bl	800e994 <pbuf_free>
  return;
 8014760:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014762:	372c      	adds	r7, #44	; 0x2c
 8014764:	46bd      	mov	sp, r7
 8014766:	bd90      	pop	{r4, r7, pc}
 8014768:	0801a410 	.word	0x0801a410
 801476c:	0801a4b4 	.word	0x0801a4b4
 8014770:	0801a464 	.word	0x0801a464
 8014774:	0801a4cc 	.word	0x0801a4cc
 8014778:	2000d8cc 	.word	0x2000d8cc
 801477c:	2001107c 	.word	0x2001107c
 8014780:	0801a4e8 	.word	0x0801a4e8
 8014784:	2000d8dc 	.word	0x2000d8dc

08014788 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014788:	b480      	push	{r7}
 801478a:	b085      	sub	sp, #20
 801478c:	af00      	add	r7, sp, #0
 801478e:	6078      	str	r0, [r7, #4]
 8014790:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d01e      	beq.n	80147d6 <udp_netif_ip_addr_changed+0x4e>
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d01a      	beq.n	80147d6 <udp_netif_ip_addr_changed+0x4e>
 80147a0:	683b      	ldr	r3, [r7, #0]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d017      	beq.n	80147d6 <udp_netif_ip_addr_changed+0x4e>
 80147a6:	683b      	ldr	r3, [r7, #0]
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d013      	beq.n	80147d6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80147ae:	4b0d      	ldr	r3, [pc, #52]	; (80147e4 <udp_netif_ip_addr_changed+0x5c>)
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	60fb      	str	r3, [r7, #12]
 80147b4:	e00c      	b.n	80147d0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	681a      	ldr	r2, [r3, #0]
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	429a      	cmp	r2, r3
 80147c0:	d103      	bne.n	80147ca <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80147c2:	683b      	ldr	r3, [r7, #0]
 80147c4:	681a      	ldr	r2, [r3, #0]
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	68db      	ldr	r3, [r3, #12]
 80147ce:	60fb      	str	r3, [r7, #12]
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d1ef      	bne.n	80147b6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80147d6:	bf00      	nop
 80147d8:	3714      	adds	r7, #20
 80147da:	46bd      	mov	sp, r7
 80147dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e0:	4770      	bx	lr
 80147e2:	bf00      	nop
 80147e4:	2001107c 	.word	0x2001107c

080147e8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80147e8:	b580      	push	{r7, lr}
 80147ea:	b082      	sub	sp, #8
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80147f0:	4915      	ldr	r1, [pc, #84]	; (8014848 <etharp_free_entry+0x60>)
 80147f2:	687a      	ldr	r2, [r7, #4]
 80147f4:	4613      	mov	r3, r2
 80147f6:	005b      	lsls	r3, r3, #1
 80147f8:	4413      	add	r3, r2
 80147fa:	00db      	lsls	r3, r3, #3
 80147fc:	440b      	add	r3, r1
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d013      	beq.n	801482c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014804:	4910      	ldr	r1, [pc, #64]	; (8014848 <etharp_free_entry+0x60>)
 8014806:	687a      	ldr	r2, [r7, #4]
 8014808:	4613      	mov	r3, r2
 801480a:	005b      	lsls	r3, r3, #1
 801480c:	4413      	add	r3, r2
 801480e:	00db      	lsls	r3, r3, #3
 8014810:	440b      	add	r3, r1
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	4618      	mov	r0, r3
 8014816:	f7fa f8bd 	bl	800e994 <pbuf_free>
    arp_table[i].q = NULL;
 801481a:	490b      	ldr	r1, [pc, #44]	; (8014848 <etharp_free_entry+0x60>)
 801481c:	687a      	ldr	r2, [r7, #4]
 801481e:	4613      	mov	r3, r2
 8014820:	005b      	lsls	r3, r3, #1
 8014822:	4413      	add	r3, r2
 8014824:	00db      	lsls	r3, r3, #3
 8014826:	440b      	add	r3, r1
 8014828:	2200      	movs	r2, #0
 801482a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801482c:	4906      	ldr	r1, [pc, #24]	; (8014848 <etharp_free_entry+0x60>)
 801482e:	687a      	ldr	r2, [r7, #4]
 8014830:	4613      	mov	r3, r2
 8014832:	005b      	lsls	r3, r3, #1
 8014834:	4413      	add	r3, r2
 8014836:	00db      	lsls	r3, r3, #3
 8014838:	440b      	add	r3, r1
 801483a:	3314      	adds	r3, #20
 801483c:	2200      	movs	r2, #0
 801483e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014840:	bf00      	nop
 8014842:	3708      	adds	r7, #8
 8014844:	46bd      	mov	sp, r7
 8014846:	bd80      	pop	{r7, pc}
 8014848:	20011080 	.word	0x20011080

0801484c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801484c:	b580      	push	{r7, lr}
 801484e:	b082      	sub	sp, #8
 8014850:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014852:	2300      	movs	r3, #0
 8014854:	607b      	str	r3, [r7, #4]
 8014856:	e096      	b.n	8014986 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014858:	494f      	ldr	r1, [pc, #316]	; (8014998 <etharp_tmr+0x14c>)
 801485a:	687a      	ldr	r2, [r7, #4]
 801485c:	4613      	mov	r3, r2
 801485e:	005b      	lsls	r3, r3, #1
 8014860:	4413      	add	r3, r2
 8014862:	00db      	lsls	r3, r3, #3
 8014864:	440b      	add	r3, r1
 8014866:	3314      	adds	r3, #20
 8014868:	781b      	ldrb	r3, [r3, #0]
 801486a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801486c:	78fb      	ldrb	r3, [r7, #3]
 801486e:	2b00      	cmp	r3, #0
 8014870:	f000 8086 	beq.w	8014980 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014874:	4948      	ldr	r1, [pc, #288]	; (8014998 <etharp_tmr+0x14c>)
 8014876:	687a      	ldr	r2, [r7, #4]
 8014878:	4613      	mov	r3, r2
 801487a:	005b      	lsls	r3, r3, #1
 801487c:	4413      	add	r3, r2
 801487e:	00db      	lsls	r3, r3, #3
 8014880:	440b      	add	r3, r1
 8014882:	3312      	adds	r3, #18
 8014884:	881b      	ldrh	r3, [r3, #0]
 8014886:	3301      	adds	r3, #1
 8014888:	b298      	uxth	r0, r3
 801488a:	4943      	ldr	r1, [pc, #268]	; (8014998 <etharp_tmr+0x14c>)
 801488c:	687a      	ldr	r2, [r7, #4]
 801488e:	4613      	mov	r3, r2
 8014890:	005b      	lsls	r3, r3, #1
 8014892:	4413      	add	r3, r2
 8014894:	00db      	lsls	r3, r3, #3
 8014896:	440b      	add	r3, r1
 8014898:	3312      	adds	r3, #18
 801489a:	4602      	mov	r2, r0
 801489c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801489e:	493e      	ldr	r1, [pc, #248]	; (8014998 <etharp_tmr+0x14c>)
 80148a0:	687a      	ldr	r2, [r7, #4]
 80148a2:	4613      	mov	r3, r2
 80148a4:	005b      	lsls	r3, r3, #1
 80148a6:	4413      	add	r3, r2
 80148a8:	00db      	lsls	r3, r3, #3
 80148aa:	440b      	add	r3, r1
 80148ac:	3312      	adds	r3, #18
 80148ae:	881b      	ldrh	r3, [r3, #0]
 80148b0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80148b4:	d215      	bcs.n	80148e2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80148b6:	4938      	ldr	r1, [pc, #224]	; (8014998 <etharp_tmr+0x14c>)
 80148b8:	687a      	ldr	r2, [r7, #4]
 80148ba:	4613      	mov	r3, r2
 80148bc:	005b      	lsls	r3, r3, #1
 80148be:	4413      	add	r3, r2
 80148c0:	00db      	lsls	r3, r3, #3
 80148c2:	440b      	add	r3, r1
 80148c4:	3314      	adds	r3, #20
 80148c6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80148c8:	2b01      	cmp	r3, #1
 80148ca:	d10e      	bne.n	80148ea <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80148cc:	4932      	ldr	r1, [pc, #200]	; (8014998 <etharp_tmr+0x14c>)
 80148ce:	687a      	ldr	r2, [r7, #4]
 80148d0:	4613      	mov	r3, r2
 80148d2:	005b      	lsls	r3, r3, #1
 80148d4:	4413      	add	r3, r2
 80148d6:	00db      	lsls	r3, r3, #3
 80148d8:	440b      	add	r3, r1
 80148da:	3312      	adds	r3, #18
 80148dc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80148de:	2b04      	cmp	r3, #4
 80148e0:	d903      	bls.n	80148ea <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80148e2:	6878      	ldr	r0, [r7, #4]
 80148e4:	f7ff ff80 	bl	80147e8 <etharp_free_entry>
 80148e8:	e04a      	b.n	8014980 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80148ea:	492b      	ldr	r1, [pc, #172]	; (8014998 <etharp_tmr+0x14c>)
 80148ec:	687a      	ldr	r2, [r7, #4]
 80148ee:	4613      	mov	r3, r2
 80148f0:	005b      	lsls	r3, r3, #1
 80148f2:	4413      	add	r3, r2
 80148f4:	00db      	lsls	r3, r3, #3
 80148f6:	440b      	add	r3, r1
 80148f8:	3314      	adds	r3, #20
 80148fa:	781b      	ldrb	r3, [r3, #0]
 80148fc:	2b03      	cmp	r3, #3
 80148fe:	d10a      	bne.n	8014916 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014900:	4925      	ldr	r1, [pc, #148]	; (8014998 <etharp_tmr+0x14c>)
 8014902:	687a      	ldr	r2, [r7, #4]
 8014904:	4613      	mov	r3, r2
 8014906:	005b      	lsls	r3, r3, #1
 8014908:	4413      	add	r3, r2
 801490a:	00db      	lsls	r3, r3, #3
 801490c:	440b      	add	r3, r1
 801490e:	3314      	adds	r3, #20
 8014910:	2204      	movs	r2, #4
 8014912:	701a      	strb	r2, [r3, #0]
 8014914:	e034      	b.n	8014980 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014916:	4920      	ldr	r1, [pc, #128]	; (8014998 <etharp_tmr+0x14c>)
 8014918:	687a      	ldr	r2, [r7, #4]
 801491a:	4613      	mov	r3, r2
 801491c:	005b      	lsls	r3, r3, #1
 801491e:	4413      	add	r3, r2
 8014920:	00db      	lsls	r3, r3, #3
 8014922:	440b      	add	r3, r1
 8014924:	3314      	adds	r3, #20
 8014926:	781b      	ldrb	r3, [r3, #0]
 8014928:	2b04      	cmp	r3, #4
 801492a:	d10a      	bne.n	8014942 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801492c:	491a      	ldr	r1, [pc, #104]	; (8014998 <etharp_tmr+0x14c>)
 801492e:	687a      	ldr	r2, [r7, #4]
 8014930:	4613      	mov	r3, r2
 8014932:	005b      	lsls	r3, r3, #1
 8014934:	4413      	add	r3, r2
 8014936:	00db      	lsls	r3, r3, #3
 8014938:	440b      	add	r3, r1
 801493a:	3314      	adds	r3, #20
 801493c:	2202      	movs	r2, #2
 801493e:	701a      	strb	r2, [r3, #0]
 8014940:	e01e      	b.n	8014980 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014942:	4915      	ldr	r1, [pc, #84]	; (8014998 <etharp_tmr+0x14c>)
 8014944:	687a      	ldr	r2, [r7, #4]
 8014946:	4613      	mov	r3, r2
 8014948:	005b      	lsls	r3, r3, #1
 801494a:	4413      	add	r3, r2
 801494c:	00db      	lsls	r3, r3, #3
 801494e:	440b      	add	r3, r1
 8014950:	3314      	adds	r3, #20
 8014952:	781b      	ldrb	r3, [r3, #0]
 8014954:	2b01      	cmp	r3, #1
 8014956:	d113      	bne.n	8014980 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014958:	490f      	ldr	r1, [pc, #60]	; (8014998 <etharp_tmr+0x14c>)
 801495a:	687a      	ldr	r2, [r7, #4]
 801495c:	4613      	mov	r3, r2
 801495e:	005b      	lsls	r3, r3, #1
 8014960:	4413      	add	r3, r2
 8014962:	00db      	lsls	r3, r3, #3
 8014964:	440b      	add	r3, r1
 8014966:	3308      	adds	r3, #8
 8014968:	6818      	ldr	r0, [r3, #0]
 801496a:	687a      	ldr	r2, [r7, #4]
 801496c:	4613      	mov	r3, r2
 801496e:	005b      	lsls	r3, r3, #1
 8014970:	4413      	add	r3, r2
 8014972:	00db      	lsls	r3, r3, #3
 8014974:	4a08      	ldr	r2, [pc, #32]	; (8014998 <etharp_tmr+0x14c>)
 8014976:	4413      	add	r3, r2
 8014978:	3304      	adds	r3, #4
 801497a:	4619      	mov	r1, r3
 801497c:	f000 fe6e 	bl	801565c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	3301      	adds	r3, #1
 8014984:	607b      	str	r3, [r7, #4]
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	2b09      	cmp	r3, #9
 801498a:	f77f af65 	ble.w	8014858 <etharp_tmr+0xc>
      }
    }
  }
}
 801498e:	bf00      	nop
 8014990:	bf00      	nop
 8014992:	3708      	adds	r7, #8
 8014994:	46bd      	mov	sp, r7
 8014996:	bd80      	pop	{r7, pc}
 8014998:	20011080 	.word	0x20011080

0801499c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b08a      	sub	sp, #40	; 0x28
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	60f8      	str	r0, [r7, #12]
 80149a4:	460b      	mov	r3, r1
 80149a6:	607a      	str	r2, [r7, #4]
 80149a8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80149aa:	230a      	movs	r3, #10
 80149ac:	84fb      	strh	r3, [r7, #38]	; 0x26
 80149ae:	230a      	movs	r3, #10
 80149b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80149b2:	230a      	movs	r3, #10
 80149b4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80149b6:	2300      	movs	r3, #0
 80149b8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80149ba:	230a      	movs	r3, #10
 80149bc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80149be:	2300      	movs	r3, #0
 80149c0:	83bb      	strh	r3, [r7, #28]
 80149c2:	2300      	movs	r3, #0
 80149c4:	837b      	strh	r3, [r7, #26]
 80149c6:	2300      	movs	r3, #0
 80149c8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80149ca:	2300      	movs	r3, #0
 80149cc:	843b      	strh	r3, [r7, #32]
 80149ce:	e0ae      	b.n	8014b2e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80149d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149d4:	49a6      	ldr	r1, [pc, #664]	; (8014c70 <etharp_find_entry+0x2d4>)
 80149d6:	4613      	mov	r3, r2
 80149d8:	005b      	lsls	r3, r3, #1
 80149da:	4413      	add	r3, r2
 80149dc:	00db      	lsls	r3, r3, #3
 80149de:	440b      	add	r3, r1
 80149e0:	3314      	adds	r3, #20
 80149e2:	781b      	ldrb	r3, [r3, #0]
 80149e4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80149e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80149ea:	2b0a      	cmp	r3, #10
 80149ec:	d105      	bne.n	80149fa <etharp_find_entry+0x5e>
 80149ee:	7dfb      	ldrb	r3, [r7, #23]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d102      	bne.n	80149fa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80149f4:	8c3b      	ldrh	r3, [r7, #32]
 80149f6:	847b      	strh	r3, [r7, #34]	; 0x22
 80149f8:	e095      	b.n	8014b26 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80149fa:	7dfb      	ldrb	r3, [r7, #23]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	f000 8092 	beq.w	8014b26 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014a02:	7dfb      	ldrb	r3, [r7, #23]
 8014a04:	2b01      	cmp	r3, #1
 8014a06:	d009      	beq.n	8014a1c <etharp_find_entry+0x80>
 8014a08:	7dfb      	ldrb	r3, [r7, #23]
 8014a0a:	2b01      	cmp	r3, #1
 8014a0c:	d806      	bhi.n	8014a1c <etharp_find_entry+0x80>
 8014a0e:	4b99      	ldr	r3, [pc, #612]	; (8014c74 <etharp_find_entry+0x2d8>)
 8014a10:	f240 1223 	movw	r2, #291	; 0x123
 8014a14:	4998      	ldr	r1, [pc, #608]	; (8014c78 <etharp_find_entry+0x2dc>)
 8014a16:	4899      	ldr	r0, [pc, #612]	; (8014c7c <etharp_find_entry+0x2e0>)
 8014a18:	f002 fae8 	bl	8016fec <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d020      	beq.n	8014a64 <etharp_find_entry+0xc8>
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	6819      	ldr	r1, [r3, #0]
 8014a26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a2a:	4891      	ldr	r0, [pc, #580]	; (8014c70 <etharp_find_entry+0x2d4>)
 8014a2c:	4613      	mov	r3, r2
 8014a2e:	005b      	lsls	r3, r3, #1
 8014a30:	4413      	add	r3, r2
 8014a32:	00db      	lsls	r3, r3, #3
 8014a34:	4403      	add	r3, r0
 8014a36:	3304      	adds	r3, #4
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	4299      	cmp	r1, r3
 8014a3c:	d112      	bne.n	8014a64 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d00c      	beq.n	8014a5e <etharp_find_entry+0xc2>
 8014a44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a48:	4989      	ldr	r1, [pc, #548]	; (8014c70 <etharp_find_entry+0x2d4>)
 8014a4a:	4613      	mov	r3, r2
 8014a4c:	005b      	lsls	r3, r3, #1
 8014a4e:	4413      	add	r3, r2
 8014a50:	00db      	lsls	r3, r3, #3
 8014a52:	440b      	add	r3, r1
 8014a54:	3308      	adds	r3, #8
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	687a      	ldr	r2, [r7, #4]
 8014a5a:	429a      	cmp	r2, r3
 8014a5c:	d102      	bne.n	8014a64 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014a5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014a62:	e100      	b.n	8014c66 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014a64:	7dfb      	ldrb	r3, [r7, #23]
 8014a66:	2b01      	cmp	r3, #1
 8014a68:	d140      	bne.n	8014aec <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014a6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a6e:	4980      	ldr	r1, [pc, #512]	; (8014c70 <etharp_find_entry+0x2d4>)
 8014a70:	4613      	mov	r3, r2
 8014a72:	005b      	lsls	r3, r3, #1
 8014a74:	4413      	add	r3, r2
 8014a76:	00db      	lsls	r3, r3, #3
 8014a78:	440b      	add	r3, r1
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d01a      	beq.n	8014ab6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014a80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a84:	497a      	ldr	r1, [pc, #488]	; (8014c70 <etharp_find_entry+0x2d4>)
 8014a86:	4613      	mov	r3, r2
 8014a88:	005b      	lsls	r3, r3, #1
 8014a8a:	4413      	add	r3, r2
 8014a8c:	00db      	lsls	r3, r3, #3
 8014a8e:	440b      	add	r3, r1
 8014a90:	3312      	adds	r3, #18
 8014a92:	881b      	ldrh	r3, [r3, #0]
 8014a94:	8bba      	ldrh	r2, [r7, #28]
 8014a96:	429a      	cmp	r2, r3
 8014a98:	d845      	bhi.n	8014b26 <etharp_find_entry+0x18a>
            old_queue = i;
 8014a9a:	8c3b      	ldrh	r3, [r7, #32]
 8014a9c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014a9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014aa2:	4973      	ldr	r1, [pc, #460]	; (8014c70 <etharp_find_entry+0x2d4>)
 8014aa4:	4613      	mov	r3, r2
 8014aa6:	005b      	lsls	r3, r3, #1
 8014aa8:	4413      	add	r3, r2
 8014aaa:	00db      	lsls	r3, r3, #3
 8014aac:	440b      	add	r3, r1
 8014aae:	3312      	adds	r3, #18
 8014ab0:	881b      	ldrh	r3, [r3, #0]
 8014ab2:	83bb      	strh	r3, [r7, #28]
 8014ab4:	e037      	b.n	8014b26 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014ab6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014aba:	496d      	ldr	r1, [pc, #436]	; (8014c70 <etharp_find_entry+0x2d4>)
 8014abc:	4613      	mov	r3, r2
 8014abe:	005b      	lsls	r3, r3, #1
 8014ac0:	4413      	add	r3, r2
 8014ac2:	00db      	lsls	r3, r3, #3
 8014ac4:	440b      	add	r3, r1
 8014ac6:	3312      	adds	r3, #18
 8014ac8:	881b      	ldrh	r3, [r3, #0]
 8014aca:	8b7a      	ldrh	r2, [r7, #26]
 8014acc:	429a      	cmp	r2, r3
 8014ace:	d82a      	bhi.n	8014b26 <etharp_find_entry+0x18a>
            old_pending = i;
 8014ad0:	8c3b      	ldrh	r3, [r7, #32]
 8014ad2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014ad4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ad8:	4965      	ldr	r1, [pc, #404]	; (8014c70 <etharp_find_entry+0x2d4>)
 8014ada:	4613      	mov	r3, r2
 8014adc:	005b      	lsls	r3, r3, #1
 8014ade:	4413      	add	r3, r2
 8014ae0:	00db      	lsls	r3, r3, #3
 8014ae2:	440b      	add	r3, r1
 8014ae4:	3312      	adds	r3, #18
 8014ae6:	881b      	ldrh	r3, [r3, #0]
 8014ae8:	837b      	strh	r3, [r7, #26]
 8014aea:	e01c      	b.n	8014b26 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014aec:	7dfb      	ldrb	r3, [r7, #23]
 8014aee:	2b01      	cmp	r3, #1
 8014af0:	d919      	bls.n	8014b26 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014af2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014af6:	495e      	ldr	r1, [pc, #376]	; (8014c70 <etharp_find_entry+0x2d4>)
 8014af8:	4613      	mov	r3, r2
 8014afa:	005b      	lsls	r3, r3, #1
 8014afc:	4413      	add	r3, r2
 8014afe:	00db      	lsls	r3, r3, #3
 8014b00:	440b      	add	r3, r1
 8014b02:	3312      	adds	r3, #18
 8014b04:	881b      	ldrh	r3, [r3, #0]
 8014b06:	8b3a      	ldrh	r2, [r7, #24]
 8014b08:	429a      	cmp	r2, r3
 8014b0a:	d80c      	bhi.n	8014b26 <etharp_find_entry+0x18a>
            old_stable = i;
 8014b0c:	8c3b      	ldrh	r3, [r7, #32]
 8014b0e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014b10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b14:	4956      	ldr	r1, [pc, #344]	; (8014c70 <etharp_find_entry+0x2d4>)
 8014b16:	4613      	mov	r3, r2
 8014b18:	005b      	lsls	r3, r3, #1
 8014b1a:	4413      	add	r3, r2
 8014b1c:	00db      	lsls	r3, r3, #3
 8014b1e:	440b      	add	r3, r1
 8014b20:	3312      	adds	r3, #18
 8014b22:	881b      	ldrh	r3, [r3, #0]
 8014b24:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014b26:	8c3b      	ldrh	r3, [r7, #32]
 8014b28:	3301      	adds	r3, #1
 8014b2a:	b29b      	uxth	r3, r3
 8014b2c:	843b      	strh	r3, [r7, #32]
 8014b2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014b32:	2b09      	cmp	r3, #9
 8014b34:	f77f af4c 	ble.w	80149d0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014b38:	7afb      	ldrb	r3, [r7, #11]
 8014b3a:	f003 0302 	and.w	r3, r3, #2
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d108      	bne.n	8014b54 <etharp_find_entry+0x1b8>
 8014b42:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014b46:	2b0a      	cmp	r3, #10
 8014b48:	d107      	bne.n	8014b5a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014b4a:	7afb      	ldrb	r3, [r7, #11]
 8014b4c:	f003 0301 	and.w	r3, r3, #1
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d102      	bne.n	8014b5a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014b54:	f04f 33ff 	mov.w	r3, #4294967295
 8014b58:	e085      	b.n	8014c66 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014b5a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014b5e:	2b09      	cmp	r3, #9
 8014b60:	dc02      	bgt.n	8014b68 <etharp_find_entry+0x1cc>
    i = empty;
 8014b62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b64:	843b      	strh	r3, [r7, #32]
 8014b66:	e039      	b.n	8014bdc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014b68:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014b6c:	2b09      	cmp	r3, #9
 8014b6e:	dc14      	bgt.n	8014b9a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014b70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b72:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014b74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b78:	493d      	ldr	r1, [pc, #244]	; (8014c70 <etharp_find_entry+0x2d4>)
 8014b7a:	4613      	mov	r3, r2
 8014b7c:	005b      	lsls	r3, r3, #1
 8014b7e:	4413      	add	r3, r2
 8014b80:	00db      	lsls	r3, r3, #3
 8014b82:	440b      	add	r3, r1
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d018      	beq.n	8014bbc <etharp_find_entry+0x220>
 8014b8a:	4b3a      	ldr	r3, [pc, #232]	; (8014c74 <etharp_find_entry+0x2d8>)
 8014b8c:	f240 126d 	movw	r2, #365	; 0x16d
 8014b90:	493b      	ldr	r1, [pc, #236]	; (8014c80 <etharp_find_entry+0x2e4>)
 8014b92:	483a      	ldr	r0, [pc, #232]	; (8014c7c <etharp_find_entry+0x2e0>)
 8014b94:	f002 fa2a 	bl	8016fec <iprintf>
 8014b98:	e010      	b.n	8014bbc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014b9a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014b9e:	2b09      	cmp	r3, #9
 8014ba0:	dc02      	bgt.n	8014ba8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014ba2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014ba4:	843b      	strh	r3, [r7, #32]
 8014ba6:	e009      	b.n	8014bbc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014ba8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014bac:	2b09      	cmp	r3, #9
 8014bae:	dc02      	bgt.n	8014bb6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014bb0:	8bfb      	ldrh	r3, [r7, #30]
 8014bb2:	843b      	strh	r3, [r7, #32]
 8014bb4:	e002      	b.n	8014bbc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8014bba:	e054      	b.n	8014c66 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014bbc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014bc0:	2b09      	cmp	r3, #9
 8014bc2:	dd06      	ble.n	8014bd2 <etharp_find_entry+0x236>
 8014bc4:	4b2b      	ldr	r3, [pc, #172]	; (8014c74 <etharp_find_entry+0x2d8>)
 8014bc6:	f240 127f 	movw	r2, #383	; 0x17f
 8014bca:	492e      	ldr	r1, [pc, #184]	; (8014c84 <etharp_find_entry+0x2e8>)
 8014bcc:	482b      	ldr	r0, [pc, #172]	; (8014c7c <etharp_find_entry+0x2e0>)
 8014bce:	f002 fa0d 	bl	8016fec <iprintf>
    etharp_free_entry(i);
 8014bd2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	f7ff fe06 	bl	80147e8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014bdc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014be0:	2b09      	cmp	r3, #9
 8014be2:	dd06      	ble.n	8014bf2 <etharp_find_entry+0x256>
 8014be4:	4b23      	ldr	r3, [pc, #140]	; (8014c74 <etharp_find_entry+0x2d8>)
 8014be6:	f240 1283 	movw	r2, #387	; 0x183
 8014bea:	4926      	ldr	r1, [pc, #152]	; (8014c84 <etharp_find_entry+0x2e8>)
 8014bec:	4823      	ldr	r0, [pc, #140]	; (8014c7c <etharp_find_entry+0x2e0>)
 8014bee:	f002 f9fd 	bl	8016fec <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014bf2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014bf6:	491e      	ldr	r1, [pc, #120]	; (8014c70 <etharp_find_entry+0x2d4>)
 8014bf8:	4613      	mov	r3, r2
 8014bfa:	005b      	lsls	r3, r3, #1
 8014bfc:	4413      	add	r3, r2
 8014bfe:	00db      	lsls	r3, r3, #3
 8014c00:	440b      	add	r3, r1
 8014c02:	3314      	adds	r3, #20
 8014c04:	781b      	ldrb	r3, [r3, #0]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d006      	beq.n	8014c18 <etharp_find_entry+0x27c>
 8014c0a:	4b1a      	ldr	r3, [pc, #104]	; (8014c74 <etharp_find_entry+0x2d8>)
 8014c0c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014c10:	491d      	ldr	r1, [pc, #116]	; (8014c88 <etharp_find_entry+0x2ec>)
 8014c12:	481a      	ldr	r0, [pc, #104]	; (8014c7c <etharp_find_entry+0x2e0>)
 8014c14:	f002 f9ea 	bl	8016fec <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d00b      	beq.n	8014c36 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014c1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	6819      	ldr	r1, [r3, #0]
 8014c26:	4812      	ldr	r0, [pc, #72]	; (8014c70 <etharp_find_entry+0x2d4>)
 8014c28:	4613      	mov	r3, r2
 8014c2a:	005b      	lsls	r3, r3, #1
 8014c2c:	4413      	add	r3, r2
 8014c2e:	00db      	lsls	r3, r3, #3
 8014c30:	4403      	add	r3, r0
 8014c32:	3304      	adds	r3, #4
 8014c34:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014c36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c3a:	490d      	ldr	r1, [pc, #52]	; (8014c70 <etharp_find_entry+0x2d4>)
 8014c3c:	4613      	mov	r3, r2
 8014c3e:	005b      	lsls	r3, r3, #1
 8014c40:	4413      	add	r3, r2
 8014c42:	00db      	lsls	r3, r3, #3
 8014c44:	440b      	add	r3, r1
 8014c46:	3312      	adds	r3, #18
 8014c48:	2200      	movs	r2, #0
 8014c4a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014c4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c50:	4907      	ldr	r1, [pc, #28]	; (8014c70 <etharp_find_entry+0x2d4>)
 8014c52:	4613      	mov	r3, r2
 8014c54:	005b      	lsls	r3, r3, #1
 8014c56:	4413      	add	r3, r2
 8014c58:	00db      	lsls	r3, r3, #3
 8014c5a:	440b      	add	r3, r1
 8014c5c:	3308      	adds	r3, #8
 8014c5e:	687a      	ldr	r2, [r7, #4]
 8014c60:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014c62:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014c66:	4618      	mov	r0, r3
 8014c68:	3728      	adds	r7, #40	; 0x28
 8014c6a:	46bd      	mov	sp, r7
 8014c6c:	bd80      	pop	{r7, pc}
 8014c6e:	bf00      	nop
 8014c70:	20011080 	.word	0x20011080
 8014c74:	0801a774 	.word	0x0801a774
 8014c78:	0801a7ac 	.word	0x0801a7ac
 8014c7c:	0801a7ec 	.word	0x0801a7ec
 8014c80:	0801a814 	.word	0x0801a814
 8014c84:	0801a82c 	.word	0x0801a82c
 8014c88:	0801a840 	.word	0x0801a840

08014c8c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014c8c:	b580      	push	{r7, lr}
 8014c8e:	b088      	sub	sp, #32
 8014c90:	af02      	add	r7, sp, #8
 8014c92:	60f8      	str	r0, [r7, #12]
 8014c94:	60b9      	str	r1, [r7, #8]
 8014c96:	607a      	str	r2, [r7, #4]
 8014c98:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014ca0:	2b06      	cmp	r3, #6
 8014ca2:	d006      	beq.n	8014cb2 <etharp_update_arp_entry+0x26>
 8014ca4:	4b48      	ldr	r3, [pc, #288]	; (8014dc8 <etharp_update_arp_entry+0x13c>)
 8014ca6:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014caa:	4948      	ldr	r1, [pc, #288]	; (8014dcc <etharp_update_arp_entry+0x140>)
 8014cac:	4848      	ldr	r0, [pc, #288]	; (8014dd0 <etharp_update_arp_entry+0x144>)
 8014cae:	f002 f99d 	bl	8016fec <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014cb2:	68bb      	ldr	r3, [r7, #8]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d012      	beq.n	8014cde <etharp_update_arp_entry+0x52>
 8014cb8:	68bb      	ldr	r3, [r7, #8]
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d00e      	beq.n	8014cde <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014cc0:	68bb      	ldr	r3, [r7, #8]
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	68f9      	ldr	r1, [r7, #12]
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	f001 f8fe 	bl	8015ec8 <ip4_addr_isbroadcast_u32>
 8014ccc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d105      	bne.n	8014cde <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014cd2:	68bb      	ldr	r3, [r7, #8]
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014cda:	2be0      	cmp	r3, #224	; 0xe0
 8014cdc:	d102      	bne.n	8014ce4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014cde:	f06f 030f 	mvn.w	r3, #15
 8014ce2:	e06c      	b.n	8014dbe <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014ce4:	78fb      	ldrb	r3, [r7, #3]
 8014ce6:	68fa      	ldr	r2, [r7, #12]
 8014ce8:	4619      	mov	r1, r3
 8014cea:	68b8      	ldr	r0, [r7, #8]
 8014cec:	f7ff fe56 	bl	801499c <etharp_find_entry>
 8014cf0:	4603      	mov	r3, r0
 8014cf2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014cf4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	da02      	bge.n	8014d02 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014cfc:	8afb      	ldrh	r3, [r7, #22]
 8014cfe:	b25b      	sxtb	r3, r3
 8014d00:	e05d      	b.n	8014dbe <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014d02:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014d06:	4933      	ldr	r1, [pc, #204]	; (8014dd4 <etharp_update_arp_entry+0x148>)
 8014d08:	4613      	mov	r3, r2
 8014d0a:	005b      	lsls	r3, r3, #1
 8014d0c:	4413      	add	r3, r2
 8014d0e:	00db      	lsls	r3, r3, #3
 8014d10:	440b      	add	r3, r1
 8014d12:	3314      	adds	r3, #20
 8014d14:	2202      	movs	r2, #2
 8014d16:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014d18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014d1c:	492d      	ldr	r1, [pc, #180]	; (8014dd4 <etharp_update_arp_entry+0x148>)
 8014d1e:	4613      	mov	r3, r2
 8014d20:	005b      	lsls	r3, r3, #1
 8014d22:	4413      	add	r3, r2
 8014d24:	00db      	lsls	r3, r3, #3
 8014d26:	440b      	add	r3, r1
 8014d28:	3308      	adds	r3, #8
 8014d2a:	68fa      	ldr	r2, [r7, #12]
 8014d2c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014d2e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014d32:	4613      	mov	r3, r2
 8014d34:	005b      	lsls	r3, r3, #1
 8014d36:	4413      	add	r3, r2
 8014d38:	00db      	lsls	r3, r3, #3
 8014d3a:	3308      	adds	r3, #8
 8014d3c:	4a25      	ldr	r2, [pc, #148]	; (8014dd4 <etharp_update_arp_entry+0x148>)
 8014d3e:	4413      	add	r3, r2
 8014d40:	3304      	adds	r3, #4
 8014d42:	2206      	movs	r2, #6
 8014d44:	6879      	ldr	r1, [r7, #4]
 8014d46:	4618      	mov	r0, r3
 8014d48:	f002 f93a 	bl	8016fc0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014d4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014d50:	4920      	ldr	r1, [pc, #128]	; (8014dd4 <etharp_update_arp_entry+0x148>)
 8014d52:	4613      	mov	r3, r2
 8014d54:	005b      	lsls	r3, r3, #1
 8014d56:	4413      	add	r3, r2
 8014d58:	00db      	lsls	r3, r3, #3
 8014d5a:	440b      	add	r3, r1
 8014d5c:	3312      	adds	r3, #18
 8014d5e:	2200      	movs	r2, #0
 8014d60:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014d62:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014d66:	491b      	ldr	r1, [pc, #108]	; (8014dd4 <etharp_update_arp_entry+0x148>)
 8014d68:	4613      	mov	r3, r2
 8014d6a:	005b      	lsls	r3, r3, #1
 8014d6c:	4413      	add	r3, r2
 8014d6e:	00db      	lsls	r3, r3, #3
 8014d70:	440b      	add	r3, r1
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d021      	beq.n	8014dbc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014d78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014d7c:	4915      	ldr	r1, [pc, #84]	; (8014dd4 <etharp_update_arp_entry+0x148>)
 8014d7e:	4613      	mov	r3, r2
 8014d80:	005b      	lsls	r3, r3, #1
 8014d82:	4413      	add	r3, r2
 8014d84:	00db      	lsls	r3, r3, #3
 8014d86:	440b      	add	r3, r1
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014d8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014d90:	4910      	ldr	r1, [pc, #64]	; (8014dd4 <etharp_update_arp_entry+0x148>)
 8014d92:	4613      	mov	r3, r2
 8014d94:	005b      	lsls	r3, r3, #1
 8014d96:	4413      	add	r3, r2
 8014d98:	00db      	lsls	r3, r3, #3
 8014d9a:	440b      	add	r3, r1
 8014d9c:	2200      	movs	r2, #0
 8014d9e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014da6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014daa:	9300      	str	r3, [sp, #0]
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	6939      	ldr	r1, [r7, #16]
 8014db0:	68f8      	ldr	r0, [r7, #12]
 8014db2:	f001 ff97 	bl	8016ce4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014db6:	6938      	ldr	r0, [r7, #16]
 8014db8:	f7f9 fdec 	bl	800e994 <pbuf_free>
  }
  return ERR_OK;
 8014dbc:	2300      	movs	r3, #0
}
 8014dbe:	4618      	mov	r0, r3
 8014dc0:	3718      	adds	r7, #24
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	bd80      	pop	{r7, pc}
 8014dc6:	bf00      	nop
 8014dc8:	0801a774 	.word	0x0801a774
 8014dcc:	0801a86c 	.word	0x0801a86c
 8014dd0:	0801a7ec 	.word	0x0801a7ec
 8014dd4:	20011080 	.word	0x20011080

08014dd8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b084      	sub	sp, #16
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014de0:	2300      	movs	r3, #0
 8014de2:	60fb      	str	r3, [r7, #12]
 8014de4:	e01e      	b.n	8014e24 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014de6:	4913      	ldr	r1, [pc, #76]	; (8014e34 <etharp_cleanup_netif+0x5c>)
 8014de8:	68fa      	ldr	r2, [r7, #12]
 8014dea:	4613      	mov	r3, r2
 8014dec:	005b      	lsls	r3, r3, #1
 8014dee:	4413      	add	r3, r2
 8014df0:	00db      	lsls	r3, r3, #3
 8014df2:	440b      	add	r3, r1
 8014df4:	3314      	adds	r3, #20
 8014df6:	781b      	ldrb	r3, [r3, #0]
 8014df8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014dfa:	7afb      	ldrb	r3, [r7, #11]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d00e      	beq.n	8014e1e <etharp_cleanup_netif+0x46>
 8014e00:	490c      	ldr	r1, [pc, #48]	; (8014e34 <etharp_cleanup_netif+0x5c>)
 8014e02:	68fa      	ldr	r2, [r7, #12]
 8014e04:	4613      	mov	r3, r2
 8014e06:	005b      	lsls	r3, r3, #1
 8014e08:	4413      	add	r3, r2
 8014e0a:	00db      	lsls	r3, r3, #3
 8014e0c:	440b      	add	r3, r1
 8014e0e:	3308      	adds	r3, #8
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	687a      	ldr	r2, [r7, #4]
 8014e14:	429a      	cmp	r2, r3
 8014e16:	d102      	bne.n	8014e1e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014e18:	68f8      	ldr	r0, [r7, #12]
 8014e1a:	f7ff fce5 	bl	80147e8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	3301      	adds	r3, #1
 8014e22:	60fb      	str	r3, [r7, #12]
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	2b09      	cmp	r3, #9
 8014e28:	dddd      	ble.n	8014de6 <etharp_cleanup_netif+0xe>
    }
  }
}
 8014e2a:	bf00      	nop
 8014e2c:	bf00      	nop
 8014e2e:	3710      	adds	r7, #16
 8014e30:	46bd      	mov	sp, r7
 8014e32:	bd80      	pop	{r7, pc}
 8014e34:	20011080 	.word	0x20011080

08014e38 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014e38:	b5b0      	push	{r4, r5, r7, lr}
 8014e3a:	b08a      	sub	sp, #40	; 0x28
 8014e3c:	af04      	add	r7, sp, #16
 8014e3e:	6078      	str	r0, [r7, #4]
 8014e40:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014e42:	683b      	ldr	r3, [r7, #0]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d107      	bne.n	8014e58 <etharp_input+0x20>
 8014e48:	4b3d      	ldr	r3, [pc, #244]	; (8014f40 <etharp_input+0x108>)
 8014e4a:	f240 228a 	movw	r2, #650	; 0x28a
 8014e4e:	493d      	ldr	r1, [pc, #244]	; (8014f44 <etharp_input+0x10c>)
 8014e50:	483d      	ldr	r0, [pc, #244]	; (8014f48 <etharp_input+0x110>)
 8014e52:	f002 f8cb 	bl	8016fec <iprintf>
 8014e56:	e06f      	b.n	8014f38 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	685b      	ldr	r3, [r3, #4]
 8014e5c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014e5e:	693b      	ldr	r3, [r7, #16]
 8014e60:	881b      	ldrh	r3, [r3, #0]
 8014e62:	b29b      	uxth	r3, r3
 8014e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014e68:	d10c      	bne.n	8014e84 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014e6a:	693b      	ldr	r3, [r7, #16]
 8014e6c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014e6e:	2b06      	cmp	r3, #6
 8014e70:	d108      	bne.n	8014e84 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014e72:	693b      	ldr	r3, [r7, #16]
 8014e74:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014e76:	2b04      	cmp	r3, #4
 8014e78:	d104      	bne.n	8014e84 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014e7a:	693b      	ldr	r3, [r7, #16]
 8014e7c:	885b      	ldrh	r3, [r3, #2]
 8014e7e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014e80:	2b08      	cmp	r3, #8
 8014e82:	d003      	beq.n	8014e8c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014e84:	6878      	ldr	r0, [r7, #4]
 8014e86:	f7f9 fd85 	bl	800e994 <pbuf_free>
    return;
 8014e8a:	e055      	b.n	8014f38 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014e8c:	693b      	ldr	r3, [r7, #16]
 8014e8e:	330e      	adds	r3, #14
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014e94:	693b      	ldr	r3, [r7, #16]
 8014e96:	3318      	adds	r3, #24
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014e9c:	683b      	ldr	r3, [r7, #0]
 8014e9e:	3304      	adds	r3, #4
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d102      	bne.n	8014eac <etharp_input+0x74>
    for_us = 0;
 8014ea6:	2300      	movs	r3, #0
 8014ea8:	75fb      	strb	r3, [r7, #23]
 8014eaa:	e009      	b.n	8014ec0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014eac:	68ba      	ldr	r2, [r7, #8]
 8014eae:	683b      	ldr	r3, [r7, #0]
 8014eb0:	3304      	adds	r3, #4
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	429a      	cmp	r2, r3
 8014eb6:	bf0c      	ite	eq
 8014eb8:	2301      	moveq	r3, #1
 8014eba:	2300      	movne	r3, #0
 8014ebc:	b2db      	uxtb	r3, r3
 8014ebe:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014ec0:	693b      	ldr	r3, [r7, #16]
 8014ec2:	f103 0208 	add.w	r2, r3, #8
 8014ec6:	7dfb      	ldrb	r3, [r7, #23]
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d001      	beq.n	8014ed0 <etharp_input+0x98>
 8014ecc:	2301      	movs	r3, #1
 8014ece:	e000      	b.n	8014ed2 <etharp_input+0x9a>
 8014ed0:	2302      	movs	r3, #2
 8014ed2:	f107 010c 	add.w	r1, r7, #12
 8014ed6:	6838      	ldr	r0, [r7, #0]
 8014ed8:	f7ff fed8 	bl	8014c8c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014edc:	693b      	ldr	r3, [r7, #16]
 8014ede:	88db      	ldrh	r3, [r3, #6]
 8014ee0:	b29b      	uxth	r3, r3
 8014ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014ee6:	d003      	beq.n	8014ef0 <etharp_input+0xb8>
 8014ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014eec:	d01e      	beq.n	8014f2c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014eee:	e020      	b.n	8014f32 <etharp_input+0xfa>
      if (for_us) {
 8014ef0:	7dfb      	ldrb	r3, [r7, #23]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d01c      	beq.n	8014f30 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014ef6:	683b      	ldr	r3, [r7, #0]
 8014ef8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014efc:	693b      	ldr	r3, [r7, #16]
 8014efe:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014f02:	683b      	ldr	r3, [r7, #0]
 8014f04:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8014f08:	683b      	ldr	r3, [r7, #0]
 8014f0a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014f0c:	693a      	ldr	r2, [r7, #16]
 8014f0e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014f10:	2102      	movs	r1, #2
 8014f12:	9103      	str	r1, [sp, #12]
 8014f14:	f107 010c 	add.w	r1, r7, #12
 8014f18:	9102      	str	r1, [sp, #8]
 8014f1a:	9201      	str	r2, [sp, #4]
 8014f1c:	9300      	str	r3, [sp, #0]
 8014f1e:	462b      	mov	r3, r5
 8014f20:	4622      	mov	r2, r4
 8014f22:	4601      	mov	r1, r0
 8014f24:	6838      	ldr	r0, [r7, #0]
 8014f26:	f000 faeb 	bl	8015500 <etharp_raw>
      break;
 8014f2a:	e001      	b.n	8014f30 <etharp_input+0xf8>
      break;
 8014f2c:	bf00      	nop
 8014f2e:	e000      	b.n	8014f32 <etharp_input+0xfa>
      break;
 8014f30:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014f32:	6878      	ldr	r0, [r7, #4]
 8014f34:	f7f9 fd2e 	bl	800e994 <pbuf_free>
}
 8014f38:	3718      	adds	r7, #24
 8014f3a:	46bd      	mov	sp, r7
 8014f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8014f3e:	bf00      	nop
 8014f40:	0801a774 	.word	0x0801a774
 8014f44:	0801a8c4 	.word	0x0801a8c4
 8014f48:	0801a7ec 	.word	0x0801a7ec

08014f4c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b086      	sub	sp, #24
 8014f50:	af02      	add	r7, sp, #8
 8014f52:	60f8      	str	r0, [r7, #12]
 8014f54:	60b9      	str	r1, [r7, #8]
 8014f56:	4613      	mov	r3, r2
 8014f58:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014f5a:	79fa      	ldrb	r2, [r7, #7]
 8014f5c:	4944      	ldr	r1, [pc, #272]	; (8015070 <etharp_output_to_arp_index+0x124>)
 8014f5e:	4613      	mov	r3, r2
 8014f60:	005b      	lsls	r3, r3, #1
 8014f62:	4413      	add	r3, r2
 8014f64:	00db      	lsls	r3, r3, #3
 8014f66:	440b      	add	r3, r1
 8014f68:	3314      	adds	r3, #20
 8014f6a:	781b      	ldrb	r3, [r3, #0]
 8014f6c:	2b01      	cmp	r3, #1
 8014f6e:	d806      	bhi.n	8014f7e <etharp_output_to_arp_index+0x32>
 8014f70:	4b40      	ldr	r3, [pc, #256]	; (8015074 <etharp_output_to_arp_index+0x128>)
 8014f72:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014f76:	4940      	ldr	r1, [pc, #256]	; (8015078 <etharp_output_to_arp_index+0x12c>)
 8014f78:	4840      	ldr	r0, [pc, #256]	; (801507c <etharp_output_to_arp_index+0x130>)
 8014f7a:	f002 f837 	bl	8016fec <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014f7e:	79fa      	ldrb	r2, [r7, #7]
 8014f80:	493b      	ldr	r1, [pc, #236]	; (8015070 <etharp_output_to_arp_index+0x124>)
 8014f82:	4613      	mov	r3, r2
 8014f84:	005b      	lsls	r3, r3, #1
 8014f86:	4413      	add	r3, r2
 8014f88:	00db      	lsls	r3, r3, #3
 8014f8a:	440b      	add	r3, r1
 8014f8c:	3314      	adds	r3, #20
 8014f8e:	781b      	ldrb	r3, [r3, #0]
 8014f90:	2b02      	cmp	r3, #2
 8014f92:	d153      	bne.n	801503c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014f94:	79fa      	ldrb	r2, [r7, #7]
 8014f96:	4936      	ldr	r1, [pc, #216]	; (8015070 <etharp_output_to_arp_index+0x124>)
 8014f98:	4613      	mov	r3, r2
 8014f9a:	005b      	lsls	r3, r3, #1
 8014f9c:	4413      	add	r3, r2
 8014f9e:	00db      	lsls	r3, r3, #3
 8014fa0:	440b      	add	r3, r1
 8014fa2:	3312      	adds	r3, #18
 8014fa4:	881b      	ldrh	r3, [r3, #0]
 8014fa6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014faa:	d919      	bls.n	8014fe0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014fac:	79fa      	ldrb	r2, [r7, #7]
 8014fae:	4613      	mov	r3, r2
 8014fb0:	005b      	lsls	r3, r3, #1
 8014fb2:	4413      	add	r3, r2
 8014fb4:	00db      	lsls	r3, r3, #3
 8014fb6:	4a2e      	ldr	r2, [pc, #184]	; (8015070 <etharp_output_to_arp_index+0x124>)
 8014fb8:	4413      	add	r3, r2
 8014fba:	3304      	adds	r3, #4
 8014fbc:	4619      	mov	r1, r3
 8014fbe:	68f8      	ldr	r0, [r7, #12]
 8014fc0:	f000 fb4c 	bl	801565c <etharp_request>
 8014fc4:	4603      	mov	r3, r0
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d138      	bne.n	801503c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014fca:	79fa      	ldrb	r2, [r7, #7]
 8014fcc:	4928      	ldr	r1, [pc, #160]	; (8015070 <etharp_output_to_arp_index+0x124>)
 8014fce:	4613      	mov	r3, r2
 8014fd0:	005b      	lsls	r3, r3, #1
 8014fd2:	4413      	add	r3, r2
 8014fd4:	00db      	lsls	r3, r3, #3
 8014fd6:	440b      	add	r3, r1
 8014fd8:	3314      	adds	r3, #20
 8014fda:	2203      	movs	r2, #3
 8014fdc:	701a      	strb	r2, [r3, #0]
 8014fde:	e02d      	b.n	801503c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014fe0:	79fa      	ldrb	r2, [r7, #7]
 8014fe2:	4923      	ldr	r1, [pc, #140]	; (8015070 <etharp_output_to_arp_index+0x124>)
 8014fe4:	4613      	mov	r3, r2
 8014fe6:	005b      	lsls	r3, r3, #1
 8014fe8:	4413      	add	r3, r2
 8014fea:	00db      	lsls	r3, r3, #3
 8014fec:	440b      	add	r3, r1
 8014fee:	3312      	adds	r3, #18
 8014ff0:	881b      	ldrh	r3, [r3, #0]
 8014ff2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014ff6:	d321      	bcc.n	801503c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014ff8:	79fa      	ldrb	r2, [r7, #7]
 8014ffa:	4613      	mov	r3, r2
 8014ffc:	005b      	lsls	r3, r3, #1
 8014ffe:	4413      	add	r3, r2
 8015000:	00db      	lsls	r3, r3, #3
 8015002:	4a1b      	ldr	r2, [pc, #108]	; (8015070 <etharp_output_to_arp_index+0x124>)
 8015004:	4413      	add	r3, r2
 8015006:	1d19      	adds	r1, r3, #4
 8015008:	79fa      	ldrb	r2, [r7, #7]
 801500a:	4613      	mov	r3, r2
 801500c:	005b      	lsls	r3, r3, #1
 801500e:	4413      	add	r3, r2
 8015010:	00db      	lsls	r3, r3, #3
 8015012:	3308      	adds	r3, #8
 8015014:	4a16      	ldr	r2, [pc, #88]	; (8015070 <etharp_output_to_arp_index+0x124>)
 8015016:	4413      	add	r3, r2
 8015018:	3304      	adds	r3, #4
 801501a:	461a      	mov	r2, r3
 801501c:	68f8      	ldr	r0, [r7, #12]
 801501e:	f000 fafb 	bl	8015618 <etharp_request_dst>
 8015022:	4603      	mov	r3, r0
 8015024:	2b00      	cmp	r3, #0
 8015026:	d109      	bne.n	801503c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015028:	79fa      	ldrb	r2, [r7, #7]
 801502a:	4911      	ldr	r1, [pc, #68]	; (8015070 <etharp_output_to_arp_index+0x124>)
 801502c:	4613      	mov	r3, r2
 801502e:	005b      	lsls	r3, r3, #1
 8015030:	4413      	add	r3, r2
 8015032:	00db      	lsls	r3, r3, #3
 8015034:	440b      	add	r3, r1
 8015036:	3314      	adds	r3, #20
 8015038:	2203      	movs	r2, #3
 801503a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8015042:	79fa      	ldrb	r2, [r7, #7]
 8015044:	4613      	mov	r3, r2
 8015046:	005b      	lsls	r3, r3, #1
 8015048:	4413      	add	r3, r2
 801504a:	00db      	lsls	r3, r3, #3
 801504c:	3308      	adds	r3, #8
 801504e:	4a08      	ldr	r2, [pc, #32]	; (8015070 <etharp_output_to_arp_index+0x124>)
 8015050:	4413      	add	r3, r2
 8015052:	3304      	adds	r3, #4
 8015054:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015058:	9200      	str	r2, [sp, #0]
 801505a:	460a      	mov	r2, r1
 801505c:	68b9      	ldr	r1, [r7, #8]
 801505e:	68f8      	ldr	r0, [r7, #12]
 8015060:	f001 fe40 	bl	8016ce4 <ethernet_output>
 8015064:	4603      	mov	r3, r0
}
 8015066:	4618      	mov	r0, r3
 8015068:	3710      	adds	r7, #16
 801506a:	46bd      	mov	sp, r7
 801506c:	bd80      	pop	{r7, pc}
 801506e:	bf00      	nop
 8015070:	20011080 	.word	0x20011080
 8015074:	0801a774 	.word	0x0801a774
 8015078:	0801a8e4 	.word	0x0801a8e4
 801507c:	0801a7ec 	.word	0x0801a7ec

08015080 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015080:	b580      	push	{r7, lr}
 8015082:	b08a      	sub	sp, #40	; 0x28
 8015084:	af02      	add	r7, sp, #8
 8015086:	60f8      	str	r0, [r7, #12]
 8015088:	60b9      	str	r1, [r7, #8]
 801508a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d106      	bne.n	80150a4 <etharp_output+0x24>
 8015096:	4b73      	ldr	r3, [pc, #460]	; (8015264 <etharp_output+0x1e4>)
 8015098:	f240 321e 	movw	r2, #798	; 0x31e
 801509c:	4972      	ldr	r1, [pc, #456]	; (8015268 <etharp_output+0x1e8>)
 801509e:	4873      	ldr	r0, [pc, #460]	; (801526c <etharp_output+0x1ec>)
 80150a0:	f001 ffa4 	bl	8016fec <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80150a4:	68bb      	ldr	r3, [r7, #8]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d106      	bne.n	80150b8 <etharp_output+0x38>
 80150aa:	4b6e      	ldr	r3, [pc, #440]	; (8015264 <etharp_output+0x1e4>)
 80150ac:	f240 321f 	movw	r2, #799	; 0x31f
 80150b0:	496f      	ldr	r1, [pc, #444]	; (8015270 <etharp_output+0x1f0>)
 80150b2:	486e      	ldr	r0, [pc, #440]	; (801526c <etharp_output+0x1ec>)
 80150b4:	f001 ff9a 	bl	8016fec <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d106      	bne.n	80150cc <etharp_output+0x4c>
 80150be:	4b69      	ldr	r3, [pc, #420]	; (8015264 <etharp_output+0x1e4>)
 80150c0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80150c4:	496b      	ldr	r1, [pc, #428]	; (8015274 <etharp_output+0x1f4>)
 80150c6:	4869      	ldr	r0, [pc, #420]	; (801526c <etharp_output+0x1ec>)
 80150c8:	f001 ff90 	bl	8016fec <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	68f9      	ldr	r1, [r7, #12]
 80150d2:	4618      	mov	r0, r3
 80150d4:	f000 fef8 	bl	8015ec8 <ip4_addr_isbroadcast_u32>
 80150d8:	4603      	mov	r3, r0
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d002      	beq.n	80150e4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80150de:	4b66      	ldr	r3, [pc, #408]	; (8015278 <etharp_output+0x1f8>)
 80150e0:	61fb      	str	r3, [r7, #28]
 80150e2:	e0af      	b.n	8015244 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80150ec:	2be0      	cmp	r3, #224	; 0xe0
 80150ee:	d118      	bne.n	8015122 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80150f0:	2301      	movs	r3, #1
 80150f2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80150f4:	2300      	movs	r3, #0
 80150f6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80150f8:	235e      	movs	r3, #94	; 0x5e
 80150fa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	3301      	adds	r3, #1
 8015100:	781b      	ldrb	r3, [r3, #0]
 8015102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015106:	b2db      	uxtb	r3, r3
 8015108:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	3302      	adds	r3, #2
 801510e:	781b      	ldrb	r3, [r3, #0]
 8015110:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	3303      	adds	r3, #3
 8015116:	781b      	ldrb	r3, [r3, #0]
 8015118:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801511a:	f107 0310 	add.w	r3, r7, #16
 801511e:	61fb      	str	r3, [r7, #28]
 8015120:	e090      	b.n	8015244 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	681a      	ldr	r2, [r3, #0]
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	3304      	adds	r3, #4
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	405a      	eors	r2, r3
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	3308      	adds	r3, #8
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	4013      	ands	r3, r2
 8015136:	2b00      	cmp	r3, #0
 8015138:	d012      	beq.n	8015160 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015140:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015144:	4293      	cmp	r3, r2
 8015146:	d00b      	beq.n	8015160 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	330c      	adds	r3, #12
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	2b00      	cmp	r3, #0
 8015150:	d003      	beq.n	801515a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	330c      	adds	r3, #12
 8015156:	61bb      	str	r3, [r7, #24]
 8015158:	e002      	b.n	8015160 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801515a:	f06f 0303 	mvn.w	r3, #3
 801515e:	e07d      	b.n	801525c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015160:	4b46      	ldr	r3, [pc, #280]	; (801527c <etharp_output+0x1fc>)
 8015162:	781b      	ldrb	r3, [r3, #0]
 8015164:	4619      	mov	r1, r3
 8015166:	4a46      	ldr	r2, [pc, #280]	; (8015280 <etharp_output+0x200>)
 8015168:	460b      	mov	r3, r1
 801516a:	005b      	lsls	r3, r3, #1
 801516c:	440b      	add	r3, r1
 801516e:	00db      	lsls	r3, r3, #3
 8015170:	4413      	add	r3, r2
 8015172:	3314      	adds	r3, #20
 8015174:	781b      	ldrb	r3, [r3, #0]
 8015176:	2b01      	cmp	r3, #1
 8015178:	d925      	bls.n	80151c6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801517a:	4b40      	ldr	r3, [pc, #256]	; (801527c <etharp_output+0x1fc>)
 801517c:	781b      	ldrb	r3, [r3, #0]
 801517e:	4619      	mov	r1, r3
 8015180:	4a3f      	ldr	r2, [pc, #252]	; (8015280 <etharp_output+0x200>)
 8015182:	460b      	mov	r3, r1
 8015184:	005b      	lsls	r3, r3, #1
 8015186:	440b      	add	r3, r1
 8015188:	00db      	lsls	r3, r3, #3
 801518a:	4413      	add	r3, r2
 801518c:	3308      	adds	r3, #8
 801518e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015190:	68fa      	ldr	r2, [r7, #12]
 8015192:	429a      	cmp	r2, r3
 8015194:	d117      	bne.n	80151c6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015196:	69bb      	ldr	r3, [r7, #24]
 8015198:	681a      	ldr	r2, [r3, #0]
 801519a:	4b38      	ldr	r3, [pc, #224]	; (801527c <etharp_output+0x1fc>)
 801519c:	781b      	ldrb	r3, [r3, #0]
 801519e:	4618      	mov	r0, r3
 80151a0:	4937      	ldr	r1, [pc, #220]	; (8015280 <etharp_output+0x200>)
 80151a2:	4603      	mov	r3, r0
 80151a4:	005b      	lsls	r3, r3, #1
 80151a6:	4403      	add	r3, r0
 80151a8:	00db      	lsls	r3, r3, #3
 80151aa:	440b      	add	r3, r1
 80151ac:	3304      	adds	r3, #4
 80151ae:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80151b0:	429a      	cmp	r2, r3
 80151b2:	d108      	bne.n	80151c6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80151b4:	4b31      	ldr	r3, [pc, #196]	; (801527c <etharp_output+0x1fc>)
 80151b6:	781b      	ldrb	r3, [r3, #0]
 80151b8:	461a      	mov	r2, r3
 80151ba:	68b9      	ldr	r1, [r7, #8]
 80151bc:	68f8      	ldr	r0, [r7, #12]
 80151be:	f7ff fec5 	bl	8014f4c <etharp_output_to_arp_index>
 80151c2:	4603      	mov	r3, r0
 80151c4:	e04a      	b.n	801525c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80151c6:	2300      	movs	r3, #0
 80151c8:	75fb      	strb	r3, [r7, #23]
 80151ca:	e031      	b.n	8015230 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80151cc:	7dfa      	ldrb	r2, [r7, #23]
 80151ce:	492c      	ldr	r1, [pc, #176]	; (8015280 <etharp_output+0x200>)
 80151d0:	4613      	mov	r3, r2
 80151d2:	005b      	lsls	r3, r3, #1
 80151d4:	4413      	add	r3, r2
 80151d6:	00db      	lsls	r3, r3, #3
 80151d8:	440b      	add	r3, r1
 80151da:	3314      	adds	r3, #20
 80151dc:	781b      	ldrb	r3, [r3, #0]
 80151de:	2b01      	cmp	r3, #1
 80151e0:	d923      	bls.n	801522a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80151e2:	7dfa      	ldrb	r2, [r7, #23]
 80151e4:	4926      	ldr	r1, [pc, #152]	; (8015280 <etharp_output+0x200>)
 80151e6:	4613      	mov	r3, r2
 80151e8:	005b      	lsls	r3, r3, #1
 80151ea:	4413      	add	r3, r2
 80151ec:	00db      	lsls	r3, r3, #3
 80151ee:	440b      	add	r3, r1
 80151f0:	3308      	adds	r3, #8
 80151f2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80151f4:	68fa      	ldr	r2, [r7, #12]
 80151f6:	429a      	cmp	r2, r3
 80151f8:	d117      	bne.n	801522a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80151fa:	69bb      	ldr	r3, [r7, #24]
 80151fc:	6819      	ldr	r1, [r3, #0]
 80151fe:	7dfa      	ldrb	r2, [r7, #23]
 8015200:	481f      	ldr	r0, [pc, #124]	; (8015280 <etharp_output+0x200>)
 8015202:	4613      	mov	r3, r2
 8015204:	005b      	lsls	r3, r3, #1
 8015206:	4413      	add	r3, r2
 8015208:	00db      	lsls	r3, r3, #3
 801520a:	4403      	add	r3, r0
 801520c:	3304      	adds	r3, #4
 801520e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015210:	4299      	cmp	r1, r3
 8015212:	d10a      	bne.n	801522a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015214:	4a19      	ldr	r2, [pc, #100]	; (801527c <etharp_output+0x1fc>)
 8015216:	7dfb      	ldrb	r3, [r7, #23]
 8015218:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801521a:	7dfb      	ldrb	r3, [r7, #23]
 801521c:	461a      	mov	r2, r3
 801521e:	68b9      	ldr	r1, [r7, #8]
 8015220:	68f8      	ldr	r0, [r7, #12]
 8015222:	f7ff fe93 	bl	8014f4c <etharp_output_to_arp_index>
 8015226:	4603      	mov	r3, r0
 8015228:	e018      	b.n	801525c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801522a:	7dfb      	ldrb	r3, [r7, #23]
 801522c:	3301      	adds	r3, #1
 801522e:	75fb      	strb	r3, [r7, #23]
 8015230:	7dfb      	ldrb	r3, [r7, #23]
 8015232:	2b09      	cmp	r3, #9
 8015234:	d9ca      	bls.n	80151cc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015236:	68ba      	ldr	r2, [r7, #8]
 8015238:	69b9      	ldr	r1, [r7, #24]
 801523a:	68f8      	ldr	r0, [r7, #12]
 801523c:	f000 f822 	bl	8015284 <etharp_query>
 8015240:	4603      	mov	r3, r0
 8015242:	e00b      	b.n	801525c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801524a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801524e:	9300      	str	r3, [sp, #0]
 8015250:	69fb      	ldr	r3, [r7, #28]
 8015252:	68b9      	ldr	r1, [r7, #8]
 8015254:	68f8      	ldr	r0, [r7, #12]
 8015256:	f001 fd45 	bl	8016ce4 <ethernet_output>
 801525a:	4603      	mov	r3, r0
}
 801525c:	4618      	mov	r0, r3
 801525e:	3720      	adds	r7, #32
 8015260:	46bd      	mov	sp, r7
 8015262:	bd80      	pop	{r7, pc}
 8015264:	0801a774 	.word	0x0801a774
 8015268:	0801a8c4 	.word	0x0801a8c4
 801526c:	0801a7ec 	.word	0x0801a7ec
 8015270:	0801a914 	.word	0x0801a914
 8015274:	0801a8b4 	.word	0x0801a8b4
 8015278:	0801afe4 	.word	0x0801afe4
 801527c:	20011170 	.word	0x20011170
 8015280:	20011080 	.word	0x20011080

08015284 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015284:	b580      	push	{r7, lr}
 8015286:	b08c      	sub	sp, #48	; 0x30
 8015288:	af02      	add	r7, sp, #8
 801528a:	60f8      	str	r0, [r7, #12]
 801528c:	60b9      	str	r1, [r7, #8]
 801528e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	3326      	adds	r3, #38	; 0x26
 8015294:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015296:	23ff      	movs	r3, #255	; 0xff
 8015298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801529c:	2300      	movs	r3, #0
 801529e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80152a0:	68bb      	ldr	r3, [r7, #8]
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	68f9      	ldr	r1, [r7, #12]
 80152a6:	4618      	mov	r0, r3
 80152a8:	f000 fe0e 	bl	8015ec8 <ip4_addr_isbroadcast_u32>
 80152ac:	4603      	mov	r3, r0
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d10c      	bne.n	80152cc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80152b2:	68bb      	ldr	r3, [r7, #8]
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80152ba:	2be0      	cmp	r3, #224	; 0xe0
 80152bc:	d006      	beq.n	80152cc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80152be:	68bb      	ldr	r3, [r7, #8]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d003      	beq.n	80152cc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80152c4:	68bb      	ldr	r3, [r7, #8]
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d102      	bne.n	80152d2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80152cc:	f06f 030f 	mvn.w	r3, #15
 80152d0:	e101      	b.n	80154d6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80152d2:	68fa      	ldr	r2, [r7, #12]
 80152d4:	2101      	movs	r1, #1
 80152d6:	68b8      	ldr	r0, [r7, #8]
 80152d8:	f7ff fb60 	bl	801499c <etharp_find_entry>
 80152dc:	4603      	mov	r3, r0
 80152de:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80152e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	da02      	bge.n	80152ee <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80152e8:	8a7b      	ldrh	r3, [r7, #18]
 80152ea:	b25b      	sxtb	r3, r3
 80152ec:	e0f3      	b.n	80154d6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80152ee:	8a7b      	ldrh	r3, [r7, #18]
 80152f0:	2b7e      	cmp	r3, #126	; 0x7e
 80152f2:	d906      	bls.n	8015302 <etharp_query+0x7e>
 80152f4:	4b7a      	ldr	r3, [pc, #488]	; (80154e0 <etharp_query+0x25c>)
 80152f6:	f240 32c1 	movw	r2, #961	; 0x3c1
 80152fa:	497a      	ldr	r1, [pc, #488]	; (80154e4 <etharp_query+0x260>)
 80152fc:	487a      	ldr	r0, [pc, #488]	; (80154e8 <etharp_query+0x264>)
 80152fe:	f001 fe75 	bl	8016fec <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015302:	8a7b      	ldrh	r3, [r7, #18]
 8015304:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015306:	7c7a      	ldrb	r2, [r7, #17]
 8015308:	4978      	ldr	r1, [pc, #480]	; (80154ec <etharp_query+0x268>)
 801530a:	4613      	mov	r3, r2
 801530c:	005b      	lsls	r3, r3, #1
 801530e:	4413      	add	r3, r2
 8015310:	00db      	lsls	r3, r3, #3
 8015312:	440b      	add	r3, r1
 8015314:	3314      	adds	r3, #20
 8015316:	781b      	ldrb	r3, [r3, #0]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d115      	bne.n	8015348 <etharp_query+0xc4>
    is_new_entry = 1;
 801531c:	2301      	movs	r3, #1
 801531e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015320:	7c7a      	ldrb	r2, [r7, #17]
 8015322:	4972      	ldr	r1, [pc, #456]	; (80154ec <etharp_query+0x268>)
 8015324:	4613      	mov	r3, r2
 8015326:	005b      	lsls	r3, r3, #1
 8015328:	4413      	add	r3, r2
 801532a:	00db      	lsls	r3, r3, #3
 801532c:	440b      	add	r3, r1
 801532e:	3314      	adds	r3, #20
 8015330:	2201      	movs	r2, #1
 8015332:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015334:	7c7a      	ldrb	r2, [r7, #17]
 8015336:	496d      	ldr	r1, [pc, #436]	; (80154ec <etharp_query+0x268>)
 8015338:	4613      	mov	r3, r2
 801533a:	005b      	lsls	r3, r3, #1
 801533c:	4413      	add	r3, r2
 801533e:	00db      	lsls	r3, r3, #3
 8015340:	440b      	add	r3, r1
 8015342:	3308      	adds	r3, #8
 8015344:	68fa      	ldr	r2, [r7, #12]
 8015346:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015348:	7c7a      	ldrb	r2, [r7, #17]
 801534a:	4968      	ldr	r1, [pc, #416]	; (80154ec <etharp_query+0x268>)
 801534c:	4613      	mov	r3, r2
 801534e:	005b      	lsls	r3, r3, #1
 8015350:	4413      	add	r3, r2
 8015352:	00db      	lsls	r3, r3, #3
 8015354:	440b      	add	r3, r1
 8015356:	3314      	adds	r3, #20
 8015358:	781b      	ldrb	r3, [r3, #0]
 801535a:	2b01      	cmp	r3, #1
 801535c:	d011      	beq.n	8015382 <etharp_query+0xfe>
 801535e:	7c7a      	ldrb	r2, [r7, #17]
 8015360:	4962      	ldr	r1, [pc, #392]	; (80154ec <etharp_query+0x268>)
 8015362:	4613      	mov	r3, r2
 8015364:	005b      	lsls	r3, r3, #1
 8015366:	4413      	add	r3, r2
 8015368:	00db      	lsls	r3, r3, #3
 801536a:	440b      	add	r3, r1
 801536c:	3314      	adds	r3, #20
 801536e:	781b      	ldrb	r3, [r3, #0]
 8015370:	2b01      	cmp	r3, #1
 8015372:	d806      	bhi.n	8015382 <etharp_query+0xfe>
 8015374:	4b5a      	ldr	r3, [pc, #360]	; (80154e0 <etharp_query+0x25c>)
 8015376:	f240 32cd 	movw	r2, #973	; 0x3cd
 801537a:	495d      	ldr	r1, [pc, #372]	; (80154f0 <etharp_query+0x26c>)
 801537c:	485a      	ldr	r0, [pc, #360]	; (80154e8 <etharp_query+0x264>)
 801537e:	f001 fe35 	bl	8016fec <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015382:	6a3b      	ldr	r3, [r7, #32]
 8015384:	2b00      	cmp	r3, #0
 8015386:	d102      	bne.n	801538e <etharp_query+0x10a>
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	2b00      	cmp	r3, #0
 801538c:	d10c      	bne.n	80153a8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801538e:	68b9      	ldr	r1, [r7, #8]
 8015390:	68f8      	ldr	r0, [r7, #12]
 8015392:	f000 f963 	bl	801565c <etharp_request>
 8015396:	4603      	mov	r3, r0
 8015398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d102      	bne.n	80153a8 <etharp_query+0x124>
      return result;
 80153a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80153a6:	e096      	b.n	80154d6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d106      	bne.n	80153bc <etharp_query+0x138>
 80153ae:	4b4c      	ldr	r3, [pc, #304]	; (80154e0 <etharp_query+0x25c>)
 80153b0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80153b4:	494f      	ldr	r1, [pc, #316]	; (80154f4 <etharp_query+0x270>)
 80153b6:	484c      	ldr	r0, [pc, #304]	; (80154e8 <etharp_query+0x264>)
 80153b8:	f001 fe18 	bl	8016fec <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80153bc:	7c7a      	ldrb	r2, [r7, #17]
 80153be:	494b      	ldr	r1, [pc, #300]	; (80154ec <etharp_query+0x268>)
 80153c0:	4613      	mov	r3, r2
 80153c2:	005b      	lsls	r3, r3, #1
 80153c4:	4413      	add	r3, r2
 80153c6:	00db      	lsls	r3, r3, #3
 80153c8:	440b      	add	r3, r1
 80153ca:	3314      	adds	r3, #20
 80153cc:	781b      	ldrb	r3, [r3, #0]
 80153ce:	2b01      	cmp	r3, #1
 80153d0:	d917      	bls.n	8015402 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80153d2:	4a49      	ldr	r2, [pc, #292]	; (80154f8 <etharp_query+0x274>)
 80153d4:	7c7b      	ldrb	r3, [r7, #17]
 80153d6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80153d8:	7c7a      	ldrb	r2, [r7, #17]
 80153da:	4613      	mov	r3, r2
 80153dc:	005b      	lsls	r3, r3, #1
 80153de:	4413      	add	r3, r2
 80153e0:	00db      	lsls	r3, r3, #3
 80153e2:	3308      	adds	r3, #8
 80153e4:	4a41      	ldr	r2, [pc, #260]	; (80154ec <etharp_query+0x268>)
 80153e6:	4413      	add	r3, r2
 80153e8:	3304      	adds	r3, #4
 80153ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80153ee:	9200      	str	r2, [sp, #0]
 80153f0:	697a      	ldr	r2, [r7, #20]
 80153f2:	6879      	ldr	r1, [r7, #4]
 80153f4:	68f8      	ldr	r0, [r7, #12]
 80153f6:	f001 fc75 	bl	8016ce4 <ethernet_output>
 80153fa:	4603      	mov	r3, r0
 80153fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015400:	e067      	b.n	80154d2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015402:	7c7a      	ldrb	r2, [r7, #17]
 8015404:	4939      	ldr	r1, [pc, #228]	; (80154ec <etharp_query+0x268>)
 8015406:	4613      	mov	r3, r2
 8015408:	005b      	lsls	r3, r3, #1
 801540a:	4413      	add	r3, r2
 801540c:	00db      	lsls	r3, r3, #3
 801540e:	440b      	add	r3, r1
 8015410:	3314      	adds	r3, #20
 8015412:	781b      	ldrb	r3, [r3, #0]
 8015414:	2b01      	cmp	r3, #1
 8015416:	d15c      	bne.n	80154d2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015418:	2300      	movs	r3, #0
 801541a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015420:	e01c      	b.n	801545c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015422:	69fb      	ldr	r3, [r7, #28]
 8015424:	895a      	ldrh	r2, [r3, #10]
 8015426:	69fb      	ldr	r3, [r7, #28]
 8015428:	891b      	ldrh	r3, [r3, #8]
 801542a:	429a      	cmp	r2, r3
 801542c:	d10a      	bne.n	8015444 <etharp_query+0x1c0>
 801542e:	69fb      	ldr	r3, [r7, #28]
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	2b00      	cmp	r3, #0
 8015434:	d006      	beq.n	8015444 <etharp_query+0x1c0>
 8015436:	4b2a      	ldr	r3, [pc, #168]	; (80154e0 <etharp_query+0x25c>)
 8015438:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801543c:	492f      	ldr	r1, [pc, #188]	; (80154fc <etharp_query+0x278>)
 801543e:	482a      	ldr	r0, [pc, #168]	; (80154e8 <etharp_query+0x264>)
 8015440:	f001 fdd4 	bl	8016fec <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015444:	69fb      	ldr	r3, [r7, #28]
 8015446:	7b1b      	ldrb	r3, [r3, #12]
 8015448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801544c:	2b00      	cmp	r3, #0
 801544e:	d002      	beq.n	8015456 <etharp_query+0x1d2>
        copy_needed = 1;
 8015450:	2301      	movs	r3, #1
 8015452:	61bb      	str	r3, [r7, #24]
        break;
 8015454:	e005      	b.n	8015462 <etharp_query+0x1de>
      }
      p = p->next;
 8015456:	69fb      	ldr	r3, [r7, #28]
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801545c:	69fb      	ldr	r3, [r7, #28]
 801545e:	2b00      	cmp	r3, #0
 8015460:	d1df      	bne.n	8015422 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015462:	69bb      	ldr	r3, [r7, #24]
 8015464:	2b00      	cmp	r3, #0
 8015466:	d007      	beq.n	8015478 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015468:	687a      	ldr	r2, [r7, #4]
 801546a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801546e:	200e      	movs	r0, #14
 8015470:	f7f9 fcf8 	bl	800ee64 <pbuf_clone>
 8015474:	61f8      	str	r0, [r7, #28]
 8015476:	e004      	b.n	8015482 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801547c:	69f8      	ldr	r0, [r7, #28]
 801547e:	f7f9 fb2f 	bl	800eae0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015482:	69fb      	ldr	r3, [r7, #28]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d021      	beq.n	80154cc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015488:	7c7a      	ldrb	r2, [r7, #17]
 801548a:	4918      	ldr	r1, [pc, #96]	; (80154ec <etharp_query+0x268>)
 801548c:	4613      	mov	r3, r2
 801548e:	005b      	lsls	r3, r3, #1
 8015490:	4413      	add	r3, r2
 8015492:	00db      	lsls	r3, r3, #3
 8015494:	440b      	add	r3, r1
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d00a      	beq.n	80154b2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801549c:	7c7a      	ldrb	r2, [r7, #17]
 801549e:	4913      	ldr	r1, [pc, #76]	; (80154ec <etharp_query+0x268>)
 80154a0:	4613      	mov	r3, r2
 80154a2:	005b      	lsls	r3, r3, #1
 80154a4:	4413      	add	r3, r2
 80154a6:	00db      	lsls	r3, r3, #3
 80154a8:	440b      	add	r3, r1
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	4618      	mov	r0, r3
 80154ae:	f7f9 fa71 	bl	800e994 <pbuf_free>
      }
      arp_table[i].q = p;
 80154b2:	7c7a      	ldrb	r2, [r7, #17]
 80154b4:	490d      	ldr	r1, [pc, #52]	; (80154ec <etharp_query+0x268>)
 80154b6:	4613      	mov	r3, r2
 80154b8:	005b      	lsls	r3, r3, #1
 80154ba:	4413      	add	r3, r2
 80154bc:	00db      	lsls	r3, r3, #3
 80154be:	440b      	add	r3, r1
 80154c0:	69fa      	ldr	r2, [r7, #28]
 80154c2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80154c4:	2300      	movs	r3, #0
 80154c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80154ca:	e002      	b.n	80154d2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80154cc:	23ff      	movs	r3, #255	; 0xff
 80154ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80154d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80154d6:	4618      	mov	r0, r3
 80154d8:	3728      	adds	r7, #40	; 0x28
 80154da:	46bd      	mov	sp, r7
 80154dc:	bd80      	pop	{r7, pc}
 80154de:	bf00      	nop
 80154e0:	0801a774 	.word	0x0801a774
 80154e4:	0801a920 	.word	0x0801a920
 80154e8:	0801a7ec 	.word	0x0801a7ec
 80154ec:	20011080 	.word	0x20011080
 80154f0:	0801a930 	.word	0x0801a930
 80154f4:	0801a914 	.word	0x0801a914
 80154f8:	20011170 	.word	0x20011170
 80154fc:	0801a958 	.word	0x0801a958

08015500 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015500:	b580      	push	{r7, lr}
 8015502:	b08a      	sub	sp, #40	; 0x28
 8015504:	af02      	add	r7, sp, #8
 8015506:	60f8      	str	r0, [r7, #12]
 8015508:	60b9      	str	r1, [r7, #8]
 801550a:	607a      	str	r2, [r7, #4]
 801550c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801550e:	2300      	movs	r3, #0
 8015510:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d106      	bne.n	8015526 <etharp_raw+0x26>
 8015518:	4b3a      	ldr	r3, [pc, #232]	; (8015604 <etharp_raw+0x104>)
 801551a:	f240 4257 	movw	r2, #1111	; 0x457
 801551e:	493a      	ldr	r1, [pc, #232]	; (8015608 <etharp_raw+0x108>)
 8015520:	483a      	ldr	r0, [pc, #232]	; (801560c <etharp_raw+0x10c>)
 8015522:	f001 fd63 	bl	8016fec <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015526:	f44f 7220 	mov.w	r2, #640	; 0x280
 801552a:	211c      	movs	r1, #28
 801552c:	200e      	movs	r0, #14
 801552e:	f7f8 ff4d 	bl	800e3cc <pbuf_alloc>
 8015532:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015534:	69bb      	ldr	r3, [r7, #24]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d102      	bne.n	8015540 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801553a:	f04f 33ff 	mov.w	r3, #4294967295
 801553e:	e05d      	b.n	80155fc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015540:	69bb      	ldr	r3, [r7, #24]
 8015542:	895b      	ldrh	r3, [r3, #10]
 8015544:	2b1b      	cmp	r3, #27
 8015546:	d806      	bhi.n	8015556 <etharp_raw+0x56>
 8015548:	4b2e      	ldr	r3, [pc, #184]	; (8015604 <etharp_raw+0x104>)
 801554a:	f240 4262 	movw	r2, #1122	; 0x462
 801554e:	4930      	ldr	r1, [pc, #192]	; (8015610 <etharp_raw+0x110>)
 8015550:	482e      	ldr	r0, [pc, #184]	; (801560c <etharp_raw+0x10c>)
 8015552:	f001 fd4b 	bl	8016fec <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015556:	69bb      	ldr	r3, [r7, #24]
 8015558:	685b      	ldr	r3, [r3, #4]
 801555a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801555c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801555e:	4618      	mov	r0, r3
 8015560:	f7f7 fe26 	bl	800d1b0 <lwip_htons>
 8015564:	4603      	mov	r3, r0
 8015566:	461a      	mov	r2, r3
 8015568:	697b      	ldr	r3, [r7, #20]
 801556a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015572:	2b06      	cmp	r3, #6
 8015574:	d006      	beq.n	8015584 <etharp_raw+0x84>
 8015576:	4b23      	ldr	r3, [pc, #140]	; (8015604 <etharp_raw+0x104>)
 8015578:	f240 4269 	movw	r2, #1129	; 0x469
 801557c:	4925      	ldr	r1, [pc, #148]	; (8015614 <etharp_raw+0x114>)
 801557e:	4823      	ldr	r0, [pc, #140]	; (801560c <etharp_raw+0x10c>)
 8015580:	f001 fd34 	bl	8016fec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015584:	697b      	ldr	r3, [r7, #20]
 8015586:	3308      	adds	r3, #8
 8015588:	2206      	movs	r2, #6
 801558a:	6839      	ldr	r1, [r7, #0]
 801558c:	4618      	mov	r0, r3
 801558e:	f001 fd17 	bl	8016fc0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015592:	697b      	ldr	r3, [r7, #20]
 8015594:	3312      	adds	r3, #18
 8015596:	2206      	movs	r2, #6
 8015598:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801559a:	4618      	mov	r0, r3
 801559c:	f001 fd10 	bl	8016fc0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80155a0:	697b      	ldr	r3, [r7, #20]
 80155a2:	330e      	adds	r3, #14
 80155a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80155a6:	6812      	ldr	r2, [r2, #0]
 80155a8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80155aa:	697b      	ldr	r3, [r7, #20]
 80155ac:	3318      	adds	r3, #24
 80155ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80155b0:	6812      	ldr	r2, [r2, #0]
 80155b2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80155b4:	697b      	ldr	r3, [r7, #20]
 80155b6:	2200      	movs	r2, #0
 80155b8:	701a      	strb	r2, [r3, #0]
 80155ba:	2200      	movs	r2, #0
 80155bc:	f042 0201 	orr.w	r2, r2, #1
 80155c0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80155c2:	697b      	ldr	r3, [r7, #20]
 80155c4:	2200      	movs	r2, #0
 80155c6:	f042 0208 	orr.w	r2, r2, #8
 80155ca:	709a      	strb	r2, [r3, #2]
 80155cc:	2200      	movs	r2, #0
 80155ce:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80155d0:	697b      	ldr	r3, [r7, #20]
 80155d2:	2206      	movs	r2, #6
 80155d4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80155d6:	697b      	ldr	r3, [r7, #20]
 80155d8:	2204      	movs	r2, #4
 80155da:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80155dc:	f640 0306 	movw	r3, #2054	; 0x806
 80155e0:	9300      	str	r3, [sp, #0]
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	68ba      	ldr	r2, [r7, #8]
 80155e6:	69b9      	ldr	r1, [r7, #24]
 80155e8:	68f8      	ldr	r0, [r7, #12]
 80155ea:	f001 fb7b 	bl	8016ce4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80155ee:	69b8      	ldr	r0, [r7, #24]
 80155f0:	f7f9 f9d0 	bl	800e994 <pbuf_free>
  p = NULL;
 80155f4:	2300      	movs	r3, #0
 80155f6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80155f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80155fc:	4618      	mov	r0, r3
 80155fe:	3720      	adds	r7, #32
 8015600:	46bd      	mov	sp, r7
 8015602:	bd80      	pop	{r7, pc}
 8015604:	0801a774 	.word	0x0801a774
 8015608:	0801a8c4 	.word	0x0801a8c4
 801560c:	0801a7ec 	.word	0x0801a7ec
 8015610:	0801a974 	.word	0x0801a974
 8015614:	0801a9a8 	.word	0x0801a9a8

08015618 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015618:	b580      	push	{r7, lr}
 801561a:	b088      	sub	sp, #32
 801561c:	af04      	add	r7, sp, #16
 801561e:	60f8      	str	r0, [r7, #12]
 8015620:	60b9      	str	r1, [r7, #8]
 8015622:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015624:	68fb      	ldr	r3, [r7, #12]
 8015626:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015634:	2201      	movs	r2, #1
 8015636:	9203      	str	r2, [sp, #12]
 8015638:	68ba      	ldr	r2, [r7, #8]
 801563a:	9202      	str	r2, [sp, #8]
 801563c:	4a06      	ldr	r2, [pc, #24]	; (8015658 <etharp_request_dst+0x40>)
 801563e:	9201      	str	r2, [sp, #4]
 8015640:	9300      	str	r3, [sp, #0]
 8015642:	4603      	mov	r3, r0
 8015644:	687a      	ldr	r2, [r7, #4]
 8015646:	68f8      	ldr	r0, [r7, #12]
 8015648:	f7ff ff5a 	bl	8015500 <etharp_raw>
 801564c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801564e:	4618      	mov	r0, r3
 8015650:	3710      	adds	r7, #16
 8015652:	46bd      	mov	sp, r7
 8015654:	bd80      	pop	{r7, pc}
 8015656:	bf00      	nop
 8015658:	0801afec 	.word	0x0801afec

0801565c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801565c:	b580      	push	{r7, lr}
 801565e:	b082      	sub	sp, #8
 8015660:	af00      	add	r7, sp, #0
 8015662:	6078      	str	r0, [r7, #4]
 8015664:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015666:	4a05      	ldr	r2, [pc, #20]	; (801567c <etharp_request+0x20>)
 8015668:	6839      	ldr	r1, [r7, #0]
 801566a:	6878      	ldr	r0, [r7, #4]
 801566c:	f7ff ffd4 	bl	8015618 <etharp_request_dst>
 8015670:	4603      	mov	r3, r0
}
 8015672:	4618      	mov	r0, r3
 8015674:	3708      	adds	r7, #8
 8015676:	46bd      	mov	sp, r7
 8015678:	bd80      	pop	{r7, pc}
 801567a:	bf00      	nop
 801567c:	0801afe4 	.word	0x0801afe4

08015680 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015680:	b580      	push	{r7, lr}
 8015682:	b08e      	sub	sp, #56	; 0x38
 8015684:	af04      	add	r7, sp, #16
 8015686:	6078      	str	r0, [r7, #4]
 8015688:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801568a:	4b79      	ldr	r3, [pc, #484]	; (8015870 <icmp_input+0x1f0>)
 801568c:	689b      	ldr	r3, [r3, #8]
 801568e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015692:	781b      	ldrb	r3, [r3, #0]
 8015694:	f003 030f 	and.w	r3, r3, #15
 8015698:	b2db      	uxtb	r3, r3
 801569a:	009b      	lsls	r3, r3, #2
 801569c:	b2db      	uxtb	r3, r3
 801569e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80156a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80156a2:	2b13      	cmp	r3, #19
 80156a4:	f240 80cd 	bls.w	8015842 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	895b      	ldrh	r3, [r3, #10]
 80156ac:	2b03      	cmp	r3, #3
 80156ae:	f240 80ca 	bls.w	8015846 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	685b      	ldr	r3, [r3, #4]
 80156b6:	781b      	ldrb	r3, [r3, #0]
 80156b8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80156bc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	f000 80b7 	beq.w	8015834 <icmp_input+0x1b4>
 80156c6:	2b08      	cmp	r3, #8
 80156c8:	f040 80b7 	bne.w	801583a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80156cc:	4b69      	ldr	r3, [pc, #420]	; (8015874 <icmp_input+0x1f4>)
 80156ce:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80156d0:	4b67      	ldr	r3, [pc, #412]	; (8015870 <icmp_input+0x1f0>)
 80156d2:	695b      	ldr	r3, [r3, #20]
 80156d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80156d8:	2be0      	cmp	r3, #224	; 0xe0
 80156da:	f000 80bb 	beq.w	8015854 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80156de:	4b64      	ldr	r3, [pc, #400]	; (8015870 <icmp_input+0x1f0>)
 80156e0:	695b      	ldr	r3, [r3, #20]
 80156e2:	4a63      	ldr	r2, [pc, #396]	; (8015870 <icmp_input+0x1f0>)
 80156e4:	6812      	ldr	r2, [r2, #0]
 80156e6:	4611      	mov	r1, r2
 80156e8:	4618      	mov	r0, r3
 80156ea:	f000 fbed 	bl	8015ec8 <ip4_addr_isbroadcast_u32>
 80156ee:	4603      	mov	r3, r0
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	f040 80b1 	bne.w	8015858 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	891b      	ldrh	r3, [r3, #8]
 80156fa:	2b07      	cmp	r3, #7
 80156fc:	f240 80a5 	bls.w	801584a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015700:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015702:	330e      	adds	r3, #14
 8015704:	4619      	mov	r1, r3
 8015706:	6878      	ldr	r0, [r7, #4]
 8015708:	f7f9 f8ae 	bl	800e868 <pbuf_add_header>
 801570c:	4603      	mov	r3, r0
 801570e:	2b00      	cmp	r3, #0
 8015710:	d04b      	beq.n	80157aa <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	891a      	ldrh	r2, [r3, #8]
 8015716:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015718:	4413      	add	r3, r2
 801571a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	891b      	ldrh	r3, [r3, #8]
 8015720:	8b7a      	ldrh	r2, [r7, #26]
 8015722:	429a      	cmp	r2, r3
 8015724:	f0c0 809a 	bcc.w	801585c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015728:	8b7b      	ldrh	r3, [r7, #26]
 801572a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801572e:	4619      	mov	r1, r3
 8015730:	200e      	movs	r0, #14
 8015732:	f7f8 fe4b 	bl	800e3cc <pbuf_alloc>
 8015736:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015738:	697b      	ldr	r3, [r7, #20]
 801573a:	2b00      	cmp	r3, #0
 801573c:	f000 8090 	beq.w	8015860 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015740:	697b      	ldr	r3, [r7, #20]
 8015742:	895b      	ldrh	r3, [r3, #10]
 8015744:	461a      	mov	r2, r3
 8015746:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015748:	3308      	adds	r3, #8
 801574a:	429a      	cmp	r2, r3
 801574c:	d203      	bcs.n	8015756 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801574e:	6978      	ldr	r0, [r7, #20]
 8015750:	f7f9 f920 	bl	800e994 <pbuf_free>
          goto icmperr;
 8015754:	e085      	b.n	8015862 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015756:	697b      	ldr	r3, [r7, #20]
 8015758:	685b      	ldr	r3, [r3, #4]
 801575a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801575c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801575e:	4618      	mov	r0, r3
 8015760:	f001 fc2e 	bl	8016fc0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015764:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015766:	4619      	mov	r1, r3
 8015768:	6978      	ldr	r0, [r7, #20]
 801576a:	f7f9 f88d 	bl	800e888 <pbuf_remove_header>
 801576e:	4603      	mov	r3, r0
 8015770:	2b00      	cmp	r3, #0
 8015772:	d009      	beq.n	8015788 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015774:	4b40      	ldr	r3, [pc, #256]	; (8015878 <icmp_input+0x1f8>)
 8015776:	22b6      	movs	r2, #182	; 0xb6
 8015778:	4940      	ldr	r1, [pc, #256]	; (801587c <icmp_input+0x1fc>)
 801577a:	4841      	ldr	r0, [pc, #260]	; (8015880 <icmp_input+0x200>)
 801577c:	f001 fc36 	bl	8016fec <iprintf>
          pbuf_free(r);
 8015780:	6978      	ldr	r0, [r7, #20]
 8015782:	f7f9 f907 	bl	800e994 <pbuf_free>
          goto icmperr;
 8015786:	e06c      	b.n	8015862 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015788:	6879      	ldr	r1, [r7, #4]
 801578a:	6978      	ldr	r0, [r7, #20]
 801578c:	f7f9 fa26 	bl	800ebdc <pbuf_copy>
 8015790:	4603      	mov	r3, r0
 8015792:	2b00      	cmp	r3, #0
 8015794:	d003      	beq.n	801579e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015796:	6978      	ldr	r0, [r7, #20]
 8015798:	f7f9 f8fc 	bl	800e994 <pbuf_free>
          goto icmperr;
 801579c:	e061      	b.n	8015862 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801579e:	6878      	ldr	r0, [r7, #4]
 80157a0:	f7f9 f8f8 	bl	800e994 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80157a4:	697b      	ldr	r3, [r7, #20]
 80157a6:	607b      	str	r3, [r7, #4]
 80157a8:	e00f      	b.n	80157ca <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80157aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80157ac:	330e      	adds	r3, #14
 80157ae:	4619      	mov	r1, r3
 80157b0:	6878      	ldr	r0, [r7, #4]
 80157b2:	f7f9 f869 	bl	800e888 <pbuf_remove_header>
 80157b6:	4603      	mov	r3, r0
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d006      	beq.n	80157ca <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80157bc:	4b2e      	ldr	r3, [pc, #184]	; (8015878 <icmp_input+0x1f8>)
 80157be:	22c7      	movs	r2, #199	; 0xc7
 80157c0:	4930      	ldr	r1, [pc, #192]	; (8015884 <icmp_input+0x204>)
 80157c2:	482f      	ldr	r0, [pc, #188]	; (8015880 <icmp_input+0x200>)
 80157c4:	f001 fc12 	bl	8016fec <iprintf>
          goto icmperr;
 80157c8:	e04b      	b.n	8015862 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	685b      	ldr	r3, [r3, #4]
 80157ce:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80157d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80157d2:	4619      	mov	r1, r3
 80157d4:	6878      	ldr	r0, [r7, #4]
 80157d6:	f7f9 f847 	bl	800e868 <pbuf_add_header>
 80157da:	4603      	mov	r3, r0
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d12b      	bne.n	8015838 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	685b      	ldr	r3, [r3, #4]
 80157e4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80157e6:	69fb      	ldr	r3, [r7, #28]
 80157e8:	681a      	ldr	r2, [r3, #0]
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80157ee:	4b20      	ldr	r3, [pc, #128]	; (8015870 <icmp_input+0x1f0>)
 80157f0:	691a      	ldr	r2, [r3, #16]
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80157f6:	693b      	ldr	r3, [r7, #16]
 80157f8:	2200      	movs	r2, #0
 80157fa:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80157fc:	693b      	ldr	r3, [r7, #16]
 80157fe:	2200      	movs	r2, #0
 8015800:	709a      	strb	r2, [r3, #2]
 8015802:	2200      	movs	r2, #0
 8015804:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	22ff      	movs	r2, #255	; 0xff
 801580a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	2200      	movs	r2, #0
 8015810:	729a      	strb	r2, [r3, #10]
 8015812:	2200      	movs	r2, #0
 8015814:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015816:	683b      	ldr	r3, [r7, #0]
 8015818:	9302      	str	r3, [sp, #8]
 801581a:	2301      	movs	r3, #1
 801581c:	9301      	str	r3, [sp, #4]
 801581e:	2300      	movs	r3, #0
 8015820:	9300      	str	r3, [sp, #0]
 8015822:	23ff      	movs	r3, #255	; 0xff
 8015824:	2200      	movs	r2, #0
 8015826:	69f9      	ldr	r1, [r7, #28]
 8015828:	6878      	ldr	r0, [r7, #4]
 801582a:	f000 fa75 	bl	8015d18 <ip4_output_if>
 801582e:	4603      	mov	r3, r0
 8015830:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015832:	e001      	b.n	8015838 <icmp_input+0x1b8>
      break;
 8015834:	bf00      	nop
 8015836:	e000      	b.n	801583a <icmp_input+0x1ba>
      break;
 8015838:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801583a:	6878      	ldr	r0, [r7, #4]
 801583c:	f7f9 f8aa 	bl	800e994 <pbuf_free>
  return;
 8015840:	e013      	b.n	801586a <icmp_input+0x1ea>
    goto lenerr;
 8015842:	bf00      	nop
 8015844:	e002      	b.n	801584c <icmp_input+0x1cc>
    goto lenerr;
 8015846:	bf00      	nop
 8015848:	e000      	b.n	801584c <icmp_input+0x1cc>
        goto lenerr;
 801584a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801584c:	6878      	ldr	r0, [r7, #4]
 801584e:	f7f9 f8a1 	bl	800e994 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015852:	e00a      	b.n	801586a <icmp_input+0x1ea>
        goto icmperr;
 8015854:	bf00      	nop
 8015856:	e004      	b.n	8015862 <icmp_input+0x1e2>
        goto icmperr;
 8015858:	bf00      	nop
 801585a:	e002      	b.n	8015862 <icmp_input+0x1e2>
          goto icmperr;
 801585c:	bf00      	nop
 801585e:	e000      	b.n	8015862 <icmp_input+0x1e2>
          goto icmperr;
 8015860:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015862:	6878      	ldr	r0, [r7, #4]
 8015864:	f7f9 f896 	bl	800e994 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015868:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801586a:	3728      	adds	r7, #40	; 0x28
 801586c:	46bd      	mov	sp, r7
 801586e:	bd80      	pop	{r7, pc}
 8015870:	2000d8cc 	.word	0x2000d8cc
 8015874:	2000d8e0 	.word	0x2000d8e0
 8015878:	0801a9ec 	.word	0x0801a9ec
 801587c:	0801aa24 	.word	0x0801aa24
 8015880:	0801aa5c 	.word	0x0801aa5c
 8015884:	0801aa84 	.word	0x0801aa84

08015888 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015888:	b580      	push	{r7, lr}
 801588a:	b082      	sub	sp, #8
 801588c:	af00      	add	r7, sp, #0
 801588e:	6078      	str	r0, [r7, #4]
 8015890:	460b      	mov	r3, r1
 8015892:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015894:	78fb      	ldrb	r3, [r7, #3]
 8015896:	461a      	mov	r2, r3
 8015898:	2103      	movs	r1, #3
 801589a:	6878      	ldr	r0, [r7, #4]
 801589c:	f000 f814 	bl	80158c8 <icmp_send_response>
}
 80158a0:	bf00      	nop
 80158a2:	3708      	adds	r7, #8
 80158a4:	46bd      	mov	sp, r7
 80158a6:	bd80      	pop	{r7, pc}

080158a8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80158a8:	b580      	push	{r7, lr}
 80158aa:	b082      	sub	sp, #8
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	6078      	str	r0, [r7, #4]
 80158b0:	460b      	mov	r3, r1
 80158b2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80158b4:	78fb      	ldrb	r3, [r7, #3]
 80158b6:	461a      	mov	r2, r3
 80158b8:	210b      	movs	r1, #11
 80158ba:	6878      	ldr	r0, [r7, #4]
 80158bc:	f000 f804 	bl	80158c8 <icmp_send_response>
}
 80158c0:	bf00      	nop
 80158c2:	3708      	adds	r7, #8
 80158c4:	46bd      	mov	sp, r7
 80158c6:	bd80      	pop	{r7, pc}

080158c8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80158c8:	b580      	push	{r7, lr}
 80158ca:	b08c      	sub	sp, #48	; 0x30
 80158cc:	af04      	add	r7, sp, #16
 80158ce:	6078      	str	r0, [r7, #4]
 80158d0:	460b      	mov	r3, r1
 80158d2:	70fb      	strb	r3, [r7, #3]
 80158d4:	4613      	mov	r3, r2
 80158d6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80158d8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80158dc:	2124      	movs	r1, #36	; 0x24
 80158de:	2022      	movs	r0, #34	; 0x22
 80158e0:	f7f8 fd74 	bl	800e3cc <pbuf_alloc>
 80158e4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80158e6:	69fb      	ldr	r3, [r7, #28]
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d04c      	beq.n	8015986 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80158ec:	69fb      	ldr	r3, [r7, #28]
 80158ee:	895b      	ldrh	r3, [r3, #10]
 80158f0:	2b23      	cmp	r3, #35	; 0x23
 80158f2:	d806      	bhi.n	8015902 <icmp_send_response+0x3a>
 80158f4:	4b26      	ldr	r3, [pc, #152]	; (8015990 <icmp_send_response+0xc8>)
 80158f6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80158fa:	4926      	ldr	r1, [pc, #152]	; (8015994 <icmp_send_response+0xcc>)
 80158fc:	4826      	ldr	r0, [pc, #152]	; (8015998 <icmp_send_response+0xd0>)
 80158fe:	f001 fb75 	bl	8016fec <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	685b      	ldr	r3, [r3, #4]
 8015906:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015908:	69fb      	ldr	r3, [r7, #28]
 801590a:	685b      	ldr	r3, [r3, #4]
 801590c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801590e:	697b      	ldr	r3, [r7, #20]
 8015910:	78fa      	ldrb	r2, [r7, #3]
 8015912:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015914:	697b      	ldr	r3, [r7, #20]
 8015916:	78ba      	ldrb	r2, [r7, #2]
 8015918:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801591a:	697b      	ldr	r3, [r7, #20]
 801591c:	2200      	movs	r2, #0
 801591e:	711a      	strb	r2, [r3, #4]
 8015920:	2200      	movs	r2, #0
 8015922:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015924:	697b      	ldr	r3, [r7, #20]
 8015926:	2200      	movs	r2, #0
 8015928:	719a      	strb	r2, [r3, #6]
 801592a:	2200      	movs	r2, #0
 801592c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801592e:	69fb      	ldr	r3, [r7, #28]
 8015930:	685b      	ldr	r3, [r3, #4]
 8015932:	f103 0008 	add.w	r0, r3, #8
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	685b      	ldr	r3, [r3, #4]
 801593a:	221c      	movs	r2, #28
 801593c:	4619      	mov	r1, r3
 801593e:	f001 fb3f 	bl	8016fc0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015942:	69bb      	ldr	r3, [r7, #24]
 8015944:	68db      	ldr	r3, [r3, #12]
 8015946:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015948:	f107 030c 	add.w	r3, r7, #12
 801594c:	4618      	mov	r0, r3
 801594e:	f000 f825 	bl	801599c <ip4_route>
 8015952:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015954:	693b      	ldr	r3, [r7, #16]
 8015956:	2b00      	cmp	r3, #0
 8015958:	d011      	beq.n	801597e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801595a:	697b      	ldr	r3, [r7, #20]
 801595c:	2200      	movs	r2, #0
 801595e:	709a      	strb	r2, [r3, #2]
 8015960:	2200      	movs	r2, #0
 8015962:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015964:	f107 020c 	add.w	r2, r7, #12
 8015968:	693b      	ldr	r3, [r7, #16]
 801596a:	9302      	str	r3, [sp, #8]
 801596c:	2301      	movs	r3, #1
 801596e:	9301      	str	r3, [sp, #4]
 8015970:	2300      	movs	r3, #0
 8015972:	9300      	str	r3, [sp, #0]
 8015974:	23ff      	movs	r3, #255	; 0xff
 8015976:	2100      	movs	r1, #0
 8015978:	69f8      	ldr	r0, [r7, #28]
 801597a:	f000 f9cd 	bl	8015d18 <ip4_output_if>
  }
  pbuf_free(q);
 801597e:	69f8      	ldr	r0, [r7, #28]
 8015980:	f7f9 f808 	bl	800e994 <pbuf_free>
 8015984:	e000      	b.n	8015988 <icmp_send_response+0xc0>
    return;
 8015986:	bf00      	nop
}
 8015988:	3720      	adds	r7, #32
 801598a:	46bd      	mov	sp, r7
 801598c:	bd80      	pop	{r7, pc}
 801598e:	bf00      	nop
 8015990:	0801a9ec 	.word	0x0801a9ec
 8015994:	0801aab8 	.word	0x0801aab8
 8015998:	0801aa5c 	.word	0x0801aa5c

0801599c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801599c:	b480      	push	{r7}
 801599e:	b085      	sub	sp, #20
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80159a4:	4b33      	ldr	r3, [pc, #204]	; (8015a74 <ip4_route+0xd8>)
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	60fb      	str	r3, [r7, #12]
 80159aa:	e036      	b.n	8015a1a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80159b2:	f003 0301 	and.w	r3, r3, #1
 80159b6:	b2db      	uxtb	r3, r3
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d02b      	beq.n	8015a14 <ip4_route+0x78>
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80159c2:	089b      	lsrs	r3, r3, #2
 80159c4:	f003 0301 	and.w	r3, r3, #1
 80159c8:	b2db      	uxtb	r3, r3
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d022      	beq.n	8015a14 <ip4_route+0x78>
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	3304      	adds	r3, #4
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d01d      	beq.n	8015a14 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	681a      	ldr	r2, [r3, #0]
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	3304      	adds	r3, #4
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	405a      	eors	r2, r3
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	3308      	adds	r3, #8
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	4013      	ands	r3, r2
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d101      	bne.n	80159f4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	e038      	b.n	8015a66 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80159fa:	f003 0302 	and.w	r3, r3, #2
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d108      	bne.n	8015a14 <ip4_route+0x78>
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	681a      	ldr	r2, [r3, #0]
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	330c      	adds	r3, #12
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	429a      	cmp	r2, r3
 8015a0e:	d101      	bne.n	8015a14 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	e028      	b.n	8015a66 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	60fb      	str	r3, [r7, #12]
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d1c5      	bne.n	80159ac <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015a20:	4b15      	ldr	r3, [pc, #84]	; (8015a78 <ip4_route+0xdc>)
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d01a      	beq.n	8015a5e <ip4_route+0xc2>
 8015a28:	4b13      	ldr	r3, [pc, #76]	; (8015a78 <ip4_route+0xdc>)
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015a30:	f003 0301 	and.w	r3, r3, #1
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d012      	beq.n	8015a5e <ip4_route+0xc2>
 8015a38:	4b0f      	ldr	r3, [pc, #60]	; (8015a78 <ip4_route+0xdc>)
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015a40:	f003 0304 	and.w	r3, r3, #4
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d00a      	beq.n	8015a5e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015a48:	4b0b      	ldr	r3, [pc, #44]	; (8015a78 <ip4_route+0xdc>)
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	3304      	adds	r3, #4
 8015a4e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d004      	beq.n	8015a5e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	b2db      	uxtb	r3, r3
 8015a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8015a5c:	d101      	bne.n	8015a62 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015a5e:	2300      	movs	r3, #0
 8015a60:	e001      	b.n	8015a66 <ip4_route+0xca>
  }

  return netif_default;
 8015a62:	4b05      	ldr	r3, [pc, #20]	; (8015a78 <ip4_route+0xdc>)
 8015a64:	681b      	ldr	r3, [r3, #0]
}
 8015a66:	4618      	mov	r0, r3
 8015a68:	3714      	adds	r7, #20
 8015a6a:	46bd      	mov	sp, r7
 8015a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a70:	4770      	bx	lr
 8015a72:	bf00      	nop
 8015a74:	20011014 	.word	0x20011014
 8015a78:	20011018 	.word	0x20011018

08015a7c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015a7c:	b580      	push	{r7, lr}
 8015a7e:	b082      	sub	sp, #8
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015a8a:	f003 0301 	and.w	r3, r3, #1
 8015a8e:	b2db      	uxtb	r3, r3
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d016      	beq.n	8015ac2 <ip4_input_accept+0x46>
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	3304      	adds	r3, #4
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d011      	beq.n	8015ac2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015a9e:	4b0b      	ldr	r3, [pc, #44]	; (8015acc <ip4_input_accept+0x50>)
 8015aa0:	695a      	ldr	r2, [r3, #20]
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	3304      	adds	r3, #4
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	429a      	cmp	r2, r3
 8015aaa:	d008      	beq.n	8015abe <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015aac:	4b07      	ldr	r3, [pc, #28]	; (8015acc <ip4_input_accept+0x50>)
 8015aae:	695b      	ldr	r3, [r3, #20]
 8015ab0:	6879      	ldr	r1, [r7, #4]
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	f000 fa08 	bl	8015ec8 <ip4_addr_isbroadcast_u32>
 8015ab8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d001      	beq.n	8015ac2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015abe:	2301      	movs	r3, #1
 8015ac0:	e000      	b.n	8015ac4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015ac2:	2300      	movs	r3, #0
}
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	3708      	adds	r7, #8
 8015ac8:	46bd      	mov	sp, r7
 8015aca:	bd80      	pop	{r7, pc}
 8015acc:	2000d8cc 	.word	0x2000d8cc

08015ad0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015ad0:	b580      	push	{r7, lr}
 8015ad2:	b086      	sub	sp, #24
 8015ad4:	af00      	add	r7, sp, #0
 8015ad6:	6078      	str	r0, [r7, #4]
 8015ad8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	685b      	ldr	r3, [r3, #4]
 8015ade:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015ae0:	697b      	ldr	r3, [r7, #20]
 8015ae2:	781b      	ldrb	r3, [r3, #0]
 8015ae4:	091b      	lsrs	r3, r3, #4
 8015ae6:	b2db      	uxtb	r3, r3
 8015ae8:	2b04      	cmp	r3, #4
 8015aea:	d004      	beq.n	8015af6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015aec:	6878      	ldr	r0, [r7, #4]
 8015aee:	f7f8 ff51 	bl	800e994 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015af2:	2300      	movs	r3, #0
 8015af4:	e107      	b.n	8015d06 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015af6:	697b      	ldr	r3, [r7, #20]
 8015af8:	781b      	ldrb	r3, [r3, #0]
 8015afa:	f003 030f 	and.w	r3, r3, #15
 8015afe:	b2db      	uxtb	r3, r3
 8015b00:	009b      	lsls	r3, r3, #2
 8015b02:	b2db      	uxtb	r3, r3
 8015b04:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015b06:	697b      	ldr	r3, [r7, #20]
 8015b08:	885b      	ldrh	r3, [r3, #2]
 8015b0a:	b29b      	uxth	r3, r3
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	f7f7 fb4f 	bl	800d1b0 <lwip_htons>
 8015b12:	4603      	mov	r3, r0
 8015b14:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	891b      	ldrh	r3, [r3, #8]
 8015b1a:	89ba      	ldrh	r2, [r7, #12]
 8015b1c:	429a      	cmp	r2, r3
 8015b1e:	d204      	bcs.n	8015b2a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015b20:	89bb      	ldrh	r3, [r7, #12]
 8015b22:	4619      	mov	r1, r3
 8015b24:	6878      	ldr	r0, [r7, #4]
 8015b26:	f7f8 fdaf 	bl	800e688 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	895b      	ldrh	r3, [r3, #10]
 8015b2e:	89fa      	ldrh	r2, [r7, #14]
 8015b30:	429a      	cmp	r2, r3
 8015b32:	d807      	bhi.n	8015b44 <ip4_input+0x74>
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	891b      	ldrh	r3, [r3, #8]
 8015b38:	89ba      	ldrh	r2, [r7, #12]
 8015b3a:	429a      	cmp	r2, r3
 8015b3c:	d802      	bhi.n	8015b44 <ip4_input+0x74>
 8015b3e:	89fb      	ldrh	r3, [r7, #14]
 8015b40:	2b13      	cmp	r3, #19
 8015b42:	d804      	bhi.n	8015b4e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015b44:	6878      	ldr	r0, [r7, #4]
 8015b46:	f7f8 ff25 	bl	800e994 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	e0db      	b.n	8015d06 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015b4e:	697b      	ldr	r3, [r7, #20]
 8015b50:	691b      	ldr	r3, [r3, #16]
 8015b52:	4a6f      	ldr	r2, [pc, #444]	; (8015d10 <ip4_input+0x240>)
 8015b54:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015b56:	697b      	ldr	r3, [r7, #20]
 8015b58:	68db      	ldr	r3, [r3, #12]
 8015b5a:	4a6d      	ldr	r2, [pc, #436]	; (8015d10 <ip4_input+0x240>)
 8015b5c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015b5e:	4b6c      	ldr	r3, [pc, #432]	; (8015d10 <ip4_input+0x240>)
 8015b60:	695b      	ldr	r3, [r3, #20]
 8015b62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015b66:	2be0      	cmp	r3, #224	; 0xe0
 8015b68:	d112      	bne.n	8015b90 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015b6a:	683b      	ldr	r3, [r7, #0]
 8015b6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015b70:	f003 0301 	and.w	r3, r3, #1
 8015b74:	b2db      	uxtb	r3, r3
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d007      	beq.n	8015b8a <ip4_input+0xba>
 8015b7a:	683b      	ldr	r3, [r7, #0]
 8015b7c:	3304      	adds	r3, #4
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d002      	beq.n	8015b8a <ip4_input+0xba>
      netif = inp;
 8015b84:	683b      	ldr	r3, [r7, #0]
 8015b86:	613b      	str	r3, [r7, #16]
 8015b88:	e02a      	b.n	8015be0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	613b      	str	r3, [r7, #16]
 8015b8e:	e027      	b.n	8015be0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015b90:	6838      	ldr	r0, [r7, #0]
 8015b92:	f7ff ff73 	bl	8015a7c <ip4_input_accept>
 8015b96:	4603      	mov	r3, r0
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d002      	beq.n	8015ba2 <ip4_input+0xd2>
      netif = inp;
 8015b9c:	683b      	ldr	r3, [r7, #0]
 8015b9e:	613b      	str	r3, [r7, #16]
 8015ba0:	e01e      	b.n	8015be0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015ba6:	4b5a      	ldr	r3, [pc, #360]	; (8015d10 <ip4_input+0x240>)
 8015ba8:	695b      	ldr	r3, [r3, #20]
 8015baa:	b2db      	uxtb	r3, r3
 8015bac:	2b7f      	cmp	r3, #127	; 0x7f
 8015bae:	d017      	beq.n	8015be0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015bb0:	4b58      	ldr	r3, [pc, #352]	; (8015d14 <ip4_input+0x244>)
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	613b      	str	r3, [r7, #16]
 8015bb6:	e00e      	b.n	8015bd6 <ip4_input+0x106>
          if (netif == inp) {
 8015bb8:	693a      	ldr	r2, [r7, #16]
 8015bba:	683b      	ldr	r3, [r7, #0]
 8015bbc:	429a      	cmp	r2, r3
 8015bbe:	d006      	beq.n	8015bce <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015bc0:	6938      	ldr	r0, [r7, #16]
 8015bc2:	f7ff ff5b 	bl	8015a7c <ip4_input_accept>
 8015bc6:	4603      	mov	r3, r0
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d108      	bne.n	8015bde <ip4_input+0x10e>
 8015bcc:	e000      	b.n	8015bd0 <ip4_input+0x100>
            continue;
 8015bce:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015bd0:	693b      	ldr	r3, [r7, #16]
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	613b      	str	r3, [r7, #16]
 8015bd6:	693b      	ldr	r3, [r7, #16]
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d1ed      	bne.n	8015bb8 <ip4_input+0xe8>
 8015bdc:	e000      	b.n	8015be0 <ip4_input+0x110>
            break;
 8015bde:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015be0:	4b4b      	ldr	r3, [pc, #300]	; (8015d10 <ip4_input+0x240>)
 8015be2:	691b      	ldr	r3, [r3, #16]
 8015be4:	6839      	ldr	r1, [r7, #0]
 8015be6:	4618      	mov	r0, r3
 8015be8:	f000 f96e 	bl	8015ec8 <ip4_addr_isbroadcast_u32>
 8015bec:	4603      	mov	r3, r0
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d105      	bne.n	8015bfe <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015bf2:	4b47      	ldr	r3, [pc, #284]	; (8015d10 <ip4_input+0x240>)
 8015bf4:	691b      	ldr	r3, [r3, #16]
 8015bf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015bfa:	2be0      	cmp	r3, #224	; 0xe0
 8015bfc:	d104      	bne.n	8015c08 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015bfe:	6878      	ldr	r0, [r7, #4]
 8015c00:	f7f8 fec8 	bl	800e994 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015c04:	2300      	movs	r3, #0
 8015c06:	e07e      	b.n	8015d06 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015c08:	693b      	ldr	r3, [r7, #16]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d104      	bne.n	8015c18 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015c0e:	6878      	ldr	r0, [r7, #4]
 8015c10:	f7f8 fec0 	bl	800e994 <pbuf_free>
    return ERR_OK;
 8015c14:	2300      	movs	r3, #0
 8015c16:	e076      	b.n	8015d06 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015c18:	697b      	ldr	r3, [r7, #20]
 8015c1a:	88db      	ldrh	r3, [r3, #6]
 8015c1c:	b29b      	uxth	r3, r3
 8015c1e:	461a      	mov	r2, r3
 8015c20:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015c24:	4013      	ands	r3, r2
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d00b      	beq.n	8015c42 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015c2a:	6878      	ldr	r0, [r7, #4]
 8015c2c:	f000 fc92 	bl	8016554 <ip4_reass>
 8015c30:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d101      	bne.n	8015c3c <ip4_input+0x16c>
      return ERR_OK;
 8015c38:	2300      	movs	r3, #0
 8015c3a:	e064      	b.n	8015d06 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	685b      	ldr	r3, [r3, #4]
 8015c40:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015c42:	4a33      	ldr	r2, [pc, #204]	; (8015d10 <ip4_input+0x240>)
 8015c44:	693b      	ldr	r3, [r7, #16]
 8015c46:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015c48:	4a31      	ldr	r2, [pc, #196]	; (8015d10 <ip4_input+0x240>)
 8015c4a:	683b      	ldr	r3, [r7, #0]
 8015c4c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015c4e:	4a30      	ldr	r2, [pc, #192]	; (8015d10 <ip4_input+0x240>)
 8015c50:	697b      	ldr	r3, [r7, #20]
 8015c52:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015c54:	697b      	ldr	r3, [r7, #20]
 8015c56:	781b      	ldrb	r3, [r3, #0]
 8015c58:	f003 030f 	and.w	r3, r3, #15
 8015c5c:	b2db      	uxtb	r3, r3
 8015c5e:	009b      	lsls	r3, r3, #2
 8015c60:	b2db      	uxtb	r3, r3
 8015c62:	b29a      	uxth	r2, r3
 8015c64:	4b2a      	ldr	r3, [pc, #168]	; (8015d10 <ip4_input+0x240>)
 8015c66:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015c68:	89fb      	ldrh	r3, [r7, #14]
 8015c6a:	4619      	mov	r1, r3
 8015c6c:	6878      	ldr	r0, [r7, #4]
 8015c6e:	f7f8 fe0b 	bl	800e888 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015c72:	697b      	ldr	r3, [r7, #20]
 8015c74:	7a5b      	ldrb	r3, [r3, #9]
 8015c76:	2b11      	cmp	r3, #17
 8015c78:	d006      	beq.n	8015c88 <ip4_input+0x1b8>
 8015c7a:	2b11      	cmp	r3, #17
 8015c7c:	dc13      	bgt.n	8015ca6 <ip4_input+0x1d6>
 8015c7e:	2b01      	cmp	r3, #1
 8015c80:	d00c      	beq.n	8015c9c <ip4_input+0x1cc>
 8015c82:	2b06      	cmp	r3, #6
 8015c84:	d005      	beq.n	8015c92 <ip4_input+0x1c2>
 8015c86:	e00e      	b.n	8015ca6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015c88:	6839      	ldr	r1, [r7, #0]
 8015c8a:	6878      	ldr	r0, [r7, #4]
 8015c8c:	f7fe fc68 	bl	8014560 <udp_input>
        break;
 8015c90:	e026      	b.n	8015ce0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015c92:	6839      	ldr	r1, [r7, #0]
 8015c94:	6878      	ldr	r0, [r7, #4]
 8015c96:	f7fa fcb1 	bl	80105fc <tcp_input>
        break;
 8015c9a:	e021      	b.n	8015ce0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015c9c:	6839      	ldr	r1, [r7, #0]
 8015c9e:	6878      	ldr	r0, [r7, #4]
 8015ca0:	f7ff fcee 	bl	8015680 <icmp_input>
        break;
 8015ca4:	e01c      	b.n	8015ce0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015ca6:	4b1a      	ldr	r3, [pc, #104]	; (8015d10 <ip4_input+0x240>)
 8015ca8:	695b      	ldr	r3, [r3, #20]
 8015caa:	6939      	ldr	r1, [r7, #16]
 8015cac:	4618      	mov	r0, r3
 8015cae:	f000 f90b 	bl	8015ec8 <ip4_addr_isbroadcast_u32>
 8015cb2:	4603      	mov	r3, r0
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d10f      	bne.n	8015cd8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015cb8:	4b15      	ldr	r3, [pc, #84]	; (8015d10 <ip4_input+0x240>)
 8015cba:	695b      	ldr	r3, [r3, #20]
 8015cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015cc0:	2be0      	cmp	r3, #224	; 0xe0
 8015cc2:	d009      	beq.n	8015cd8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015cc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015cc8:	4619      	mov	r1, r3
 8015cca:	6878      	ldr	r0, [r7, #4]
 8015ccc:	f7f8 fe4f 	bl	800e96e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015cd0:	2102      	movs	r1, #2
 8015cd2:	6878      	ldr	r0, [r7, #4]
 8015cd4:	f7ff fdd8 	bl	8015888 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015cd8:	6878      	ldr	r0, [r7, #4]
 8015cda:	f7f8 fe5b 	bl	800e994 <pbuf_free>
        break;
 8015cde:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015ce0:	4b0b      	ldr	r3, [pc, #44]	; (8015d10 <ip4_input+0x240>)
 8015ce2:	2200      	movs	r2, #0
 8015ce4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015ce6:	4b0a      	ldr	r3, [pc, #40]	; (8015d10 <ip4_input+0x240>)
 8015ce8:	2200      	movs	r2, #0
 8015cea:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015cec:	4b08      	ldr	r3, [pc, #32]	; (8015d10 <ip4_input+0x240>)
 8015cee:	2200      	movs	r2, #0
 8015cf0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015cf2:	4b07      	ldr	r3, [pc, #28]	; (8015d10 <ip4_input+0x240>)
 8015cf4:	2200      	movs	r2, #0
 8015cf6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015cf8:	4b05      	ldr	r3, [pc, #20]	; (8015d10 <ip4_input+0x240>)
 8015cfa:	2200      	movs	r2, #0
 8015cfc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015cfe:	4b04      	ldr	r3, [pc, #16]	; (8015d10 <ip4_input+0x240>)
 8015d00:	2200      	movs	r2, #0
 8015d02:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015d04:	2300      	movs	r3, #0
}
 8015d06:	4618      	mov	r0, r3
 8015d08:	3718      	adds	r7, #24
 8015d0a:	46bd      	mov	sp, r7
 8015d0c:	bd80      	pop	{r7, pc}
 8015d0e:	bf00      	nop
 8015d10:	2000d8cc 	.word	0x2000d8cc
 8015d14:	20011014 	.word	0x20011014

08015d18 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b08a      	sub	sp, #40	; 0x28
 8015d1c:	af04      	add	r7, sp, #16
 8015d1e:	60f8      	str	r0, [r7, #12]
 8015d20:	60b9      	str	r1, [r7, #8]
 8015d22:	607a      	str	r2, [r7, #4]
 8015d24:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015d26:	68bb      	ldr	r3, [r7, #8]
 8015d28:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d009      	beq.n	8015d44 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015d30:	68bb      	ldr	r3, [r7, #8]
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d003      	beq.n	8015d3e <ip4_output_if+0x26>
 8015d36:	68bb      	ldr	r3, [r7, #8]
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d102      	bne.n	8015d44 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d40:	3304      	adds	r3, #4
 8015d42:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015d44:	78fa      	ldrb	r2, [r7, #3]
 8015d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d48:	9302      	str	r3, [sp, #8]
 8015d4a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015d4e:	9301      	str	r3, [sp, #4]
 8015d50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015d54:	9300      	str	r3, [sp, #0]
 8015d56:	4613      	mov	r3, r2
 8015d58:	687a      	ldr	r2, [r7, #4]
 8015d5a:	6979      	ldr	r1, [r7, #20]
 8015d5c:	68f8      	ldr	r0, [r7, #12]
 8015d5e:	f000 f805 	bl	8015d6c <ip4_output_if_src>
 8015d62:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015d64:	4618      	mov	r0, r3
 8015d66:	3718      	adds	r7, #24
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	bd80      	pop	{r7, pc}

08015d6c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015d6c:	b580      	push	{r7, lr}
 8015d6e:	b088      	sub	sp, #32
 8015d70:	af00      	add	r7, sp, #0
 8015d72:	60f8      	str	r0, [r7, #12]
 8015d74:	60b9      	str	r1, [r7, #8]
 8015d76:	607a      	str	r2, [r7, #4]
 8015d78:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	7b9b      	ldrb	r3, [r3, #14]
 8015d7e:	2b01      	cmp	r3, #1
 8015d80:	d006      	beq.n	8015d90 <ip4_output_if_src+0x24>
 8015d82:	4b4b      	ldr	r3, [pc, #300]	; (8015eb0 <ip4_output_if_src+0x144>)
 8015d84:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015d88:	494a      	ldr	r1, [pc, #296]	; (8015eb4 <ip4_output_if_src+0x148>)
 8015d8a:	484b      	ldr	r0, [pc, #300]	; (8015eb8 <ip4_output_if_src+0x14c>)
 8015d8c:	f001 f92e 	bl	8016fec <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d060      	beq.n	8015e58 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015d96:	2314      	movs	r3, #20
 8015d98:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015d9a:	2114      	movs	r1, #20
 8015d9c:	68f8      	ldr	r0, [r7, #12]
 8015d9e:	f7f8 fd63 	bl	800e868 <pbuf_add_header>
 8015da2:	4603      	mov	r3, r0
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d002      	beq.n	8015dae <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015da8:	f06f 0301 	mvn.w	r3, #1
 8015dac:	e07c      	b.n	8015ea8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	685b      	ldr	r3, [r3, #4]
 8015db2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	895b      	ldrh	r3, [r3, #10]
 8015db8:	2b13      	cmp	r3, #19
 8015dba:	d806      	bhi.n	8015dca <ip4_output_if_src+0x5e>
 8015dbc:	4b3c      	ldr	r3, [pc, #240]	; (8015eb0 <ip4_output_if_src+0x144>)
 8015dbe:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015dc2:	493e      	ldr	r1, [pc, #248]	; (8015ebc <ip4_output_if_src+0x150>)
 8015dc4:	483c      	ldr	r0, [pc, #240]	; (8015eb8 <ip4_output_if_src+0x14c>)
 8015dc6:	f001 f911 	bl	8016fec <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015dca:	69fb      	ldr	r3, [r7, #28]
 8015dcc:	78fa      	ldrb	r2, [r7, #3]
 8015dce:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015dd0:	69fb      	ldr	r3, [r7, #28]
 8015dd2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015dd6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	681a      	ldr	r2, [r3, #0]
 8015ddc:	69fb      	ldr	r3, [r7, #28]
 8015dde:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015de0:	8b7b      	ldrh	r3, [r7, #26]
 8015de2:	089b      	lsrs	r3, r3, #2
 8015de4:	b29b      	uxth	r3, r3
 8015de6:	b2db      	uxtb	r3, r3
 8015de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015dec:	b2da      	uxtb	r2, r3
 8015dee:	69fb      	ldr	r3, [r7, #28]
 8015df0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015df2:	69fb      	ldr	r3, [r7, #28]
 8015df4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015df8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	891b      	ldrh	r3, [r3, #8]
 8015dfe:	4618      	mov	r0, r3
 8015e00:	f7f7 f9d6 	bl	800d1b0 <lwip_htons>
 8015e04:	4603      	mov	r3, r0
 8015e06:	461a      	mov	r2, r3
 8015e08:	69fb      	ldr	r3, [r7, #28]
 8015e0a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015e0c:	69fb      	ldr	r3, [r7, #28]
 8015e0e:	2200      	movs	r2, #0
 8015e10:	719a      	strb	r2, [r3, #6]
 8015e12:	2200      	movs	r2, #0
 8015e14:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015e16:	4b2a      	ldr	r3, [pc, #168]	; (8015ec0 <ip4_output_if_src+0x154>)
 8015e18:	881b      	ldrh	r3, [r3, #0]
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	f7f7 f9c8 	bl	800d1b0 <lwip_htons>
 8015e20:	4603      	mov	r3, r0
 8015e22:	461a      	mov	r2, r3
 8015e24:	69fb      	ldr	r3, [r7, #28]
 8015e26:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015e28:	4b25      	ldr	r3, [pc, #148]	; (8015ec0 <ip4_output_if_src+0x154>)
 8015e2a:	881b      	ldrh	r3, [r3, #0]
 8015e2c:	3301      	adds	r3, #1
 8015e2e:	b29a      	uxth	r2, r3
 8015e30:	4b23      	ldr	r3, [pc, #140]	; (8015ec0 <ip4_output_if_src+0x154>)
 8015e32:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015e34:	68bb      	ldr	r3, [r7, #8]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d104      	bne.n	8015e44 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015e3a:	4b22      	ldr	r3, [pc, #136]	; (8015ec4 <ip4_output_if_src+0x158>)
 8015e3c:	681a      	ldr	r2, [r3, #0]
 8015e3e:	69fb      	ldr	r3, [r7, #28]
 8015e40:	60da      	str	r2, [r3, #12]
 8015e42:	e003      	b.n	8015e4c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015e44:	68bb      	ldr	r3, [r7, #8]
 8015e46:	681a      	ldr	r2, [r3, #0]
 8015e48:	69fb      	ldr	r3, [r7, #28]
 8015e4a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015e4c:	69fb      	ldr	r3, [r7, #28]
 8015e4e:	2200      	movs	r2, #0
 8015e50:	729a      	strb	r2, [r3, #10]
 8015e52:	2200      	movs	r2, #0
 8015e54:	72da      	strb	r2, [r3, #11]
 8015e56:	e00f      	b.n	8015e78 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	895b      	ldrh	r3, [r3, #10]
 8015e5c:	2b13      	cmp	r3, #19
 8015e5e:	d802      	bhi.n	8015e66 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015e60:	f06f 0301 	mvn.w	r3, #1
 8015e64:	e020      	b.n	8015ea8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	685b      	ldr	r3, [r3, #4]
 8015e6a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015e6c:	69fb      	ldr	r3, [r7, #28]
 8015e6e:	691b      	ldr	r3, [r3, #16]
 8015e70:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015e72:	f107 0314 	add.w	r3, r7, #20
 8015e76:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e7a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d00c      	beq.n	8015e9a <ip4_output_if_src+0x12e>
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	891a      	ldrh	r2, [r3, #8]
 8015e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015e88:	429a      	cmp	r2, r3
 8015e8a:	d906      	bls.n	8015e9a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015e8c:	687a      	ldr	r2, [r7, #4]
 8015e8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015e90:	68f8      	ldr	r0, [r7, #12]
 8015e92:	f000 fd53 	bl	801693c <ip4_frag>
 8015e96:	4603      	mov	r3, r0
 8015e98:	e006      	b.n	8015ea8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e9c:	695b      	ldr	r3, [r3, #20]
 8015e9e:	687a      	ldr	r2, [r7, #4]
 8015ea0:	68f9      	ldr	r1, [r7, #12]
 8015ea2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ea4:	4798      	blx	r3
 8015ea6:	4603      	mov	r3, r0
}
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	3720      	adds	r7, #32
 8015eac:	46bd      	mov	sp, r7
 8015eae:	bd80      	pop	{r7, pc}
 8015eb0:	0801aae4 	.word	0x0801aae4
 8015eb4:	0801ab18 	.word	0x0801ab18
 8015eb8:	0801ab24 	.word	0x0801ab24
 8015ebc:	0801ab4c 	.word	0x0801ab4c
 8015ec0:	20011172 	.word	0x20011172
 8015ec4:	0801afe0 	.word	0x0801afe0

08015ec8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015ec8:	b480      	push	{r7}
 8015eca:	b085      	sub	sp, #20
 8015ecc:	af00      	add	r7, sp, #0
 8015ece:	6078      	str	r0, [r7, #4]
 8015ed0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015edc:	d002      	beq.n	8015ee4 <ip4_addr_isbroadcast_u32+0x1c>
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d101      	bne.n	8015ee8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015ee4:	2301      	movs	r3, #1
 8015ee6:	e02a      	b.n	8015f3e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015ee8:	683b      	ldr	r3, [r7, #0]
 8015eea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015eee:	f003 0302 	and.w	r3, r3, #2
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d101      	bne.n	8015efa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015ef6:	2300      	movs	r3, #0
 8015ef8:	e021      	b.n	8015f3e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015efa:	683b      	ldr	r3, [r7, #0]
 8015efc:	3304      	adds	r3, #4
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	687a      	ldr	r2, [r7, #4]
 8015f02:	429a      	cmp	r2, r3
 8015f04:	d101      	bne.n	8015f0a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015f06:	2300      	movs	r3, #0
 8015f08:	e019      	b.n	8015f3e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015f0a:	68fa      	ldr	r2, [r7, #12]
 8015f0c:	683b      	ldr	r3, [r7, #0]
 8015f0e:	3304      	adds	r3, #4
 8015f10:	681b      	ldr	r3, [r3, #0]
 8015f12:	405a      	eors	r2, r3
 8015f14:	683b      	ldr	r3, [r7, #0]
 8015f16:	3308      	adds	r3, #8
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	4013      	ands	r3, r2
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d10d      	bne.n	8015f3c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015f20:	683b      	ldr	r3, [r7, #0]
 8015f22:	3308      	adds	r3, #8
 8015f24:	681b      	ldr	r3, [r3, #0]
 8015f26:	43da      	mvns	r2, r3
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015f2c:	683b      	ldr	r3, [r7, #0]
 8015f2e:	3308      	adds	r3, #8
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015f34:	429a      	cmp	r2, r3
 8015f36:	d101      	bne.n	8015f3c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015f38:	2301      	movs	r3, #1
 8015f3a:	e000      	b.n	8015f3e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015f3c:	2300      	movs	r3, #0
  }
}
 8015f3e:	4618      	mov	r0, r3
 8015f40:	3714      	adds	r7, #20
 8015f42:	46bd      	mov	sp, r7
 8015f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f48:	4770      	bx	lr
	...

08015f4c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015f4c:	b580      	push	{r7, lr}
 8015f4e:	b084      	sub	sp, #16
 8015f50:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015f52:	2300      	movs	r3, #0
 8015f54:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015f56:	4b12      	ldr	r3, [pc, #72]	; (8015fa0 <ip_reass_tmr+0x54>)
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015f5c:	e018      	b.n	8015f90 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	7fdb      	ldrb	r3, [r3, #31]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d00b      	beq.n	8015f7e <ip_reass_tmr+0x32>
      r->timer--;
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	7fdb      	ldrb	r3, [r3, #31]
 8015f6a:	3b01      	subs	r3, #1
 8015f6c:	b2da      	uxtb	r2, r3
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015f72:	68fb      	ldr	r3, [r7, #12]
 8015f74:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	60fb      	str	r3, [r7, #12]
 8015f7c:	e008      	b.n	8015f90 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015f88:	68b9      	ldr	r1, [r7, #8]
 8015f8a:	6878      	ldr	r0, [r7, #4]
 8015f8c:	f000 f80a 	bl	8015fa4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d1e3      	bne.n	8015f5e <ip_reass_tmr+0x12>
    }
  }
}
 8015f96:	bf00      	nop
 8015f98:	bf00      	nop
 8015f9a:	3710      	adds	r7, #16
 8015f9c:	46bd      	mov	sp, r7
 8015f9e:	bd80      	pop	{r7, pc}
 8015fa0:	20011174 	.word	0x20011174

08015fa4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015fa4:	b580      	push	{r7, lr}
 8015fa6:	b088      	sub	sp, #32
 8015fa8:	af00      	add	r7, sp, #0
 8015faa:	6078      	str	r0, [r7, #4]
 8015fac:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015fae:	2300      	movs	r3, #0
 8015fb0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015fb2:	683a      	ldr	r2, [r7, #0]
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	429a      	cmp	r2, r3
 8015fb8:	d105      	bne.n	8015fc6 <ip_reass_free_complete_datagram+0x22>
 8015fba:	4b45      	ldr	r3, [pc, #276]	; (80160d0 <ip_reass_free_complete_datagram+0x12c>)
 8015fbc:	22ab      	movs	r2, #171	; 0xab
 8015fbe:	4945      	ldr	r1, [pc, #276]	; (80160d4 <ip_reass_free_complete_datagram+0x130>)
 8015fc0:	4845      	ldr	r0, [pc, #276]	; (80160d8 <ip_reass_free_complete_datagram+0x134>)
 8015fc2:	f001 f813 	bl	8016fec <iprintf>
  if (prev != NULL) {
 8015fc6:	683b      	ldr	r3, [r7, #0]
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d00a      	beq.n	8015fe2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015fcc:	683b      	ldr	r3, [r7, #0]
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	687a      	ldr	r2, [r7, #4]
 8015fd2:	429a      	cmp	r2, r3
 8015fd4:	d005      	beq.n	8015fe2 <ip_reass_free_complete_datagram+0x3e>
 8015fd6:	4b3e      	ldr	r3, [pc, #248]	; (80160d0 <ip_reass_free_complete_datagram+0x12c>)
 8015fd8:	22ad      	movs	r2, #173	; 0xad
 8015fda:	4940      	ldr	r1, [pc, #256]	; (80160dc <ip_reass_free_complete_datagram+0x138>)
 8015fdc:	483e      	ldr	r0, [pc, #248]	; (80160d8 <ip_reass_free_complete_datagram+0x134>)
 8015fde:	f001 f805 	bl	8016fec <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	685b      	ldr	r3, [r3, #4]
 8015fe6:	685b      	ldr	r3, [r3, #4]
 8015fe8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015fea:	697b      	ldr	r3, [r7, #20]
 8015fec:	889b      	ldrh	r3, [r3, #4]
 8015fee:	b29b      	uxth	r3, r3
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d12a      	bne.n	801604a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	685b      	ldr	r3, [r3, #4]
 8015ff8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015ffa:	697b      	ldr	r3, [r7, #20]
 8015ffc:	681a      	ldr	r2, [r3, #0]
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016002:	69bb      	ldr	r3, [r7, #24]
 8016004:	6858      	ldr	r0, [r3, #4]
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	3308      	adds	r3, #8
 801600a:	2214      	movs	r2, #20
 801600c:	4619      	mov	r1, r3
 801600e:	f000 ffd7 	bl	8016fc0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016012:	2101      	movs	r1, #1
 8016014:	69b8      	ldr	r0, [r7, #24]
 8016016:	f7ff fc47 	bl	80158a8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801601a:	69b8      	ldr	r0, [r7, #24]
 801601c:	f7f8 fd48 	bl	800eab0 <pbuf_clen>
 8016020:	4603      	mov	r3, r0
 8016022:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016024:	8bfa      	ldrh	r2, [r7, #30]
 8016026:	8a7b      	ldrh	r3, [r7, #18]
 8016028:	4413      	add	r3, r2
 801602a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801602e:	db05      	blt.n	801603c <ip_reass_free_complete_datagram+0x98>
 8016030:	4b27      	ldr	r3, [pc, #156]	; (80160d0 <ip_reass_free_complete_datagram+0x12c>)
 8016032:	22bc      	movs	r2, #188	; 0xbc
 8016034:	492a      	ldr	r1, [pc, #168]	; (80160e0 <ip_reass_free_complete_datagram+0x13c>)
 8016036:	4828      	ldr	r0, [pc, #160]	; (80160d8 <ip_reass_free_complete_datagram+0x134>)
 8016038:	f000 ffd8 	bl	8016fec <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801603c:	8bfa      	ldrh	r2, [r7, #30]
 801603e:	8a7b      	ldrh	r3, [r7, #18]
 8016040:	4413      	add	r3, r2
 8016042:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016044:	69b8      	ldr	r0, [r7, #24]
 8016046:	f7f8 fca5 	bl	800e994 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	685b      	ldr	r3, [r3, #4]
 801604e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016050:	e01f      	b.n	8016092 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016052:	69bb      	ldr	r3, [r7, #24]
 8016054:	685b      	ldr	r3, [r3, #4]
 8016056:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016058:	69bb      	ldr	r3, [r7, #24]
 801605a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801605c:	697b      	ldr	r3, [r7, #20]
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016062:	68f8      	ldr	r0, [r7, #12]
 8016064:	f7f8 fd24 	bl	800eab0 <pbuf_clen>
 8016068:	4603      	mov	r3, r0
 801606a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801606c:	8bfa      	ldrh	r2, [r7, #30]
 801606e:	8a7b      	ldrh	r3, [r7, #18]
 8016070:	4413      	add	r3, r2
 8016072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016076:	db05      	blt.n	8016084 <ip_reass_free_complete_datagram+0xe0>
 8016078:	4b15      	ldr	r3, [pc, #84]	; (80160d0 <ip_reass_free_complete_datagram+0x12c>)
 801607a:	22cc      	movs	r2, #204	; 0xcc
 801607c:	4918      	ldr	r1, [pc, #96]	; (80160e0 <ip_reass_free_complete_datagram+0x13c>)
 801607e:	4816      	ldr	r0, [pc, #88]	; (80160d8 <ip_reass_free_complete_datagram+0x134>)
 8016080:	f000 ffb4 	bl	8016fec <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016084:	8bfa      	ldrh	r2, [r7, #30]
 8016086:	8a7b      	ldrh	r3, [r7, #18]
 8016088:	4413      	add	r3, r2
 801608a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801608c:	68f8      	ldr	r0, [r7, #12]
 801608e:	f7f8 fc81 	bl	800e994 <pbuf_free>
  while (p != NULL) {
 8016092:	69bb      	ldr	r3, [r7, #24]
 8016094:	2b00      	cmp	r3, #0
 8016096:	d1dc      	bne.n	8016052 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016098:	6839      	ldr	r1, [r7, #0]
 801609a:	6878      	ldr	r0, [r7, #4]
 801609c:	f000 f8c2 	bl	8016224 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80160a0:	4b10      	ldr	r3, [pc, #64]	; (80160e4 <ip_reass_free_complete_datagram+0x140>)
 80160a2:	881b      	ldrh	r3, [r3, #0]
 80160a4:	8bfa      	ldrh	r2, [r7, #30]
 80160a6:	429a      	cmp	r2, r3
 80160a8:	d905      	bls.n	80160b6 <ip_reass_free_complete_datagram+0x112>
 80160aa:	4b09      	ldr	r3, [pc, #36]	; (80160d0 <ip_reass_free_complete_datagram+0x12c>)
 80160ac:	22d2      	movs	r2, #210	; 0xd2
 80160ae:	490e      	ldr	r1, [pc, #56]	; (80160e8 <ip_reass_free_complete_datagram+0x144>)
 80160b0:	4809      	ldr	r0, [pc, #36]	; (80160d8 <ip_reass_free_complete_datagram+0x134>)
 80160b2:	f000 ff9b 	bl	8016fec <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80160b6:	4b0b      	ldr	r3, [pc, #44]	; (80160e4 <ip_reass_free_complete_datagram+0x140>)
 80160b8:	881a      	ldrh	r2, [r3, #0]
 80160ba:	8bfb      	ldrh	r3, [r7, #30]
 80160bc:	1ad3      	subs	r3, r2, r3
 80160be:	b29a      	uxth	r2, r3
 80160c0:	4b08      	ldr	r3, [pc, #32]	; (80160e4 <ip_reass_free_complete_datagram+0x140>)
 80160c2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80160c4:	8bfb      	ldrh	r3, [r7, #30]
}
 80160c6:	4618      	mov	r0, r3
 80160c8:	3720      	adds	r7, #32
 80160ca:	46bd      	mov	sp, r7
 80160cc:	bd80      	pop	{r7, pc}
 80160ce:	bf00      	nop
 80160d0:	0801ab7c 	.word	0x0801ab7c
 80160d4:	0801abb8 	.word	0x0801abb8
 80160d8:	0801abc4 	.word	0x0801abc4
 80160dc:	0801abec 	.word	0x0801abec
 80160e0:	0801ac00 	.word	0x0801ac00
 80160e4:	20011178 	.word	0x20011178
 80160e8:	0801ac20 	.word	0x0801ac20

080160ec <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80160ec:	b580      	push	{r7, lr}
 80160ee:	b08a      	sub	sp, #40	; 0x28
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]
 80160f4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80160f6:	2300      	movs	r3, #0
 80160f8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80160fa:	2300      	movs	r3, #0
 80160fc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80160fe:	2300      	movs	r3, #0
 8016100:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016102:	2300      	movs	r3, #0
 8016104:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016106:	2300      	movs	r3, #0
 8016108:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801610a:	4b28      	ldr	r3, [pc, #160]	; (80161ac <ip_reass_remove_oldest_datagram+0xc0>)
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016110:	e030      	b.n	8016174 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016114:	695a      	ldr	r2, [r3, #20]
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	68db      	ldr	r3, [r3, #12]
 801611a:	429a      	cmp	r2, r3
 801611c:	d10c      	bne.n	8016138 <ip_reass_remove_oldest_datagram+0x4c>
 801611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016120:	699a      	ldr	r2, [r3, #24]
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	691b      	ldr	r3, [r3, #16]
 8016126:	429a      	cmp	r2, r3
 8016128:	d106      	bne.n	8016138 <ip_reass_remove_oldest_datagram+0x4c>
 801612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801612c:	899a      	ldrh	r2, [r3, #12]
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	889b      	ldrh	r3, [r3, #4]
 8016132:	b29b      	uxth	r3, r3
 8016134:	429a      	cmp	r2, r3
 8016136:	d014      	beq.n	8016162 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016138:	693b      	ldr	r3, [r7, #16]
 801613a:	3301      	adds	r3, #1
 801613c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801613e:	6a3b      	ldr	r3, [r7, #32]
 8016140:	2b00      	cmp	r3, #0
 8016142:	d104      	bne.n	801614e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016146:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016148:	69fb      	ldr	r3, [r7, #28]
 801614a:	61bb      	str	r3, [r7, #24]
 801614c:	e009      	b.n	8016162 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016150:	7fda      	ldrb	r2, [r3, #31]
 8016152:	6a3b      	ldr	r3, [r7, #32]
 8016154:	7fdb      	ldrb	r3, [r3, #31]
 8016156:	429a      	cmp	r2, r3
 8016158:	d803      	bhi.n	8016162 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801615c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801615e:	69fb      	ldr	r3, [r7, #28]
 8016160:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d001      	beq.n	801616e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801616c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016176:	2b00      	cmp	r3, #0
 8016178:	d1cb      	bne.n	8016112 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801617a:	6a3b      	ldr	r3, [r7, #32]
 801617c:	2b00      	cmp	r3, #0
 801617e:	d008      	beq.n	8016192 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016180:	69b9      	ldr	r1, [r7, #24]
 8016182:	6a38      	ldr	r0, [r7, #32]
 8016184:	f7ff ff0e 	bl	8015fa4 <ip_reass_free_complete_datagram>
 8016188:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801618a:	697a      	ldr	r2, [r7, #20]
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	4413      	add	r3, r2
 8016190:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016192:	697a      	ldr	r2, [r7, #20]
 8016194:	683b      	ldr	r3, [r7, #0]
 8016196:	429a      	cmp	r2, r3
 8016198:	da02      	bge.n	80161a0 <ip_reass_remove_oldest_datagram+0xb4>
 801619a:	693b      	ldr	r3, [r7, #16]
 801619c:	2b01      	cmp	r3, #1
 801619e:	dcac      	bgt.n	80160fa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80161a0:	697b      	ldr	r3, [r7, #20]
}
 80161a2:	4618      	mov	r0, r3
 80161a4:	3728      	adds	r7, #40	; 0x28
 80161a6:	46bd      	mov	sp, r7
 80161a8:	bd80      	pop	{r7, pc}
 80161aa:	bf00      	nop
 80161ac:	20011174 	.word	0x20011174

080161b0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b084      	sub	sp, #16
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	6078      	str	r0, [r7, #4]
 80161b8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80161ba:	2004      	movs	r0, #4
 80161bc:	f7f7 fcd0 	bl	800db60 <memp_malloc>
 80161c0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d110      	bne.n	80161ea <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80161c8:	6839      	ldr	r1, [r7, #0]
 80161ca:	6878      	ldr	r0, [r7, #4]
 80161cc:	f7ff ff8e 	bl	80160ec <ip_reass_remove_oldest_datagram>
 80161d0:	4602      	mov	r2, r0
 80161d2:	683b      	ldr	r3, [r7, #0]
 80161d4:	4293      	cmp	r3, r2
 80161d6:	dc03      	bgt.n	80161e0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80161d8:	2004      	movs	r0, #4
 80161da:	f7f7 fcc1 	bl	800db60 <memp_malloc>
 80161de:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d101      	bne.n	80161ea <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80161e6:	2300      	movs	r3, #0
 80161e8:	e016      	b.n	8016218 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80161ea:	2220      	movs	r2, #32
 80161ec:	2100      	movs	r1, #0
 80161ee:	68f8      	ldr	r0, [r7, #12]
 80161f0:	f000 fef4 	bl	8016fdc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	220f      	movs	r2, #15
 80161f8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80161fa:	4b09      	ldr	r3, [pc, #36]	; (8016220 <ip_reass_enqueue_new_datagram+0x70>)
 80161fc:	681a      	ldr	r2, [r3, #0]
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016202:	4a07      	ldr	r2, [pc, #28]	; (8016220 <ip_reass_enqueue_new_datagram+0x70>)
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	3308      	adds	r3, #8
 801620c:	2214      	movs	r2, #20
 801620e:	6879      	ldr	r1, [r7, #4]
 8016210:	4618      	mov	r0, r3
 8016212:	f000 fed5 	bl	8016fc0 <memcpy>
  return ipr;
 8016216:	68fb      	ldr	r3, [r7, #12]
}
 8016218:	4618      	mov	r0, r3
 801621a:	3710      	adds	r7, #16
 801621c:	46bd      	mov	sp, r7
 801621e:	bd80      	pop	{r7, pc}
 8016220:	20011174 	.word	0x20011174

08016224 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016224:	b580      	push	{r7, lr}
 8016226:	b082      	sub	sp, #8
 8016228:	af00      	add	r7, sp, #0
 801622a:	6078      	str	r0, [r7, #4]
 801622c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801622e:	4b10      	ldr	r3, [pc, #64]	; (8016270 <ip_reass_dequeue_datagram+0x4c>)
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	687a      	ldr	r2, [r7, #4]
 8016234:	429a      	cmp	r2, r3
 8016236:	d104      	bne.n	8016242 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	4a0c      	ldr	r2, [pc, #48]	; (8016270 <ip_reass_dequeue_datagram+0x4c>)
 801623e:	6013      	str	r3, [r2, #0]
 8016240:	e00d      	b.n	801625e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016242:	683b      	ldr	r3, [r7, #0]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d106      	bne.n	8016256 <ip_reass_dequeue_datagram+0x32>
 8016248:	4b0a      	ldr	r3, [pc, #40]	; (8016274 <ip_reass_dequeue_datagram+0x50>)
 801624a:	f240 1245 	movw	r2, #325	; 0x145
 801624e:	490a      	ldr	r1, [pc, #40]	; (8016278 <ip_reass_dequeue_datagram+0x54>)
 8016250:	480a      	ldr	r0, [pc, #40]	; (801627c <ip_reass_dequeue_datagram+0x58>)
 8016252:	f000 fecb 	bl	8016fec <iprintf>
    prev->next = ipr->next;
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	681a      	ldr	r2, [r3, #0]
 801625a:	683b      	ldr	r3, [r7, #0]
 801625c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801625e:	6879      	ldr	r1, [r7, #4]
 8016260:	2004      	movs	r0, #4
 8016262:	f7f7 fcf3 	bl	800dc4c <memp_free>
}
 8016266:	bf00      	nop
 8016268:	3708      	adds	r7, #8
 801626a:	46bd      	mov	sp, r7
 801626c:	bd80      	pop	{r7, pc}
 801626e:	bf00      	nop
 8016270:	20011174 	.word	0x20011174
 8016274:	0801ab7c 	.word	0x0801ab7c
 8016278:	0801ac44 	.word	0x0801ac44
 801627c:	0801abc4 	.word	0x0801abc4

08016280 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016280:	b580      	push	{r7, lr}
 8016282:	b08c      	sub	sp, #48	; 0x30
 8016284:	af00      	add	r7, sp, #0
 8016286:	60f8      	str	r0, [r7, #12]
 8016288:	60b9      	str	r1, [r7, #8]
 801628a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801628c:	2300      	movs	r3, #0
 801628e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016290:	2301      	movs	r3, #1
 8016292:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016294:	68bb      	ldr	r3, [r7, #8]
 8016296:	685b      	ldr	r3, [r3, #4]
 8016298:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801629a:	69fb      	ldr	r3, [r7, #28]
 801629c:	885b      	ldrh	r3, [r3, #2]
 801629e:	b29b      	uxth	r3, r3
 80162a0:	4618      	mov	r0, r3
 80162a2:	f7f6 ff85 	bl	800d1b0 <lwip_htons>
 80162a6:	4603      	mov	r3, r0
 80162a8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80162aa:	69fb      	ldr	r3, [r7, #28]
 80162ac:	781b      	ldrb	r3, [r3, #0]
 80162ae:	f003 030f 	and.w	r3, r3, #15
 80162b2:	b2db      	uxtb	r3, r3
 80162b4:	009b      	lsls	r3, r3, #2
 80162b6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80162b8:	7e7b      	ldrb	r3, [r7, #25]
 80162ba:	b29b      	uxth	r3, r3
 80162bc:	8b7a      	ldrh	r2, [r7, #26]
 80162be:	429a      	cmp	r2, r3
 80162c0:	d202      	bcs.n	80162c8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80162c2:	f04f 33ff 	mov.w	r3, #4294967295
 80162c6:	e135      	b.n	8016534 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80162c8:	7e7b      	ldrb	r3, [r7, #25]
 80162ca:	b29b      	uxth	r3, r3
 80162cc:	8b7a      	ldrh	r2, [r7, #26]
 80162ce:	1ad3      	subs	r3, r2, r3
 80162d0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80162d2:	69fb      	ldr	r3, [r7, #28]
 80162d4:	88db      	ldrh	r3, [r3, #6]
 80162d6:	b29b      	uxth	r3, r3
 80162d8:	4618      	mov	r0, r3
 80162da:	f7f6 ff69 	bl	800d1b0 <lwip_htons>
 80162de:	4603      	mov	r3, r0
 80162e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80162e4:	b29b      	uxth	r3, r3
 80162e6:	00db      	lsls	r3, r3, #3
 80162e8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80162ea:	68bb      	ldr	r3, [r7, #8]
 80162ec:	685b      	ldr	r3, [r3, #4]
 80162ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80162f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162f2:	2200      	movs	r2, #0
 80162f4:	701a      	strb	r2, [r3, #0]
 80162f6:	2200      	movs	r2, #0
 80162f8:	705a      	strb	r2, [r3, #1]
 80162fa:	2200      	movs	r2, #0
 80162fc:	709a      	strb	r2, [r3, #2]
 80162fe:	2200      	movs	r2, #0
 8016300:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016304:	8afa      	ldrh	r2, [r7, #22]
 8016306:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016308:	8afa      	ldrh	r2, [r7, #22]
 801630a:	8b7b      	ldrh	r3, [r7, #26]
 801630c:	4413      	add	r3, r2
 801630e:	b29a      	uxth	r2, r3
 8016310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016312:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016316:	88db      	ldrh	r3, [r3, #6]
 8016318:	b29b      	uxth	r3, r3
 801631a:	8afa      	ldrh	r2, [r7, #22]
 801631c:	429a      	cmp	r2, r3
 801631e:	d902      	bls.n	8016326 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016320:	f04f 33ff 	mov.w	r3, #4294967295
 8016324:	e106      	b.n	8016534 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	685b      	ldr	r3, [r3, #4]
 801632a:	627b      	str	r3, [r7, #36]	; 0x24
 801632c:	e068      	b.n	8016400 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016330:	685b      	ldr	r3, [r3, #4]
 8016332:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016336:	889b      	ldrh	r3, [r3, #4]
 8016338:	b29a      	uxth	r2, r3
 801633a:	693b      	ldr	r3, [r7, #16]
 801633c:	889b      	ldrh	r3, [r3, #4]
 801633e:	b29b      	uxth	r3, r3
 8016340:	429a      	cmp	r2, r3
 8016342:	d235      	bcs.n	80163b0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016348:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801634a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801634c:	2b00      	cmp	r3, #0
 801634e:	d020      	beq.n	8016392 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016352:	889b      	ldrh	r3, [r3, #4]
 8016354:	b29a      	uxth	r2, r3
 8016356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016358:	88db      	ldrh	r3, [r3, #6]
 801635a:	b29b      	uxth	r3, r3
 801635c:	429a      	cmp	r2, r3
 801635e:	d307      	bcc.n	8016370 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016362:	88db      	ldrh	r3, [r3, #6]
 8016364:	b29a      	uxth	r2, r3
 8016366:	693b      	ldr	r3, [r7, #16]
 8016368:	889b      	ldrh	r3, [r3, #4]
 801636a:	b29b      	uxth	r3, r3
 801636c:	429a      	cmp	r2, r3
 801636e:	d902      	bls.n	8016376 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016370:	f04f 33ff 	mov.w	r3, #4294967295
 8016374:	e0de      	b.n	8016534 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016378:	68ba      	ldr	r2, [r7, #8]
 801637a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801637c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801637e:	88db      	ldrh	r3, [r3, #6]
 8016380:	b29a      	uxth	r2, r3
 8016382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016384:	889b      	ldrh	r3, [r3, #4]
 8016386:	b29b      	uxth	r3, r3
 8016388:	429a      	cmp	r2, r3
 801638a:	d03d      	beq.n	8016408 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801638c:	2300      	movs	r3, #0
 801638e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016390:	e03a      	b.n	8016408 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016394:	88db      	ldrh	r3, [r3, #6]
 8016396:	b29a      	uxth	r2, r3
 8016398:	693b      	ldr	r3, [r7, #16]
 801639a:	889b      	ldrh	r3, [r3, #4]
 801639c:	b29b      	uxth	r3, r3
 801639e:	429a      	cmp	r2, r3
 80163a0:	d902      	bls.n	80163a8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80163a2:	f04f 33ff 	mov.w	r3, #4294967295
 80163a6:	e0c5      	b.n	8016534 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	68ba      	ldr	r2, [r7, #8]
 80163ac:	605a      	str	r2, [r3, #4]
      break;
 80163ae:	e02b      	b.n	8016408 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80163b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163b2:	889b      	ldrh	r3, [r3, #4]
 80163b4:	b29a      	uxth	r2, r3
 80163b6:	693b      	ldr	r3, [r7, #16]
 80163b8:	889b      	ldrh	r3, [r3, #4]
 80163ba:	b29b      	uxth	r3, r3
 80163bc:	429a      	cmp	r2, r3
 80163be:	d102      	bne.n	80163c6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80163c0:	f04f 33ff 	mov.w	r3, #4294967295
 80163c4:	e0b6      	b.n	8016534 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80163c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163c8:	889b      	ldrh	r3, [r3, #4]
 80163ca:	b29a      	uxth	r2, r3
 80163cc:	693b      	ldr	r3, [r7, #16]
 80163ce:	88db      	ldrh	r3, [r3, #6]
 80163d0:	b29b      	uxth	r3, r3
 80163d2:	429a      	cmp	r2, r3
 80163d4:	d202      	bcs.n	80163dc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80163d6:	f04f 33ff 	mov.w	r3, #4294967295
 80163da:	e0ab      	b.n	8016534 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80163dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d009      	beq.n	80163f6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80163e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163e4:	88db      	ldrh	r3, [r3, #6]
 80163e6:	b29a      	uxth	r2, r3
 80163e8:	693b      	ldr	r3, [r7, #16]
 80163ea:	889b      	ldrh	r3, [r3, #4]
 80163ec:	b29b      	uxth	r3, r3
 80163ee:	429a      	cmp	r2, r3
 80163f0:	d001      	beq.n	80163f6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80163f2:	2300      	movs	r3, #0
 80163f4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80163f6:	693b      	ldr	r3, [r7, #16]
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80163fc:	693b      	ldr	r3, [r7, #16]
 80163fe:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016402:	2b00      	cmp	r3, #0
 8016404:	d193      	bne.n	801632e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016406:	e000      	b.n	801640a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016408:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801640c:	2b00      	cmp	r3, #0
 801640e:	d12d      	bne.n	801646c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016412:	2b00      	cmp	r3, #0
 8016414:	d01c      	beq.n	8016450 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016418:	88db      	ldrh	r3, [r3, #6]
 801641a:	b29a      	uxth	r2, r3
 801641c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801641e:	889b      	ldrh	r3, [r3, #4]
 8016420:	b29b      	uxth	r3, r3
 8016422:	429a      	cmp	r2, r3
 8016424:	d906      	bls.n	8016434 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016426:	4b45      	ldr	r3, [pc, #276]	; (801653c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016428:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801642c:	4944      	ldr	r1, [pc, #272]	; (8016540 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801642e:	4845      	ldr	r0, [pc, #276]	; (8016544 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016430:	f000 fddc 	bl	8016fec <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016436:	68ba      	ldr	r2, [r7, #8]
 8016438:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801643a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801643c:	88db      	ldrh	r3, [r3, #6]
 801643e:	b29a      	uxth	r2, r3
 8016440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016442:	889b      	ldrh	r3, [r3, #4]
 8016444:	b29b      	uxth	r3, r3
 8016446:	429a      	cmp	r2, r3
 8016448:	d010      	beq.n	801646c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801644a:	2300      	movs	r3, #0
 801644c:	623b      	str	r3, [r7, #32]
 801644e:	e00d      	b.n	801646c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	685b      	ldr	r3, [r3, #4]
 8016454:	2b00      	cmp	r3, #0
 8016456:	d006      	beq.n	8016466 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016458:	4b38      	ldr	r3, [pc, #224]	; (801653c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801645a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801645e:	493a      	ldr	r1, [pc, #232]	; (8016548 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016460:	4838      	ldr	r0, [pc, #224]	; (8016544 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016462:	f000 fdc3 	bl	8016fec <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	68ba      	ldr	r2, [r7, #8]
 801646a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	2b00      	cmp	r3, #0
 8016470:	d105      	bne.n	801647e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	7f9b      	ldrb	r3, [r3, #30]
 8016476:	f003 0301 	and.w	r3, r3, #1
 801647a:	2b00      	cmp	r3, #0
 801647c:	d059      	beq.n	8016532 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801647e:	6a3b      	ldr	r3, [r7, #32]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d04f      	beq.n	8016524 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	685b      	ldr	r3, [r3, #4]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d006      	beq.n	801649a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	685b      	ldr	r3, [r3, #4]
 8016490:	685b      	ldr	r3, [r3, #4]
 8016492:	889b      	ldrh	r3, [r3, #4]
 8016494:	b29b      	uxth	r3, r3
 8016496:	2b00      	cmp	r3, #0
 8016498:	d002      	beq.n	80164a0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801649a:	2300      	movs	r3, #0
 801649c:	623b      	str	r3, [r7, #32]
 801649e:	e041      	b.n	8016524 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80164a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164a2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80164a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80164aa:	e012      	b.n	80164d2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80164ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164ae:	685b      	ldr	r3, [r3, #4]
 80164b0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80164b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164b4:	88db      	ldrh	r3, [r3, #6]
 80164b6:	b29a      	uxth	r2, r3
 80164b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ba:	889b      	ldrh	r3, [r3, #4]
 80164bc:	b29b      	uxth	r3, r3
 80164be:	429a      	cmp	r2, r3
 80164c0:	d002      	beq.n	80164c8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80164c2:	2300      	movs	r3, #0
 80164c4:	623b      	str	r3, [r7, #32]
            break;
 80164c6:	e007      	b.n	80164d8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80164c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ca:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80164cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80164d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d1e9      	bne.n	80164ac <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80164d8:	6a3b      	ldr	r3, [r7, #32]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d022      	beq.n	8016524 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	685b      	ldr	r3, [r3, #4]
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d106      	bne.n	80164f4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80164e6:	4b15      	ldr	r3, [pc, #84]	; (801653c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80164e8:	f240 12df 	movw	r2, #479	; 0x1df
 80164ec:	4917      	ldr	r1, [pc, #92]	; (801654c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80164ee:	4815      	ldr	r0, [pc, #84]	; (8016544 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80164f0:	f000 fd7c 	bl	8016fec <iprintf>
          LWIP_ASSERT("sanity check",
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	685b      	ldr	r3, [r3, #4]
 80164f8:	685b      	ldr	r3, [r3, #4]
 80164fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80164fc:	429a      	cmp	r2, r3
 80164fe:	d106      	bne.n	801650e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016500:	4b0e      	ldr	r3, [pc, #56]	; (801653c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016502:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016506:	4911      	ldr	r1, [pc, #68]	; (801654c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016508:	480e      	ldr	r0, [pc, #56]	; (8016544 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801650a:	f000 fd6f 	bl	8016fec <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801650e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	2b00      	cmp	r3, #0
 8016514:	d006      	beq.n	8016524 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016516:	4b09      	ldr	r3, [pc, #36]	; (801653c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016518:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801651c:	490c      	ldr	r1, [pc, #48]	; (8016550 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801651e:	4809      	ldr	r0, [pc, #36]	; (8016544 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016520:	f000 fd64 	bl	8016fec <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016524:	6a3b      	ldr	r3, [r7, #32]
 8016526:	2b00      	cmp	r3, #0
 8016528:	bf14      	ite	ne
 801652a:	2301      	movne	r3, #1
 801652c:	2300      	moveq	r3, #0
 801652e:	b2db      	uxtb	r3, r3
 8016530:	e000      	b.n	8016534 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016532:	2300      	movs	r3, #0
}
 8016534:	4618      	mov	r0, r3
 8016536:	3730      	adds	r7, #48	; 0x30
 8016538:	46bd      	mov	sp, r7
 801653a:	bd80      	pop	{r7, pc}
 801653c:	0801ab7c 	.word	0x0801ab7c
 8016540:	0801ac60 	.word	0x0801ac60
 8016544:	0801abc4 	.word	0x0801abc4
 8016548:	0801ac80 	.word	0x0801ac80
 801654c:	0801acb8 	.word	0x0801acb8
 8016550:	0801acc8 	.word	0x0801acc8

08016554 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016554:	b580      	push	{r7, lr}
 8016556:	b08e      	sub	sp, #56	; 0x38
 8016558:	af00      	add	r7, sp, #0
 801655a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	685b      	ldr	r3, [r3, #4]
 8016560:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016564:	781b      	ldrb	r3, [r3, #0]
 8016566:	f003 030f 	and.w	r3, r3, #15
 801656a:	b2db      	uxtb	r3, r3
 801656c:	009b      	lsls	r3, r3, #2
 801656e:	b2db      	uxtb	r3, r3
 8016570:	2b14      	cmp	r3, #20
 8016572:	f040 8171 	bne.w	8016858 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016578:	88db      	ldrh	r3, [r3, #6]
 801657a:	b29b      	uxth	r3, r3
 801657c:	4618      	mov	r0, r3
 801657e:	f7f6 fe17 	bl	800d1b0 <lwip_htons>
 8016582:	4603      	mov	r3, r0
 8016584:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016588:	b29b      	uxth	r3, r3
 801658a:	00db      	lsls	r3, r3, #3
 801658c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801658e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016590:	885b      	ldrh	r3, [r3, #2]
 8016592:	b29b      	uxth	r3, r3
 8016594:	4618      	mov	r0, r3
 8016596:	f7f6 fe0b 	bl	800d1b0 <lwip_htons>
 801659a:	4603      	mov	r3, r0
 801659c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801659e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165a0:	781b      	ldrb	r3, [r3, #0]
 80165a2:	f003 030f 	and.w	r3, r3, #15
 80165a6:	b2db      	uxtb	r3, r3
 80165a8:	009b      	lsls	r3, r3, #2
 80165aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80165ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80165b2:	b29b      	uxth	r3, r3
 80165b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80165b6:	429a      	cmp	r2, r3
 80165b8:	f0c0 8150 	bcc.w	801685c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80165bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80165c0:	b29b      	uxth	r3, r3
 80165c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80165c4:	1ad3      	subs	r3, r2, r3
 80165c6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80165c8:	6878      	ldr	r0, [r7, #4]
 80165ca:	f7f8 fa71 	bl	800eab0 <pbuf_clen>
 80165ce:	4603      	mov	r3, r0
 80165d0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80165d2:	4b8c      	ldr	r3, [pc, #560]	; (8016804 <ip4_reass+0x2b0>)
 80165d4:	881b      	ldrh	r3, [r3, #0]
 80165d6:	461a      	mov	r2, r3
 80165d8:	8c3b      	ldrh	r3, [r7, #32]
 80165da:	4413      	add	r3, r2
 80165dc:	2b0a      	cmp	r3, #10
 80165de:	dd10      	ble.n	8016602 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80165e0:	8c3b      	ldrh	r3, [r7, #32]
 80165e2:	4619      	mov	r1, r3
 80165e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80165e6:	f7ff fd81 	bl	80160ec <ip_reass_remove_oldest_datagram>
 80165ea:	4603      	mov	r3, r0
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	f000 8137 	beq.w	8016860 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80165f2:	4b84      	ldr	r3, [pc, #528]	; (8016804 <ip4_reass+0x2b0>)
 80165f4:	881b      	ldrh	r3, [r3, #0]
 80165f6:	461a      	mov	r2, r3
 80165f8:	8c3b      	ldrh	r3, [r7, #32]
 80165fa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80165fc:	2b0a      	cmp	r3, #10
 80165fe:	f300 812f 	bgt.w	8016860 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016602:	4b81      	ldr	r3, [pc, #516]	; (8016808 <ip4_reass+0x2b4>)
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	633b      	str	r3, [r7, #48]	; 0x30
 8016608:	e015      	b.n	8016636 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801660a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801660c:	695a      	ldr	r2, [r3, #20]
 801660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016610:	68db      	ldr	r3, [r3, #12]
 8016612:	429a      	cmp	r2, r3
 8016614:	d10c      	bne.n	8016630 <ip4_reass+0xdc>
 8016616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016618:	699a      	ldr	r2, [r3, #24]
 801661a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801661c:	691b      	ldr	r3, [r3, #16]
 801661e:	429a      	cmp	r2, r3
 8016620:	d106      	bne.n	8016630 <ip4_reass+0xdc>
 8016622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016624:	899a      	ldrh	r2, [r3, #12]
 8016626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016628:	889b      	ldrh	r3, [r3, #4]
 801662a:	b29b      	uxth	r3, r3
 801662c:	429a      	cmp	r2, r3
 801662e:	d006      	beq.n	801663e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016632:	681b      	ldr	r3, [r3, #0]
 8016634:	633b      	str	r3, [r7, #48]	; 0x30
 8016636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016638:	2b00      	cmp	r3, #0
 801663a:	d1e6      	bne.n	801660a <ip4_reass+0xb6>
 801663c:	e000      	b.n	8016640 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801663e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016642:	2b00      	cmp	r3, #0
 8016644:	d109      	bne.n	801665a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016646:	8c3b      	ldrh	r3, [r7, #32]
 8016648:	4619      	mov	r1, r3
 801664a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801664c:	f7ff fdb0 	bl	80161b0 <ip_reass_enqueue_new_datagram>
 8016650:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016654:	2b00      	cmp	r3, #0
 8016656:	d11c      	bne.n	8016692 <ip4_reass+0x13e>
      goto nullreturn;
 8016658:	e105      	b.n	8016866 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801665a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801665c:	88db      	ldrh	r3, [r3, #6]
 801665e:	b29b      	uxth	r3, r3
 8016660:	4618      	mov	r0, r3
 8016662:	f7f6 fda5 	bl	800d1b0 <lwip_htons>
 8016666:	4603      	mov	r3, r0
 8016668:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801666c:	2b00      	cmp	r3, #0
 801666e:	d110      	bne.n	8016692 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016672:	89db      	ldrh	r3, [r3, #14]
 8016674:	4618      	mov	r0, r3
 8016676:	f7f6 fd9b 	bl	800d1b0 <lwip_htons>
 801667a:	4603      	mov	r3, r0
 801667c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016680:	2b00      	cmp	r3, #0
 8016682:	d006      	beq.n	8016692 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016686:	3308      	adds	r3, #8
 8016688:	2214      	movs	r2, #20
 801668a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801668c:	4618      	mov	r0, r3
 801668e:	f000 fc97 	bl	8016fc0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016694:	88db      	ldrh	r3, [r3, #6]
 8016696:	b29b      	uxth	r3, r3
 8016698:	f003 0320 	and.w	r3, r3, #32
 801669c:	2b00      	cmp	r3, #0
 801669e:	bf0c      	ite	eq
 80166a0:	2301      	moveq	r3, #1
 80166a2:	2300      	movne	r3, #0
 80166a4:	b2db      	uxtb	r3, r3
 80166a6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80166a8:	69fb      	ldr	r3, [r7, #28]
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d00e      	beq.n	80166cc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80166ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80166b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80166b2:	4413      	add	r3, r2
 80166b4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80166b6:	8b7a      	ldrh	r2, [r7, #26]
 80166b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80166ba:	429a      	cmp	r2, r3
 80166bc:	f0c0 80a0 	bcc.w	8016800 <ip4_reass+0x2ac>
 80166c0:	8b7b      	ldrh	r3, [r7, #26]
 80166c2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80166c6:	4293      	cmp	r3, r2
 80166c8:	f200 809a 	bhi.w	8016800 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80166cc:	69fa      	ldr	r2, [r7, #28]
 80166ce:	6879      	ldr	r1, [r7, #4]
 80166d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80166d2:	f7ff fdd5 	bl	8016280 <ip_reass_chain_frag_into_datagram_and_validate>
 80166d6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80166d8:	697b      	ldr	r3, [r7, #20]
 80166da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166de:	f000 809b 	beq.w	8016818 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80166e2:	4b48      	ldr	r3, [pc, #288]	; (8016804 <ip4_reass+0x2b0>)
 80166e4:	881a      	ldrh	r2, [r3, #0]
 80166e6:	8c3b      	ldrh	r3, [r7, #32]
 80166e8:	4413      	add	r3, r2
 80166ea:	b29a      	uxth	r2, r3
 80166ec:	4b45      	ldr	r3, [pc, #276]	; (8016804 <ip4_reass+0x2b0>)
 80166ee:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80166f0:	69fb      	ldr	r3, [r7, #28]
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d00d      	beq.n	8016712 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80166f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80166f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80166fa:	4413      	add	r3, r2
 80166fc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80166fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016700:	8a7a      	ldrh	r2, [r7, #18]
 8016702:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016706:	7f9b      	ldrb	r3, [r3, #30]
 8016708:	f043 0301 	orr.w	r3, r3, #1
 801670c:	b2da      	uxtb	r2, r3
 801670e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016710:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016712:	697b      	ldr	r3, [r7, #20]
 8016714:	2b01      	cmp	r3, #1
 8016716:	d171      	bne.n	80167fc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801671a:	8b9b      	ldrh	r3, [r3, #28]
 801671c:	3314      	adds	r3, #20
 801671e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016722:	685b      	ldr	r3, [r3, #4]
 8016724:	685b      	ldr	r3, [r3, #4]
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801672c:	685b      	ldr	r3, [r3, #4]
 801672e:	685b      	ldr	r3, [r3, #4]
 8016730:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016734:	3308      	adds	r3, #8
 8016736:	2214      	movs	r2, #20
 8016738:	4619      	mov	r1, r3
 801673a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801673c:	f000 fc40 	bl	8016fc0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016740:	8a3b      	ldrh	r3, [r7, #16]
 8016742:	4618      	mov	r0, r3
 8016744:	f7f6 fd34 	bl	800d1b0 <lwip_htons>
 8016748:	4603      	mov	r3, r0
 801674a:	461a      	mov	r2, r3
 801674c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801674e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016752:	2200      	movs	r2, #0
 8016754:	719a      	strb	r2, [r3, #6]
 8016756:	2200      	movs	r2, #0
 8016758:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801675a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801675c:	2200      	movs	r2, #0
 801675e:	729a      	strb	r2, [r3, #10]
 8016760:	2200      	movs	r2, #0
 8016762:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016766:	685b      	ldr	r3, [r3, #4]
 8016768:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801676a:	e00d      	b.n	8016788 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801676c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801676e:	685b      	ldr	r3, [r3, #4]
 8016770:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016772:	2114      	movs	r1, #20
 8016774:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016776:	f7f8 f887 	bl	800e888 <pbuf_remove_header>
      pbuf_cat(p, r);
 801677a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801677c:	6878      	ldr	r0, [r7, #4]
 801677e:	f7f8 f9d7 	bl	800eb30 <pbuf_cat>
      r = iprh->next_pbuf;
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801678a:	2b00      	cmp	r3, #0
 801678c:	d1ee      	bne.n	801676c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801678e:	4b1e      	ldr	r3, [pc, #120]	; (8016808 <ip4_reass+0x2b4>)
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016794:	429a      	cmp	r2, r3
 8016796:	d102      	bne.n	801679e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016798:	2300      	movs	r3, #0
 801679a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801679c:	e010      	b.n	80167c0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801679e:	4b1a      	ldr	r3, [pc, #104]	; (8016808 <ip4_reass+0x2b4>)
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80167a4:	e007      	b.n	80167b6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80167a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80167ac:	429a      	cmp	r2, r3
 80167ae:	d006      	beq.n	80167be <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80167b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167b2:	681b      	ldr	r3, [r3, #0]
 80167b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80167b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d1f4      	bne.n	80167a6 <ip4_reass+0x252>
 80167bc:	e000      	b.n	80167c0 <ip4_reass+0x26c>
          break;
 80167be:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80167c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80167c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80167c4:	f7ff fd2e 	bl	8016224 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80167c8:	6878      	ldr	r0, [r7, #4]
 80167ca:	f7f8 f971 	bl	800eab0 <pbuf_clen>
 80167ce:	4603      	mov	r3, r0
 80167d0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80167d2:	4b0c      	ldr	r3, [pc, #48]	; (8016804 <ip4_reass+0x2b0>)
 80167d4:	881b      	ldrh	r3, [r3, #0]
 80167d6:	8c3a      	ldrh	r2, [r7, #32]
 80167d8:	429a      	cmp	r2, r3
 80167da:	d906      	bls.n	80167ea <ip4_reass+0x296>
 80167dc:	4b0b      	ldr	r3, [pc, #44]	; (801680c <ip4_reass+0x2b8>)
 80167de:	f240 229b 	movw	r2, #667	; 0x29b
 80167e2:	490b      	ldr	r1, [pc, #44]	; (8016810 <ip4_reass+0x2bc>)
 80167e4:	480b      	ldr	r0, [pc, #44]	; (8016814 <ip4_reass+0x2c0>)
 80167e6:	f000 fc01 	bl	8016fec <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80167ea:	4b06      	ldr	r3, [pc, #24]	; (8016804 <ip4_reass+0x2b0>)
 80167ec:	881a      	ldrh	r2, [r3, #0]
 80167ee:	8c3b      	ldrh	r3, [r7, #32]
 80167f0:	1ad3      	subs	r3, r2, r3
 80167f2:	b29a      	uxth	r2, r3
 80167f4:	4b03      	ldr	r3, [pc, #12]	; (8016804 <ip4_reass+0x2b0>)
 80167f6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	e038      	b.n	801686e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80167fc:	2300      	movs	r3, #0
 80167fe:	e036      	b.n	801686e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8016800:	bf00      	nop
 8016802:	e00a      	b.n	801681a <ip4_reass+0x2c6>
 8016804:	20011178 	.word	0x20011178
 8016808:	20011174 	.word	0x20011174
 801680c:	0801ab7c 	.word	0x0801ab7c
 8016810:	0801acec 	.word	0x0801acec
 8016814:	0801abc4 	.word	0x0801abc4
    goto nullreturn_ipr;
 8016818:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801681a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801681c:	2b00      	cmp	r3, #0
 801681e:	d106      	bne.n	801682e <ip4_reass+0x2da>
 8016820:	4b15      	ldr	r3, [pc, #84]	; (8016878 <ip4_reass+0x324>)
 8016822:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016826:	4915      	ldr	r1, [pc, #84]	; (801687c <ip4_reass+0x328>)
 8016828:	4815      	ldr	r0, [pc, #84]	; (8016880 <ip4_reass+0x32c>)
 801682a:	f000 fbdf 	bl	8016fec <iprintf>
  if (ipr->p == NULL) {
 801682e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016830:	685b      	ldr	r3, [r3, #4]
 8016832:	2b00      	cmp	r3, #0
 8016834:	d116      	bne.n	8016864 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016836:	4b13      	ldr	r3, [pc, #76]	; (8016884 <ip4_reass+0x330>)
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801683c:	429a      	cmp	r2, r3
 801683e:	d006      	beq.n	801684e <ip4_reass+0x2fa>
 8016840:	4b0d      	ldr	r3, [pc, #52]	; (8016878 <ip4_reass+0x324>)
 8016842:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016846:	4910      	ldr	r1, [pc, #64]	; (8016888 <ip4_reass+0x334>)
 8016848:	480d      	ldr	r0, [pc, #52]	; (8016880 <ip4_reass+0x32c>)
 801684a:	f000 fbcf 	bl	8016fec <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801684e:	2100      	movs	r1, #0
 8016850:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016852:	f7ff fce7 	bl	8016224 <ip_reass_dequeue_datagram>
 8016856:	e006      	b.n	8016866 <ip4_reass+0x312>
    goto nullreturn;
 8016858:	bf00      	nop
 801685a:	e004      	b.n	8016866 <ip4_reass+0x312>
    goto nullreturn;
 801685c:	bf00      	nop
 801685e:	e002      	b.n	8016866 <ip4_reass+0x312>
      goto nullreturn;
 8016860:	bf00      	nop
 8016862:	e000      	b.n	8016866 <ip4_reass+0x312>
  }

nullreturn:
 8016864:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016866:	6878      	ldr	r0, [r7, #4]
 8016868:	f7f8 f894 	bl	800e994 <pbuf_free>
  return NULL;
 801686c:	2300      	movs	r3, #0
}
 801686e:	4618      	mov	r0, r3
 8016870:	3738      	adds	r7, #56	; 0x38
 8016872:	46bd      	mov	sp, r7
 8016874:	bd80      	pop	{r7, pc}
 8016876:	bf00      	nop
 8016878:	0801ab7c 	.word	0x0801ab7c
 801687c:	0801ad08 	.word	0x0801ad08
 8016880:	0801abc4 	.word	0x0801abc4
 8016884:	20011174 	.word	0x20011174
 8016888:	0801ad14 	.word	0x0801ad14

0801688c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801688c:	b580      	push	{r7, lr}
 801688e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016890:	2005      	movs	r0, #5
 8016892:	f7f7 f965 	bl	800db60 <memp_malloc>
 8016896:	4603      	mov	r3, r0
}
 8016898:	4618      	mov	r0, r3
 801689a:	bd80      	pop	{r7, pc}

0801689c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801689c:	b580      	push	{r7, lr}
 801689e:	b082      	sub	sp, #8
 80168a0:	af00      	add	r7, sp, #0
 80168a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d106      	bne.n	80168b8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80168aa:	4b07      	ldr	r3, [pc, #28]	; (80168c8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80168ac:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80168b0:	4906      	ldr	r1, [pc, #24]	; (80168cc <ip_frag_free_pbuf_custom_ref+0x30>)
 80168b2:	4807      	ldr	r0, [pc, #28]	; (80168d0 <ip_frag_free_pbuf_custom_ref+0x34>)
 80168b4:	f000 fb9a 	bl	8016fec <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80168b8:	6879      	ldr	r1, [r7, #4]
 80168ba:	2005      	movs	r0, #5
 80168bc:	f7f7 f9c6 	bl	800dc4c <memp_free>
}
 80168c0:	bf00      	nop
 80168c2:	3708      	adds	r7, #8
 80168c4:	46bd      	mov	sp, r7
 80168c6:	bd80      	pop	{r7, pc}
 80168c8:	0801ab7c 	.word	0x0801ab7c
 80168cc:	0801ad34 	.word	0x0801ad34
 80168d0:	0801abc4 	.word	0x0801abc4

080168d4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b084      	sub	sp, #16
 80168d8:	af00      	add	r7, sp, #0
 80168da:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d106      	bne.n	80168f4 <ipfrag_free_pbuf_custom+0x20>
 80168e6:	4b11      	ldr	r3, [pc, #68]	; (801692c <ipfrag_free_pbuf_custom+0x58>)
 80168e8:	f240 22ce 	movw	r2, #718	; 0x2ce
 80168ec:	4910      	ldr	r1, [pc, #64]	; (8016930 <ipfrag_free_pbuf_custom+0x5c>)
 80168ee:	4811      	ldr	r0, [pc, #68]	; (8016934 <ipfrag_free_pbuf_custom+0x60>)
 80168f0:	f000 fb7c 	bl	8016fec <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80168f4:	68fa      	ldr	r2, [r7, #12]
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	429a      	cmp	r2, r3
 80168fa:	d006      	beq.n	801690a <ipfrag_free_pbuf_custom+0x36>
 80168fc:	4b0b      	ldr	r3, [pc, #44]	; (801692c <ipfrag_free_pbuf_custom+0x58>)
 80168fe:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016902:	490d      	ldr	r1, [pc, #52]	; (8016938 <ipfrag_free_pbuf_custom+0x64>)
 8016904:	480b      	ldr	r0, [pc, #44]	; (8016934 <ipfrag_free_pbuf_custom+0x60>)
 8016906:	f000 fb71 	bl	8016fec <iprintf>
  if (pcr->original != NULL) {
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	695b      	ldr	r3, [r3, #20]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d004      	beq.n	801691c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	695b      	ldr	r3, [r3, #20]
 8016916:	4618      	mov	r0, r3
 8016918:	f7f8 f83c 	bl	800e994 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801691c:	68f8      	ldr	r0, [r7, #12]
 801691e:	f7ff ffbd 	bl	801689c <ip_frag_free_pbuf_custom_ref>
}
 8016922:	bf00      	nop
 8016924:	3710      	adds	r7, #16
 8016926:	46bd      	mov	sp, r7
 8016928:	bd80      	pop	{r7, pc}
 801692a:	bf00      	nop
 801692c:	0801ab7c 	.word	0x0801ab7c
 8016930:	0801ad40 	.word	0x0801ad40
 8016934:	0801abc4 	.word	0x0801abc4
 8016938:	0801ad4c 	.word	0x0801ad4c

0801693c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801693c:	b580      	push	{r7, lr}
 801693e:	b094      	sub	sp, #80	; 0x50
 8016940:	af02      	add	r7, sp, #8
 8016942:	60f8      	str	r0, [r7, #12]
 8016944:	60b9      	str	r1, [r7, #8]
 8016946:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016948:	2300      	movs	r3, #0
 801694a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801694e:	68bb      	ldr	r3, [r7, #8]
 8016950:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016952:	3b14      	subs	r3, #20
 8016954:	2b00      	cmp	r3, #0
 8016956:	da00      	bge.n	801695a <ip4_frag+0x1e>
 8016958:	3307      	adds	r3, #7
 801695a:	10db      	asrs	r3, r3, #3
 801695c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801695e:	2314      	movs	r3, #20
 8016960:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	685b      	ldr	r3, [r3, #4]
 8016966:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801696a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801696c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801696e:	781b      	ldrb	r3, [r3, #0]
 8016970:	f003 030f 	and.w	r3, r3, #15
 8016974:	b2db      	uxtb	r3, r3
 8016976:	009b      	lsls	r3, r3, #2
 8016978:	b2db      	uxtb	r3, r3
 801697a:	2b14      	cmp	r3, #20
 801697c:	d002      	beq.n	8016984 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801697e:	f06f 0305 	mvn.w	r3, #5
 8016982:	e110      	b.n	8016ba6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	895b      	ldrh	r3, [r3, #10]
 8016988:	2b13      	cmp	r3, #19
 801698a:	d809      	bhi.n	80169a0 <ip4_frag+0x64>
 801698c:	4b88      	ldr	r3, [pc, #544]	; (8016bb0 <ip4_frag+0x274>)
 801698e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016992:	4988      	ldr	r1, [pc, #544]	; (8016bb4 <ip4_frag+0x278>)
 8016994:	4888      	ldr	r0, [pc, #544]	; (8016bb8 <ip4_frag+0x27c>)
 8016996:	f000 fb29 	bl	8016fec <iprintf>
 801699a:	f06f 0305 	mvn.w	r3, #5
 801699e:	e102      	b.n	8016ba6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80169a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169a2:	88db      	ldrh	r3, [r3, #6]
 80169a4:	b29b      	uxth	r3, r3
 80169a6:	4618      	mov	r0, r3
 80169a8:	f7f6 fc02 	bl	800d1b0 <lwip_htons>
 80169ac:	4603      	mov	r3, r0
 80169ae:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80169b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80169b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80169b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80169ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80169bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80169c0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	891b      	ldrh	r3, [r3, #8]
 80169c6:	3b14      	subs	r3, #20
 80169c8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80169cc:	e0e1      	b.n	8016b92 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80169ce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80169d0:	00db      	lsls	r3, r3, #3
 80169d2:	b29b      	uxth	r3, r3
 80169d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80169d8:	4293      	cmp	r3, r2
 80169da:	bf28      	it	cs
 80169dc:	4613      	movcs	r3, r2
 80169de:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80169e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80169e4:	2114      	movs	r1, #20
 80169e6:	200e      	movs	r0, #14
 80169e8:	f7f7 fcf0 	bl	800e3cc <pbuf_alloc>
 80169ec:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80169ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	f000 80d5 	beq.w	8016ba0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80169f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169f8:	895b      	ldrh	r3, [r3, #10]
 80169fa:	2b13      	cmp	r3, #19
 80169fc:	d806      	bhi.n	8016a0c <ip4_frag+0xd0>
 80169fe:	4b6c      	ldr	r3, [pc, #432]	; (8016bb0 <ip4_frag+0x274>)
 8016a00:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016a04:	496d      	ldr	r1, [pc, #436]	; (8016bbc <ip4_frag+0x280>)
 8016a06:	486c      	ldr	r0, [pc, #432]	; (8016bb8 <ip4_frag+0x27c>)
 8016a08:	f000 faf0 	bl	8016fec <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a0e:	685b      	ldr	r3, [r3, #4]
 8016a10:	2214      	movs	r2, #20
 8016a12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016a14:	4618      	mov	r0, r3
 8016a16:	f000 fad3 	bl	8016fc0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a1c:	685b      	ldr	r3, [r3, #4]
 8016a1e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016a20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016a22:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016a26:	e064      	b.n	8016af2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	895a      	ldrh	r2, [r3, #10]
 8016a2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016a2e:	1ad3      	subs	r3, r2, r3
 8016a30:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	895b      	ldrh	r3, [r3, #10]
 8016a36:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016a38:	429a      	cmp	r2, r3
 8016a3a:	d906      	bls.n	8016a4a <ip4_frag+0x10e>
 8016a3c:	4b5c      	ldr	r3, [pc, #368]	; (8016bb0 <ip4_frag+0x274>)
 8016a3e:	f240 322d 	movw	r2, #813	; 0x32d
 8016a42:	495f      	ldr	r1, [pc, #380]	; (8016bc0 <ip4_frag+0x284>)
 8016a44:	485c      	ldr	r0, [pc, #368]	; (8016bb8 <ip4_frag+0x27c>)
 8016a46:	f000 fad1 	bl	8016fec <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016a4a:	8bfa      	ldrh	r2, [r7, #30]
 8016a4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016a50:	4293      	cmp	r3, r2
 8016a52:	bf28      	it	cs
 8016a54:	4613      	movcs	r3, r2
 8016a56:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016a5a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d105      	bne.n	8016a6e <ip4_frag+0x132>
        poff = 0;
 8016a62:	2300      	movs	r3, #0
 8016a64:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	60fb      	str	r3, [r7, #12]
        continue;
 8016a6c:	e041      	b.n	8016af2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016a6e:	f7ff ff0d 	bl	801688c <ip_frag_alloc_pbuf_custom_ref>
 8016a72:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016a74:	69bb      	ldr	r3, [r7, #24]
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d103      	bne.n	8016a82 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016a7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016a7c:	f7f7 ff8a 	bl	800e994 <pbuf_free>
        goto memerr;
 8016a80:	e08f      	b.n	8016ba2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016a82:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016a88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016a8a:	4413      	add	r3, r2
 8016a8c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016a90:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016a94:	9201      	str	r2, [sp, #4]
 8016a96:	9300      	str	r3, [sp, #0]
 8016a98:	4603      	mov	r3, r0
 8016a9a:	2241      	movs	r2, #65	; 0x41
 8016a9c:	2000      	movs	r0, #0
 8016a9e:	f7f7 fdbf 	bl	800e620 <pbuf_alloced_custom>
 8016aa2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016aa4:	697b      	ldr	r3, [r7, #20]
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d106      	bne.n	8016ab8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016aaa:	69b8      	ldr	r0, [r7, #24]
 8016aac:	f7ff fef6 	bl	801689c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016ab0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016ab2:	f7f7 ff6f 	bl	800e994 <pbuf_free>
        goto memerr;
 8016ab6:	e074      	b.n	8016ba2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016ab8:	68f8      	ldr	r0, [r7, #12]
 8016aba:	f7f8 f811 	bl	800eae0 <pbuf_ref>
      pcr->original = p;
 8016abe:	69bb      	ldr	r3, [r7, #24]
 8016ac0:	68fa      	ldr	r2, [r7, #12]
 8016ac2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016ac4:	69bb      	ldr	r3, [r7, #24]
 8016ac6:	4a3f      	ldr	r2, [pc, #252]	; (8016bc4 <ip4_frag+0x288>)
 8016ac8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016aca:	6979      	ldr	r1, [r7, #20]
 8016acc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016ace:	f7f8 f82f 	bl	800eb30 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016ad2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016ad6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016ada:	1ad3      	subs	r3, r2, r3
 8016adc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016ae0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d004      	beq.n	8016af2 <ip4_frag+0x1b6>
        poff = 0;
 8016ae8:	2300      	movs	r3, #0
 8016aea:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016af2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d196      	bne.n	8016a28 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016afa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016afc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016b00:	4413      	add	r3, r2
 8016b02:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016b04:	68bb      	ldr	r3, [r7, #8]
 8016b06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016b08:	f1a3 0213 	sub.w	r2, r3, #19
 8016b0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016b10:	429a      	cmp	r2, r3
 8016b12:	bfcc      	ite	gt
 8016b14:	2301      	movgt	r3, #1
 8016b16:	2300      	movle	r3, #0
 8016b18:	b2db      	uxtb	r3, r3
 8016b1a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016b1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016b20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016b24:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016b26:	6a3b      	ldr	r3, [r7, #32]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d002      	beq.n	8016b32 <ip4_frag+0x1f6>
 8016b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d003      	beq.n	8016b3a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016b32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016b34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016b38:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016b3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016b3c:	4618      	mov	r0, r3
 8016b3e:	f7f6 fb37 	bl	800d1b0 <lwip_htons>
 8016b42:	4603      	mov	r3, r0
 8016b44:	461a      	mov	r2, r3
 8016b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b48:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016b4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016b4c:	3314      	adds	r3, #20
 8016b4e:	b29b      	uxth	r3, r3
 8016b50:	4618      	mov	r0, r3
 8016b52:	f7f6 fb2d 	bl	800d1b0 <lwip_htons>
 8016b56:	4603      	mov	r3, r0
 8016b58:	461a      	mov	r2, r3
 8016b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b5c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b60:	2200      	movs	r2, #0
 8016b62:	729a      	strb	r2, [r3, #10]
 8016b64:	2200      	movs	r2, #0
 8016b66:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016b68:	68bb      	ldr	r3, [r7, #8]
 8016b6a:	695b      	ldr	r3, [r3, #20]
 8016b6c:	687a      	ldr	r2, [r7, #4]
 8016b6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016b70:	68b8      	ldr	r0, [r7, #8]
 8016b72:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016b74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016b76:	f7f7 ff0d 	bl	800e994 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016b7a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016b7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016b80:	1ad3      	subs	r3, r2, r3
 8016b82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016b86:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016b8a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016b8c:	4413      	add	r3, r2
 8016b8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016b92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	f47f af19 	bne.w	80169ce <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016b9c:	2300      	movs	r3, #0
 8016b9e:	e002      	b.n	8016ba6 <ip4_frag+0x26a>
      goto memerr;
 8016ba0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016ba2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016ba6:	4618      	mov	r0, r3
 8016ba8:	3748      	adds	r7, #72	; 0x48
 8016baa:	46bd      	mov	sp, r7
 8016bac:	bd80      	pop	{r7, pc}
 8016bae:	bf00      	nop
 8016bb0:	0801ab7c 	.word	0x0801ab7c
 8016bb4:	0801ad58 	.word	0x0801ad58
 8016bb8:	0801abc4 	.word	0x0801abc4
 8016bbc:	0801ad74 	.word	0x0801ad74
 8016bc0:	0801ad94 	.word	0x0801ad94
 8016bc4:	080168d5 	.word	0x080168d5

08016bc8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016bc8:	b580      	push	{r7, lr}
 8016bca:	b086      	sub	sp, #24
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	6078      	str	r0, [r7, #4]
 8016bd0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016bd2:	230e      	movs	r3, #14
 8016bd4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	895b      	ldrh	r3, [r3, #10]
 8016bda:	2b0e      	cmp	r3, #14
 8016bdc:	d96e      	bls.n	8016cbc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	7bdb      	ldrb	r3, [r3, #15]
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d106      	bne.n	8016bf4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016be6:	683b      	ldr	r3, [r7, #0]
 8016be8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016bec:	3301      	adds	r3, #1
 8016bee:	b2da      	uxtb	r2, r3
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	685b      	ldr	r3, [r3, #4]
 8016bf8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016bfa:	693b      	ldr	r3, [r7, #16]
 8016bfc:	7b1a      	ldrb	r2, [r3, #12]
 8016bfe:	7b5b      	ldrb	r3, [r3, #13]
 8016c00:	021b      	lsls	r3, r3, #8
 8016c02:	4313      	orrs	r3, r2
 8016c04:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016c06:	693b      	ldr	r3, [r7, #16]
 8016c08:	781b      	ldrb	r3, [r3, #0]
 8016c0a:	f003 0301 	and.w	r3, r3, #1
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d023      	beq.n	8016c5a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016c12:	693b      	ldr	r3, [r7, #16]
 8016c14:	781b      	ldrb	r3, [r3, #0]
 8016c16:	2b01      	cmp	r3, #1
 8016c18:	d10f      	bne.n	8016c3a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016c1a:	693b      	ldr	r3, [r7, #16]
 8016c1c:	785b      	ldrb	r3, [r3, #1]
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d11b      	bne.n	8016c5a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016c22:	693b      	ldr	r3, [r7, #16]
 8016c24:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016c26:	2b5e      	cmp	r3, #94	; 0x5e
 8016c28:	d117      	bne.n	8016c5a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	7b5b      	ldrb	r3, [r3, #13]
 8016c2e:	f043 0310 	orr.w	r3, r3, #16
 8016c32:	b2da      	uxtb	r2, r3
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	735a      	strb	r2, [r3, #13]
 8016c38:	e00f      	b.n	8016c5a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016c3a:	693b      	ldr	r3, [r7, #16]
 8016c3c:	2206      	movs	r2, #6
 8016c3e:	4928      	ldr	r1, [pc, #160]	; (8016ce0 <ethernet_input+0x118>)
 8016c40:	4618      	mov	r0, r3
 8016c42:	f000 f9ad 	bl	8016fa0 <memcmp>
 8016c46:	4603      	mov	r3, r0
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d106      	bne.n	8016c5a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	7b5b      	ldrb	r3, [r3, #13]
 8016c50:	f043 0308 	orr.w	r3, r3, #8
 8016c54:	b2da      	uxtb	r2, r3
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016c5a:	89fb      	ldrh	r3, [r7, #14]
 8016c5c:	2b08      	cmp	r3, #8
 8016c5e:	d003      	beq.n	8016c68 <ethernet_input+0xa0>
 8016c60:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016c64:	d014      	beq.n	8016c90 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016c66:	e032      	b.n	8016cce <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016c68:	683b      	ldr	r3, [r7, #0]
 8016c6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016c6e:	f003 0308 	and.w	r3, r3, #8
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d024      	beq.n	8016cc0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016c76:	8afb      	ldrh	r3, [r7, #22]
 8016c78:	4619      	mov	r1, r3
 8016c7a:	6878      	ldr	r0, [r7, #4]
 8016c7c:	f7f7 fe04 	bl	800e888 <pbuf_remove_header>
 8016c80:	4603      	mov	r3, r0
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d11e      	bne.n	8016cc4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016c86:	6839      	ldr	r1, [r7, #0]
 8016c88:	6878      	ldr	r0, [r7, #4]
 8016c8a:	f7fe ff21 	bl	8015ad0 <ip4_input>
      break;
 8016c8e:	e013      	b.n	8016cb8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016c90:	683b      	ldr	r3, [r7, #0]
 8016c92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016c96:	f003 0308 	and.w	r3, r3, #8
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d014      	beq.n	8016cc8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016c9e:	8afb      	ldrh	r3, [r7, #22]
 8016ca0:	4619      	mov	r1, r3
 8016ca2:	6878      	ldr	r0, [r7, #4]
 8016ca4:	f7f7 fdf0 	bl	800e888 <pbuf_remove_header>
 8016ca8:	4603      	mov	r3, r0
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d10e      	bne.n	8016ccc <ethernet_input+0x104>
        etharp_input(p, netif);
 8016cae:	6839      	ldr	r1, [r7, #0]
 8016cb0:	6878      	ldr	r0, [r7, #4]
 8016cb2:	f7fe f8c1 	bl	8014e38 <etharp_input>
      break;
 8016cb6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016cb8:	2300      	movs	r3, #0
 8016cba:	e00c      	b.n	8016cd6 <ethernet_input+0x10e>
    goto free_and_return;
 8016cbc:	bf00      	nop
 8016cbe:	e006      	b.n	8016cce <ethernet_input+0x106>
        goto free_and_return;
 8016cc0:	bf00      	nop
 8016cc2:	e004      	b.n	8016cce <ethernet_input+0x106>
        goto free_and_return;
 8016cc4:	bf00      	nop
 8016cc6:	e002      	b.n	8016cce <ethernet_input+0x106>
        goto free_and_return;
 8016cc8:	bf00      	nop
 8016cca:	e000      	b.n	8016cce <ethernet_input+0x106>
        goto free_and_return;
 8016ccc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016cce:	6878      	ldr	r0, [r7, #4]
 8016cd0:	f7f7 fe60 	bl	800e994 <pbuf_free>
  return ERR_OK;
 8016cd4:	2300      	movs	r3, #0
}
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	3718      	adds	r7, #24
 8016cda:	46bd      	mov	sp, r7
 8016cdc:	bd80      	pop	{r7, pc}
 8016cde:	bf00      	nop
 8016ce0:	0801afe4 	.word	0x0801afe4

08016ce4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016ce4:	b580      	push	{r7, lr}
 8016ce6:	b086      	sub	sp, #24
 8016ce8:	af00      	add	r7, sp, #0
 8016cea:	60f8      	str	r0, [r7, #12]
 8016cec:	60b9      	str	r1, [r7, #8]
 8016cee:	607a      	str	r2, [r7, #4]
 8016cf0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016cf2:	8c3b      	ldrh	r3, [r7, #32]
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	f7f6 fa5b 	bl	800d1b0 <lwip_htons>
 8016cfa:	4603      	mov	r3, r0
 8016cfc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016cfe:	210e      	movs	r1, #14
 8016d00:	68b8      	ldr	r0, [r7, #8]
 8016d02:	f7f7 fdb1 	bl	800e868 <pbuf_add_header>
 8016d06:	4603      	mov	r3, r0
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d125      	bne.n	8016d58 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016d0c:	68bb      	ldr	r3, [r7, #8]
 8016d0e:	685b      	ldr	r3, [r3, #4]
 8016d10:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016d12:	693b      	ldr	r3, [r7, #16]
 8016d14:	8afa      	ldrh	r2, [r7, #22]
 8016d16:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016d18:	693b      	ldr	r3, [r7, #16]
 8016d1a:	2206      	movs	r2, #6
 8016d1c:	6839      	ldr	r1, [r7, #0]
 8016d1e:	4618      	mov	r0, r3
 8016d20:	f000 f94e 	bl	8016fc0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016d24:	693b      	ldr	r3, [r7, #16]
 8016d26:	3306      	adds	r3, #6
 8016d28:	2206      	movs	r2, #6
 8016d2a:	6879      	ldr	r1, [r7, #4]
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	f000 f947 	bl	8016fc0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016d38:	2b06      	cmp	r3, #6
 8016d3a:	d006      	beq.n	8016d4a <ethernet_output+0x66>
 8016d3c:	4b0a      	ldr	r3, [pc, #40]	; (8016d68 <ethernet_output+0x84>)
 8016d3e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016d42:	490a      	ldr	r1, [pc, #40]	; (8016d6c <ethernet_output+0x88>)
 8016d44:	480a      	ldr	r0, [pc, #40]	; (8016d70 <ethernet_output+0x8c>)
 8016d46:	f000 f951 	bl	8016fec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016d4a:	68fb      	ldr	r3, [r7, #12]
 8016d4c:	699b      	ldr	r3, [r3, #24]
 8016d4e:	68b9      	ldr	r1, [r7, #8]
 8016d50:	68f8      	ldr	r0, [r7, #12]
 8016d52:	4798      	blx	r3
 8016d54:	4603      	mov	r3, r0
 8016d56:	e002      	b.n	8016d5e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016d58:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016d5a:	f06f 0301 	mvn.w	r3, #1
}
 8016d5e:	4618      	mov	r0, r3
 8016d60:	3718      	adds	r7, #24
 8016d62:	46bd      	mov	sp, r7
 8016d64:	bd80      	pop	{r7, pc}
 8016d66:	bf00      	nop
 8016d68:	0801ada4 	.word	0x0801ada4
 8016d6c:	0801addc 	.word	0x0801addc
 8016d70:	0801ae10 	.word	0x0801ae10

08016d74 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016d74:	b580      	push	{r7, lr}
 8016d76:	b082      	sub	sp, #8
 8016d78:	af00      	add	r7, sp, #0
 8016d7a:	6078      	str	r0, [r7, #4]
 8016d7c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8016d7e:	683b      	ldr	r3, [r7, #0]
 8016d80:	2200      	movs	r2, #0
 8016d82:	2104      	movs	r1, #4
 8016d84:	4618      	mov	r0, r3
 8016d86:	f7f2 fd51 	bl	800982c <osMessageQueueNew>
 8016d8a:	4602      	mov	r2, r0
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d102      	bne.n	8016d9e <sys_mbox_new+0x2a>
    return ERR_MEM;
 8016d98:	f04f 33ff 	mov.w	r3, #4294967295
 8016d9c:	e000      	b.n	8016da0 <sys_mbox_new+0x2c>

  return ERR_OK;
 8016d9e:	2300      	movs	r3, #0
}
 8016da0:	4618      	mov	r0, r3
 8016da2:	3708      	adds	r7, #8
 8016da4:	46bd      	mov	sp, r7
 8016da6:	bd80      	pop	{r7, pc}

08016da8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016da8:	b580      	push	{r7, lr}
 8016daa:	b084      	sub	sp, #16
 8016dac:	af00      	add	r7, sp, #0
 8016dae:	6078      	str	r0, [r7, #4]
 8016db0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	6818      	ldr	r0, [r3, #0]
 8016db6:	4639      	mov	r1, r7
 8016db8:	2300      	movs	r3, #0
 8016dba:	2200      	movs	r2, #0
 8016dbc:	f7f2 fdbc 	bl	8009938 <osMessageQueuePut>
 8016dc0:	4603      	mov	r3, r0
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d102      	bne.n	8016dcc <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8016dc6:	2300      	movs	r3, #0
 8016dc8:	73fb      	strb	r3, [r7, #15]
 8016dca:	e001      	b.n	8016dd0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016dcc:	23ff      	movs	r3, #255	; 0xff
 8016dce:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016dd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016dd4:	4618      	mov	r0, r3
 8016dd6:	3710      	adds	r7, #16
 8016dd8:	46bd      	mov	sp, r7
 8016dda:	bd80      	pop	{r7, pc}

08016ddc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016ddc:	b580      	push	{r7, lr}
 8016dde:	b086      	sub	sp, #24
 8016de0:	af00      	add	r7, sp, #0
 8016de2:	60f8      	str	r0, [r7, #12]
 8016de4:	60b9      	str	r1, [r7, #8]
 8016de6:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8016de8:	f7f2 f982 	bl	80090f0 <osKernelGetTickCount>
 8016dec:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d013      	beq.n	8016e1c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	6818      	ldr	r0, [r3, #0]
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	2200      	movs	r2, #0
 8016dfc:	68b9      	ldr	r1, [r7, #8]
 8016dfe:	f7f2 fe0f 	bl	8009a20 <osMessageQueueGet>
 8016e02:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8016e04:	693b      	ldr	r3, [r7, #16]
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d105      	bne.n	8016e16 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8016e0a:	f7f2 f971 	bl	80090f0 <osKernelGetTickCount>
 8016e0e:	4602      	mov	r2, r0
 8016e10:	697b      	ldr	r3, [r7, #20]
 8016e12:	1ad3      	subs	r3, r2, r3
 8016e14:	e00f      	b.n	8016e36 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016e16:	f04f 33ff 	mov.w	r3, #4294967295
 8016e1a:	e00c      	b.n	8016e36 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8016e1c:	68fb      	ldr	r3, [r7, #12]
 8016e1e:	6818      	ldr	r0, [r3, #0]
 8016e20:	f04f 33ff 	mov.w	r3, #4294967295
 8016e24:	2200      	movs	r2, #0
 8016e26:	68b9      	ldr	r1, [r7, #8]
 8016e28:	f7f2 fdfa 	bl	8009a20 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8016e2c:	f7f2 f960 	bl	80090f0 <osKernelGetTickCount>
 8016e30:	4602      	mov	r2, r0
 8016e32:	697b      	ldr	r3, [r7, #20]
 8016e34:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8016e36:	4618      	mov	r0, r3
 8016e38:	3718      	adds	r7, #24
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	bd80      	pop	{r7, pc}

08016e3e <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016e3e:	b480      	push	{r7}
 8016e40:	b083      	sub	sp, #12
 8016e42:	af00      	add	r7, sp, #0
 8016e44:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d101      	bne.n	8016e52 <sys_mbox_valid+0x14>
    return 0;
 8016e4e:	2300      	movs	r3, #0
 8016e50:	e000      	b.n	8016e54 <sys_mbox_valid+0x16>
  else
    return 1;
 8016e52:	2301      	movs	r3, #1
}
 8016e54:	4618      	mov	r0, r3
 8016e56:	370c      	adds	r7, #12
 8016e58:	46bd      	mov	sp, r7
 8016e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e5e:	4770      	bx	lr

08016e60 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016e60:	b580      	push	{r7, lr}
 8016e62:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8016e64:	2000      	movs	r0, #0
 8016e66:	f7f2 fa3f 	bl	80092e8 <osMutexNew>
 8016e6a:	4603      	mov	r3, r0
 8016e6c:	4a01      	ldr	r2, [pc, #4]	; (8016e74 <sys_init+0x14>)
 8016e6e:	6013      	str	r3, [r2, #0]
#endif
}
 8016e70:	bf00      	nop
 8016e72:	bd80      	pop	{r7, pc}
 8016e74:	20011180 	.word	0x20011180

08016e78 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016e78:	b580      	push	{r7, lr}
 8016e7a:	b082      	sub	sp, #8
 8016e7c:	af00      	add	r7, sp, #0
 8016e7e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8016e80:	2000      	movs	r0, #0
 8016e82:	f7f2 fa31 	bl	80092e8 <osMutexNew>
 8016e86:	4602      	mov	r2, r0
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d102      	bne.n	8016e9a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016e94:	f04f 33ff 	mov.w	r3, #4294967295
 8016e98:	e000      	b.n	8016e9c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016e9a:	2300      	movs	r3, #0
}
 8016e9c:	4618      	mov	r0, r3
 8016e9e:	3708      	adds	r7, #8
 8016ea0:	46bd      	mov	sp, r7
 8016ea2:	bd80      	pop	{r7, pc}

08016ea4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016ea4:	b580      	push	{r7, lr}
 8016ea6:	b082      	sub	sp, #8
 8016ea8:	af00      	add	r7, sp, #0
 8016eaa:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8016eb4:	4618      	mov	r0, r3
 8016eb6:	f7f2 fab1 	bl	800941c <osMutexAcquire>
#endif
}
 8016eba:	bf00      	nop
 8016ebc:	3708      	adds	r7, #8
 8016ebe:	46bd      	mov	sp, r7
 8016ec0:	bd80      	pop	{r7, pc}

08016ec2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016ec2:	b580      	push	{r7, lr}
 8016ec4:	b082      	sub	sp, #8
 8016ec6:	af00      	add	r7, sp, #0
 8016ec8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	4618      	mov	r0, r3
 8016ed0:	f7f2 fb02 	bl	80094d8 <osMutexRelease>
}
 8016ed4:	bf00      	nop
 8016ed6:	3708      	adds	r7, #8
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	bd80      	pop	{r7, pc}

08016edc <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016edc:	b580      	push	{r7, lr}
 8016ede:	b08e      	sub	sp, #56	; 0x38
 8016ee0:	af00      	add	r7, sp, #0
 8016ee2:	60f8      	str	r0, [r7, #12]
 8016ee4:	60b9      	str	r1, [r7, #8]
 8016ee6:	607a      	str	r2, [r7, #4]
 8016ee8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8016eea:	f107 0314 	add.w	r3, r7, #20
 8016eee:	2224      	movs	r2, #36	; 0x24
 8016ef0:	2100      	movs	r1, #0
 8016ef2:	4618      	mov	r0, r3
 8016ef4:	f000 f872 	bl	8016fdc <memset>
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	617b      	str	r3, [r7, #20]
 8016efc:	683b      	ldr	r3, [r7, #0]
 8016efe:	62bb      	str	r3, [r7, #40]	; 0x28
 8016f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f02:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8016f04:	f107 0314 	add.w	r3, r7, #20
 8016f08:	461a      	mov	r2, r3
 8016f0a:	6879      	ldr	r1, [r7, #4]
 8016f0c:	68b8      	ldr	r0, [r7, #8]
 8016f0e:	f7f2 f917 	bl	8009140 <osThreadNew>
 8016f12:	4603      	mov	r3, r0
#endif
}
 8016f14:	4618      	mov	r0, r3
 8016f16:	3738      	adds	r7, #56	; 0x38
 8016f18:	46bd      	mov	sp, r7
 8016f1a:	bd80      	pop	{r7, pc}

08016f1c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016f1c:	b580      	push	{r7, lr}
 8016f1e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8016f20:	4b04      	ldr	r3, [pc, #16]	; (8016f34 <sys_arch_protect+0x18>)
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	f04f 31ff 	mov.w	r1, #4294967295
 8016f28:	4618      	mov	r0, r3
 8016f2a:	f7f2 fa77 	bl	800941c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8016f2e:	2301      	movs	r3, #1
}
 8016f30:	4618      	mov	r0, r3
 8016f32:	bd80      	pop	{r7, pc}
 8016f34:	20011180 	.word	0x20011180

08016f38 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016f38:	b580      	push	{r7, lr}
 8016f3a:	b082      	sub	sp, #8
 8016f3c:	af00      	add	r7, sp, #0
 8016f3e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016f40:	4b04      	ldr	r3, [pc, #16]	; (8016f54 <sys_arch_unprotect+0x1c>)
 8016f42:	681b      	ldr	r3, [r3, #0]
 8016f44:	4618      	mov	r0, r3
 8016f46:	f7f2 fac7 	bl	80094d8 <osMutexRelease>
}
 8016f4a:	bf00      	nop
 8016f4c:	3708      	adds	r7, #8
 8016f4e:	46bd      	mov	sp, r7
 8016f50:	bd80      	pop	{r7, pc}
 8016f52:	bf00      	nop
 8016f54:	20011180 	.word	0x20011180

08016f58 <__libc_init_array>:
 8016f58:	b570      	push	{r4, r5, r6, lr}
 8016f5a:	4d0d      	ldr	r5, [pc, #52]	; (8016f90 <__libc_init_array+0x38>)
 8016f5c:	4c0d      	ldr	r4, [pc, #52]	; (8016f94 <__libc_init_array+0x3c>)
 8016f5e:	1b64      	subs	r4, r4, r5
 8016f60:	10a4      	asrs	r4, r4, #2
 8016f62:	2600      	movs	r6, #0
 8016f64:	42a6      	cmp	r6, r4
 8016f66:	d109      	bne.n	8016f7c <__libc_init_array+0x24>
 8016f68:	4d0b      	ldr	r5, [pc, #44]	; (8016f98 <__libc_init_array+0x40>)
 8016f6a:	4c0c      	ldr	r4, [pc, #48]	; (8016f9c <__libc_init_array+0x44>)
 8016f6c:	f001 f904 	bl	8018178 <_init>
 8016f70:	1b64      	subs	r4, r4, r5
 8016f72:	10a4      	asrs	r4, r4, #2
 8016f74:	2600      	movs	r6, #0
 8016f76:	42a6      	cmp	r6, r4
 8016f78:	d105      	bne.n	8016f86 <__libc_init_array+0x2e>
 8016f7a:	bd70      	pop	{r4, r5, r6, pc}
 8016f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016f80:	4798      	blx	r3
 8016f82:	3601      	adds	r6, #1
 8016f84:	e7ee      	b.n	8016f64 <__libc_init_array+0xc>
 8016f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8016f8a:	4798      	blx	r3
 8016f8c:	3601      	adds	r6, #1
 8016f8e:	e7f2      	b.n	8016f76 <__libc_init_array+0x1e>
 8016f90:	0801b144 	.word	0x0801b144
 8016f94:	0801b144 	.word	0x0801b144
 8016f98:	0801b144 	.word	0x0801b144
 8016f9c:	0801b148 	.word	0x0801b148

08016fa0 <memcmp>:
 8016fa0:	b510      	push	{r4, lr}
 8016fa2:	3901      	subs	r1, #1
 8016fa4:	4402      	add	r2, r0
 8016fa6:	4290      	cmp	r0, r2
 8016fa8:	d101      	bne.n	8016fae <memcmp+0xe>
 8016faa:	2000      	movs	r0, #0
 8016fac:	e005      	b.n	8016fba <memcmp+0x1a>
 8016fae:	7803      	ldrb	r3, [r0, #0]
 8016fb0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016fb4:	42a3      	cmp	r3, r4
 8016fb6:	d001      	beq.n	8016fbc <memcmp+0x1c>
 8016fb8:	1b18      	subs	r0, r3, r4
 8016fba:	bd10      	pop	{r4, pc}
 8016fbc:	3001      	adds	r0, #1
 8016fbe:	e7f2      	b.n	8016fa6 <memcmp+0x6>

08016fc0 <memcpy>:
 8016fc0:	440a      	add	r2, r1
 8016fc2:	4291      	cmp	r1, r2
 8016fc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8016fc8:	d100      	bne.n	8016fcc <memcpy+0xc>
 8016fca:	4770      	bx	lr
 8016fcc:	b510      	push	{r4, lr}
 8016fce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016fd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016fd6:	4291      	cmp	r1, r2
 8016fd8:	d1f9      	bne.n	8016fce <memcpy+0xe>
 8016fda:	bd10      	pop	{r4, pc}

08016fdc <memset>:
 8016fdc:	4402      	add	r2, r0
 8016fde:	4603      	mov	r3, r0
 8016fe0:	4293      	cmp	r3, r2
 8016fe2:	d100      	bne.n	8016fe6 <memset+0xa>
 8016fe4:	4770      	bx	lr
 8016fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8016fea:	e7f9      	b.n	8016fe0 <memset+0x4>

08016fec <iprintf>:
 8016fec:	b40f      	push	{r0, r1, r2, r3}
 8016fee:	4b0a      	ldr	r3, [pc, #40]	; (8017018 <iprintf+0x2c>)
 8016ff0:	b513      	push	{r0, r1, r4, lr}
 8016ff2:	681c      	ldr	r4, [r3, #0]
 8016ff4:	b124      	cbz	r4, 8017000 <iprintf+0x14>
 8016ff6:	69a3      	ldr	r3, [r4, #24]
 8016ff8:	b913      	cbnz	r3, 8017000 <iprintf+0x14>
 8016ffa:	4620      	mov	r0, r4
 8016ffc:	f000 faba 	bl	8017574 <__sinit>
 8017000:	ab05      	add	r3, sp, #20
 8017002:	9a04      	ldr	r2, [sp, #16]
 8017004:	68a1      	ldr	r1, [r4, #8]
 8017006:	9301      	str	r3, [sp, #4]
 8017008:	4620      	mov	r0, r4
 801700a:	f000 fcdd 	bl	80179c8 <_vfiprintf_r>
 801700e:	b002      	add	sp, #8
 8017010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017014:	b004      	add	sp, #16
 8017016:	4770      	bx	lr
 8017018:	20000030 	.word	0x20000030

0801701c <_puts_r>:
 801701c:	b570      	push	{r4, r5, r6, lr}
 801701e:	460e      	mov	r6, r1
 8017020:	4605      	mov	r5, r0
 8017022:	b118      	cbz	r0, 801702c <_puts_r+0x10>
 8017024:	6983      	ldr	r3, [r0, #24]
 8017026:	b90b      	cbnz	r3, 801702c <_puts_r+0x10>
 8017028:	f000 faa4 	bl	8017574 <__sinit>
 801702c:	69ab      	ldr	r3, [r5, #24]
 801702e:	68ac      	ldr	r4, [r5, #8]
 8017030:	b913      	cbnz	r3, 8017038 <_puts_r+0x1c>
 8017032:	4628      	mov	r0, r5
 8017034:	f000 fa9e 	bl	8017574 <__sinit>
 8017038:	4b2c      	ldr	r3, [pc, #176]	; (80170ec <_puts_r+0xd0>)
 801703a:	429c      	cmp	r4, r3
 801703c:	d120      	bne.n	8017080 <_puts_r+0x64>
 801703e:	686c      	ldr	r4, [r5, #4]
 8017040:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017042:	07db      	lsls	r3, r3, #31
 8017044:	d405      	bmi.n	8017052 <_puts_r+0x36>
 8017046:	89a3      	ldrh	r3, [r4, #12]
 8017048:	0598      	lsls	r0, r3, #22
 801704a:	d402      	bmi.n	8017052 <_puts_r+0x36>
 801704c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801704e:	f000 fb41 	bl	80176d4 <__retarget_lock_acquire_recursive>
 8017052:	89a3      	ldrh	r3, [r4, #12]
 8017054:	0719      	lsls	r1, r3, #28
 8017056:	d51d      	bpl.n	8017094 <_puts_r+0x78>
 8017058:	6923      	ldr	r3, [r4, #16]
 801705a:	b1db      	cbz	r3, 8017094 <_puts_r+0x78>
 801705c:	3e01      	subs	r6, #1
 801705e:	68a3      	ldr	r3, [r4, #8]
 8017060:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017064:	3b01      	subs	r3, #1
 8017066:	60a3      	str	r3, [r4, #8]
 8017068:	bb39      	cbnz	r1, 80170ba <_puts_r+0x9e>
 801706a:	2b00      	cmp	r3, #0
 801706c:	da38      	bge.n	80170e0 <_puts_r+0xc4>
 801706e:	4622      	mov	r2, r4
 8017070:	210a      	movs	r1, #10
 8017072:	4628      	mov	r0, r5
 8017074:	f000 f886 	bl	8017184 <__swbuf_r>
 8017078:	3001      	adds	r0, #1
 801707a:	d011      	beq.n	80170a0 <_puts_r+0x84>
 801707c:	250a      	movs	r5, #10
 801707e:	e011      	b.n	80170a4 <_puts_r+0x88>
 8017080:	4b1b      	ldr	r3, [pc, #108]	; (80170f0 <_puts_r+0xd4>)
 8017082:	429c      	cmp	r4, r3
 8017084:	d101      	bne.n	801708a <_puts_r+0x6e>
 8017086:	68ac      	ldr	r4, [r5, #8]
 8017088:	e7da      	b.n	8017040 <_puts_r+0x24>
 801708a:	4b1a      	ldr	r3, [pc, #104]	; (80170f4 <_puts_r+0xd8>)
 801708c:	429c      	cmp	r4, r3
 801708e:	bf08      	it	eq
 8017090:	68ec      	ldreq	r4, [r5, #12]
 8017092:	e7d5      	b.n	8017040 <_puts_r+0x24>
 8017094:	4621      	mov	r1, r4
 8017096:	4628      	mov	r0, r5
 8017098:	f000 f8c6 	bl	8017228 <__swsetup_r>
 801709c:	2800      	cmp	r0, #0
 801709e:	d0dd      	beq.n	801705c <_puts_r+0x40>
 80170a0:	f04f 35ff 	mov.w	r5, #4294967295
 80170a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80170a6:	07da      	lsls	r2, r3, #31
 80170a8:	d405      	bmi.n	80170b6 <_puts_r+0x9a>
 80170aa:	89a3      	ldrh	r3, [r4, #12]
 80170ac:	059b      	lsls	r3, r3, #22
 80170ae:	d402      	bmi.n	80170b6 <_puts_r+0x9a>
 80170b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80170b2:	f000 fb10 	bl	80176d6 <__retarget_lock_release_recursive>
 80170b6:	4628      	mov	r0, r5
 80170b8:	bd70      	pop	{r4, r5, r6, pc}
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	da04      	bge.n	80170c8 <_puts_r+0xac>
 80170be:	69a2      	ldr	r2, [r4, #24]
 80170c0:	429a      	cmp	r2, r3
 80170c2:	dc06      	bgt.n	80170d2 <_puts_r+0xb6>
 80170c4:	290a      	cmp	r1, #10
 80170c6:	d004      	beq.n	80170d2 <_puts_r+0xb6>
 80170c8:	6823      	ldr	r3, [r4, #0]
 80170ca:	1c5a      	adds	r2, r3, #1
 80170cc:	6022      	str	r2, [r4, #0]
 80170ce:	7019      	strb	r1, [r3, #0]
 80170d0:	e7c5      	b.n	801705e <_puts_r+0x42>
 80170d2:	4622      	mov	r2, r4
 80170d4:	4628      	mov	r0, r5
 80170d6:	f000 f855 	bl	8017184 <__swbuf_r>
 80170da:	3001      	adds	r0, #1
 80170dc:	d1bf      	bne.n	801705e <_puts_r+0x42>
 80170de:	e7df      	b.n	80170a0 <_puts_r+0x84>
 80170e0:	6823      	ldr	r3, [r4, #0]
 80170e2:	250a      	movs	r5, #10
 80170e4:	1c5a      	adds	r2, r3, #1
 80170e6:	6022      	str	r2, [r4, #0]
 80170e8:	701d      	strb	r5, [r3, #0]
 80170ea:	e7db      	b.n	80170a4 <_puts_r+0x88>
 80170ec:	0801b0c8 	.word	0x0801b0c8
 80170f0:	0801b0e8 	.word	0x0801b0e8
 80170f4:	0801b0a8 	.word	0x0801b0a8

080170f8 <puts>:
 80170f8:	4b02      	ldr	r3, [pc, #8]	; (8017104 <puts+0xc>)
 80170fa:	4601      	mov	r1, r0
 80170fc:	6818      	ldr	r0, [r3, #0]
 80170fe:	f7ff bf8d 	b.w	801701c <_puts_r>
 8017102:	bf00      	nop
 8017104:	20000030 	.word	0x20000030

08017108 <rand>:
 8017108:	4b16      	ldr	r3, [pc, #88]	; (8017164 <rand+0x5c>)
 801710a:	b510      	push	{r4, lr}
 801710c:	681c      	ldr	r4, [r3, #0]
 801710e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017110:	b9b3      	cbnz	r3, 8017140 <rand+0x38>
 8017112:	2018      	movs	r0, #24
 8017114:	f000 fb46 	bl	80177a4 <malloc>
 8017118:	63a0      	str	r0, [r4, #56]	; 0x38
 801711a:	b928      	cbnz	r0, 8017128 <rand+0x20>
 801711c:	4602      	mov	r2, r0
 801711e:	4b12      	ldr	r3, [pc, #72]	; (8017168 <rand+0x60>)
 8017120:	4812      	ldr	r0, [pc, #72]	; (801716c <rand+0x64>)
 8017122:	214e      	movs	r1, #78	; 0x4e
 8017124:	f000 f8ee 	bl	8017304 <__assert_func>
 8017128:	4a11      	ldr	r2, [pc, #68]	; (8017170 <rand+0x68>)
 801712a:	4b12      	ldr	r3, [pc, #72]	; (8017174 <rand+0x6c>)
 801712c:	e9c0 2300 	strd	r2, r3, [r0]
 8017130:	4b11      	ldr	r3, [pc, #68]	; (8017178 <rand+0x70>)
 8017132:	6083      	str	r3, [r0, #8]
 8017134:	230b      	movs	r3, #11
 8017136:	8183      	strh	r3, [r0, #12]
 8017138:	2201      	movs	r2, #1
 801713a:	2300      	movs	r3, #0
 801713c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017140:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8017142:	4a0e      	ldr	r2, [pc, #56]	; (801717c <rand+0x74>)
 8017144:	6920      	ldr	r0, [r4, #16]
 8017146:	6963      	ldr	r3, [r4, #20]
 8017148:	490d      	ldr	r1, [pc, #52]	; (8017180 <rand+0x78>)
 801714a:	4342      	muls	r2, r0
 801714c:	fb01 2203 	mla	r2, r1, r3, r2
 8017150:	fba0 0101 	umull	r0, r1, r0, r1
 8017154:	1c43      	adds	r3, r0, #1
 8017156:	eb42 0001 	adc.w	r0, r2, r1
 801715a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801715e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017162:	bd10      	pop	{r4, pc}
 8017164:	20000030 	.word	0x20000030
 8017168:	0801aff8 	.word	0x0801aff8
 801716c:	0801b00f 	.word	0x0801b00f
 8017170:	abcd330e 	.word	0xabcd330e
 8017174:	e66d1234 	.word	0xe66d1234
 8017178:	0005deec 	.word	0x0005deec
 801717c:	5851f42d 	.word	0x5851f42d
 8017180:	4c957f2d 	.word	0x4c957f2d

08017184 <__swbuf_r>:
 8017184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017186:	460e      	mov	r6, r1
 8017188:	4614      	mov	r4, r2
 801718a:	4605      	mov	r5, r0
 801718c:	b118      	cbz	r0, 8017196 <__swbuf_r+0x12>
 801718e:	6983      	ldr	r3, [r0, #24]
 8017190:	b90b      	cbnz	r3, 8017196 <__swbuf_r+0x12>
 8017192:	f000 f9ef 	bl	8017574 <__sinit>
 8017196:	4b21      	ldr	r3, [pc, #132]	; (801721c <__swbuf_r+0x98>)
 8017198:	429c      	cmp	r4, r3
 801719a:	d12b      	bne.n	80171f4 <__swbuf_r+0x70>
 801719c:	686c      	ldr	r4, [r5, #4]
 801719e:	69a3      	ldr	r3, [r4, #24]
 80171a0:	60a3      	str	r3, [r4, #8]
 80171a2:	89a3      	ldrh	r3, [r4, #12]
 80171a4:	071a      	lsls	r2, r3, #28
 80171a6:	d52f      	bpl.n	8017208 <__swbuf_r+0x84>
 80171a8:	6923      	ldr	r3, [r4, #16]
 80171aa:	b36b      	cbz	r3, 8017208 <__swbuf_r+0x84>
 80171ac:	6923      	ldr	r3, [r4, #16]
 80171ae:	6820      	ldr	r0, [r4, #0]
 80171b0:	1ac0      	subs	r0, r0, r3
 80171b2:	6963      	ldr	r3, [r4, #20]
 80171b4:	b2f6      	uxtb	r6, r6
 80171b6:	4283      	cmp	r3, r0
 80171b8:	4637      	mov	r7, r6
 80171ba:	dc04      	bgt.n	80171c6 <__swbuf_r+0x42>
 80171bc:	4621      	mov	r1, r4
 80171be:	4628      	mov	r0, r5
 80171c0:	f000 f944 	bl	801744c <_fflush_r>
 80171c4:	bb30      	cbnz	r0, 8017214 <__swbuf_r+0x90>
 80171c6:	68a3      	ldr	r3, [r4, #8]
 80171c8:	3b01      	subs	r3, #1
 80171ca:	60a3      	str	r3, [r4, #8]
 80171cc:	6823      	ldr	r3, [r4, #0]
 80171ce:	1c5a      	adds	r2, r3, #1
 80171d0:	6022      	str	r2, [r4, #0]
 80171d2:	701e      	strb	r6, [r3, #0]
 80171d4:	6963      	ldr	r3, [r4, #20]
 80171d6:	3001      	adds	r0, #1
 80171d8:	4283      	cmp	r3, r0
 80171da:	d004      	beq.n	80171e6 <__swbuf_r+0x62>
 80171dc:	89a3      	ldrh	r3, [r4, #12]
 80171de:	07db      	lsls	r3, r3, #31
 80171e0:	d506      	bpl.n	80171f0 <__swbuf_r+0x6c>
 80171e2:	2e0a      	cmp	r6, #10
 80171e4:	d104      	bne.n	80171f0 <__swbuf_r+0x6c>
 80171e6:	4621      	mov	r1, r4
 80171e8:	4628      	mov	r0, r5
 80171ea:	f000 f92f 	bl	801744c <_fflush_r>
 80171ee:	b988      	cbnz	r0, 8017214 <__swbuf_r+0x90>
 80171f0:	4638      	mov	r0, r7
 80171f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171f4:	4b0a      	ldr	r3, [pc, #40]	; (8017220 <__swbuf_r+0x9c>)
 80171f6:	429c      	cmp	r4, r3
 80171f8:	d101      	bne.n	80171fe <__swbuf_r+0x7a>
 80171fa:	68ac      	ldr	r4, [r5, #8]
 80171fc:	e7cf      	b.n	801719e <__swbuf_r+0x1a>
 80171fe:	4b09      	ldr	r3, [pc, #36]	; (8017224 <__swbuf_r+0xa0>)
 8017200:	429c      	cmp	r4, r3
 8017202:	bf08      	it	eq
 8017204:	68ec      	ldreq	r4, [r5, #12]
 8017206:	e7ca      	b.n	801719e <__swbuf_r+0x1a>
 8017208:	4621      	mov	r1, r4
 801720a:	4628      	mov	r0, r5
 801720c:	f000 f80c 	bl	8017228 <__swsetup_r>
 8017210:	2800      	cmp	r0, #0
 8017212:	d0cb      	beq.n	80171ac <__swbuf_r+0x28>
 8017214:	f04f 37ff 	mov.w	r7, #4294967295
 8017218:	e7ea      	b.n	80171f0 <__swbuf_r+0x6c>
 801721a:	bf00      	nop
 801721c:	0801b0c8 	.word	0x0801b0c8
 8017220:	0801b0e8 	.word	0x0801b0e8
 8017224:	0801b0a8 	.word	0x0801b0a8

08017228 <__swsetup_r>:
 8017228:	4b32      	ldr	r3, [pc, #200]	; (80172f4 <__swsetup_r+0xcc>)
 801722a:	b570      	push	{r4, r5, r6, lr}
 801722c:	681d      	ldr	r5, [r3, #0]
 801722e:	4606      	mov	r6, r0
 8017230:	460c      	mov	r4, r1
 8017232:	b125      	cbz	r5, 801723e <__swsetup_r+0x16>
 8017234:	69ab      	ldr	r3, [r5, #24]
 8017236:	b913      	cbnz	r3, 801723e <__swsetup_r+0x16>
 8017238:	4628      	mov	r0, r5
 801723a:	f000 f99b 	bl	8017574 <__sinit>
 801723e:	4b2e      	ldr	r3, [pc, #184]	; (80172f8 <__swsetup_r+0xd0>)
 8017240:	429c      	cmp	r4, r3
 8017242:	d10f      	bne.n	8017264 <__swsetup_r+0x3c>
 8017244:	686c      	ldr	r4, [r5, #4]
 8017246:	89a3      	ldrh	r3, [r4, #12]
 8017248:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801724c:	0719      	lsls	r1, r3, #28
 801724e:	d42c      	bmi.n	80172aa <__swsetup_r+0x82>
 8017250:	06dd      	lsls	r5, r3, #27
 8017252:	d411      	bmi.n	8017278 <__swsetup_r+0x50>
 8017254:	2309      	movs	r3, #9
 8017256:	6033      	str	r3, [r6, #0]
 8017258:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801725c:	81a3      	strh	r3, [r4, #12]
 801725e:	f04f 30ff 	mov.w	r0, #4294967295
 8017262:	e03e      	b.n	80172e2 <__swsetup_r+0xba>
 8017264:	4b25      	ldr	r3, [pc, #148]	; (80172fc <__swsetup_r+0xd4>)
 8017266:	429c      	cmp	r4, r3
 8017268:	d101      	bne.n	801726e <__swsetup_r+0x46>
 801726a:	68ac      	ldr	r4, [r5, #8]
 801726c:	e7eb      	b.n	8017246 <__swsetup_r+0x1e>
 801726e:	4b24      	ldr	r3, [pc, #144]	; (8017300 <__swsetup_r+0xd8>)
 8017270:	429c      	cmp	r4, r3
 8017272:	bf08      	it	eq
 8017274:	68ec      	ldreq	r4, [r5, #12]
 8017276:	e7e6      	b.n	8017246 <__swsetup_r+0x1e>
 8017278:	0758      	lsls	r0, r3, #29
 801727a:	d512      	bpl.n	80172a2 <__swsetup_r+0x7a>
 801727c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801727e:	b141      	cbz	r1, 8017292 <__swsetup_r+0x6a>
 8017280:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017284:	4299      	cmp	r1, r3
 8017286:	d002      	beq.n	801728e <__swsetup_r+0x66>
 8017288:	4630      	mov	r0, r6
 801728a:	f000 fa93 	bl	80177b4 <_free_r>
 801728e:	2300      	movs	r3, #0
 8017290:	6363      	str	r3, [r4, #52]	; 0x34
 8017292:	89a3      	ldrh	r3, [r4, #12]
 8017294:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017298:	81a3      	strh	r3, [r4, #12]
 801729a:	2300      	movs	r3, #0
 801729c:	6063      	str	r3, [r4, #4]
 801729e:	6923      	ldr	r3, [r4, #16]
 80172a0:	6023      	str	r3, [r4, #0]
 80172a2:	89a3      	ldrh	r3, [r4, #12]
 80172a4:	f043 0308 	orr.w	r3, r3, #8
 80172a8:	81a3      	strh	r3, [r4, #12]
 80172aa:	6923      	ldr	r3, [r4, #16]
 80172ac:	b94b      	cbnz	r3, 80172c2 <__swsetup_r+0x9a>
 80172ae:	89a3      	ldrh	r3, [r4, #12]
 80172b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80172b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80172b8:	d003      	beq.n	80172c2 <__swsetup_r+0x9a>
 80172ba:	4621      	mov	r1, r4
 80172bc:	4630      	mov	r0, r6
 80172be:	f000 fa31 	bl	8017724 <__smakebuf_r>
 80172c2:	89a0      	ldrh	r0, [r4, #12]
 80172c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80172c8:	f010 0301 	ands.w	r3, r0, #1
 80172cc:	d00a      	beq.n	80172e4 <__swsetup_r+0xbc>
 80172ce:	2300      	movs	r3, #0
 80172d0:	60a3      	str	r3, [r4, #8]
 80172d2:	6963      	ldr	r3, [r4, #20]
 80172d4:	425b      	negs	r3, r3
 80172d6:	61a3      	str	r3, [r4, #24]
 80172d8:	6923      	ldr	r3, [r4, #16]
 80172da:	b943      	cbnz	r3, 80172ee <__swsetup_r+0xc6>
 80172dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80172e0:	d1ba      	bne.n	8017258 <__swsetup_r+0x30>
 80172e2:	bd70      	pop	{r4, r5, r6, pc}
 80172e4:	0781      	lsls	r1, r0, #30
 80172e6:	bf58      	it	pl
 80172e8:	6963      	ldrpl	r3, [r4, #20]
 80172ea:	60a3      	str	r3, [r4, #8]
 80172ec:	e7f4      	b.n	80172d8 <__swsetup_r+0xb0>
 80172ee:	2000      	movs	r0, #0
 80172f0:	e7f7      	b.n	80172e2 <__swsetup_r+0xba>
 80172f2:	bf00      	nop
 80172f4:	20000030 	.word	0x20000030
 80172f8:	0801b0c8 	.word	0x0801b0c8
 80172fc:	0801b0e8 	.word	0x0801b0e8
 8017300:	0801b0a8 	.word	0x0801b0a8

08017304 <__assert_func>:
 8017304:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017306:	4614      	mov	r4, r2
 8017308:	461a      	mov	r2, r3
 801730a:	4b09      	ldr	r3, [pc, #36]	; (8017330 <__assert_func+0x2c>)
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	4605      	mov	r5, r0
 8017310:	68d8      	ldr	r0, [r3, #12]
 8017312:	b14c      	cbz	r4, 8017328 <__assert_func+0x24>
 8017314:	4b07      	ldr	r3, [pc, #28]	; (8017334 <__assert_func+0x30>)
 8017316:	9100      	str	r1, [sp, #0]
 8017318:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801731c:	4906      	ldr	r1, [pc, #24]	; (8017338 <__assert_func+0x34>)
 801731e:	462b      	mov	r3, r5
 8017320:	f000 f9a6 	bl	8017670 <fiprintf>
 8017324:	f000 fe7a 	bl	801801c <abort>
 8017328:	4b04      	ldr	r3, [pc, #16]	; (801733c <__assert_func+0x38>)
 801732a:	461c      	mov	r4, r3
 801732c:	e7f3      	b.n	8017316 <__assert_func+0x12>
 801732e:	bf00      	nop
 8017330:	20000030 	.word	0x20000030
 8017334:	0801b06a 	.word	0x0801b06a
 8017338:	0801b077 	.word	0x0801b077
 801733c:	0801b0a5 	.word	0x0801b0a5

08017340 <__sflush_r>:
 8017340:	898a      	ldrh	r2, [r1, #12]
 8017342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017346:	4605      	mov	r5, r0
 8017348:	0710      	lsls	r0, r2, #28
 801734a:	460c      	mov	r4, r1
 801734c:	d458      	bmi.n	8017400 <__sflush_r+0xc0>
 801734e:	684b      	ldr	r3, [r1, #4]
 8017350:	2b00      	cmp	r3, #0
 8017352:	dc05      	bgt.n	8017360 <__sflush_r+0x20>
 8017354:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017356:	2b00      	cmp	r3, #0
 8017358:	dc02      	bgt.n	8017360 <__sflush_r+0x20>
 801735a:	2000      	movs	r0, #0
 801735c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017360:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017362:	2e00      	cmp	r6, #0
 8017364:	d0f9      	beq.n	801735a <__sflush_r+0x1a>
 8017366:	2300      	movs	r3, #0
 8017368:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801736c:	682f      	ldr	r7, [r5, #0]
 801736e:	602b      	str	r3, [r5, #0]
 8017370:	d032      	beq.n	80173d8 <__sflush_r+0x98>
 8017372:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017374:	89a3      	ldrh	r3, [r4, #12]
 8017376:	075a      	lsls	r2, r3, #29
 8017378:	d505      	bpl.n	8017386 <__sflush_r+0x46>
 801737a:	6863      	ldr	r3, [r4, #4]
 801737c:	1ac0      	subs	r0, r0, r3
 801737e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017380:	b10b      	cbz	r3, 8017386 <__sflush_r+0x46>
 8017382:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017384:	1ac0      	subs	r0, r0, r3
 8017386:	2300      	movs	r3, #0
 8017388:	4602      	mov	r2, r0
 801738a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801738c:	6a21      	ldr	r1, [r4, #32]
 801738e:	4628      	mov	r0, r5
 8017390:	47b0      	blx	r6
 8017392:	1c43      	adds	r3, r0, #1
 8017394:	89a3      	ldrh	r3, [r4, #12]
 8017396:	d106      	bne.n	80173a6 <__sflush_r+0x66>
 8017398:	6829      	ldr	r1, [r5, #0]
 801739a:	291d      	cmp	r1, #29
 801739c:	d82c      	bhi.n	80173f8 <__sflush_r+0xb8>
 801739e:	4a2a      	ldr	r2, [pc, #168]	; (8017448 <__sflush_r+0x108>)
 80173a0:	40ca      	lsrs	r2, r1
 80173a2:	07d6      	lsls	r6, r2, #31
 80173a4:	d528      	bpl.n	80173f8 <__sflush_r+0xb8>
 80173a6:	2200      	movs	r2, #0
 80173a8:	6062      	str	r2, [r4, #4]
 80173aa:	04d9      	lsls	r1, r3, #19
 80173ac:	6922      	ldr	r2, [r4, #16]
 80173ae:	6022      	str	r2, [r4, #0]
 80173b0:	d504      	bpl.n	80173bc <__sflush_r+0x7c>
 80173b2:	1c42      	adds	r2, r0, #1
 80173b4:	d101      	bne.n	80173ba <__sflush_r+0x7a>
 80173b6:	682b      	ldr	r3, [r5, #0]
 80173b8:	b903      	cbnz	r3, 80173bc <__sflush_r+0x7c>
 80173ba:	6560      	str	r0, [r4, #84]	; 0x54
 80173bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80173be:	602f      	str	r7, [r5, #0]
 80173c0:	2900      	cmp	r1, #0
 80173c2:	d0ca      	beq.n	801735a <__sflush_r+0x1a>
 80173c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80173c8:	4299      	cmp	r1, r3
 80173ca:	d002      	beq.n	80173d2 <__sflush_r+0x92>
 80173cc:	4628      	mov	r0, r5
 80173ce:	f000 f9f1 	bl	80177b4 <_free_r>
 80173d2:	2000      	movs	r0, #0
 80173d4:	6360      	str	r0, [r4, #52]	; 0x34
 80173d6:	e7c1      	b.n	801735c <__sflush_r+0x1c>
 80173d8:	6a21      	ldr	r1, [r4, #32]
 80173da:	2301      	movs	r3, #1
 80173dc:	4628      	mov	r0, r5
 80173de:	47b0      	blx	r6
 80173e0:	1c41      	adds	r1, r0, #1
 80173e2:	d1c7      	bne.n	8017374 <__sflush_r+0x34>
 80173e4:	682b      	ldr	r3, [r5, #0]
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d0c4      	beq.n	8017374 <__sflush_r+0x34>
 80173ea:	2b1d      	cmp	r3, #29
 80173ec:	d001      	beq.n	80173f2 <__sflush_r+0xb2>
 80173ee:	2b16      	cmp	r3, #22
 80173f0:	d101      	bne.n	80173f6 <__sflush_r+0xb6>
 80173f2:	602f      	str	r7, [r5, #0]
 80173f4:	e7b1      	b.n	801735a <__sflush_r+0x1a>
 80173f6:	89a3      	ldrh	r3, [r4, #12]
 80173f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80173fc:	81a3      	strh	r3, [r4, #12]
 80173fe:	e7ad      	b.n	801735c <__sflush_r+0x1c>
 8017400:	690f      	ldr	r7, [r1, #16]
 8017402:	2f00      	cmp	r7, #0
 8017404:	d0a9      	beq.n	801735a <__sflush_r+0x1a>
 8017406:	0793      	lsls	r3, r2, #30
 8017408:	680e      	ldr	r6, [r1, #0]
 801740a:	bf08      	it	eq
 801740c:	694b      	ldreq	r3, [r1, #20]
 801740e:	600f      	str	r7, [r1, #0]
 8017410:	bf18      	it	ne
 8017412:	2300      	movne	r3, #0
 8017414:	eba6 0807 	sub.w	r8, r6, r7
 8017418:	608b      	str	r3, [r1, #8]
 801741a:	f1b8 0f00 	cmp.w	r8, #0
 801741e:	dd9c      	ble.n	801735a <__sflush_r+0x1a>
 8017420:	6a21      	ldr	r1, [r4, #32]
 8017422:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017424:	4643      	mov	r3, r8
 8017426:	463a      	mov	r2, r7
 8017428:	4628      	mov	r0, r5
 801742a:	47b0      	blx	r6
 801742c:	2800      	cmp	r0, #0
 801742e:	dc06      	bgt.n	801743e <__sflush_r+0xfe>
 8017430:	89a3      	ldrh	r3, [r4, #12]
 8017432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017436:	81a3      	strh	r3, [r4, #12]
 8017438:	f04f 30ff 	mov.w	r0, #4294967295
 801743c:	e78e      	b.n	801735c <__sflush_r+0x1c>
 801743e:	4407      	add	r7, r0
 8017440:	eba8 0800 	sub.w	r8, r8, r0
 8017444:	e7e9      	b.n	801741a <__sflush_r+0xda>
 8017446:	bf00      	nop
 8017448:	20400001 	.word	0x20400001

0801744c <_fflush_r>:
 801744c:	b538      	push	{r3, r4, r5, lr}
 801744e:	690b      	ldr	r3, [r1, #16]
 8017450:	4605      	mov	r5, r0
 8017452:	460c      	mov	r4, r1
 8017454:	b913      	cbnz	r3, 801745c <_fflush_r+0x10>
 8017456:	2500      	movs	r5, #0
 8017458:	4628      	mov	r0, r5
 801745a:	bd38      	pop	{r3, r4, r5, pc}
 801745c:	b118      	cbz	r0, 8017466 <_fflush_r+0x1a>
 801745e:	6983      	ldr	r3, [r0, #24]
 8017460:	b90b      	cbnz	r3, 8017466 <_fflush_r+0x1a>
 8017462:	f000 f887 	bl	8017574 <__sinit>
 8017466:	4b14      	ldr	r3, [pc, #80]	; (80174b8 <_fflush_r+0x6c>)
 8017468:	429c      	cmp	r4, r3
 801746a:	d11b      	bne.n	80174a4 <_fflush_r+0x58>
 801746c:	686c      	ldr	r4, [r5, #4]
 801746e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d0ef      	beq.n	8017456 <_fflush_r+0xa>
 8017476:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017478:	07d0      	lsls	r0, r2, #31
 801747a:	d404      	bmi.n	8017486 <_fflush_r+0x3a>
 801747c:	0599      	lsls	r1, r3, #22
 801747e:	d402      	bmi.n	8017486 <_fflush_r+0x3a>
 8017480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017482:	f000 f927 	bl	80176d4 <__retarget_lock_acquire_recursive>
 8017486:	4628      	mov	r0, r5
 8017488:	4621      	mov	r1, r4
 801748a:	f7ff ff59 	bl	8017340 <__sflush_r>
 801748e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017490:	07da      	lsls	r2, r3, #31
 8017492:	4605      	mov	r5, r0
 8017494:	d4e0      	bmi.n	8017458 <_fflush_r+0xc>
 8017496:	89a3      	ldrh	r3, [r4, #12]
 8017498:	059b      	lsls	r3, r3, #22
 801749a:	d4dd      	bmi.n	8017458 <_fflush_r+0xc>
 801749c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801749e:	f000 f91a 	bl	80176d6 <__retarget_lock_release_recursive>
 80174a2:	e7d9      	b.n	8017458 <_fflush_r+0xc>
 80174a4:	4b05      	ldr	r3, [pc, #20]	; (80174bc <_fflush_r+0x70>)
 80174a6:	429c      	cmp	r4, r3
 80174a8:	d101      	bne.n	80174ae <_fflush_r+0x62>
 80174aa:	68ac      	ldr	r4, [r5, #8]
 80174ac:	e7df      	b.n	801746e <_fflush_r+0x22>
 80174ae:	4b04      	ldr	r3, [pc, #16]	; (80174c0 <_fflush_r+0x74>)
 80174b0:	429c      	cmp	r4, r3
 80174b2:	bf08      	it	eq
 80174b4:	68ec      	ldreq	r4, [r5, #12]
 80174b6:	e7da      	b.n	801746e <_fflush_r+0x22>
 80174b8:	0801b0c8 	.word	0x0801b0c8
 80174bc:	0801b0e8 	.word	0x0801b0e8
 80174c0:	0801b0a8 	.word	0x0801b0a8

080174c4 <std>:
 80174c4:	2300      	movs	r3, #0
 80174c6:	b510      	push	{r4, lr}
 80174c8:	4604      	mov	r4, r0
 80174ca:	e9c0 3300 	strd	r3, r3, [r0]
 80174ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80174d2:	6083      	str	r3, [r0, #8]
 80174d4:	8181      	strh	r1, [r0, #12]
 80174d6:	6643      	str	r3, [r0, #100]	; 0x64
 80174d8:	81c2      	strh	r2, [r0, #14]
 80174da:	6183      	str	r3, [r0, #24]
 80174dc:	4619      	mov	r1, r3
 80174de:	2208      	movs	r2, #8
 80174e0:	305c      	adds	r0, #92	; 0x5c
 80174e2:	f7ff fd7b 	bl	8016fdc <memset>
 80174e6:	4b05      	ldr	r3, [pc, #20]	; (80174fc <std+0x38>)
 80174e8:	6263      	str	r3, [r4, #36]	; 0x24
 80174ea:	4b05      	ldr	r3, [pc, #20]	; (8017500 <std+0x3c>)
 80174ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80174ee:	4b05      	ldr	r3, [pc, #20]	; (8017504 <std+0x40>)
 80174f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80174f2:	4b05      	ldr	r3, [pc, #20]	; (8017508 <std+0x44>)
 80174f4:	6224      	str	r4, [r4, #32]
 80174f6:	6323      	str	r3, [r4, #48]	; 0x30
 80174f8:	bd10      	pop	{r4, pc}
 80174fa:	bf00      	nop
 80174fc:	08017f71 	.word	0x08017f71
 8017500:	08017f93 	.word	0x08017f93
 8017504:	08017fcb 	.word	0x08017fcb
 8017508:	08017fef 	.word	0x08017fef

0801750c <_cleanup_r>:
 801750c:	4901      	ldr	r1, [pc, #4]	; (8017514 <_cleanup_r+0x8>)
 801750e:	f000 b8c1 	b.w	8017694 <_fwalk_reent>
 8017512:	bf00      	nop
 8017514:	0801744d 	.word	0x0801744d

08017518 <__sfmoreglue>:
 8017518:	b570      	push	{r4, r5, r6, lr}
 801751a:	2268      	movs	r2, #104	; 0x68
 801751c:	1e4d      	subs	r5, r1, #1
 801751e:	4355      	muls	r5, r2
 8017520:	460e      	mov	r6, r1
 8017522:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017526:	f000 f9b1 	bl	801788c <_malloc_r>
 801752a:	4604      	mov	r4, r0
 801752c:	b140      	cbz	r0, 8017540 <__sfmoreglue+0x28>
 801752e:	2100      	movs	r1, #0
 8017530:	e9c0 1600 	strd	r1, r6, [r0]
 8017534:	300c      	adds	r0, #12
 8017536:	60a0      	str	r0, [r4, #8]
 8017538:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801753c:	f7ff fd4e 	bl	8016fdc <memset>
 8017540:	4620      	mov	r0, r4
 8017542:	bd70      	pop	{r4, r5, r6, pc}

08017544 <__sfp_lock_acquire>:
 8017544:	4801      	ldr	r0, [pc, #4]	; (801754c <__sfp_lock_acquire+0x8>)
 8017546:	f000 b8c5 	b.w	80176d4 <__retarget_lock_acquire_recursive>
 801754a:	bf00      	nop
 801754c:	20011185 	.word	0x20011185

08017550 <__sfp_lock_release>:
 8017550:	4801      	ldr	r0, [pc, #4]	; (8017558 <__sfp_lock_release+0x8>)
 8017552:	f000 b8c0 	b.w	80176d6 <__retarget_lock_release_recursive>
 8017556:	bf00      	nop
 8017558:	20011185 	.word	0x20011185

0801755c <__sinit_lock_acquire>:
 801755c:	4801      	ldr	r0, [pc, #4]	; (8017564 <__sinit_lock_acquire+0x8>)
 801755e:	f000 b8b9 	b.w	80176d4 <__retarget_lock_acquire_recursive>
 8017562:	bf00      	nop
 8017564:	20011186 	.word	0x20011186

08017568 <__sinit_lock_release>:
 8017568:	4801      	ldr	r0, [pc, #4]	; (8017570 <__sinit_lock_release+0x8>)
 801756a:	f000 b8b4 	b.w	80176d6 <__retarget_lock_release_recursive>
 801756e:	bf00      	nop
 8017570:	20011186 	.word	0x20011186

08017574 <__sinit>:
 8017574:	b510      	push	{r4, lr}
 8017576:	4604      	mov	r4, r0
 8017578:	f7ff fff0 	bl	801755c <__sinit_lock_acquire>
 801757c:	69a3      	ldr	r3, [r4, #24]
 801757e:	b11b      	cbz	r3, 8017588 <__sinit+0x14>
 8017580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017584:	f7ff bff0 	b.w	8017568 <__sinit_lock_release>
 8017588:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801758c:	6523      	str	r3, [r4, #80]	; 0x50
 801758e:	4b13      	ldr	r3, [pc, #76]	; (80175dc <__sinit+0x68>)
 8017590:	4a13      	ldr	r2, [pc, #76]	; (80175e0 <__sinit+0x6c>)
 8017592:	681b      	ldr	r3, [r3, #0]
 8017594:	62a2      	str	r2, [r4, #40]	; 0x28
 8017596:	42a3      	cmp	r3, r4
 8017598:	bf04      	itt	eq
 801759a:	2301      	moveq	r3, #1
 801759c:	61a3      	streq	r3, [r4, #24]
 801759e:	4620      	mov	r0, r4
 80175a0:	f000 f820 	bl	80175e4 <__sfp>
 80175a4:	6060      	str	r0, [r4, #4]
 80175a6:	4620      	mov	r0, r4
 80175a8:	f000 f81c 	bl	80175e4 <__sfp>
 80175ac:	60a0      	str	r0, [r4, #8]
 80175ae:	4620      	mov	r0, r4
 80175b0:	f000 f818 	bl	80175e4 <__sfp>
 80175b4:	2200      	movs	r2, #0
 80175b6:	60e0      	str	r0, [r4, #12]
 80175b8:	2104      	movs	r1, #4
 80175ba:	6860      	ldr	r0, [r4, #4]
 80175bc:	f7ff ff82 	bl	80174c4 <std>
 80175c0:	68a0      	ldr	r0, [r4, #8]
 80175c2:	2201      	movs	r2, #1
 80175c4:	2109      	movs	r1, #9
 80175c6:	f7ff ff7d 	bl	80174c4 <std>
 80175ca:	68e0      	ldr	r0, [r4, #12]
 80175cc:	2202      	movs	r2, #2
 80175ce:	2112      	movs	r1, #18
 80175d0:	f7ff ff78 	bl	80174c4 <std>
 80175d4:	2301      	movs	r3, #1
 80175d6:	61a3      	str	r3, [r4, #24]
 80175d8:	e7d2      	b.n	8017580 <__sinit+0xc>
 80175da:	bf00      	nop
 80175dc:	0801aff4 	.word	0x0801aff4
 80175e0:	0801750d 	.word	0x0801750d

080175e4 <__sfp>:
 80175e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175e6:	4607      	mov	r7, r0
 80175e8:	f7ff ffac 	bl	8017544 <__sfp_lock_acquire>
 80175ec:	4b1e      	ldr	r3, [pc, #120]	; (8017668 <__sfp+0x84>)
 80175ee:	681e      	ldr	r6, [r3, #0]
 80175f0:	69b3      	ldr	r3, [r6, #24]
 80175f2:	b913      	cbnz	r3, 80175fa <__sfp+0x16>
 80175f4:	4630      	mov	r0, r6
 80175f6:	f7ff ffbd 	bl	8017574 <__sinit>
 80175fa:	3648      	adds	r6, #72	; 0x48
 80175fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017600:	3b01      	subs	r3, #1
 8017602:	d503      	bpl.n	801760c <__sfp+0x28>
 8017604:	6833      	ldr	r3, [r6, #0]
 8017606:	b30b      	cbz	r3, 801764c <__sfp+0x68>
 8017608:	6836      	ldr	r6, [r6, #0]
 801760a:	e7f7      	b.n	80175fc <__sfp+0x18>
 801760c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017610:	b9d5      	cbnz	r5, 8017648 <__sfp+0x64>
 8017612:	4b16      	ldr	r3, [pc, #88]	; (801766c <__sfp+0x88>)
 8017614:	60e3      	str	r3, [r4, #12]
 8017616:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801761a:	6665      	str	r5, [r4, #100]	; 0x64
 801761c:	f000 f859 	bl	80176d2 <__retarget_lock_init_recursive>
 8017620:	f7ff ff96 	bl	8017550 <__sfp_lock_release>
 8017624:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017628:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801762c:	6025      	str	r5, [r4, #0]
 801762e:	61a5      	str	r5, [r4, #24]
 8017630:	2208      	movs	r2, #8
 8017632:	4629      	mov	r1, r5
 8017634:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017638:	f7ff fcd0 	bl	8016fdc <memset>
 801763c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017640:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017644:	4620      	mov	r0, r4
 8017646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017648:	3468      	adds	r4, #104	; 0x68
 801764a:	e7d9      	b.n	8017600 <__sfp+0x1c>
 801764c:	2104      	movs	r1, #4
 801764e:	4638      	mov	r0, r7
 8017650:	f7ff ff62 	bl	8017518 <__sfmoreglue>
 8017654:	4604      	mov	r4, r0
 8017656:	6030      	str	r0, [r6, #0]
 8017658:	2800      	cmp	r0, #0
 801765a:	d1d5      	bne.n	8017608 <__sfp+0x24>
 801765c:	f7ff ff78 	bl	8017550 <__sfp_lock_release>
 8017660:	230c      	movs	r3, #12
 8017662:	603b      	str	r3, [r7, #0]
 8017664:	e7ee      	b.n	8017644 <__sfp+0x60>
 8017666:	bf00      	nop
 8017668:	0801aff4 	.word	0x0801aff4
 801766c:	ffff0001 	.word	0xffff0001

08017670 <fiprintf>:
 8017670:	b40e      	push	{r1, r2, r3}
 8017672:	b503      	push	{r0, r1, lr}
 8017674:	4601      	mov	r1, r0
 8017676:	ab03      	add	r3, sp, #12
 8017678:	4805      	ldr	r0, [pc, #20]	; (8017690 <fiprintf+0x20>)
 801767a:	f853 2b04 	ldr.w	r2, [r3], #4
 801767e:	6800      	ldr	r0, [r0, #0]
 8017680:	9301      	str	r3, [sp, #4]
 8017682:	f000 f9a1 	bl	80179c8 <_vfiprintf_r>
 8017686:	b002      	add	sp, #8
 8017688:	f85d eb04 	ldr.w	lr, [sp], #4
 801768c:	b003      	add	sp, #12
 801768e:	4770      	bx	lr
 8017690:	20000030 	.word	0x20000030

08017694 <_fwalk_reent>:
 8017694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017698:	4606      	mov	r6, r0
 801769a:	4688      	mov	r8, r1
 801769c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80176a0:	2700      	movs	r7, #0
 80176a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80176a6:	f1b9 0901 	subs.w	r9, r9, #1
 80176aa:	d505      	bpl.n	80176b8 <_fwalk_reent+0x24>
 80176ac:	6824      	ldr	r4, [r4, #0]
 80176ae:	2c00      	cmp	r4, #0
 80176b0:	d1f7      	bne.n	80176a2 <_fwalk_reent+0xe>
 80176b2:	4638      	mov	r0, r7
 80176b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80176b8:	89ab      	ldrh	r3, [r5, #12]
 80176ba:	2b01      	cmp	r3, #1
 80176bc:	d907      	bls.n	80176ce <_fwalk_reent+0x3a>
 80176be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80176c2:	3301      	adds	r3, #1
 80176c4:	d003      	beq.n	80176ce <_fwalk_reent+0x3a>
 80176c6:	4629      	mov	r1, r5
 80176c8:	4630      	mov	r0, r6
 80176ca:	47c0      	blx	r8
 80176cc:	4307      	orrs	r7, r0
 80176ce:	3568      	adds	r5, #104	; 0x68
 80176d0:	e7e9      	b.n	80176a6 <_fwalk_reent+0x12>

080176d2 <__retarget_lock_init_recursive>:
 80176d2:	4770      	bx	lr

080176d4 <__retarget_lock_acquire_recursive>:
 80176d4:	4770      	bx	lr

080176d6 <__retarget_lock_release_recursive>:
 80176d6:	4770      	bx	lr

080176d8 <__swhatbuf_r>:
 80176d8:	b570      	push	{r4, r5, r6, lr}
 80176da:	460e      	mov	r6, r1
 80176dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176e0:	2900      	cmp	r1, #0
 80176e2:	b096      	sub	sp, #88	; 0x58
 80176e4:	4614      	mov	r4, r2
 80176e6:	461d      	mov	r5, r3
 80176e8:	da08      	bge.n	80176fc <__swhatbuf_r+0x24>
 80176ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80176ee:	2200      	movs	r2, #0
 80176f0:	602a      	str	r2, [r5, #0]
 80176f2:	061a      	lsls	r2, r3, #24
 80176f4:	d410      	bmi.n	8017718 <__swhatbuf_r+0x40>
 80176f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80176fa:	e00e      	b.n	801771a <__swhatbuf_r+0x42>
 80176fc:	466a      	mov	r2, sp
 80176fe:	f000 fca5 	bl	801804c <_fstat_r>
 8017702:	2800      	cmp	r0, #0
 8017704:	dbf1      	blt.n	80176ea <__swhatbuf_r+0x12>
 8017706:	9a01      	ldr	r2, [sp, #4]
 8017708:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801770c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017710:	425a      	negs	r2, r3
 8017712:	415a      	adcs	r2, r3
 8017714:	602a      	str	r2, [r5, #0]
 8017716:	e7ee      	b.n	80176f6 <__swhatbuf_r+0x1e>
 8017718:	2340      	movs	r3, #64	; 0x40
 801771a:	2000      	movs	r0, #0
 801771c:	6023      	str	r3, [r4, #0]
 801771e:	b016      	add	sp, #88	; 0x58
 8017720:	bd70      	pop	{r4, r5, r6, pc}
	...

08017724 <__smakebuf_r>:
 8017724:	898b      	ldrh	r3, [r1, #12]
 8017726:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017728:	079d      	lsls	r5, r3, #30
 801772a:	4606      	mov	r6, r0
 801772c:	460c      	mov	r4, r1
 801772e:	d507      	bpl.n	8017740 <__smakebuf_r+0x1c>
 8017730:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017734:	6023      	str	r3, [r4, #0]
 8017736:	6123      	str	r3, [r4, #16]
 8017738:	2301      	movs	r3, #1
 801773a:	6163      	str	r3, [r4, #20]
 801773c:	b002      	add	sp, #8
 801773e:	bd70      	pop	{r4, r5, r6, pc}
 8017740:	ab01      	add	r3, sp, #4
 8017742:	466a      	mov	r2, sp
 8017744:	f7ff ffc8 	bl	80176d8 <__swhatbuf_r>
 8017748:	9900      	ldr	r1, [sp, #0]
 801774a:	4605      	mov	r5, r0
 801774c:	4630      	mov	r0, r6
 801774e:	f000 f89d 	bl	801788c <_malloc_r>
 8017752:	b948      	cbnz	r0, 8017768 <__smakebuf_r+0x44>
 8017754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017758:	059a      	lsls	r2, r3, #22
 801775a:	d4ef      	bmi.n	801773c <__smakebuf_r+0x18>
 801775c:	f023 0303 	bic.w	r3, r3, #3
 8017760:	f043 0302 	orr.w	r3, r3, #2
 8017764:	81a3      	strh	r3, [r4, #12]
 8017766:	e7e3      	b.n	8017730 <__smakebuf_r+0xc>
 8017768:	4b0d      	ldr	r3, [pc, #52]	; (80177a0 <__smakebuf_r+0x7c>)
 801776a:	62b3      	str	r3, [r6, #40]	; 0x28
 801776c:	89a3      	ldrh	r3, [r4, #12]
 801776e:	6020      	str	r0, [r4, #0]
 8017770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017774:	81a3      	strh	r3, [r4, #12]
 8017776:	9b00      	ldr	r3, [sp, #0]
 8017778:	6163      	str	r3, [r4, #20]
 801777a:	9b01      	ldr	r3, [sp, #4]
 801777c:	6120      	str	r0, [r4, #16]
 801777e:	b15b      	cbz	r3, 8017798 <__smakebuf_r+0x74>
 8017780:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017784:	4630      	mov	r0, r6
 8017786:	f000 fc73 	bl	8018070 <_isatty_r>
 801778a:	b128      	cbz	r0, 8017798 <__smakebuf_r+0x74>
 801778c:	89a3      	ldrh	r3, [r4, #12]
 801778e:	f023 0303 	bic.w	r3, r3, #3
 8017792:	f043 0301 	orr.w	r3, r3, #1
 8017796:	81a3      	strh	r3, [r4, #12]
 8017798:	89a0      	ldrh	r0, [r4, #12]
 801779a:	4305      	orrs	r5, r0
 801779c:	81a5      	strh	r5, [r4, #12]
 801779e:	e7cd      	b.n	801773c <__smakebuf_r+0x18>
 80177a0:	0801750d 	.word	0x0801750d

080177a4 <malloc>:
 80177a4:	4b02      	ldr	r3, [pc, #8]	; (80177b0 <malloc+0xc>)
 80177a6:	4601      	mov	r1, r0
 80177a8:	6818      	ldr	r0, [r3, #0]
 80177aa:	f000 b86f 	b.w	801788c <_malloc_r>
 80177ae:	bf00      	nop
 80177b0:	20000030 	.word	0x20000030

080177b4 <_free_r>:
 80177b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80177b6:	2900      	cmp	r1, #0
 80177b8:	d044      	beq.n	8017844 <_free_r+0x90>
 80177ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80177be:	9001      	str	r0, [sp, #4]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	f1a1 0404 	sub.w	r4, r1, #4
 80177c6:	bfb8      	it	lt
 80177c8:	18e4      	addlt	r4, r4, r3
 80177ca:	f000 fc73 	bl	80180b4 <__malloc_lock>
 80177ce:	4a1e      	ldr	r2, [pc, #120]	; (8017848 <_free_r+0x94>)
 80177d0:	9801      	ldr	r0, [sp, #4]
 80177d2:	6813      	ldr	r3, [r2, #0]
 80177d4:	b933      	cbnz	r3, 80177e4 <_free_r+0x30>
 80177d6:	6063      	str	r3, [r4, #4]
 80177d8:	6014      	str	r4, [r2, #0]
 80177da:	b003      	add	sp, #12
 80177dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80177e0:	f000 bc6e 	b.w	80180c0 <__malloc_unlock>
 80177e4:	42a3      	cmp	r3, r4
 80177e6:	d908      	bls.n	80177fa <_free_r+0x46>
 80177e8:	6825      	ldr	r5, [r4, #0]
 80177ea:	1961      	adds	r1, r4, r5
 80177ec:	428b      	cmp	r3, r1
 80177ee:	bf01      	itttt	eq
 80177f0:	6819      	ldreq	r1, [r3, #0]
 80177f2:	685b      	ldreq	r3, [r3, #4]
 80177f4:	1949      	addeq	r1, r1, r5
 80177f6:	6021      	streq	r1, [r4, #0]
 80177f8:	e7ed      	b.n	80177d6 <_free_r+0x22>
 80177fa:	461a      	mov	r2, r3
 80177fc:	685b      	ldr	r3, [r3, #4]
 80177fe:	b10b      	cbz	r3, 8017804 <_free_r+0x50>
 8017800:	42a3      	cmp	r3, r4
 8017802:	d9fa      	bls.n	80177fa <_free_r+0x46>
 8017804:	6811      	ldr	r1, [r2, #0]
 8017806:	1855      	adds	r5, r2, r1
 8017808:	42a5      	cmp	r5, r4
 801780a:	d10b      	bne.n	8017824 <_free_r+0x70>
 801780c:	6824      	ldr	r4, [r4, #0]
 801780e:	4421      	add	r1, r4
 8017810:	1854      	adds	r4, r2, r1
 8017812:	42a3      	cmp	r3, r4
 8017814:	6011      	str	r1, [r2, #0]
 8017816:	d1e0      	bne.n	80177da <_free_r+0x26>
 8017818:	681c      	ldr	r4, [r3, #0]
 801781a:	685b      	ldr	r3, [r3, #4]
 801781c:	6053      	str	r3, [r2, #4]
 801781e:	4421      	add	r1, r4
 8017820:	6011      	str	r1, [r2, #0]
 8017822:	e7da      	b.n	80177da <_free_r+0x26>
 8017824:	d902      	bls.n	801782c <_free_r+0x78>
 8017826:	230c      	movs	r3, #12
 8017828:	6003      	str	r3, [r0, #0]
 801782a:	e7d6      	b.n	80177da <_free_r+0x26>
 801782c:	6825      	ldr	r5, [r4, #0]
 801782e:	1961      	adds	r1, r4, r5
 8017830:	428b      	cmp	r3, r1
 8017832:	bf04      	itt	eq
 8017834:	6819      	ldreq	r1, [r3, #0]
 8017836:	685b      	ldreq	r3, [r3, #4]
 8017838:	6063      	str	r3, [r4, #4]
 801783a:	bf04      	itt	eq
 801783c:	1949      	addeq	r1, r1, r5
 801783e:	6021      	streq	r1, [r4, #0]
 8017840:	6054      	str	r4, [r2, #4]
 8017842:	e7ca      	b.n	80177da <_free_r+0x26>
 8017844:	b003      	add	sp, #12
 8017846:	bd30      	pop	{r4, r5, pc}
 8017848:	20011188 	.word	0x20011188

0801784c <sbrk_aligned>:
 801784c:	b570      	push	{r4, r5, r6, lr}
 801784e:	4e0e      	ldr	r6, [pc, #56]	; (8017888 <sbrk_aligned+0x3c>)
 8017850:	460c      	mov	r4, r1
 8017852:	6831      	ldr	r1, [r6, #0]
 8017854:	4605      	mov	r5, r0
 8017856:	b911      	cbnz	r1, 801785e <sbrk_aligned+0x12>
 8017858:	f000 fb7a 	bl	8017f50 <_sbrk_r>
 801785c:	6030      	str	r0, [r6, #0]
 801785e:	4621      	mov	r1, r4
 8017860:	4628      	mov	r0, r5
 8017862:	f000 fb75 	bl	8017f50 <_sbrk_r>
 8017866:	1c43      	adds	r3, r0, #1
 8017868:	d00a      	beq.n	8017880 <sbrk_aligned+0x34>
 801786a:	1cc4      	adds	r4, r0, #3
 801786c:	f024 0403 	bic.w	r4, r4, #3
 8017870:	42a0      	cmp	r0, r4
 8017872:	d007      	beq.n	8017884 <sbrk_aligned+0x38>
 8017874:	1a21      	subs	r1, r4, r0
 8017876:	4628      	mov	r0, r5
 8017878:	f000 fb6a 	bl	8017f50 <_sbrk_r>
 801787c:	3001      	adds	r0, #1
 801787e:	d101      	bne.n	8017884 <sbrk_aligned+0x38>
 8017880:	f04f 34ff 	mov.w	r4, #4294967295
 8017884:	4620      	mov	r0, r4
 8017886:	bd70      	pop	{r4, r5, r6, pc}
 8017888:	2001118c 	.word	0x2001118c

0801788c <_malloc_r>:
 801788c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017890:	1ccd      	adds	r5, r1, #3
 8017892:	f025 0503 	bic.w	r5, r5, #3
 8017896:	3508      	adds	r5, #8
 8017898:	2d0c      	cmp	r5, #12
 801789a:	bf38      	it	cc
 801789c:	250c      	movcc	r5, #12
 801789e:	2d00      	cmp	r5, #0
 80178a0:	4607      	mov	r7, r0
 80178a2:	db01      	blt.n	80178a8 <_malloc_r+0x1c>
 80178a4:	42a9      	cmp	r1, r5
 80178a6:	d905      	bls.n	80178b4 <_malloc_r+0x28>
 80178a8:	230c      	movs	r3, #12
 80178aa:	603b      	str	r3, [r7, #0]
 80178ac:	2600      	movs	r6, #0
 80178ae:	4630      	mov	r0, r6
 80178b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178b4:	4e2e      	ldr	r6, [pc, #184]	; (8017970 <_malloc_r+0xe4>)
 80178b6:	f000 fbfd 	bl	80180b4 <__malloc_lock>
 80178ba:	6833      	ldr	r3, [r6, #0]
 80178bc:	461c      	mov	r4, r3
 80178be:	bb34      	cbnz	r4, 801790e <_malloc_r+0x82>
 80178c0:	4629      	mov	r1, r5
 80178c2:	4638      	mov	r0, r7
 80178c4:	f7ff ffc2 	bl	801784c <sbrk_aligned>
 80178c8:	1c43      	adds	r3, r0, #1
 80178ca:	4604      	mov	r4, r0
 80178cc:	d14d      	bne.n	801796a <_malloc_r+0xde>
 80178ce:	6834      	ldr	r4, [r6, #0]
 80178d0:	4626      	mov	r6, r4
 80178d2:	2e00      	cmp	r6, #0
 80178d4:	d140      	bne.n	8017958 <_malloc_r+0xcc>
 80178d6:	6823      	ldr	r3, [r4, #0]
 80178d8:	4631      	mov	r1, r6
 80178da:	4638      	mov	r0, r7
 80178dc:	eb04 0803 	add.w	r8, r4, r3
 80178e0:	f000 fb36 	bl	8017f50 <_sbrk_r>
 80178e4:	4580      	cmp	r8, r0
 80178e6:	d13a      	bne.n	801795e <_malloc_r+0xd2>
 80178e8:	6821      	ldr	r1, [r4, #0]
 80178ea:	3503      	adds	r5, #3
 80178ec:	1a6d      	subs	r5, r5, r1
 80178ee:	f025 0503 	bic.w	r5, r5, #3
 80178f2:	3508      	adds	r5, #8
 80178f4:	2d0c      	cmp	r5, #12
 80178f6:	bf38      	it	cc
 80178f8:	250c      	movcc	r5, #12
 80178fa:	4629      	mov	r1, r5
 80178fc:	4638      	mov	r0, r7
 80178fe:	f7ff ffa5 	bl	801784c <sbrk_aligned>
 8017902:	3001      	adds	r0, #1
 8017904:	d02b      	beq.n	801795e <_malloc_r+0xd2>
 8017906:	6823      	ldr	r3, [r4, #0]
 8017908:	442b      	add	r3, r5
 801790a:	6023      	str	r3, [r4, #0]
 801790c:	e00e      	b.n	801792c <_malloc_r+0xa0>
 801790e:	6822      	ldr	r2, [r4, #0]
 8017910:	1b52      	subs	r2, r2, r5
 8017912:	d41e      	bmi.n	8017952 <_malloc_r+0xc6>
 8017914:	2a0b      	cmp	r2, #11
 8017916:	d916      	bls.n	8017946 <_malloc_r+0xba>
 8017918:	1961      	adds	r1, r4, r5
 801791a:	42a3      	cmp	r3, r4
 801791c:	6025      	str	r5, [r4, #0]
 801791e:	bf18      	it	ne
 8017920:	6059      	strne	r1, [r3, #4]
 8017922:	6863      	ldr	r3, [r4, #4]
 8017924:	bf08      	it	eq
 8017926:	6031      	streq	r1, [r6, #0]
 8017928:	5162      	str	r2, [r4, r5]
 801792a:	604b      	str	r3, [r1, #4]
 801792c:	4638      	mov	r0, r7
 801792e:	f104 060b 	add.w	r6, r4, #11
 8017932:	f000 fbc5 	bl	80180c0 <__malloc_unlock>
 8017936:	f026 0607 	bic.w	r6, r6, #7
 801793a:	1d23      	adds	r3, r4, #4
 801793c:	1af2      	subs	r2, r6, r3
 801793e:	d0b6      	beq.n	80178ae <_malloc_r+0x22>
 8017940:	1b9b      	subs	r3, r3, r6
 8017942:	50a3      	str	r3, [r4, r2]
 8017944:	e7b3      	b.n	80178ae <_malloc_r+0x22>
 8017946:	6862      	ldr	r2, [r4, #4]
 8017948:	42a3      	cmp	r3, r4
 801794a:	bf0c      	ite	eq
 801794c:	6032      	streq	r2, [r6, #0]
 801794e:	605a      	strne	r2, [r3, #4]
 8017950:	e7ec      	b.n	801792c <_malloc_r+0xa0>
 8017952:	4623      	mov	r3, r4
 8017954:	6864      	ldr	r4, [r4, #4]
 8017956:	e7b2      	b.n	80178be <_malloc_r+0x32>
 8017958:	4634      	mov	r4, r6
 801795a:	6876      	ldr	r6, [r6, #4]
 801795c:	e7b9      	b.n	80178d2 <_malloc_r+0x46>
 801795e:	230c      	movs	r3, #12
 8017960:	603b      	str	r3, [r7, #0]
 8017962:	4638      	mov	r0, r7
 8017964:	f000 fbac 	bl	80180c0 <__malloc_unlock>
 8017968:	e7a1      	b.n	80178ae <_malloc_r+0x22>
 801796a:	6025      	str	r5, [r4, #0]
 801796c:	e7de      	b.n	801792c <_malloc_r+0xa0>
 801796e:	bf00      	nop
 8017970:	20011188 	.word	0x20011188

08017974 <__sfputc_r>:
 8017974:	6893      	ldr	r3, [r2, #8]
 8017976:	3b01      	subs	r3, #1
 8017978:	2b00      	cmp	r3, #0
 801797a:	b410      	push	{r4}
 801797c:	6093      	str	r3, [r2, #8]
 801797e:	da08      	bge.n	8017992 <__sfputc_r+0x1e>
 8017980:	6994      	ldr	r4, [r2, #24]
 8017982:	42a3      	cmp	r3, r4
 8017984:	db01      	blt.n	801798a <__sfputc_r+0x16>
 8017986:	290a      	cmp	r1, #10
 8017988:	d103      	bne.n	8017992 <__sfputc_r+0x1e>
 801798a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801798e:	f7ff bbf9 	b.w	8017184 <__swbuf_r>
 8017992:	6813      	ldr	r3, [r2, #0]
 8017994:	1c58      	adds	r0, r3, #1
 8017996:	6010      	str	r0, [r2, #0]
 8017998:	7019      	strb	r1, [r3, #0]
 801799a:	4608      	mov	r0, r1
 801799c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80179a0:	4770      	bx	lr

080179a2 <__sfputs_r>:
 80179a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179a4:	4606      	mov	r6, r0
 80179a6:	460f      	mov	r7, r1
 80179a8:	4614      	mov	r4, r2
 80179aa:	18d5      	adds	r5, r2, r3
 80179ac:	42ac      	cmp	r4, r5
 80179ae:	d101      	bne.n	80179b4 <__sfputs_r+0x12>
 80179b0:	2000      	movs	r0, #0
 80179b2:	e007      	b.n	80179c4 <__sfputs_r+0x22>
 80179b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179b8:	463a      	mov	r2, r7
 80179ba:	4630      	mov	r0, r6
 80179bc:	f7ff ffda 	bl	8017974 <__sfputc_r>
 80179c0:	1c43      	adds	r3, r0, #1
 80179c2:	d1f3      	bne.n	80179ac <__sfputs_r+0xa>
 80179c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080179c8 <_vfiprintf_r>:
 80179c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179cc:	460d      	mov	r5, r1
 80179ce:	b09d      	sub	sp, #116	; 0x74
 80179d0:	4614      	mov	r4, r2
 80179d2:	4698      	mov	r8, r3
 80179d4:	4606      	mov	r6, r0
 80179d6:	b118      	cbz	r0, 80179e0 <_vfiprintf_r+0x18>
 80179d8:	6983      	ldr	r3, [r0, #24]
 80179da:	b90b      	cbnz	r3, 80179e0 <_vfiprintf_r+0x18>
 80179dc:	f7ff fdca 	bl	8017574 <__sinit>
 80179e0:	4b89      	ldr	r3, [pc, #548]	; (8017c08 <_vfiprintf_r+0x240>)
 80179e2:	429d      	cmp	r5, r3
 80179e4:	d11b      	bne.n	8017a1e <_vfiprintf_r+0x56>
 80179e6:	6875      	ldr	r5, [r6, #4]
 80179e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80179ea:	07d9      	lsls	r1, r3, #31
 80179ec:	d405      	bmi.n	80179fa <_vfiprintf_r+0x32>
 80179ee:	89ab      	ldrh	r3, [r5, #12]
 80179f0:	059a      	lsls	r2, r3, #22
 80179f2:	d402      	bmi.n	80179fa <_vfiprintf_r+0x32>
 80179f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80179f6:	f7ff fe6d 	bl	80176d4 <__retarget_lock_acquire_recursive>
 80179fa:	89ab      	ldrh	r3, [r5, #12]
 80179fc:	071b      	lsls	r3, r3, #28
 80179fe:	d501      	bpl.n	8017a04 <_vfiprintf_r+0x3c>
 8017a00:	692b      	ldr	r3, [r5, #16]
 8017a02:	b9eb      	cbnz	r3, 8017a40 <_vfiprintf_r+0x78>
 8017a04:	4629      	mov	r1, r5
 8017a06:	4630      	mov	r0, r6
 8017a08:	f7ff fc0e 	bl	8017228 <__swsetup_r>
 8017a0c:	b1c0      	cbz	r0, 8017a40 <_vfiprintf_r+0x78>
 8017a0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017a10:	07dc      	lsls	r4, r3, #31
 8017a12:	d50e      	bpl.n	8017a32 <_vfiprintf_r+0x6a>
 8017a14:	f04f 30ff 	mov.w	r0, #4294967295
 8017a18:	b01d      	add	sp, #116	; 0x74
 8017a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a1e:	4b7b      	ldr	r3, [pc, #492]	; (8017c0c <_vfiprintf_r+0x244>)
 8017a20:	429d      	cmp	r5, r3
 8017a22:	d101      	bne.n	8017a28 <_vfiprintf_r+0x60>
 8017a24:	68b5      	ldr	r5, [r6, #8]
 8017a26:	e7df      	b.n	80179e8 <_vfiprintf_r+0x20>
 8017a28:	4b79      	ldr	r3, [pc, #484]	; (8017c10 <_vfiprintf_r+0x248>)
 8017a2a:	429d      	cmp	r5, r3
 8017a2c:	bf08      	it	eq
 8017a2e:	68f5      	ldreq	r5, [r6, #12]
 8017a30:	e7da      	b.n	80179e8 <_vfiprintf_r+0x20>
 8017a32:	89ab      	ldrh	r3, [r5, #12]
 8017a34:	0598      	lsls	r0, r3, #22
 8017a36:	d4ed      	bmi.n	8017a14 <_vfiprintf_r+0x4c>
 8017a38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017a3a:	f7ff fe4c 	bl	80176d6 <__retarget_lock_release_recursive>
 8017a3e:	e7e9      	b.n	8017a14 <_vfiprintf_r+0x4c>
 8017a40:	2300      	movs	r3, #0
 8017a42:	9309      	str	r3, [sp, #36]	; 0x24
 8017a44:	2320      	movs	r3, #32
 8017a46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017a4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8017a4e:	2330      	movs	r3, #48	; 0x30
 8017a50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017c14 <_vfiprintf_r+0x24c>
 8017a54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017a58:	f04f 0901 	mov.w	r9, #1
 8017a5c:	4623      	mov	r3, r4
 8017a5e:	469a      	mov	sl, r3
 8017a60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017a64:	b10a      	cbz	r2, 8017a6a <_vfiprintf_r+0xa2>
 8017a66:	2a25      	cmp	r2, #37	; 0x25
 8017a68:	d1f9      	bne.n	8017a5e <_vfiprintf_r+0x96>
 8017a6a:	ebba 0b04 	subs.w	fp, sl, r4
 8017a6e:	d00b      	beq.n	8017a88 <_vfiprintf_r+0xc0>
 8017a70:	465b      	mov	r3, fp
 8017a72:	4622      	mov	r2, r4
 8017a74:	4629      	mov	r1, r5
 8017a76:	4630      	mov	r0, r6
 8017a78:	f7ff ff93 	bl	80179a2 <__sfputs_r>
 8017a7c:	3001      	adds	r0, #1
 8017a7e:	f000 80aa 	beq.w	8017bd6 <_vfiprintf_r+0x20e>
 8017a82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017a84:	445a      	add	r2, fp
 8017a86:	9209      	str	r2, [sp, #36]	; 0x24
 8017a88:	f89a 3000 	ldrb.w	r3, [sl]
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	f000 80a2 	beq.w	8017bd6 <_vfiprintf_r+0x20e>
 8017a92:	2300      	movs	r3, #0
 8017a94:	f04f 32ff 	mov.w	r2, #4294967295
 8017a98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017a9c:	f10a 0a01 	add.w	sl, sl, #1
 8017aa0:	9304      	str	r3, [sp, #16]
 8017aa2:	9307      	str	r3, [sp, #28]
 8017aa4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017aa8:	931a      	str	r3, [sp, #104]	; 0x68
 8017aaa:	4654      	mov	r4, sl
 8017aac:	2205      	movs	r2, #5
 8017aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ab2:	4858      	ldr	r0, [pc, #352]	; (8017c14 <_vfiprintf_r+0x24c>)
 8017ab4:	f7e8 fbc4 	bl	8000240 <memchr>
 8017ab8:	9a04      	ldr	r2, [sp, #16]
 8017aba:	b9d8      	cbnz	r0, 8017af4 <_vfiprintf_r+0x12c>
 8017abc:	06d1      	lsls	r1, r2, #27
 8017abe:	bf44      	itt	mi
 8017ac0:	2320      	movmi	r3, #32
 8017ac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017ac6:	0713      	lsls	r3, r2, #28
 8017ac8:	bf44      	itt	mi
 8017aca:	232b      	movmi	r3, #43	; 0x2b
 8017acc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017ad0:	f89a 3000 	ldrb.w	r3, [sl]
 8017ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8017ad6:	d015      	beq.n	8017b04 <_vfiprintf_r+0x13c>
 8017ad8:	9a07      	ldr	r2, [sp, #28]
 8017ada:	4654      	mov	r4, sl
 8017adc:	2000      	movs	r0, #0
 8017ade:	f04f 0c0a 	mov.w	ip, #10
 8017ae2:	4621      	mov	r1, r4
 8017ae4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017ae8:	3b30      	subs	r3, #48	; 0x30
 8017aea:	2b09      	cmp	r3, #9
 8017aec:	d94e      	bls.n	8017b8c <_vfiprintf_r+0x1c4>
 8017aee:	b1b0      	cbz	r0, 8017b1e <_vfiprintf_r+0x156>
 8017af0:	9207      	str	r2, [sp, #28]
 8017af2:	e014      	b.n	8017b1e <_vfiprintf_r+0x156>
 8017af4:	eba0 0308 	sub.w	r3, r0, r8
 8017af8:	fa09 f303 	lsl.w	r3, r9, r3
 8017afc:	4313      	orrs	r3, r2
 8017afe:	9304      	str	r3, [sp, #16]
 8017b00:	46a2      	mov	sl, r4
 8017b02:	e7d2      	b.n	8017aaa <_vfiprintf_r+0xe2>
 8017b04:	9b03      	ldr	r3, [sp, #12]
 8017b06:	1d19      	adds	r1, r3, #4
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	9103      	str	r1, [sp, #12]
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	bfbb      	ittet	lt
 8017b10:	425b      	neglt	r3, r3
 8017b12:	f042 0202 	orrlt.w	r2, r2, #2
 8017b16:	9307      	strge	r3, [sp, #28]
 8017b18:	9307      	strlt	r3, [sp, #28]
 8017b1a:	bfb8      	it	lt
 8017b1c:	9204      	strlt	r2, [sp, #16]
 8017b1e:	7823      	ldrb	r3, [r4, #0]
 8017b20:	2b2e      	cmp	r3, #46	; 0x2e
 8017b22:	d10c      	bne.n	8017b3e <_vfiprintf_r+0x176>
 8017b24:	7863      	ldrb	r3, [r4, #1]
 8017b26:	2b2a      	cmp	r3, #42	; 0x2a
 8017b28:	d135      	bne.n	8017b96 <_vfiprintf_r+0x1ce>
 8017b2a:	9b03      	ldr	r3, [sp, #12]
 8017b2c:	1d1a      	adds	r2, r3, #4
 8017b2e:	681b      	ldr	r3, [r3, #0]
 8017b30:	9203      	str	r2, [sp, #12]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	bfb8      	it	lt
 8017b36:	f04f 33ff 	movlt.w	r3, #4294967295
 8017b3a:	3402      	adds	r4, #2
 8017b3c:	9305      	str	r3, [sp, #20]
 8017b3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017c24 <_vfiprintf_r+0x25c>
 8017b42:	7821      	ldrb	r1, [r4, #0]
 8017b44:	2203      	movs	r2, #3
 8017b46:	4650      	mov	r0, sl
 8017b48:	f7e8 fb7a 	bl	8000240 <memchr>
 8017b4c:	b140      	cbz	r0, 8017b60 <_vfiprintf_r+0x198>
 8017b4e:	2340      	movs	r3, #64	; 0x40
 8017b50:	eba0 000a 	sub.w	r0, r0, sl
 8017b54:	fa03 f000 	lsl.w	r0, r3, r0
 8017b58:	9b04      	ldr	r3, [sp, #16]
 8017b5a:	4303      	orrs	r3, r0
 8017b5c:	3401      	adds	r4, #1
 8017b5e:	9304      	str	r3, [sp, #16]
 8017b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b64:	482c      	ldr	r0, [pc, #176]	; (8017c18 <_vfiprintf_r+0x250>)
 8017b66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017b6a:	2206      	movs	r2, #6
 8017b6c:	f7e8 fb68 	bl	8000240 <memchr>
 8017b70:	2800      	cmp	r0, #0
 8017b72:	d03f      	beq.n	8017bf4 <_vfiprintf_r+0x22c>
 8017b74:	4b29      	ldr	r3, [pc, #164]	; (8017c1c <_vfiprintf_r+0x254>)
 8017b76:	bb1b      	cbnz	r3, 8017bc0 <_vfiprintf_r+0x1f8>
 8017b78:	9b03      	ldr	r3, [sp, #12]
 8017b7a:	3307      	adds	r3, #7
 8017b7c:	f023 0307 	bic.w	r3, r3, #7
 8017b80:	3308      	adds	r3, #8
 8017b82:	9303      	str	r3, [sp, #12]
 8017b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b86:	443b      	add	r3, r7
 8017b88:	9309      	str	r3, [sp, #36]	; 0x24
 8017b8a:	e767      	b.n	8017a5c <_vfiprintf_r+0x94>
 8017b8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017b90:	460c      	mov	r4, r1
 8017b92:	2001      	movs	r0, #1
 8017b94:	e7a5      	b.n	8017ae2 <_vfiprintf_r+0x11a>
 8017b96:	2300      	movs	r3, #0
 8017b98:	3401      	adds	r4, #1
 8017b9a:	9305      	str	r3, [sp, #20]
 8017b9c:	4619      	mov	r1, r3
 8017b9e:	f04f 0c0a 	mov.w	ip, #10
 8017ba2:	4620      	mov	r0, r4
 8017ba4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ba8:	3a30      	subs	r2, #48	; 0x30
 8017baa:	2a09      	cmp	r2, #9
 8017bac:	d903      	bls.n	8017bb6 <_vfiprintf_r+0x1ee>
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d0c5      	beq.n	8017b3e <_vfiprintf_r+0x176>
 8017bb2:	9105      	str	r1, [sp, #20]
 8017bb4:	e7c3      	b.n	8017b3e <_vfiprintf_r+0x176>
 8017bb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8017bba:	4604      	mov	r4, r0
 8017bbc:	2301      	movs	r3, #1
 8017bbe:	e7f0      	b.n	8017ba2 <_vfiprintf_r+0x1da>
 8017bc0:	ab03      	add	r3, sp, #12
 8017bc2:	9300      	str	r3, [sp, #0]
 8017bc4:	462a      	mov	r2, r5
 8017bc6:	4b16      	ldr	r3, [pc, #88]	; (8017c20 <_vfiprintf_r+0x258>)
 8017bc8:	a904      	add	r1, sp, #16
 8017bca:	4630      	mov	r0, r6
 8017bcc:	f3af 8000 	nop.w
 8017bd0:	4607      	mov	r7, r0
 8017bd2:	1c78      	adds	r0, r7, #1
 8017bd4:	d1d6      	bne.n	8017b84 <_vfiprintf_r+0x1bc>
 8017bd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017bd8:	07d9      	lsls	r1, r3, #31
 8017bda:	d405      	bmi.n	8017be8 <_vfiprintf_r+0x220>
 8017bdc:	89ab      	ldrh	r3, [r5, #12]
 8017bde:	059a      	lsls	r2, r3, #22
 8017be0:	d402      	bmi.n	8017be8 <_vfiprintf_r+0x220>
 8017be2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017be4:	f7ff fd77 	bl	80176d6 <__retarget_lock_release_recursive>
 8017be8:	89ab      	ldrh	r3, [r5, #12]
 8017bea:	065b      	lsls	r3, r3, #25
 8017bec:	f53f af12 	bmi.w	8017a14 <_vfiprintf_r+0x4c>
 8017bf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017bf2:	e711      	b.n	8017a18 <_vfiprintf_r+0x50>
 8017bf4:	ab03      	add	r3, sp, #12
 8017bf6:	9300      	str	r3, [sp, #0]
 8017bf8:	462a      	mov	r2, r5
 8017bfa:	4b09      	ldr	r3, [pc, #36]	; (8017c20 <_vfiprintf_r+0x258>)
 8017bfc:	a904      	add	r1, sp, #16
 8017bfe:	4630      	mov	r0, r6
 8017c00:	f000 f880 	bl	8017d04 <_printf_i>
 8017c04:	e7e4      	b.n	8017bd0 <_vfiprintf_r+0x208>
 8017c06:	bf00      	nop
 8017c08:	0801b0c8 	.word	0x0801b0c8
 8017c0c:	0801b0e8 	.word	0x0801b0e8
 8017c10:	0801b0a8 	.word	0x0801b0a8
 8017c14:	0801b108 	.word	0x0801b108
 8017c18:	0801b112 	.word	0x0801b112
 8017c1c:	00000000 	.word	0x00000000
 8017c20:	080179a3 	.word	0x080179a3
 8017c24:	0801b10e 	.word	0x0801b10e

08017c28 <_printf_common>:
 8017c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c2c:	4616      	mov	r6, r2
 8017c2e:	4699      	mov	r9, r3
 8017c30:	688a      	ldr	r2, [r1, #8]
 8017c32:	690b      	ldr	r3, [r1, #16]
 8017c34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017c38:	4293      	cmp	r3, r2
 8017c3a:	bfb8      	it	lt
 8017c3c:	4613      	movlt	r3, r2
 8017c3e:	6033      	str	r3, [r6, #0]
 8017c40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017c44:	4607      	mov	r7, r0
 8017c46:	460c      	mov	r4, r1
 8017c48:	b10a      	cbz	r2, 8017c4e <_printf_common+0x26>
 8017c4a:	3301      	adds	r3, #1
 8017c4c:	6033      	str	r3, [r6, #0]
 8017c4e:	6823      	ldr	r3, [r4, #0]
 8017c50:	0699      	lsls	r1, r3, #26
 8017c52:	bf42      	ittt	mi
 8017c54:	6833      	ldrmi	r3, [r6, #0]
 8017c56:	3302      	addmi	r3, #2
 8017c58:	6033      	strmi	r3, [r6, #0]
 8017c5a:	6825      	ldr	r5, [r4, #0]
 8017c5c:	f015 0506 	ands.w	r5, r5, #6
 8017c60:	d106      	bne.n	8017c70 <_printf_common+0x48>
 8017c62:	f104 0a19 	add.w	sl, r4, #25
 8017c66:	68e3      	ldr	r3, [r4, #12]
 8017c68:	6832      	ldr	r2, [r6, #0]
 8017c6a:	1a9b      	subs	r3, r3, r2
 8017c6c:	42ab      	cmp	r3, r5
 8017c6e:	dc26      	bgt.n	8017cbe <_printf_common+0x96>
 8017c70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017c74:	1e13      	subs	r3, r2, #0
 8017c76:	6822      	ldr	r2, [r4, #0]
 8017c78:	bf18      	it	ne
 8017c7a:	2301      	movne	r3, #1
 8017c7c:	0692      	lsls	r2, r2, #26
 8017c7e:	d42b      	bmi.n	8017cd8 <_printf_common+0xb0>
 8017c80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017c84:	4649      	mov	r1, r9
 8017c86:	4638      	mov	r0, r7
 8017c88:	47c0      	blx	r8
 8017c8a:	3001      	adds	r0, #1
 8017c8c:	d01e      	beq.n	8017ccc <_printf_common+0xa4>
 8017c8e:	6823      	ldr	r3, [r4, #0]
 8017c90:	68e5      	ldr	r5, [r4, #12]
 8017c92:	6832      	ldr	r2, [r6, #0]
 8017c94:	f003 0306 	and.w	r3, r3, #6
 8017c98:	2b04      	cmp	r3, #4
 8017c9a:	bf08      	it	eq
 8017c9c:	1aad      	subeq	r5, r5, r2
 8017c9e:	68a3      	ldr	r3, [r4, #8]
 8017ca0:	6922      	ldr	r2, [r4, #16]
 8017ca2:	bf0c      	ite	eq
 8017ca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017ca8:	2500      	movne	r5, #0
 8017caa:	4293      	cmp	r3, r2
 8017cac:	bfc4      	itt	gt
 8017cae:	1a9b      	subgt	r3, r3, r2
 8017cb0:	18ed      	addgt	r5, r5, r3
 8017cb2:	2600      	movs	r6, #0
 8017cb4:	341a      	adds	r4, #26
 8017cb6:	42b5      	cmp	r5, r6
 8017cb8:	d11a      	bne.n	8017cf0 <_printf_common+0xc8>
 8017cba:	2000      	movs	r0, #0
 8017cbc:	e008      	b.n	8017cd0 <_printf_common+0xa8>
 8017cbe:	2301      	movs	r3, #1
 8017cc0:	4652      	mov	r2, sl
 8017cc2:	4649      	mov	r1, r9
 8017cc4:	4638      	mov	r0, r7
 8017cc6:	47c0      	blx	r8
 8017cc8:	3001      	adds	r0, #1
 8017cca:	d103      	bne.n	8017cd4 <_printf_common+0xac>
 8017ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8017cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cd4:	3501      	adds	r5, #1
 8017cd6:	e7c6      	b.n	8017c66 <_printf_common+0x3e>
 8017cd8:	18e1      	adds	r1, r4, r3
 8017cda:	1c5a      	adds	r2, r3, #1
 8017cdc:	2030      	movs	r0, #48	; 0x30
 8017cde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017ce2:	4422      	add	r2, r4
 8017ce4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017ce8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017cec:	3302      	adds	r3, #2
 8017cee:	e7c7      	b.n	8017c80 <_printf_common+0x58>
 8017cf0:	2301      	movs	r3, #1
 8017cf2:	4622      	mov	r2, r4
 8017cf4:	4649      	mov	r1, r9
 8017cf6:	4638      	mov	r0, r7
 8017cf8:	47c0      	blx	r8
 8017cfa:	3001      	adds	r0, #1
 8017cfc:	d0e6      	beq.n	8017ccc <_printf_common+0xa4>
 8017cfe:	3601      	adds	r6, #1
 8017d00:	e7d9      	b.n	8017cb6 <_printf_common+0x8e>
	...

08017d04 <_printf_i>:
 8017d04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017d08:	7e0f      	ldrb	r7, [r1, #24]
 8017d0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017d0c:	2f78      	cmp	r7, #120	; 0x78
 8017d0e:	4691      	mov	r9, r2
 8017d10:	4680      	mov	r8, r0
 8017d12:	460c      	mov	r4, r1
 8017d14:	469a      	mov	sl, r3
 8017d16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017d1a:	d807      	bhi.n	8017d2c <_printf_i+0x28>
 8017d1c:	2f62      	cmp	r7, #98	; 0x62
 8017d1e:	d80a      	bhi.n	8017d36 <_printf_i+0x32>
 8017d20:	2f00      	cmp	r7, #0
 8017d22:	f000 80d8 	beq.w	8017ed6 <_printf_i+0x1d2>
 8017d26:	2f58      	cmp	r7, #88	; 0x58
 8017d28:	f000 80a3 	beq.w	8017e72 <_printf_i+0x16e>
 8017d2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017d30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017d34:	e03a      	b.n	8017dac <_printf_i+0xa8>
 8017d36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017d3a:	2b15      	cmp	r3, #21
 8017d3c:	d8f6      	bhi.n	8017d2c <_printf_i+0x28>
 8017d3e:	a101      	add	r1, pc, #4	; (adr r1, 8017d44 <_printf_i+0x40>)
 8017d40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017d44:	08017d9d 	.word	0x08017d9d
 8017d48:	08017db1 	.word	0x08017db1
 8017d4c:	08017d2d 	.word	0x08017d2d
 8017d50:	08017d2d 	.word	0x08017d2d
 8017d54:	08017d2d 	.word	0x08017d2d
 8017d58:	08017d2d 	.word	0x08017d2d
 8017d5c:	08017db1 	.word	0x08017db1
 8017d60:	08017d2d 	.word	0x08017d2d
 8017d64:	08017d2d 	.word	0x08017d2d
 8017d68:	08017d2d 	.word	0x08017d2d
 8017d6c:	08017d2d 	.word	0x08017d2d
 8017d70:	08017ebd 	.word	0x08017ebd
 8017d74:	08017de1 	.word	0x08017de1
 8017d78:	08017e9f 	.word	0x08017e9f
 8017d7c:	08017d2d 	.word	0x08017d2d
 8017d80:	08017d2d 	.word	0x08017d2d
 8017d84:	08017edf 	.word	0x08017edf
 8017d88:	08017d2d 	.word	0x08017d2d
 8017d8c:	08017de1 	.word	0x08017de1
 8017d90:	08017d2d 	.word	0x08017d2d
 8017d94:	08017d2d 	.word	0x08017d2d
 8017d98:	08017ea7 	.word	0x08017ea7
 8017d9c:	682b      	ldr	r3, [r5, #0]
 8017d9e:	1d1a      	adds	r2, r3, #4
 8017da0:	681b      	ldr	r3, [r3, #0]
 8017da2:	602a      	str	r2, [r5, #0]
 8017da4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017da8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017dac:	2301      	movs	r3, #1
 8017dae:	e0a3      	b.n	8017ef8 <_printf_i+0x1f4>
 8017db0:	6820      	ldr	r0, [r4, #0]
 8017db2:	6829      	ldr	r1, [r5, #0]
 8017db4:	0606      	lsls	r6, r0, #24
 8017db6:	f101 0304 	add.w	r3, r1, #4
 8017dba:	d50a      	bpl.n	8017dd2 <_printf_i+0xce>
 8017dbc:	680e      	ldr	r6, [r1, #0]
 8017dbe:	602b      	str	r3, [r5, #0]
 8017dc0:	2e00      	cmp	r6, #0
 8017dc2:	da03      	bge.n	8017dcc <_printf_i+0xc8>
 8017dc4:	232d      	movs	r3, #45	; 0x2d
 8017dc6:	4276      	negs	r6, r6
 8017dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017dcc:	485e      	ldr	r0, [pc, #376]	; (8017f48 <_printf_i+0x244>)
 8017dce:	230a      	movs	r3, #10
 8017dd0:	e019      	b.n	8017e06 <_printf_i+0x102>
 8017dd2:	680e      	ldr	r6, [r1, #0]
 8017dd4:	602b      	str	r3, [r5, #0]
 8017dd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017dda:	bf18      	it	ne
 8017ddc:	b236      	sxthne	r6, r6
 8017dde:	e7ef      	b.n	8017dc0 <_printf_i+0xbc>
 8017de0:	682b      	ldr	r3, [r5, #0]
 8017de2:	6820      	ldr	r0, [r4, #0]
 8017de4:	1d19      	adds	r1, r3, #4
 8017de6:	6029      	str	r1, [r5, #0]
 8017de8:	0601      	lsls	r1, r0, #24
 8017dea:	d501      	bpl.n	8017df0 <_printf_i+0xec>
 8017dec:	681e      	ldr	r6, [r3, #0]
 8017dee:	e002      	b.n	8017df6 <_printf_i+0xf2>
 8017df0:	0646      	lsls	r6, r0, #25
 8017df2:	d5fb      	bpl.n	8017dec <_printf_i+0xe8>
 8017df4:	881e      	ldrh	r6, [r3, #0]
 8017df6:	4854      	ldr	r0, [pc, #336]	; (8017f48 <_printf_i+0x244>)
 8017df8:	2f6f      	cmp	r7, #111	; 0x6f
 8017dfa:	bf0c      	ite	eq
 8017dfc:	2308      	moveq	r3, #8
 8017dfe:	230a      	movne	r3, #10
 8017e00:	2100      	movs	r1, #0
 8017e02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017e06:	6865      	ldr	r5, [r4, #4]
 8017e08:	60a5      	str	r5, [r4, #8]
 8017e0a:	2d00      	cmp	r5, #0
 8017e0c:	bfa2      	ittt	ge
 8017e0e:	6821      	ldrge	r1, [r4, #0]
 8017e10:	f021 0104 	bicge.w	r1, r1, #4
 8017e14:	6021      	strge	r1, [r4, #0]
 8017e16:	b90e      	cbnz	r6, 8017e1c <_printf_i+0x118>
 8017e18:	2d00      	cmp	r5, #0
 8017e1a:	d04d      	beq.n	8017eb8 <_printf_i+0x1b4>
 8017e1c:	4615      	mov	r5, r2
 8017e1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8017e22:	fb03 6711 	mls	r7, r3, r1, r6
 8017e26:	5dc7      	ldrb	r7, [r0, r7]
 8017e28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017e2c:	4637      	mov	r7, r6
 8017e2e:	42bb      	cmp	r3, r7
 8017e30:	460e      	mov	r6, r1
 8017e32:	d9f4      	bls.n	8017e1e <_printf_i+0x11a>
 8017e34:	2b08      	cmp	r3, #8
 8017e36:	d10b      	bne.n	8017e50 <_printf_i+0x14c>
 8017e38:	6823      	ldr	r3, [r4, #0]
 8017e3a:	07de      	lsls	r6, r3, #31
 8017e3c:	d508      	bpl.n	8017e50 <_printf_i+0x14c>
 8017e3e:	6923      	ldr	r3, [r4, #16]
 8017e40:	6861      	ldr	r1, [r4, #4]
 8017e42:	4299      	cmp	r1, r3
 8017e44:	bfde      	ittt	le
 8017e46:	2330      	movle	r3, #48	; 0x30
 8017e48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017e4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017e50:	1b52      	subs	r2, r2, r5
 8017e52:	6122      	str	r2, [r4, #16]
 8017e54:	f8cd a000 	str.w	sl, [sp]
 8017e58:	464b      	mov	r3, r9
 8017e5a:	aa03      	add	r2, sp, #12
 8017e5c:	4621      	mov	r1, r4
 8017e5e:	4640      	mov	r0, r8
 8017e60:	f7ff fee2 	bl	8017c28 <_printf_common>
 8017e64:	3001      	adds	r0, #1
 8017e66:	d14c      	bne.n	8017f02 <_printf_i+0x1fe>
 8017e68:	f04f 30ff 	mov.w	r0, #4294967295
 8017e6c:	b004      	add	sp, #16
 8017e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e72:	4835      	ldr	r0, [pc, #212]	; (8017f48 <_printf_i+0x244>)
 8017e74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8017e78:	6829      	ldr	r1, [r5, #0]
 8017e7a:	6823      	ldr	r3, [r4, #0]
 8017e7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8017e80:	6029      	str	r1, [r5, #0]
 8017e82:	061d      	lsls	r5, r3, #24
 8017e84:	d514      	bpl.n	8017eb0 <_printf_i+0x1ac>
 8017e86:	07df      	lsls	r7, r3, #31
 8017e88:	bf44      	itt	mi
 8017e8a:	f043 0320 	orrmi.w	r3, r3, #32
 8017e8e:	6023      	strmi	r3, [r4, #0]
 8017e90:	b91e      	cbnz	r6, 8017e9a <_printf_i+0x196>
 8017e92:	6823      	ldr	r3, [r4, #0]
 8017e94:	f023 0320 	bic.w	r3, r3, #32
 8017e98:	6023      	str	r3, [r4, #0]
 8017e9a:	2310      	movs	r3, #16
 8017e9c:	e7b0      	b.n	8017e00 <_printf_i+0xfc>
 8017e9e:	6823      	ldr	r3, [r4, #0]
 8017ea0:	f043 0320 	orr.w	r3, r3, #32
 8017ea4:	6023      	str	r3, [r4, #0]
 8017ea6:	2378      	movs	r3, #120	; 0x78
 8017ea8:	4828      	ldr	r0, [pc, #160]	; (8017f4c <_printf_i+0x248>)
 8017eaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017eae:	e7e3      	b.n	8017e78 <_printf_i+0x174>
 8017eb0:	0659      	lsls	r1, r3, #25
 8017eb2:	bf48      	it	mi
 8017eb4:	b2b6      	uxthmi	r6, r6
 8017eb6:	e7e6      	b.n	8017e86 <_printf_i+0x182>
 8017eb8:	4615      	mov	r5, r2
 8017eba:	e7bb      	b.n	8017e34 <_printf_i+0x130>
 8017ebc:	682b      	ldr	r3, [r5, #0]
 8017ebe:	6826      	ldr	r6, [r4, #0]
 8017ec0:	6961      	ldr	r1, [r4, #20]
 8017ec2:	1d18      	adds	r0, r3, #4
 8017ec4:	6028      	str	r0, [r5, #0]
 8017ec6:	0635      	lsls	r5, r6, #24
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	d501      	bpl.n	8017ed0 <_printf_i+0x1cc>
 8017ecc:	6019      	str	r1, [r3, #0]
 8017ece:	e002      	b.n	8017ed6 <_printf_i+0x1d2>
 8017ed0:	0670      	lsls	r0, r6, #25
 8017ed2:	d5fb      	bpl.n	8017ecc <_printf_i+0x1c8>
 8017ed4:	8019      	strh	r1, [r3, #0]
 8017ed6:	2300      	movs	r3, #0
 8017ed8:	6123      	str	r3, [r4, #16]
 8017eda:	4615      	mov	r5, r2
 8017edc:	e7ba      	b.n	8017e54 <_printf_i+0x150>
 8017ede:	682b      	ldr	r3, [r5, #0]
 8017ee0:	1d1a      	adds	r2, r3, #4
 8017ee2:	602a      	str	r2, [r5, #0]
 8017ee4:	681d      	ldr	r5, [r3, #0]
 8017ee6:	6862      	ldr	r2, [r4, #4]
 8017ee8:	2100      	movs	r1, #0
 8017eea:	4628      	mov	r0, r5
 8017eec:	f7e8 f9a8 	bl	8000240 <memchr>
 8017ef0:	b108      	cbz	r0, 8017ef6 <_printf_i+0x1f2>
 8017ef2:	1b40      	subs	r0, r0, r5
 8017ef4:	6060      	str	r0, [r4, #4]
 8017ef6:	6863      	ldr	r3, [r4, #4]
 8017ef8:	6123      	str	r3, [r4, #16]
 8017efa:	2300      	movs	r3, #0
 8017efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017f00:	e7a8      	b.n	8017e54 <_printf_i+0x150>
 8017f02:	6923      	ldr	r3, [r4, #16]
 8017f04:	462a      	mov	r2, r5
 8017f06:	4649      	mov	r1, r9
 8017f08:	4640      	mov	r0, r8
 8017f0a:	47d0      	blx	sl
 8017f0c:	3001      	adds	r0, #1
 8017f0e:	d0ab      	beq.n	8017e68 <_printf_i+0x164>
 8017f10:	6823      	ldr	r3, [r4, #0]
 8017f12:	079b      	lsls	r3, r3, #30
 8017f14:	d413      	bmi.n	8017f3e <_printf_i+0x23a>
 8017f16:	68e0      	ldr	r0, [r4, #12]
 8017f18:	9b03      	ldr	r3, [sp, #12]
 8017f1a:	4298      	cmp	r0, r3
 8017f1c:	bfb8      	it	lt
 8017f1e:	4618      	movlt	r0, r3
 8017f20:	e7a4      	b.n	8017e6c <_printf_i+0x168>
 8017f22:	2301      	movs	r3, #1
 8017f24:	4632      	mov	r2, r6
 8017f26:	4649      	mov	r1, r9
 8017f28:	4640      	mov	r0, r8
 8017f2a:	47d0      	blx	sl
 8017f2c:	3001      	adds	r0, #1
 8017f2e:	d09b      	beq.n	8017e68 <_printf_i+0x164>
 8017f30:	3501      	adds	r5, #1
 8017f32:	68e3      	ldr	r3, [r4, #12]
 8017f34:	9903      	ldr	r1, [sp, #12]
 8017f36:	1a5b      	subs	r3, r3, r1
 8017f38:	42ab      	cmp	r3, r5
 8017f3a:	dcf2      	bgt.n	8017f22 <_printf_i+0x21e>
 8017f3c:	e7eb      	b.n	8017f16 <_printf_i+0x212>
 8017f3e:	2500      	movs	r5, #0
 8017f40:	f104 0619 	add.w	r6, r4, #25
 8017f44:	e7f5      	b.n	8017f32 <_printf_i+0x22e>
 8017f46:	bf00      	nop
 8017f48:	0801b119 	.word	0x0801b119
 8017f4c:	0801b12a 	.word	0x0801b12a

08017f50 <_sbrk_r>:
 8017f50:	b538      	push	{r3, r4, r5, lr}
 8017f52:	4d06      	ldr	r5, [pc, #24]	; (8017f6c <_sbrk_r+0x1c>)
 8017f54:	2300      	movs	r3, #0
 8017f56:	4604      	mov	r4, r0
 8017f58:	4608      	mov	r0, r1
 8017f5a:	602b      	str	r3, [r5, #0]
 8017f5c:	f7e9 ffc2 	bl	8001ee4 <_sbrk>
 8017f60:	1c43      	adds	r3, r0, #1
 8017f62:	d102      	bne.n	8017f6a <_sbrk_r+0x1a>
 8017f64:	682b      	ldr	r3, [r5, #0]
 8017f66:	b103      	cbz	r3, 8017f6a <_sbrk_r+0x1a>
 8017f68:	6023      	str	r3, [r4, #0]
 8017f6a:	bd38      	pop	{r3, r4, r5, pc}
 8017f6c:	2001117c 	.word	0x2001117c

08017f70 <__sread>:
 8017f70:	b510      	push	{r4, lr}
 8017f72:	460c      	mov	r4, r1
 8017f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f78:	f000 f8a8 	bl	80180cc <_read_r>
 8017f7c:	2800      	cmp	r0, #0
 8017f7e:	bfab      	itete	ge
 8017f80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017f82:	89a3      	ldrhlt	r3, [r4, #12]
 8017f84:	181b      	addge	r3, r3, r0
 8017f86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017f8a:	bfac      	ite	ge
 8017f8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8017f8e:	81a3      	strhlt	r3, [r4, #12]
 8017f90:	bd10      	pop	{r4, pc}

08017f92 <__swrite>:
 8017f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f96:	461f      	mov	r7, r3
 8017f98:	898b      	ldrh	r3, [r1, #12]
 8017f9a:	05db      	lsls	r3, r3, #23
 8017f9c:	4605      	mov	r5, r0
 8017f9e:	460c      	mov	r4, r1
 8017fa0:	4616      	mov	r6, r2
 8017fa2:	d505      	bpl.n	8017fb0 <__swrite+0x1e>
 8017fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017fa8:	2302      	movs	r3, #2
 8017faa:	2200      	movs	r2, #0
 8017fac:	f000 f870 	bl	8018090 <_lseek_r>
 8017fb0:	89a3      	ldrh	r3, [r4, #12]
 8017fb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017fb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017fba:	81a3      	strh	r3, [r4, #12]
 8017fbc:	4632      	mov	r2, r6
 8017fbe:	463b      	mov	r3, r7
 8017fc0:	4628      	mov	r0, r5
 8017fc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017fc6:	f000 b817 	b.w	8017ff8 <_write_r>

08017fca <__sseek>:
 8017fca:	b510      	push	{r4, lr}
 8017fcc:	460c      	mov	r4, r1
 8017fce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017fd2:	f000 f85d 	bl	8018090 <_lseek_r>
 8017fd6:	1c43      	adds	r3, r0, #1
 8017fd8:	89a3      	ldrh	r3, [r4, #12]
 8017fda:	bf15      	itete	ne
 8017fdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8017fde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017fe2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017fe6:	81a3      	strheq	r3, [r4, #12]
 8017fe8:	bf18      	it	ne
 8017fea:	81a3      	strhne	r3, [r4, #12]
 8017fec:	bd10      	pop	{r4, pc}

08017fee <__sclose>:
 8017fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ff2:	f000 b81b 	b.w	801802c <_close_r>
	...

08017ff8 <_write_r>:
 8017ff8:	b538      	push	{r3, r4, r5, lr}
 8017ffa:	4d07      	ldr	r5, [pc, #28]	; (8018018 <_write_r+0x20>)
 8017ffc:	4604      	mov	r4, r0
 8017ffe:	4608      	mov	r0, r1
 8018000:	4611      	mov	r1, r2
 8018002:	2200      	movs	r2, #0
 8018004:	602a      	str	r2, [r5, #0]
 8018006:	461a      	mov	r2, r3
 8018008:	f7e9 ff1b 	bl	8001e42 <_write>
 801800c:	1c43      	adds	r3, r0, #1
 801800e:	d102      	bne.n	8018016 <_write_r+0x1e>
 8018010:	682b      	ldr	r3, [r5, #0]
 8018012:	b103      	cbz	r3, 8018016 <_write_r+0x1e>
 8018014:	6023      	str	r3, [r4, #0]
 8018016:	bd38      	pop	{r3, r4, r5, pc}
 8018018:	2001117c 	.word	0x2001117c

0801801c <abort>:
 801801c:	b508      	push	{r3, lr}
 801801e:	2006      	movs	r0, #6
 8018020:	f000 f88e 	bl	8018140 <raise>
 8018024:	2001      	movs	r0, #1
 8018026:	f7e9 fee5 	bl	8001df4 <_exit>
	...

0801802c <_close_r>:
 801802c:	b538      	push	{r3, r4, r5, lr}
 801802e:	4d06      	ldr	r5, [pc, #24]	; (8018048 <_close_r+0x1c>)
 8018030:	2300      	movs	r3, #0
 8018032:	4604      	mov	r4, r0
 8018034:	4608      	mov	r0, r1
 8018036:	602b      	str	r3, [r5, #0]
 8018038:	f7e9 ff1f 	bl	8001e7a <_close>
 801803c:	1c43      	adds	r3, r0, #1
 801803e:	d102      	bne.n	8018046 <_close_r+0x1a>
 8018040:	682b      	ldr	r3, [r5, #0]
 8018042:	b103      	cbz	r3, 8018046 <_close_r+0x1a>
 8018044:	6023      	str	r3, [r4, #0]
 8018046:	bd38      	pop	{r3, r4, r5, pc}
 8018048:	2001117c 	.word	0x2001117c

0801804c <_fstat_r>:
 801804c:	b538      	push	{r3, r4, r5, lr}
 801804e:	4d07      	ldr	r5, [pc, #28]	; (801806c <_fstat_r+0x20>)
 8018050:	2300      	movs	r3, #0
 8018052:	4604      	mov	r4, r0
 8018054:	4608      	mov	r0, r1
 8018056:	4611      	mov	r1, r2
 8018058:	602b      	str	r3, [r5, #0]
 801805a:	f7e9 ff1a 	bl	8001e92 <_fstat>
 801805e:	1c43      	adds	r3, r0, #1
 8018060:	d102      	bne.n	8018068 <_fstat_r+0x1c>
 8018062:	682b      	ldr	r3, [r5, #0]
 8018064:	b103      	cbz	r3, 8018068 <_fstat_r+0x1c>
 8018066:	6023      	str	r3, [r4, #0]
 8018068:	bd38      	pop	{r3, r4, r5, pc}
 801806a:	bf00      	nop
 801806c:	2001117c 	.word	0x2001117c

08018070 <_isatty_r>:
 8018070:	b538      	push	{r3, r4, r5, lr}
 8018072:	4d06      	ldr	r5, [pc, #24]	; (801808c <_isatty_r+0x1c>)
 8018074:	2300      	movs	r3, #0
 8018076:	4604      	mov	r4, r0
 8018078:	4608      	mov	r0, r1
 801807a:	602b      	str	r3, [r5, #0]
 801807c:	f7e9 ff19 	bl	8001eb2 <_isatty>
 8018080:	1c43      	adds	r3, r0, #1
 8018082:	d102      	bne.n	801808a <_isatty_r+0x1a>
 8018084:	682b      	ldr	r3, [r5, #0]
 8018086:	b103      	cbz	r3, 801808a <_isatty_r+0x1a>
 8018088:	6023      	str	r3, [r4, #0]
 801808a:	bd38      	pop	{r3, r4, r5, pc}
 801808c:	2001117c 	.word	0x2001117c

08018090 <_lseek_r>:
 8018090:	b538      	push	{r3, r4, r5, lr}
 8018092:	4d07      	ldr	r5, [pc, #28]	; (80180b0 <_lseek_r+0x20>)
 8018094:	4604      	mov	r4, r0
 8018096:	4608      	mov	r0, r1
 8018098:	4611      	mov	r1, r2
 801809a:	2200      	movs	r2, #0
 801809c:	602a      	str	r2, [r5, #0]
 801809e:	461a      	mov	r2, r3
 80180a0:	f7e9 ff12 	bl	8001ec8 <_lseek>
 80180a4:	1c43      	adds	r3, r0, #1
 80180a6:	d102      	bne.n	80180ae <_lseek_r+0x1e>
 80180a8:	682b      	ldr	r3, [r5, #0]
 80180aa:	b103      	cbz	r3, 80180ae <_lseek_r+0x1e>
 80180ac:	6023      	str	r3, [r4, #0]
 80180ae:	bd38      	pop	{r3, r4, r5, pc}
 80180b0:	2001117c 	.word	0x2001117c

080180b4 <__malloc_lock>:
 80180b4:	4801      	ldr	r0, [pc, #4]	; (80180bc <__malloc_lock+0x8>)
 80180b6:	f7ff bb0d 	b.w	80176d4 <__retarget_lock_acquire_recursive>
 80180ba:	bf00      	nop
 80180bc:	20011184 	.word	0x20011184

080180c0 <__malloc_unlock>:
 80180c0:	4801      	ldr	r0, [pc, #4]	; (80180c8 <__malloc_unlock+0x8>)
 80180c2:	f7ff bb08 	b.w	80176d6 <__retarget_lock_release_recursive>
 80180c6:	bf00      	nop
 80180c8:	20011184 	.word	0x20011184

080180cc <_read_r>:
 80180cc:	b538      	push	{r3, r4, r5, lr}
 80180ce:	4d07      	ldr	r5, [pc, #28]	; (80180ec <_read_r+0x20>)
 80180d0:	4604      	mov	r4, r0
 80180d2:	4608      	mov	r0, r1
 80180d4:	4611      	mov	r1, r2
 80180d6:	2200      	movs	r2, #0
 80180d8:	602a      	str	r2, [r5, #0]
 80180da:	461a      	mov	r2, r3
 80180dc:	f7e9 fe94 	bl	8001e08 <_read>
 80180e0:	1c43      	adds	r3, r0, #1
 80180e2:	d102      	bne.n	80180ea <_read_r+0x1e>
 80180e4:	682b      	ldr	r3, [r5, #0]
 80180e6:	b103      	cbz	r3, 80180ea <_read_r+0x1e>
 80180e8:	6023      	str	r3, [r4, #0]
 80180ea:	bd38      	pop	{r3, r4, r5, pc}
 80180ec:	2001117c 	.word	0x2001117c

080180f0 <_raise_r>:
 80180f0:	291f      	cmp	r1, #31
 80180f2:	b538      	push	{r3, r4, r5, lr}
 80180f4:	4604      	mov	r4, r0
 80180f6:	460d      	mov	r5, r1
 80180f8:	d904      	bls.n	8018104 <_raise_r+0x14>
 80180fa:	2316      	movs	r3, #22
 80180fc:	6003      	str	r3, [r0, #0]
 80180fe:	f04f 30ff 	mov.w	r0, #4294967295
 8018102:	bd38      	pop	{r3, r4, r5, pc}
 8018104:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018106:	b112      	cbz	r2, 801810e <_raise_r+0x1e>
 8018108:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801810c:	b94b      	cbnz	r3, 8018122 <_raise_r+0x32>
 801810e:	4620      	mov	r0, r4
 8018110:	f000 f830 	bl	8018174 <_getpid_r>
 8018114:	462a      	mov	r2, r5
 8018116:	4601      	mov	r1, r0
 8018118:	4620      	mov	r0, r4
 801811a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801811e:	f000 b817 	b.w	8018150 <_kill_r>
 8018122:	2b01      	cmp	r3, #1
 8018124:	d00a      	beq.n	801813c <_raise_r+0x4c>
 8018126:	1c59      	adds	r1, r3, #1
 8018128:	d103      	bne.n	8018132 <_raise_r+0x42>
 801812a:	2316      	movs	r3, #22
 801812c:	6003      	str	r3, [r0, #0]
 801812e:	2001      	movs	r0, #1
 8018130:	e7e7      	b.n	8018102 <_raise_r+0x12>
 8018132:	2400      	movs	r4, #0
 8018134:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018138:	4628      	mov	r0, r5
 801813a:	4798      	blx	r3
 801813c:	2000      	movs	r0, #0
 801813e:	e7e0      	b.n	8018102 <_raise_r+0x12>

08018140 <raise>:
 8018140:	4b02      	ldr	r3, [pc, #8]	; (801814c <raise+0xc>)
 8018142:	4601      	mov	r1, r0
 8018144:	6818      	ldr	r0, [r3, #0]
 8018146:	f7ff bfd3 	b.w	80180f0 <_raise_r>
 801814a:	bf00      	nop
 801814c:	20000030 	.word	0x20000030

08018150 <_kill_r>:
 8018150:	b538      	push	{r3, r4, r5, lr}
 8018152:	4d07      	ldr	r5, [pc, #28]	; (8018170 <_kill_r+0x20>)
 8018154:	2300      	movs	r3, #0
 8018156:	4604      	mov	r4, r0
 8018158:	4608      	mov	r0, r1
 801815a:	4611      	mov	r1, r2
 801815c:	602b      	str	r3, [r5, #0]
 801815e:	f7e9 fe37 	bl	8001dd0 <_kill>
 8018162:	1c43      	adds	r3, r0, #1
 8018164:	d102      	bne.n	801816c <_kill_r+0x1c>
 8018166:	682b      	ldr	r3, [r5, #0]
 8018168:	b103      	cbz	r3, 801816c <_kill_r+0x1c>
 801816a:	6023      	str	r3, [r4, #0]
 801816c:	bd38      	pop	{r3, r4, r5, pc}
 801816e:	bf00      	nop
 8018170:	2001117c 	.word	0x2001117c

08018174 <_getpid_r>:
 8018174:	f7e9 be24 	b.w	8001dc0 <_getpid>

08018178 <_init>:
 8018178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801817a:	bf00      	nop
 801817c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801817e:	bc08      	pop	{r3}
 8018180:	469e      	mov	lr, r3
 8018182:	4770      	bx	lr

08018184 <_fini>:
 8018184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018186:	bf00      	nop
 8018188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801818a:	bc08      	pop	{r3}
 801818c:	469e      	mov	lr, r3
 801818e:	4770      	bx	lr
