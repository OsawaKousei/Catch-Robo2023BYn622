
Catch-Robo2023BYn622.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c864  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d04  0801ca64  0801ca64  0002ca64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020768  08020768  000401d4  2**0
                  CONTENTS
  4 .ARM          00000008  08020768  08020768  00030768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020770  08020770  000401d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020770  08020770  00030770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020774  08020774  00030774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08020778  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000094  0802080c  00040094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000134  080208ac  00040134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00011024  200001d8  0802094c  000401d8  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  200111fc  0802094c  000411fc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000401d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004307d  00000000  00000000  00040202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000092b4  00000000  00000000  0008327f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002f00  00000000  00000000  0008c538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002d68  00000000  00000000  0008f438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003d6ae  00000000  00000000  000921a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004b2bd  00000000  00000000  000cf84e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012a3d5  00000000  00000000  0011ab0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00244ee0  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000cd28  00000000  00000000  00244f30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d8 	.word	0x200001d8
 800021c:	00000000 	.word	0x00000000
 8000220:	0801ca4c 	.word	0x0801ca4c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001dc 	.word	0x200001dc
 800023c:	0801ca4c 	.word	0x0801ca4c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <PushTx8Bytes>:
CANTxBuf buffer[CAN_TXBUFFER_SIZE];
uint32_t readpoint = 0;
uint32_t writepoint = 0;
uint8_t isfull = 0;

HAL_StatusTypeDef PushTx8Bytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){
 80005e4:	b480      	push	{r7}
 80005e6:	b087      	sub	sp, #28
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
	buffer[writepoint].DLC = size;
 80005f0:	4b24      	ldr	r3, [pc, #144]	; (8000684 <PushTx8Bytes+0xa0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a24      	ldr	r2, [pc, #144]	; (8000688 <PushTx8Bytes+0xa4>)
 80005f6:	011b      	lsls	r3, r3, #4
 80005f8:	4413      	add	r3, r2
 80005fa:	3304      	adds	r3, #4
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	601a      	str	r2, [r3, #0]
	buffer[writepoint].ExtId = ExtId;
 8000600:	4b20      	ldr	r3, [pc, #128]	; (8000684 <PushTx8Bytes+0xa0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a20      	ldr	r2, [pc, #128]	; (8000688 <PushTx8Bytes+0xa4>)
 8000606:	011b      	lsls	r3, r3, #4
 8000608:	4413      	add	r3, r2
 800060a:	68fa      	ldr	r2, [r7, #12]
 800060c:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++)buffer[writepoint].bytes[i] = bytes[i];
 800060e:	2300      	movs	r3, #0
 8000610:	75fb      	strb	r3, [r7, #23]
 8000612:	e010      	b.n	8000636 <PushTx8Bytes+0x52>
 8000614:	7dfb      	ldrb	r3, [r7, #23]
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	18d1      	adds	r1, r2, r3
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <PushTx8Bytes+0xa0>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	7dfb      	ldrb	r3, [r7, #23]
 8000620:	7808      	ldrb	r0, [r1, #0]
 8000622:	4919      	ldr	r1, [pc, #100]	; (8000688 <PushTx8Bytes+0xa4>)
 8000624:	0112      	lsls	r2, r2, #4
 8000626:	440a      	add	r2, r1
 8000628:	4413      	add	r3, r2
 800062a:	3308      	adds	r3, #8
 800062c:	4602      	mov	r2, r0
 800062e:	701a      	strb	r2, [r3, #0]
 8000630:	7dfb      	ldrb	r3, [r7, #23]
 8000632:	3301      	adds	r3, #1
 8000634:	75fb      	strb	r3, [r7, #23]
 8000636:	7dfb      	ldrb	r3, [r7, #23]
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	429a      	cmp	r2, r3
 800063c:	d8ea      	bhi.n	8000614 <PushTx8Bytes+0x30>

	if (isfull == 1)readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <PushTx8Bytes+0xa8>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d106      	bne.n	8000654 <PushTx8Bytes+0x70>
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <PushTx8Bytes+0xac>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	3301      	adds	r3, #1
 800064c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000650:	4a0f      	ldr	r2, [pc, #60]	; (8000690 <PushTx8Bytes+0xac>)
 8000652:	6013      	str	r3, [r2, #0]
	writepoint = (writepoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000654:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <PushTx8Bytes+0xa0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	3301      	adds	r3, #1
 800065a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800065e:	4a09      	ldr	r2, [pc, #36]	; (8000684 <PushTx8Bytes+0xa0>)
 8000660:	6013      	str	r3, [r2, #0]

	if (writepoint == readpoint){
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <PushTx8Bytes+0xa0>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <PushTx8Bytes+0xac>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	429a      	cmp	r2, r3
 800066c:	d102      	bne.n	8000674 <PushTx8Bytes+0x90>
		isfull = 1;
 800066e:	4b07      	ldr	r3, [pc, #28]	; (800068c <PushTx8Bytes+0xa8>)
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]
	}

	return HAL_OK;
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	371c      	adds	r7, #28
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	200024cc 	.word	0x200024cc
 8000688:	200004c8 	.word	0x200004c8
 800068c:	200024d0 	.word	0x200024d0
 8000690:	200024c8 	.word	0x200024c8

08000694 <PopSendTx8Bytes>:

HAL_StatusTypeDef PopSendTx8Bytes(){
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;

	txHeader.RTR = CAN_RTR_DATA; // Data frame
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
	txHeader.IDE = CAN_ID_EXT;	 // CAN Extend ID
 800069e:	2304      	movs	r3, #4
 80006a0:	60fb      	str	r3, [r7, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	763b      	strb	r3, [r7, #24]

	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 80006a6:	e035      	b.n	8000714 <PopSendTx8Bytes+0x80>
		if (isfull == 0 && readpoint == writepoint)break;
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <PopSendTx8Bytes+0xa0>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d105      	bne.n	80006bc <PopSendTx8Bytes+0x28>
 80006b0:	4b21      	ldr	r3, [pc, #132]	; (8000738 <PopSendTx8Bytes+0xa4>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b21      	ldr	r3, [pc, #132]	; (800073c <PopSendTx8Bytes+0xa8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d034      	beq.n	8000726 <PopSendTx8Bytes+0x92>

		txHeader.DLC = buffer[readpoint].DLC;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <PopSendTx8Bytes+0xa4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a1f      	ldr	r2, [pc, #124]	; (8000740 <PopSendTx8Bytes+0xac>)
 80006c2:	011b      	lsls	r3, r3, #4
 80006c4:	4413      	add	r3, r2
 80006c6:	3304      	adds	r3, #4
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	617b      	str	r3, [r7, #20]
		txHeader.ExtId = buffer[readpoint].ExtId;
 80006cc:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <PopSendTx8Bytes+0xa4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a1b      	ldr	r2, [pc, #108]	; (8000740 <PopSendTx8Bytes+0xac>)
 80006d2:	011b      	lsls	r3, r3, #4
 80006d4:	4413      	add	r3, r2
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	60bb      	str	r3, [r7, #8]

		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, buffer[readpoint].bytes, &txMailbox);
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <PopSendTx8Bytes+0xb0>)
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	4b16      	ldr	r3, [pc, #88]	; (8000738 <PopSendTx8Bytes+0xa4>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	011b      	lsls	r3, r3, #4
 80006e4:	3308      	adds	r3, #8
 80006e6:	4a16      	ldr	r2, [pc, #88]	; (8000740 <PopSendTx8Bytes+0xac>)
 80006e8:	441a      	add	r2, r3
 80006ea:	463b      	mov	r3, r7
 80006ec:	1d39      	adds	r1, r7, #4
 80006ee:	f002 f949 	bl	8002984 <HAL_CAN_AddTxMessage>
 80006f2:	4603      	mov	r3, r0
 80006f4:	77fb      	strb	r3, [r7, #31]
		if (ret != HAL_OK)return ret;
 80006f6:	7ffb      	ldrb	r3, [r7, #31]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <PopSendTx8Bytes+0x6c>
 80006fc:	7ffb      	ldrb	r3, [r7, #31]
 80006fe:	e014      	b.n	800072a <PopSendTx8Bytes+0x96>

		readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000700:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <PopSendTx8Bytes+0xa4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	3301      	adds	r3, #1
 8000706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800070a:	4a0b      	ldr	r2, [pc, #44]	; (8000738 <PopSendTx8Bytes+0xa4>)
 800070c:	6013      	str	r3, [r2, #0]
		isfull = 0;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <PopSendTx8Bytes+0xa0>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <PopSendTx8Bytes+0xb0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f002 fa03 	bl	8002b24 <HAL_CAN_GetTxMailboxesFreeLevel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d1c1      	bne.n	80006a8 <PopSendTx8Bytes+0x14>
 8000724:	e000      	b.n	8000728 <PopSendTx8Bytes+0x94>
		if (isfull == 0 && readpoint == writepoint)break;
 8000726:	bf00      	nop
	}

	return HAL_OK;
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	3720      	adds	r7, #32
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200024d0 	.word	0x200024d0
 8000738:	200024c8 	.word	0x200024c8
 800073c:	200024cc 	.word	0x200024cc
 8000740:	200004c8 	.word	0x200004c8
 8000744:	200001f4 	.word	0x200001f4

08000748 <WhenTxMailbox0_1_2CompleteCallbackCalled>:

void WhenTxMailbox0_1_2CompleteCallbackCalled(){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 800074c:	f7ff ffa2 	bl	8000694 <PopSendTx8Bytes>
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}

08000754 <WhenTxMailbox0_1_2AbortCallbackCalled>:

void WhenTxMailbox0_1_2AbortCallbackCalled(){
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 8000758:	f7ff ff9c 	bl	8000694 <PopSendTx8Bytes>
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <WhenCANRxFifo0MsgPending>:

void WhenCANRxFifo0MsgPending(CAN_HandleTypeDef *phcan, NUM_OF_DEVICES *num_of){ // Fifo0MsgPendingで呼び出すこと. CAN受信時に呼び出される関数
 8000760:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000764:	b08e      	sub	sp, #56	; 0x38
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
 800076a:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_CAN_GetRxMessage(phcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK){
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	f107 0218 	add.w	r2, r7, #24
 8000774:	2100      	movs	r1, #0
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f002 fa09 	bl	8002b8e <HAL_CAN_GetRxMessage>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d004      	beq.n	800078c <WhenCANRxFifo0MsgPending+0x2c>
		// Reception Error
		printf("GetRxMessage error\n\r");
 8000782:	486e      	ldr	r0, [pc, #440]	; (800093c <WhenCANRxFifo0MsgPending+0x1dc>)
 8000784:	f01b f83e 	bl	801b804 <iprintf>
		Error_Handler();
 8000788:	f001 f9a4 	bl	8001ad4 <Error_Handler>
	}
	// awakeコマンドを受信した場合
	CAN_Device can_device = Extract_CAN_Device(rxHeader.ExtId);
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	2200      	movs	r2, #0
 8000790:	4698      	mov	r8, r3
 8000792:	4691      	mov	r9, r2
 8000794:	4640      	mov	r0, r8
 8000796:	4649      	mov	r1, r9
 8000798:	f000 fc66 	bl	8001068 <Extract_CAN_Device>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	733a      	strb	r2, [r7, #12]
 80007a2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80007a6:	737a      	strb	r2, [r7, #13]
 80007a8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80007ac:	73bb      	strb	r3, [r7, #14]
	uint8_t extracted_cmd = Extract_CAN_CMD(rxHeader.ExtId);
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	2200      	movs	r2, #0
 80007b2:	461c      	mov	r4, r3
 80007b4:	4615      	mov	r5, r2
 80007b6:	4620      	mov	r0, r4
 80007b8:	4629      	mov	r1, r5
 80007ba:	f000 fca1 	bl	8001100 <Extract_CAN_CMD>
 80007be:	4603      	mov	r3, r0
 80007c0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(extracted_cmd == AWAKE_CMD){
 80007c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d139      	bne.n	8000840 <WhenCANRxFifo0MsgPending+0xe0>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 80007cc:	2300      	movs	r3, #0
 80007ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80007d2:	e013      	b.n	80007fc <WhenCANRxFifo0MsgPending+0x9c>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 80007d4:	7b3b      	ldrb	r3, [r7, #12]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80007dc:	4958      	ldr	r1, [pc, #352]	; (8000940 <WhenCANRxFifo0MsgPending+0x1e0>)
 80007de:	4603      	mov	r3, r0
 80007e0:	00db      	lsls	r3, r3, #3
 80007e2:	1a1b      	subs	r3, r3, r0
 80007e4:	440b      	add	r3, r1
 80007e6:	4413      	add	r3, r2
 80007e8:	781a      	ldrb	r2, [r3, #0]
 80007ea:	7c3b      	ldrb	r3, [r7, #16]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	f000 80a0 	beq.w	8000932 <WhenCANRxFifo0MsgPending+0x1d2>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 80007f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007f6:	3301      	adds	r3, #1
 80007f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80007fc:	7b3b      	ldrb	r3, [r7, #12]
 80007fe:	461a      	mov	r2, r3
 8000800:	4b50      	ldr	r3, [pc, #320]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000802:	5c9b      	ldrb	r3, [r3, r2]
 8000804:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000808:	429a      	cmp	r2, r3
 800080a:	d3e3      	bcc.n	80007d4 <WhenCANRxFifo0MsgPending+0x74>
		}
		node_id_list[can_device.node_type][num_detected[can_device.node_type]] = rxData[0];
 800080c:	7b3b      	ldrb	r3, [r7, #12]
 800080e:	4619      	mov	r1, r3
 8000810:	7b3b      	ldrb	r3, [r7, #12]
 8000812:	461a      	mov	r2, r3
 8000814:	4b4b      	ldr	r3, [pc, #300]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000816:	5c9b      	ldrb	r3, [r3, r2]
 8000818:	461c      	mov	r4, r3
 800081a:	7c38      	ldrb	r0, [r7, #16]
 800081c:	4a48      	ldr	r2, [pc, #288]	; (8000940 <WhenCANRxFifo0MsgPending+0x1e0>)
 800081e:	460b      	mov	r3, r1
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	1a5b      	subs	r3, r3, r1
 8000824:	4413      	add	r3, r2
 8000826:	4423      	add	r3, r4
 8000828:	4602      	mov	r2, r0
 800082a:	701a      	strb	r2, [r3, #0]
		num_detected[can_device.node_type] += 1;
 800082c:	7b3b      	ldrb	r3, [r7, #12]
 800082e:	461a      	mov	r2, r3
 8000830:	4b44      	ldr	r3, [pc, #272]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000832:	5c9b      	ldrb	r3, [r3, r2]
 8000834:	7b3a      	ldrb	r2, [r7, #12]
 8000836:	3301      	adds	r3, #1
 8000838:	b2d9      	uxtb	r1, r3
 800083a:	4b42      	ldr	r3, [pc, #264]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 800083c:	5499      	strb	r1, [r3, r2]
 800083e:	e04a      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
	}else if(extracted_cmd == FB_CMD){
 8000840:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000844:	2b01      	cmp	r3, #1
 8000846:	d146      	bne.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
		if (can_device.node_type == NODE_MCMD1){
 8000848:	7b3b      	ldrb	r3, [r7, #12]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d10d      	bne.n	800086a <WhenCANRxFifo0MsgPending+0x10a>
			memcpy(&(_feedback_table_mcmd1[can_device.node_id].feedback_motor[can_device.device_num]),
 800084e:	7b7b      	ldrb	r3, [r7, #13]
 8000850:	7bba      	ldrb	r2, [r7, #14]
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	4413      	add	r3, r2
 8000856:	00db      	lsls	r3, r3, #3
 8000858:	4a3b      	ldr	r2, [pc, #236]	; (8000948 <WhenCANRxFifo0MsgPending+0x1e8>)
 800085a:	4413      	add	r3, r2
 800085c:	461a      	mov	r2, r3
 800085e:	f107 0310 	add.w	r3, r7, #16
 8000862:	cb03      	ldmia	r3!, {r0, r1}
 8000864:	6010      	str	r0, [r2, #0]
 8000866:	6051      	str	r1, [r2, #4]
 8000868:	e035      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
                   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD2){
 800086a:	7b3b      	ldrb	r3, [r7, #12]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d10d      	bne.n	800088c <WhenCANRxFifo0MsgPending+0x12c>
			memcpy(&(_feedback_table_mcmd2[can_device.node_id].feedback_motor[can_device.device_num]),
 8000870:	7b7b      	ldrb	r3, [r7, #13]
 8000872:	7bba      	ldrb	r2, [r7, #14]
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	4413      	add	r3, r2
 8000878:	00db      	lsls	r3, r3, #3
 800087a:	4a34      	ldr	r2, [pc, #208]	; (800094c <WhenCANRxFifo0MsgPending+0x1ec>)
 800087c:	4413      	add	r3, r2
 800087e:	461a      	mov	r2, r3
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	cb03      	ldmia	r3!, {r0, r1}
 8000886:	6010      	str	r0, [r2, #0]
 8000888:	6051      	str	r1, [r2, #4]
 800088a:	e024      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD3){
 800088c:	7b3b      	ldrb	r3, [r7, #12]
 800088e:	2b03      	cmp	r3, #3
 8000890:	d10d      	bne.n	80008ae <WhenCANRxFifo0MsgPending+0x14e>
			memcpy(&(_feedback_table_mcmd3[can_device.node_id].feedback_motor[can_device.device_num]),
 8000892:	7b7b      	ldrb	r3, [r7, #13]
 8000894:	7bba      	ldrb	r2, [r7, #14]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	4413      	add	r3, r2
 800089a:	00db      	lsls	r3, r3, #3
 800089c:	4a2c      	ldr	r2, [pc, #176]	; (8000950 <WhenCANRxFifo0MsgPending+0x1f0>)
 800089e:	4413      	add	r3, r2
 80008a0:	461a      	mov	r2, r3
 80008a2:	f107 0310 	add.w	r3, r7, #16
 80008a6:	cb03      	ldmia	r3!, {r0, r1}
 80008a8:	6010      	str	r0, [r2, #0]
 80008aa:	6051      	str	r1, [r2, #4]
 80008ac:	e013      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD4){
 80008ae:	7b3b      	ldrb	r3, [r7, #12]
 80008b0:	2b06      	cmp	r3, #6
 80008b2:	d10d      	bne.n	80008d0 <WhenCANRxFifo0MsgPending+0x170>
			memcpy(&(_feedback_table_mcmd4[can_device.node_id].feedback_motor[can_device.device_num]),
 80008b4:	7b7b      	ldrb	r3, [r7, #13]
 80008b6:	7bba      	ldrb	r2, [r7, #14]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	4413      	add	r3, r2
 80008bc:	00db      	lsls	r3, r3, #3
 80008be:	4a25      	ldr	r2, [pc, #148]	; (8000954 <WhenCANRxFifo0MsgPending+0x1f4>)
 80008c0:	4413      	add	r3, r2
 80008c2:	461a      	mov	r2, r3
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	cb03      	ldmia	r3!, {r0, r1}
 80008ca:	6010      	str	r0, [r2, #0]
 80008cc:	6051      	str	r1, [r2, #4]
 80008ce:	e002      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else{
			printf("Error\n\r");
 80008d0:	4821      	ldr	r0, [pc, #132]	; (8000958 <WhenCANRxFifo0MsgPending+0x1f8>)
 80008d2:	f01a ff97 	bl	801b804 <iprintf>
		}
	}else{

    }
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 80008d6:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 80008d8:	785a      	ldrb	r2, [r3, #1]
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	429a      	cmp	r2, r3
 80008e0:	d128      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 80008e4:	789a      	ldrb	r2, [r3, #2]
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	785b      	ldrb	r3, [r3, #1]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d122      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 80008f0:	78da      	ldrb	r2, [r3, #3]
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	789b      	ldrb	r3, [r3, #2]
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d11c      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 80008fc:	791a      	ldrb	r2, [r3, #4]
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	78db      	ldrb	r3, [r3, #3]
 8000902:	429a      	cmp	r2, r3
 8000904:	d116      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000908:	795a      	ldrb	r2, [r3, #5]
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	791b      	ldrb	r3, [r3, #4]
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 800090e:	429a      	cmp	r2, r3
 8000910:	d110      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000914:	799a      	ldrb	r2, [r3, #6]
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	795b      	ldrb	r3, [r3, #5]
 800091a:	429a      	cmp	r2, r3
 800091c:	d10a      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000920:	7a1a      	ldrb	r2, [r3, #8]
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	799b      	ldrb	r3, [r3, #6]
 8000926:	429a      	cmp	r2, r3
 8000928:	d104      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		all_node_detected = 1;
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <WhenCANRxFifo0MsgPending+0x1fc>)
 800092c:	2201      	movs	r2, #1
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	e000      	b.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000932:	bf00      	nop
	}
}
 8000934:	3738      	adds	r7, #56	; 0x38
 8000936:	46bd      	mov	sp, r7
 8000938:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800093c:	0801ca64 	.word	0x0801ca64
 8000940:	20000208 	.word	0x20000208
 8000944:	200001fc 	.word	0x200001fc
 8000948:	20000248 	.word	0x20000248
 800094c:	200002e8 	.word	0x200002e8
 8000950:	20000388 	.word	0x20000388
 8000954:	20000428 	.word	0x20000428
 8000958:	0801ca7c 	.word	0x0801ca7c
 800095c:	200001f8 	.word	0x200001f8

08000960 <SendBytes>:

HAL_StatusTypeDef SendBytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){ // 命令を送信する関数
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
	uint32_t quotient = size / 8;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	08db      	lsrs	r3, r3, #3
 8000970:	61bb      	str	r3, [r7, #24]
	uint32_t remainder = size - (8 * quotient);
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef ret;

	for (uint8_t i = 0; i < quotient; i++){
 800097c:	2300      	movs	r3, #0
 800097e:	77fb      	strb	r3, [r7, #31]
 8000980:	e015      	b.n	80009ae <SendBytes+0x4e>
		ret = PushTx8Bytes(ExtId, bytes + i * 8, 8);
 8000982:	7ffb      	ldrb	r3, [r7, #31]
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	461a      	mov	r2, r3
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	4413      	add	r3, r2
 800098c:	2208      	movs	r2, #8
 800098e:	4619      	mov	r1, r3
 8000990:	68f8      	ldr	r0, [r7, #12]
 8000992:	f7ff fe27 	bl	80005e4 <PushTx8Bytes>
 8000996:	4603      	mov	r3, r0
 8000998:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 800099a:	7cfb      	ldrb	r3, [r7, #19]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d003      	beq.n	80009a8 <SendBytes+0x48>
			Error_Handler();
 80009a0:	f001 f898 	bl	8001ad4 <Error_Handler>
			return ret;
 80009a4:	7cfb      	ldrb	r3, [r7, #19]
 80009a6:	e027      	b.n	80009f8 <SendBytes+0x98>
	for (uint8_t i = 0; i < quotient; i++){
 80009a8:	7ffb      	ldrb	r3, [r7, #31]
 80009aa:	3301      	adds	r3, #1
 80009ac:	77fb      	strb	r3, [r7, #31]
 80009ae:	7ffb      	ldrb	r3, [r7, #31]
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d8e5      	bhi.n	8000982 <SendBytes+0x22>
		}
	}

	if(remainder != 0){
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d011      	beq.n	80009e0 <SendBytes+0x80>
		ret = PushTx8Bytes(ExtId, bytes + quotient * 8, remainder);
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	00db      	lsls	r3, r3, #3
 80009c0:	68ba      	ldr	r2, [r7, #8]
 80009c2:	4413      	add	r3, r2
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	4619      	mov	r1, r3
 80009c8:	68f8      	ldr	r0, [r7, #12]
 80009ca:	f7ff fe0b 	bl	80005e4 <PushTx8Bytes>
 80009ce:	4603      	mov	r3, r0
 80009d0:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 80009d2:	7cfb      	ldrb	r3, [r7, #19]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d003      	beq.n	80009e0 <SendBytes+0x80>
			Error_Handler();
 80009d8:	f001 f87c 	bl	8001ad4 <Error_Handler>
			return ret;
 80009dc:	7cfb      	ldrb	r3, [r7, #19]
 80009de:	e00b      	b.n	80009f8 <SendBytes+0x98>
		}
	}

	ret = PopSendTx8Bytes();
 80009e0:	f7ff fe58 	bl	8000694 <PopSendTx8Bytes>
 80009e4:	4603      	mov	r3, r0
 80009e6:	74fb      	strb	r3, [r7, #19]
	if (ret != HAL_OK){
 80009e8:	7cfb      	ldrb	r3, [r7, #19]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d003      	beq.n	80009f6 <SendBytes+0x96>
		Error_Handler();
 80009ee:	f001 f871 	bl	8001ad4 <Error_Handler>
		return ret;
 80009f2:	7cfb      	ldrb	r3, [r7, #19]
 80009f4:	e000      	b.n	80009f8 <SendBytes+0x98>
	}

	return HAL_OK;
 80009f6:	2300      	movs	r3, #0
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3720      	adds	r7, #32
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <CAN_SystemInit>:
 * @brief CANのシステムをアクティベートする. 具体的にはメッセージフィルターの設定とhal_can_start.
 *
 * @param _hcan
 * @param can_param
 */
void CAN_SystemInit(CAN_HandleTypeDef *_hcan){ // CANの初期化
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08e      	sub	sp, #56	; 0x38
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	phcan = _hcan;
 8000a08:	4a09      	ldr	r2, [pc, #36]	; (8000a30 <CAN_SystemInit+0x30>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6013      	str	r3, [r2, #0]

	all_node_detected = 0;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <CAN_SystemInit+0x34>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000a14:	2300      	movs	r3, #0
 8000a16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000a1a:	e029      	b.n	8000a70 <CAN_SystemInit+0x70>
		num_detected[type] = 0;
 8000a1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a20:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <CAN_SystemInit+0x38>)
 8000a22:	2100      	movs	r1, #0
 8000a24:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 0b111; i++){
 8000a26:	2300      	movs	r3, #0
 8000a28:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000a2c:	e017      	b.n	8000a5e <CAN_SystemInit+0x5e>
 8000a2e:	bf00      	nop
 8000a30:	200001f4 	.word	0x200001f4
 8000a34:	200001f8 	.word	0x200001f8
 8000a38:	200001fc 	.word	0x200001fc
			node_id_list[type][i] = 0xff;
 8000a3c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000a40:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8000a44:	48d7      	ldr	r0, [pc, #860]	; (8000da4 <CAN_SystemInit+0x3a4>)
 8000a46:	4613      	mov	r3, r2
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	1a9b      	subs	r3, r3, r2
 8000a4c:	4403      	add	r3, r0
 8000a4e:	440b      	add	r3, r1
 8000a50:	22ff      	movs	r2, #255	; 0xff
 8000a52:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 0b111; i++){
 8000a54:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000a58:	3301      	adds	r3, #1
 8000a5a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000a5e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d9ea      	bls.n	8000a3c <CAN_SystemInit+0x3c>
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000a66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000a70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a74:	2b08      	cmp	r3, #8
 8000a76:	d9d1      	bls.n	8000a1c <CAN_SystemInit+0x1c>
		}
	}

	//フィルタバンク設定
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000a84:	2301      	movs	r3, #1
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.SlaveStartFilterBank = 14;
 8000a88:	230e      	movs	r3, #14
 8000a8a:	633b      	str	r3, [r7, #48]	; 0x30

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000a90:	2300      	movs	r3, #0
 8000a92:	2200      	movs	r2, #0
 8000a94:	2100      	movs	r1, #0
 8000a96:	2001      	movs	r0, #1
 8000a98:	f000 fab9 	bl	800100e <Make_CAN_ID>
 8000a9c:	f04f 0200 	mov.w	r2, #0
 8000aa0:	f04f 0300 	mov.w	r3, #0
 8000aa4:	0b42      	lsrs	r2, r0, #13
 8000aa6:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000aaa:	0b4b      	lsrs	r3, r1, #13
 8000aac:	4613      	mov	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) >> 13;
 8000ab0:	231f      	movs	r3, #31
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f000 faa9 	bl	800100e <Make_CAN_ID>
 8000abc:	f04f 0200 	mov.w	r2, #0
 8000ac0:	f04f 0300 	mov.w	r3, #0
 8000ac4:	0b42      	lsrs	r2, r0, #13
 8000ac6:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000aca:	0b4b      	lsrs	r3, r1, #13
 8000acc:	4613      	mov	r3, r2
 8000ace:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f000 fa99 	bl	800100e <Make_CAN_ID>
 8000adc:	4602      	mov	r2, r0
 8000ade:	460b      	mov	r3, r1
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	00da      	lsls	r2, r3, #3
 8000ae4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ae8:	4013      	ands	r3, r2
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000af0:	231f      	movs	r3, #31
 8000af2:	2200      	movs	r2, #0
 8000af4:	2100      	movs	r1, #0
 8000af6:	2001      	movs	r0, #1
 8000af8:	f000 fa89 	bl	800100e <Make_CAN_ID>
 8000afc:	4602      	mov	r2, r0
 8000afe:	460b      	mov	r3, r1
 8000b00:	4613      	mov	r3, r2
 8000b02:	00da      	lsls	r2, r3, #3
 8000b04:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000b08:	4013      	ands	r3, r2
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000b10:	4ba5      	ldr	r3, [pc, #660]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f107 020c 	add.w	r2, r7, #12
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f001 fe02 	bl	8002724 <HAL_CAN_ConfigFilter>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <CAN_SystemInit+0x12a>
		/* Filter configuration Error */
		Error_Handler();
 8000b26:	f000 ffd5 	bl	8001ad4 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 1;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000b2e:	2300      	movs	r3, #0
 8000b30:	2200      	movs	r2, #0
 8000b32:	2100      	movs	r1, #0
 8000b34:	2002      	movs	r0, #2
 8000b36:	f000 fa6a 	bl	800100e <Make_CAN_ID>
 8000b3a:	f04f 0200 	mov.w	r2, #0
 8000b3e:	f04f 0300 	mov.w	r3, #0
 8000b42:	0b42      	lsrs	r2, r0, #13
 8000b44:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000b48:	0b4b      	lsrs	r3, r1, #13
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) >> 13;
 8000b4e:	231f      	movs	r3, #31
 8000b50:	2200      	movs	r2, #0
 8000b52:	2100      	movs	r1, #0
 8000b54:	2002      	movs	r0, #2
 8000b56:	f000 fa5a 	bl	800100e <Make_CAN_ID>
 8000b5a:	f04f 0200 	mov.w	r2, #0
 8000b5e:	f04f 0300 	mov.w	r3, #0
 8000b62:	0b42      	lsrs	r2, r0, #13
 8000b64:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000b68:	0b4b      	lsrs	r3, r1, #13
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000b6e:	2300      	movs	r3, #0
 8000b70:	2200      	movs	r2, #0
 8000b72:	2100      	movs	r1, #0
 8000b74:	2002      	movs	r0, #2
 8000b76:	f000 fa4a 	bl	800100e <Make_CAN_ID>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	4613      	mov	r3, r2
 8000b80:	00da      	lsls	r2, r3, #3
 8000b82:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000b86:	4013      	ands	r3, r2
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000b8e:	231f      	movs	r3, #31
 8000b90:	2200      	movs	r2, #0
 8000b92:	2100      	movs	r1, #0
 8000b94:	2002      	movs	r0, #2
 8000b96:	f000 fa3a 	bl	800100e <Make_CAN_ID>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	00da      	lsls	r2, r3, #3
 8000ba2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	f043 0304 	orr.w	r3, r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000bae:	4b7e      	ldr	r3, [pc, #504]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f107 020c 	add.w	r2, r7, #12
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 fdb3 	bl	8002724 <HAL_CAN_ConfigFilter>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <CAN_SystemInit+0x1c8>
		/* Filter configuration Error */
		Error_Handler();
 8000bc4:	f000 ff86 	bl	8001ad4 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 2;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) >> 13;				   // 上16bit
 8000bcc:	2300      	movs	r3, #0
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2003      	movs	r0, #3
 8000bd4:	f000 fa1b 	bl	800100e <Make_CAN_ID>
 8000bd8:	f04f 0200 	mov.w	r2, #0
 8000bdc:	f04f 0300 	mov.w	r3, #0
 8000be0:	0b42      	lsrs	r2, r0, #13
 8000be2:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000be6:	0b4b      	lsrs	r3, r1, #13
 8000be8:	4613      	mov	r3, r2
 8000bea:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) >> 13;					   // TODO : 治す
 8000bec:	231f      	movs	r3, #31
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2003      	movs	r0, #3
 8000bf4:	f000 fa0b 	bl	800100e <Make_CAN_ID>
 8000bf8:	f04f 0200 	mov.w	r2, #0
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	0b42      	lsrs	r2, r0, #13
 8000c02:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000c06:	0b4b      	lsrs	r3, r1, #13
 8000c08:	4613      	mov	r3, r2
 8000c0a:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2003      	movs	r0, #3
 8000c14:	f000 f9fb 	bl	800100e <Make_CAN_ID>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	00da      	lsls	r2, r3, #3
 8000c20:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000c24:	4013      	ands	r3, r2
 8000c26:	f043 0304 	orr.w	r3, r3, #4
 8000c2a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000c2c:	231f      	movs	r3, #31
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2003      	movs	r0, #3
 8000c34:	f000 f9eb 	bl	800100e <Make_CAN_ID>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	00da      	lsls	r2, r3, #3
 8000c40:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000c44:	4013      	ands	r3, r2
 8000c46:	f043 0304 	orr.w	r3, r3, #4
 8000c4a:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000c4c:	4b56      	ldr	r3, [pc, #344]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f107 020c 	add.w	r2, r7, #12
 8000c54:	4611      	mov	r1, r2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 fd64 	bl	8002724 <HAL_CAN_ConfigFilter>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <CAN_SystemInit+0x266>
		/* Filter configuration Error */
		Error_Handler();
 8000c62:	f000 ff37 	bl	8001ad4 <Error_Handler>
	}

	// FIFO0にfeedback用のフィルタを設定
	sFilterConfig.FilterBank = 3;
 8000c66:	2303      	movs	r3, #3
 8000c68:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) >> 13; // 上16bit
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2000      	movs	r0, #0
 8000c72:	f000 f9cc 	bl	800100e <Make_CAN_ID>
 8000c76:	f04f 0200 	mov.w	r2, #0
 8000c7a:	f04f 0300 	mov.w	r3, #0
 8000c7e:	0b42      	lsrs	r2, r0, #13
 8000c80:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000c84:	0b4b      	lsrs	r3, r1, #13
 8000c86:	4613      	mov	r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(0, 0, 0, 0b11111) >> 13;
 8000c8a:	231f      	movs	r3, #31
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2000      	movs	r0, #0
 8000c92:	f000 f9bc 	bl	800100e <Make_CAN_ID>
 8000c96:	f04f 0200 	mov.w	r2, #0
 8000c9a:	f04f 0300 	mov.w	r3, #0
 8000c9e:	0b42      	lsrs	r2, r0, #13
 8000ca0:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000ca4:	0b4b      	lsrs	r3, r1, #13
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000caa:	2301      	movs	r3, #1
 8000cac:	2200      	movs	r2, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f000 f9ac 	bl	800100e <Make_CAN_ID>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	460b      	mov	r3, r1
 8000cba:	4613      	mov	r3, r2
 8000cbc:	00da      	lsls	r2, r3, #3
 8000cbe:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(0, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000cca:	231f      	movs	r3, #31
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f000 f99c 	bl	800100e <Make_CAN_ID>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	460b      	mov	r3, r1
 8000cda:	4613      	mov	r3, r2
 8000cdc:	00da      	lsls	r2, r3, #3
 8000cde:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000cea:	4b2f      	ldr	r3, [pc, #188]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f107 020c 	add.w	r2, r7, #12
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f001 fd15 	bl	8002724 <HAL_CAN_ConfigFilter>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <CAN_SystemInit+0x304>
		/* Filter configuration Error */
		Error_Handler();
 8000d00:	f000 fee8 	bl	8001ad4 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 4;
 8000d04:	2304      	movs	r3, #4
 8000d06:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) >> 13; // 上16bit
 8000d08:	2300      	movs	r3, #0
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2004      	movs	r0, #4
 8000d10:	f000 f97d 	bl	800100e <Make_CAN_ID>
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	0b42      	lsrs	r2, r0, #13
 8000d1e:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000d22:	0b4b      	lsrs	r3, r1, #13
 8000d24:	4613      	mov	r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) >> 13;
 8000d28:	231f      	movs	r3, #31
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2004      	movs	r0, #4
 8000d30:	f000 f96d 	bl	800100e <Make_CAN_ID>
 8000d34:	f04f 0200 	mov.w	r2, #0
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	0b42      	lsrs	r2, r0, #13
 8000d3e:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000d42:	0b4b      	lsrs	r3, r1, #13
 8000d44:	4613      	mov	r3, r2
 8000d46:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000d48:	2300      	movs	r3, #0
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2004      	movs	r0, #4
 8000d50:	f000 f95d 	bl	800100e <Make_CAN_ID>
 8000d54:	4602      	mov	r2, r0
 8000d56:	460b      	mov	r3, r1
 8000d58:	4613      	mov	r3, r2
 8000d5a:	00da      	lsls	r2, r3, #3
 8000d5c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000d60:	4013      	ands	r3, r2
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000d68:	231f      	movs	r3, #31
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2004      	movs	r0, #4
 8000d70:	f000 f94d 	bl	800100e <Make_CAN_ID>
 8000d74:	4602      	mov	r2, r0
 8000d76:	460b      	mov	r3, r1
 8000d78:	4613      	mov	r3, r2
 8000d7a:	00da      	lsls	r2, r3, #3
 8000d7c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000d80:	4013      	ands	r3, r2
 8000d82:	f043 0304 	orr.w	r3, r3, #4
 8000d86:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f107 020c 	add.w	r2, r7, #12
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 fcc6 	bl	8002724 <HAL_CAN_ConfigFilter>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d006      	beq.n	8000dac <CAN_SystemInit+0x3ac>
		/* Filter configuration Error */
		Error_Handler();
 8000d9e:	f000 fe99 	bl	8001ad4 <Error_Handler>
 8000da2:	e003      	b.n	8000dac <CAN_SystemInit+0x3ac>
 8000da4:	20000208 	.word	0x20000208
 8000da8:	200001f4 	.word	0x200001f4
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 5;
 8000dac:	2305      	movs	r3, #5
 8000dae:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 8000db0:	2300      	movs	r3, #0
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	2005      	movs	r0, #5
 8000db8:	f000 f929 	bl	800100e <Make_CAN_ID>
 8000dbc:	f04f 0200 	mov.w	r2, #0
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	0b42      	lsrs	r2, r0, #13
 8000dc6:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000dca:	0b4b      	lsrs	r3, r1, #13
 8000dcc:	4613      	mov	r3, r2
 8000dce:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) >> 13;
 8000dd0:	231f      	movs	r3, #31
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2005      	movs	r0, #5
 8000dd8:	f000 f919 	bl	800100e <Make_CAN_ID>
 8000ddc:	f04f 0200 	mov.w	r2, #0
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	0b42      	lsrs	r2, r0, #13
 8000de6:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000dea:	0b4b      	lsrs	r3, r1, #13
 8000dec:	4613      	mov	r3, r2
 8000dee:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000df0:	2300      	movs	r3, #0
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	2005      	movs	r0, #5
 8000df8:	f000 f909 	bl	800100e <Make_CAN_ID>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	4613      	mov	r3, r2
 8000e02:	00da      	lsls	r2, r3, #3
 8000e04:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000e08:	4013      	ands	r3, r2
 8000e0a:	f043 0304 	orr.w	r3, r3, #4
 8000e0e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000e10:	231f      	movs	r3, #31
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	2005      	movs	r0, #5
 8000e18:	f000 f8f9 	bl	800100e <Make_CAN_ID>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	460b      	mov	r3, r1
 8000e20:	4613      	mov	r3, r2
 8000e22:	00da      	lsls	r2, r3, #3
 8000e24:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000e28:	4013      	ands	r3, r2
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000e30:	4b44      	ldr	r3, [pc, #272]	; (8000f44 <CAN_SystemInit+0x544>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f107 020c 	add.w	r2, r7, #12
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 fc72 	bl	8002724 <HAL_CAN_ConfigFilter>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <CAN_SystemInit+0x44a>
		/* Filter configuration Error */
		Error_Handler();
 8000e46:	f000 fe45 	bl	8001ad4 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 6;
 8000e4a:	2306      	movs	r3, #6
 8000e4c:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 8000e4e:	2300      	movs	r3, #0
 8000e50:	2200      	movs	r2, #0
 8000e52:	2100      	movs	r1, #0
 8000e54:	2006      	movs	r0, #6
 8000e56:	f000 f8da 	bl	800100e <Make_CAN_ID>
 8000e5a:	f04f 0200 	mov.w	r2, #0
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	0b42      	lsrs	r2, r0, #13
 8000e64:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000e68:	0b4b      	lsrs	r3, r1, #13
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) >> 13;
 8000e6e:	231f      	movs	r3, #31
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	2006      	movs	r0, #6
 8000e76:	f000 f8ca 	bl	800100e <Make_CAN_ID>
 8000e7a:	f04f 0200 	mov.w	r2, #0
 8000e7e:	f04f 0300 	mov.w	r3, #0
 8000e82:	0b42      	lsrs	r2, r0, #13
 8000e84:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000e88:	0b4b      	lsrs	r3, r1, #13
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000e8e:	2300      	movs	r3, #0
 8000e90:	2200      	movs	r2, #0
 8000e92:	2100      	movs	r1, #0
 8000e94:	2006      	movs	r0, #6
 8000e96:	f000 f8ba 	bl	800100e <Make_CAN_ID>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	00da      	lsls	r2, r3, #3
 8000ea2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000eae:	231f      	movs	r3, #31
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2006      	movs	r0, #6
 8000eb6:	f000 f8aa 	bl	800100e <Make_CAN_ID>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	00da      	lsls	r2, r3, #3
 8000ec2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000ece:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <CAN_SystemInit+0x544>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f107 020c 	add.w	r2, r7, #12
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f001 fc23 	bl	8002724 <HAL_CAN_ConfigFilter>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <CAN_SystemInit+0x4e8>
		/* Filter configuration Error */
		Error_Handler();
 8000ee4:	f000 fdf6 	bl	8001ad4 <Error_Handler>
	}

	if (HAL_CAN_Start(phcan) != HAL_OK){
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <CAN_SystemInit+0x544>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 fd05 	bl	80028fc <HAL_CAN_Start>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d004      	beq.n	8000f02 <CAN_SystemInit+0x502>
		printf(" -> Start Error\n");
 8000ef8:	4813      	ldr	r0, [pc, #76]	; (8000f48 <CAN_SystemInit+0x548>)
 8000efa:	f01a fd1f 	bl	801b93c <puts>
		Error_Handler();
 8000efe:	f000 fde9 	bl	8001ad4 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(phcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <CAN_SystemInit+0x544>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2102      	movs	r1, #2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f001 ff52 	bl	8002db2 <HAL_CAN_ActivateNotification>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d004      	beq.n	8000f1e <CAN_SystemInit+0x51e>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 8000f14:	480d      	ldr	r0, [pc, #52]	; (8000f4c <CAN_SystemInit+0x54c>)
 8000f16:	f01a fc75 	bl	801b804 <iprintf>
		Error_Handler();
 8000f1a:	f000 fddb 	bl	8001ad4 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(phcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK){
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <CAN_SystemInit+0x544>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2101      	movs	r1, #1
 8000f24:	4618      	mov	r0, r3
 8000f26:	f001 ff44 	bl	8002db2 <HAL_CAN_ActivateNotification>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d004      	beq.n	8000f3a <CAN_SystemInit+0x53a>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 8000f30:	4806      	ldr	r0, [pc, #24]	; (8000f4c <CAN_SystemInit+0x54c>)
 8000f32:	f01a fc67 	bl	801b804 <iprintf>
		Error_Handler();
 8000f36:	f000 fdcd 	bl	8001ad4 <Error_Handler>
	}
}
 8000f3a:	bf00      	nop
 8000f3c:	3738      	adds	r7, #56	; 0x38
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200001f4 	.word	0x200001f4
 8000f48:	0801ca84 	.word	0x0801ca84
 8000f4c:	0801ca94 	.word	0x0801ca94

08000f50 <AirCylinder_Init>:
 * 異なる関数名を用いて明示的にしてある.
 * また, AirCylinderの基板の方にも, 最初は必ず初期化処理(AIR_CMD_INIT)が来るものとして定義してある.
 */

////AirCylinder
void AirCylinder_Init(CAN_Device *can_device, Air_PortStatus_Typedef param){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	70fb      	strb	r3, [r7, #3]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, AIR_CMD_INIT), (uint8_t *)(&param), sizeof(Air_PortStatus_Typedef)) != HAL_OK){
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 f82c 	bl	8000fbc <Make_CAN_ID_from_CAN_Device>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4610      	mov	r0, r2
 8000f6a:	1cfb      	adds	r3, r7, #3
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f7ff fcf6 	bl	8000960 <SendBytes>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <AirCylinder_Init+0x2e>
		Error_Handler();
 8000f7a:	f000 fdab 	bl	8001ad4 <Error_Handler>
	}
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <AirCylinder_SendOutput>:

void AirCylinder_SendOutput(CAN_Device *can_device, Air_PortStatus_Typedef param){
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
 8000f8e:	460b      	mov	r3, r1
 8000f90:	70fb      	strb	r3, [r7, #3]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, AIR_CMD_OUTPUT), (uint8_t *)(&param), sizeof(Air_PortStatus_Typedef)) != HAL_OK){
 8000f92:	2102      	movs	r1, #2
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f000 f811 	bl	8000fbc <Make_CAN_ID_from_CAN_Device>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	1cfb      	adds	r3, r7, #3
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f7ff fcdb 	bl	8000960 <SendBytes>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <AirCylinder_SendOutput+0x2e>
		Error_Handler();
 8000fb0:	f000 fd90 	bl	8001ad4 <Error_Handler>
	}
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <Make_CAN_ID_from_CAN_Device>:
/**
 * @brief CANのIDを設定する. 上16bitのみを使用
 * @param CAN_Device*
 * @param cmd
 */
uint64_t Make_CAN_ID_from_CAN_Device(CAN_Device* _can_device, uint8_t cmd){  // mainからmcmdなどへの送信
 8000fbc:	b4b0      	push	{r4, r5, r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	70fb      	strb	r3, [r7, #3]
    uint8_t node_type = (uint8_t)(_can_device->node_type) & (0b111);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	f003 0307 	and.w	r3, r3, #7
 8000fd0:	73fb      	strb	r3, [r7, #15]
    return (((node_type&0b111)<<11) | (((_can_device->node_id)&0b111)<<8) | (((_can_device->device_num)&0b111)<<5)
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	02db      	lsls	r3, r3, #11
 8000fd6:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	785b      	ldrb	r3, [r3, #1]
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	789b      	ldrb	r3, [r3, #2]
 8000fea:	015b      	lsls	r3, r3, #5
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	431a      	orrs	r2, r3
            | (cmd&0b11111) );
 8000ff0:	78fb      	ldrb	r3, [r7, #3]
 8000ff2:	f003 031f 	and.w	r3, r3, #31
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	17da      	asrs	r2, r3, #31
 8000ffa:	461c      	mov	r4, r3
 8000ffc:	4615      	mov	r5, r2
 8000ffe:	4622      	mov	r2, r4
 8001000:	462b      	mov	r3, r5
}
 8001002:	4610      	mov	r0, r2
 8001004:	4619      	mov	r1, r3
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	bcb0      	pop	{r4, r5, r7}
 800100c:	4770      	bx	lr

0800100e <Make_CAN_ID>:
 * @param node_type
 * @param node_id
 * @param device_num
 * @param cmd
 */
uint64_t Make_CAN_ID(Node_Type node_type, uint8_t node_id, uint8_t device_num, uint8_t cmd){
 800100e:	e92d 0390 	stmdb	sp!, {r4, r7, r8, r9}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4604      	mov	r4, r0
 8001018:	4608      	mov	r0, r1
 800101a:	4611      	mov	r1, r2
 800101c:	461a      	mov	r2, r3
 800101e:	4623      	mov	r3, r4
 8001020:	71fb      	strb	r3, [r7, #7]
 8001022:	4603      	mov	r3, r0
 8001024:	71bb      	strb	r3, [r7, #6]
 8001026:	460b      	mov	r3, r1
 8001028:	717b      	strb	r3, [r7, #5]
 800102a:	4613      	mov	r3, r2
 800102c:	713b      	strb	r3, [r7, #4]
    return ( (((uint8_t)node_type & 0b111) << 11) | (((node_id)&0b111) << 8) | ((device_num&0b111) << 5)
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	02db      	lsls	r3, r3, #11
 8001032:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001036:	79bb      	ldrb	r3, [r7, #6]
 8001038:	021b      	lsls	r3, r3, #8
 800103a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800103e:	431a      	orrs	r2, r3
 8001040:	797b      	ldrb	r3, [r7, #5]
 8001042:	015b      	lsls	r3, r3, #5
 8001044:	b2db      	uxtb	r3, r3
 8001046:	431a      	orrs	r2, r3
             | (cmd&0b11111) );
 8001048:	793b      	ldrb	r3, [r7, #4]
 800104a:	f003 031f 	and.w	r3, r3, #31
 800104e:	4313      	orrs	r3, r2
 8001050:	17da      	asrs	r2, r3, #31
 8001052:	4698      	mov	r8, r3
 8001054:	4691      	mov	r9, r2
 8001056:	4642      	mov	r2, r8
 8001058:	464b      	mov	r3, r9
}
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	e8bd 0390 	ldmia.w	sp!, {r4, r7, r8, r9}
 8001066:	4770      	bx	lr

08001068 <Extract_CAN_Device>:

CAN_Device Extract_CAN_Device(uint64_t can_id) {  // CAN_IDからCAN_Deviceを抽出する
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	e9c7 0100 	strd	r0, r1, [r7]
    CAN_Device ans;
    ans.device_num = ((can_id>>5) & 0b111);
 8001072:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	0942      	lsrs	r2, r0, #5
 8001080:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 8001084:	094b      	lsrs	r3, r1, #5
 8001086:	b2d3      	uxtb	r3, r2
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	b2db      	uxtb	r3, r3
 800108e:	72bb      	strb	r3, [r7, #10]
    ans.node_id = ((can_id>>8) & 0b111);
 8001090:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	f04f 0300 	mov.w	r3, #0
 800109c:	0a02      	lsrs	r2, r0, #8
 800109e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80010a2:	0a0b      	lsrs	r3, r1, #8
 80010a4:	b2d3      	uxtb	r3, r2
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	727b      	strb	r3, [r7, #9]
    ans.node_type = (Node_Type)( (can_id>>11) & 0b111);
 80010ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	f04f 0300 	mov.w	r3, #0
 80010ba:	0ac2      	lsrs	r2, r0, #11
 80010bc:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 80010c0:	0acb      	lsrs	r3, r1, #11
 80010c2:	b2d3      	uxtb	r3, r2
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	723b      	strb	r3, [r7, #8]
    return ans;
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	f107 0208 	add.w	r2, r7, #8
 80010d4:	6812      	ldr	r2, [r2, #0]
 80010d6:	4611      	mov	r1, r2
 80010d8:	8019      	strh	r1, [r3, #0]
 80010da:	3302      	adds	r3, #2
 80010dc:	0c12      	lsrs	r2, r2, #16
 80010de:	701a      	strb	r2, [r3, #0]
 80010e0:	2300      	movs	r3, #0
 80010e2:	7b3a      	ldrb	r2, [r7, #12]
 80010e4:	f362 0307 	bfi	r3, r2, #0, #8
 80010e8:	7b7a      	ldrb	r2, [r7, #13]
 80010ea:	f362 230f 	bfi	r3, r2, #8, #8
 80010ee:	7bba      	ldrb	r2, [r7, #14]
 80010f0:	f362 4317 	bfi	r3, r2, #16, #8
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <Extract_CAN_CMD>:

uint8_t Extract_CAN_CMD(uint64_t can_id){ return ( can_id & 0b11111); }  // cmdを抽出
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	e9c7 0100 	strd	r0, r1, [r7]
 800110a:	783b      	ldrb	r3, [r7, #0]
 800110c:	f003 031f 	and.w	r3, r3, #31
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <UDPControllerReceive>:
static struct controller_data controller_raw = { };
struct timeval tv;



void UDPControllerReceive(void const *argument) {
 8001120:	b5b0      	push	{r4, r5, r7, lr}
 8001122:	b0de      	sub	sp, #376	; 0x178
 8001124:	af02      	add	r7, sp, #8
 8001126:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800112a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800112e:	6018      	str	r0, [r3, #0]

    printf("This is UdpControllerReceive\r\n"); //これがないとなぜか動かない
 8001130:	48c3      	ldr	r0, [pc, #780]	; (8001440 <UDPControllerReceive+0x320>)
 8001132:	f01a fc03 	bl	801b93c <puts>

    int sock;
    char buffer[256];
    struct sockaddr_in server_addr, client_addr;

    sock = lwip_socket(AF_INET, SOCK_DGRAM, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2102      	movs	r1, #2
 800113a:	2002      	movs	r0, #2
 800113c:	f00e fb32 	bl	800f7a4 <lwip_socket>
 8001140:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
    memset((char*) &server_addr, 0, sizeof(server_addr));
 8001144:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001148:	2210      	movs	r2, #16
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f01a fb51 	bl	801b7f4 <memset>

    server_addr.sin_family = AF_INET;
 8001152:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001156:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800115a:	2202      	movs	r2, #2
 800115c:	705a      	strb	r2, [r3, #1]
    server_addr.sin_len = sizeof(server_addr);
 800115e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001162:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001166:	2210      	movs	r2, #16
 8001168:	701a      	strb	r2, [r3, #0]
    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
 800116a:	2000      	movs	r0, #0
 800116c:	f00f fba5 	bl	80108ba <lwip_htonl>
 8001170:	4602      	mov	r2, r0
 8001172:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001176:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800117a:	605a      	str	r2, [r3, #4]
//	server_addr.sin_addr.s_addr = inet_addr(CLIENT_IP);
    server_addr.sin_port = htons(CLIENT_PORT);
 800117c:	f641 6061 	movw	r0, #7777	; 0x1e61
 8001180:	f00f fb86 	bl	8010890 <lwip_htons>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800118c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001190:	805a      	strh	r2, [r3, #2]

    if (fcntl(sock, F_SETFL, fcntl(sock, F_GETFL,0) | O_NONBLOCK) < 0) {
 8001192:	2200      	movs	r2, #0
 8001194:	2103      	movs	r1, #3
 8001196:	f8d7 0160 	ldr.w	r0, [r7, #352]	; 0x160
 800119a:	f00f f917 	bl	80103cc <lwip_fcntl>
 800119e:	4603      	mov	r3, r0
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	461a      	mov	r2, r3
 80011a6:	2104      	movs	r1, #4
 80011a8:	f8d7 0160 	ldr.w	r0, [r7, #352]	; 0x160
 80011ac:	f00f f90e 	bl	80103cc <lwip_fcntl>
        // handle error
    }

    FD_ZERO(&rset);
 80011b0:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80011b4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80011b8:	2302      	movs	r3, #2
 80011ba:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80011be:	e00b      	b.n	80011d8 <UDPControllerReceive+0xb8>
 80011c0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80011c4:	3b01      	subs	r3, #1
 80011c6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80011ca:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80011ce:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80011d2:	2100      	movs	r1, #0
 80011d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80011d8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1ef      	bne.n	80011c0 <UDPControllerReceive+0xa0>

    int err = lwip_bind(sock, (struct sockaddr*) &server_addr, sizeof(server_addr));
 80011e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011e4:	2210      	movs	r2, #16
 80011e6:	4619      	mov	r1, r3
 80011e8:	f8d7 0160 	ldr.w	r0, [r7, #352]	; 0x160
 80011ec:	f00d ff56 	bl	800f09c <lwip_bind>
 80011f0:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158
    if (err != 0) {
 80011f4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <UDPControllerReceive+0xe4>
        printf("UDPController:ERROR \r\n");
 80011fc:	4891      	ldr	r0, [pc, #580]	; (8001444 <UDPControllerReceive+0x324>)
 80011fe:	f01a fb9d 	bl	801b93c <puts>
 8001202:	e002      	b.n	800120a <UDPControllerReceive+0xea>
    } else {
        printf("UDPController:Socket Opened!\r\n");
 8001204:	4890      	ldr	r0, [pc, #576]	; (8001448 <UDPControllerReceive+0x328>)
 8001206:	f01a fb99 	bl	801b93c <puts>
    }
    int timeout = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    struct controller_data controller_null;
    bzero(&controller_null, sizeof(struct controller_data));
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	461a      	mov	r2, r3
 8001216:	2300      	movs	r3, #0
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	6053      	str	r3, [r2, #4]
 800121c:	6093      	str	r3, [r2, #8]
 800121e:	60d3      	str	r3, [r2, #12]
 8001220:	6113      	str	r3, [r2, #16]
    controller_null.l_x = 0.0f;
 8001222:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001226:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	605a      	str	r2, [r3, #4]
    controller_null.l_y = 0.0f;
 8001230:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001234:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
    controller_null.r_x = 0.0f;
 800123e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001242:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
    controller_null.r_y = 0.0f;
 800124c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001250:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
    //FD_SET(sock, &rset);

    int maxfdp1 = sock + 1;
 800125a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800125e:	3301      	adds	r3, #1
 8001260:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

    while (1) {
        FD_SET(sock, &rset);
 8001264:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001268:	2b00      	cmp	r3, #0
 800126a:	da00      	bge.n	800126e <UDPControllerReceive+0x14e>
 800126c:	331f      	adds	r3, #31
 800126e:	115b      	asrs	r3, r3, #5
 8001270:	461a      	mov	r2, r3
 8001272:	0093      	lsls	r3, r2, #2
 8001274:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8001278:	443b      	add	r3, r7
 800127a:	f853 1c2c 	ldr.w	r1, [r3, #-44]
 800127e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001282:	4258      	negs	r0, r3
 8001284:	f003 031f 	and.w	r3, r3, #31
 8001288:	f000 001f 	and.w	r0, r0, #31
 800128c:	bf58      	it	pl
 800128e:	4243      	negpl	r3, r0
 8001290:	2001      	movs	r0, #1
 8001292:	fa00 f303 	lsl.w	r3, r0, r3
 8001296:	4319      	orrs	r1, r3
 8001298:	0093      	lsls	r3, r2, #2
 800129a:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800129e:	443b      	add	r3, r7
 80012a0:	f843 1c2c 	str.w	r1, [r3, #-44]
        tv.tv_usec = 1000;
 80012a4:	4b69      	ldr	r3, [pc, #420]	; (800144c <UDPControllerReceive+0x32c>)
 80012a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012aa:	609a      	str	r2, [r3, #8]
        select(maxfdp1, &rset, NULL, NULL, &tv);
 80012ac:	f507 71a2 	add.w	r1, r7, #324	; 0x144
 80012b0:	4b66      	ldr	r3, [pc, #408]	; (800144c <UDPControllerReceive+0x32c>)
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2300      	movs	r3, #0
 80012b6:	2200      	movs	r2, #0
 80012b8:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80012bc:	f00e fcd8 	bl	800fc70 <lwip_select>
        if (timeout < 100) {
 80012c0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80012c4:	2b63      	cmp	r3, #99	; 0x63
 80012c6:	dc05      	bgt.n	80012d4 <UDPControllerReceive+0x1b4>
            timeout++;
 80012c8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80012cc:	3301      	adds	r3, #1
 80012ce:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80012d2:	e00a      	b.n	80012ea <UDPControllerReceive+0x1ca>
        } else {
            memcpy(&controller_raw, &controller_null,
 80012d4:	4a5e      	ldr	r2, [pc, #376]	; (8001450 <UDPControllerReceive+0x330>)
 80012d6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80012da:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80012de:	4614      	mov	r4, r2
 80012e0:	461d      	mov	r5, r3
 80012e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012e6:	682b      	ldr	r3, [r5, #0]
 80012e8:	6023      	str	r3, [r4, #0]
                   sizeof(struct controller_data));
        }

        if (FD_ISSET(sock, &rset)) {
 80012ea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	da00      	bge.n	80012f4 <UDPControllerReceive+0x1d4>
 80012f2:	331f      	adds	r3, #31
 80012f4:	115b      	asrs	r3, r3, #5
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 80012fc:	443b      	add	r3, r7
 80012fe:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 8001302:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001306:	4259      	negs	r1, r3
 8001308:	f003 031f 	and.w	r3, r3, #31
 800130c:	f001 011f 	and.w	r1, r1, #31
 8001310:	bf58      	it	pl
 8001312:	424b      	negpl	r3, r1
 8001314:	fa22 f303 	lsr.w	r3, r2, r3
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 808b 	beq.w	8001438 <UDPControllerReceive+0x318>
            socklen_t n;
            socklen_t len = sizeof(client_addr);
 8001322:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001326:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800132a:	2210      	movs	r2, #16
 800132c:	601a      	str	r2, [r3, #0]
            n = lwip_recvfrom(sock, (char*) buffer, 256, (int) NULL,
 800132e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001332:	f107 030c 	add.w	r3, r7, #12
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	2300      	movs	r3, #0
 8001340:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001344:	f8d7 0160 	ldr.w	r0, [r7, #352]	; 0x160
 8001348:	f00e f99a 	bl	800f680 <lwip_recvfrom>
 800134c:	4603      	mov	r3, r0
 800134e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
                              (struct sockaddr*) &client_addr, &len);
            if (n > 0) {
 8001352:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001356:	2b00      	cmp	r3, #0
 8001358:	d06e      	beq.n	8001438 <UDPControllerReceive+0x318>
                timeout = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
                if (n < sizeof(struct controller_data)) {
 8001360:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001364:	2b13      	cmp	r3, #19
 8001366:	d803      	bhi.n	8001370 <UDPControllerReceive+0x250>
                    printf("invalid data : \r\n");
 8001368:	483a      	ldr	r0, [pc, #232]	; (8001454 <UDPControllerReceive+0x334>)
 800136a:	f01a fae7 	bl	801b93c <puts>
 800136e:	e779      	b.n	8001264 <UDPControllerReceive+0x144>
                    continue;
                }

                struct controller_data *d = (struct controller_data*) &buffer;
 8001370:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001374:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
                printf("(lx, ly, rx, ry) : (%d, %d, %d, %d)\r\n", (int)(d->l_x * 256), (int)(d->l_y * 256), (int)(d->r_x * 256), (int)(d->r_y * 256));
 8001378:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800137c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001380:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001458 <UDPControllerReceive+0x338>
 8001384:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001388:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800138c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001390:	edd3 7a02 	vldr	s15, [r3, #8]
 8001394:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001458 <UDPControllerReceive+0x338>
 8001398:	ee67 7a87 	vmul.f32	s15, s15, s14
 800139c:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 80013a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80013a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80013a8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001458 <UDPControllerReceive+0x338>
 80013ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b0:	eefd 5ae7 	vcvt.s32.f32	s11, s15
 80013b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80013b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80013bc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001458 <UDPControllerReceive+0x338>
 80013c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013c8:	ee17 3a90 	vmov	r3, s15
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	ee15 3a90 	vmov	r3, s11
 80013d2:	ee16 2a10 	vmov	r2, s12
 80013d6:	ee16 1a90 	vmov	r1, s13
 80013da:	4820      	ldr	r0, [pc, #128]	; (800145c <UDPControllerReceive+0x33c>)
 80013dc:	f01a fa12 	bl	801b804 <iprintf>
                printf("button: ");
 80013e0:	481f      	ldr	r0, [pc, #124]	; (8001460 <UDPControllerReceive+0x340>)
 80013e2:	f01a fa0f 	bl	801b804 <iprintf>
                for(int i=0; i<16; i++){
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80013ec:	e017      	b.n	800141e <UDPControllerReceive+0x2fe>
                    if((d->button >> i) & 1) printf("1");
 80013ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80013fa:	fa42 f303 	asr.w	r3, r2, r3
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <UDPControllerReceive+0x2ee>
 8001406:	2031      	movs	r0, #49	; 0x31
 8001408:	f01a fa14 	bl	801b834 <putchar>
 800140c:	e002      	b.n	8001414 <UDPControllerReceive+0x2f4>
                    else printf("0");
 800140e:	2030      	movs	r0, #48	; 0x30
 8001410:	f01a fa10 	bl	801b834 <putchar>
                for(int i=0; i<16; i++){
 8001414:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001418:	3301      	adds	r3, #1
 800141a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800141e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001422:	2b0f      	cmp	r3, #15
 8001424:	dde3      	ble.n	80013ee <UDPControllerReceive+0x2ce>
                }
                printf("\n\r");
 8001426:	480f      	ldr	r0, [pc, #60]	; (8001464 <UDPControllerReceive+0x344>)
 8001428:	f01a f9ec 	bl	801b804 <iprintf>


                memcpy(&controller_raw, d, sizeof(struct controller_data));
 800142c:	2214      	movs	r2, #20
 800142e:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8001432:	4807      	ldr	r0, [pc, #28]	; (8001450 <UDPControllerReceive+0x330>)
 8001434:	f01a f9d0 	bl	801b7d8 <memcpy>
            }
        }
        osDelay(10);
 8001438:	200a      	movs	r0, #10
 800143a:	f008 f825 	bl	8009488 <osDelay>
        FD_SET(sock, &rset);
 800143e:	e711      	b.n	8001264 <UDPControllerReceive+0x144>
 8001440:	0801cb5c 	.word	0x0801cb5c
 8001444:	0801cb7c 	.word	0x0801cb7c
 8001448:	0801cb94 	.word	0x0801cb94
 800144c:	200024e8 	.word	0x200024e8
 8001450:	200024d4 	.word	0x200024d4
 8001454:	0801cbb4 	.word	0x0801cbb4
 8001458:	43800000 	.word	0x43800000
 800145c:	0801cbc8 	.word	0x0801cbc8
 8001460:	0801cbf0 	.word	0x0801cbf0
 8001464:	0801cbfc 	.word	0x0801cbfc

08001468 <UDPController_GetControllerButtons>:
    }

}


uint16_t UDPController_GetControllerButtons() {
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
    return controller_raw.button;
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <UDPController_GetControllerButtons+0x14>)
 800146e:	881b      	ldrh	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	200024d4 	.word	0x200024d4

08001480 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(uint8_t ch)
#else
#define PUTCHAR_PROTYPE int fputc(int ch,FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, &ch, 1, 500);
 800148a:	1df9      	adds	r1, r7, #7
 800148c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001490:	2201      	movs	r2, #1
 8001492:	4804      	ldr	r0, [pc, #16]	; (80014a4 <__io_putchar+0x24>)
 8001494:	f005 fd36 	bl	8006f04 <HAL_UART_Transmit>
    return ch;
 8001498:	79fb      	ldrb	r3, [r7, #7]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20002520 	.word	0x20002520

080014a8 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 80014b0:	f7ff f94a 	bl	8000748 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 80014c4:	f7ff f946 	bl	8000754 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 80014d8:	f7ff f936 	bl	8000748 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 80014ec:	f7ff f932 	bl	8000754 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8001500:	f7ff f922 	bl	8000748 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan){
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 8001514:	f7ff f91e 	bl	8000754 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
    WhenCANRxFifo0MsgPending(hcan, &num_of_devices);
 8001528:	4903      	ldr	r1, [pc, #12]	; (8001538 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff f918 	bl	8000760 <WhenCANRxFifo0MsgPending>
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20004430 	.word	0x20004430

0800153c <canSetting>:

void canSetting(){
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	printf("Start Initializing CAN System:Begin\n\r");
 8001540:	480e      	ldr	r0, [pc, #56]	; (800157c <canSetting+0x40>)
 8001542:	f01a f95f 	bl	801b804 <iprintf>
	HAL_Delay(100);
 8001546:	2064      	movs	r0, #100	; 0x64
 8001548:	f000 ffcc 	bl	80024e4 <HAL_Delay>

	CAN_SystemInit(&hcan1); // F7のCAN通信のinit
 800154c:	480c      	ldr	r0, [pc, #48]	; (8001580 <canSetting+0x44>)
 800154e:	f7ff fa57 	bl	8000a00 <CAN_SystemInit>

	// デバイス数の設定 (今回はmcmd4が1枚)
	num_of_devices.mcmd3 = 1;
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <canSetting+0x48>)
 8001554:	2201      	movs	r2, #1
 8001556:	709a      	strb	r2, [r3, #2]
	num_of_devices.mcmd4 = 0;
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <canSetting+0x48>)
 800155a:	2200      	movs	r2, #0
 800155c:	715a      	strb	r2, [r3, #5]
	num_of_devices.air = 0;
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <canSetting+0x48>)
 8001560:	2200      	movs	r2, #0
 8001562:	711a      	strb	r2, [r3, #4]
	num_of_devices.servo = 0;
 8001564:	4b07      	ldr	r3, [pc, #28]	; (8001584 <canSetting+0x48>)
 8001566:	2200      	movs	r2, #0
 8001568:	70da      	strb	r2, [r3, #3]

	printf("Start Initializing CAN System:End\n\r");
 800156a:	4807      	ldr	r0, [pc, #28]	; (8001588 <canSetting+0x4c>)
 800156c:	f01a f94a 	bl	801b804 <iprintf>
	HAL_Delay(100);
 8001570:	2064      	movs	r0, #100	; 0x64
 8001572:	f000 ffb7 	bl	80024e4 <HAL_Delay>
	//CAN_WaitConnect(&num_of_devices);  // 設定された全てのCANモジュール基板との接続が確認できるまで待機
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	0801cc2c 	.word	0x0801cc2c
 8001580:	200024f8 	.word	0x200024f8
 8001584:	20004430 	.word	0x20004430
 8001588:	0801cc54 	.word	0x0801cc54

0800158c <airSetting>:
	servo_param.pulse_width_max=2.4f;//サーボの制御のPWM信号のパルス幅の最大値
	servo_param.pulse_width_min=0.5f;//サーボの制御のPWM信号のパルス幅の最小値
	servo_param.pwm_frequency=50;//PWM周波数（この変更は未実装
}

void airSetting(){
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
	air_device.node_type = NODE_AIR; //エアシリンダ基盤であることを示す
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <airSetting+0x1c>)
 8001592:	2205      	movs	r2, #5
 8001594:	701a      	strb	r2, [r3, #0]
	air_device.node_id = 0; //基板の番号
 8001596:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <airSetting+0x1c>)
 8001598:	2200      	movs	r2, #0
 800159a:	705a      	strb	r2, [r3, #1]
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20004438 	.word	0x20004438

080015ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b0:	f000 ff6a 	bl	8002488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b4:	f000 f83e 	bl	8001634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b8:	f000 f960 	bl	800187c <MX_GPIO_Init>
  MX_DMA_Init();
 80015bc:	f000 f940 	bl	8001840 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80015c0:	f000 f8e0 	bl	8001784 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80015c4:	f000 f90e 	bl	80017e4 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 80015c8:	f000 f8a6 	bl	8001718 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  //記事ではmcmdなどの初期化コードを描くことになっている場所
  canSetting();
 80015cc:	f7ff ffb6 	bl	800153c <canSetting>
  //mcmdSetting();
  //activateMcmdControll();
  //servoSetting();
  airSetting();
 80015d0:	f7ff ffdc 	bl	800158c <airSetting>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015d4:	f007 fe20 	bl	8009218 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80015d8:	4a0d      	ldr	r2, [pc, #52]	; (8001610 <main+0x64>)
 80015da:	2100      	movs	r1, #0
 80015dc:	480d      	ldr	r0, [pc, #52]	; (8001614 <main+0x68>)
 80015de:	f007 fead 	bl	800933c <osThreadNew>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4a0c      	ldr	r2, [pc, #48]	; (8001618 <main+0x6c>)
 80015e6:	6013      	str	r3, [r2, #0]

  /* creation of systemCheckTask */
  systemCheckTaskHandle = osThreadNew(StartSystemCheckTask, NULL, &systemCheckTask_attributes);
 80015e8:	4a0c      	ldr	r2, [pc, #48]	; (800161c <main+0x70>)
 80015ea:	2100      	movs	r1, #0
 80015ec:	480c      	ldr	r0, [pc, #48]	; (8001620 <main+0x74>)
 80015ee:	f007 fea5 	bl	800933c <osThreadNew>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <main+0x78>)
 80015f6:	6013      	str	r3, [r2, #0]

  /* creation of ControllerTask */
  ControllerTaskHandle = osThreadNew(StartControllerTask, NULL, &ControllerTask_attributes);
 80015f8:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <main+0x7c>)
 80015fa:	2100      	movs	r1, #0
 80015fc:	480b      	ldr	r0, [pc, #44]	; (800162c <main+0x80>)
 80015fe:	f007 fe9d 	bl	800933c <osThreadNew>
 8001602:	4603      	mov	r3, r0
 8001604:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <main+0x84>)
 8001606:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001608:	f007 fe3a 	bl	8009280 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800160c:	e7fe      	b.n	800160c <main+0x60>
 800160e:	bf00      	nop
 8001610:	0802041c 	.word	0x0802041c
 8001614:	080019c1 	.word	0x080019c1
 8001618:	20002b10 	.word	0x20002b10
 800161c:	08020440 	.word	0x08020440
 8001620:	08001a81 	.word	0x08001a81
 8001624:	20003370 	.word	0x20003370
 8001628:	08020464 	.word	0x08020464
 800162c:	08001a9b 	.word	0x08001a9b
 8001630:	20003bd0 	.word	0x20003bd0

08001634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b094      	sub	sp, #80	; 0x50
 8001638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	2234      	movs	r2, #52	; 0x34
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f01a f8d6 	bl	801b7f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001658:	f003 ff98 	bl	800558c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800165c:	4b2c      	ldr	r3, [pc, #176]	; (8001710 <SystemClock_Config+0xdc>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	4a2b      	ldr	r2, [pc, #172]	; (8001710 <SystemClock_Config+0xdc>)
 8001662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001666:	6413      	str	r3, [r2, #64]	; 0x40
 8001668:	4b29      	ldr	r3, [pc, #164]	; (8001710 <SystemClock_Config+0xdc>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001674:	4b27      	ldr	r3, [pc, #156]	; (8001714 <SystemClock_Config+0xe0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800167c:	4a25      	ldr	r2, [pc, #148]	; (8001714 <SystemClock_Config+0xe0>)
 800167e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b23      	ldr	r3, [pc, #140]	; (8001714 <SystemClock_Config+0xe0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001690:	2301      	movs	r3, #1
 8001692:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001694:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001698:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800169a:	2302      	movs	r3, #2
 800169c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800169e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016a4:	2304      	movs	r3, #4
 80016a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80016a8:	2360      	movs	r3, #96	; 0x60
 80016aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016ac:	2302      	movs	r3, #2
 80016ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016b0:	2304      	movs	r3, #4
 80016b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016b4:	2302      	movs	r3, #2
 80016b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b8:	f107 031c 	add.w	r3, r7, #28
 80016bc:	4618      	mov	r0, r3
 80016be:	f003 ffc5 	bl	800564c <HAL_RCC_OscConfig>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80016c8:	f000 fa04 	bl	8001ad4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80016cc:	f003 ff6e 	bl	80055ac <HAL_PWREx_EnableOverDrive>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80016d6:	f000 f9fd 	bl	8001ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016da:	230f      	movs	r3, #15
 80016dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016de:	2302      	movs	r3, #2
 80016e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016f0:	f107 0308 	add.w	r3, r7, #8
 80016f4:	2103      	movs	r1, #3
 80016f6:	4618      	mov	r0, r3
 80016f8:	f004 fa56 	bl	8005ba8 <HAL_RCC_ClockConfig>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001702:	f000 f9e7 	bl	8001ad4 <Error_Handler>
  }
}
 8001706:	bf00      	nop
 8001708:	3750      	adds	r7, #80	; 0x50
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800
 8001714:	40007000 	.word	0x40007000

08001718 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800171c:	4b17      	ldr	r3, [pc, #92]	; (800177c <MX_CAN1_Init+0x64>)
 800171e:	4a18      	ldr	r2, [pc, #96]	; (8001780 <MX_CAN1_Init+0x68>)
 8001720:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8001722:	4b16      	ldr	r3, [pc, #88]	; (800177c <MX_CAN1_Init+0x64>)
 8001724:	2206      	movs	r2, #6
 8001726:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <MX_CAN1_Init+0x64>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <MX_CAN1_Init+0x64>)
 8001730:	2200      	movs	r2, #0
 8001732:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <MX_CAN1_Init+0x64>)
 8001736:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800173a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <MX_CAN1_Init+0x64>)
 800173e:	2200      	movs	r2, #0
 8001740:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <MX_CAN1_Init+0x64>)
 8001744:	2200      	movs	r2, #0
 8001746:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <MX_CAN1_Init+0x64>)
 800174a:	2200      	movs	r2, #0
 800174c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <MX_CAN1_Init+0x64>)
 8001750:	2200      	movs	r2, #0
 8001752:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001754:	4b09      	ldr	r3, [pc, #36]	; (800177c <MX_CAN1_Init+0x64>)
 8001756:	2200      	movs	r2, #0
 8001758:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <MX_CAN1_Init+0x64>)
 800175c:	2200      	movs	r2, #0
 800175e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <MX_CAN1_Init+0x64>)
 8001762:	2201      	movs	r2, #1
 8001764:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001766:	4805      	ldr	r0, [pc, #20]	; (800177c <MX_CAN1_Init+0x64>)
 8001768:	f000 fee0 	bl	800252c <HAL_CAN_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001772:	f000 f9af 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200024f8 	.word	0x200024f8
 8001780:	40006400 	.word	0x40006400

08001784 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <MX_USART3_UART_Init+0x58>)
 800178a:	4a15      	ldr	r2, [pc, #84]	; (80017e0 <MX_USART3_UART_Init+0x5c>)
 800178c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800178e:	4b13      	ldr	r3, [pc, #76]	; (80017dc <MX_USART3_UART_Init+0x58>)
 8001790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001794:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_USART3_UART_Init+0x58>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <MX_USART3_UART_Init+0x58>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_USART3_UART_Init+0x58>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <MX_USART3_UART_Init+0x58>)
 80017aa:	220c      	movs	r2, #12
 80017ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <MX_USART3_UART_Init+0x58>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <MX_USART3_UART_Init+0x58>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <MX_USART3_UART_Init+0x58>)
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <MX_USART3_UART_Init+0x58>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_USART3_UART_Init+0x58>)
 80017c8:	f005 fb4e 	bl	8006e68 <HAL_UART_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80017d2:	f000 f97f 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20002520 	.word	0x20002520
 80017e0:	40004800 	.word	0x40004800

080017e4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80017ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017f2:	2206      	movs	r2, #6
 80017f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017f8:	2202      	movs	r2, #2
 80017fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001804:	2202      	movs	r2, #2
 8001806:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800180a:	2201      	movs	r2, #1
 800180c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001810:	2200      	movs	r2, #0
 8001812:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001814:	4b09      	ldr	r3, [pc, #36]	; (800183c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001816:	2200      	movs	r2, #0
 8001818:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800181c:	2201      	movs	r2, #1
 800181e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001822:	2200      	movs	r2, #0
 8001824:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001826:	4805      	ldr	r0, [pc, #20]	; (800183c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001828:	f003 fd67 	bl	80052fa <HAL_PCD_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001832:	f000 f94f 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20002608 	.word	0x20002608

08001840 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <MX_DMA_Init+0x38>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <MX_DMA_Init+0x38>)
 800184c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <MX_DMA_Init+0x38>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2105      	movs	r1, #5
 8001862:	200e      	movs	r0, #14
 8001864:	f001 fd76 	bl	8003354 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001868:	200e      	movs	r0, #14
 800186a:	f001 fd8f 	bl	800338c <HAL_NVIC_EnableIRQ>

}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800

0800187c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08c      	sub	sp, #48	; 0x30
 8001880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001882:	f107 031c 	add.w	r3, r7, #28
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
 8001890:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001892:	4b47      	ldr	r3, [pc, #284]	; (80019b0 <MX_GPIO_Init+0x134>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a46      	ldr	r2, [pc, #280]	; (80019b0 <MX_GPIO_Init+0x134>)
 8001898:	f043 0304 	orr.w	r3, r3, #4
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b44      	ldr	r3, [pc, #272]	; (80019b0 <MX_GPIO_Init+0x134>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	61bb      	str	r3, [r7, #24]
 80018a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018aa:	4b41      	ldr	r3, [pc, #260]	; (80019b0 <MX_GPIO_Init+0x134>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a40      	ldr	r2, [pc, #256]	; (80019b0 <MX_GPIO_Init+0x134>)
 80018b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b3e      	ldr	r3, [pc, #248]	; (80019b0 <MX_GPIO_Init+0x134>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c2:	4b3b      	ldr	r3, [pc, #236]	; (80019b0 <MX_GPIO_Init+0x134>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a3a      	ldr	r2, [pc, #232]	; (80019b0 <MX_GPIO_Init+0x134>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b38      	ldr	r3, [pc, #224]	; (80019b0 <MX_GPIO_Init+0x134>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	4b35      	ldr	r3, [pc, #212]	; (80019b0 <MX_GPIO_Init+0x134>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a34      	ldr	r2, [pc, #208]	; (80019b0 <MX_GPIO_Init+0x134>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b32      	ldr	r3, [pc, #200]	; (80019b0 <MX_GPIO_Init+0x134>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f2:	4b2f      	ldr	r3, [pc, #188]	; (80019b0 <MX_GPIO_Init+0x134>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a2e      	ldr	r2, [pc, #184]	; (80019b0 <MX_GPIO_Init+0x134>)
 80018f8:	f043 0308 	orr.w	r3, r3, #8
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <MX_GPIO_Init+0x134>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800190a:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <MX_GPIO_Init+0x134>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a28      	ldr	r2, [pc, #160]	; (80019b0 <MX_GPIO_Init+0x134>)
 8001910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <MX_GPIO_Init+0x134>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001922:	2200      	movs	r2, #0
 8001924:	f244 0181 	movw	r1, #16513	; 0x4081
 8001928:	4822      	ldr	r0, [pc, #136]	; (80019b4 <MX_GPIO_Init+0x138>)
 800192a:	f003 fcb3 	bl	8005294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800192e:	2200      	movs	r2, #0
 8001930:	2140      	movs	r1, #64	; 0x40
 8001932:	4821      	ldr	r0, [pc, #132]	; (80019b8 <MX_GPIO_Init+0x13c>)
 8001934:	f003 fcae 	bl	8005294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800193c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800193e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	4619      	mov	r1, r3
 800194e:	481b      	ldr	r0, [pc, #108]	; (80019bc <MX_GPIO_Init+0x140>)
 8001950:	f003 faf4 	bl	8004f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001954:	f244 0381 	movw	r3, #16513	; 0x4081
 8001958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195a:	2301      	movs	r3, #1
 800195c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001962:	2300      	movs	r3, #0
 8001964:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001966:	f107 031c 	add.w	r3, r7, #28
 800196a:	4619      	mov	r1, r3
 800196c:	4811      	ldr	r0, [pc, #68]	; (80019b4 <MX_GPIO_Init+0x138>)
 800196e:	f003 fae5 	bl	8004f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001972:	2340      	movs	r3, #64	; 0x40
 8001974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001976:	2301      	movs	r3, #1
 8001978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001982:	f107 031c 	add.w	r3, r7, #28
 8001986:	4619      	mov	r1, r3
 8001988:	480b      	ldr	r0, [pc, #44]	; (80019b8 <MX_GPIO_Init+0x13c>)
 800198a:	f003 fad7 	bl	8004f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800199a:	f107 031c 	add.w	r3, r7, #28
 800199e:	4619      	mov	r1, r3
 80019a0:	4805      	ldr	r0, [pc, #20]	; (80019b8 <MX_GPIO_Init+0x13c>)
 80019a2:	f003 facb 	bl	8004f3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019a6:	bf00      	nop
 80019a8:	3730      	adds	r7, #48	; 0x30
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40020400 	.word	0x40020400
 80019b8:	40021800 	.word	0x40021800
 80019bc:	40020800 	.word	0x40020800

080019c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80019c8:	f006 fde4 	bl	8008594 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);  // LED1 消灯
 80019cc:	2200      	movs	r2, #0
 80019ce:	2101      	movs	r1, #1
 80019d0:	480d      	ldr	r0, [pc, #52]	; (8001a08 <StartDefaultTask+0x48>)
 80019d2:	f003 fc5f 	bl	8005294 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	uint16_t button_data = UDPController_GetControllerButtons();  // buttonの入力を取得
 80019d6:	f7ff fd47 	bl	8001468 <UDPController_GetControllerButtons>
 80019da:	4603      	mov	r3, r0
 80019dc:	81fb      	strh	r3, [r7, #14]
	if((button_data & CONTROLLER_CIRCLE) != 0){  // oボタンが押されている場合
 80019de:	89fb      	ldrh	r3, [r7, #14]
 80019e0:	f003 0320 	and.w	r3, r3, #32
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d005      	beq.n	80019f4 <StartDefaultTask+0x34>
	   HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);  // LED1 点灯
 80019e8:	2201      	movs	r2, #1
 80019ea:	2101      	movs	r1, #1
 80019ec:	4806      	ldr	r0, [pc, #24]	; (8001a08 <StartDefaultTask+0x48>)
 80019ee:	f003 fc51 	bl	8005294 <HAL_GPIO_WritePin>
 80019f2:	e004      	b.n	80019fe <StartDefaultTask+0x3e>
	}else{
	   HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);  // LED1 消灯
 80019f4:	2200      	movs	r2, #0
 80019f6:	2101      	movs	r1, #1
 80019f8:	4803      	ldr	r0, [pc, #12]	; (8001a08 <StartDefaultTask+0x48>)
 80019fa:	f003 fc4b 	bl	8005294 <HAL_GPIO_WritePin>
	}
	osDelay(100);
 80019fe:	2064      	movs	r0, #100	; 0x64
 8001a00:	f007 fd42 	bl	8009488 <osDelay>
  {
 8001a04:	e7e7      	b.n	80019d6 <StartDefaultTask+0x16>
 8001a06:	bf00      	nop
 8001a08:	40020400 	.word	0x40020400

08001a0c <freeRTOSChecker>:
/**
* @brief Function implementing the systemCheckTask thread.
* @param argument: Not used
* @retval None
*/
void freeRTOSChecker(){//無限ループの中で実行
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, LD2_Pin);  // PINのPin stateを反転
 8001a10:	2180      	movs	r1, #128	; 0x80
 8001a12:	4802      	ldr	r0, [pc, #8]	; (8001a1c <freeRTOSChecker+0x10>)
 8001a14:	f003 fc57 	bl	80052c6 <HAL_GPIO_TogglePin>
}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40020400 	.word	0x40020400

08001a20 <airChecker>:
	ServoDriver_Init(&servo_device, &servo_param);  // Servo基板にパラメータを送信
	HAL_Delay(100);  // 適切なdelayを入れる
	ServoDriver_SendValue(&servo_device, 20.0f);  // サーボが20.0度になるように回転させる
}

void airChecker(){
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
	for(uint8_t i=PORT_1; i<=PORT_8; i++){  //すべてのポートを初期化しないとAir基板は動かない
 8001a26:	2300      	movs	r3, #0
 8001a28:	71fb      	strb	r3, [r7, #7]
 8001a2a:	e00c      	b.n	8001a46 <airChecker+0x26>
	    air_device.device_num = i; // (i番ポートを指定)
 8001a2c:	4a13      	ldr	r2, [pc, #76]	; (8001a7c <airChecker+0x5c>)
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	7093      	strb	r3, [r2, #2]
	    AirCylinder_Init(&air_device, AIR_OFF);
 8001a32:	2100      	movs	r1, #0
 8001a34:	4811      	ldr	r0, [pc, #68]	; (8001a7c <airChecker+0x5c>)
 8001a36:	f7ff fa8b 	bl	8000f50 <AirCylinder_Init>
	    osDelay(10);  // このdelayは必要
 8001a3a:	200a      	movs	r0, #10
 8001a3c:	f007 fd24 	bl	8009488 <osDelay>
	for(uint8_t i=PORT_1; i<=PORT_8; i++){  //すべてのポートを初期化しないとAir基板は動かない
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	3301      	adds	r3, #1
 8001a44:	71fb      	strb	r3, [r7, #7]
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	2b07      	cmp	r3, #7
 8001a4a:	d9ef      	bls.n	8001a2c <airChecker+0xc>
	  }
	  air_device.device_num=0; // とりあえず0番ポートのエアシリンダを動かします。
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <airChecker+0x5c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	709a      	strb	r2, [r3, #2]
	  AirCylinder_SendOutput(&air_device, AIR_ON);  // 0番ポートの電磁弁がonになる
 8001a52:	2101      	movs	r1, #1
 8001a54:	4809      	ldr	r0, [pc, #36]	; (8001a7c <airChecker+0x5c>)
 8001a56:	f7ff fa96 	bl	8000f86 <AirCylinder_SendOutput>
	  osDelay(1000);
 8001a5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a5e:	f007 fd13 	bl	8009488 <osDelay>
	  AirCylinder_SendOutput(&air_device, AIR_OFF); // 0番ポートの電磁弁がoffになる
 8001a62:	2100      	movs	r1, #0
 8001a64:	4805      	ldr	r0, [pc, #20]	; (8001a7c <airChecker+0x5c>)
 8001a66:	f7ff fa8e 	bl	8000f86 <AirCylinder_SendOutput>
	  osDelay(1000);
 8001a6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a6e:	f007 fd0b 	bl	8009488 <osDelay>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20004438 	.word	0x20004438

08001a80 <StartSystemCheckTask>:
/* USER CODE END Header_StartSystemCheckTask */
void StartSystemCheckTask(void *argument)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSystemCheckTask */
	//servoChecker();
	airChecker();
 8001a88:	f7ff ffca 	bl	8001a20 <airChecker>
  /* Infinite loop */
  for(;;)
  {
	  freeRTOSChecker();
 8001a8c:	f7ff ffbe 	bl	8001a0c <freeRTOSChecker>
	  //mcmdChecker();
	  osDelay(1000);
 8001a90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a94:	f007 fcf8 	bl	8009488 <osDelay>
	  freeRTOSChecker();
 8001a98:	e7f8      	b.n	8001a8c <StartSystemCheckTask+0xc>

08001a9a <StartControllerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControllerTask */
void StartControllerTask(void *argument)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControllerTask */
  /* Infinite loop */
	UDPControllerReceive(argument);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff fb3c 	bl	8001120 <UDPControllerReceive>
  /* USER CODE END StartControllerTask */
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d101      	bne.n	8001ac6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ac2:	f000 fcef 	bl	80024a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40002000 	.word	0x40002000

08001ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad8:	b672      	cpsid	i
}
 8001ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001adc:	e7fe      	b.n	8001adc <Error_Handler+0x8>
	...

08001ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <HAL_MspInit+0x4c>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	4a10      	ldr	r2, [pc, #64]	; (8001b2c <HAL_MspInit+0x4c>)
 8001aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af0:	6413      	str	r3, [r2, #64]	; 0x40
 8001af2:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <HAL_MspInit+0x4c>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_MspInit+0x4c>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <HAL_MspInit+0x4c>)
 8001b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b08:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0a:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <HAL_MspInit+0x4c>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b12:	603b      	str	r3, [r7, #0]
 8001b14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	210f      	movs	r1, #15
 8001b1a:	f06f 0001 	mvn.w	r0, #1
 8001b1e:	f001 fc19 	bl	8003354 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800

08001b30 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	; 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a23      	ldr	r2, [pc, #140]	; (8001bdc <HAL_CAN_MspInit+0xac>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d13f      	bne.n	8001bd2 <HAL_CAN_MspInit+0xa2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b52:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <HAL_CAN_MspInit+0xb0>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	4a22      	ldr	r2, [pc, #136]	; (8001be0 <HAL_CAN_MspInit+0xb0>)
 8001b58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5e:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <HAL_CAN_MspInit+0xb0>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b6a:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <HAL_CAN_MspInit+0xb0>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a1c      	ldr	r2, [pc, #112]	; (8001be0 <HAL_CAN_MspInit+0xb0>)
 8001b70:	f043 0308 	orr.w	r3, r3, #8
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <HAL_CAN_MspInit+0xb0>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b82:	2303      	movs	r3, #3
 8001b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b92:	2309      	movs	r3, #9
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4811      	ldr	r0, [pc, #68]	; (8001be4 <HAL_CAN_MspInit+0xb4>)
 8001b9e:	f003 f9cd 	bl	8004f3c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2105      	movs	r1, #5
 8001ba6:	2013      	movs	r0, #19
 8001ba8:	f001 fbd4 	bl	8003354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001bac:	2013      	movs	r0, #19
 8001bae:	f001 fbed 	bl	800338c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2105      	movs	r1, #5
 8001bb6:	2014      	movs	r0, #20
 8001bb8:	f001 fbcc 	bl	8003354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001bbc:	2014      	movs	r0, #20
 8001bbe:	f001 fbe5 	bl	800338c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2105      	movs	r1, #5
 8001bc6:	2015      	movs	r0, #21
 8001bc8:	f001 fbc4 	bl	8003354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001bcc:	2015      	movs	r0, #21
 8001bce:	f001 fbdd 	bl	800338c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3728      	adds	r7, #40	; 0x28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40006400 	.word	0x40006400
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40020c00 	.word	0x40020c00

08001be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b0ae      	sub	sp, #184	; 0xb8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	2290      	movs	r2, #144	; 0x90
 8001c06:	2100      	movs	r1, #0
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f019 fdf3 	bl	801b7f4 <memset>
  if(huart->Instance==USART3)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a3d      	ldr	r2, [pc, #244]	; (8001d08 <HAL_UART_MspInit+0x120>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d172      	bne.n	8001cfe <HAL_UART_MspInit+0x116>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c1c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	4618      	mov	r0, r3
 8001c28:	f004 fa16 	bl	8006058 <HAL_RCCEx_PeriphCLKConfig>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001c32:	f7ff ff4f 	bl	8001ad4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c36:	4b35      	ldr	r3, [pc, #212]	; (8001d0c <HAL_UART_MspInit+0x124>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	4a34      	ldr	r2, [pc, #208]	; (8001d0c <HAL_UART_MspInit+0x124>)
 8001c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c40:	6413      	str	r3, [r2, #64]	; 0x40
 8001c42:	4b32      	ldr	r3, [pc, #200]	; (8001d0c <HAL_UART_MspInit+0x124>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c4e:	4b2f      	ldr	r3, [pc, #188]	; (8001d0c <HAL_UART_MspInit+0x124>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a2e      	ldr	r2, [pc, #184]	; (8001d0c <HAL_UART_MspInit+0x124>)
 8001c54:	f043 0308 	orr.w	r3, r3, #8
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b2c      	ldr	r3, [pc, #176]	; (8001d0c <HAL_UART_MspInit+0x124>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001c66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c80:	2307      	movs	r3, #7
 8001c82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c86:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4820      	ldr	r0, [pc, #128]	; (8001d10 <HAL_UART_MspInit+0x128>)
 8001c8e:	f003 f955 	bl	8004f3c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001c92:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <HAL_UART_MspInit+0x12c>)
 8001c94:	4a20      	ldr	r2, [pc, #128]	; (8001d18 <HAL_UART_MspInit+0x130>)
 8001c96:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001c98:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <HAL_UART_MspInit+0x12c>)
 8001c9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c9e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ca0:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <HAL_UART_MspInit+0x12c>)
 8001ca2:	2240      	movs	r2, #64	; 0x40
 8001ca4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ca6:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <HAL_UART_MspInit+0x12c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cac:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <HAL_UART_MspInit+0x12c>)
 8001cae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cb2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cb4:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <HAL_UART_MspInit+0x12c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cba:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <HAL_UART_MspInit+0x12c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001cc0:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <HAL_UART_MspInit+0x12c>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cc6:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <HAL_UART_MspInit+0x12c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <HAL_UART_MspInit+0x12c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001cd2:	4810      	ldr	r0, [pc, #64]	; (8001d14 <HAL_UART_MspInit+0x12c>)
 8001cd4:	f001 fb68 	bl	80033a8 <HAL_DMA_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001cde:	f7ff fef9 	bl	8001ad4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a0b      	ldr	r2, [pc, #44]	; (8001d14 <HAL_UART_MspInit+0x12c>)
 8001ce6:	671a      	str	r2, [r3, #112]	; 0x70
 8001ce8:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <HAL_UART_MspInit+0x12c>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2105      	movs	r1, #5
 8001cf2:	2027      	movs	r0, #39	; 0x27
 8001cf4:	f001 fb2e 	bl	8003354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001cf8:	2027      	movs	r0, #39	; 0x27
 8001cfa:	f001 fb47 	bl	800338c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cfe:	bf00      	nop
 8001d00:	37b8      	adds	r7, #184	; 0xb8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40004800 	.word	0x40004800
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40020c00 	.word	0x40020c00
 8001d14:	200025a8 	.word	0x200025a8
 8001d18:	40026058 	.word	0x40026058

08001d1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b0ae      	sub	sp, #184	; 0xb8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	2290      	movs	r2, #144	; 0x90
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f019 fd59 	bl	801b7f4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d4a:	d159      	bne.n	8001e00 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001d4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d50:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f004 f97b 	bl	8006058 <HAL_RCCEx_PeriphCLKConfig>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001d68:	f7ff feb4 	bl	8001ad4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6c:	4b26      	ldr	r3, [pc, #152]	; (8001e08 <HAL_PCD_MspInit+0xec>)
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	4a25      	ldr	r2, [pc, #148]	; (8001e08 <HAL_PCD_MspInit+0xec>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	6313      	str	r3, [r2, #48]	; 0x30
 8001d78:	4b23      	ldr	r3, [pc, #140]	; (8001e08 <HAL_PCD_MspInit+0xec>)
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001d84:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001d88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d9e:	230a      	movs	r3, #10
 8001da0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001da8:	4619      	mov	r1, r3
 8001daa:	4818      	ldr	r0, [pc, #96]	; (8001e0c <HAL_PCD_MspInit+0xf0>)
 8001dac:	f003 f8c6 	bl	8004f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001db0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001db4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db8:	2300      	movs	r3, #0
 8001dba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001dc4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4810      	ldr	r0, [pc, #64]	; (8001e0c <HAL_PCD_MspInit+0xf0>)
 8001dcc:	f003 f8b6 	bl	8004f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001dd0:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <HAL_PCD_MspInit+0xec>)
 8001dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd4:	4a0c      	ldr	r2, [pc, #48]	; (8001e08 <HAL_PCD_MspInit+0xec>)
 8001dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dda:	6353      	str	r3, [r2, #52]	; 0x34
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <HAL_PCD_MspInit+0xec>)
 8001dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <HAL_PCD_MspInit+0xec>)
 8001dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dec:	4a06      	ldr	r2, [pc, #24]	; (8001e08 <HAL_PCD_MspInit+0xec>)
 8001dee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df2:	6453      	str	r3, [r2, #68]	; 0x44
 8001df4:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <HAL_PCD_MspInit+0xec>)
 8001df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001e00:	bf00      	nop
 8001e02:	37b8      	adds	r7, #184	; 0xb8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40020000 	.word	0x40020000

08001e10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08e      	sub	sp, #56	; 0x38
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001e20:	4b33      	ldr	r3, [pc, #204]	; (8001ef0 <HAL_InitTick+0xe0>)
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	4a32      	ldr	r2, [pc, #200]	; (8001ef0 <HAL_InitTick+0xe0>)
 8001e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2c:	4b30      	ldr	r3, [pc, #192]	; (8001ef0 <HAL_InitTick+0xe0>)
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e38:	f107 0210 	add.w	r2, r7, #16
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	4611      	mov	r1, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f004 f8d6 	bl	8005ff4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e48:	6a3b      	ldr	r3, [r7, #32]
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d103      	bne.n	8001e5a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e52:	f004 f8a7 	bl	8005fa4 <HAL_RCC_GetPCLK1Freq>
 8001e56:	6378      	str	r0, [r7, #52]	; 0x34
 8001e58:	e004      	b.n	8001e64 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e5a:	f004 f8a3 	bl	8005fa4 <HAL_RCC_GetPCLK1Freq>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e66:	4a23      	ldr	r2, [pc, #140]	; (8001ef4 <HAL_InitTick+0xe4>)
 8001e68:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6c:	0c9b      	lsrs	r3, r3, #18
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001e72:	4b21      	ldr	r3, [pc, #132]	; (8001ef8 <HAL_InitTick+0xe8>)
 8001e74:	4a21      	ldr	r2, [pc, #132]	; (8001efc <HAL_InitTick+0xec>)
 8001e76:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001e78:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <HAL_InitTick+0xe8>)
 8001e7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e7e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001e80:	4a1d      	ldr	r2, [pc, #116]	; (8001ef8 <HAL_InitTick+0xe8>)
 8001e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e84:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001e86:	4b1c      	ldr	r3, [pc, #112]	; (8001ef8 <HAL_InitTick+0xe8>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <HAL_InitTick+0xe8>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e92:	4b19      	ldr	r3, [pc, #100]	; (8001ef8 <HAL_InitTick+0xe8>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001e98:	4817      	ldr	r0, [pc, #92]	; (8001ef8 <HAL_InitTick+0xe8>)
 8001e9a:	f004 fd05 	bl	80068a8 <HAL_TIM_Base_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001ea4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d11b      	bne.n	8001ee4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8001eac:	4812      	ldr	r0, [pc, #72]	; (8001ef8 <HAL_InitTick+0xe8>)
 8001eae:	f004 fd5d 	bl	800696c <HAL_TIM_Base_Start_IT>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001eb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d111      	bne.n	8001ee4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001ec0:	202d      	movs	r0, #45	; 0x2d
 8001ec2:	f001 fa63 	bl	800338c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b0f      	cmp	r3, #15
 8001eca:	d808      	bhi.n	8001ede <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	202d      	movs	r0, #45	; 0x2d
 8001ed2:	f001 fa3f 	bl	8003354 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <HAL_InitTick+0xf0>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	e002      	b.n	8001ee4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001ee4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3738      	adds	r7, #56	; 0x38
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	431bde83 	.word	0x431bde83
 8001ef8:	2000443c 	.word	0x2000443c
 8001efc:	40002000 	.word	0x40002000
 8001f00:	20000004 	.word	0x20000004

08001f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <NMI_Handler+0x4>

08001f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f0e:	e7fe      	b.n	8001f0e <HardFault_Handler+0x4>

08001f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f14:	e7fe      	b.n	8001f14 <MemManage_Handler+0x4>

08001f16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f1a:	e7fe      	b.n	8001f1a <BusFault_Handler+0x4>

08001f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f20:	e7fe      	b.n	8001f20 <UsageFault_Handler+0x4>

08001f22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001f34:	4802      	ldr	r0, [pc, #8]	; (8001f40 <DMA1_Stream3_IRQHandler+0x10>)
 8001f36:	f001 fb77 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200025a8 	.word	0x200025a8

08001f44 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f48:	4802      	ldr	r0, [pc, #8]	; (8001f54 <CAN1_TX_IRQHandler+0x10>)
 8001f4a:	f000 ff58 	bl	8002dfe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	200024f8 	.word	0x200024f8

08001f58 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f5c:	4802      	ldr	r0, [pc, #8]	; (8001f68 <CAN1_RX0_IRQHandler+0x10>)
 8001f5e:	f000 ff4e 	bl	8002dfe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200024f8 	.word	0x200024f8

08001f6c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f70:	4802      	ldr	r0, [pc, #8]	; (8001f7c <CAN1_RX1_IRQHandler+0x10>)
 8001f72:	f000 ff44 	bl	8002dfe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200024f8 	.word	0x200024f8

08001f80 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f84:	4802      	ldr	r0, [pc, #8]	; (8001f90 <USART3_IRQHandler+0x10>)
 8001f86:	f005 f841 	bl	800700c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20002520 	.word	0x20002520

08001f94 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001f98:	4802      	ldr	r0, [pc, #8]	; (8001fa4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001f9a:	f004 fd5f 	bl	8006a5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	2000443c 	.word	0x2000443c

08001fa8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001fac:	4802      	ldr	r0, [pc, #8]	; (8001fb8 <ETH_IRQHandler+0x10>)
 8001fae:	f002 f8f1 	bl	8004194 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20008e94 	.word	0x20008e94

08001fbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return 1;
 8001fc0:	2301      	movs	r3, #1
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <_kill>:

int _kill(int pid, int sig)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fd6:	4b05      	ldr	r3, [pc, #20]	; (8001fec <_kill+0x20>)
 8001fd8:	2216      	movs	r2, #22
 8001fda:	601a      	str	r2, [r3, #0]
  return -1;
 8001fdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	200111e8 	.word	0x200111e8

08001ff0 <_exit>:

void _exit (int status)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ffe5 	bl	8001fcc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002002:	e7fe      	b.n	8002002 <_exit+0x12>

08002004 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	e00a      	b.n	800202c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002016:	f3af 8000 	nop.w
 800201a:	4601      	mov	r1, r0
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	60ba      	str	r2, [r7, #8]
 8002022:	b2ca      	uxtb	r2, r1
 8002024:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	3301      	adds	r3, #1
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	429a      	cmp	r2, r3
 8002032:	dbf0      	blt.n	8002016 <_read+0x12>
  }

  return len;
 8002034:	687b      	ldr	r3, [r7, #4]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b086      	sub	sp, #24
 8002042:	af00      	add	r7, sp, #0
 8002044:	60f8      	str	r0, [r7, #12]
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	e009      	b.n	8002064 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	1c5a      	adds	r2, r3, #1
 8002054:	60ba      	str	r2, [r7, #8]
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fa11 	bl	8001480 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	3301      	adds	r3, #1
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	429a      	cmp	r2, r3
 800206a:	dbf1      	blt.n	8002050 <_write+0x12>
  }
  return len;
 800206c:	687b      	ldr	r3, [r7, #4]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <_close>:

int _close(int file)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800207e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800209e:	605a      	str	r2, [r3, #4]
  return 0;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <_isatty>:

int _isatty(int file)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020b6:	2301      	movs	r3, #1
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020e8:	4a14      	ldr	r2, [pc, #80]	; (800213c <_sbrk+0x5c>)
 80020ea:	4b15      	ldr	r3, [pc, #84]	; (8002140 <_sbrk+0x60>)
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <_sbrk+0x64>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d102      	bne.n	8002102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <_sbrk+0x64>)
 80020fe:	4a12      	ldr	r2, [pc, #72]	; (8002148 <_sbrk+0x68>)
 8002100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <_sbrk+0x64>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	429a      	cmp	r2, r3
 800210e:	d205      	bcs.n	800211c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002110:	4b0e      	ldr	r3, [pc, #56]	; (800214c <_sbrk+0x6c>)
 8002112:	220c      	movs	r2, #12
 8002114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002116:	f04f 33ff 	mov.w	r3, #4294967295
 800211a:	e009      	b.n	8002130 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <_sbrk+0x64>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002122:	4b08      	ldr	r3, [pc, #32]	; (8002144 <_sbrk+0x64>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	4a06      	ldr	r2, [pc, #24]	; (8002144 <_sbrk+0x64>)
 800212c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800212e:	68fb      	ldr	r3, [r7, #12]
}
 8002130:	4618      	mov	r0, r3
 8002132:	371c      	adds	r7, #28
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	20080000 	.word	0x20080000
 8002140:	00000400 	.word	0x00000400
 8002144:	20004488 	.word	0x20004488
 8002148:	20011200 	.word	0x20011200
 800214c:	200111e8 	.word	0x200111e8

08002150 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <SystemInit+0x20>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215a:	4a05      	ldr	r2, [pc, #20]	; (8002170 <SystemInit+0x20>)
 800215c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002178:	480d      	ldr	r0, [pc, #52]	; (80021b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800217a:	490e      	ldr	r1, [pc, #56]	; (80021b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800217c:	4a0e      	ldr	r2, [pc, #56]	; (80021b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002180:	e002      	b.n	8002188 <LoopCopyDataInit>

08002182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002186:	3304      	adds	r3, #4

08002188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800218c:	d3f9      	bcc.n	8002182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218e:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002190:	4c0b      	ldr	r4, [pc, #44]	; (80021c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002194:	e001      	b.n	800219a <LoopFillZerobss>

08002196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002198:	3204      	adds	r2, #4

0800219a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800219c:	d3fb      	bcc.n	8002196 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800219e:	f7ff ffd7 	bl	8002150 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021a2:	f019 fae5 	bl	801b770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021a6:	f7ff fa01 	bl	80015ac <main>
  bx  lr    
 80021aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021ac:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80021b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80021b8:	08020778 	.word	0x08020778
  ldr r2, =_sbss
 80021bc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80021c0:	200111fc 	.word	0x200111fc

080021c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c4:	e7fe      	b.n	80021c4 <ADC_IRQHandler>

080021c6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00b      	beq.n	80021ee <LAN8742_RegisterBusIO+0x28>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d007      	beq.n	80021ee <LAN8742_RegisterBusIO+0x28>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <LAN8742_RegisterBusIO+0x28>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d102      	bne.n	80021f4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295
 80021f2:	e014      	b.n	800221e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800222a:	b580      	push	{r7, lr}
 800222c:	b086      	sub	sp, #24
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	2300      	movs	r3, #0
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d17c      	bne.n	8002344 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d002      	beq.n	8002258 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2220      	movs	r2, #32
 800225c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	e01c      	b.n	800229e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	f107 0208 	add.w	r2, r7, #8
 800226c:	2112      	movs	r1, #18
 800226e:	6978      	ldr	r0, [r7, #20]
 8002270:	4798      	blx	r3
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	da03      	bge.n	8002280 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8002278:	f06f 0304 	mvn.w	r3, #4
 800227c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800227e:	e00b      	b.n	8002298 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f003 031f 	and.w	r3, r3, #31
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	429a      	cmp	r2, r3
 800228a:	d105      	bne.n	8002298 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
         break;
 8002296:	e005      	b.n	80022a4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	3301      	adds	r3, #1
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2b1f      	cmp	r3, #31
 80022a2:	d9df      	bls.n	8002264 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b1f      	cmp	r3, #31
 80022aa:	d902      	bls.n	80022b2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80022ac:	f06f 0302 	mvn.w	r3, #2
 80022b0:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d145      	bne.n	8002344 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6810      	ldr	r0, [r2, #0]
 80022c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80022c4:	2100      	movs	r1, #0
 80022c6:	4798      	blx	r3
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	db37      	blt.n	800233e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6810      	ldr	r0, [r2, #0]
 80022d6:	f107 0208 	add.w	r2, r7, #8
 80022da:	2100      	movs	r1, #0
 80022dc:	4798      	blx	r3
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	db28      	blt.n	8002336 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	4798      	blx	r3
 80022ea:	4603      	mov	r3, r0
 80022ec:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80022ee:	e01c      	b.n	800232a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	4798      	blx	r3
 80022f6:	4603      	mov	r3, r0
 80022f8:	461a      	mov	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002302:	d80e      	bhi.n	8002322 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6810      	ldr	r0, [r2, #0]
 800230c:	f107 0208 	add.w	r2, r7, #8
 8002310:	2100      	movs	r1, #0
 8002312:	4798      	blx	r3
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	da07      	bge.n	800232a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800231a:	f06f 0304 	mvn.w	r3, #4
 800231e:	613b      	str	r3, [r7, #16]
                 break;
 8002320:	e010      	b.n	8002344 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002322:	f06f 0301 	mvn.w	r3, #1
 8002326:	613b      	str	r3, [r7, #16]
               break;
 8002328:	e00c      	b.n	8002344 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1dd      	bne.n	80022f0 <LAN8742_Init+0xc6>
 8002334:	e006      	b.n	8002344 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002336:	f06f 0304 	mvn.w	r3, #4
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	e002      	b.n	8002344 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800233e:	f06f 0303 	mvn.w	r3, #3
 8002342:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d112      	bne.n	8002370 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	4798      	blx	r3
 8002350:	4603      	mov	r3, r0
 8002352:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002354:	bf00      	nop
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	4798      	blx	r3
 800235c:	4603      	mov	r3, r0
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002368:	d9f5      	bls.n	8002356 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002370:	693b      	ldr	r3, [r7, #16]
 }
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b084      	sub	sp, #16
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6810      	ldr	r0, [r2, #0]
 800238e:	f107 020c 	add.w	r2, r7, #12
 8002392:	2101      	movs	r1, #1
 8002394:	4798      	blx	r3
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	da02      	bge.n	80023a2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800239c:	f06f 0304 	mvn.w	r3, #4
 80023a0:	e06e      	b.n	8002480 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6810      	ldr	r0, [r2, #0]
 80023aa:	f107 020c 	add.w	r2, r7, #12
 80023ae:	2101      	movs	r1, #1
 80023b0:	4798      	blx	r3
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	da02      	bge.n	80023be <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80023b8:	f06f 0304 	mvn.w	r3, #4
 80023bc:	e060      	b.n	8002480 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80023c8:	2301      	movs	r3, #1
 80023ca:	e059      	b.n	8002480 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6810      	ldr	r0, [r2, #0]
 80023d4:	f107 020c 	add.w	r2, r7, #12
 80023d8:	2100      	movs	r1, #0
 80023da:	4798      	blx	r3
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	da02      	bge.n	80023e8 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80023e2:	f06f 0304 	mvn.w	r3, #4
 80023e6:	e04b      	b.n	8002480 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d11b      	bne.n	800242a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d006      	beq.n	800240a <LAN8742_GetLinkState+0x90>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002406:	2302      	movs	r3, #2
 8002408:	e03a      	b.n	8002480 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002414:	2303      	movs	r3, #3
 8002416:	e033      	b.n	8002480 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002422:	2304      	movs	r3, #4
 8002424:	e02c      	b.n	8002480 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002426:	2305      	movs	r3, #5
 8002428:	e02a      	b.n	8002480 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6810      	ldr	r0, [r2, #0]
 8002432:	f107 020c 	add.w	r2, r7, #12
 8002436:	211f      	movs	r1, #31
 8002438:	4798      	blx	r3
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	da02      	bge.n	8002446 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002440:	f06f 0304 	mvn.w	r3, #4
 8002444:	e01c      	b.n	8002480 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002450:	2306      	movs	r3, #6
 8002452:	e015      	b.n	8002480 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 031c 	and.w	r3, r3, #28
 800245a:	2b18      	cmp	r3, #24
 800245c:	d101      	bne.n	8002462 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800245e:	2302      	movs	r3, #2
 8002460:	e00e      	b.n	8002480 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f003 031c 	and.w	r3, r3, #28
 8002468:	2b08      	cmp	r3, #8
 800246a:	d101      	bne.n	8002470 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800246c:	2303      	movs	r3, #3
 800246e:	e007      	b.n	8002480 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 031c 	and.w	r3, r3, #28
 8002476:	2b14      	cmp	r3, #20
 8002478:	d101      	bne.n	800247e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800247a:	2304      	movs	r3, #4
 800247c:	e000      	b.n	8002480 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800247e:	2305      	movs	r3, #5
    }				
  }
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800248c:	2003      	movs	r0, #3
 800248e:	f000 ff56 	bl	800333e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002492:	200f      	movs	r0, #15
 8002494:	f7ff fcbc 	bl	8001e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002498:	f7ff fb22 	bl	8001ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024a8:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_IncTick+0x20>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_IncTick+0x24>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4413      	add	r3, r2
 80024b4:	4a04      	ldr	r2, [pc, #16]	; (80024c8 <HAL_IncTick+0x24>)
 80024b6:	6013      	str	r3, [r2, #0]
}
 80024b8:	bf00      	nop
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	20000008 	.word	0x20000008
 80024c8:	2000448c 	.word	0x2000448c

080024cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return uwTick;
 80024d0:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <HAL_GetTick+0x14>)
 80024d2:	681b      	ldr	r3, [r3, #0]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	2000448c 	.word	0x2000448c

080024e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024ec:	f7ff ffee 	bl	80024cc <HAL_GetTick>
 80024f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fc:	d005      	beq.n	800250a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024fe:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <HAL_Delay+0x44>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4413      	add	r3, r2
 8002508:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800250a:	bf00      	nop
 800250c:	f7ff ffde 	bl	80024cc <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	429a      	cmp	r2, r3
 800251a:	d8f7      	bhi.n	800250c <HAL_Delay+0x28>
  {
  }
}
 800251c:	bf00      	nop
 800251e:	bf00      	nop
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000008 	.word	0x20000008

0800252c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e0ed      	b.n	800271a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d102      	bne.n	8002550 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff faf0 	bl	8001b30 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0201 	orr.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002560:	f7ff ffb4 	bl	80024cc <HAL_GetTick>
 8002564:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002566:	e012      	b.n	800258e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002568:	f7ff ffb0 	bl	80024cc <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b0a      	cmp	r3, #10
 8002574:	d90b      	bls.n	800258e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2205      	movs	r2, #5
 8002586:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e0c5      	b.n	800271a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0e5      	beq.n	8002568 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0202 	bic.w	r2, r2, #2
 80025aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025ac:	f7ff ff8e 	bl	80024cc <HAL_GetTick>
 80025b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025b2:	e012      	b.n	80025da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025b4:	f7ff ff8a 	bl	80024cc <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b0a      	cmp	r3, #10
 80025c0:	d90b      	bls.n	80025da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2205      	movs	r2, #5
 80025d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e09f      	b.n	800271a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1e5      	bne.n	80025b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	7e1b      	ldrb	r3, [r3, #24]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d108      	bne.n	8002602 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	e007      	b.n	8002612 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002610:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	7e5b      	ldrb	r3, [r3, #25]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d108      	bne.n	800262c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	e007      	b.n	800263c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800263a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	7e9b      	ldrb	r3, [r3, #26]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d108      	bne.n	8002656 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0220 	orr.w	r2, r2, #32
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	e007      	b.n	8002666 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0220 	bic.w	r2, r2, #32
 8002664:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	7edb      	ldrb	r3, [r3, #27]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d108      	bne.n	8002680 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0210 	bic.w	r2, r2, #16
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	e007      	b.n	8002690 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0210 	orr.w	r2, r2, #16
 800268e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	7f1b      	ldrb	r3, [r3, #28]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d108      	bne.n	80026aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0208 	orr.w	r2, r2, #8
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	e007      	b.n	80026ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0208 	bic.w	r2, r2, #8
 80026b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	7f5b      	ldrb	r3, [r3, #29]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d108      	bne.n	80026d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f042 0204 	orr.w	r2, r2, #4
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	e007      	b.n	80026e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0204 	bic.w	r2, r2, #4
 80026e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	431a      	orrs	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	ea42 0103 	orr.w	r1, r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	1e5a      	subs	r2, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3020 	ldrb.w	r3, [r3, #32]
 800273a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800273c:	7cfb      	ldrb	r3, [r7, #19]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d003      	beq.n	800274a <HAL_CAN_ConfigFilter+0x26>
 8002742:	7cfb      	ldrb	r3, [r7, #19]
 8002744:	2b02      	cmp	r3, #2
 8002746:	f040 80c7 	bne.w	80028d8 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a69      	ldr	r2, [pc, #420]	; (80028f4 <HAL_CAN_ConfigFilter+0x1d0>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d001      	beq.n	8002758 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002754:	4b68      	ldr	r3, [pc, #416]	; (80028f8 <HAL_CAN_ConfigFilter+0x1d4>)
 8002756:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800275e:	f043 0201 	orr.w	r2, r3, #1
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	4a63      	ldr	r2, [pc, #396]	; (80028f8 <HAL_CAN_ConfigFilter+0x1d4>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d111      	bne.n	8002794 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002776:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	021b      	lsls	r3, r3, #8
 800278c:	431a      	orrs	r2, r3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	f003 031f 	and.w	r3, r3, #31
 800279c:	2201      	movs	r2, #1
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	401a      	ands	r2, r3
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d123      	bne.n	8002806 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	401a      	ands	r2, r3
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	3248      	adds	r2, #72	; 0x48
 80027e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027fc:	6979      	ldr	r1, [r7, #20]
 80027fe:	3348      	adds	r3, #72	; 0x48
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	440b      	add	r3, r1
 8002804:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d122      	bne.n	8002854 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	431a      	orrs	r2, r3
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800282e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	3248      	adds	r2, #72	; 0x48
 8002834:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002848:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800284a:	6979      	ldr	r1, [r7, #20]
 800284c:	3348      	adds	r3, #72	; 0x48
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	440b      	add	r3, r1
 8002852:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d109      	bne.n	8002870 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	43db      	mvns	r3, r3
 8002866:	401a      	ands	r2, r3
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800286e:	e007      	b.n	8002880 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	431a      	orrs	r2, r3
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d109      	bne.n	800289c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	43db      	mvns	r3, r3
 8002892:	401a      	ands	r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800289a:	e007      	b.n	80028ac <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	431a      	orrs	r2, r3
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d107      	bne.n	80028c4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	431a      	orrs	r2, r3
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028ca:	f023 0201 	bic.w	r2, r3, #1
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80028d4:	2300      	movs	r3, #0
 80028d6:	e006      	b.n	80028e6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
  }
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	371c      	adds	r7, #28
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40003400 	.word	0x40003400
 80028f8:	40006400 	.word	0x40006400

080028fc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3020 	ldrb.w	r3, [r3, #32]
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b01      	cmp	r3, #1
 800290e:	d12e      	bne.n	800296e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0201 	bic.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002928:	f7ff fdd0 	bl	80024cc <HAL_GetTick>
 800292c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800292e:	e012      	b.n	8002956 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002930:	f7ff fdcc 	bl	80024cc <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b0a      	cmp	r3, #10
 800293c:	d90b      	bls.n	8002956 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2205      	movs	r2, #5
 800294e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e012      	b.n	800297c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1e5      	bne.n	8002930 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	e006      	b.n	800297c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
  }
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002984:	b480      	push	{r7}
 8002986:	b089      	sub	sp, #36	; 0x24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
 8002990:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002998:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80029a2:	7ffb      	ldrb	r3, [r7, #31]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d003      	beq.n	80029b0 <HAL_CAN_AddTxMessage+0x2c>
 80029a8:	7ffb      	ldrb	r3, [r7, #31]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	f040 80ad 	bne.w	8002b0a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10a      	bne.n	80029d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d105      	bne.n	80029d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 8095 	beq.w	8002afa <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	0e1b      	lsrs	r3, r3, #24
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80029da:	2201      	movs	r2, #1
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	409a      	lsls	r2, r3
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10d      	bne.n	8002a08 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029f6:	68f9      	ldr	r1, [r7, #12]
 80029f8:	6809      	ldr	r1, [r1, #0]
 80029fa:	431a      	orrs	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	3318      	adds	r3, #24
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	440b      	add	r3, r1
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	e00f      	b.n	8002a28 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a12:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a18:	68f9      	ldr	r1, [r7, #12]
 8002a1a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002a1c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	3318      	adds	r3, #24
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	440b      	add	r3, r1
 8002a26:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6819      	ldr	r1, [r3, #0]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	3318      	adds	r3, #24
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	440b      	add	r3, r1
 8002a38:	3304      	adds	r3, #4
 8002a3a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	7d1b      	ldrb	r3, [r3, #20]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d111      	bne.n	8002a68 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	3318      	adds	r3, #24
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	4413      	add	r3, r2
 8002a50:	3304      	adds	r3, #4
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	6811      	ldr	r1, [r2, #0]
 8002a58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	3318      	adds	r3, #24
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	440b      	add	r3, r1
 8002a64:	3304      	adds	r3, #4
 8002a66:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3307      	adds	r3, #7
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	061a      	lsls	r2, r3, #24
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3306      	adds	r3, #6
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	041b      	lsls	r3, r3, #16
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3305      	adds	r3, #5
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	4313      	orrs	r3, r2
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	3204      	adds	r2, #4
 8002a88:	7812      	ldrb	r2, [r2, #0]
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	6811      	ldr	r1, [r2, #0]
 8002a90:	ea43 0200 	orr.w	r2, r3, r0
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	440b      	add	r3, r1
 8002a9a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002a9e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3303      	adds	r3, #3
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	061a      	lsls	r2, r3, #24
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3302      	adds	r3, #2
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	041b      	lsls	r3, r3, #16
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	021b      	lsls	r3, r3, #8
 8002aba:	4313      	orrs	r3, r2
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	7812      	ldrb	r2, [r2, #0]
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	6811      	ldr	r1, [r2, #0]
 8002ac6:	ea43 0200 	orr.w	r2, r3, r0
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	440b      	add	r3, r1
 8002ad0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002ad4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	3318      	adds	r3, #24
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	4413      	add	r3, r2
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	6811      	ldr	r1, [r2, #0]
 8002ae8:	f043 0201 	orr.w	r2, r3, #1
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	3318      	adds	r3, #24
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	440b      	add	r3, r1
 8002af4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002af6:	2300      	movs	r3, #0
 8002af8:	e00e      	b.n	8002b18 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e006      	b.n	8002b18 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
  }
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3724      	adds	r7, #36	; 0x24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b36:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002b38:	7afb      	ldrb	r3, [r7, #11]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d002      	beq.n	8002b44 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002b3e:	7afb      	ldrb	r3, [r7, #11]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d11d      	bne.n	8002b80 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	3301      	adds	r3, #1
 8002b56:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d002      	beq.n	8002b80 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002b80:	68fb      	ldr	r3, [r7, #12]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b087      	sub	sp, #28
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
 8002b9a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ba2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ba4:	7dfb      	ldrb	r3, [r7, #23]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d003      	beq.n	8002bb2 <HAL_CAN_GetRxMessage+0x24>
 8002baa:	7dfb      	ldrb	r3, [r7, #23]
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	f040 80f3 	bne.w	8002d98 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10e      	bne.n	8002bd6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d116      	bne.n	8002bf4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e0e7      	b.n	8002da6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d107      	bne.n	8002bf4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0d8      	b.n	8002da6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	331b      	adds	r3, #27
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	4413      	add	r3, r2
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0204 	and.w	r2, r3, #4
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10c      	bne.n	8002c2c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	331b      	adds	r3, #27
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	4413      	add	r3, r2
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	0d5b      	lsrs	r3, r3, #21
 8002c22:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	e00b      	b.n	8002c44 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	331b      	adds	r3, #27
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	4413      	add	r3, r2
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	08db      	lsrs	r3, r3, #3
 8002c3c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	331b      	adds	r3, #27
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	4413      	add	r3, r2
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0202 	and.w	r2, r3, #2
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	331b      	adds	r3, #27
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	4413      	add	r3, r2
 8002c66:	3304      	adds	r3, #4
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 020f 	and.w	r2, r3, #15
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	331b      	adds	r3, #27
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3304      	adds	r3, #4
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	0a1b      	lsrs	r3, r3, #8
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	331b      	adds	r3, #27
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	4413      	add	r3, r2
 8002c96:	3304      	adds	r3, #4
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	0c1b      	lsrs	r3, r3, #16
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	0a1a      	lsrs	r2, r3, #8
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	0c1a      	lsrs	r2, r3, #16
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	3302      	adds	r3, #2
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	0e1a      	lsrs	r2, r3, #24
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	3303      	adds	r3, #3
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	0a1a      	lsrs	r2, r3, #8
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	3305      	adds	r3, #5
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	0c1a      	lsrs	r2, r3, #16
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	3306      	adds	r3, #6
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	0e1a      	lsrs	r2, r3, #24
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	3307      	adds	r3, #7
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d108      	bne.n	8002d84 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f042 0220 	orr.w	r2, r2, #32
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	e007      	b.n	8002d94 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	691a      	ldr	r2, [r3, #16]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0220 	orr.w	r2, r2, #32
 8002d92:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	e006      	b.n	8002da6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
  }
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	371c      	adds	r7, #28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b085      	sub	sp, #20
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dc2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d002      	beq.n	8002dd0 <HAL_CAN_ActivateNotification+0x1e>
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d109      	bne.n	8002de4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6959      	ldr	r1, [r3, #20]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	e006      	b.n	8002df2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
  }
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b08a      	sub	sp, #40	; 0x28
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002e06:	2300      	movs	r3, #0
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d07c      	beq.n	8002f3e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d023      	beq.n	8002e96 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2201      	movs	r2, #1
 8002e54:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7fe fb21 	bl	80014a8 <HAL_CAN_TxMailbox0CompleteCallback>
 8002e66:	e016      	b.n	8002e96 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d004      	beq.n	8002e7c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7a:	e00c      	b.n	8002e96 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d004      	beq.n	8002e90 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8e:	e002      	b.n	8002e96 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7fe fb13 	bl	80014bc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d024      	beq.n	8002eea <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ea8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7fe fb0b 	bl	80014d0 <HAL_CAN_TxMailbox1CompleteCallback>
 8002eba:	e016      	b.n	8002eea <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d004      	beq.n	8002ed0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ece:	e00c      	b.n	8002eea <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d004      	beq.n	8002ee4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee2:	e002      	b.n	8002eea <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7fe fafd 	bl	80014e4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d024      	beq.n	8002f3e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002efc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7fe faf5 	bl	80014f8 <HAL_CAN_TxMailbox2CompleteCallback>
 8002f0e:	e016      	b.n	8002f3e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d004      	beq.n	8002f24 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
 8002f22:	e00c      	b.n	8002f3e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d004      	beq.n	8002f38 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
 8002f36:	e002      	b.n	8002f3e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7fe fae7 	bl	800150c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00c      	beq.n	8002f62 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	f003 0310 	and.w	r3, r3, #16
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d007      	beq.n	8002f62 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2210      	movs	r2, #16
 8002f60:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00b      	beq.n	8002f84 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d006      	beq.n	8002f84 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2208      	movs	r2, #8
 8002f7c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f8f4 	bl	800316c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d009      	beq.n	8002fa2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7fe fabf 	bl	8001520 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00c      	beq.n	8002fc6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f003 0310 	and.w	r3, r3, #16
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d007      	beq.n	8002fc6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2210      	movs	r2, #16
 8002fc4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	f003 0320 	and.w	r3, r3, #32
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00b      	beq.n	8002fe8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d006      	beq.n	8002fe8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2208      	movs	r2, #8
 8002fe0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f8d6 	bl	8003194 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d009      	beq.n	8003006 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f8bd 	bl	8003180 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00b      	beq.n	8003028 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	2b00      	cmp	r3, #0
 8003018:	d006      	beq.n	8003028 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2210      	movs	r2, #16
 8003020:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f8c0 	bl	80031a8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00b      	beq.n	800304a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b00      	cmp	r3, #0
 800303a:	d006      	beq.n	800304a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2208      	movs	r2, #8
 8003042:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f8b9 	bl	80031bc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d07b      	beq.n	800314c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b00      	cmp	r3, #0
 800305c:	d072      	beq.n	8003144 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	f043 0302 	orr.w	r3, r3, #2
 8003094:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800309c:	2b00      	cmp	r3, #0
 800309e:	d008      	beq.n	80030b2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	f043 0304 	orr.w	r3, r3, #4
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d043      	beq.n	8003144 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d03e      	beq.n	8003144 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030cc:	2b60      	cmp	r3, #96	; 0x60
 80030ce:	d02b      	beq.n	8003128 <HAL_CAN_IRQHandler+0x32a>
 80030d0:	2b60      	cmp	r3, #96	; 0x60
 80030d2:	d82e      	bhi.n	8003132 <HAL_CAN_IRQHandler+0x334>
 80030d4:	2b50      	cmp	r3, #80	; 0x50
 80030d6:	d022      	beq.n	800311e <HAL_CAN_IRQHandler+0x320>
 80030d8:	2b50      	cmp	r3, #80	; 0x50
 80030da:	d82a      	bhi.n	8003132 <HAL_CAN_IRQHandler+0x334>
 80030dc:	2b40      	cmp	r3, #64	; 0x40
 80030de:	d019      	beq.n	8003114 <HAL_CAN_IRQHandler+0x316>
 80030e0:	2b40      	cmp	r3, #64	; 0x40
 80030e2:	d826      	bhi.n	8003132 <HAL_CAN_IRQHandler+0x334>
 80030e4:	2b30      	cmp	r3, #48	; 0x30
 80030e6:	d010      	beq.n	800310a <HAL_CAN_IRQHandler+0x30c>
 80030e8:	2b30      	cmp	r3, #48	; 0x30
 80030ea:	d822      	bhi.n	8003132 <HAL_CAN_IRQHandler+0x334>
 80030ec:	2b10      	cmp	r3, #16
 80030ee:	d002      	beq.n	80030f6 <HAL_CAN_IRQHandler+0x2f8>
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	d005      	beq.n	8003100 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80030f4:	e01d      	b.n	8003132 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	f043 0308 	orr.w	r3, r3, #8
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030fe:	e019      	b.n	8003134 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	f043 0310 	orr.w	r3, r3, #16
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003108:	e014      	b.n	8003134 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	f043 0320 	orr.w	r3, r3, #32
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003112:	e00f      	b.n	8003134 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800311c:	e00a      	b.n	8003134 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003124:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003126:	e005      	b.n	8003134 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003130:	e000      	b.n	8003134 <HAL_CAN_IRQHandler+0x336>
            break;
 8003132:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699a      	ldr	r2, [r3, #24]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003142:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2204      	movs	r2, #4
 800314a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	2b00      	cmp	r3, #0
 8003150:	d008      	beq.n	8003164 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f836 	bl	80031d0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003164:	bf00      	nop
 8003166:	3728      	adds	r7, #40	; 0x28
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031f4:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <__NVIC_SetPriorityGrouping+0x40>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003200:	4013      	ands	r3, r2
 8003202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <__NVIC_SetPriorityGrouping+0x44>)
 800320e:	4313      	orrs	r3, r2
 8003210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003212:	4a04      	ldr	r2, [pc, #16]	; (8003224 <__NVIC_SetPriorityGrouping+0x40>)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	60d3      	str	r3, [r2, #12]
}
 8003218:	bf00      	nop
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	e000ed00 	.word	0xe000ed00
 8003228:	05fa0000 	.word	0x05fa0000

0800322c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003230:	4b04      	ldr	r3, [pc, #16]	; (8003244 <__NVIC_GetPriorityGrouping+0x18>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	0a1b      	lsrs	r3, r3, #8
 8003236:	f003 0307 	and.w	r3, r3, #7
}
 800323a:	4618      	mov	r0, r3
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	2b00      	cmp	r3, #0
 8003258:	db0b      	blt.n	8003272 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	f003 021f 	and.w	r2, r3, #31
 8003260:	4907      	ldr	r1, [pc, #28]	; (8003280 <__NVIC_EnableIRQ+0x38>)
 8003262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	2001      	movs	r0, #1
 800326a:	fa00 f202 	lsl.w	r2, r0, r2
 800326e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	e000e100 	.word	0xe000e100

08003284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	6039      	str	r1, [r7, #0]
 800328e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003294:	2b00      	cmp	r3, #0
 8003296:	db0a      	blt.n	80032ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	b2da      	uxtb	r2, r3
 800329c:	490c      	ldr	r1, [pc, #48]	; (80032d0 <__NVIC_SetPriority+0x4c>)
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	0112      	lsls	r2, r2, #4
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	440b      	add	r3, r1
 80032a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032ac:	e00a      	b.n	80032c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	4908      	ldr	r1, [pc, #32]	; (80032d4 <__NVIC_SetPriority+0x50>)
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	3b04      	subs	r3, #4
 80032bc:	0112      	lsls	r2, r2, #4
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	440b      	add	r3, r1
 80032c2:	761a      	strb	r2, [r3, #24]
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	e000e100 	.word	0xe000e100
 80032d4:	e000ed00 	.word	0xe000ed00

080032d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d8:	b480      	push	{r7}
 80032da:	b089      	sub	sp, #36	; 0x24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f1c3 0307 	rsb	r3, r3, #7
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	bf28      	it	cs
 80032f6:	2304      	movcs	r3, #4
 80032f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3304      	adds	r3, #4
 80032fe:	2b06      	cmp	r3, #6
 8003300:	d902      	bls.n	8003308 <NVIC_EncodePriority+0x30>
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	3b03      	subs	r3, #3
 8003306:	e000      	b.n	800330a <NVIC_EncodePriority+0x32>
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800330c:	f04f 32ff 	mov.w	r2, #4294967295
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43da      	mvns	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	401a      	ands	r2, r3
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003320:	f04f 31ff 	mov.w	r1, #4294967295
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	fa01 f303 	lsl.w	r3, r1, r3
 800332a:	43d9      	mvns	r1, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003330:	4313      	orrs	r3, r2
         );
}
 8003332:	4618      	mov	r0, r3
 8003334:	3724      	adds	r7, #36	; 0x24
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b082      	sub	sp, #8
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff ff4c 	bl	80031e4 <__NVIC_SetPriorityGrouping>
}
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003366:	f7ff ff61 	bl	800322c <__NVIC_GetPriorityGrouping>
 800336a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	68b9      	ldr	r1, [r7, #8]
 8003370:	6978      	ldr	r0, [r7, #20]
 8003372:	f7ff ffb1 	bl	80032d8 <NVIC_EncodePriority>
 8003376:	4602      	mov	r2, r0
 8003378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337c:	4611      	mov	r1, r2
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff ff80 	bl	8003284 <__NVIC_SetPriority>
}
 8003384:	bf00      	nop
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff ff54 	bl	8003248 <__NVIC_EnableIRQ>
}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033b4:	f7ff f88a 	bl	80024cc <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e099      	b.n	80034f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0201 	bic.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033e4:	e00f      	b.n	8003406 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033e6:	f7ff f871 	bl	80024cc <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b05      	cmp	r3, #5
 80033f2:	d908      	bls.n	8003406 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2220      	movs	r2, #32
 80033f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2203      	movs	r2, #3
 80033fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e078      	b.n	80034f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1e8      	bne.n	80033e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	4b38      	ldr	r3, [pc, #224]	; (8003500 <HAL_DMA_Init+0x158>)
 8003420:	4013      	ands	r3, r2
 8003422:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003432:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800343e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800344a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	4313      	orrs	r3, r2
 8003456:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	2b04      	cmp	r3, #4
 800345e:	d107      	bne.n	8003470 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	4313      	orrs	r3, r2
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4313      	orrs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f023 0307 	bic.w	r3, r3, #7
 8003486:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	4313      	orrs	r3, r2
 8003490:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	2b04      	cmp	r3, #4
 8003498:	d117      	bne.n	80034ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00e      	beq.n	80034ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fa7b 	bl	80039a8 <DMA_CheckFifoParam>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d008      	beq.n	80034ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2240      	movs	r2, #64	; 0x40
 80034bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80034c6:	2301      	movs	r3, #1
 80034c8:	e016      	b.n	80034f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 fa32 	bl	800393c <DMA_CalcBaseAndBitshift>
 80034d8:	4603      	mov	r3, r0
 80034da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e0:	223f      	movs	r2, #63	; 0x3f
 80034e2:	409a      	lsls	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	e010803f 	.word	0xe010803f

08003504 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003510:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003512:	f7fe ffdb 	bl	80024cc <HAL_GetTick>
 8003516:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d008      	beq.n	8003536 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2280      	movs	r2, #128	; 0x80
 8003528:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e052      	b.n	80035dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0216 	bic.w	r2, r2, #22
 8003544:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003554:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	d103      	bne.n	8003566 <HAL_DMA_Abort+0x62>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003562:	2b00      	cmp	r3, #0
 8003564:	d007      	beq.n	8003576 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0208 	bic.w	r2, r2, #8
 8003574:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0201 	bic.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003586:	e013      	b.n	80035b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003588:	f7fe ffa0 	bl	80024cc <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b05      	cmp	r3, #5
 8003594:	d90c      	bls.n	80035b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2220      	movs	r2, #32
 800359a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2203      	movs	r2, #3
 80035a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e015      	b.n	80035dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1e4      	bne.n	8003588 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c2:	223f      	movs	r2, #63	; 0x3f
 80035c4:	409a      	lsls	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d004      	beq.n	8003602 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2280      	movs	r2, #128	; 0x80
 80035fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e00c      	b.n	800361c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2205      	movs	r2, #5
 8003606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0201 	bic.w	r2, r2, #1
 8003618:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003630:	2300      	movs	r3, #0
 8003632:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003634:	4b8e      	ldr	r3, [pc, #568]	; (8003870 <HAL_DMA_IRQHandler+0x248>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a8e      	ldr	r2, [pc, #568]	; (8003874 <HAL_DMA_IRQHandler+0x24c>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	0a9b      	lsrs	r3, r3, #10
 8003640:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003646:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003652:	2208      	movs	r2, #8
 8003654:	409a      	lsls	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4013      	ands	r3, r2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d01a      	beq.n	8003694 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d013      	beq.n	8003694 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0204 	bic.w	r2, r2, #4
 800367a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003680:	2208      	movs	r2, #8
 8003682:	409a      	lsls	r2, r3
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368c:	f043 0201 	orr.w	r2, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003698:	2201      	movs	r2, #1
 800369a:	409a      	lsls	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d012      	beq.n	80036ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00b      	beq.n	80036ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b6:	2201      	movs	r2, #1
 80036b8:	409a      	lsls	r2, r3
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c2:	f043 0202 	orr.w	r2, r3, #2
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ce:	2204      	movs	r2, #4
 80036d0:	409a      	lsls	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d012      	beq.n	8003700 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00b      	beq.n	8003700 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ec:	2204      	movs	r2, #4
 80036ee:	409a      	lsls	r2, r3
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f8:	f043 0204 	orr.w	r2, r3, #4
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003704:	2210      	movs	r2, #16
 8003706:	409a      	lsls	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4013      	ands	r3, r2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d043      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d03c      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003722:	2210      	movs	r2, #16
 8003724:	409a      	lsls	r2, r3
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d018      	beq.n	800376a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d108      	bne.n	8003758 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	2b00      	cmp	r3, #0
 800374c:	d024      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	4798      	blx	r3
 8003756:	e01f      	b.n	8003798 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01b      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	4798      	blx	r3
 8003768:	e016      	b.n	8003798 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003774:	2b00      	cmp	r3, #0
 8003776:	d107      	bne.n	8003788 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0208 	bic.w	r2, r2, #8
 8003786:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379c:	2220      	movs	r2, #32
 800379e:	409a      	lsls	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 808f 	beq.w	80038c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0310 	and.w	r3, r3, #16
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 8087 	beq.w	80038c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037be:	2220      	movs	r2, #32
 80037c0:	409a      	lsls	r2, r3
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b05      	cmp	r3, #5
 80037d0:	d136      	bne.n	8003840 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0216 	bic.w	r2, r2, #22
 80037e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	695a      	ldr	r2, [r3, #20]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d103      	bne.n	8003802 <HAL_DMA_IRQHandler+0x1da>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d007      	beq.n	8003812 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0208 	bic.w	r2, r2, #8
 8003810:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003816:	223f      	movs	r2, #63	; 0x3f
 8003818:	409a      	lsls	r2, r3
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003832:	2b00      	cmp	r3, #0
 8003834:	d07e      	beq.n	8003934 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	4798      	blx	r3
        }
        return;
 800383e:	e079      	b.n	8003934 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d01d      	beq.n	800388a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10d      	bne.n	8003878 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003860:	2b00      	cmp	r3, #0
 8003862:	d031      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	4798      	blx	r3
 800386c:	e02c      	b.n	80038c8 <HAL_DMA_IRQHandler+0x2a0>
 800386e:	bf00      	nop
 8003870:	20000000 	.word	0x20000000
 8003874:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387c:	2b00      	cmp	r3, #0
 800387e:	d023      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4798      	blx	r3
 8003888:	e01e      	b.n	80038c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10f      	bne.n	80038b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0210 	bic.w	r2, r2, #16
 80038a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d032      	beq.n	8003936 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d022      	beq.n	8003922 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2205      	movs	r2, #5
 80038e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0201 	bic.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	3301      	adds	r3, #1
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d307      	bcc.n	8003910 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f2      	bne.n	80038f4 <HAL_DMA_IRQHandler+0x2cc>
 800390e:	e000      	b.n	8003912 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003910:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003926:	2b00      	cmp	r3, #0
 8003928:	d005      	beq.n	8003936 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	4798      	blx	r3
 8003932:	e000      	b.n	8003936 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003934:	bf00      	nop
    }
  }
}
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	b2db      	uxtb	r3, r3
 800394a:	3b10      	subs	r3, #16
 800394c:	4a13      	ldr	r2, [pc, #76]	; (800399c <DMA_CalcBaseAndBitshift+0x60>)
 800394e:	fba2 2303 	umull	r2, r3, r2, r3
 8003952:	091b      	lsrs	r3, r3, #4
 8003954:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003956:	4a12      	ldr	r2, [pc, #72]	; (80039a0 <DMA_CalcBaseAndBitshift+0x64>)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4413      	add	r3, r2
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2b03      	cmp	r3, #3
 8003968:	d908      	bls.n	800397c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <DMA_CalcBaseAndBitshift+0x68>)
 8003972:	4013      	ands	r3, r2
 8003974:	1d1a      	adds	r2, r3, #4
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	659a      	str	r2, [r3, #88]	; 0x58
 800397a:	e006      	b.n	800398a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	461a      	mov	r2, r3
 8003982:	4b08      	ldr	r3, [pc, #32]	; (80039a4 <DMA_CalcBaseAndBitshift+0x68>)
 8003984:	4013      	ands	r3, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800398e:	4618      	mov	r0, r3
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	aaaaaaab 	.word	0xaaaaaaab
 80039a0:	080204a0 	.word	0x080204a0
 80039a4:	fffffc00 	.word	0xfffffc00

080039a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039b0:	2300      	movs	r3, #0
 80039b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d11f      	bne.n	8003a02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d856      	bhi.n	8003a76 <DMA_CheckFifoParam+0xce>
 80039c8:	a201      	add	r2, pc, #4	; (adr r2, 80039d0 <DMA_CheckFifoParam+0x28>)
 80039ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ce:	bf00      	nop
 80039d0:	080039e1 	.word	0x080039e1
 80039d4:	080039f3 	.word	0x080039f3
 80039d8:	080039e1 	.word	0x080039e1
 80039dc:	08003a77 	.word	0x08003a77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d046      	beq.n	8003a7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039f0:	e043      	b.n	8003a7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039fa:	d140      	bne.n	8003a7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a00:	e03d      	b.n	8003a7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a0a:	d121      	bne.n	8003a50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	d837      	bhi.n	8003a82 <DMA_CheckFifoParam+0xda>
 8003a12:	a201      	add	r2, pc, #4	; (adr r2, 8003a18 <DMA_CheckFifoParam+0x70>)
 8003a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a18:	08003a29 	.word	0x08003a29
 8003a1c:	08003a2f 	.word	0x08003a2f
 8003a20:	08003a29 	.word	0x08003a29
 8003a24:	08003a41 	.word	0x08003a41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a2c:	e030      	b.n	8003a90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d025      	beq.n	8003a86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a3e:	e022      	b.n	8003a86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a48:	d11f      	bne.n	8003a8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a4e:	e01c      	b.n	8003a8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d903      	bls.n	8003a5e <DMA_CheckFifoParam+0xb6>
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2b03      	cmp	r3, #3
 8003a5a:	d003      	beq.n	8003a64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a5c:	e018      	b.n	8003a90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]
      break;
 8003a62:	e015      	b.n	8003a90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00e      	beq.n	8003a8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	73fb      	strb	r3, [r7, #15]
      break;
 8003a74:	e00b      	b.n	8003a8e <DMA_CheckFifoParam+0xe6>
      break;
 8003a76:	bf00      	nop
 8003a78:	e00a      	b.n	8003a90 <DMA_CheckFifoParam+0xe8>
      break;
 8003a7a:	bf00      	nop
 8003a7c:	e008      	b.n	8003a90 <DMA_CheckFifoParam+0xe8>
      break;
 8003a7e:	bf00      	nop
 8003a80:	e006      	b.n	8003a90 <DMA_CheckFifoParam+0xe8>
      break;
 8003a82:	bf00      	nop
 8003a84:	e004      	b.n	8003a90 <DMA_CheckFifoParam+0xe8>
      break;
 8003a86:	bf00      	nop
 8003a88:	e002      	b.n	8003a90 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a8a:	bf00      	nop
 8003a8c:	e000      	b.n	8003a90 <DMA_CheckFifoParam+0xe8>
      break;
 8003a8e:	bf00      	nop
    }
  } 
  
  return status; 
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop

08003aa0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e06a      	b.n	8003b88 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d106      	bne.n	8003aca <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2223      	movs	r2, #35	; 0x23
 8003ac0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f005 f987 	bl	8008dd8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aca:	4b31      	ldr	r3, [pc, #196]	; (8003b90 <HAL_ETH_Init+0xf0>)
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	4a30      	ldr	r2, [pc, #192]	; (8003b90 <HAL_ETH_Init+0xf0>)
 8003ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ad6:	4b2e      	ldr	r3, [pc, #184]	; (8003b90 <HAL_ETH_Init+0xf0>)
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ade:	60bb      	str	r3, [r7, #8]
 8003ae0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003ae2:	4b2c      	ldr	r3, [pc, #176]	; (8003b94 <HAL_ETH_Init+0xf4>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	4a2b      	ldr	r2, [pc, #172]	; (8003b94 <HAL_ETH_Init+0xf4>)
 8003ae8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003aec:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003aee:	4b29      	ldr	r3, [pc, #164]	; (8003b94 <HAL_ETH_Init+0xf4>)
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	4927      	ldr	r1, [pc, #156]	; (8003b94 <HAL_ETH_Init+0xf4>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003afc:	4b25      	ldr	r3, [pc, #148]	; (8003b94 <HAL_ETH_Init+0xf4>)
 8003afe:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6812      	ldr	r2, [r2, #0]
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b18:	f7fe fcd8 	bl	80024cc <HAL_GetTick>
 8003b1c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003b1e:	e011      	b.n	8003b44 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003b20:	f7fe fcd4 	bl	80024cc <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003b2e:	d909      	bls.n	8003b44 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2204      	movs	r2, #4
 8003b34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	22e0      	movs	r2, #224	; 0xe0
 8003b3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e021      	b.n	8003b88 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1e4      	bne.n	8003b20 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 ff4c 	bl	80049f4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fff3 	bl	8004b48 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f001 f849 	bl	8004bfa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	2100      	movs	r1, #0
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 ffb1 	bl	8004ad8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2210      	movs	r2, #16
 8003b82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40023800 	.word	0x40023800
 8003b94:	40013800 	.word	0x40013800

08003b98 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ba6:	2b10      	cmp	r3, #16
 8003ba8:	d17b      	bne.n	8003ca2 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2223      	movs	r2, #35	; 0x23
 8003bae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8003bc6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	4b35      	ldr	r3, [pc, #212]	; (8003cac <HAL_ETH_Start_IT+0x114>)
 8003bd6:	430b      	orrs	r3, r1
 8003bd8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8003bec:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2204      	movs	r2, #4
 8003bf4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f9fc 	bl	8003ff4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0208 	orr.w	r2, r2, #8
 8003c0a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c14:	2001      	movs	r0, #1
 8003c16:	f7fe fc65 	bl	80024e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f042 0204 	orr.w	r2, r2, #4
 8003c30:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c3a:	2001      	movs	r0, #1
 8003c3c:	f7fe fc52 	bl	80024e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 fd74 	bl	8004736 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6812      	ldr	r2, [r2, #0]
 8003c5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c64:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	f043 0302 	orr.w	r3, r3, #2
 8003c78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c7c:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c86:	69d9      	ldr	r1, [r3, #28]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <HAL_ETH_Start_IT+0x118>)
 8003c8e:	430b      	orrs	r3, r1
 8003c90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c94:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2223      	movs	r2, #35	; 0x23
 8003c9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	e000      	b.n	8003ca4 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
  }
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	00020060 	.word	0x00020060
 8003cb0:	0001a0c1 	.word	0x0001a0c1

08003cb4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cc2:	2b23      	cmp	r3, #35	; 0x23
 8003cc4:	d16e      	bne.n	8003da4 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2223      	movs	r2, #35	; 0x23
 8003cca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cd6:	69d9      	ldr	r1, [r3, #28]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	4b34      	ldr	r3, [pc, #208]	; (8003db0 <HAL_ETH_Stop_IT+0xfc>)
 8003cde:	400b      	ands	r3, r1
 8003ce0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ce4:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6812      	ldr	r2, [r2, #0]
 8003cf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cf8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003cfc:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6812      	ldr	r2, [r2, #0]
 8003d0c:	f023 0302 	bic.w	r3, r3, #2
 8003d10:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d14:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0204 	bic.w	r2, r2, #4
 8003d24:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d2e:	2001      	movs	r0, #1
 8003d30:	f7fe fbd8 	bl	80024e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 fcfa 	bl	8004736 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0208 	bic.w	r2, r2, #8
 8003d50:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d5a:	2001      	movs	r0, #1
 8003d5c:	f7fe fbc2 	bl	80024e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	e00e      	b.n	8003d8c <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	3212      	adds	r2, #18
 8003d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d78:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	2b03      	cmp	r3, #3
 8003d90:	d9ed      	bls.n	8003d6e <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2210      	movs	r2, #16
 8003d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8003da0:	2300      	movs	r3, #0
 8003da2:	e000      	b.n	8003da6 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
  }
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	fffe5f3e 	.word	0xfffe5f3e

08003db4 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d109      	bne.n	8003dd8 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dca:	f043 0201 	orr.w	r2, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e045      	b.n	8003e64 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dde:	2b23      	cmp	r3, #35	; 0x23
 8003de0:	d13f      	bne.n	8003e62 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003dea:	2201      	movs	r2, #1
 8003dec:	6839      	ldr	r1, [r7, #0]
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 ff70 	bl	8004cd4 <ETH_Prepare_Tx_Descriptors>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d009      	beq.n	8003e0e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e00:	f043 0202 	orr.w	r2, r3, #2
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e02a      	b.n	8003e64 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003e0e:	f3bf 8f4f 	dsb	sy
}
 8003e12:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	629a      	str	r2, [r3, #40]	; 0x28
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d904      	bls.n	8003e30 <HAL_ETH_Transmit_IT+0x7c>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2a:	1f1a      	subs	r2, r3, #4
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00d      	beq.n	8003e5e <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	2304      	movs	r3, #4
 8003e4e:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e58:	461a      	mov	r2, r3
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e000      	b.n	8003e64 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
  }
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3708      	adds	r7, #8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d109      	bne.n	8003e98 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8a:	f043 0201 	orr.w	r2, r3, #1
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e0a8      	b.n	8003fea <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e9e:	2b23      	cmp	r3, #35	; 0x23
 8003ea0:	d001      	beq.n	8003ea6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e0a1      	b.n	8003fea <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eaa:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	3212      	adds	r2, #18
 8003eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ebc:	f1c3 0304 	rsb	r3, r3, #4
 8003ec0:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003ec2:	e06a      	b.n	8003f9a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d007      	beq.n	8003ee0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	699a      	ldr	r2, [r3, #24]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	69da      	ldr	r2, [r3, #28]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d103      	bne.n	8003ef4 <HAL_ETH_ReadData+0x88>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d040      	beq.n	8003f76 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d005      	beq.n	8003f0c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00c      	beq.n	8003f38 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	0c1b      	lsrs	r3, r3, #16
 8003f24:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003f28:	3b04      	subs	r3, #4
 8003f2a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8003f34:	2301      	movs	r3, #1
 8003f36:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003f50:	461a      	mov	r2, r3
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	f005 f90b 	bl	8009170 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	441a      	add	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	2200      	movs	r2, #0
 8003f74:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	61fb      	str	r3, [r7, #28]
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	d902      	bls.n	8003f88 <HAL_ETH_ReadData+0x11c>
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	3b04      	subs	r3, #4
 8003f86:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	69fa      	ldr	r2, [r7, #28]
 8003f8c:	3212      	adds	r2, #18
 8003f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f92:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	3301      	adds	r3, #1
 8003f98:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	db06      	blt.n	8003fb0 <HAL_ETH_ReadData+0x144>
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d202      	bcs.n	8003fb0 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d089      	beq.n	8003ec4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	441a      	add	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f815 	bl	8003ff4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69fa      	ldr	r2, [r7, #28]
 8003fce:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d108      	bne.n	8003fe8 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	e000      	b.n	8003fea <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3720      	adds	r7, #32
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8004000:	2301      	movs	r3, #1
 8004002:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004008:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	3212      	adds	r2, #18
 8004010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004014:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800401a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800401c:	e040      	b.n	80040a0 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d112      	bne.n	800404c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004026:	f107 030c 	add.w	r3, r7, #12
 800402a:	4618      	mov	r0, r3
 800402c:	f005 f870 	bl	8009110 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d102      	bne.n	800403c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004036:	2300      	movs	r3, #0
 8004038:	74fb      	strb	r3, [r7, #19]
 800403a:	e007      	b.n	800404c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	461a      	mov	r2, r3
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	461a      	mov	r2, r3
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800404c:	7cfb      	ldrb	r3, [r7, #19]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d026      	beq.n	80040a0 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004056:	2b00      	cmp	r3, #0
 8004058:	d103      	bne.n	8004062 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	4a1e      	ldr	r2, [pc, #120]	; (80040d8 <ETH_UpdateDescriptor+0xe4>)
 800405e:	605a      	str	r2, [r3, #4]
 8004060:	e003      	b.n	800406a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8004068:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800406a:	f3bf 8f5f 	dmb	sy
}
 800406e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	3301      	adds	r3, #1
 8004080:	61fb      	str	r3, [r7, #28]
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	2b03      	cmp	r3, #3
 8004086:	d902      	bls.n	800408e <ETH_UpdateDescriptor+0x9a>
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	3b04      	subs	r3, #4
 800408c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69fa      	ldr	r2, [r7, #28]
 8004092:	3212      	adds	r2, #18
 8004094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004098:	617b      	str	r3, [r7, #20]
      desccount--;
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	3b01      	subs	r3, #1
 800409e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <ETH_UpdateDescriptor+0xb8>
 80040a6:	7cfb      	ldrb	r3, [r7, #19]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1b8      	bne.n	800401e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d00c      	beq.n	80040d0 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040be:	461a      	mov	r2, r3
 80040c0:	2300      	movs	r3, #0
 80040c2:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	69fa      	ldr	r2, [r7, #28]
 80040c8:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80040d0:	bf00      	nop
 80040d2:	3720      	adds	r7, #32
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	80004600 	.word	0x80004600

080040dc <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3318      	adds	r3, #24
 80040e8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ee:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80040f6:	2301      	movs	r3, #1
 80040f8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80040fa:	e03f      	b.n	800417c <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80040fc:	2301      	movs	r3, #1
 80040fe:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	3b01      	subs	r3, #1
 8004104:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	3304      	adds	r3, #4
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	3301      	adds	r3, #1
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004120:	2300      	movs	r3, #0
 8004122:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004124:	7bbb      	ldrb	r3, [r7, #14]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d028      	beq.n	800417c <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68d9      	ldr	r1, [r3, #12]
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	440b      	add	r3, r1
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	db1b      	blt.n	8004178 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	3304      	adds	r3, #4
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	4618      	mov	r0, r3
 800414e:	f005 f851 	bl	80091f4 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	3304      	adds	r3, #4
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	2200      	movs	r2, #0
 800415e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	3301      	adds	r3, #1
 8004164:	f003 0303 	and.w	r3, r3, #3
 8004168:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	62da      	str	r2, [r3, #44]	; 0x2c
 8004176:	e001      	b.n	800417c <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <HAL_ETH_ReleaseTxPacket+0xac>
 8004182:	7bfb      	ldrb	r3, [r7, #15]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1b9      	bne.n	80040fc <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041aa:	2b40      	cmp	r3, #64	; 0x40
 80041ac:	d112      	bne.n	80041d4 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041bc:	2b40      	cmp	r3, #64	; 0x40
 80041be:	d109      	bne.n	80041d4 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041c8:	461a      	mov	r2, r3
 80041ca:	4b50      	ldr	r3, [pc, #320]	; (800430c <HAL_ETH_IRQHandler+0x178>)
 80041cc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f004 fb64 	bl	800889c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d113      	bne.n	800420e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d10a      	bne.n	800420e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004200:	461a      	mov	r2, r3
 8004202:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8004206:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f004 fb57 	bl	80088bc <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800421c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004220:	d14c      	bne.n	80042bc <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004234:	d142      	bne.n	80042bc <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423c:	f043 0208 	orr.w	r2, r3, #8
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004258:	d11a      	bne.n	8004290 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004262:	695a      	ldr	r2, [r3, #20]
 8004264:	4b2a      	ldr	r3, [pc, #168]	; (8004310 <HAL_ETH_IRQHandler+0x17c>)
 8004266:	4013      	ands	r3, r2
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6812      	ldr	r2, [r2, #0]
 800427c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8004280:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004284:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	22e0      	movs	r2, #224	; 0xe0
 800428a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800428e:	e012      	b.n	80042b6 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004298:	695a      	ldr	r2, [r3, #20]
 800429a:	f248 6380 	movw	r3, #34432	; 0x8680
 800429e:	4013      	ands	r3, r2
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ae:	461a      	mov	r2, r3
 80042b0:	f248 6380 	movw	r3, #34432	; 0x8680
 80042b4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f004 fb10 	bl	80088dc <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c2:	f003 0308 	and.w	r3, r3, #8
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	d10e      	bne.n	80042e8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f81c 	bl	8004318 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80042e8:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <HAL_ETH_IRQHandler+0x180>)
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d006      	beq.n	8004302 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80042f4:	4b07      	ldr	r3, [pc, #28]	; (8004314 <HAL_ETH_IRQHandler+0x180>)
 80042f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80042fa:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f815 	bl	800432c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004302:	bf00      	nop
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	00010040 	.word	0x00010040
 8004310:	007e2000 	.word	0x007e2000
 8004314:	40013c00 	.word	0x40013c00

08004318 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
 800434c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f003 031c 	and.w	r3, r3, #28
 800435c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	02db      	lsls	r3, r3, #11
 8004362:	b29b      	uxth	r3, r3
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	4313      	orrs	r3, r2
 8004368:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	019b      	lsls	r3, r3, #6
 800436e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	4313      	orrs	r3, r2
 8004376:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f023 0302 	bic.w	r3, r3, #2
 800437e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004390:	f7fe f89c 	bl	80024cc <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004396:	e00d      	b.n	80043b4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004398:	f7fe f898 	bl	80024cc <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a6:	d301      	bcc.n	80043ac <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e010      	b.n	80043ce <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1ec      	bne.n	8004398 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	461a      	mov	r2, r3
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3718      	adds	r7, #24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b086      	sub	sp, #24
 80043da:	af00      	add	r7, sp, #0
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	607a      	str	r2, [r7, #4]
 80043e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f003 031c 	and.w	r3, r3, #28
 80043f2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	02db      	lsls	r3, r3, #11
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	019b      	lsls	r3, r3, #6
 8004404:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	4313      	orrs	r3, r2
 800440c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f043 0302 	orr.w	r3, r3, #2
 8004414:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f043 0301 	orr.w	r3, r3, #1
 800441c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004430:	f7fe f84c 	bl	80024cc <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004436:	e00d      	b.n	8004454 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004438:	f7fe f848 	bl	80024cc <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004446:	d301      	bcc.n	800444c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e009      	b.n	8004460 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1ec      	bne.n	8004438 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e0d9      	b.n	8004630 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0310 	and.w	r3, r3, #16
 8004486:	2b00      	cmp	r3, #0
 8004488:	bf14      	ite	ne
 800448a:	2301      	movne	r3, #1
 800448c:	2300      	moveq	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	bf0c      	ite	eq
 80044b4:	2301      	moveq	r3, #1
 80044b6:	2300      	movne	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	461a      	mov	r2, r3
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	bf14      	ite	ne
 80044d0:	2301      	movne	r3, #1
 80044d2:	2300      	moveq	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	bf0c      	ite	eq
 80044ea:	2301      	moveq	r3, #1
 80044ec:	2300      	movne	r3, #0
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	461a      	mov	r2, r3
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004500:	2b00      	cmp	r3, #0
 8004502:	bf14      	ite	ne
 8004504:	2301      	movne	r3, #1
 8004506:	2300      	moveq	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	461a      	mov	r2, r3
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004536:	2b00      	cmp	r3, #0
 8004538:	bf0c      	ite	eq
 800453a:	2301      	moveq	r3, #1
 800453c:	2300      	movne	r3, #0
 800453e:	b2db      	uxtb	r3, r3
 8004540:	461a      	mov	r2, r3
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004550:	2b00      	cmp	r3, #0
 8004552:	bf0c      	ite	eq
 8004554:	2301      	moveq	r3, #1
 8004556:	2300      	movne	r3, #0
 8004558:	b2db      	uxtb	r3, r3
 800455a:	461a      	mov	r2, r3
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800456a:	2b00      	cmp	r3, #0
 800456c:	bf14      	ite	ne
 800456e:	2301      	movne	r3, #1
 8004570:	2300      	moveq	r3, #0
 8004572:	b2db      	uxtb	r3, r3
 8004574:	461a      	mov	r2, r3
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004592:	2b00      	cmp	r3, #0
 8004594:	bf14      	ite	ne
 8004596:	2301      	movne	r3, #1
 8004598:	2300      	moveq	r3, #0
 800459a:	b2db      	uxtb	r3, r3
 800459c:	461a      	mov	r2, r3
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	bf14      	ite	ne
 80045b0:	2301      	movne	r3, #1
 80045b2:	2300      	moveq	r3, #0
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	461a      	mov	r2, r3
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bf0c      	ite	eq
 80045cc:	2301      	moveq	r3, #1
 80045ce:	2300      	movne	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	461a      	mov	r2, r3
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	0c1b      	lsrs	r3, r3, #16
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	bf14      	ite	ne
 8004604:	2301      	movne	r3, #1
 8004606:	2300      	moveq	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	461a      	mov	r2, r3
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800461c:	2b00      	cmp	r3, #0
 800461e:	bf14      	ite	ne
 8004620:	2301      	movne	r3, #1
 8004622:	2300      	moveq	r3, #0
 8004624:	b2db      	uxtb	r3, r3
 8004626:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e00b      	b.n	8004668 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004656:	2b10      	cmp	r3, #16
 8004658:	d105      	bne.n	8004666 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800465a:	6839      	ldr	r1, [r7, #0]
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f88f 	bl	8004780 <ETH_SetMACConfig>

    return HAL_OK;
 8004662:	2300      	movs	r3, #0
 8004664:	e000      	b.n	8004668 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
  }
}
 8004668:	4618      	mov	r0, r3
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 031c 	bic.w	r3, r3, #28
 8004686:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004688:	f001 fc80 	bl	8005f8c <HAL_RCC_GetHCLKFreq>
 800468c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	4a1d      	ldr	r2, [pc, #116]	; (8004708 <HAL_ETH_SetMDIOClockRange+0x98>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d908      	bls.n	80046a8 <HAL_ETH_SetMDIOClockRange+0x38>
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	4a1c      	ldr	r2, [pc, #112]	; (800470c <HAL_ETH_SetMDIOClockRange+0x9c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d804      	bhi.n	80046a8 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f043 0308 	orr.w	r3, r3, #8
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	e027      	b.n	80046f8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	4a18      	ldr	r2, [pc, #96]	; (800470c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d908      	bls.n	80046c2 <HAL_ETH_SetMDIOClockRange+0x52>
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	4a17      	ldr	r2, [pc, #92]	; (8004710 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d204      	bcs.n	80046c2 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f043 030c 	orr.w	r3, r3, #12
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	e01a      	b.n	80046f8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	4a12      	ldr	r2, [pc, #72]	; (8004710 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d303      	bcc.n	80046d2 <HAL_ETH_SetMDIOClockRange+0x62>
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	4a11      	ldr	r2, [pc, #68]	; (8004714 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d911      	bls.n	80046f6 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	4a0f      	ldr	r2, [pc, #60]	; (8004714 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d908      	bls.n	80046ec <HAL_ETH_SetMDIOClockRange+0x7c>
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	4a0e      	ldr	r2, [pc, #56]	; (8004718 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d804      	bhi.n	80046ec <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f043 0304 	orr.w	r3, r3, #4
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	e005      	b.n	80046f8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f043 0310 	orr.w	r3, r3, #16
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	e000      	b.n	80046f8 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80046f6:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	611a      	str	r2, [r3, #16]
}
 8004700:	bf00      	nop
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	01312cff 	.word	0x01312cff
 800470c:	02160ebf 	.word	0x02160ebf
 8004710:	03938700 	.word	0x03938700
 8004714:	05f5e0ff 	.word	0x05f5e0ff
 8004718:	08f0d17f 	.word	0x08f0d17f

0800471c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800472a:	4618      	mov	r0, r3
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6812      	ldr	r2, [r2, #0]
 8004750:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004754:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004758:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004766:	2001      	movs	r0, #1
 8004768:	f7fd febc 	bl	80024e4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004776:	6193      	str	r3, [r2, #24]
}
 8004778:	bf00      	nop
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4b51      	ldr	r3, [pc, #324]	; (80048dc <ETH_SetMACConfig+0x15c>)
 8004796:	4013      	ands	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	7c1b      	ldrb	r3, [r3, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d102      	bne.n	80047a8 <ETH_SetMACConfig+0x28>
 80047a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80047a6:	e000      	b.n	80047aa <ETH_SetMACConfig+0x2a>
 80047a8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	7c5b      	ldrb	r3, [r3, #17]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d102      	bne.n	80047b8 <ETH_SetMACConfig+0x38>
 80047b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80047b6:	e000      	b.n	80047ba <ETH_SetMACConfig+0x3a>
 80047b8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80047ba:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80047c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	7fdb      	ldrb	r3, [r3, #31]
 80047c6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80047c8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80047ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	7f92      	ldrb	r2, [r2, #30]
 80047d4:	2a00      	cmp	r2, #0
 80047d6:	d102      	bne.n	80047de <ETH_SetMACConfig+0x5e>
 80047d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047dc:	e000      	b.n	80047e0 <ETH_SetMACConfig+0x60>
 80047de:	2200      	movs	r2, #0
                        macconf->Speed |
 80047e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	7f1b      	ldrb	r3, [r3, #28]
 80047e6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80047e8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80047ee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	791b      	ldrb	r3, [r3, #4]
 80047f4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80047f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	f892 2020 	ldrb.w	r2, [r2, #32]
 80047fe:	2a00      	cmp	r2, #0
 8004800:	d102      	bne.n	8004808 <ETH_SetMACConfig+0x88>
 8004802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004806:	e000      	b.n	800480a <ETH_SetMACConfig+0x8a>
 8004808:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800480a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	7bdb      	ldrb	r3, [r3, #15]
 8004810:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004812:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004818:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004820:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004822:	4313      	orrs	r3, r2
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800483a:	2001      	movs	r0, #1
 800483c:	f7fd fe52 	bl	80024e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004856:	4013      	ands	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800485e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004866:	2a00      	cmp	r2, #0
 8004868:	d101      	bne.n	800486e <ETH_SetMACConfig+0xee>
 800486a:	2280      	movs	r2, #128	; 0x80
 800486c:	e000      	b.n	8004870 <ETH_SetMACConfig+0xf0>
 800486e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004870:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004876:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800487e:	2a01      	cmp	r2, #1
 8004880:	d101      	bne.n	8004886 <ETH_SetMACConfig+0x106>
 8004882:	2208      	movs	r2, #8
 8004884:	e000      	b.n	8004888 <ETH_SetMACConfig+0x108>
 8004886:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004888:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004890:	2a01      	cmp	r2, #1
 8004892:	d101      	bne.n	8004898 <ETH_SetMACConfig+0x118>
 8004894:	2204      	movs	r2, #4
 8004896:	e000      	b.n	800489a <ETH_SetMACConfig+0x11a>
 8004898:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800489a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80048a2:	2a01      	cmp	r2, #1
 80048a4:	d101      	bne.n	80048aa <ETH_SetMACConfig+0x12a>
 80048a6:	2202      	movs	r2, #2
 80048a8:	e000      	b.n	80048ac <ETH_SetMACConfig+0x12c>
 80048aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80048ac:	4313      	orrs	r3, r2
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80048c4:	2001      	movs	r0, #1
 80048c6:	f7fd fe0d 	bl	80024e4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	619a      	str	r2, [r3, #24]
}
 80048d2:	bf00      	nop
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	ff20810f 	.word	0xff20810f

080048e0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4b3d      	ldr	r3, [pc, #244]	; (80049f0 <ETH_SetDMAConfig+0x110>)
 80048fa:	4013      	ands	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	7b1b      	ldrb	r3, [r3, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d102      	bne.n	800490c <ETH_SetDMAConfig+0x2c>
 8004906:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800490a:	e000      	b.n	800490e <ETH_SetDMAConfig+0x2e>
 800490c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	7b5b      	ldrb	r3, [r3, #13]
 8004912:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004914:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	7f52      	ldrb	r2, [r2, #29]
 800491a:	2a00      	cmp	r2, #0
 800491c:	d102      	bne.n	8004924 <ETH_SetDMAConfig+0x44>
 800491e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004922:	e000      	b.n	8004926 <ETH_SetDMAConfig+0x46>
 8004924:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004926:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	7b9b      	ldrb	r3, [r3, #14]
 800492c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800492e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004934:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	7f1b      	ldrb	r3, [r3, #28]
 800493a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800493c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	7f9b      	ldrb	r3, [r3, #30]
 8004942:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004944:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800494a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004952:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004954:	4313      	orrs	r3, r2
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	4313      	orrs	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004964:	461a      	mov	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004976:	2001      	movs	r0, #1
 8004978:	f7fd fdb4 	bl	80024e4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004984:	461a      	mov	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	791b      	ldrb	r3, [r3, #4]
 800498e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004994:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800499a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80049a0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80049a8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80049aa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80049b2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80049b8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6812      	ldr	r2, [r2, #0]
 80049be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80049c6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80049d4:	2001      	movs	r0, #1
 80049d6:	f7fd fd85 	bl	80024e4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049e2:	461a      	mov	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6013      	str	r3, [r2, #0]
}
 80049e8:	bf00      	nop
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	f8de3f23 	.word	0xf8de3f23

080049f4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b0a6      	sub	sp, #152	; 0x98
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80049fc:	2301      	movs	r3, #1
 80049fe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8004a02:	2301      	movs	r3, #1
 8004a04:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004a12:	2301      	movs	r3, #1
 8004a14:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004a24:	2300      	movs	r3, #0
 8004a26:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004a30:	2300      	movs	r3, #0
 8004a32:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004a34:	2300      	movs	r3, #0
 8004a36:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004a44:	2300      	movs	r3, #0
 8004a46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004a50:	2300      	movs	r3, #0
 8004a52:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004a56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a5a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004a5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a60:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004a62:	2300      	movs	r3, #0
 8004a64:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004a68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7ff fe86 	bl	8004780 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004a74:	2301      	movs	r3, #1
 8004a76:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004a82:	2301      	movs	r3, #1
 8004a84:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004a86:	2300      	movs	r3, #0
 8004a88:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004a90:	2300      	movs	r3, #0
 8004a92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004a96:	2300      	movs	r3, #0
 8004a98:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004aa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004aa8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004aaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004aae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ab4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004ac4:	f107 0308 	add.w	r3, r7, #8
 8004ac8:	4619      	mov	r1, r3
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff ff08 	bl	80048e0 <ETH_SetDMAConfig>
}
 8004ad0:	bf00      	nop
 8004ad2:	3798      	adds	r7, #152	; 0x98
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3305      	adds	r3, #5
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	021b      	lsls	r3, r3, #8
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	3204      	adds	r2, #4
 8004af0:	7812      	ldrb	r2, [r2, #0]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	4b11      	ldr	r3, [pc, #68]	; (8004b40 <ETH_MACAddressConfig+0x68>)
 8004afa:	4413      	add	r3, r2
 8004afc:	461a      	mov	r2, r3
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	3303      	adds	r3, #3
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	061a      	lsls	r2, r3, #24
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3302      	adds	r3, #2
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	041b      	lsls	r3, r3, #16
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3301      	adds	r3, #1
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	021b      	lsls	r3, r3, #8
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	7812      	ldrb	r2, [r2, #0]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <ETH_MACAddressConfig+0x6c>)
 8004b2a:	4413      	add	r3, r2
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	6013      	str	r3, [r2, #0]
}
 8004b32:	bf00      	nop
 8004b34:	371c      	adds	r7, #28
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	40028040 	.word	0x40028040
 8004b44:	40028044 	.word	0x40028044

08004b48 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004b50:	2300      	movs	r3, #0
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	e03e      	b.n	8004bd4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68d9      	ldr	r1, [r3, #12]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	440b      	add	r3, r1
 8004b66:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2200      	movs	r2, #0
 8004b72:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2200      	movs	r2, #0
 8004b78:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	3206      	adds	r2, #6
 8004b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d80c      	bhi.n	8004bb8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68d9      	ldr	r1, [r3, #12]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	440b      	add	r3, r1
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	60da      	str	r2, [r3, #12]
 8004bb6:	e004      	b.n	8004bc2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b03      	cmp	r3, #3
 8004bd8:	d9bd      	bls.n	8004b56 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68da      	ldr	r2, [r3, #12]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bec:	611a      	str	r2, [r3, #16]
}
 8004bee:	bf00      	nop
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b085      	sub	sp, #20
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]
 8004c06:	e046      	b.n	8004c96 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6919      	ldr	r1, [r3, #16]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	00db      	lsls	r3, r3, #3
 8004c16:	440b      	add	r3, r1
 8004c18:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2200      	movs	r2, #0
 8004c24:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2200      	movs	r2, #0
 8004c36:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c44:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8004c4c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004c5a:	68b9      	ldr	r1, [r7, #8]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	3212      	adds	r2, #18
 8004c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d80c      	bhi.n	8004c86 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6919      	ldr	r1, [r3, #16]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	4613      	mov	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	440b      	add	r3, r1
 8004c7e:	461a      	mov	r2, r3
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	60da      	str	r2, [r3, #12]
 8004c84:	e004      	b.n	8004c90 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	3301      	adds	r3, #1
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d9b5      	bls.n	8004c08 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691a      	ldr	r2, [r3, #16]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cc6:	60da      	str	r2, [r3, #12]
}
 8004cc8:	bf00      	nop
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b08d      	sub	sp, #52	; 0x34
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	3318      	adds	r3, #24
 8004ce4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cfe:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8004d06:	2300      	movs	r3, #0
 8004d08:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d16:	d007      	beq.n	8004d28 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e0ff      	b.n	8004f2c <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	3301      	adds	r3, #1
 8004d30:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	461a      	mov	r2, r3
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	4b7d      	ldr	r3, [pc, #500]	; (8004f38 <ETH_Prepare_Tx_Descriptors+0x264>)
 8004d42:	4013      	ands	r3, r2
 8004d44:	69fa      	ldr	r2, [r7, #28]
 8004d46:	6852      	ldr	r2, [r2, #4]
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d008      	beq.n	8004d6c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	431a      	orrs	r2, r3
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0320 	and.w	r3, r3, #32
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d008      	beq.n	8004d8a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	431a      	orrs	r2, r3
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0304 	and.w	r3, r3, #4
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d005      	beq.n	8004da2 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8004dae:	f3bf 8f5f 	dmb	sy
}
 8004db2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004dc0:	e082      	b.n	8004ec8 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004dc2:	6a3b      	ldr	r3, [r7, #32]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d006      	beq.n	8004de2 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	e005      	b.n	8004dee <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df0:	3301      	adds	r3, #1
 8004df2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df6:	2b03      	cmp	r3, #3
 8004df8:	d902      	bls.n	8004e00 <ETH_Prepare_Tx_Descriptors+0x12c>
 8004dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfc:	3b04      	subs	r3, #4
 8004dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e08:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e22:	d007      	beq.n	8004e34 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e28:	3304      	adds	r3, #4
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d029      	beq.n	8004e88 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e40:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004e42:	2300      	movs	r3, #0
 8004e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e46:	e019      	b.n	8004e7c <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8004e48:	f3bf 8f5f 	dmb	sy
}
 8004e4c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	d902      	bls.n	8004e6c <ETH_Prepare_Tx_Descriptors+0x198>
 8004e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e68:	3b04      	subs	r3, #4
 8004e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e74:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8004e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e78:	3301      	adds	r3, #1
 8004e7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d3e1      	bcc.n	8004e48 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8004e84:	2302      	movs	r3, #2
 8004e86:	e051      	b.n	8004f2c <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	4b25      	ldr	r3, [pc, #148]	; (8004f38 <ETH_Prepare_Tx_Descriptors+0x264>)
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	69fa      	ldr	r2, [r7, #28]
 8004ea8:	6852      	ldr	r2, [r2, #4]
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8004eb6:	f3bf 8f5f 	dmb	sy
}
 8004eba:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f47f af78 	bne.w	8004dc2 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d006      	beq.n	8004ee6 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ee0:	6a3b      	ldr	r3, [r7, #32]
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	e005      	b.n	8004ef2 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f02:	6979      	ldr	r1, [r7, #20]
 8004f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f06:	3304      	adds	r3, #4
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	440b      	add	r3, r1
 8004f0c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f12:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f14:	b672      	cpsid	i
}
 8004f16:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	4413      	add	r3, r2
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004f26:	b662      	cpsie	i
}
 8004f28:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3734      	adds	r7, #52	; 0x34
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	ffffe000 	.word	0xffffe000

08004f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b089      	sub	sp, #36	; 0x24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004f46:	2300      	movs	r3, #0
 8004f48:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004f52:	2300      	movs	r3, #0
 8004f54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004f56:	2300      	movs	r3, #0
 8004f58:	61fb      	str	r3, [r7, #28]
 8004f5a:	e175      	b.n	8005248 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	fa02 f303 	lsl.w	r3, r2, r3
 8004f64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	f040 8164 	bne.w	8005242 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d005      	beq.n	8004f92 <HAL_GPIO_Init+0x56>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d130      	bne.n	8004ff4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	2203      	movs	r2, #3
 8004f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fc8:	2201      	movs	r2, #1
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	091b      	lsrs	r3, r3, #4
 8004fde:	f003 0201 	and.w	r2, r3, #1
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f003 0303 	and.w	r3, r3, #3
 8004ffc:	2b03      	cmp	r3, #3
 8004ffe:	d017      	beq.n	8005030 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	2203      	movs	r2, #3
 800500c:	fa02 f303 	lsl.w	r3, r2, r3
 8005010:	43db      	mvns	r3, r3
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	4013      	ands	r3, r2
 8005016:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	fa02 f303 	lsl.w	r3, r2, r3
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	4313      	orrs	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f003 0303 	and.w	r3, r3, #3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d123      	bne.n	8005084 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	08da      	lsrs	r2, r3, #3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3208      	adds	r2, #8
 8005044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	220f      	movs	r2, #15
 8005054:	fa02 f303 	lsl.w	r3, r2, r3
 8005058:	43db      	mvns	r3, r3
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	4013      	ands	r3, r2
 800505e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	fa02 f303 	lsl.w	r3, r2, r3
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	4313      	orrs	r3, r2
 8005074:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	08da      	lsrs	r2, r3, #3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3208      	adds	r2, #8
 800507e:	69b9      	ldr	r1, [r7, #24]
 8005080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	2203      	movs	r2, #3
 8005090:	fa02 f303 	lsl.w	r3, r2, r3
 8005094:	43db      	mvns	r3, r3
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	4013      	ands	r3, r2
 800509a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f003 0203 	and.w	r2, r3, #3
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 80be 	beq.w	8005242 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050c6:	4b66      	ldr	r3, [pc, #408]	; (8005260 <HAL_GPIO_Init+0x324>)
 80050c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ca:	4a65      	ldr	r2, [pc, #404]	; (8005260 <HAL_GPIO_Init+0x324>)
 80050cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050d0:	6453      	str	r3, [r2, #68]	; 0x44
 80050d2:	4b63      	ldr	r3, [pc, #396]	; (8005260 <HAL_GPIO_Init+0x324>)
 80050d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80050de:	4a61      	ldr	r2, [pc, #388]	; (8005264 <HAL_GPIO_Init+0x328>)
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	089b      	lsrs	r3, r3, #2
 80050e4:	3302      	adds	r3, #2
 80050e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	f003 0303 	and.w	r3, r3, #3
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	220f      	movs	r2, #15
 80050f6:	fa02 f303 	lsl.w	r3, r2, r3
 80050fa:	43db      	mvns	r3, r3
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	4013      	ands	r3, r2
 8005100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a58      	ldr	r2, [pc, #352]	; (8005268 <HAL_GPIO_Init+0x32c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d037      	beq.n	800517a <HAL_GPIO_Init+0x23e>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a57      	ldr	r2, [pc, #348]	; (800526c <HAL_GPIO_Init+0x330>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d031      	beq.n	8005176 <HAL_GPIO_Init+0x23a>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a56      	ldr	r2, [pc, #344]	; (8005270 <HAL_GPIO_Init+0x334>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d02b      	beq.n	8005172 <HAL_GPIO_Init+0x236>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a55      	ldr	r2, [pc, #340]	; (8005274 <HAL_GPIO_Init+0x338>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d025      	beq.n	800516e <HAL_GPIO_Init+0x232>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a54      	ldr	r2, [pc, #336]	; (8005278 <HAL_GPIO_Init+0x33c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d01f      	beq.n	800516a <HAL_GPIO_Init+0x22e>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a53      	ldr	r2, [pc, #332]	; (800527c <HAL_GPIO_Init+0x340>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d019      	beq.n	8005166 <HAL_GPIO_Init+0x22a>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a52      	ldr	r2, [pc, #328]	; (8005280 <HAL_GPIO_Init+0x344>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d013      	beq.n	8005162 <HAL_GPIO_Init+0x226>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a51      	ldr	r2, [pc, #324]	; (8005284 <HAL_GPIO_Init+0x348>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d00d      	beq.n	800515e <HAL_GPIO_Init+0x222>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a50      	ldr	r2, [pc, #320]	; (8005288 <HAL_GPIO_Init+0x34c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d007      	beq.n	800515a <HAL_GPIO_Init+0x21e>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a4f      	ldr	r2, [pc, #316]	; (800528c <HAL_GPIO_Init+0x350>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d101      	bne.n	8005156 <HAL_GPIO_Init+0x21a>
 8005152:	2309      	movs	r3, #9
 8005154:	e012      	b.n	800517c <HAL_GPIO_Init+0x240>
 8005156:	230a      	movs	r3, #10
 8005158:	e010      	b.n	800517c <HAL_GPIO_Init+0x240>
 800515a:	2308      	movs	r3, #8
 800515c:	e00e      	b.n	800517c <HAL_GPIO_Init+0x240>
 800515e:	2307      	movs	r3, #7
 8005160:	e00c      	b.n	800517c <HAL_GPIO_Init+0x240>
 8005162:	2306      	movs	r3, #6
 8005164:	e00a      	b.n	800517c <HAL_GPIO_Init+0x240>
 8005166:	2305      	movs	r3, #5
 8005168:	e008      	b.n	800517c <HAL_GPIO_Init+0x240>
 800516a:	2304      	movs	r3, #4
 800516c:	e006      	b.n	800517c <HAL_GPIO_Init+0x240>
 800516e:	2303      	movs	r3, #3
 8005170:	e004      	b.n	800517c <HAL_GPIO_Init+0x240>
 8005172:	2302      	movs	r3, #2
 8005174:	e002      	b.n	800517c <HAL_GPIO_Init+0x240>
 8005176:	2301      	movs	r3, #1
 8005178:	e000      	b.n	800517c <HAL_GPIO_Init+0x240>
 800517a:	2300      	movs	r3, #0
 800517c:	69fa      	ldr	r2, [r7, #28]
 800517e:	f002 0203 	and.w	r2, r2, #3
 8005182:	0092      	lsls	r2, r2, #2
 8005184:	4093      	lsls	r3, r2
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	4313      	orrs	r3, r2
 800518a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800518c:	4935      	ldr	r1, [pc, #212]	; (8005264 <HAL_GPIO_Init+0x328>)
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	089b      	lsrs	r3, r3, #2
 8005192:	3302      	adds	r3, #2
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800519a:	4b3d      	ldr	r3, [pc, #244]	; (8005290 <HAL_GPIO_Init+0x354>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	43db      	mvns	r3, r3
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	4013      	ands	r3, r2
 80051a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051be:	4a34      	ldr	r2, [pc, #208]	; (8005290 <HAL_GPIO_Init+0x354>)
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051c4:	4b32      	ldr	r3, [pc, #200]	; (8005290 <HAL_GPIO_Init+0x354>)
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	43db      	mvns	r3, r3
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	4013      	ands	r3, r2
 80051d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051e8:	4a29      	ldr	r2, [pc, #164]	; (8005290 <HAL_GPIO_Init+0x354>)
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80051ee:	4b28      	ldr	r3, [pc, #160]	; (8005290 <HAL_GPIO_Init+0x354>)
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	43db      	mvns	r3, r3
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	4013      	ands	r3, r2
 80051fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	4313      	orrs	r3, r2
 8005210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005212:	4a1f      	ldr	r2, [pc, #124]	; (8005290 <HAL_GPIO_Init+0x354>)
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005218:	4b1d      	ldr	r3, [pc, #116]	; (8005290 <HAL_GPIO_Init+0x354>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	43db      	mvns	r3, r3
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	4013      	ands	r3, r2
 8005226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	4313      	orrs	r3, r2
 800523a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800523c:	4a14      	ldr	r2, [pc, #80]	; (8005290 <HAL_GPIO_Init+0x354>)
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	3301      	adds	r3, #1
 8005246:	61fb      	str	r3, [r7, #28]
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	2b0f      	cmp	r3, #15
 800524c:	f67f ae86 	bls.w	8004f5c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005250:	bf00      	nop
 8005252:	bf00      	nop
 8005254:	3724      	adds	r7, #36	; 0x24
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	40023800 	.word	0x40023800
 8005264:	40013800 	.word	0x40013800
 8005268:	40020000 	.word	0x40020000
 800526c:	40020400 	.word	0x40020400
 8005270:	40020800 	.word	0x40020800
 8005274:	40020c00 	.word	0x40020c00
 8005278:	40021000 	.word	0x40021000
 800527c:	40021400 	.word	0x40021400
 8005280:	40021800 	.word	0x40021800
 8005284:	40021c00 	.word	0x40021c00
 8005288:	40022000 	.word	0x40022000
 800528c:	40022400 	.word	0x40022400
 8005290:	40013c00 	.word	0x40013c00

08005294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	807b      	strh	r3, [r7, #2]
 80052a0:	4613      	mov	r3, r2
 80052a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052a4:	787b      	ldrb	r3, [r7, #1]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052aa:	887a      	ldrh	r2, [r7, #2]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80052b0:	e003      	b.n	80052ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80052b2:	887b      	ldrh	r3, [r7, #2]
 80052b4:	041a      	lsls	r2, r3, #16
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	619a      	str	r2, [r3, #24]
}
 80052ba:	bf00      	nop
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b085      	sub	sp, #20
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	460b      	mov	r3, r1
 80052d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80052d8:	887a      	ldrh	r2, [r7, #2]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	4013      	ands	r3, r2
 80052de:	041a      	lsls	r2, r3, #16
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	43d9      	mvns	r1, r3
 80052e4:	887b      	ldrh	r3, [r7, #2]
 80052e6:	400b      	ands	r3, r1
 80052e8:	431a      	orrs	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	619a      	str	r2, [r3, #24]
}
 80052ee:	bf00      	nop
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80052fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052fc:	b08f      	sub	sp, #60	; 0x3c
 80052fe:	af0a      	add	r7, sp, #40	; 0x28
 8005300:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e116      	b.n	800553a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d106      	bne.n	800532c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7fc fcf8 	bl	8001d1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2203      	movs	r2, #3
 8005330:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533c:	2b00      	cmp	r3, #0
 800533e:	d102      	bne.n	8005346 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4618      	mov	r0, r3
 800534c:	f002 fe86 	bl	800805c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	603b      	str	r3, [r7, #0]
 8005356:	687e      	ldr	r6, [r7, #4]
 8005358:	466d      	mov	r5, sp
 800535a:	f106 0410 	add.w	r4, r6, #16
 800535e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005362:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005364:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005366:	e894 0003 	ldmia.w	r4, {r0, r1}
 800536a:	e885 0003 	stmia.w	r5, {r0, r1}
 800536e:	1d33      	adds	r3, r6, #4
 8005370:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005372:	6838      	ldr	r0, [r7, #0]
 8005374:	f002 fe1a 	bl	8007fac <USB_CoreInit>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d005      	beq.n	800538a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2202      	movs	r2, #2
 8005382:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e0d7      	b.n	800553a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2100      	movs	r1, #0
 8005390:	4618      	mov	r0, r3
 8005392:	f002 fe74 	bl	800807e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005396:	2300      	movs	r3, #0
 8005398:	73fb      	strb	r3, [r7, #15]
 800539a:	e04a      	b.n	8005432 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800539c:	7bfa      	ldrb	r2, [r7, #15]
 800539e:	6879      	ldr	r1, [r7, #4]
 80053a0:	4613      	mov	r3, r2
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	4413      	add	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	440b      	add	r3, r1
 80053aa:	333d      	adds	r3, #61	; 0x3d
 80053ac:	2201      	movs	r2, #1
 80053ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80053b0:	7bfa      	ldrb	r2, [r7, #15]
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	4613      	mov	r3, r2
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	4413      	add	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	440b      	add	r3, r1
 80053be:	333c      	adds	r3, #60	; 0x3c
 80053c0:	7bfa      	ldrb	r2, [r7, #15]
 80053c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80053c4:	7bfa      	ldrb	r2, [r7, #15]
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
 80053c8:	b298      	uxth	r0, r3
 80053ca:	6879      	ldr	r1, [r7, #4]
 80053cc:	4613      	mov	r3, r2
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	4413      	add	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	440b      	add	r3, r1
 80053d6:	3344      	adds	r3, #68	; 0x44
 80053d8:	4602      	mov	r2, r0
 80053da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80053dc:	7bfa      	ldrb	r2, [r7, #15]
 80053de:	6879      	ldr	r1, [r7, #4]
 80053e0:	4613      	mov	r3, r2
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	4413      	add	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	440b      	add	r3, r1
 80053ea:	3340      	adds	r3, #64	; 0x40
 80053ec:	2200      	movs	r2, #0
 80053ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80053f0:	7bfa      	ldrb	r2, [r7, #15]
 80053f2:	6879      	ldr	r1, [r7, #4]
 80053f4:	4613      	mov	r3, r2
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	4413      	add	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	440b      	add	r3, r1
 80053fe:	3348      	adds	r3, #72	; 0x48
 8005400:	2200      	movs	r2, #0
 8005402:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005404:	7bfa      	ldrb	r2, [r7, #15]
 8005406:	6879      	ldr	r1, [r7, #4]
 8005408:	4613      	mov	r3, r2
 800540a:	00db      	lsls	r3, r3, #3
 800540c:	4413      	add	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	440b      	add	r3, r1
 8005412:	334c      	adds	r3, #76	; 0x4c
 8005414:	2200      	movs	r2, #0
 8005416:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005418:	7bfa      	ldrb	r2, [r7, #15]
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	4613      	mov	r3, r2
 800541e:	00db      	lsls	r3, r3, #3
 8005420:	4413      	add	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	440b      	add	r3, r1
 8005426:	3354      	adds	r3, #84	; 0x54
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800542c:	7bfb      	ldrb	r3, [r7, #15]
 800542e:	3301      	adds	r3, #1
 8005430:	73fb      	strb	r3, [r7, #15]
 8005432:	7bfa      	ldrb	r2, [r7, #15]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	429a      	cmp	r2, r3
 800543a:	d3af      	bcc.n	800539c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800543c:	2300      	movs	r3, #0
 800543e:	73fb      	strb	r3, [r7, #15]
 8005440:	e044      	b.n	80054cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005442:	7bfa      	ldrb	r2, [r7, #15]
 8005444:	6879      	ldr	r1, [r7, #4]
 8005446:	4613      	mov	r3, r2
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	4413      	add	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	440b      	add	r3, r1
 8005450:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005454:	2200      	movs	r2, #0
 8005456:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005458:	7bfa      	ldrb	r2, [r7, #15]
 800545a:	6879      	ldr	r1, [r7, #4]
 800545c:	4613      	mov	r3, r2
 800545e:	00db      	lsls	r3, r3, #3
 8005460:	4413      	add	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	440b      	add	r3, r1
 8005466:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800546a:	7bfa      	ldrb	r2, [r7, #15]
 800546c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800546e:	7bfa      	ldrb	r2, [r7, #15]
 8005470:	6879      	ldr	r1, [r7, #4]
 8005472:	4613      	mov	r3, r2
 8005474:	00db      	lsls	r3, r3, #3
 8005476:	4413      	add	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	440b      	add	r3, r1
 800547c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005480:	2200      	movs	r2, #0
 8005482:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005484:	7bfa      	ldrb	r2, [r7, #15]
 8005486:	6879      	ldr	r1, [r7, #4]
 8005488:	4613      	mov	r3, r2
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	4413      	add	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	440b      	add	r3, r1
 8005492:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005496:	2200      	movs	r2, #0
 8005498:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800549a:	7bfa      	ldrb	r2, [r7, #15]
 800549c:	6879      	ldr	r1, [r7, #4]
 800549e:	4613      	mov	r3, r2
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	4413      	add	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	440b      	add	r3, r1
 80054a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80054ac:	2200      	movs	r2, #0
 80054ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80054b0:	7bfa      	ldrb	r2, [r7, #15]
 80054b2:	6879      	ldr	r1, [r7, #4]
 80054b4:	4613      	mov	r3, r2
 80054b6:	00db      	lsls	r3, r3, #3
 80054b8:	4413      	add	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	440b      	add	r3, r1
 80054be:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80054c2:	2200      	movs	r2, #0
 80054c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
 80054c8:	3301      	adds	r3, #1
 80054ca:	73fb      	strb	r3, [r7, #15]
 80054cc:	7bfa      	ldrb	r2, [r7, #15]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d3b5      	bcc.n	8005442 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	603b      	str	r3, [r7, #0]
 80054dc:	687e      	ldr	r6, [r7, #4]
 80054de:	466d      	mov	r5, sp
 80054e0:	f106 0410 	add.w	r4, r6, #16
 80054e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80054f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80054f4:	1d33      	adds	r3, r6, #4
 80054f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054f8:	6838      	ldr	r0, [r7, #0]
 80054fa:	f002 fe0d 	bl	8008118 <USB_DevInit>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d005      	beq.n	8005510 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e014      	b.n	800553a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005524:	2b01      	cmp	r3, #1
 8005526:	d102      	bne.n	800552e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f80b 	bl	8005544 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4618      	mov	r0, r3
 8005534:	f002 ffcb 	bl	80084ce <USB_DevDisconnect>

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005544 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005572:	4b05      	ldr	r3, [pc, #20]	; (8005588 <HAL_PCDEx_ActivateLPM+0x44>)
 8005574:	4313      	orrs	r3, r2
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	10000003 	.word	0x10000003

0800558c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005590:	4b05      	ldr	r3, [pc, #20]	; (80055a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a04      	ldr	r2, [pc, #16]	; (80055a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800559a:	6013      	str	r3, [r2, #0]
}
 800559c:	bf00      	nop
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	40007000 	.word	0x40007000

080055ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80055b2:	2300      	movs	r3, #0
 80055b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80055b6:	4b23      	ldr	r3, [pc, #140]	; (8005644 <HAL_PWREx_EnableOverDrive+0x98>)
 80055b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ba:	4a22      	ldr	r2, [pc, #136]	; (8005644 <HAL_PWREx_EnableOverDrive+0x98>)
 80055bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055c0:	6413      	str	r3, [r2, #64]	; 0x40
 80055c2:	4b20      	ldr	r3, [pc, #128]	; (8005644 <HAL_PWREx_EnableOverDrive+0x98>)
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ca:	603b      	str	r3, [r7, #0]
 80055cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80055ce:	4b1e      	ldr	r3, [pc, #120]	; (8005648 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a1d      	ldr	r2, [pc, #116]	; (8005648 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055da:	f7fc ff77 	bl	80024cc <HAL_GetTick>
 80055de:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80055e0:	e009      	b.n	80055f6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80055e2:	f7fc ff73 	bl	80024cc <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055f0:	d901      	bls.n	80055f6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e022      	b.n	800563c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80055f6:	4b14      	ldr	r3, [pc, #80]	; (8005648 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005602:	d1ee      	bne.n	80055e2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005604:	4b10      	ldr	r3, [pc, #64]	; (8005648 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a0f      	ldr	r2, [pc, #60]	; (8005648 <HAL_PWREx_EnableOverDrive+0x9c>)
 800560a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800560e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005610:	f7fc ff5c 	bl	80024cc <HAL_GetTick>
 8005614:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005616:	e009      	b.n	800562c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005618:	f7fc ff58 	bl	80024cc <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005626:	d901      	bls.n	800562c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e007      	b.n	800563c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800562c:	4b06      	ldr	r3, [pc, #24]	; (8005648 <HAL_PWREx_EnableOverDrive+0x9c>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005634:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005638:	d1ee      	bne.n	8005618 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	40023800 	.word	0x40023800
 8005648:	40007000 	.word	0x40007000

0800564c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005654:	2300      	movs	r3, #0
 8005656:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e29b      	b.n	8005b9a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 8087 	beq.w	800577e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005670:	4b96      	ldr	r3, [pc, #600]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f003 030c 	and.w	r3, r3, #12
 8005678:	2b04      	cmp	r3, #4
 800567a:	d00c      	beq.n	8005696 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800567c:	4b93      	ldr	r3, [pc, #588]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f003 030c 	and.w	r3, r3, #12
 8005684:	2b08      	cmp	r3, #8
 8005686:	d112      	bne.n	80056ae <HAL_RCC_OscConfig+0x62>
 8005688:	4b90      	ldr	r3, [pc, #576]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005690:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005694:	d10b      	bne.n	80056ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005696:	4b8d      	ldr	r3, [pc, #564]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d06c      	beq.n	800577c <HAL_RCC_OscConfig+0x130>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d168      	bne.n	800577c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e275      	b.n	8005b9a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056b6:	d106      	bne.n	80056c6 <HAL_RCC_OscConfig+0x7a>
 80056b8:	4b84      	ldr	r3, [pc, #528]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a83      	ldr	r2, [pc, #524]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 80056be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	e02e      	b.n	8005724 <HAL_RCC_OscConfig+0xd8>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10c      	bne.n	80056e8 <HAL_RCC_OscConfig+0x9c>
 80056ce:	4b7f      	ldr	r3, [pc, #508]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a7e      	ldr	r2, [pc, #504]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 80056d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056d8:	6013      	str	r3, [r2, #0]
 80056da:	4b7c      	ldr	r3, [pc, #496]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a7b      	ldr	r2, [pc, #492]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 80056e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056e4:	6013      	str	r3, [r2, #0]
 80056e6:	e01d      	b.n	8005724 <HAL_RCC_OscConfig+0xd8>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056f0:	d10c      	bne.n	800570c <HAL_RCC_OscConfig+0xc0>
 80056f2:	4b76      	ldr	r3, [pc, #472]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a75      	ldr	r2, [pc, #468]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 80056f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056fc:	6013      	str	r3, [r2, #0]
 80056fe:	4b73      	ldr	r3, [pc, #460]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a72      	ldr	r2, [pc, #456]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 8005704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005708:	6013      	str	r3, [r2, #0]
 800570a:	e00b      	b.n	8005724 <HAL_RCC_OscConfig+0xd8>
 800570c:	4b6f      	ldr	r3, [pc, #444]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a6e      	ldr	r2, [pc, #440]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 8005712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005716:	6013      	str	r3, [r2, #0]
 8005718:	4b6c      	ldr	r3, [pc, #432]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a6b      	ldr	r2, [pc, #428]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 800571e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d013      	beq.n	8005754 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572c:	f7fc fece 	bl	80024cc <HAL_GetTick>
 8005730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005732:	e008      	b.n	8005746 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005734:	f7fc feca 	bl	80024cc <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b64      	cmp	r3, #100	; 0x64
 8005740:	d901      	bls.n	8005746 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e229      	b.n	8005b9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005746:	4b61      	ldr	r3, [pc, #388]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d0f0      	beq.n	8005734 <HAL_RCC_OscConfig+0xe8>
 8005752:	e014      	b.n	800577e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005754:	f7fc feba 	bl	80024cc <HAL_GetTick>
 8005758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800575c:	f7fc feb6 	bl	80024cc <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b64      	cmp	r3, #100	; 0x64
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e215      	b.n	8005b9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800576e:	4b57      	ldr	r3, [pc, #348]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1f0      	bne.n	800575c <HAL_RCC_OscConfig+0x110>
 800577a:	e000      	b.n	800577e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800577c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d069      	beq.n	800585e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800578a:	4b50      	ldr	r3, [pc, #320]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f003 030c 	and.w	r3, r3, #12
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00b      	beq.n	80057ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005796:	4b4d      	ldr	r3, [pc, #308]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f003 030c 	and.w	r3, r3, #12
 800579e:	2b08      	cmp	r3, #8
 80057a0:	d11c      	bne.n	80057dc <HAL_RCC_OscConfig+0x190>
 80057a2:	4b4a      	ldr	r3, [pc, #296]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d116      	bne.n	80057dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ae:	4b47      	ldr	r3, [pc, #284]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d005      	beq.n	80057c6 <HAL_RCC_OscConfig+0x17a>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d001      	beq.n	80057c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e1e9      	b.n	8005b9a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057c6:	4b41      	ldr	r3, [pc, #260]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	493d      	ldr	r1, [pc, #244]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057da:	e040      	b.n	800585e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d023      	beq.n	800582c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057e4:	4b39      	ldr	r3, [pc, #228]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a38      	ldr	r2, [pc, #224]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 80057ea:	f043 0301 	orr.w	r3, r3, #1
 80057ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f0:	f7fc fe6c 	bl	80024cc <HAL_GetTick>
 80057f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057f6:	e008      	b.n	800580a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057f8:	f7fc fe68 	bl	80024cc <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	2b02      	cmp	r3, #2
 8005804:	d901      	bls.n	800580a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e1c7      	b.n	8005b9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800580a:	4b30      	ldr	r3, [pc, #192]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	2b00      	cmp	r3, #0
 8005814:	d0f0      	beq.n	80057f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005816:	4b2d      	ldr	r3, [pc, #180]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	00db      	lsls	r3, r3, #3
 8005824:	4929      	ldr	r1, [pc, #164]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 8005826:	4313      	orrs	r3, r2
 8005828:	600b      	str	r3, [r1, #0]
 800582a:	e018      	b.n	800585e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800582c:	4b27      	ldr	r3, [pc, #156]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a26      	ldr	r2, [pc, #152]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 8005832:	f023 0301 	bic.w	r3, r3, #1
 8005836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005838:	f7fc fe48 	bl	80024cc <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005840:	f7fc fe44 	bl	80024cc <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e1a3      	b.n	8005b9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005852:	4b1e      	ldr	r3, [pc, #120]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1f0      	bne.n	8005840 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0308 	and.w	r3, r3, #8
 8005866:	2b00      	cmp	r3, #0
 8005868:	d038      	beq.n	80058dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d019      	beq.n	80058a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005872:	4b16      	ldr	r3, [pc, #88]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 8005874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005876:	4a15      	ldr	r2, [pc, #84]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 8005878:	f043 0301 	orr.w	r3, r3, #1
 800587c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800587e:	f7fc fe25 	bl	80024cc <HAL_GetTick>
 8005882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005884:	e008      	b.n	8005898 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005886:	f7fc fe21 	bl	80024cc <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	2b02      	cmp	r3, #2
 8005892:	d901      	bls.n	8005898 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e180      	b.n	8005b9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005898:	4b0c      	ldr	r3, [pc, #48]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 800589a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d0f0      	beq.n	8005886 <HAL_RCC_OscConfig+0x23a>
 80058a4:	e01a      	b.n	80058dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058a6:	4b09      	ldr	r3, [pc, #36]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 80058a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058aa:	4a08      	ldr	r2, [pc, #32]	; (80058cc <HAL_RCC_OscConfig+0x280>)
 80058ac:	f023 0301 	bic.w	r3, r3, #1
 80058b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b2:	f7fc fe0b 	bl	80024cc <HAL_GetTick>
 80058b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058b8:	e00a      	b.n	80058d0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058ba:	f7fc fe07 	bl	80024cc <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d903      	bls.n	80058d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e166      	b.n	8005b9a <HAL_RCC_OscConfig+0x54e>
 80058cc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058d0:	4b92      	ldr	r3, [pc, #584]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 80058d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1ee      	bne.n	80058ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 80a4 	beq.w	8005a32 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058ea:	4b8c      	ldr	r3, [pc, #560]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10d      	bne.n	8005912 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80058f6:	4b89      	ldr	r3, [pc, #548]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	4a88      	ldr	r2, [pc, #544]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 80058fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005900:	6413      	str	r3, [r2, #64]	; 0x40
 8005902:	4b86      	ldr	r3, [pc, #536]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800590a:	60bb      	str	r3, [r7, #8]
 800590c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800590e:	2301      	movs	r3, #1
 8005910:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005912:	4b83      	ldr	r3, [pc, #524]	; (8005b20 <HAL_RCC_OscConfig+0x4d4>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591a:	2b00      	cmp	r3, #0
 800591c:	d118      	bne.n	8005950 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800591e:	4b80      	ldr	r3, [pc, #512]	; (8005b20 <HAL_RCC_OscConfig+0x4d4>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a7f      	ldr	r2, [pc, #508]	; (8005b20 <HAL_RCC_OscConfig+0x4d4>)
 8005924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800592a:	f7fc fdcf 	bl	80024cc <HAL_GetTick>
 800592e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005930:	e008      	b.n	8005944 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005932:	f7fc fdcb 	bl	80024cc <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	2b64      	cmp	r3, #100	; 0x64
 800593e:	d901      	bls.n	8005944 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e12a      	b.n	8005b9a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005944:	4b76      	ldr	r3, [pc, #472]	; (8005b20 <HAL_RCC_OscConfig+0x4d4>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800594c:	2b00      	cmp	r3, #0
 800594e:	d0f0      	beq.n	8005932 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d106      	bne.n	8005966 <HAL_RCC_OscConfig+0x31a>
 8005958:	4b70      	ldr	r3, [pc, #448]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 800595a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595c:	4a6f      	ldr	r2, [pc, #444]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 800595e:	f043 0301 	orr.w	r3, r3, #1
 8005962:	6713      	str	r3, [r2, #112]	; 0x70
 8005964:	e02d      	b.n	80059c2 <HAL_RCC_OscConfig+0x376>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10c      	bne.n	8005988 <HAL_RCC_OscConfig+0x33c>
 800596e:	4b6b      	ldr	r3, [pc, #428]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 8005970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005972:	4a6a      	ldr	r2, [pc, #424]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 8005974:	f023 0301 	bic.w	r3, r3, #1
 8005978:	6713      	str	r3, [r2, #112]	; 0x70
 800597a:	4b68      	ldr	r3, [pc, #416]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 800597c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597e:	4a67      	ldr	r2, [pc, #412]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 8005980:	f023 0304 	bic.w	r3, r3, #4
 8005984:	6713      	str	r3, [r2, #112]	; 0x70
 8005986:	e01c      	b.n	80059c2 <HAL_RCC_OscConfig+0x376>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	2b05      	cmp	r3, #5
 800598e:	d10c      	bne.n	80059aa <HAL_RCC_OscConfig+0x35e>
 8005990:	4b62      	ldr	r3, [pc, #392]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 8005992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005994:	4a61      	ldr	r2, [pc, #388]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 8005996:	f043 0304 	orr.w	r3, r3, #4
 800599a:	6713      	str	r3, [r2, #112]	; 0x70
 800599c:	4b5f      	ldr	r3, [pc, #380]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 800599e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a0:	4a5e      	ldr	r2, [pc, #376]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 80059a2:	f043 0301 	orr.w	r3, r3, #1
 80059a6:	6713      	str	r3, [r2, #112]	; 0x70
 80059a8:	e00b      	b.n	80059c2 <HAL_RCC_OscConfig+0x376>
 80059aa:	4b5c      	ldr	r3, [pc, #368]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 80059ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ae:	4a5b      	ldr	r2, [pc, #364]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 80059b0:	f023 0301 	bic.w	r3, r3, #1
 80059b4:	6713      	str	r3, [r2, #112]	; 0x70
 80059b6:	4b59      	ldr	r3, [pc, #356]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 80059b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ba:	4a58      	ldr	r2, [pc, #352]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 80059bc:	f023 0304 	bic.w	r3, r3, #4
 80059c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d015      	beq.n	80059f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ca:	f7fc fd7f 	bl	80024cc <HAL_GetTick>
 80059ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059d0:	e00a      	b.n	80059e8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059d2:	f7fc fd7b 	bl	80024cc <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d901      	bls.n	80059e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e0d8      	b.n	8005b9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059e8:	4b4c      	ldr	r3, [pc, #304]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 80059ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0ee      	beq.n	80059d2 <HAL_RCC_OscConfig+0x386>
 80059f4:	e014      	b.n	8005a20 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059f6:	f7fc fd69 	bl	80024cc <HAL_GetTick>
 80059fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059fc:	e00a      	b.n	8005a14 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059fe:	f7fc fd65 	bl	80024cc <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d901      	bls.n	8005a14 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e0c2      	b.n	8005b9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a14:	4b41      	ldr	r3, [pc, #260]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 8005a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1ee      	bne.n	80059fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a20:	7dfb      	ldrb	r3, [r7, #23]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d105      	bne.n	8005a32 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a26:	4b3d      	ldr	r3, [pc, #244]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	4a3c      	ldr	r2, [pc, #240]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 8005a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f000 80ae 	beq.w	8005b98 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a3c:	4b37      	ldr	r3, [pc, #220]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f003 030c 	and.w	r3, r3, #12
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d06d      	beq.n	8005b24 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d14b      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a50:	4b32      	ldr	r3, [pc, #200]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a31      	ldr	r2, [pc, #196]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 8005a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a5c:	f7fc fd36 	bl	80024cc <HAL_GetTick>
 8005a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a62:	e008      	b.n	8005a76 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a64:	f7fc fd32 	bl	80024cc <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e091      	b.n	8005b9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a76:	4b29      	ldr	r3, [pc, #164]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1f0      	bne.n	8005a64 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	69da      	ldr	r2, [r3, #28]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a90:	019b      	lsls	r3, r3, #6
 8005a92:	431a      	orrs	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a98:	085b      	lsrs	r3, r3, #1
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	041b      	lsls	r3, r3, #16
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa4:	061b      	lsls	r3, r3, #24
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aac:	071b      	lsls	r3, r3, #28
 8005aae:	491b      	ldr	r1, [pc, #108]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ab4:	4b19      	ldr	r3, [pc, #100]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a18      	ldr	r2, [pc, #96]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 8005aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac0:	f7fc fd04 	bl	80024cc <HAL_GetTick>
 8005ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ac6:	e008      	b.n	8005ada <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ac8:	f7fc fd00 	bl	80024cc <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e05f      	b.n	8005b9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ada:	4b10      	ldr	r3, [pc, #64]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d0f0      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x47c>
 8005ae6:	e057      	b.n	8005b98 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ae8:	4b0c      	ldr	r3, [pc, #48]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a0b      	ldr	r2, [pc, #44]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 8005aee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005af2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af4:	f7fc fcea 	bl	80024cc <HAL_GetTick>
 8005af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005afa:	e008      	b.n	8005b0e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005afc:	f7fc fce6 	bl	80024cc <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e045      	b.n	8005b9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b0e:	4b03      	ldr	r3, [pc, #12]	; (8005b1c <HAL_RCC_OscConfig+0x4d0>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1f0      	bne.n	8005afc <HAL_RCC_OscConfig+0x4b0>
 8005b1a:	e03d      	b.n	8005b98 <HAL_RCC_OscConfig+0x54c>
 8005b1c:	40023800 	.word	0x40023800
 8005b20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005b24:	4b1f      	ldr	r3, [pc, #124]	; (8005ba4 <HAL_RCC_OscConfig+0x558>)
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d030      	beq.n	8005b94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d129      	bne.n	8005b94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d122      	bne.n	8005b94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b54:	4013      	ands	r3, r2
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b5a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d119      	bne.n	8005b94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6a:	085b      	lsrs	r3, r3, #1
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d10f      	bne.n	8005b94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d107      	bne.n	8005b94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d001      	beq.n	8005b98 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e000      	b.n	8005b9a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	40023800 	.word	0x40023800

08005ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e0d0      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bc0:	4b6a      	ldr	r3, [pc, #424]	; (8005d6c <HAL_RCC_ClockConfig+0x1c4>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 030f 	and.w	r3, r3, #15
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d910      	bls.n	8005bf0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bce:	4b67      	ldr	r3, [pc, #412]	; (8005d6c <HAL_RCC_ClockConfig+0x1c4>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f023 020f 	bic.w	r2, r3, #15
 8005bd6:	4965      	ldr	r1, [pc, #404]	; (8005d6c <HAL_RCC_ClockConfig+0x1c4>)
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bde:	4b63      	ldr	r3, [pc, #396]	; (8005d6c <HAL_RCC_ClockConfig+0x1c4>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 030f 	and.w	r3, r3, #15
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d001      	beq.n	8005bf0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e0b8      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d020      	beq.n	8005c3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0304 	and.w	r3, r3, #4
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d005      	beq.n	8005c14 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c08:	4b59      	ldr	r3, [pc, #356]	; (8005d70 <HAL_RCC_ClockConfig+0x1c8>)
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	4a58      	ldr	r2, [pc, #352]	; (8005d70 <HAL_RCC_ClockConfig+0x1c8>)
 8005c0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0308 	and.w	r3, r3, #8
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d005      	beq.n	8005c2c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c20:	4b53      	ldr	r3, [pc, #332]	; (8005d70 <HAL_RCC_ClockConfig+0x1c8>)
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	4a52      	ldr	r2, [pc, #328]	; (8005d70 <HAL_RCC_ClockConfig+0x1c8>)
 8005c26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c2c:	4b50      	ldr	r3, [pc, #320]	; (8005d70 <HAL_RCC_ClockConfig+0x1c8>)
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	494d      	ldr	r1, [pc, #308]	; (8005d70 <HAL_RCC_ClockConfig+0x1c8>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d040      	beq.n	8005ccc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d107      	bne.n	8005c62 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c52:	4b47      	ldr	r3, [pc, #284]	; (8005d70 <HAL_RCC_ClockConfig+0x1c8>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d115      	bne.n	8005c8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e07f      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d107      	bne.n	8005c7a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c6a:	4b41      	ldr	r3, [pc, #260]	; (8005d70 <HAL_RCC_ClockConfig+0x1c8>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d109      	bne.n	8005c8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e073      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c7a:	4b3d      	ldr	r3, [pc, #244]	; (8005d70 <HAL_RCC_ClockConfig+0x1c8>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e06b      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c8a:	4b39      	ldr	r3, [pc, #228]	; (8005d70 <HAL_RCC_ClockConfig+0x1c8>)
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f023 0203 	bic.w	r2, r3, #3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	4936      	ldr	r1, [pc, #216]	; (8005d70 <HAL_RCC_ClockConfig+0x1c8>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c9c:	f7fc fc16 	bl	80024cc <HAL_GetTick>
 8005ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca2:	e00a      	b.n	8005cba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ca4:	f7fc fc12 	bl	80024cc <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e053      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cba:	4b2d      	ldr	r3, [pc, #180]	; (8005d70 <HAL_RCC_ClockConfig+0x1c8>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f003 020c 	and.w	r2, r3, #12
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d1eb      	bne.n	8005ca4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ccc:	4b27      	ldr	r3, [pc, #156]	; (8005d6c <HAL_RCC_ClockConfig+0x1c4>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 030f 	and.w	r3, r3, #15
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d210      	bcs.n	8005cfc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cda:	4b24      	ldr	r3, [pc, #144]	; (8005d6c <HAL_RCC_ClockConfig+0x1c4>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f023 020f 	bic.w	r2, r3, #15
 8005ce2:	4922      	ldr	r1, [pc, #136]	; (8005d6c <HAL_RCC_ClockConfig+0x1c4>)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cea:	4b20      	ldr	r3, [pc, #128]	; (8005d6c <HAL_RCC_ClockConfig+0x1c4>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 030f 	and.w	r3, r3, #15
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d001      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e032      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d008      	beq.n	8005d1a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d08:	4b19      	ldr	r3, [pc, #100]	; (8005d70 <HAL_RCC_ClockConfig+0x1c8>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	4916      	ldr	r1, [pc, #88]	; (8005d70 <HAL_RCC_ClockConfig+0x1c8>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0308 	and.w	r3, r3, #8
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d009      	beq.n	8005d3a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d26:	4b12      	ldr	r3, [pc, #72]	; (8005d70 <HAL_RCC_ClockConfig+0x1c8>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	490e      	ldr	r1, [pc, #56]	; (8005d70 <HAL_RCC_ClockConfig+0x1c8>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d3a:	f000 f821 	bl	8005d80 <HAL_RCC_GetSysClockFreq>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	4b0b      	ldr	r3, [pc, #44]	; (8005d70 <HAL_RCC_ClockConfig+0x1c8>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	091b      	lsrs	r3, r3, #4
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	490a      	ldr	r1, [pc, #40]	; (8005d74 <HAL_RCC_ClockConfig+0x1cc>)
 8005d4c:	5ccb      	ldrb	r3, [r1, r3]
 8005d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d52:	4a09      	ldr	r2, [pc, #36]	; (8005d78 <HAL_RCC_ClockConfig+0x1d0>)
 8005d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d56:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <HAL_RCC_ClockConfig+0x1d4>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7fc f858 	bl	8001e10 <HAL_InitTick>

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	40023c00 	.word	0x40023c00
 8005d70:	40023800 	.word	0x40023800
 8005d74:	08020488 	.word	0x08020488
 8005d78:	20000000 	.word	0x20000000
 8005d7c:	20000004 	.word	0x20000004

08005d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d84:	b094      	sub	sp, #80	; 0x50
 8005d86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d90:	2300      	movs	r3, #0
 8005d92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005d94:	2300      	movs	r3, #0
 8005d96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d98:	4b79      	ldr	r3, [pc, #484]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f003 030c 	and.w	r3, r3, #12
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d00d      	beq.n	8005dc0 <HAL_RCC_GetSysClockFreq+0x40>
 8005da4:	2b08      	cmp	r3, #8
 8005da6:	f200 80e1 	bhi.w	8005f6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d002      	beq.n	8005db4 <HAL_RCC_GetSysClockFreq+0x34>
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d003      	beq.n	8005dba <HAL_RCC_GetSysClockFreq+0x3a>
 8005db2:	e0db      	b.n	8005f6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005db4:	4b73      	ldr	r3, [pc, #460]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x204>)
 8005db6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005db8:	e0db      	b.n	8005f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005dba:	4b73      	ldr	r3, [pc, #460]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x208>)
 8005dbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005dbe:	e0d8      	b.n	8005f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005dc0:	4b6f      	ldr	r3, [pc, #444]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dc8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005dca:	4b6d      	ldr	r3, [pc, #436]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d063      	beq.n	8005e9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dd6:	4b6a      	ldr	r3, [pc, #424]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	099b      	lsrs	r3, r3, #6
 8005ddc:	2200      	movs	r2, #0
 8005dde:	63bb      	str	r3, [r7, #56]	; 0x38
 8005de0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de8:	633b      	str	r3, [r7, #48]	; 0x30
 8005dea:	2300      	movs	r3, #0
 8005dec:	637b      	str	r3, [r7, #52]	; 0x34
 8005dee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005df2:	4622      	mov	r2, r4
 8005df4:	462b      	mov	r3, r5
 8005df6:	f04f 0000 	mov.w	r0, #0
 8005dfa:	f04f 0100 	mov.w	r1, #0
 8005dfe:	0159      	lsls	r1, r3, #5
 8005e00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e04:	0150      	lsls	r0, r2, #5
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	1a51      	subs	r1, r2, r1
 8005e0e:	6139      	str	r1, [r7, #16]
 8005e10:	4629      	mov	r1, r5
 8005e12:	eb63 0301 	sbc.w	r3, r3, r1
 8005e16:	617b      	str	r3, [r7, #20]
 8005e18:	f04f 0200 	mov.w	r2, #0
 8005e1c:	f04f 0300 	mov.w	r3, #0
 8005e20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e24:	4659      	mov	r1, fp
 8005e26:	018b      	lsls	r3, r1, #6
 8005e28:	4651      	mov	r1, sl
 8005e2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e2e:	4651      	mov	r1, sl
 8005e30:	018a      	lsls	r2, r1, #6
 8005e32:	4651      	mov	r1, sl
 8005e34:	ebb2 0801 	subs.w	r8, r2, r1
 8005e38:	4659      	mov	r1, fp
 8005e3a:	eb63 0901 	sbc.w	r9, r3, r1
 8005e3e:	f04f 0200 	mov.w	r2, #0
 8005e42:	f04f 0300 	mov.w	r3, #0
 8005e46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e52:	4690      	mov	r8, r2
 8005e54:	4699      	mov	r9, r3
 8005e56:	4623      	mov	r3, r4
 8005e58:	eb18 0303 	adds.w	r3, r8, r3
 8005e5c:	60bb      	str	r3, [r7, #8]
 8005e5e:	462b      	mov	r3, r5
 8005e60:	eb49 0303 	adc.w	r3, r9, r3
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	f04f 0200 	mov.w	r2, #0
 8005e6a:	f04f 0300 	mov.w	r3, #0
 8005e6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e72:	4629      	mov	r1, r5
 8005e74:	024b      	lsls	r3, r1, #9
 8005e76:	4621      	mov	r1, r4
 8005e78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	024a      	lsls	r2, r1, #9
 8005e80:	4610      	mov	r0, r2
 8005e82:	4619      	mov	r1, r3
 8005e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e86:	2200      	movs	r2, #0
 8005e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e90:	f7fa fa26 	bl	80002e0 <__aeabi_uldivmod>
 8005e94:	4602      	mov	r2, r0
 8005e96:	460b      	mov	r3, r1
 8005e98:	4613      	mov	r3, r2
 8005e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e9c:	e058      	b.n	8005f50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e9e:	4b38      	ldr	r3, [pc, #224]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	099b      	lsrs	r3, r3, #6
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	4611      	mov	r1, r2
 8005eaa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005eae:	623b      	str	r3, [r7, #32]
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8005eb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005eb8:	4642      	mov	r2, r8
 8005eba:	464b      	mov	r3, r9
 8005ebc:	f04f 0000 	mov.w	r0, #0
 8005ec0:	f04f 0100 	mov.w	r1, #0
 8005ec4:	0159      	lsls	r1, r3, #5
 8005ec6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005eca:	0150      	lsls	r0, r2, #5
 8005ecc:	4602      	mov	r2, r0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	4641      	mov	r1, r8
 8005ed2:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ed6:	4649      	mov	r1, r9
 8005ed8:	eb63 0b01 	sbc.w	fp, r3, r1
 8005edc:	f04f 0200 	mov.w	r2, #0
 8005ee0:	f04f 0300 	mov.w	r3, #0
 8005ee4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ee8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005eec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ef0:	ebb2 040a 	subs.w	r4, r2, sl
 8005ef4:	eb63 050b 	sbc.w	r5, r3, fp
 8005ef8:	f04f 0200 	mov.w	r2, #0
 8005efc:	f04f 0300 	mov.w	r3, #0
 8005f00:	00eb      	lsls	r3, r5, #3
 8005f02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f06:	00e2      	lsls	r2, r4, #3
 8005f08:	4614      	mov	r4, r2
 8005f0a:	461d      	mov	r5, r3
 8005f0c:	4643      	mov	r3, r8
 8005f0e:	18e3      	adds	r3, r4, r3
 8005f10:	603b      	str	r3, [r7, #0]
 8005f12:	464b      	mov	r3, r9
 8005f14:	eb45 0303 	adc.w	r3, r5, r3
 8005f18:	607b      	str	r3, [r7, #4]
 8005f1a:	f04f 0200 	mov.w	r2, #0
 8005f1e:	f04f 0300 	mov.w	r3, #0
 8005f22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f26:	4629      	mov	r1, r5
 8005f28:	028b      	lsls	r3, r1, #10
 8005f2a:	4621      	mov	r1, r4
 8005f2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f30:	4621      	mov	r1, r4
 8005f32:	028a      	lsls	r2, r1, #10
 8005f34:	4610      	mov	r0, r2
 8005f36:	4619      	mov	r1, r3
 8005f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	61bb      	str	r3, [r7, #24]
 8005f3e:	61fa      	str	r2, [r7, #28]
 8005f40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f44:	f7fa f9cc 	bl	80002e0 <__aeabi_uldivmod>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005f50:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	0c1b      	lsrs	r3, r3, #16
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	005b      	lsls	r3, r3, #1
 8005f5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005f60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f6a:	e002      	b.n	8005f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f6c:	4b05      	ldr	r3, [pc, #20]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3750      	adds	r7, #80	; 0x50
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f7e:	bf00      	nop
 8005f80:	40023800 	.word	0x40023800
 8005f84:	00f42400 	.word	0x00f42400
 8005f88:	007a1200 	.word	0x007a1200

08005f8c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f90:	4b03      	ldr	r3, [pc, #12]	; (8005fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f92:	681b      	ldr	r3, [r3, #0]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	20000000 	.word	0x20000000

08005fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005fa8:	f7ff fff0 	bl	8005f8c <HAL_RCC_GetHCLKFreq>
 8005fac:	4602      	mov	r2, r0
 8005fae:	4b05      	ldr	r3, [pc, #20]	; (8005fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	0a9b      	lsrs	r3, r3, #10
 8005fb4:	f003 0307 	and.w	r3, r3, #7
 8005fb8:	4903      	ldr	r1, [pc, #12]	; (8005fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fba:	5ccb      	ldrb	r3, [r1, r3]
 8005fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	40023800 	.word	0x40023800
 8005fc8:	08020498 	.word	0x08020498

08005fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005fd0:	f7ff ffdc 	bl	8005f8c <HAL_RCC_GetHCLKFreq>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	4b05      	ldr	r3, [pc, #20]	; (8005fec <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	0b5b      	lsrs	r3, r3, #13
 8005fdc:	f003 0307 	and.w	r3, r3, #7
 8005fe0:	4903      	ldr	r1, [pc, #12]	; (8005ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fe2:	5ccb      	ldrb	r3, [r1, r3]
 8005fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	40023800 	.word	0x40023800
 8005ff0:	08020498 	.word	0x08020498

08005ff4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	220f      	movs	r2, #15
 8006002:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006004:	4b12      	ldr	r3, [pc, #72]	; (8006050 <HAL_RCC_GetClockConfig+0x5c>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f003 0203 	and.w	r2, r3, #3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006010:	4b0f      	ldr	r3, [pc, #60]	; (8006050 <HAL_RCC_GetClockConfig+0x5c>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800601c:	4b0c      	ldr	r3, [pc, #48]	; (8006050 <HAL_RCC_GetClockConfig+0x5c>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006028:	4b09      	ldr	r3, [pc, #36]	; (8006050 <HAL_RCC_GetClockConfig+0x5c>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	08db      	lsrs	r3, r3, #3
 800602e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006036:	4b07      	ldr	r3, [pc, #28]	; (8006054 <HAL_RCC_GetClockConfig+0x60>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 020f 	and.w	r2, r3, #15
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	601a      	str	r2, [r3, #0]
}
 8006042:	bf00      	nop
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	40023800 	.word	0x40023800
 8006054:	40023c00 	.word	0x40023c00

08006058 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006060:	2300      	movs	r3, #0
 8006062:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006064:	2300      	movs	r3, #0
 8006066:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006068:	2300      	movs	r3, #0
 800606a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800606c:	2300      	movs	r3, #0
 800606e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006070:	2300      	movs	r3, #0
 8006072:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b00      	cmp	r3, #0
 800607e:	d012      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006080:	4b69      	ldr	r3, [pc, #420]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	4a68      	ldr	r2, [pc, #416]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006086:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800608a:	6093      	str	r3, [r2, #8]
 800608c:	4b66      	ldr	r3, [pc, #408]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800608e:	689a      	ldr	r2, [r3, #8]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006094:	4964      	ldr	r1, [pc, #400]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006096:	4313      	orrs	r3, r2
 8006098:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80060a2:	2301      	movs	r3, #1
 80060a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d017      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060b2:	4b5d      	ldr	r3, [pc, #372]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c0:	4959      	ldr	r1, [pc, #356]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060d0:	d101      	bne.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80060d2:	2301      	movs	r3, #1
 80060d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80060de:	2301      	movs	r3, #1
 80060e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d017      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80060ee:	4b4e      	ldr	r3, [pc, #312]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fc:	494a      	ldr	r1, [pc, #296]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006108:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800610c:	d101      	bne.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800610e:	2301      	movs	r3, #1
 8006110:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800611a:	2301      	movs	r3, #1
 800611c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800612a:	2301      	movs	r3, #1
 800612c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0320 	and.w	r3, r3, #32
 8006136:	2b00      	cmp	r3, #0
 8006138:	f000 808b 	beq.w	8006252 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800613c:	4b3a      	ldr	r3, [pc, #232]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006140:	4a39      	ldr	r2, [pc, #228]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006146:	6413      	str	r3, [r2, #64]	; 0x40
 8006148:	4b37      	ldr	r3, [pc, #220]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800614a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006150:	60bb      	str	r3, [r7, #8]
 8006152:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006154:	4b35      	ldr	r3, [pc, #212]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a34      	ldr	r2, [pc, #208]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800615a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800615e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006160:	f7fc f9b4 	bl	80024cc <HAL_GetTick>
 8006164:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006166:	e008      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006168:	f7fc f9b0 	bl	80024cc <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	2b64      	cmp	r3, #100	; 0x64
 8006174:	d901      	bls.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e38f      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800617a:	4b2c      	ldr	r3, [pc, #176]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006182:	2b00      	cmp	r3, #0
 8006184:	d0f0      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006186:	4b28      	ldr	r3, [pc, #160]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800618a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800618e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d035      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d02e      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061a4:	4b20      	ldr	r3, [pc, #128]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061ae:	4b1e      	ldr	r3, [pc, #120]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b2:	4a1d      	ldr	r2, [pc, #116]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061b8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061ba:	4b1b      	ldr	r3, [pc, #108]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061be:	4a1a      	ldr	r2, [pc, #104]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80061c6:	4a18      	ldr	r2, [pc, #96]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80061cc:	4b16      	ldr	r3, [pc, #88]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d114      	bne.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d8:	f7fc f978 	bl	80024cc <HAL_GetTick>
 80061dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061de:	e00a      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061e0:	f7fc f974 	bl	80024cc <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d901      	bls.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e351      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061f6:	4b0c      	ldr	r3, [pc, #48]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d0ee      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800620a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800620e:	d111      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006210:	4b05      	ldr	r3, [pc, #20]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800621c:	4b04      	ldr	r3, [pc, #16]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800621e:	400b      	ands	r3, r1
 8006220:	4901      	ldr	r1, [pc, #4]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006222:	4313      	orrs	r3, r2
 8006224:	608b      	str	r3, [r1, #8]
 8006226:	e00b      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006228:	40023800 	.word	0x40023800
 800622c:	40007000 	.word	0x40007000
 8006230:	0ffffcff 	.word	0x0ffffcff
 8006234:	4bac      	ldr	r3, [pc, #688]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	4aab      	ldr	r2, [pc, #684]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800623a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800623e:	6093      	str	r3, [r2, #8]
 8006240:	4ba9      	ldr	r3, [pc, #676]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006242:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800624c:	49a6      	ldr	r1, [pc, #664]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800624e:	4313      	orrs	r3, r2
 8006250:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0310 	and.w	r3, r3, #16
 800625a:	2b00      	cmp	r3, #0
 800625c:	d010      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800625e:	4ba2      	ldr	r3, [pc, #648]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006264:	4aa0      	ldr	r2, [pc, #640]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006266:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800626a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800626e:	4b9e      	ldr	r3, [pc, #632]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006270:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006278:	499b      	ldr	r1, [pc, #620]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800627a:	4313      	orrs	r3, r2
 800627c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00a      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800628c:	4b96      	ldr	r3, [pc, #600]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800628e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006292:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800629a:	4993      	ldr	r1, [pc, #588]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800629c:	4313      	orrs	r3, r2
 800629e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00a      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062ae:	4b8e      	ldr	r3, [pc, #568]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062bc:	498a      	ldr	r1, [pc, #552]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00a      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80062d0:	4b85      	ldr	r3, [pc, #532]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062de:	4982      	ldr	r1, [pc, #520]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00a      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80062f2:	4b7d      	ldr	r3, [pc, #500]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006300:	4979      	ldr	r1, [pc, #484]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006302:	4313      	orrs	r3, r2
 8006304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00a      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006314:	4b74      	ldr	r3, [pc, #464]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800631a:	f023 0203 	bic.w	r2, r3, #3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006322:	4971      	ldr	r1, [pc, #452]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006324:	4313      	orrs	r3, r2
 8006326:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00a      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006336:	4b6c      	ldr	r3, [pc, #432]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633c:	f023 020c 	bic.w	r2, r3, #12
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006344:	4968      	ldr	r1, [pc, #416]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006346:	4313      	orrs	r3, r2
 8006348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00a      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006358:	4b63      	ldr	r3, [pc, #396]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800635a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800635e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006366:	4960      	ldr	r1, [pc, #384]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006368:	4313      	orrs	r3, r2
 800636a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00a      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800637a:	4b5b      	ldr	r3, [pc, #364]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800637c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006380:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006388:	4957      	ldr	r1, [pc, #348]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800638a:	4313      	orrs	r3, r2
 800638c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00a      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800639c:	4b52      	ldr	r3, [pc, #328]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800639e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063aa:	494f      	ldr	r1, [pc, #316]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00a      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80063be:	4b4a      	ldr	r3, [pc, #296]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063cc:	4946      	ldr	r1, [pc, #280]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00a      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80063e0:	4b41      	ldr	r3, [pc, #260]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ee:	493e      	ldr	r1, [pc, #248]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00a      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006402:	4b39      	ldr	r3, [pc, #228]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006408:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006410:	4935      	ldr	r1, [pc, #212]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006412:	4313      	orrs	r3, r2
 8006414:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00a      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006424:	4b30      	ldr	r3, [pc, #192]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800642a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006432:	492d      	ldr	r1, [pc, #180]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006434:	4313      	orrs	r3, r2
 8006436:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d011      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006446:	4b28      	ldr	r3, [pc, #160]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800644c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006454:	4924      	ldr	r1, [pc, #144]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006456:	4313      	orrs	r3, r2
 8006458:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006460:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006464:	d101      	bne.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006466:	2301      	movs	r3, #1
 8006468:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0308 	and.w	r3, r3, #8
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006476:	2301      	movs	r3, #1
 8006478:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00a      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006486:	4b18      	ldr	r3, [pc, #96]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800648c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006494:	4914      	ldr	r1, [pc, #80]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006496:	4313      	orrs	r3, r2
 8006498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00b      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80064a8:	4b0f      	ldr	r3, [pc, #60]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064b8:	490b      	ldr	r1, [pc, #44]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00f      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80064cc:	4b06      	ldr	r3, [pc, #24]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064dc:	4902      	ldr	r1, [pc, #8]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80064e4:	e002      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x494>
 80064e6:	bf00      	nop
 80064e8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00b      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064f8:	4b8a      	ldr	r3, [pc, #552]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006508:	4986      	ldr	r1, [pc, #536]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800650a:	4313      	orrs	r3, r2
 800650c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00b      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800651c:	4b81      	ldr	r3, [pc, #516]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800651e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006522:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800652c:	497d      	ldr	r1, [pc, #500]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800652e:	4313      	orrs	r3, r2
 8006530:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d006      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 80d6 	beq.w	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006548:	4b76      	ldr	r3, [pc, #472]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a75      	ldr	r2, [pc, #468]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800654e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006552:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006554:	f7fb ffba 	bl	80024cc <HAL_GetTick>
 8006558:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800655a:	e008      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800655c:	f7fb ffb6 	bl	80024cc <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b64      	cmp	r3, #100	; 0x64
 8006568:	d901      	bls.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e195      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800656e:	4b6d      	ldr	r3, [pc, #436]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1f0      	bne.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b00      	cmp	r3, #0
 8006584:	d021      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x572>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658a:	2b00      	cmp	r3, #0
 800658c:	d11d      	bne.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800658e:	4b65      	ldr	r3, [pc, #404]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006594:	0c1b      	lsrs	r3, r3, #16
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800659c:	4b61      	ldr	r3, [pc, #388]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800659e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065a2:	0e1b      	lsrs	r3, r3, #24
 80065a4:	f003 030f 	and.w	r3, r3, #15
 80065a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	019a      	lsls	r2, r3, #6
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	041b      	lsls	r3, r3, #16
 80065b4:	431a      	orrs	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	061b      	lsls	r3, r3, #24
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	071b      	lsls	r3, r3, #28
 80065c2:	4958      	ldr	r1, [pc, #352]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d004      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065de:	d00a      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d02e      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065f4:	d129      	bne.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80065f6:	4b4b      	ldr	r3, [pc, #300]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065fc:	0c1b      	lsrs	r3, r3, #16
 80065fe:	f003 0303 	and.w	r3, r3, #3
 8006602:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006604:	4b47      	ldr	r3, [pc, #284]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800660a:	0f1b      	lsrs	r3, r3, #28
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	019a      	lsls	r2, r3, #6
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	041b      	lsls	r3, r3, #16
 800661c:	431a      	orrs	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	061b      	lsls	r3, r3, #24
 8006624:	431a      	orrs	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	071b      	lsls	r3, r3, #28
 800662a:	493e      	ldr	r1, [pc, #248]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800662c:	4313      	orrs	r3, r2
 800662e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006632:	4b3c      	ldr	r3, [pc, #240]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006638:	f023 021f 	bic.w	r2, r3, #31
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	3b01      	subs	r3, #1
 8006642:	4938      	ldr	r1, [pc, #224]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006644:	4313      	orrs	r3, r2
 8006646:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d01d      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006656:	4b33      	ldr	r3, [pc, #204]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800665c:	0e1b      	lsrs	r3, r3, #24
 800665e:	f003 030f 	and.w	r3, r3, #15
 8006662:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006664:	4b2f      	ldr	r3, [pc, #188]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800666a:	0f1b      	lsrs	r3, r3, #28
 800666c:	f003 0307 	and.w	r3, r3, #7
 8006670:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	019a      	lsls	r2, r3, #6
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	041b      	lsls	r3, r3, #16
 800667e:	431a      	orrs	r2, r3
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	061b      	lsls	r3, r3, #24
 8006684:	431a      	orrs	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	071b      	lsls	r3, r3, #28
 800668a:	4926      	ldr	r1, [pc, #152]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800668c:	4313      	orrs	r3, r2
 800668e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d011      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	019a      	lsls	r2, r3, #6
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	041b      	lsls	r3, r3, #16
 80066aa:	431a      	orrs	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	061b      	lsls	r3, r3, #24
 80066b2:	431a      	orrs	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	071b      	lsls	r3, r3, #28
 80066ba:	491a      	ldr	r1, [pc, #104]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80066c2:	4b18      	ldr	r3, [pc, #96]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a17      	ldr	r2, [pc, #92]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066ce:	f7fb fefd 	bl	80024cc <HAL_GetTick>
 80066d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066d4:	e008      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80066d6:	f7fb fef9 	bl	80024cc <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	2b64      	cmp	r3, #100	; 0x64
 80066e2:	d901      	bls.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e0d8      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066e8:	4b0e      	ldr	r3, [pc, #56]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d0f0      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	f040 80ce 	bne.w	8006898 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80066fc:	4b09      	ldr	r3, [pc, #36]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a08      	ldr	r2, [pc, #32]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006706:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006708:	f7fb fee0 	bl	80024cc <HAL_GetTick>
 800670c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800670e:	e00b      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006710:	f7fb fedc 	bl	80024cc <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b64      	cmp	r3, #100	; 0x64
 800671c:	d904      	bls.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e0bb      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006722:	bf00      	nop
 8006724:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006728:	4b5e      	ldr	r3, [pc, #376]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006734:	d0ec      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d003      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006746:	2b00      	cmp	r3, #0
 8006748:	d009      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006752:	2b00      	cmp	r3, #0
 8006754:	d02e      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675a:	2b00      	cmp	r3, #0
 800675c:	d12a      	bne.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800675e:	4b51      	ldr	r3, [pc, #324]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006764:	0c1b      	lsrs	r3, r3, #16
 8006766:	f003 0303 	and.w	r3, r3, #3
 800676a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800676c:	4b4d      	ldr	r3, [pc, #308]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800676e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006772:	0f1b      	lsrs	r3, r3, #28
 8006774:	f003 0307 	and.w	r3, r3, #7
 8006778:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	019a      	lsls	r2, r3, #6
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	041b      	lsls	r3, r3, #16
 8006784:	431a      	orrs	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	061b      	lsls	r3, r3, #24
 800678c:	431a      	orrs	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	071b      	lsls	r3, r3, #28
 8006792:	4944      	ldr	r1, [pc, #272]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006794:	4313      	orrs	r3, r2
 8006796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800679a:	4b42      	ldr	r3, [pc, #264]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800679c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a8:	3b01      	subs	r3, #1
 80067aa:	021b      	lsls	r3, r3, #8
 80067ac:	493d      	ldr	r1, [pc, #244]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d022      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067c8:	d11d      	bne.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067ca:	4b36      	ldr	r3, [pc, #216]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d0:	0e1b      	lsrs	r3, r3, #24
 80067d2:	f003 030f 	and.w	r3, r3, #15
 80067d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067d8:	4b32      	ldr	r3, [pc, #200]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067de:	0f1b      	lsrs	r3, r3, #28
 80067e0:	f003 0307 	and.w	r3, r3, #7
 80067e4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	019a      	lsls	r2, r3, #6
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	041b      	lsls	r3, r3, #16
 80067f2:	431a      	orrs	r2, r3
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	061b      	lsls	r3, r3, #24
 80067f8:	431a      	orrs	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	071b      	lsls	r3, r3, #28
 80067fe:	4929      	ldr	r1, [pc, #164]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006800:	4313      	orrs	r3, r2
 8006802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0308 	and.w	r3, r3, #8
 800680e:	2b00      	cmp	r3, #0
 8006810:	d028      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006812:	4b24      	ldr	r3, [pc, #144]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006818:	0e1b      	lsrs	r3, r3, #24
 800681a:	f003 030f 	and.w	r3, r3, #15
 800681e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006820:	4b20      	ldr	r3, [pc, #128]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006826:	0c1b      	lsrs	r3, r3, #16
 8006828:	f003 0303 	and.w	r3, r3, #3
 800682c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	019a      	lsls	r2, r3, #6
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	041b      	lsls	r3, r3, #16
 8006838:	431a      	orrs	r2, r3
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	061b      	lsls	r3, r3, #24
 800683e:	431a      	orrs	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	69db      	ldr	r3, [r3, #28]
 8006844:	071b      	lsls	r3, r3, #28
 8006846:	4917      	ldr	r1, [pc, #92]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006848:	4313      	orrs	r3, r2
 800684a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800684e:	4b15      	ldr	r3, [pc, #84]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006854:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685c:	4911      	ldr	r1, [pc, #68]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800685e:	4313      	orrs	r3, r2
 8006860:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006864:	4b0f      	ldr	r3, [pc, #60]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a0e      	ldr	r2, [pc, #56]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800686a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800686e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006870:	f7fb fe2c 	bl	80024cc <HAL_GetTick>
 8006874:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006876:	e008      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006878:	f7fb fe28 	bl	80024cc <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	2b64      	cmp	r3, #100	; 0x64
 8006884:	d901      	bls.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e007      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800688a:	4b06      	ldr	r3, [pc, #24]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006892:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006896:	d1ef      	bne.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3720      	adds	r7, #32
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	40023800 	.word	0x40023800

080068a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d101      	bne.n	80068ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e049      	b.n	800694e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d106      	bne.n	80068d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f841 	bl	8006956 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2202      	movs	r2, #2
 80068d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	3304      	adds	r3, #4
 80068e4:	4619      	mov	r1, r3
 80068e6:	4610      	mov	r0, r2
 80068e8:	f000 fa00 	bl	8006cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006956:	b480      	push	{r7}
 8006958:	b083      	sub	sp, #12
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800695e:	bf00      	nop
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
	...

0800696c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800697a:	b2db      	uxtb	r3, r3
 800697c:	2b01      	cmp	r3, #1
 800697e:	d001      	beq.n	8006984 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e054      	b.n	8006a2e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2202      	movs	r2, #2
 8006988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68da      	ldr	r2, [r3, #12]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f042 0201 	orr.w	r2, r2, #1
 800699a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a26      	ldr	r2, [pc, #152]	; (8006a3c <HAL_TIM_Base_Start_IT+0xd0>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d022      	beq.n	80069ec <HAL_TIM_Base_Start_IT+0x80>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ae:	d01d      	beq.n	80069ec <HAL_TIM_Base_Start_IT+0x80>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a22      	ldr	r2, [pc, #136]	; (8006a40 <HAL_TIM_Base_Start_IT+0xd4>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d018      	beq.n	80069ec <HAL_TIM_Base_Start_IT+0x80>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a21      	ldr	r2, [pc, #132]	; (8006a44 <HAL_TIM_Base_Start_IT+0xd8>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d013      	beq.n	80069ec <HAL_TIM_Base_Start_IT+0x80>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a1f      	ldr	r2, [pc, #124]	; (8006a48 <HAL_TIM_Base_Start_IT+0xdc>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d00e      	beq.n	80069ec <HAL_TIM_Base_Start_IT+0x80>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a1e      	ldr	r2, [pc, #120]	; (8006a4c <HAL_TIM_Base_Start_IT+0xe0>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d009      	beq.n	80069ec <HAL_TIM_Base_Start_IT+0x80>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a1c      	ldr	r2, [pc, #112]	; (8006a50 <HAL_TIM_Base_Start_IT+0xe4>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d004      	beq.n	80069ec <HAL_TIM_Base_Start_IT+0x80>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a1b      	ldr	r2, [pc, #108]	; (8006a54 <HAL_TIM_Base_Start_IT+0xe8>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d115      	bne.n	8006a18 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689a      	ldr	r2, [r3, #8]
 80069f2:	4b19      	ldr	r3, [pc, #100]	; (8006a58 <HAL_TIM_Base_Start_IT+0xec>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b06      	cmp	r3, #6
 80069fc:	d015      	beq.n	8006a2a <HAL_TIM_Base_Start_IT+0xbe>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a04:	d011      	beq.n	8006a2a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f042 0201 	orr.w	r2, r2, #1
 8006a14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a16:	e008      	b.n	8006a2a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f042 0201 	orr.w	r2, r2, #1
 8006a26:	601a      	str	r2, [r3, #0]
 8006a28:	e000      	b.n	8006a2c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3714      	adds	r7, #20
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	40010000 	.word	0x40010000
 8006a40:	40000400 	.word	0x40000400
 8006a44:	40000800 	.word	0x40000800
 8006a48:	40000c00 	.word	0x40000c00
 8006a4c:	40010400 	.word	0x40010400
 8006a50:	40014000 	.word	0x40014000
 8006a54:	40001800 	.word	0x40001800
 8006a58:	00010007 	.word	0x00010007

08006a5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d122      	bne.n	8006ab8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d11b      	bne.n	8006ab8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f06f 0202 	mvn.w	r2, #2
 8006a88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	f003 0303 	and.w	r3, r3, #3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d003      	beq.n	8006aa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f905 	bl	8006cae <HAL_TIM_IC_CaptureCallback>
 8006aa4:	e005      	b.n	8006ab2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f8f7 	bl	8006c9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 f908 	bl	8006cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	f003 0304 	and.w	r3, r3, #4
 8006ac2:	2b04      	cmp	r3, #4
 8006ac4:	d122      	bne.n	8006b0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f003 0304 	and.w	r3, r3, #4
 8006ad0:	2b04      	cmp	r3, #4
 8006ad2:	d11b      	bne.n	8006b0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f06f 0204 	mvn.w	r2, #4
 8006adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f8db 	bl	8006cae <HAL_TIM_IC_CaptureCallback>
 8006af8:	e005      	b.n	8006b06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f8cd 	bl	8006c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f8de 	bl	8006cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	f003 0308 	and.w	r3, r3, #8
 8006b16:	2b08      	cmp	r3, #8
 8006b18:	d122      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	f003 0308 	and.w	r3, r3, #8
 8006b24:	2b08      	cmp	r3, #8
 8006b26:	d11b      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f06f 0208 	mvn.w	r2, #8
 8006b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2204      	movs	r2, #4
 8006b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	f003 0303 	and.w	r3, r3, #3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f8b1 	bl	8006cae <HAL_TIM_IC_CaptureCallback>
 8006b4c:	e005      	b.n	8006b5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f8a3 	bl	8006c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f8b4 	bl	8006cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f003 0310 	and.w	r3, r3, #16
 8006b6a:	2b10      	cmp	r3, #16
 8006b6c:	d122      	bne.n	8006bb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f003 0310 	and.w	r3, r3, #16
 8006b78:	2b10      	cmp	r3, #16
 8006b7a:	d11b      	bne.n	8006bb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f06f 0210 	mvn.w	r2, #16
 8006b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2208      	movs	r2, #8
 8006b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d003      	beq.n	8006ba2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f887 	bl	8006cae <HAL_TIM_IC_CaptureCallback>
 8006ba0:	e005      	b.n	8006bae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f879 	bl	8006c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f88a 	bl	8006cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d10e      	bne.n	8006be0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d107      	bne.n	8006be0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f06f 0201 	mvn.w	r2, #1
 8006bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7fa ff68 	bl	8001ab0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bea:	2b80      	cmp	r3, #128	; 0x80
 8006bec:	d10e      	bne.n	8006c0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf8:	2b80      	cmp	r3, #128	; 0x80
 8006bfa:	d107      	bne.n	8006c0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f91a 	bl	8006e40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c1a:	d10e      	bne.n	8006c3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c26:	2b80      	cmp	r3, #128	; 0x80
 8006c28:	d107      	bne.n	8006c3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f90d 	bl	8006e54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c44:	2b40      	cmp	r3, #64	; 0x40
 8006c46:	d10e      	bne.n	8006c66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c52:	2b40      	cmp	r3, #64	; 0x40
 8006c54:	d107      	bne.n	8006c66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f838 	bl	8006cd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	f003 0320 	and.w	r3, r3, #32
 8006c70:	2b20      	cmp	r3, #32
 8006c72:	d10e      	bne.n	8006c92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	f003 0320 	and.w	r3, r3, #32
 8006c7e:	2b20      	cmp	r3, #32
 8006c80:	d107      	bne.n	8006c92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f06f 0220 	mvn.w	r2, #32
 8006c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f8cd 	bl	8006e2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c92:	bf00      	nop
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ca2:	bf00      	nop
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b083      	sub	sp, #12
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cb6:	bf00      	nop
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b083      	sub	sp, #12
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cca:	bf00      	nop
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cde:	bf00      	nop
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
	...

08006cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a40      	ldr	r2, [pc, #256]	; (8006e00 <TIM_Base_SetConfig+0x114>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d013      	beq.n	8006d2c <TIM_Base_SetConfig+0x40>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d0a:	d00f      	beq.n	8006d2c <TIM_Base_SetConfig+0x40>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a3d      	ldr	r2, [pc, #244]	; (8006e04 <TIM_Base_SetConfig+0x118>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d00b      	beq.n	8006d2c <TIM_Base_SetConfig+0x40>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a3c      	ldr	r2, [pc, #240]	; (8006e08 <TIM_Base_SetConfig+0x11c>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d007      	beq.n	8006d2c <TIM_Base_SetConfig+0x40>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a3b      	ldr	r2, [pc, #236]	; (8006e0c <TIM_Base_SetConfig+0x120>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d003      	beq.n	8006d2c <TIM_Base_SetConfig+0x40>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a3a      	ldr	r2, [pc, #232]	; (8006e10 <TIM_Base_SetConfig+0x124>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d108      	bne.n	8006d3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a2f      	ldr	r2, [pc, #188]	; (8006e00 <TIM_Base_SetConfig+0x114>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d02b      	beq.n	8006d9e <TIM_Base_SetConfig+0xb2>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d4c:	d027      	beq.n	8006d9e <TIM_Base_SetConfig+0xb2>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a2c      	ldr	r2, [pc, #176]	; (8006e04 <TIM_Base_SetConfig+0x118>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d023      	beq.n	8006d9e <TIM_Base_SetConfig+0xb2>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a2b      	ldr	r2, [pc, #172]	; (8006e08 <TIM_Base_SetConfig+0x11c>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d01f      	beq.n	8006d9e <TIM_Base_SetConfig+0xb2>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a2a      	ldr	r2, [pc, #168]	; (8006e0c <TIM_Base_SetConfig+0x120>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d01b      	beq.n	8006d9e <TIM_Base_SetConfig+0xb2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a29      	ldr	r2, [pc, #164]	; (8006e10 <TIM_Base_SetConfig+0x124>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d017      	beq.n	8006d9e <TIM_Base_SetConfig+0xb2>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a28      	ldr	r2, [pc, #160]	; (8006e14 <TIM_Base_SetConfig+0x128>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d013      	beq.n	8006d9e <TIM_Base_SetConfig+0xb2>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a27      	ldr	r2, [pc, #156]	; (8006e18 <TIM_Base_SetConfig+0x12c>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d00f      	beq.n	8006d9e <TIM_Base_SetConfig+0xb2>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a26      	ldr	r2, [pc, #152]	; (8006e1c <TIM_Base_SetConfig+0x130>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d00b      	beq.n	8006d9e <TIM_Base_SetConfig+0xb2>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a25      	ldr	r2, [pc, #148]	; (8006e20 <TIM_Base_SetConfig+0x134>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d007      	beq.n	8006d9e <TIM_Base_SetConfig+0xb2>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a24      	ldr	r2, [pc, #144]	; (8006e24 <TIM_Base_SetConfig+0x138>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d003      	beq.n	8006d9e <TIM_Base_SetConfig+0xb2>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a23      	ldr	r2, [pc, #140]	; (8006e28 <TIM_Base_SetConfig+0x13c>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d108      	bne.n	8006db0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	689a      	ldr	r2, [r3, #8]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a0a      	ldr	r2, [pc, #40]	; (8006e00 <TIM_Base_SetConfig+0x114>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d003      	beq.n	8006de4 <TIM_Base_SetConfig+0xf8>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a0c      	ldr	r2, [pc, #48]	; (8006e10 <TIM_Base_SetConfig+0x124>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d103      	bne.n	8006dec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	691a      	ldr	r2, [r3, #16]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	615a      	str	r2, [r3, #20]
}
 8006df2:	bf00      	nop
 8006df4:	3714      	adds	r7, #20
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	40010000 	.word	0x40010000
 8006e04:	40000400 	.word	0x40000400
 8006e08:	40000800 	.word	0x40000800
 8006e0c:	40000c00 	.word	0x40000c00
 8006e10:	40010400 	.word	0x40010400
 8006e14:	40014000 	.word	0x40014000
 8006e18:	40014400 	.word	0x40014400
 8006e1c:	40014800 	.word	0x40014800
 8006e20:	40001800 	.word	0x40001800
 8006e24:	40001c00 	.word	0x40001c00
 8006e28:	40002000 	.word	0x40002000

08006e2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d101      	bne.n	8006e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e040      	b.n	8006efc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d106      	bne.n	8006e90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7fa feac 	bl	8001be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2224      	movs	r2, #36	; 0x24
 8006e94:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f022 0201 	bic.w	r2, r2, #1
 8006ea4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fbc2 	bl	8007630 <UART_SetConfig>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d101      	bne.n	8006eb6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e022      	b.n	8006efc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d002      	beq.n	8006ec4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fe1a 	bl	8007af8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ed2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689a      	ldr	r2, [r3, #8]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ee2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f042 0201 	orr.w	r2, r2, #1
 8006ef2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fea1 	bl	8007c3c <UART_CheckIdleState>
 8006efa:	4603      	mov	r3, r0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b08a      	sub	sp, #40	; 0x28
 8006f08:	af02      	add	r7, sp, #8
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	603b      	str	r3, [r7, #0]
 8006f10:	4613      	mov	r3, r2
 8006f12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f18:	2b20      	cmp	r3, #32
 8006f1a:	d171      	bne.n	8007000 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d002      	beq.n	8006f28 <HAL_UART_Transmit+0x24>
 8006f22:	88fb      	ldrh	r3, [r7, #6]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e06a      	b.n	8007002 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2221      	movs	r2, #33	; 0x21
 8006f38:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f3a:	f7fb fac7 	bl	80024cc <HAL_GetTick>
 8006f3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	88fa      	ldrh	r2, [r7, #6]
 8006f44:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	88fa      	ldrh	r2, [r7, #6]
 8006f4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f58:	d108      	bne.n	8006f6c <HAL_UART_Transmit+0x68>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d104      	bne.n	8006f6c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006f62:	2300      	movs	r3, #0
 8006f64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	61bb      	str	r3, [r7, #24]
 8006f6a:	e003      	b.n	8006f74 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f70:	2300      	movs	r3, #0
 8006f72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f74:	e02c      	b.n	8006fd0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	2180      	movs	r1, #128	; 0x80
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f000 fea8 	bl	8007cd6 <UART_WaitOnFlagUntilTimeout>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d001      	beq.n	8006f90 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e038      	b.n	8007002 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10b      	bne.n	8006fae <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fa4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	3302      	adds	r3, #2
 8006faa:	61bb      	str	r3, [r7, #24]
 8006fac:	e007      	b.n	8006fbe <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	781a      	ldrb	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1cc      	bne.n	8006f76 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	9300      	str	r3, [sp, #0]
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	2140      	movs	r1, #64	; 0x40
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f000 fe75 	bl	8007cd6 <UART_WaitOnFlagUntilTimeout>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e005      	b.n	8007002 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	e000      	b.n	8007002 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007000:	2302      	movs	r3, #2
  }
}
 8007002:	4618      	mov	r0, r3
 8007004:	3720      	adds	r7, #32
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
	...

0800700c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b0ba      	sub	sp, #232	; 0xe8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007032:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007036:	f640 030f 	movw	r3, #2063	; 0x80f
 800703a:	4013      	ands	r3, r2
 800703c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007040:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007044:	2b00      	cmp	r3, #0
 8007046:	d115      	bne.n	8007074 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800704c:	f003 0320 	and.w	r3, r3, #32
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00f      	beq.n	8007074 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007058:	f003 0320 	and.w	r3, r3, #32
 800705c:	2b00      	cmp	r3, #0
 800705e:	d009      	beq.n	8007074 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007064:	2b00      	cmp	r3, #0
 8007066:	f000 82ac 	beq.w	80075c2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	4798      	blx	r3
      }
      return;
 8007072:	e2a6      	b.n	80075c2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007074:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 8117 	beq.w	80072ac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800707e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b00      	cmp	r3, #0
 8007088:	d106      	bne.n	8007098 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800708a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800708e:	4b85      	ldr	r3, [pc, #532]	; (80072a4 <HAL_UART_IRQHandler+0x298>)
 8007090:	4013      	ands	r3, r2
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 810a 	beq.w	80072ac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d011      	beq.n	80070c8 <HAL_UART_IRQHandler+0xbc>
 80070a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00b      	beq.n	80070c8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2201      	movs	r2, #1
 80070b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070be:	f043 0201 	orr.w	r2, r3, #1
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070cc:	f003 0302 	and.w	r3, r3, #2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d011      	beq.n	80070f8 <HAL_UART_IRQHandler+0xec>
 80070d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00b      	beq.n	80070f8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2202      	movs	r2, #2
 80070e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070ee:	f043 0204 	orr.w	r2, r3, #4
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	2b00      	cmp	r3, #0
 8007102:	d011      	beq.n	8007128 <HAL_UART_IRQHandler+0x11c>
 8007104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007108:	f003 0301 	and.w	r3, r3, #1
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00b      	beq.n	8007128 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2204      	movs	r2, #4
 8007116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800711e:	f043 0202 	orr.w	r2, r3, #2
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800712c:	f003 0308 	and.w	r3, r3, #8
 8007130:	2b00      	cmp	r3, #0
 8007132:	d017      	beq.n	8007164 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007138:	f003 0320 	and.w	r3, r3, #32
 800713c:	2b00      	cmp	r3, #0
 800713e:	d105      	bne.n	800714c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007144:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00b      	beq.n	8007164 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2208      	movs	r2, #8
 8007152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800715a:	f043 0208 	orr.w	r2, r3, #8
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800716c:	2b00      	cmp	r3, #0
 800716e:	d012      	beq.n	8007196 <HAL_UART_IRQHandler+0x18a>
 8007170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007174:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00c      	beq.n	8007196 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007184:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800718c:	f043 0220 	orr.w	r2, r3, #32
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 8212 	beq.w	80075c6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80071a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a6:	f003 0320 	and.w	r3, r3, #32
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00d      	beq.n	80071ca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80071ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071b2:	f003 0320 	and.w	r3, r3, #32
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d007      	beq.n	80071ca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d003      	beq.n	80071ca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071de:	2b40      	cmp	r3, #64	; 0x40
 80071e0:	d005      	beq.n	80071ee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80071e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d04f      	beq.n	800728e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fe37 	bl	8007e62 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071fe:	2b40      	cmp	r3, #64	; 0x40
 8007200:	d141      	bne.n	8007286 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3308      	adds	r3, #8
 8007208:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007210:	e853 3f00 	ldrex	r3, [r3]
 8007214:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007218:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800721c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007220:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	3308      	adds	r3, #8
 800722a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800722e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007232:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007236:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800723a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800723e:	e841 2300 	strex	r3, r2, [r1]
 8007242:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007246:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1d9      	bne.n	8007202 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007252:	2b00      	cmp	r3, #0
 8007254:	d013      	beq.n	800727e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800725a:	4a13      	ldr	r2, [pc, #76]	; (80072a8 <HAL_UART_IRQHandler+0x29c>)
 800725c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007262:	4618      	mov	r0, r3
 8007264:	f7fc f9be 	bl	80035e4 <HAL_DMA_Abort_IT>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d017      	beq.n	800729e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007278:	4610      	mov	r0, r2
 800727a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800727c:	e00f      	b.n	800729e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f9b6 	bl	80075f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007284:	e00b      	b.n	800729e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f9b2 	bl	80075f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800728c:	e007      	b.n	800729e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f9ae 	bl	80075f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800729c:	e193      	b.n	80075c6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800729e:	bf00      	nop
    return;
 80072a0:	e191      	b.n	80075c6 <HAL_UART_IRQHandler+0x5ba>
 80072a2:	bf00      	nop
 80072a4:	04000120 	.word	0x04000120
 80072a8:	08007f2b 	.word	0x08007f2b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	f040 814c 	bne.w	800754e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80072b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072ba:	f003 0310 	and.w	r3, r3, #16
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f000 8145 	beq.w	800754e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80072c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072c8:	f003 0310 	and.w	r3, r3, #16
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 813e 	beq.w	800754e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2210      	movs	r2, #16
 80072d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e4:	2b40      	cmp	r3, #64	; 0x40
 80072e6:	f040 80b6 	bne.w	8007456 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072f6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f000 8165 	beq.w	80075ca <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007306:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800730a:	429a      	cmp	r2, r3
 800730c:	f080 815d 	bcs.w	80075ca <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007316:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800731e:	69db      	ldr	r3, [r3, #28]
 8007320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007324:	f000 8086 	beq.w	8007434 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007330:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007334:	e853 3f00 	ldrex	r3, [r3]
 8007338:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800733c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007344:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	461a      	mov	r2, r3
 800734e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007352:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007356:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800735e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007362:	e841 2300 	strex	r3, r2, [r1]
 8007366:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800736a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1da      	bne.n	8007328 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	3308      	adds	r3, #8
 8007378:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800737c:	e853 3f00 	ldrex	r3, [r3]
 8007380:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007384:	f023 0301 	bic.w	r3, r3, #1
 8007388:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3308      	adds	r3, #8
 8007392:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007396:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800739a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800739e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073a2:	e841 2300 	strex	r3, r2, [r1]
 80073a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1e1      	bne.n	8007372 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3308      	adds	r3, #8
 80073b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073b8:	e853 3f00 	ldrex	r3, [r3]
 80073bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80073be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3308      	adds	r3, #8
 80073ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073da:	e841 2300 	strex	r3, r2, [r1]
 80073de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1e3      	bne.n	80073ae <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2220      	movs	r2, #32
 80073ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073fc:	e853 3f00 	ldrex	r3, [r3]
 8007400:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007404:	f023 0310 	bic.w	r3, r3, #16
 8007408:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	461a      	mov	r2, r3
 8007412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007416:	65bb      	str	r3, [r7, #88]	; 0x58
 8007418:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800741c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800741e:	e841 2300 	strex	r3, r2, [r1]
 8007422:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1e4      	bne.n	80073f4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800742e:	4618      	mov	r0, r3
 8007430:	f7fc f868 	bl	8003504 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2202      	movs	r2, #2
 8007438:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007446:	b29b      	uxth	r3, r3
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	b29b      	uxth	r3, r3
 800744c:	4619      	mov	r1, r3
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f8d8 	bl	8007604 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007454:	e0b9      	b.n	80075ca <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007462:	b29b      	uxth	r3, r3
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007470:	b29b      	uxth	r3, r3
 8007472:	2b00      	cmp	r3, #0
 8007474:	f000 80ab 	beq.w	80075ce <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8007478:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 80a6 	beq.w	80075ce <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748a:	e853 3f00 	ldrex	r3, [r3]
 800748e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007492:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007496:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	461a      	mov	r2, r3
 80074a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074a4:	647b      	str	r3, [r7, #68]	; 0x44
 80074a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074ac:	e841 2300 	strex	r3, r2, [r1]
 80074b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d1e4      	bne.n	8007482 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3308      	adds	r3, #8
 80074be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	e853 3f00 	ldrex	r3, [r3]
 80074c6:	623b      	str	r3, [r7, #32]
   return(result);
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	f023 0301 	bic.w	r3, r3, #1
 80074ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3308      	adds	r3, #8
 80074d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074dc:	633a      	str	r2, [r7, #48]	; 0x30
 80074de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074e4:	e841 2300 	strex	r3, r2, [r1]
 80074e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1e3      	bne.n	80074b8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2220      	movs	r2, #32
 80074f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	e853 3f00 	ldrex	r3, [r3]
 8007510:	60fb      	str	r3, [r7, #12]
   return(result);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f023 0310 	bic.w	r3, r3, #16
 8007518:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	461a      	mov	r2, r3
 8007522:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007526:	61fb      	str	r3, [r7, #28]
 8007528:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752a:	69b9      	ldr	r1, [r7, #24]
 800752c:	69fa      	ldr	r2, [r7, #28]
 800752e:	e841 2300 	strex	r3, r2, [r1]
 8007532:	617b      	str	r3, [r7, #20]
   return(result);
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1e4      	bne.n	8007504 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2202      	movs	r2, #2
 800753e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007540:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007544:	4619      	mov	r1, r3
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f85c 	bl	8007604 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800754c:	e03f      	b.n	80075ce <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800754e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00e      	beq.n	8007578 <HAL_UART_IRQHandler+0x56c>
 800755a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800755e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d008      	beq.n	8007578 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800756e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 f853 	bl	800761c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007576:	e02d      	b.n	80075d4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800757c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00e      	beq.n	80075a2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800758c:	2b00      	cmp	r3, #0
 800758e:	d008      	beq.n	80075a2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007594:	2b00      	cmp	r3, #0
 8007596:	d01c      	beq.n	80075d2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	4798      	blx	r3
    }
    return;
 80075a0:	e017      	b.n	80075d2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80075a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d012      	beq.n	80075d4 <HAL_UART_IRQHandler+0x5c8>
 80075ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00c      	beq.n	80075d4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fccb 	bl	8007f56 <UART_EndTransmit_IT>
    return;
 80075c0:	e008      	b.n	80075d4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80075c2:	bf00      	nop
 80075c4:	e006      	b.n	80075d4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80075c6:	bf00      	nop
 80075c8:	e004      	b.n	80075d4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80075ca:	bf00      	nop
 80075cc:	e002      	b.n	80075d4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80075ce:	bf00      	nop
 80075d0:	e000      	b.n	80075d4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80075d2:	bf00      	nop
  }

}
 80075d4:	37e8      	adds	r7, #232	; 0xe8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop

080075dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	460b      	mov	r3, r1
 800760e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b088      	sub	sp, #32
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	689a      	ldr	r2, [r3, #8]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	431a      	orrs	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	431a      	orrs	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	69db      	ldr	r3, [r3, #28]
 8007650:	4313      	orrs	r3, r2
 8007652:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	4ba6      	ldr	r3, [pc, #664]	; (80078f4 <UART_SetConfig+0x2c4>)
 800765c:	4013      	ands	r3, r2
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	6812      	ldr	r2, [r2, #0]
 8007662:	6979      	ldr	r1, [r7, #20]
 8007664:	430b      	orrs	r3, r1
 8007666:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68da      	ldr	r2, [r3, #12]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	699b      	ldr	r3, [r3, #24]
 8007682:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a1b      	ldr	r3, [r3, #32]
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	4313      	orrs	r3, r2
 800768c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	430a      	orrs	r2, r1
 80076a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a94      	ldr	r2, [pc, #592]	; (80078f8 <UART_SetConfig+0x2c8>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d120      	bne.n	80076ee <UART_SetConfig+0xbe>
 80076ac:	4b93      	ldr	r3, [pc, #588]	; (80078fc <UART_SetConfig+0x2cc>)
 80076ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b2:	f003 0303 	and.w	r3, r3, #3
 80076b6:	2b03      	cmp	r3, #3
 80076b8:	d816      	bhi.n	80076e8 <UART_SetConfig+0xb8>
 80076ba:	a201      	add	r2, pc, #4	; (adr r2, 80076c0 <UART_SetConfig+0x90>)
 80076bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c0:	080076d1 	.word	0x080076d1
 80076c4:	080076dd 	.word	0x080076dd
 80076c8:	080076d7 	.word	0x080076d7
 80076cc:	080076e3 	.word	0x080076e3
 80076d0:	2301      	movs	r3, #1
 80076d2:	77fb      	strb	r3, [r7, #31]
 80076d4:	e150      	b.n	8007978 <UART_SetConfig+0x348>
 80076d6:	2302      	movs	r3, #2
 80076d8:	77fb      	strb	r3, [r7, #31]
 80076da:	e14d      	b.n	8007978 <UART_SetConfig+0x348>
 80076dc:	2304      	movs	r3, #4
 80076de:	77fb      	strb	r3, [r7, #31]
 80076e0:	e14a      	b.n	8007978 <UART_SetConfig+0x348>
 80076e2:	2308      	movs	r3, #8
 80076e4:	77fb      	strb	r3, [r7, #31]
 80076e6:	e147      	b.n	8007978 <UART_SetConfig+0x348>
 80076e8:	2310      	movs	r3, #16
 80076ea:	77fb      	strb	r3, [r7, #31]
 80076ec:	e144      	b.n	8007978 <UART_SetConfig+0x348>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a83      	ldr	r2, [pc, #524]	; (8007900 <UART_SetConfig+0x2d0>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d132      	bne.n	800775e <UART_SetConfig+0x12e>
 80076f8:	4b80      	ldr	r3, [pc, #512]	; (80078fc <UART_SetConfig+0x2cc>)
 80076fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076fe:	f003 030c 	and.w	r3, r3, #12
 8007702:	2b0c      	cmp	r3, #12
 8007704:	d828      	bhi.n	8007758 <UART_SetConfig+0x128>
 8007706:	a201      	add	r2, pc, #4	; (adr r2, 800770c <UART_SetConfig+0xdc>)
 8007708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770c:	08007741 	.word	0x08007741
 8007710:	08007759 	.word	0x08007759
 8007714:	08007759 	.word	0x08007759
 8007718:	08007759 	.word	0x08007759
 800771c:	0800774d 	.word	0x0800774d
 8007720:	08007759 	.word	0x08007759
 8007724:	08007759 	.word	0x08007759
 8007728:	08007759 	.word	0x08007759
 800772c:	08007747 	.word	0x08007747
 8007730:	08007759 	.word	0x08007759
 8007734:	08007759 	.word	0x08007759
 8007738:	08007759 	.word	0x08007759
 800773c:	08007753 	.word	0x08007753
 8007740:	2300      	movs	r3, #0
 8007742:	77fb      	strb	r3, [r7, #31]
 8007744:	e118      	b.n	8007978 <UART_SetConfig+0x348>
 8007746:	2302      	movs	r3, #2
 8007748:	77fb      	strb	r3, [r7, #31]
 800774a:	e115      	b.n	8007978 <UART_SetConfig+0x348>
 800774c:	2304      	movs	r3, #4
 800774e:	77fb      	strb	r3, [r7, #31]
 8007750:	e112      	b.n	8007978 <UART_SetConfig+0x348>
 8007752:	2308      	movs	r3, #8
 8007754:	77fb      	strb	r3, [r7, #31]
 8007756:	e10f      	b.n	8007978 <UART_SetConfig+0x348>
 8007758:	2310      	movs	r3, #16
 800775a:	77fb      	strb	r3, [r7, #31]
 800775c:	e10c      	b.n	8007978 <UART_SetConfig+0x348>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a68      	ldr	r2, [pc, #416]	; (8007904 <UART_SetConfig+0x2d4>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d120      	bne.n	80077aa <UART_SetConfig+0x17a>
 8007768:	4b64      	ldr	r3, [pc, #400]	; (80078fc <UART_SetConfig+0x2cc>)
 800776a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800776e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007772:	2b30      	cmp	r3, #48	; 0x30
 8007774:	d013      	beq.n	800779e <UART_SetConfig+0x16e>
 8007776:	2b30      	cmp	r3, #48	; 0x30
 8007778:	d814      	bhi.n	80077a4 <UART_SetConfig+0x174>
 800777a:	2b20      	cmp	r3, #32
 800777c:	d009      	beq.n	8007792 <UART_SetConfig+0x162>
 800777e:	2b20      	cmp	r3, #32
 8007780:	d810      	bhi.n	80077a4 <UART_SetConfig+0x174>
 8007782:	2b00      	cmp	r3, #0
 8007784:	d002      	beq.n	800778c <UART_SetConfig+0x15c>
 8007786:	2b10      	cmp	r3, #16
 8007788:	d006      	beq.n	8007798 <UART_SetConfig+0x168>
 800778a:	e00b      	b.n	80077a4 <UART_SetConfig+0x174>
 800778c:	2300      	movs	r3, #0
 800778e:	77fb      	strb	r3, [r7, #31]
 8007790:	e0f2      	b.n	8007978 <UART_SetConfig+0x348>
 8007792:	2302      	movs	r3, #2
 8007794:	77fb      	strb	r3, [r7, #31]
 8007796:	e0ef      	b.n	8007978 <UART_SetConfig+0x348>
 8007798:	2304      	movs	r3, #4
 800779a:	77fb      	strb	r3, [r7, #31]
 800779c:	e0ec      	b.n	8007978 <UART_SetConfig+0x348>
 800779e:	2308      	movs	r3, #8
 80077a0:	77fb      	strb	r3, [r7, #31]
 80077a2:	e0e9      	b.n	8007978 <UART_SetConfig+0x348>
 80077a4:	2310      	movs	r3, #16
 80077a6:	77fb      	strb	r3, [r7, #31]
 80077a8:	e0e6      	b.n	8007978 <UART_SetConfig+0x348>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a56      	ldr	r2, [pc, #344]	; (8007908 <UART_SetConfig+0x2d8>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d120      	bne.n	80077f6 <UART_SetConfig+0x1c6>
 80077b4:	4b51      	ldr	r3, [pc, #324]	; (80078fc <UART_SetConfig+0x2cc>)
 80077b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80077be:	2bc0      	cmp	r3, #192	; 0xc0
 80077c0:	d013      	beq.n	80077ea <UART_SetConfig+0x1ba>
 80077c2:	2bc0      	cmp	r3, #192	; 0xc0
 80077c4:	d814      	bhi.n	80077f0 <UART_SetConfig+0x1c0>
 80077c6:	2b80      	cmp	r3, #128	; 0x80
 80077c8:	d009      	beq.n	80077de <UART_SetConfig+0x1ae>
 80077ca:	2b80      	cmp	r3, #128	; 0x80
 80077cc:	d810      	bhi.n	80077f0 <UART_SetConfig+0x1c0>
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d002      	beq.n	80077d8 <UART_SetConfig+0x1a8>
 80077d2:	2b40      	cmp	r3, #64	; 0x40
 80077d4:	d006      	beq.n	80077e4 <UART_SetConfig+0x1b4>
 80077d6:	e00b      	b.n	80077f0 <UART_SetConfig+0x1c0>
 80077d8:	2300      	movs	r3, #0
 80077da:	77fb      	strb	r3, [r7, #31]
 80077dc:	e0cc      	b.n	8007978 <UART_SetConfig+0x348>
 80077de:	2302      	movs	r3, #2
 80077e0:	77fb      	strb	r3, [r7, #31]
 80077e2:	e0c9      	b.n	8007978 <UART_SetConfig+0x348>
 80077e4:	2304      	movs	r3, #4
 80077e6:	77fb      	strb	r3, [r7, #31]
 80077e8:	e0c6      	b.n	8007978 <UART_SetConfig+0x348>
 80077ea:	2308      	movs	r3, #8
 80077ec:	77fb      	strb	r3, [r7, #31]
 80077ee:	e0c3      	b.n	8007978 <UART_SetConfig+0x348>
 80077f0:	2310      	movs	r3, #16
 80077f2:	77fb      	strb	r3, [r7, #31]
 80077f4:	e0c0      	b.n	8007978 <UART_SetConfig+0x348>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a44      	ldr	r2, [pc, #272]	; (800790c <UART_SetConfig+0x2dc>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d125      	bne.n	800784c <UART_SetConfig+0x21c>
 8007800:	4b3e      	ldr	r3, [pc, #248]	; (80078fc <UART_SetConfig+0x2cc>)
 8007802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800780a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800780e:	d017      	beq.n	8007840 <UART_SetConfig+0x210>
 8007810:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007814:	d817      	bhi.n	8007846 <UART_SetConfig+0x216>
 8007816:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800781a:	d00b      	beq.n	8007834 <UART_SetConfig+0x204>
 800781c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007820:	d811      	bhi.n	8007846 <UART_SetConfig+0x216>
 8007822:	2b00      	cmp	r3, #0
 8007824:	d003      	beq.n	800782e <UART_SetConfig+0x1fe>
 8007826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800782a:	d006      	beq.n	800783a <UART_SetConfig+0x20a>
 800782c:	e00b      	b.n	8007846 <UART_SetConfig+0x216>
 800782e:	2300      	movs	r3, #0
 8007830:	77fb      	strb	r3, [r7, #31]
 8007832:	e0a1      	b.n	8007978 <UART_SetConfig+0x348>
 8007834:	2302      	movs	r3, #2
 8007836:	77fb      	strb	r3, [r7, #31]
 8007838:	e09e      	b.n	8007978 <UART_SetConfig+0x348>
 800783a:	2304      	movs	r3, #4
 800783c:	77fb      	strb	r3, [r7, #31]
 800783e:	e09b      	b.n	8007978 <UART_SetConfig+0x348>
 8007840:	2308      	movs	r3, #8
 8007842:	77fb      	strb	r3, [r7, #31]
 8007844:	e098      	b.n	8007978 <UART_SetConfig+0x348>
 8007846:	2310      	movs	r3, #16
 8007848:	77fb      	strb	r3, [r7, #31]
 800784a:	e095      	b.n	8007978 <UART_SetConfig+0x348>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a2f      	ldr	r2, [pc, #188]	; (8007910 <UART_SetConfig+0x2e0>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d125      	bne.n	80078a2 <UART_SetConfig+0x272>
 8007856:	4b29      	ldr	r3, [pc, #164]	; (80078fc <UART_SetConfig+0x2cc>)
 8007858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800785c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007860:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007864:	d017      	beq.n	8007896 <UART_SetConfig+0x266>
 8007866:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800786a:	d817      	bhi.n	800789c <UART_SetConfig+0x26c>
 800786c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007870:	d00b      	beq.n	800788a <UART_SetConfig+0x25a>
 8007872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007876:	d811      	bhi.n	800789c <UART_SetConfig+0x26c>
 8007878:	2b00      	cmp	r3, #0
 800787a:	d003      	beq.n	8007884 <UART_SetConfig+0x254>
 800787c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007880:	d006      	beq.n	8007890 <UART_SetConfig+0x260>
 8007882:	e00b      	b.n	800789c <UART_SetConfig+0x26c>
 8007884:	2301      	movs	r3, #1
 8007886:	77fb      	strb	r3, [r7, #31]
 8007888:	e076      	b.n	8007978 <UART_SetConfig+0x348>
 800788a:	2302      	movs	r3, #2
 800788c:	77fb      	strb	r3, [r7, #31]
 800788e:	e073      	b.n	8007978 <UART_SetConfig+0x348>
 8007890:	2304      	movs	r3, #4
 8007892:	77fb      	strb	r3, [r7, #31]
 8007894:	e070      	b.n	8007978 <UART_SetConfig+0x348>
 8007896:	2308      	movs	r3, #8
 8007898:	77fb      	strb	r3, [r7, #31]
 800789a:	e06d      	b.n	8007978 <UART_SetConfig+0x348>
 800789c:	2310      	movs	r3, #16
 800789e:	77fb      	strb	r3, [r7, #31]
 80078a0:	e06a      	b.n	8007978 <UART_SetConfig+0x348>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a1b      	ldr	r2, [pc, #108]	; (8007914 <UART_SetConfig+0x2e4>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d138      	bne.n	800791e <UART_SetConfig+0x2ee>
 80078ac:	4b13      	ldr	r3, [pc, #76]	; (80078fc <UART_SetConfig+0x2cc>)
 80078ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078b2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80078b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078ba:	d017      	beq.n	80078ec <UART_SetConfig+0x2bc>
 80078bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078c0:	d82a      	bhi.n	8007918 <UART_SetConfig+0x2e8>
 80078c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078c6:	d00b      	beq.n	80078e0 <UART_SetConfig+0x2b0>
 80078c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078cc:	d824      	bhi.n	8007918 <UART_SetConfig+0x2e8>
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d003      	beq.n	80078da <UART_SetConfig+0x2aa>
 80078d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078d6:	d006      	beq.n	80078e6 <UART_SetConfig+0x2b6>
 80078d8:	e01e      	b.n	8007918 <UART_SetConfig+0x2e8>
 80078da:	2300      	movs	r3, #0
 80078dc:	77fb      	strb	r3, [r7, #31]
 80078de:	e04b      	b.n	8007978 <UART_SetConfig+0x348>
 80078e0:	2302      	movs	r3, #2
 80078e2:	77fb      	strb	r3, [r7, #31]
 80078e4:	e048      	b.n	8007978 <UART_SetConfig+0x348>
 80078e6:	2304      	movs	r3, #4
 80078e8:	77fb      	strb	r3, [r7, #31]
 80078ea:	e045      	b.n	8007978 <UART_SetConfig+0x348>
 80078ec:	2308      	movs	r3, #8
 80078ee:	77fb      	strb	r3, [r7, #31]
 80078f0:	e042      	b.n	8007978 <UART_SetConfig+0x348>
 80078f2:	bf00      	nop
 80078f4:	efff69f3 	.word	0xefff69f3
 80078f8:	40011000 	.word	0x40011000
 80078fc:	40023800 	.word	0x40023800
 8007900:	40004400 	.word	0x40004400
 8007904:	40004800 	.word	0x40004800
 8007908:	40004c00 	.word	0x40004c00
 800790c:	40005000 	.word	0x40005000
 8007910:	40011400 	.word	0x40011400
 8007914:	40007800 	.word	0x40007800
 8007918:	2310      	movs	r3, #16
 800791a:	77fb      	strb	r3, [r7, #31]
 800791c:	e02c      	b.n	8007978 <UART_SetConfig+0x348>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a72      	ldr	r2, [pc, #456]	; (8007aec <UART_SetConfig+0x4bc>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d125      	bne.n	8007974 <UART_SetConfig+0x344>
 8007928:	4b71      	ldr	r3, [pc, #452]	; (8007af0 <UART_SetConfig+0x4c0>)
 800792a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800792e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007932:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007936:	d017      	beq.n	8007968 <UART_SetConfig+0x338>
 8007938:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800793c:	d817      	bhi.n	800796e <UART_SetConfig+0x33e>
 800793e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007942:	d00b      	beq.n	800795c <UART_SetConfig+0x32c>
 8007944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007948:	d811      	bhi.n	800796e <UART_SetConfig+0x33e>
 800794a:	2b00      	cmp	r3, #0
 800794c:	d003      	beq.n	8007956 <UART_SetConfig+0x326>
 800794e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007952:	d006      	beq.n	8007962 <UART_SetConfig+0x332>
 8007954:	e00b      	b.n	800796e <UART_SetConfig+0x33e>
 8007956:	2300      	movs	r3, #0
 8007958:	77fb      	strb	r3, [r7, #31]
 800795a:	e00d      	b.n	8007978 <UART_SetConfig+0x348>
 800795c:	2302      	movs	r3, #2
 800795e:	77fb      	strb	r3, [r7, #31]
 8007960:	e00a      	b.n	8007978 <UART_SetConfig+0x348>
 8007962:	2304      	movs	r3, #4
 8007964:	77fb      	strb	r3, [r7, #31]
 8007966:	e007      	b.n	8007978 <UART_SetConfig+0x348>
 8007968:	2308      	movs	r3, #8
 800796a:	77fb      	strb	r3, [r7, #31]
 800796c:	e004      	b.n	8007978 <UART_SetConfig+0x348>
 800796e:	2310      	movs	r3, #16
 8007970:	77fb      	strb	r3, [r7, #31]
 8007972:	e001      	b.n	8007978 <UART_SetConfig+0x348>
 8007974:	2310      	movs	r3, #16
 8007976:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	69db      	ldr	r3, [r3, #28]
 800797c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007980:	d15b      	bne.n	8007a3a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007982:	7ffb      	ldrb	r3, [r7, #31]
 8007984:	2b08      	cmp	r3, #8
 8007986:	d828      	bhi.n	80079da <UART_SetConfig+0x3aa>
 8007988:	a201      	add	r2, pc, #4	; (adr r2, 8007990 <UART_SetConfig+0x360>)
 800798a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800798e:	bf00      	nop
 8007990:	080079b5 	.word	0x080079b5
 8007994:	080079bd 	.word	0x080079bd
 8007998:	080079c5 	.word	0x080079c5
 800799c:	080079db 	.word	0x080079db
 80079a0:	080079cb 	.word	0x080079cb
 80079a4:	080079db 	.word	0x080079db
 80079a8:	080079db 	.word	0x080079db
 80079ac:	080079db 	.word	0x080079db
 80079b0:	080079d3 	.word	0x080079d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079b4:	f7fe faf6 	bl	8005fa4 <HAL_RCC_GetPCLK1Freq>
 80079b8:	61b8      	str	r0, [r7, #24]
        break;
 80079ba:	e013      	b.n	80079e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079bc:	f7fe fb06 	bl	8005fcc <HAL_RCC_GetPCLK2Freq>
 80079c0:	61b8      	str	r0, [r7, #24]
        break;
 80079c2:	e00f      	b.n	80079e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079c4:	4b4b      	ldr	r3, [pc, #300]	; (8007af4 <UART_SetConfig+0x4c4>)
 80079c6:	61bb      	str	r3, [r7, #24]
        break;
 80079c8:	e00c      	b.n	80079e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079ca:	f7fe f9d9 	bl	8005d80 <HAL_RCC_GetSysClockFreq>
 80079ce:	61b8      	str	r0, [r7, #24]
        break;
 80079d0:	e008      	b.n	80079e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079d6:	61bb      	str	r3, [r7, #24]
        break;
 80079d8:	e004      	b.n	80079e4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80079da:	2300      	movs	r3, #0
 80079dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	77bb      	strb	r3, [r7, #30]
        break;
 80079e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d074      	beq.n	8007ad4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	005a      	lsls	r2, r3, #1
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	085b      	lsrs	r3, r3, #1
 80079f4:	441a      	add	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80079fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	2b0f      	cmp	r3, #15
 8007a04:	d916      	bls.n	8007a34 <UART_SetConfig+0x404>
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a0c:	d212      	bcs.n	8007a34 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	f023 030f 	bic.w	r3, r3, #15
 8007a16:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	085b      	lsrs	r3, r3, #1
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	f003 0307 	and.w	r3, r3, #7
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	89fb      	ldrh	r3, [r7, #14]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	89fa      	ldrh	r2, [r7, #14]
 8007a30:	60da      	str	r2, [r3, #12]
 8007a32:	e04f      	b.n	8007ad4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	77bb      	strb	r3, [r7, #30]
 8007a38:	e04c      	b.n	8007ad4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a3a:	7ffb      	ldrb	r3, [r7, #31]
 8007a3c:	2b08      	cmp	r3, #8
 8007a3e:	d828      	bhi.n	8007a92 <UART_SetConfig+0x462>
 8007a40:	a201      	add	r2, pc, #4	; (adr r2, 8007a48 <UART_SetConfig+0x418>)
 8007a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a46:	bf00      	nop
 8007a48:	08007a6d 	.word	0x08007a6d
 8007a4c:	08007a75 	.word	0x08007a75
 8007a50:	08007a7d 	.word	0x08007a7d
 8007a54:	08007a93 	.word	0x08007a93
 8007a58:	08007a83 	.word	0x08007a83
 8007a5c:	08007a93 	.word	0x08007a93
 8007a60:	08007a93 	.word	0x08007a93
 8007a64:	08007a93 	.word	0x08007a93
 8007a68:	08007a8b 	.word	0x08007a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a6c:	f7fe fa9a 	bl	8005fa4 <HAL_RCC_GetPCLK1Freq>
 8007a70:	61b8      	str	r0, [r7, #24]
        break;
 8007a72:	e013      	b.n	8007a9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a74:	f7fe faaa 	bl	8005fcc <HAL_RCC_GetPCLK2Freq>
 8007a78:	61b8      	str	r0, [r7, #24]
        break;
 8007a7a:	e00f      	b.n	8007a9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a7c:	4b1d      	ldr	r3, [pc, #116]	; (8007af4 <UART_SetConfig+0x4c4>)
 8007a7e:	61bb      	str	r3, [r7, #24]
        break;
 8007a80:	e00c      	b.n	8007a9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a82:	f7fe f97d 	bl	8005d80 <HAL_RCC_GetSysClockFreq>
 8007a86:	61b8      	str	r0, [r7, #24]
        break;
 8007a88:	e008      	b.n	8007a9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a8e:	61bb      	str	r3, [r7, #24]
        break;
 8007a90:	e004      	b.n	8007a9c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007a92:	2300      	movs	r3, #0
 8007a94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	77bb      	strb	r3, [r7, #30]
        break;
 8007a9a:	bf00      	nop
    }

    if (pclk != 0U)
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d018      	beq.n	8007ad4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	085a      	lsrs	r2, r3, #1
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	441a      	add	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ab4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	2b0f      	cmp	r3, #15
 8007aba:	d909      	bls.n	8007ad0 <UART_SetConfig+0x4a0>
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ac2:	d205      	bcs.n	8007ad0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	60da      	str	r2, [r3, #12]
 8007ace:	e001      	b.n	8007ad4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007ae0:	7fbb      	ldrb	r3, [r7, #30]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3720      	adds	r7, #32
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	40007c00 	.word	0x40007c00
 8007af0:	40023800 	.word	0x40023800
 8007af4:	00f42400 	.word	0x00f42400

08007af8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b04:	f003 0301 	and.w	r3, r3, #1
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00a      	beq.n	8007b22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b26:	f003 0302 	and.w	r3, r3, #2
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00a      	beq.n	8007b44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	430a      	orrs	r2, r1
 8007b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b48:	f003 0304 	and.w	r3, r3, #4
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00a      	beq.n	8007b66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6a:	f003 0308 	and.w	r3, r3, #8
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00a      	beq.n	8007b88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	430a      	orrs	r2, r1
 8007b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8c:	f003 0310 	and.w	r3, r3, #16
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00a      	beq.n	8007baa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bae:	f003 0320 	and.w	r3, r3, #32
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00a      	beq.n	8007bcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	430a      	orrs	r2, r1
 8007bca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d01a      	beq.n	8007c0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	430a      	orrs	r2, r1
 8007bec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bf6:	d10a      	bne.n	8007c0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00a      	beq.n	8007c30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	430a      	orrs	r2, r1
 8007c2e:	605a      	str	r2, [r3, #4]
  }
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af02      	add	r7, sp, #8
 8007c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c4c:	f7fa fc3e 	bl	80024cc <HAL_GetTick>
 8007c50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0308 	and.w	r3, r3, #8
 8007c5c:	2b08      	cmp	r3, #8
 8007c5e:	d10e      	bne.n	8007c7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f831 	bl	8007cd6 <UART_WaitOnFlagUntilTimeout>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d001      	beq.n	8007c7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	e027      	b.n	8007cce <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0304 	and.w	r3, r3, #4
 8007c88:	2b04      	cmp	r3, #4
 8007c8a:	d10e      	bne.n	8007caa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f81b 	bl	8007cd6 <UART_WaitOnFlagUntilTimeout>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d001      	beq.n	8007caa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e011      	b.n	8007cce <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2220      	movs	r2, #32
 8007cae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b09c      	sub	sp, #112	; 0x70
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	60f8      	str	r0, [r7, #12]
 8007cde:	60b9      	str	r1, [r7, #8]
 8007ce0:	603b      	str	r3, [r7, #0]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ce6:	e0a7      	b.n	8007e38 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ce8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cee:	f000 80a3 	beq.w	8007e38 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cf2:	f7fa fbeb 	bl	80024cc <HAL_GetTick>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d302      	bcc.n	8007d08 <UART_WaitOnFlagUntilTimeout+0x32>
 8007d02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d13f      	bne.n	8007d88 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d10:	e853 3f00 	ldrex	r3, [r3]
 8007d14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d1c:	667b      	str	r3, [r7, #100]	; 0x64
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	461a      	mov	r2, r3
 8007d24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d28:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d2e:	e841 2300 	strex	r3, r2, [r1]
 8007d32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1e6      	bne.n	8007d08 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3308      	adds	r3, #8
 8007d40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d44:	e853 3f00 	ldrex	r3, [r3]
 8007d48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4c:	f023 0301 	bic.w	r3, r3, #1
 8007d50:	663b      	str	r3, [r7, #96]	; 0x60
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	3308      	adds	r3, #8
 8007d58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d62:	e841 2300 	strex	r3, r2, [r1]
 8007d66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1e5      	bne.n	8007d3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2220      	movs	r2, #32
 8007d72:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2220      	movs	r2, #32
 8007d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e068      	b.n	8007e5a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0304 	and.w	r3, r3, #4
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d050      	beq.n	8007e38 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	69db      	ldr	r3, [r3, #28]
 8007d9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007da4:	d148      	bne.n	8007e38 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db8:	e853 3f00 	ldrex	r3, [r3]
 8007dbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007dc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dce:	637b      	str	r3, [r7, #52]	; 0x34
 8007dd0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007dd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dd6:	e841 2300 	strex	r3, r2, [r1]
 8007dda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1e6      	bne.n	8007db0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	3308      	adds	r3, #8
 8007de8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	e853 3f00 	ldrex	r3, [r3]
 8007df0:	613b      	str	r3, [r7, #16]
   return(result);
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	f023 0301 	bic.w	r3, r3, #1
 8007df8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3308      	adds	r3, #8
 8007e00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e02:	623a      	str	r2, [r7, #32]
 8007e04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e06:	69f9      	ldr	r1, [r7, #28]
 8007e08:	6a3a      	ldr	r2, [r7, #32]
 8007e0a:	e841 2300 	strex	r3, r2, [r1]
 8007e0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1e5      	bne.n	8007de2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2220      	movs	r2, #32
 8007e1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2220      	movs	r2, #32
 8007e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2220      	movs	r2, #32
 8007e28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007e34:	2303      	movs	r3, #3
 8007e36:	e010      	b.n	8007e5a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	69da      	ldr	r2, [r3, #28]
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	4013      	ands	r3, r2
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	bf0c      	ite	eq
 8007e48:	2301      	moveq	r3, #1
 8007e4a:	2300      	movne	r3, #0
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	461a      	mov	r2, r3
 8007e50:	79fb      	ldrb	r3, [r7, #7]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	f43f af48 	beq.w	8007ce8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3770      	adds	r7, #112	; 0x70
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e62:	b480      	push	{r7}
 8007e64:	b095      	sub	sp, #84	; 0x54
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e72:	e853 3f00 	ldrex	r3, [r3]
 8007e76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	461a      	mov	r2, r3
 8007e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e88:	643b      	str	r3, [r7, #64]	; 0x40
 8007e8a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e90:	e841 2300 	strex	r3, r2, [r1]
 8007e94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1e6      	bne.n	8007e6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	3308      	adds	r3, #8
 8007ea2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	e853 3f00 	ldrex	r3, [r3]
 8007eaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	f023 0301 	bic.w	r3, r3, #1
 8007eb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3308      	adds	r3, #8
 8007eba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ebc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ebe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ec4:	e841 2300 	strex	r3, r2, [r1]
 8007ec8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1e5      	bne.n	8007e9c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d118      	bne.n	8007f0a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	e853 3f00 	ldrex	r3, [r3]
 8007ee4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	f023 0310 	bic.w	r3, r3, #16
 8007eec:	647b      	str	r3, [r7, #68]	; 0x44
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ef6:	61bb      	str	r3, [r7, #24]
 8007ef8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efa:	6979      	ldr	r1, [r7, #20]
 8007efc:	69ba      	ldr	r2, [r7, #24]
 8007efe:	e841 2300 	strex	r3, r2, [r1]
 8007f02:	613b      	str	r3, [r7, #16]
   return(result);
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1e6      	bne.n	8007ed8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2220      	movs	r2, #32
 8007f0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007f1e:	bf00      	nop
 8007f20:	3754      	adds	r7, #84	; 0x54
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b084      	sub	sp, #16
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f7ff fb51 	bl	80075f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f4e:	bf00      	nop
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b088      	sub	sp, #32
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	e853 3f00 	ldrex	r3, [r3]
 8007f6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f72:	61fb      	str	r3, [r7, #28]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	461a      	mov	r2, r3
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	61bb      	str	r3, [r7, #24]
 8007f7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f80:	6979      	ldr	r1, [r7, #20]
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	e841 2300 	strex	r3, r2, [r1]
 8007f88:	613b      	str	r3, [r7, #16]
   return(result);
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1e6      	bne.n	8007f5e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2220      	movs	r2, #32
 8007f94:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7ff fb1d 	bl	80075dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fa2:	bf00      	nop
 8007fa4:	3720      	adds	r7, #32
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
	...

08007fac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007fac:	b084      	sub	sp, #16
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b084      	sub	sp, #16
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	f107 001c 	add.w	r0, r7, #28
 8007fba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d120      	bne.n	8008006 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	68da      	ldr	r2, [r3, #12]
 8007fd4:	4b20      	ldr	r3, [pc, #128]	; (8008058 <USB_CoreInit+0xac>)
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d105      	bne.n	8007ffa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 fa96 	bl	800852c <USB_CoreReset>
 8008000:	4603      	mov	r3, r0
 8008002:	73fb      	strb	r3, [r7, #15]
 8008004:	e010      	b.n	8008028 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fa8a 	bl	800852c <USB_CoreReset>
 8008018:	4603      	mov	r3, r0
 800801a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008020:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802a:	2b01      	cmp	r3, #1
 800802c:	d10b      	bne.n	8008046 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	f043 0206 	orr.w	r2, r3, #6
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f043 0220 	orr.w	r2, r3, #32
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008046:	7bfb      	ldrb	r3, [r7, #15]
}
 8008048:	4618      	mov	r0, r3
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008052:	b004      	add	sp, #16
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	ffbdffbf 	.word	0xffbdffbf

0800805c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	f023 0201 	bic.w	r2, r3, #1
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b084      	sub	sp, #16
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	460b      	mov	r3, r1
 8008088:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800808a:	2300      	movs	r3, #0
 800808c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800809a:	78fb      	ldrb	r3, [r7, #3]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d115      	bne.n	80080cc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80080ac:	2001      	movs	r0, #1
 80080ae:	f7fa fa19 	bl	80024e4 <HAL_Delay>
      ms++;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	3301      	adds	r3, #1
 80080b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 fa29 	bl	8008510 <USB_GetMode>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d01e      	beq.n	8008102 <USB_SetCurrentMode+0x84>
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2b31      	cmp	r3, #49	; 0x31
 80080c8:	d9f0      	bls.n	80080ac <USB_SetCurrentMode+0x2e>
 80080ca:	e01a      	b.n	8008102 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80080cc:	78fb      	ldrb	r3, [r7, #3]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d115      	bne.n	80080fe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80080de:	2001      	movs	r0, #1
 80080e0:	f7fa fa00 	bl	80024e4 <HAL_Delay>
      ms++;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	3301      	adds	r3, #1
 80080e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fa10 	bl	8008510 <USB_GetMode>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d005      	beq.n	8008102 <USB_SetCurrentMode+0x84>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2b31      	cmp	r3, #49	; 0x31
 80080fa:	d9f0      	bls.n	80080de <USB_SetCurrentMode+0x60>
 80080fc:	e001      	b.n	8008102 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e005      	b.n	800810e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2b32      	cmp	r3, #50	; 0x32
 8008106:	d101      	bne.n	800810c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e000      	b.n	800810e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
	...

08008118 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008118:	b084      	sub	sp, #16
 800811a:	b580      	push	{r7, lr}
 800811c:	b086      	sub	sp, #24
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
 8008122:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008126:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008132:	2300      	movs	r3, #0
 8008134:	613b      	str	r3, [r7, #16]
 8008136:	e009      	b.n	800814c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	3340      	adds	r3, #64	; 0x40
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	2200      	movs	r2, #0
 8008144:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	3301      	adds	r3, #1
 800814a:	613b      	str	r3, [r7, #16]
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	2b0e      	cmp	r3, #14
 8008150:	d9f2      	bls.n	8008138 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008154:	2b00      	cmp	r3, #0
 8008156:	d11c      	bne.n	8008192 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008166:	f043 0302 	orr.w	r3, r3, #2
 800816a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008170:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	601a      	str	r2, [r3, #0]
 8008190:	e005      	b.n	800819e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008196:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081a4:	461a      	mov	r2, r3
 80081a6:	2300      	movs	r3, #0
 80081a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081b0:	4619      	mov	r1, r3
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081b8:	461a      	mov	r2, r3
 80081ba:	680b      	ldr	r3, [r1, #0]
 80081bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80081be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d10c      	bne.n	80081de <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80081c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d104      	bne.n	80081d4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80081ca:	2100      	movs	r1, #0
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f965 	bl	800849c <USB_SetDevSpeed>
 80081d2:	e008      	b.n	80081e6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80081d4:	2101      	movs	r1, #1
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 f960 	bl	800849c <USB_SetDevSpeed>
 80081dc:	e003      	b.n	80081e6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80081de:	2103      	movs	r1, #3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 f95b 	bl	800849c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80081e6:	2110      	movs	r1, #16
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 f8f3 	bl	80083d4 <USB_FlushTxFifo>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d001      	beq.n	80081f8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 f91f 	bl	800843c <USB_FlushRxFifo>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d001      	beq.n	8008208 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800820e:	461a      	mov	r2, r3
 8008210:	2300      	movs	r3, #0
 8008212:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800821a:	461a      	mov	r2, r3
 800821c:	2300      	movs	r3, #0
 800821e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008226:	461a      	mov	r2, r3
 8008228:	2300      	movs	r3, #0
 800822a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800822c:	2300      	movs	r3, #0
 800822e:	613b      	str	r3, [r7, #16]
 8008230:	e043      	b.n	80082ba <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	015a      	lsls	r2, r3, #5
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	4413      	add	r3, r2
 800823a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008244:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008248:	d118      	bne.n	800827c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10a      	bne.n	8008266 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	015a      	lsls	r2, r3, #5
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	4413      	add	r3, r2
 8008258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800825c:	461a      	mov	r2, r3
 800825e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008262:	6013      	str	r3, [r2, #0]
 8008264:	e013      	b.n	800828e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	015a      	lsls	r2, r3, #5
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	4413      	add	r3, r2
 800826e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008272:	461a      	mov	r2, r3
 8008274:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008278:	6013      	str	r3, [r2, #0]
 800827a:	e008      	b.n	800828e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	015a      	lsls	r2, r3, #5
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	4413      	add	r3, r2
 8008284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008288:	461a      	mov	r2, r3
 800828a:	2300      	movs	r3, #0
 800828c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	015a      	lsls	r2, r3, #5
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	4413      	add	r3, r2
 8008296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800829a:	461a      	mov	r2, r3
 800829c:	2300      	movs	r3, #0
 800829e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	015a      	lsls	r2, r3, #5
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	4413      	add	r3, r2
 80082a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ac:	461a      	mov	r2, r3
 80082ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80082b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	3301      	adds	r3, #1
 80082b8:	613b      	str	r3, [r7, #16]
 80082ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d3b7      	bcc.n	8008232 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082c2:	2300      	movs	r3, #0
 80082c4:	613b      	str	r3, [r7, #16]
 80082c6:	e043      	b.n	8008350 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	015a      	lsls	r2, r3, #5
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	4413      	add	r3, r2
 80082d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082de:	d118      	bne.n	8008312 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10a      	bne.n	80082fc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	015a      	lsls	r2, r3, #5
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	4413      	add	r3, r2
 80082ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082f2:	461a      	mov	r2, r3
 80082f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80082f8:	6013      	str	r3, [r2, #0]
 80082fa:	e013      	b.n	8008324 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	015a      	lsls	r2, r3, #5
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	4413      	add	r3, r2
 8008304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008308:	461a      	mov	r2, r3
 800830a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800830e:	6013      	str	r3, [r2, #0]
 8008310:	e008      	b.n	8008324 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	015a      	lsls	r2, r3, #5
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	4413      	add	r3, r2
 800831a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800831e:	461a      	mov	r2, r3
 8008320:	2300      	movs	r3, #0
 8008322:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	4413      	add	r3, r2
 800832c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008330:	461a      	mov	r2, r3
 8008332:	2300      	movs	r3, #0
 8008334:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	015a      	lsls	r2, r3, #5
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	4413      	add	r3, r2
 800833e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008342:	461a      	mov	r2, r3
 8008344:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008348:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	3301      	adds	r3, #1
 800834e:	613b      	str	r3, [r7, #16]
 8008350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008352:	693a      	ldr	r2, [r7, #16]
 8008354:	429a      	cmp	r2, r3
 8008356:	d3b7      	bcc.n	80082c8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008366:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800836a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008378:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800837a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837c:	2b00      	cmp	r3, #0
 800837e:	d105      	bne.n	800838c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	f043 0210 	orr.w	r2, r3, #16
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	699a      	ldr	r2, [r3, #24]
 8008390:	4b0e      	ldr	r3, [pc, #56]	; (80083cc <USB_DevInit+0x2b4>)
 8008392:	4313      	orrs	r3, r2
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800839a:	2b00      	cmp	r3, #0
 800839c:	d005      	beq.n	80083aa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	f043 0208 	orr.w	r2, r3, #8
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80083aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d105      	bne.n	80083bc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	699a      	ldr	r2, [r3, #24]
 80083b4:	4b06      	ldr	r3, [pc, #24]	; (80083d0 <USB_DevInit+0x2b8>)
 80083b6:	4313      	orrs	r3, r2
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80083bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3718      	adds	r7, #24
 80083c2:	46bd      	mov	sp, r7
 80083c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80083c8:	b004      	add	sp, #16
 80083ca:	4770      	bx	lr
 80083cc:	803c3800 	.word	0x803c3800
 80083d0:	40000004 	.word	0x40000004

080083d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80083de:	2300      	movs	r3, #0
 80083e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	3301      	adds	r3, #1
 80083e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	4a13      	ldr	r2, [pc, #76]	; (8008438 <USB_FlushTxFifo+0x64>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d901      	bls.n	80083f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80083f0:	2303      	movs	r3, #3
 80083f2:	e01b      	b.n	800842c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	daf2      	bge.n	80083e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80083fc:	2300      	movs	r3, #0
 80083fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	019b      	lsls	r3, r3, #6
 8008404:	f043 0220 	orr.w	r2, r3, #32
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	3301      	adds	r3, #1
 8008410:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	4a08      	ldr	r2, [pc, #32]	; (8008438 <USB_FlushTxFifo+0x64>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d901      	bls.n	800841e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800841a:	2303      	movs	r3, #3
 800841c:	e006      	b.n	800842c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	f003 0320 	and.w	r3, r3, #32
 8008426:	2b20      	cmp	r3, #32
 8008428:	d0f0      	beq.n	800840c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3714      	adds	r7, #20
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr
 8008438:	00030d40 	.word	0x00030d40

0800843c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008444:	2300      	movs	r3, #0
 8008446:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	3301      	adds	r3, #1
 800844c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	4a11      	ldr	r2, [pc, #68]	; (8008498 <USB_FlushRxFifo+0x5c>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d901      	bls.n	800845a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	e018      	b.n	800848c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	2b00      	cmp	r3, #0
 8008460:	daf2      	bge.n	8008448 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008462:	2300      	movs	r3, #0
 8008464:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2210      	movs	r2, #16
 800846a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	3301      	adds	r3, #1
 8008470:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	4a08      	ldr	r2, [pc, #32]	; (8008498 <USB_FlushRxFifo+0x5c>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d901      	bls.n	800847e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800847a:	2303      	movs	r3, #3
 800847c:	e006      	b.n	800848c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	f003 0310 	and.w	r3, r3, #16
 8008486:	2b10      	cmp	r3, #16
 8008488:	d0f0      	beq.n	800846c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3714      	adds	r7, #20
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr
 8008498:	00030d40 	.word	0x00030d40

0800849c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	460b      	mov	r3, r1
 80084a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	78fb      	ldrb	r3, [r7, #3]
 80084b6:	68f9      	ldr	r1, [r7, #12]
 80084b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084bc:	4313      	orrs	r3, r2
 80084be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3714      	adds	r7, #20
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr

080084ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b085      	sub	sp, #20
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80084e8:	f023 0303 	bic.w	r3, r3, #3
 80084ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084fc:	f043 0302 	orr.w	r3, r3, #2
 8008500:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3714      	adds	r7, #20
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	695b      	ldr	r3, [r3, #20]
 800851c:	f003 0301 	and.w	r3, r3, #1
}
 8008520:	4618      	mov	r0, r3
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008534:	2300      	movs	r3, #0
 8008536:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	3301      	adds	r3, #1
 800853c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	4a13      	ldr	r2, [pc, #76]	; (8008590 <USB_CoreReset+0x64>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d901      	bls.n	800854a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e01b      	b.n	8008582 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	2b00      	cmp	r3, #0
 8008550:	daf2      	bge.n	8008538 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008552:	2300      	movs	r3, #0
 8008554:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	f043 0201 	orr.w	r2, r3, #1
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	3301      	adds	r3, #1
 8008566:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	4a09      	ldr	r2, [pc, #36]	; (8008590 <USB_CoreReset+0x64>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d901      	bls.n	8008574 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e006      	b.n	8008582 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	f003 0301 	and.w	r3, r3, #1
 800857c:	2b01      	cmp	r3, #1
 800857e:	d0f0      	beq.n	8008562 <USB_CoreReset+0x36>

  return HAL_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3714      	adds	r7, #20
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	00030d40 	.word	0x00030d40

08008594 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800859a:	4b98      	ldr	r3, [pc, #608]	; (80087fc <MX_LWIP_Init+0x268>)
 800859c:	22c0      	movs	r2, #192	; 0xc0
 800859e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80085a0:	4b96      	ldr	r3, [pc, #600]	; (80087fc <MX_LWIP_Init+0x268>)
 80085a2:	22a8      	movs	r2, #168	; 0xa8
 80085a4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80085a6:	4b95      	ldr	r3, [pc, #596]	; (80087fc <MX_LWIP_Init+0x268>)
 80085a8:	2200      	movs	r2, #0
 80085aa:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 20;
 80085ac:	4b93      	ldr	r3, [pc, #588]	; (80087fc <MX_LWIP_Init+0x268>)
 80085ae:	2214      	movs	r2, #20
 80085b0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80085b2:	4b93      	ldr	r3, [pc, #588]	; (8008800 <MX_LWIP_Init+0x26c>)
 80085b4:	22ff      	movs	r2, #255	; 0xff
 80085b6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80085b8:	4b91      	ldr	r3, [pc, #580]	; (8008800 <MX_LWIP_Init+0x26c>)
 80085ba:	22ff      	movs	r2, #255	; 0xff
 80085bc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80085be:	4b90      	ldr	r3, [pc, #576]	; (8008800 <MX_LWIP_Init+0x26c>)
 80085c0:	22ff      	movs	r2, #255	; 0xff
 80085c2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80085c4:	4b8e      	ldr	r3, [pc, #568]	; (8008800 <MX_LWIP_Init+0x26c>)
 80085c6:	2200      	movs	r2, #0
 80085c8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80085ca:	4b8e      	ldr	r3, [pc, #568]	; (8008804 <MX_LWIP_Init+0x270>)
 80085cc:	22c0      	movs	r2, #192	; 0xc0
 80085ce:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80085d0:	4b8c      	ldr	r3, [pc, #560]	; (8008804 <MX_LWIP_Init+0x270>)
 80085d2:	22a8      	movs	r2, #168	; 0xa8
 80085d4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80085d6:	4b8b      	ldr	r3, [pc, #556]	; (8008804 <MX_LWIP_Init+0x270>)
 80085d8:	2200      	movs	r2, #0
 80085da:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80085dc:	4b89      	ldr	r3, [pc, #548]	; (8008804 <MX_LWIP_Init+0x270>)
 80085de:	2201      	movs	r2, #1
 80085e0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80085e2:	2100      	movs	r1, #0
 80085e4:	2000      	movs	r0, #0
 80085e6:	f008 f909 	bl	80107fc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80085ea:	4b84      	ldr	r3, [pc, #528]	; (80087fc <MX_LWIP_Init+0x268>)
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	061a      	lsls	r2, r3, #24
 80085f0:	4b82      	ldr	r3, [pc, #520]	; (80087fc <MX_LWIP_Init+0x268>)
 80085f2:	785b      	ldrb	r3, [r3, #1]
 80085f4:	041b      	lsls	r3, r3, #16
 80085f6:	431a      	orrs	r2, r3
 80085f8:	4b80      	ldr	r3, [pc, #512]	; (80087fc <MX_LWIP_Init+0x268>)
 80085fa:	789b      	ldrb	r3, [r3, #2]
 80085fc:	021b      	lsls	r3, r3, #8
 80085fe:	4313      	orrs	r3, r2
 8008600:	4a7e      	ldr	r2, [pc, #504]	; (80087fc <MX_LWIP_Init+0x268>)
 8008602:	78d2      	ldrb	r2, [r2, #3]
 8008604:	4313      	orrs	r3, r2
 8008606:	061a      	lsls	r2, r3, #24
 8008608:	4b7c      	ldr	r3, [pc, #496]	; (80087fc <MX_LWIP_Init+0x268>)
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	0619      	lsls	r1, r3, #24
 800860e:	4b7b      	ldr	r3, [pc, #492]	; (80087fc <MX_LWIP_Init+0x268>)
 8008610:	785b      	ldrb	r3, [r3, #1]
 8008612:	041b      	lsls	r3, r3, #16
 8008614:	4319      	orrs	r1, r3
 8008616:	4b79      	ldr	r3, [pc, #484]	; (80087fc <MX_LWIP_Init+0x268>)
 8008618:	789b      	ldrb	r3, [r3, #2]
 800861a:	021b      	lsls	r3, r3, #8
 800861c:	430b      	orrs	r3, r1
 800861e:	4977      	ldr	r1, [pc, #476]	; (80087fc <MX_LWIP_Init+0x268>)
 8008620:	78c9      	ldrb	r1, [r1, #3]
 8008622:	430b      	orrs	r3, r1
 8008624:	021b      	lsls	r3, r3, #8
 8008626:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800862a:	431a      	orrs	r2, r3
 800862c:	4b73      	ldr	r3, [pc, #460]	; (80087fc <MX_LWIP_Init+0x268>)
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	0619      	lsls	r1, r3, #24
 8008632:	4b72      	ldr	r3, [pc, #456]	; (80087fc <MX_LWIP_Init+0x268>)
 8008634:	785b      	ldrb	r3, [r3, #1]
 8008636:	041b      	lsls	r3, r3, #16
 8008638:	4319      	orrs	r1, r3
 800863a:	4b70      	ldr	r3, [pc, #448]	; (80087fc <MX_LWIP_Init+0x268>)
 800863c:	789b      	ldrb	r3, [r3, #2]
 800863e:	021b      	lsls	r3, r3, #8
 8008640:	430b      	orrs	r3, r1
 8008642:	496e      	ldr	r1, [pc, #440]	; (80087fc <MX_LWIP_Init+0x268>)
 8008644:	78c9      	ldrb	r1, [r1, #3]
 8008646:	430b      	orrs	r3, r1
 8008648:	0a1b      	lsrs	r3, r3, #8
 800864a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800864e:	431a      	orrs	r2, r3
 8008650:	4b6a      	ldr	r3, [pc, #424]	; (80087fc <MX_LWIP_Init+0x268>)
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	0619      	lsls	r1, r3, #24
 8008656:	4b69      	ldr	r3, [pc, #420]	; (80087fc <MX_LWIP_Init+0x268>)
 8008658:	785b      	ldrb	r3, [r3, #1]
 800865a:	041b      	lsls	r3, r3, #16
 800865c:	4319      	orrs	r1, r3
 800865e:	4b67      	ldr	r3, [pc, #412]	; (80087fc <MX_LWIP_Init+0x268>)
 8008660:	789b      	ldrb	r3, [r3, #2]
 8008662:	021b      	lsls	r3, r3, #8
 8008664:	430b      	orrs	r3, r1
 8008666:	4965      	ldr	r1, [pc, #404]	; (80087fc <MX_LWIP_Init+0x268>)
 8008668:	78c9      	ldrb	r1, [r1, #3]
 800866a:	430b      	orrs	r3, r1
 800866c:	0e1b      	lsrs	r3, r3, #24
 800866e:	4313      	orrs	r3, r2
 8008670:	4a65      	ldr	r2, [pc, #404]	; (8008808 <MX_LWIP_Init+0x274>)
 8008672:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008674:	4b62      	ldr	r3, [pc, #392]	; (8008800 <MX_LWIP_Init+0x26c>)
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	061a      	lsls	r2, r3, #24
 800867a:	4b61      	ldr	r3, [pc, #388]	; (8008800 <MX_LWIP_Init+0x26c>)
 800867c:	785b      	ldrb	r3, [r3, #1]
 800867e:	041b      	lsls	r3, r3, #16
 8008680:	431a      	orrs	r2, r3
 8008682:	4b5f      	ldr	r3, [pc, #380]	; (8008800 <MX_LWIP_Init+0x26c>)
 8008684:	789b      	ldrb	r3, [r3, #2]
 8008686:	021b      	lsls	r3, r3, #8
 8008688:	4313      	orrs	r3, r2
 800868a:	4a5d      	ldr	r2, [pc, #372]	; (8008800 <MX_LWIP_Init+0x26c>)
 800868c:	78d2      	ldrb	r2, [r2, #3]
 800868e:	4313      	orrs	r3, r2
 8008690:	061a      	lsls	r2, r3, #24
 8008692:	4b5b      	ldr	r3, [pc, #364]	; (8008800 <MX_LWIP_Init+0x26c>)
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	0619      	lsls	r1, r3, #24
 8008698:	4b59      	ldr	r3, [pc, #356]	; (8008800 <MX_LWIP_Init+0x26c>)
 800869a:	785b      	ldrb	r3, [r3, #1]
 800869c:	041b      	lsls	r3, r3, #16
 800869e:	4319      	orrs	r1, r3
 80086a0:	4b57      	ldr	r3, [pc, #348]	; (8008800 <MX_LWIP_Init+0x26c>)
 80086a2:	789b      	ldrb	r3, [r3, #2]
 80086a4:	021b      	lsls	r3, r3, #8
 80086a6:	430b      	orrs	r3, r1
 80086a8:	4955      	ldr	r1, [pc, #340]	; (8008800 <MX_LWIP_Init+0x26c>)
 80086aa:	78c9      	ldrb	r1, [r1, #3]
 80086ac:	430b      	orrs	r3, r1
 80086ae:	021b      	lsls	r3, r3, #8
 80086b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80086b4:	431a      	orrs	r2, r3
 80086b6:	4b52      	ldr	r3, [pc, #328]	; (8008800 <MX_LWIP_Init+0x26c>)
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	0619      	lsls	r1, r3, #24
 80086bc:	4b50      	ldr	r3, [pc, #320]	; (8008800 <MX_LWIP_Init+0x26c>)
 80086be:	785b      	ldrb	r3, [r3, #1]
 80086c0:	041b      	lsls	r3, r3, #16
 80086c2:	4319      	orrs	r1, r3
 80086c4:	4b4e      	ldr	r3, [pc, #312]	; (8008800 <MX_LWIP_Init+0x26c>)
 80086c6:	789b      	ldrb	r3, [r3, #2]
 80086c8:	021b      	lsls	r3, r3, #8
 80086ca:	430b      	orrs	r3, r1
 80086cc:	494c      	ldr	r1, [pc, #304]	; (8008800 <MX_LWIP_Init+0x26c>)
 80086ce:	78c9      	ldrb	r1, [r1, #3]
 80086d0:	430b      	orrs	r3, r1
 80086d2:	0a1b      	lsrs	r3, r3, #8
 80086d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80086d8:	431a      	orrs	r2, r3
 80086da:	4b49      	ldr	r3, [pc, #292]	; (8008800 <MX_LWIP_Init+0x26c>)
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	0619      	lsls	r1, r3, #24
 80086e0:	4b47      	ldr	r3, [pc, #284]	; (8008800 <MX_LWIP_Init+0x26c>)
 80086e2:	785b      	ldrb	r3, [r3, #1]
 80086e4:	041b      	lsls	r3, r3, #16
 80086e6:	4319      	orrs	r1, r3
 80086e8:	4b45      	ldr	r3, [pc, #276]	; (8008800 <MX_LWIP_Init+0x26c>)
 80086ea:	789b      	ldrb	r3, [r3, #2]
 80086ec:	021b      	lsls	r3, r3, #8
 80086ee:	430b      	orrs	r3, r1
 80086f0:	4943      	ldr	r1, [pc, #268]	; (8008800 <MX_LWIP_Init+0x26c>)
 80086f2:	78c9      	ldrb	r1, [r1, #3]
 80086f4:	430b      	orrs	r3, r1
 80086f6:	0e1b      	lsrs	r3, r3, #24
 80086f8:	4313      	orrs	r3, r2
 80086fa:	4a44      	ldr	r2, [pc, #272]	; (800880c <MX_LWIP_Init+0x278>)
 80086fc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80086fe:	4b41      	ldr	r3, [pc, #260]	; (8008804 <MX_LWIP_Init+0x270>)
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	061a      	lsls	r2, r3, #24
 8008704:	4b3f      	ldr	r3, [pc, #252]	; (8008804 <MX_LWIP_Init+0x270>)
 8008706:	785b      	ldrb	r3, [r3, #1]
 8008708:	041b      	lsls	r3, r3, #16
 800870a:	431a      	orrs	r2, r3
 800870c:	4b3d      	ldr	r3, [pc, #244]	; (8008804 <MX_LWIP_Init+0x270>)
 800870e:	789b      	ldrb	r3, [r3, #2]
 8008710:	021b      	lsls	r3, r3, #8
 8008712:	4313      	orrs	r3, r2
 8008714:	4a3b      	ldr	r2, [pc, #236]	; (8008804 <MX_LWIP_Init+0x270>)
 8008716:	78d2      	ldrb	r2, [r2, #3]
 8008718:	4313      	orrs	r3, r2
 800871a:	061a      	lsls	r2, r3, #24
 800871c:	4b39      	ldr	r3, [pc, #228]	; (8008804 <MX_LWIP_Init+0x270>)
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	0619      	lsls	r1, r3, #24
 8008722:	4b38      	ldr	r3, [pc, #224]	; (8008804 <MX_LWIP_Init+0x270>)
 8008724:	785b      	ldrb	r3, [r3, #1]
 8008726:	041b      	lsls	r3, r3, #16
 8008728:	4319      	orrs	r1, r3
 800872a:	4b36      	ldr	r3, [pc, #216]	; (8008804 <MX_LWIP_Init+0x270>)
 800872c:	789b      	ldrb	r3, [r3, #2]
 800872e:	021b      	lsls	r3, r3, #8
 8008730:	430b      	orrs	r3, r1
 8008732:	4934      	ldr	r1, [pc, #208]	; (8008804 <MX_LWIP_Init+0x270>)
 8008734:	78c9      	ldrb	r1, [r1, #3]
 8008736:	430b      	orrs	r3, r1
 8008738:	021b      	lsls	r3, r3, #8
 800873a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800873e:	431a      	orrs	r2, r3
 8008740:	4b30      	ldr	r3, [pc, #192]	; (8008804 <MX_LWIP_Init+0x270>)
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	0619      	lsls	r1, r3, #24
 8008746:	4b2f      	ldr	r3, [pc, #188]	; (8008804 <MX_LWIP_Init+0x270>)
 8008748:	785b      	ldrb	r3, [r3, #1]
 800874a:	041b      	lsls	r3, r3, #16
 800874c:	4319      	orrs	r1, r3
 800874e:	4b2d      	ldr	r3, [pc, #180]	; (8008804 <MX_LWIP_Init+0x270>)
 8008750:	789b      	ldrb	r3, [r3, #2]
 8008752:	021b      	lsls	r3, r3, #8
 8008754:	430b      	orrs	r3, r1
 8008756:	492b      	ldr	r1, [pc, #172]	; (8008804 <MX_LWIP_Init+0x270>)
 8008758:	78c9      	ldrb	r1, [r1, #3]
 800875a:	430b      	orrs	r3, r1
 800875c:	0a1b      	lsrs	r3, r3, #8
 800875e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008762:	431a      	orrs	r2, r3
 8008764:	4b27      	ldr	r3, [pc, #156]	; (8008804 <MX_LWIP_Init+0x270>)
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	0619      	lsls	r1, r3, #24
 800876a:	4b26      	ldr	r3, [pc, #152]	; (8008804 <MX_LWIP_Init+0x270>)
 800876c:	785b      	ldrb	r3, [r3, #1]
 800876e:	041b      	lsls	r3, r3, #16
 8008770:	4319      	orrs	r1, r3
 8008772:	4b24      	ldr	r3, [pc, #144]	; (8008804 <MX_LWIP_Init+0x270>)
 8008774:	789b      	ldrb	r3, [r3, #2]
 8008776:	021b      	lsls	r3, r3, #8
 8008778:	430b      	orrs	r3, r1
 800877a:	4922      	ldr	r1, [pc, #136]	; (8008804 <MX_LWIP_Init+0x270>)
 800877c:	78c9      	ldrb	r1, [r1, #3]
 800877e:	430b      	orrs	r3, r1
 8008780:	0e1b      	lsrs	r3, r3, #24
 8008782:	4313      	orrs	r3, r2
 8008784:	4a22      	ldr	r2, [pc, #136]	; (8008810 <MX_LWIP_Init+0x27c>)
 8008786:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8008788:	4b22      	ldr	r3, [pc, #136]	; (8008814 <MX_LWIP_Init+0x280>)
 800878a:	9302      	str	r3, [sp, #8]
 800878c:	4b22      	ldr	r3, [pc, #136]	; (8008818 <MX_LWIP_Init+0x284>)
 800878e:	9301      	str	r3, [sp, #4]
 8008790:	2300      	movs	r3, #0
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	4b1e      	ldr	r3, [pc, #120]	; (8008810 <MX_LWIP_Init+0x27c>)
 8008796:	4a1d      	ldr	r2, [pc, #116]	; (800880c <MX_LWIP_Init+0x278>)
 8008798:	491b      	ldr	r1, [pc, #108]	; (8008808 <MX_LWIP_Init+0x274>)
 800879a:	4820      	ldr	r0, [pc, #128]	; (800881c <MX_LWIP_Init+0x288>)
 800879c:	f008 fdf8 	bl	8011390 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80087a0:	481e      	ldr	r0, [pc, #120]	; (800881c <MX_LWIP_Init+0x288>)
 80087a2:	f008 ffa7 	bl	80116f4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80087a6:	4b1d      	ldr	r3, [pc, #116]	; (800881c <MX_LWIP_Init+0x288>)
 80087a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80087ac:	089b      	lsrs	r3, r3, #2
 80087ae:	f003 0301 	and.w	r3, r3, #1
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d003      	beq.n	80087c0 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80087b8:	4818      	ldr	r0, [pc, #96]	; (800881c <MX_LWIP_Init+0x288>)
 80087ba:	f008 ffab 	bl	8011714 <netif_set_up>
 80087be:	e002      	b.n	80087c6 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80087c0:	4816      	ldr	r0, [pc, #88]	; (800881c <MX_LWIP_Init+0x288>)
 80087c2:	f009 f813 	bl	80117ec <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80087c6:	4916      	ldr	r1, [pc, #88]	; (8008820 <MX_LWIP_Init+0x28c>)
 80087c8:	4814      	ldr	r0, [pc, #80]	; (800881c <MX_LWIP_Init+0x288>)
 80087ca:	f009 f8a5 	bl	8011918 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80087ce:	2224      	movs	r2, #36	; 0x24
 80087d0:	2100      	movs	r1, #0
 80087d2:	4814      	ldr	r0, [pc, #80]	; (8008824 <MX_LWIP_Init+0x290>)
 80087d4:	f013 f80e 	bl	801b7f4 <memset>
  attributes.name = "EthLink";
 80087d8:	4b12      	ldr	r3, [pc, #72]	; (8008824 <MX_LWIP_Init+0x290>)
 80087da:	4a13      	ldr	r2, [pc, #76]	; (8008828 <MX_LWIP_Init+0x294>)
 80087dc:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80087de:	4b11      	ldr	r3, [pc, #68]	; (8008824 <MX_LWIP_Init+0x290>)
 80087e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80087e4:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80087e6:	4b0f      	ldr	r3, [pc, #60]	; (8008824 <MX_LWIP_Init+0x290>)
 80087e8:	2210      	movs	r2, #16
 80087ea:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80087ec:	4a0d      	ldr	r2, [pc, #52]	; (8008824 <MX_LWIP_Init+0x290>)
 80087ee:	490b      	ldr	r1, [pc, #44]	; (800881c <MX_LWIP_Init+0x288>)
 80087f0:	480e      	ldr	r0, [pc, #56]	; (800882c <MX_LWIP_Init+0x298>)
 80087f2:	f000 fda3 	bl	800933c <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80087f6:	bf00      	nop
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	200044d0 	.word	0x200044d0
 8008800:	200044d4 	.word	0x200044d4
 8008804:	200044d8 	.word	0x200044d8
 8008808:	200044c4 	.word	0x200044c4
 800880c:	200044c8 	.word	0x200044c8
 8008810:	200044cc 	.word	0x200044cc
 8008814:	0801070d 	.word	0x0801070d
 8008818:	08008d2d 	.word	0x08008d2d
 800881c:	20004490 	.word	0x20004490
 8008820:	08008831 	.word	0x08008831
 8008824:	200044dc 	.word	0x200044dc
 8008828:	0801cc98 	.word	0x0801cc98
 800882c:	08008ff5 	.word	0x08008ff5

08008830 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8008838:	bf00      	nop
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8008844:	b480      	push	{r7}
 8008846:	b087      	sub	sp, #28
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8008856:	2320      	movs	r3, #32
 8008858:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800885a:	f3bf 8f4f 	dsb	sy
}
 800885e:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8008860:	e00b      	b.n	800887a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8008862:	4a0d      	ldr	r2, [pc, #52]	; (8008898 <SCB_InvalidateDCache_by_Addr+0x54>)
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	4413      	add	r3, r2
 8008870:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8008872:	697a      	ldr	r2, [r7, #20]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	2b00      	cmp	r3, #0
 800887e:	dcf0      	bgt.n	8008862 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8008880:	f3bf 8f4f 	dsb	sy
}
 8008884:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008886:	f3bf 8f6f 	isb	sy
}
 800888a:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800888c:	bf00      	nop
 800888e:	371c      	adds	r7, #28
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr
 8008898:	e000ed00 	.word	0xe000ed00

0800889c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80088a4:	4b04      	ldr	r3, [pc, #16]	; (80088b8 <HAL_ETH_RxCpltCallback+0x1c>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f001 f865 	bl	8009978 <osSemaphoreRelease>
}
 80088ae:	bf00      	nop
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	20008e8c 	.word	0x20008e8c

080088bc <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80088c4:	4b04      	ldr	r3, [pc, #16]	; (80088d8 <HAL_ETH_TxCpltCallback+0x1c>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f001 f855 	bl	8009978 <osSemaphoreRelease>
}
 80088ce:	bf00      	nop
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	20008e90 	.word	0x20008e90

080088dc <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f7fb ff19 	bl	800471c <HAL_ETH_GetDMAError>
 80088ea:	4603      	mov	r3, r0
 80088ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088f0:	2b80      	cmp	r3, #128	; 0x80
 80088f2:	d104      	bne.n	80088fe <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80088f4:	4b04      	ldr	r3, [pc, #16]	; (8008908 <HAL_ETH_ErrorCallback+0x2c>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f001 f83d 	bl	8009978 <osSemaphoreRelease>
  }
}
 80088fe:	bf00      	nop
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	20008e8c 	.word	0x20008e8c

0800890c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b0aa      	sub	sp, #168	; 0xa8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8008914:	2300      	movs	r3, #0
 8008916:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800891a:	2300      	movs	r3, #0
 800891c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8008920:	2300      	movs	r3, #0
 8008922:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8008926:	f107 0310 	add.w	r3, r7, #16
 800892a:	2264      	movs	r2, #100	; 0x64
 800892c:	2100      	movs	r1, #0
 800892e:	4618      	mov	r0, r3
 8008930:	f012 ff60 	bl	801b7f4 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008934:	4b85      	ldr	r3, [pc, #532]	; (8008b4c <low_level_init+0x240>)
 8008936:	4a86      	ldr	r2, [pc, #536]	; (8008b50 <low_level_init+0x244>)
 8008938:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800893a:	2300      	movs	r3, #0
 800893c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800893e:	2380      	movs	r3, #128	; 0x80
 8008940:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8008942:	23e1      	movs	r3, #225	; 0xe1
 8008944:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8008946:	2300      	movs	r3, #0
 8008948:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800894a:	2300      	movs	r3, #0
 800894c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800894e:	2300      	movs	r3, #0
 8008950:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8008952:	4a7e      	ldr	r2, [pc, #504]	; (8008b4c <low_level_init+0x240>)
 8008954:	f107 0308 	add.w	r3, r7, #8
 8008958:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800895a:	4b7c      	ldr	r3, [pc, #496]	; (8008b4c <low_level_init+0x240>)
 800895c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008960:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8008962:	4b7a      	ldr	r3, [pc, #488]	; (8008b4c <low_level_init+0x240>)
 8008964:	4a7b      	ldr	r2, [pc, #492]	; (8008b54 <low_level_init+0x248>)
 8008966:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8008968:	4b78      	ldr	r3, [pc, #480]	; (8008b4c <low_level_init+0x240>)
 800896a:	4a7b      	ldr	r2, [pc, #492]	; (8008b58 <low_level_init+0x24c>)
 800896c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800896e:	4b77      	ldr	r3, [pc, #476]	; (8008b4c <low_level_init+0x240>)
 8008970:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008974:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008976:	4875      	ldr	r0, [pc, #468]	; (8008b4c <low_level_init+0x240>)
 8008978:	f7fb f892 	bl	8003aa0 <HAL_ETH_Init>
 800897c:	4603      	mov	r3, r0
 800897e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8008982:	2238      	movs	r2, #56	; 0x38
 8008984:	2100      	movs	r1, #0
 8008986:	4875      	ldr	r0, [pc, #468]	; (8008b5c <low_level_init+0x250>)
 8008988:	f012 ff34 	bl	801b7f4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800898c:	4b73      	ldr	r3, [pc, #460]	; (8008b5c <low_level_init+0x250>)
 800898e:	2221      	movs	r2, #33	; 0x21
 8008990:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8008992:	4b72      	ldr	r3, [pc, #456]	; (8008b5c <low_level_init+0x250>)
 8008994:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8008998:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800899a:	4b70      	ldr	r3, [pc, #448]	; (8008b5c <low_level_init+0x250>)
 800899c:	2200      	movs	r2, #0
 800899e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80089a0:	486f      	ldr	r0, [pc, #444]	; (8008b60 <low_level_init+0x254>)
 80089a2:	f008 fbaf 	bl	8011104 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2206      	movs	r2, #6
 80089aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80089ae:	4b67      	ldr	r3, [pc, #412]	; (8008b4c <low_level_init+0x240>)
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	781a      	ldrb	r2, [r3, #0]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80089ba:	4b64      	ldr	r3, [pc, #400]	; (8008b4c <low_level_init+0x240>)
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	785a      	ldrb	r2, [r3, #1]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80089c6:	4b61      	ldr	r3, [pc, #388]	; (8008b4c <low_level_init+0x240>)
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	789a      	ldrb	r2, [r3, #2]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80089d2:	4b5e      	ldr	r3, [pc, #376]	; (8008b4c <low_level_init+0x240>)
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	78da      	ldrb	r2, [r3, #3]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80089de:	4b5b      	ldr	r3, [pc, #364]	; (8008b4c <low_level_init+0x240>)
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	791a      	ldrb	r2, [r3, #4]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80089ea:	4b58      	ldr	r3, [pc, #352]	; (8008b4c <low_level_init+0x240>)
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	795a      	ldrb	r2, [r3, #5]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80089fc:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008a04:	f043 030a 	orr.w	r3, r3, #10
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8008a10:	2200      	movs	r2, #0
 8008a12:	2101      	movs	r1, #1
 8008a14:	2001      	movs	r0, #1
 8008a16:	f000 fead 	bl	8009774 <osSemaphoreNew>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	4a51      	ldr	r2, [pc, #324]	; (8008b64 <low_level_init+0x258>)
 8008a1e:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8008a20:	2200      	movs	r2, #0
 8008a22:	2101      	movs	r1, #1
 8008a24:	2001      	movs	r0, #1
 8008a26:	f000 fea5 	bl	8009774 <osSemaphoreNew>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	4a4e      	ldr	r2, [pc, #312]	; (8008b68 <low_level_init+0x25c>)
 8008a2e:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8008a30:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008a34:	2224      	movs	r2, #36	; 0x24
 8008a36:	2100      	movs	r1, #0
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f012 fedb 	bl	801b7f4 <memset>
  attributes.name = "EthIf";
 8008a3e:	4b4b      	ldr	r3, [pc, #300]	; (8008b6c <low_level_init+0x260>)
 8008a40:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8008a42:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8008a46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 8008a4a:	2330      	movs	r3, #48	; 0x30
 8008a4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8008a50:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008a54:	461a      	mov	r2, r3
 8008a56:	6879      	ldr	r1, [r7, #4]
 8008a58:	4845      	ldr	r0, [pc, #276]	; (8008b70 <low_level_init+0x264>)
 8008a5a:	f000 fc6f 	bl	800933c <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8008a5e:	4945      	ldr	r1, [pc, #276]	; (8008b74 <low_level_init+0x268>)
 8008a60:	4845      	ldr	r0, [pc, #276]	; (8008b78 <low_level_init+0x26c>)
 8008a62:	f7f9 fbb0 	bl	80021c6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8008a66:	4844      	ldr	r0, [pc, #272]	; (8008b78 <low_level_init+0x26c>)
 8008a68:	f7f9 fbdf 	bl	800222a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8008a6c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d164      	bne.n	8008b3e <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008a74:	4840      	ldr	r0, [pc, #256]	; (8008b78 <low_level_init+0x26c>)
 8008a76:	f7f9 fc80 	bl	800237a <LAN8742_GetLinkState>
 8008a7a:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8008a7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	dc06      	bgt.n	8008a94 <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f008 ff16 	bl	80118b8 <netif_set_link_down>
      netif_set_down(netif);
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f008 fead 	bl	80117ec <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008a92:	e056      	b.n	8008b42 <low_level_init+0x236>
      switch (PHYLinkState)
 8008a94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a98:	3b02      	subs	r3, #2
 8008a9a:	2b03      	cmp	r3, #3
 8008a9c:	d82a      	bhi.n	8008af4 <low_level_init+0x1e8>
 8008a9e:	a201      	add	r2, pc, #4	; (adr r2, 8008aa4 <low_level_init+0x198>)
 8008aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa4:	08008ab5 	.word	0x08008ab5
 8008aa8:	08008ac7 	.word	0x08008ac7
 8008aac:	08008ad7 	.word	0x08008ad7
 8008ab0:	08008ae7 	.word	0x08008ae7
        duplex = ETH_FULLDUPLEX_MODE;
 8008ab4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ab8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8008abc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008ac0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008ac4:	e01f      	b.n	8008b06 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8008acc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008ad0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008ad4:	e017      	b.n	8008b06 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8008ad6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ada:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008ae4:	e00f      	b.n	8008b06 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8008aec:	2300      	movs	r3, #0
 8008aee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008af2:	e008      	b.n	8008b06 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8008af4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008af8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8008afc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008b00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008b04:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008b06:	f107 0310 	add.w	r3, r7, #16
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	480f      	ldr	r0, [pc, #60]	; (8008b4c <low_level_init+0x240>)
 8008b0e:	f7fb fcab 	bl	8004468 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8008b12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008b16:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8008b18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008b1e:	f107 0310 	add.w	r3, r7, #16
 8008b22:	4619      	mov	r1, r3
 8008b24:	4809      	ldr	r0, [pc, #36]	; (8008b4c <low_level_init+0x240>)
 8008b26:	f7fb fd89 	bl	800463c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8008b2a:	4808      	ldr	r0, [pc, #32]	; (8008b4c <low_level_init+0x240>)
 8008b2c:	f7fb f834 	bl	8003b98 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f008 fdef 	bl	8011714 <netif_set_up>
    netif_set_link_up(netif);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f008 fe8a 	bl	8011850 <netif_set_link_up>
}
 8008b3c:	e001      	b.n	8008b42 <low_level_init+0x236>
    Error_Handler();
 8008b3e:	f7f8 ffc9 	bl	8001ad4 <Error_Handler>
}
 8008b42:	bf00      	nop
 8008b44:	37a8      	adds	r7, #168	; 0xa8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	20008e94 	.word	0x20008e94
 8008b50:	40028000 	.word	0x40028000
 8008b54:	20000134 	.word	0x20000134
 8008b58:	20000094 	.word	0x20000094
 8008b5c:	20008f44 	.word	0x20008f44
 8008b60:	080204a8 	.word	0x080204a8
 8008b64:	20008e8c 	.word	0x20008e8c
 8008b68:	20008e90 	.word	0x20008e90
 8008b6c:	0801cca0 	.word	0x0801cca0
 8008b70:	08008cd9 	.word	0x08008cd9
 8008b74:	2000000c 	.word	0x2000000c
 8008b78:	20008f7c 	.word	0x20008f7c

08008b7c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b092      	sub	sp, #72	; 0x48
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8008b86:	2300      	movs	r3, #0
 8008b88:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8008b94:	f107 030c 	add.w	r3, r7, #12
 8008b98:	2230      	movs	r2, #48	; 0x30
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f012 fe29 	bl	801b7f4 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008ba2:	f107 030c 	add.w	r3, r7, #12
 8008ba6:	2230      	movs	r2, #48	; 0x30
 8008ba8:	2100      	movs	r1, #0
 8008baa:	4618      	mov	r0, r3
 8008bac:	f012 fe22 	bl	801b7f4 <memset>

  for(q = p; q != NULL; q = q->next)
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	643b      	str	r3, [r7, #64]	; 0x40
 8008bb4:	e045      	b.n	8008c42 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8008bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bb8:	2b03      	cmp	r3, #3
 8008bba:	d902      	bls.n	8008bc2 <low_level_output+0x46>
      return ERR_IF;
 8008bbc:	f06f 030b 	mvn.w	r3, #11
 8008bc0:	e065      	b.n	8008c8e <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8008bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bc4:	6859      	ldr	r1, [r3, #4]
 8008bc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bc8:	4613      	mov	r3, r2
 8008bca:	005b      	lsls	r3, r3, #1
 8008bcc:	4413      	add	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	3348      	adds	r3, #72	; 0x48
 8008bd2:	443b      	add	r3, r7
 8008bd4:	3b3c      	subs	r3, #60	; 0x3c
 8008bd6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8008bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bda:	895b      	ldrh	r3, [r3, #10]
 8008bdc:	4619      	mov	r1, r3
 8008bde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008be0:	4613      	mov	r3, r2
 8008be2:	005b      	lsls	r3, r3, #1
 8008be4:	4413      	add	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	3348      	adds	r3, #72	; 0x48
 8008bea:	443b      	add	r3, r7
 8008bec:	3b38      	subs	r3, #56	; 0x38
 8008bee:	6019      	str	r1, [r3, #0]

    if(i>0)
 8008bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d011      	beq.n	8008c1a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8008bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bf8:	1e5a      	subs	r2, r3, #1
 8008bfa:	f107 000c 	add.w	r0, r7, #12
 8008bfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008c00:	460b      	mov	r3, r1
 8008c02:	005b      	lsls	r3, r3, #1
 8008c04:	440b      	add	r3, r1
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	18c1      	adds	r1, r0, r3
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	005b      	lsls	r3, r3, #1
 8008c0e:	4413      	add	r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	3348      	adds	r3, #72	; 0x48
 8008c14:	443b      	add	r3, r7
 8008c16:	3b34      	subs	r3, #52	; 0x34
 8008c18:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8008c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d109      	bne.n	8008c36 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8008c22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c24:	4613      	mov	r3, r2
 8008c26:	005b      	lsls	r3, r3, #1
 8008c28:	4413      	add	r3, r2
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	3348      	adds	r3, #72	; 0x48
 8008c2e:	443b      	add	r3, r7
 8008c30:	3b34      	subs	r3, #52	; 0x34
 8008c32:	2200      	movs	r2, #0
 8008c34:	601a      	str	r2, [r3, #0]
    }

    i++;
 8008c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c38:	3301      	adds	r3, #1
 8008c3a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8008c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	643b      	str	r3, [r7, #64]	; 0x40
 8008c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1b6      	bne.n	8008bb6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	891b      	ldrh	r3, [r3, #8]
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	4b12      	ldr	r3, [pc, #72]	; (8008c98 <low_level_output+0x11c>)
 8008c50:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8008c52:	4a11      	ldr	r2, [pc, #68]	; (8008c98 <low_level_output+0x11c>)
 8008c54:	f107 030c 	add.w	r3, r7, #12
 8008c58:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8008c5a:	4a0f      	ldr	r2, [pc, #60]	; (8008c98 <low_level_output+0x11c>)
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8008c60:	6838      	ldr	r0, [r7, #0]
 8008c62:	f009 fadf 	bl	8012224 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8008c66:	490c      	ldr	r1, [pc, #48]	; (8008c98 <low_level_output+0x11c>)
 8008c68:	480c      	ldr	r0, [pc, #48]	; (8008c9c <low_level_output+0x120>)
 8008c6a:	f7fb f8a3 	bl	8003db4 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8008c6e:	bf00      	nop
 8008c70:	4b0b      	ldr	r3, [pc, #44]	; (8008ca0 <low_level_output+0x124>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f04f 31ff 	mov.w	r1, #4294967295
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f000 fe17 	bl	80098ac <osSemaphoreAcquire>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1f5      	bne.n	8008c70 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8008c84:	4805      	ldr	r0, [pc, #20]	; (8008c9c <low_level_output+0x120>)
 8008c86:	f7fb fa29 	bl	80040dc <HAL_ETH_ReleaseTxPacket>

  return errval;
 8008c8a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3748      	adds	r7, #72	; 0x48
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	20008f44 	.word	0x20008f44
 8008c9c:	20008e94 	.word	0x20008e94
 8008ca0:	20008e90 	.word	0x20008e90

08008ca4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008cac:	2300      	movs	r3, #0
 8008cae:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8008cb0:	4b07      	ldr	r3, [pc, #28]	; (8008cd0 <low_level_input+0x2c>)
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d105      	bne.n	8008cc4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8008cb8:	f107 030c 	add.w	r3, r7, #12
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	4805      	ldr	r0, [pc, #20]	; (8008cd4 <low_level_input+0x30>)
 8008cc0:	f7fb f8d4 	bl	8003e6c <HAL_ETH_ReadData>
  }

  return p;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	20008e88 	.word	0x20008e88
 8008cd4:	20008e94 	.word	0x20008e94

08008cd8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008ce8:	4b0f      	ldr	r3, [pc, #60]	; (8008d28 <ethernetif_input+0x50>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f04f 31ff 	mov.w	r1, #4294967295
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f000 fddb 	bl	80098ac <osSemaphoreAcquire>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d1f5      	bne.n	8008ce8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8008cfc:	68b8      	ldr	r0, [r7, #8]
 8008cfe:	f7ff ffd1 	bl	8008ca4 <low_level_input>
 8008d02:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00a      	beq.n	8008d20 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	691b      	ldr	r3, [r3, #16]
 8008d0e:	68b9      	ldr	r1, [r7, #8]
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	4798      	blx	r3
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d002      	beq.n	8008d20 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	f009 f9dc 	bl	80120d8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1ea      	bne.n	8008cfc <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008d26:	e7df      	b.n	8008ce8 <ethernetif_input+0x10>
 8008d28:	20008e8c 	.word	0x20008e8c

08008d2c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d106      	bne.n	8008d48 <ethernetif_init+0x1c>
 8008d3a:	4b0e      	ldr	r3, [pc, #56]	; (8008d74 <ethernetif_init+0x48>)
 8008d3c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008d40:	490d      	ldr	r1, [pc, #52]	; (8008d78 <ethernetif_init+0x4c>)
 8008d42:	480e      	ldr	r0, [pc, #56]	; (8008d7c <ethernetif_init+0x50>)
 8008d44:	f012 fd5e 	bl	801b804 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2273      	movs	r2, #115	; 0x73
 8008d4c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2274      	movs	r2, #116	; 0x74
 8008d54:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4a09      	ldr	r2, [pc, #36]	; (8008d80 <ethernetif_init+0x54>)
 8008d5c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a08      	ldr	r2, [pc, #32]	; (8008d84 <ethernetif_init+0x58>)
 8008d62:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f7ff fdd1 	bl	800890c <low_level_init>

  return ERR_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	0801cca8 	.word	0x0801cca8
 8008d78:	0801ccc4 	.word	0x0801ccc4
 8008d7c:	0801ccd4 	.word	0x0801ccd4
 8008d80:	08019711 	.word	0x08019711
 8008d84:	08008b7d 	.word	0x08008b7d

08008d88 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008d94:	68f9      	ldr	r1, [r7, #12]
 8008d96:	4809      	ldr	r0, [pc, #36]	; (8008dbc <pbuf_free_custom+0x34>)
 8008d98:	f008 faa4 	bl	80112e4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8008d9c:	4b08      	ldr	r3, [pc, #32]	; (8008dc0 <pbuf_free_custom+0x38>)
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d107      	bne.n	8008db4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8008da4:	4b06      	ldr	r3, [pc, #24]	; (8008dc0 <pbuf_free_custom+0x38>)
 8008da6:	2200      	movs	r2, #0
 8008da8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8008daa:	4b06      	ldr	r3, [pc, #24]	; (8008dc4 <pbuf_free_custom+0x3c>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4618      	mov	r0, r3
 8008db0:	f000 fde2 	bl	8009978 <osSemaphoreRelease>
  }
}
 8008db4:	bf00      	nop
 8008db6:	3710      	adds	r7, #16
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	080204a8 	.word	0x080204a8
 8008dc0:	20008e88 	.word	0x20008e88
 8008dc4:	20008e8c 	.word	0x20008e8c

08008dc8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008dcc:	f7f9 fb7e 	bl	80024cc <HAL_GetTick>
 8008dd0:	4603      	mov	r3, r0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	bd80      	pop	{r7, pc}
	...

08008dd8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b08e      	sub	sp, #56	; 0x38
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008de4:	2200      	movs	r2, #0
 8008de6:	601a      	str	r2, [r3, #0]
 8008de8:	605a      	str	r2, [r3, #4]
 8008dea:	609a      	str	r2, [r3, #8]
 8008dec:	60da      	str	r2, [r3, #12]
 8008dee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a52      	ldr	r2, [pc, #328]	; (8008f40 <HAL_ETH_MspInit+0x168>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	f040 809e 	bne.w	8008f38 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8008dfc:	4b51      	ldr	r3, [pc, #324]	; (8008f44 <HAL_ETH_MspInit+0x16c>)
 8008dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e00:	4a50      	ldr	r2, [pc, #320]	; (8008f44 <HAL_ETH_MspInit+0x16c>)
 8008e02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008e06:	6313      	str	r3, [r2, #48]	; 0x30
 8008e08:	4b4e      	ldr	r3, [pc, #312]	; (8008f44 <HAL_ETH_MspInit+0x16c>)
 8008e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e10:	623b      	str	r3, [r7, #32]
 8008e12:	6a3b      	ldr	r3, [r7, #32]
 8008e14:	4b4b      	ldr	r3, [pc, #300]	; (8008f44 <HAL_ETH_MspInit+0x16c>)
 8008e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e18:	4a4a      	ldr	r2, [pc, #296]	; (8008f44 <HAL_ETH_MspInit+0x16c>)
 8008e1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8008e20:	4b48      	ldr	r3, [pc, #288]	; (8008f44 <HAL_ETH_MspInit+0x16c>)
 8008e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008e28:	61fb      	str	r3, [r7, #28]
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	4b45      	ldr	r3, [pc, #276]	; (8008f44 <HAL_ETH_MspInit+0x16c>)
 8008e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e30:	4a44      	ldr	r2, [pc, #272]	; (8008f44 <HAL_ETH_MspInit+0x16c>)
 8008e32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008e36:	6313      	str	r3, [r2, #48]	; 0x30
 8008e38:	4b42      	ldr	r3, [pc, #264]	; (8008f44 <HAL_ETH_MspInit+0x16c>)
 8008e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e40:	61bb      	str	r3, [r7, #24]
 8008e42:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e44:	4b3f      	ldr	r3, [pc, #252]	; (8008f44 <HAL_ETH_MspInit+0x16c>)
 8008e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e48:	4a3e      	ldr	r2, [pc, #248]	; (8008f44 <HAL_ETH_MspInit+0x16c>)
 8008e4a:	f043 0304 	orr.w	r3, r3, #4
 8008e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8008e50:	4b3c      	ldr	r3, [pc, #240]	; (8008f44 <HAL_ETH_MspInit+0x16c>)
 8008e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e54:	f003 0304 	and.w	r3, r3, #4
 8008e58:	617b      	str	r3, [r7, #20]
 8008e5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e5c:	4b39      	ldr	r3, [pc, #228]	; (8008f44 <HAL_ETH_MspInit+0x16c>)
 8008e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e60:	4a38      	ldr	r2, [pc, #224]	; (8008f44 <HAL_ETH_MspInit+0x16c>)
 8008e62:	f043 0301 	orr.w	r3, r3, #1
 8008e66:	6313      	str	r3, [r2, #48]	; 0x30
 8008e68:	4b36      	ldr	r3, [pc, #216]	; (8008f44 <HAL_ETH_MspInit+0x16c>)
 8008e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e6c:	f003 0301 	and.w	r3, r3, #1
 8008e70:	613b      	str	r3, [r7, #16]
 8008e72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e74:	4b33      	ldr	r3, [pc, #204]	; (8008f44 <HAL_ETH_MspInit+0x16c>)
 8008e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e78:	4a32      	ldr	r2, [pc, #200]	; (8008f44 <HAL_ETH_MspInit+0x16c>)
 8008e7a:	f043 0302 	orr.w	r3, r3, #2
 8008e7e:	6313      	str	r3, [r2, #48]	; 0x30
 8008e80:	4b30      	ldr	r3, [pc, #192]	; (8008f44 <HAL_ETH_MspInit+0x16c>)
 8008e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e84:	f003 0302 	and.w	r3, r3, #2
 8008e88:	60fb      	str	r3, [r7, #12]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008e8c:	4b2d      	ldr	r3, [pc, #180]	; (8008f44 <HAL_ETH_MspInit+0x16c>)
 8008e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e90:	4a2c      	ldr	r2, [pc, #176]	; (8008f44 <HAL_ETH_MspInit+0x16c>)
 8008e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e96:	6313      	str	r3, [r2, #48]	; 0x30
 8008e98:	4b2a      	ldr	r3, [pc, #168]	; (8008f44 <HAL_ETH_MspInit+0x16c>)
 8008e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea0:	60bb      	str	r3, [r7, #8]
 8008ea2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8008ea4:	2332      	movs	r3, #50	; 0x32
 8008ea6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ea8:	2302      	movs	r3, #2
 8008eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008eac:	2300      	movs	r3, #0
 8008eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008eb4:	230b      	movs	r3, #11
 8008eb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	4822      	ldr	r0, [pc, #136]	; (8008f48 <HAL_ETH_MspInit+0x170>)
 8008ec0:	f7fc f83c 	bl	8004f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8008ec4:	2386      	movs	r3, #134	; 0x86
 8008ec6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ec8:	2302      	movs	r3, #2
 8008eca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ed0:	2303      	movs	r3, #3
 8008ed2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008ed4:	230b      	movs	r3, #11
 8008ed6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008edc:	4619      	mov	r1, r3
 8008ede:	481b      	ldr	r0, [pc, #108]	; (8008f4c <HAL_ETH_MspInit+0x174>)
 8008ee0:	f7fc f82c 	bl	8004f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8008ee4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ee8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008eea:	2302      	movs	r3, #2
 8008eec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ef2:	2303      	movs	r3, #3
 8008ef4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008ef6:	230b      	movs	r3, #11
 8008ef8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8008efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008efe:	4619      	mov	r1, r3
 8008f00:	4813      	ldr	r0, [pc, #76]	; (8008f50 <HAL_ETH_MspInit+0x178>)
 8008f02:	f7fc f81b 	bl	8004f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8008f06:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008f0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f10:	2300      	movs	r3, #0
 8008f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f14:	2303      	movs	r3, #3
 8008f16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008f18:	230b      	movs	r3, #11
 8008f1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f20:	4619      	mov	r1, r3
 8008f22:	480c      	ldr	r0, [pc, #48]	; (8008f54 <HAL_ETH_MspInit+0x17c>)
 8008f24:	f7fc f80a 	bl	8004f3c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8008f28:	2200      	movs	r2, #0
 8008f2a:	2105      	movs	r1, #5
 8008f2c:	203d      	movs	r0, #61	; 0x3d
 8008f2e:	f7fa fa11 	bl	8003354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008f32:	203d      	movs	r0, #61	; 0x3d
 8008f34:	f7fa fa2a 	bl	800338c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008f38:	bf00      	nop
 8008f3a:	3738      	adds	r7, #56	; 0x38
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	40028000 	.word	0x40028000
 8008f44:	40023800 	.word	0x40023800
 8008f48:	40020800 	.word	0x40020800
 8008f4c:	40020000 	.word	0x40020000
 8008f50:	40020400 	.word	0x40020400
 8008f54:	40021800 	.word	0x40021800

08008f58 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008f5c:	4802      	ldr	r0, [pc, #8]	; (8008f68 <ETH_PHY_IO_Init+0x10>)
 8008f5e:	f7fb fb87 	bl	8004670 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8008f62:	2300      	movs	r3, #0
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	20008e94 	.word	0x20008e94

08008f6c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	af00      	add	r7, sp, #0
  return 0;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	68ba      	ldr	r2, [r7, #8]
 8008f8c:	68f9      	ldr	r1, [r7, #12]
 8008f8e:	4807      	ldr	r0, [pc, #28]	; (8008fac <ETH_PHY_IO_ReadReg+0x30>)
 8008f90:	f7fb f9d6 	bl	8004340 <HAL_ETH_ReadPHYRegister>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d002      	beq.n	8008fa0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8008f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f9e:	e000      	b.n	8008fa2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	20008e94 	.word	0x20008e94

08008fb0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	68ba      	ldr	r2, [r7, #8]
 8008fc0:	68f9      	ldr	r1, [r7, #12]
 8008fc2:	4807      	ldr	r0, [pc, #28]	; (8008fe0 <ETH_PHY_IO_WriteReg+0x30>)
 8008fc4:	f7fb fa07 	bl	80043d6 <HAL_ETH_WritePHYRegister>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d002      	beq.n	8008fd4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8008fce:	f04f 33ff 	mov.w	r3, #4294967295
 8008fd2:	e000      	b.n	8008fd6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	20008e94 	.word	0x20008e94

08008fe4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008fe8:	f7f9 fa70 	bl	80024cc <HAL_GetTick>
 8008fec:	4603      	mov	r3, r0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	bd80      	pop	{r7, pc}
	...

08008ff4 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b0a0      	sub	sp, #128	; 0x80
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8008ffc:	f107 0308 	add.w	r3, r7, #8
 8009000:	2264      	movs	r2, #100	; 0x64
 8009002:	2100      	movs	r1, #0
 8009004:	4618      	mov	r0, r3
 8009006:	f012 fbf5 	bl	801b7f4 <memset>
  int32_t PHYLinkState = 0;
 800900a:	2300      	movs	r3, #0
 800900c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800900e:	2300      	movs	r3, #0
 8009010:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009012:	2300      	movs	r3, #0
 8009014:	67bb      	str	r3, [r7, #120]	; 0x78
 8009016:	2300      	movs	r3, #0
 8009018:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800901e:	483a      	ldr	r0, [pc, #232]	; (8009108 <ethernet_link_thread+0x114>)
 8009020:	f7f9 f9ab 	bl	800237a <LAN8742_GetLinkState>
 8009024:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8009026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009028:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800902c:	089b      	lsrs	r3, r3, #2
 800902e:	f003 0301 	and.w	r3, r3, #1
 8009032:	b2db      	uxtb	r3, r3
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00c      	beq.n	8009052 <ethernet_link_thread+0x5e>
 8009038:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800903a:	2b01      	cmp	r3, #1
 800903c:	dc09      	bgt.n	8009052 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800903e:	4833      	ldr	r0, [pc, #204]	; (800910c <ethernet_link_thread+0x118>)
 8009040:	f7fa fe38 	bl	8003cb4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8009044:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009046:	f008 fbd1 	bl	80117ec <netif_set_down>
    netif_set_link_down(netif);
 800904a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800904c:	f008 fc34 	bl	80118b8 <netif_set_link_down>
 8009050:	e055      	b.n	80090fe <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8009052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009054:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009058:	f003 0304 	and.w	r3, r3, #4
 800905c:	2b00      	cmp	r3, #0
 800905e:	d14e      	bne.n	80090fe <ethernet_link_thread+0x10a>
 8009060:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009062:	2b01      	cmp	r3, #1
 8009064:	dd4b      	ble.n	80090fe <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8009066:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009068:	3b02      	subs	r3, #2
 800906a:	2b03      	cmp	r3, #3
 800906c:	d82a      	bhi.n	80090c4 <ethernet_link_thread+0xd0>
 800906e:	a201      	add	r2, pc, #4	; (adr r2, 8009074 <ethernet_link_thread+0x80>)
 8009070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009074:	08009085 	.word	0x08009085
 8009078:	08009097 	.word	0x08009097
 800907c:	080090a7 	.word	0x080090a7
 8009080:	080090b7 	.word	0x080090b7
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8009084:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009088:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800908a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800908e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009090:	2301      	movs	r3, #1
 8009092:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009094:	e017      	b.n	80090c6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8009096:	2300      	movs	r3, #0
 8009098:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800909a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800909e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80090a0:	2301      	movs	r3, #1
 80090a2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80090a4:	e00f      	b.n	80090c6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80090a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090aa:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80090ac:	2300      	movs	r3, #0
 80090ae:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80090b0:	2301      	movs	r3, #1
 80090b2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80090b4:	e007      	b.n	80090c6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80090b6:	2300      	movs	r3, #0
 80090b8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80090ba:	2300      	movs	r3, #0
 80090bc:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80090be:	2301      	movs	r3, #1
 80090c0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80090c2:	e000      	b.n	80090c6 <ethernet_link_thread+0xd2>
    default:
      break;
 80090c4:	bf00      	nop
    }

    if(linkchanged)
 80090c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d018      	beq.n	80090fe <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80090cc:	f107 0308 	add.w	r3, r7, #8
 80090d0:	4619      	mov	r1, r3
 80090d2:	480e      	ldr	r0, [pc, #56]	; (800910c <ethernet_link_thread+0x118>)
 80090d4:	f7fb f9c8 	bl	8004468 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80090d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090da:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80090dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090de:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80090e0:	f107 0308 	add.w	r3, r7, #8
 80090e4:	4619      	mov	r1, r3
 80090e6:	4809      	ldr	r0, [pc, #36]	; (800910c <ethernet_link_thread+0x118>)
 80090e8:	f7fb faa8 	bl	800463c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80090ec:	4807      	ldr	r0, [pc, #28]	; (800910c <ethernet_link_thread+0x118>)
 80090ee:	f7fa fd53 	bl	8003b98 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80090f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80090f4:	f008 fb0e 	bl	8011714 <netif_set_up>
      netif_set_link_up(netif);
 80090f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80090fa:	f008 fba9 	bl	8011850 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80090fe:	2064      	movs	r0, #100	; 0x64
 8009100:	f000 f9c2 	bl	8009488 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009104:	e78b      	b.n	800901e <ethernet_link_thread+0x2a>
 8009106:	bf00      	nop
 8009108:	20008f7c 	.word	0x20008f7c
 800910c:	20008e94 	.word	0x20008e94

08009110 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b086      	sub	sp, #24
 8009114:	af02      	add	r7, sp, #8
 8009116:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009118:	4812      	ldr	r0, [pc, #72]	; (8009164 <HAL_ETH_RxAllocateCallback+0x54>)
 800911a:	f008 f86f 	bl	80111fc <memp_malloc_pool>
 800911e:	60f8      	str	r0, [r7, #12]
  if (p)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d014      	beq.n	8009150 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f103 0220 	add.w	r2, r3, #32
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	4a0d      	ldr	r2, [pc, #52]	; (8009168 <HAL_ETH_RxAllocateCallback+0x58>)
 8009134:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800913e:	9201      	str	r2, [sp, #4]
 8009140:	9300      	str	r3, [sp, #0]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2241      	movs	r2, #65	; 0x41
 8009146:	2100      	movs	r1, #0
 8009148:	2000      	movs	r0, #0
 800914a:	f008 fdd9 	bl	8011d00 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800914e:	e005      	b.n	800915c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8009150:	4b06      	ldr	r3, [pc, #24]	; (800916c <HAL_ETH_RxAllocateCallback+0x5c>)
 8009152:	2201      	movs	r2, #1
 8009154:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	601a      	str	r2, [r3, #0]
}
 800915c:	bf00      	nop
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	080204a8 	.word	0x080204a8
 8009168:	08008d89 	.word	0x08008d89
 800916c:	20008e88 	.word	0x20008e88

08009170 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b088      	sub	sp, #32
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	607a      	str	r2, [r7, #4]
 800917c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009186:	2300      	movs	r3, #0
 8009188:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	3b20      	subs	r3, #32
 800918e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	2200      	movs	r2, #0
 8009194:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	2200      	movs	r2, #0
 800919a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	887a      	ldrh	r2, [r7, #2]
 80091a0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d103      	bne.n	80091b2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	69fa      	ldr	r2, [r7, #28]
 80091ae:	601a      	str	r2, [r3, #0]
 80091b0:	e003      	b.n	80091ba <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	69fa      	ldr	r2, [r7, #28]
 80091b8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	69fa      	ldr	r2, [r7, #28]
 80091be:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	61fb      	str	r3, [r7, #28]
 80091c6:	e009      	b.n	80091dc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	891a      	ldrh	r2, [r3, #8]
 80091cc:	887b      	ldrh	r3, [r7, #2]
 80091ce:	4413      	add	r3, r2
 80091d0:	b29a      	uxth	r2, r3
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	61fb      	str	r3, [r7, #28]
 80091dc:	69fb      	ldr	r3, [r7, #28]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1f2      	bne.n	80091c8 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80091e2:	887b      	ldrh	r3, [r7, #2]
 80091e4:	4619      	mov	r1, r3
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f7ff fb2c 	bl	8008844 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 80091ec:	bf00      	nop
 80091ee:	3720      	adds	r7, #32
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f008 ff6b 	bl	80120d8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8009202:	bf00      	nop
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800920a:	b480      	push	{r7}
 800920c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800920e:	bf00      	nop
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800921e:	f3ef 8305 	mrs	r3, IPSR
 8009222:	60bb      	str	r3, [r7, #8]
  return(result);
 8009224:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10f      	bne.n	800924a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800922a:	f3ef 8310 	mrs	r3, PRIMASK
 800922e:	607b      	str	r3, [r7, #4]
  return(result);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d105      	bne.n	8009242 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009236:	f3ef 8311 	mrs	r3, BASEPRI
 800923a:	603b      	str	r3, [r7, #0]
  return(result);
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d007      	beq.n	8009252 <osKernelInitialize+0x3a>
 8009242:	4b0e      	ldr	r3, [pc, #56]	; (800927c <osKernelInitialize+0x64>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2b02      	cmp	r3, #2
 8009248:	d103      	bne.n	8009252 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800924a:	f06f 0305 	mvn.w	r3, #5
 800924e:	60fb      	str	r3, [r7, #12]
 8009250:	e00c      	b.n	800926c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009252:	4b0a      	ldr	r3, [pc, #40]	; (800927c <osKernelInitialize+0x64>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d105      	bne.n	8009266 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800925a:	4b08      	ldr	r3, [pc, #32]	; (800927c <osKernelInitialize+0x64>)
 800925c:	2201      	movs	r2, #1
 800925e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009260:	2300      	movs	r3, #0
 8009262:	60fb      	str	r3, [r7, #12]
 8009264:	e002      	b.n	800926c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009266:	f04f 33ff 	mov.w	r3, #4294967295
 800926a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800926c:	68fb      	ldr	r3, [r7, #12]
}
 800926e:	4618      	mov	r0, r3
 8009270:	3714      	adds	r7, #20
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	20008f9c 	.word	0x20008f9c

08009280 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009286:	f3ef 8305 	mrs	r3, IPSR
 800928a:	60bb      	str	r3, [r7, #8]
  return(result);
 800928c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800928e:	2b00      	cmp	r3, #0
 8009290:	d10f      	bne.n	80092b2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009292:	f3ef 8310 	mrs	r3, PRIMASK
 8009296:	607b      	str	r3, [r7, #4]
  return(result);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d105      	bne.n	80092aa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800929e:	f3ef 8311 	mrs	r3, BASEPRI
 80092a2:	603b      	str	r3, [r7, #0]
  return(result);
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d007      	beq.n	80092ba <osKernelStart+0x3a>
 80092aa:	4b0f      	ldr	r3, [pc, #60]	; (80092e8 <osKernelStart+0x68>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	d103      	bne.n	80092ba <osKernelStart+0x3a>
    stat = osErrorISR;
 80092b2:	f06f 0305 	mvn.w	r3, #5
 80092b6:	60fb      	str	r3, [r7, #12]
 80092b8:	e010      	b.n	80092dc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80092ba:	4b0b      	ldr	r3, [pc, #44]	; (80092e8 <osKernelStart+0x68>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d109      	bne.n	80092d6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80092c2:	f7ff ffa2 	bl	800920a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80092c6:	4b08      	ldr	r3, [pc, #32]	; (80092e8 <osKernelStart+0x68>)
 80092c8:	2202      	movs	r2, #2
 80092ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80092cc:	f002 f9ce 	bl	800b66c <vTaskStartScheduler>
      stat = osOK;
 80092d0:	2300      	movs	r3, #0
 80092d2:	60fb      	str	r3, [r7, #12]
 80092d4:	e002      	b.n	80092dc <osKernelStart+0x5c>
    } else {
      stat = osError;
 80092d6:	f04f 33ff 	mov.w	r3, #4294967295
 80092da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80092dc:	68fb      	ldr	r3, [r7, #12]
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	20008f9c 	.word	0x20008f9c

080092ec <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092f2:	f3ef 8305 	mrs	r3, IPSR
 80092f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80092f8:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d10f      	bne.n	800931e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092fe:	f3ef 8310 	mrs	r3, PRIMASK
 8009302:	607b      	str	r3, [r7, #4]
  return(result);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d105      	bne.n	8009316 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800930a:	f3ef 8311 	mrs	r3, BASEPRI
 800930e:	603b      	str	r3, [r7, #0]
  return(result);
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d007      	beq.n	8009326 <osKernelGetTickCount+0x3a>
 8009316:	4b08      	ldr	r3, [pc, #32]	; (8009338 <osKernelGetTickCount+0x4c>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2b02      	cmp	r3, #2
 800931c:	d103      	bne.n	8009326 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800931e:	f002 facd 	bl	800b8bc <xTaskGetTickCountFromISR>
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	e002      	b.n	800932c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8009326:	f002 fab9 	bl	800b89c <xTaskGetTickCount>
 800932a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800932c:	68fb      	ldr	r3, [r7, #12]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	20008f9c 	.word	0x20008f9c

0800933c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800933c:	b580      	push	{r7, lr}
 800933e:	b090      	sub	sp, #64	; 0x40
 8009340:	af04      	add	r7, sp, #16
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009348:	2300      	movs	r3, #0
 800934a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800934c:	f3ef 8305 	mrs	r3, IPSR
 8009350:	61fb      	str	r3, [r7, #28]
  return(result);
 8009352:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009354:	2b00      	cmp	r3, #0
 8009356:	f040 808f 	bne.w	8009478 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800935a:	f3ef 8310 	mrs	r3, PRIMASK
 800935e:	61bb      	str	r3, [r7, #24]
  return(result);
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d105      	bne.n	8009372 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009366:	f3ef 8311 	mrs	r3, BASEPRI
 800936a:	617b      	str	r3, [r7, #20]
  return(result);
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d003      	beq.n	800937a <osThreadNew+0x3e>
 8009372:	4b44      	ldr	r3, [pc, #272]	; (8009484 <osThreadNew+0x148>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2b02      	cmp	r3, #2
 8009378:	d07e      	beq.n	8009478 <osThreadNew+0x13c>
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d07b      	beq.n	8009478 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009380:	2380      	movs	r3, #128	; 0x80
 8009382:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009384:	2318      	movs	r3, #24
 8009386:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009388:	2300      	movs	r3, #0
 800938a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800938c:	f04f 33ff 	mov.w	r3, #4294967295
 8009390:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d045      	beq.n	8009424 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d002      	beq.n	80093a6 <osThreadNew+0x6a>
        name = attr->name;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	699b      	ldr	r3, [r3, #24]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d002      	beq.n	80093b4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	699b      	ldr	r3, [r3, #24]
 80093b2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80093b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d008      	beq.n	80093cc <osThreadNew+0x90>
 80093ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093bc:	2b38      	cmp	r3, #56	; 0x38
 80093be:	d805      	bhi.n	80093cc <osThreadNew+0x90>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	f003 0301 	and.w	r3, r3, #1
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d001      	beq.n	80093d0 <osThreadNew+0x94>
        return (NULL);
 80093cc:	2300      	movs	r3, #0
 80093ce:	e054      	b.n	800947a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	695b      	ldr	r3, [r3, #20]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d003      	beq.n	80093e0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	695b      	ldr	r3, [r3, #20]
 80093dc:	089b      	lsrs	r3, r3, #2
 80093de:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00e      	beq.n	8009406 <osThreadNew+0xca>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	2b5b      	cmp	r3, #91	; 0x5b
 80093ee:	d90a      	bls.n	8009406 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d006      	beq.n	8009406 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d002      	beq.n	8009406 <osThreadNew+0xca>
        mem = 1;
 8009400:	2301      	movs	r3, #1
 8009402:	623b      	str	r3, [r7, #32]
 8009404:	e010      	b.n	8009428 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d10c      	bne.n	8009428 <osThreadNew+0xec>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d108      	bne.n	8009428 <osThreadNew+0xec>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d104      	bne.n	8009428 <osThreadNew+0xec>
          mem = 0;
 800941e:	2300      	movs	r3, #0
 8009420:	623b      	str	r3, [r7, #32]
 8009422:	e001      	b.n	8009428 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8009424:	2300      	movs	r3, #0
 8009426:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009428:	6a3b      	ldr	r3, [r7, #32]
 800942a:	2b01      	cmp	r3, #1
 800942c:	d110      	bne.n	8009450 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009436:	9202      	str	r2, [sp, #8]
 8009438:	9301      	str	r3, [sp, #4]
 800943a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009442:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f001 ff31 	bl	800b2ac <xTaskCreateStatic>
 800944a:	4603      	mov	r3, r0
 800944c:	613b      	str	r3, [r7, #16]
 800944e:	e013      	b.n	8009478 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8009450:	6a3b      	ldr	r3, [r7, #32]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d110      	bne.n	8009478 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009458:	b29a      	uxth	r2, r3
 800945a:	f107 0310 	add.w	r3, r7, #16
 800945e:	9301      	str	r3, [sp, #4]
 8009460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009462:	9300      	str	r3, [sp, #0]
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f001 ff82 	bl	800b372 <xTaskCreate>
 800946e:	4603      	mov	r3, r0
 8009470:	2b01      	cmp	r3, #1
 8009472:	d001      	beq.n	8009478 <osThreadNew+0x13c>
          hTask = NULL;
 8009474:	2300      	movs	r3, #0
 8009476:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009478:	693b      	ldr	r3, [r7, #16]
}
 800947a:	4618      	mov	r0, r3
 800947c:	3730      	adds	r7, #48	; 0x30
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	20008f9c 	.word	0x20008f9c

08009488 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009490:	f3ef 8305 	mrs	r3, IPSR
 8009494:	613b      	str	r3, [r7, #16]
  return(result);
 8009496:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009498:	2b00      	cmp	r3, #0
 800949a:	d10f      	bne.n	80094bc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800949c:	f3ef 8310 	mrs	r3, PRIMASK
 80094a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d105      	bne.n	80094b4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80094a8:	f3ef 8311 	mrs	r3, BASEPRI
 80094ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d007      	beq.n	80094c4 <osDelay+0x3c>
 80094b4:	4b0a      	ldr	r3, [pc, #40]	; (80094e0 <osDelay+0x58>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b02      	cmp	r3, #2
 80094ba:	d103      	bne.n	80094c4 <osDelay+0x3c>
    stat = osErrorISR;
 80094bc:	f06f 0305 	mvn.w	r3, #5
 80094c0:	617b      	str	r3, [r7, #20]
 80094c2:	e007      	b.n	80094d4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d002      	beq.n	80094d4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f002 f896 	bl	800b600 <vTaskDelay>
    }
  }

  return (stat);
 80094d4:	697b      	ldr	r3, [r7, #20]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3718      	adds	r7, #24
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	20008f9c 	.word	0x20008f9c

080094e4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b08a      	sub	sp, #40	; 0x28
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80094ec:	2300      	movs	r3, #0
 80094ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094f0:	f3ef 8305 	mrs	r3, IPSR
 80094f4:	613b      	str	r3, [r7, #16]
  return(result);
 80094f6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f040 8085 	bne.w	8009608 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094fe:	f3ef 8310 	mrs	r3, PRIMASK
 8009502:	60fb      	str	r3, [r7, #12]
  return(result);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d105      	bne.n	8009516 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800950a:	f3ef 8311 	mrs	r3, BASEPRI
 800950e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d003      	beq.n	800951e <osMutexNew+0x3a>
 8009516:	4b3f      	ldr	r3, [pc, #252]	; (8009614 <osMutexNew+0x130>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2b02      	cmp	r3, #2
 800951c:	d074      	beq.n	8009608 <osMutexNew+0x124>
    if (attr != NULL) {
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d003      	beq.n	800952c <osMutexNew+0x48>
      type = attr->attr_bits;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	623b      	str	r3, [r7, #32]
 800952a:	e001      	b.n	8009530 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800952c:	2300      	movs	r3, #0
 800952e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009530:	6a3b      	ldr	r3, [r7, #32]
 8009532:	f003 0301 	and.w	r3, r3, #1
 8009536:	2b00      	cmp	r3, #0
 8009538:	d002      	beq.n	8009540 <osMutexNew+0x5c>
      rmtx = 1U;
 800953a:	2301      	movs	r3, #1
 800953c:	61fb      	str	r3, [r7, #28]
 800953e:	e001      	b.n	8009544 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8009540:	2300      	movs	r3, #0
 8009542:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009544:	6a3b      	ldr	r3, [r7, #32]
 8009546:	f003 0308 	and.w	r3, r3, #8
 800954a:	2b00      	cmp	r3, #0
 800954c:	d15c      	bne.n	8009608 <osMutexNew+0x124>
      mem = -1;
 800954e:	f04f 33ff 	mov.w	r3, #4294967295
 8009552:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d015      	beq.n	8009586 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d006      	beq.n	8009570 <osMutexNew+0x8c>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	2b4f      	cmp	r3, #79	; 0x4f
 8009568:	d902      	bls.n	8009570 <osMutexNew+0x8c>
          mem = 1;
 800956a:	2301      	movs	r3, #1
 800956c:	61bb      	str	r3, [r7, #24]
 800956e:	e00c      	b.n	800958a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d108      	bne.n	800958a <osMutexNew+0xa6>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d104      	bne.n	800958a <osMutexNew+0xa6>
            mem = 0;
 8009580:	2300      	movs	r3, #0
 8009582:	61bb      	str	r3, [r7, #24]
 8009584:	e001      	b.n	800958a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8009586:	2300      	movs	r3, #0
 8009588:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	2b01      	cmp	r3, #1
 800958e:	d112      	bne.n	80095b6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d007      	beq.n	80095a6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	4619      	mov	r1, r3
 800959c:	2004      	movs	r0, #4
 800959e:	f000 feb8 	bl	800a312 <xQueueCreateMutexStatic>
 80095a2:	6278      	str	r0, [r7, #36]	; 0x24
 80095a4:	e016      	b.n	80095d4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	4619      	mov	r1, r3
 80095ac:	2001      	movs	r0, #1
 80095ae:	f000 feb0 	bl	800a312 <xQueueCreateMutexStatic>
 80095b2:	6278      	str	r0, [r7, #36]	; 0x24
 80095b4:	e00e      	b.n	80095d4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d10b      	bne.n	80095d4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d004      	beq.n	80095cc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80095c2:	2004      	movs	r0, #4
 80095c4:	f000 fe8d 	bl	800a2e2 <xQueueCreateMutex>
 80095c8:	6278      	str	r0, [r7, #36]	; 0x24
 80095ca:	e003      	b.n	80095d4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80095cc:	2001      	movs	r0, #1
 80095ce:	f000 fe88 	bl	800a2e2 <xQueueCreateMutex>
 80095d2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80095d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d00c      	beq.n	80095f4 <osMutexNew+0x110>
        if (attr != NULL) {
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d003      	beq.n	80095e8 <osMutexNew+0x104>
          name = attr->name;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	617b      	str	r3, [r7, #20]
 80095e6:	e001      	b.n	80095ec <osMutexNew+0x108>
        } else {
          name = NULL;
 80095e8:	2300      	movs	r3, #0
 80095ea:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80095ec:	6979      	ldr	r1, [r7, #20]
 80095ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095f0:	f001 fdd4 	bl	800b19c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80095f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d006      	beq.n	8009608 <osMutexNew+0x124>
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d003      	beq.n	8009608 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009602:	f043 0301 	orr.w	r3, r3, #1
 8009606:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800960a:	4618      	mov	r0, r3
 800960c:	3728      	adds	r7, #40	; 0x28
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	20008f9c 	.word	0x20008f9c

08009618 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009618:	b580      	push	{r7, lr}
 800961a:	b088      	sub	sp, #32
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f023 0301 	bic.w	r3, r3, #1
 8009628:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f003 0301 	and.w	r3, r3, #1
 8009630:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8009632:	2300      	movs	r3, #0
 8009634:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009636:	f3ef 8305 	mrs	r3, IPSR
 800963a:	613b      	str	r3, [r7, #16]
  return(result);
 800963c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800963e:	2b00      	cmp	r3, #0
 8009640:	d10f      	bne.n	8009662 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009642:	f3ef 8310 	mrs	r3, PRIMASK
 8009646:	60fb      	str	r3, [r7, #12]
  return(result);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d105      	bne.n	800965a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800964e:	f3ef 8311 	mrs	r3, BASEPRI
 8009652:	60bb      	str	r3, [r7, #8]
  return(result);
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d007      	beq.n	800966a <osMutexAcquire+0x52>
 800965a:	4b1d      	ldr	r3, [pc, #116]	; (80096d0 <osMutexAcquire+0xb8>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2b02      	cmp	r3, #2
 8009660:	d103      	bne.n	800966a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8009662:	f06f 0305 	mvn.w	r3, #5
 8009666:	61fb      	str	r3, [r7, #28]
 8009668:	e02c      	b.n	80096c4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d103      	bne.n	8009678 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8009670:	f06f 0303 	mvn.w	r3, #3
 8009674:	61fb      	str	r3, [r7, #28]
 8009676:	e025      	b.n	80096c4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d011      	beq.n	80096a2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800967e:	6839      	ldr	r1, [r7, #0]
 8009680:	69b8      	ldr	r0, [r7, #24]
 8009682:	f000 fe97 	bl	800a3b4 <xQueueTakeMutexRecursive>
 8009686:	4603      	mov	r3, r0
 8009688:	2b01      	cmp	r3, #1
 800968a:	d01b      	beq.n	80096c4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d003      	beq.n	800969a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8009692:	f06f 0301 	mvn.w	r3, #1
 8009696:	61fb      	str	r3, [r7, #28]
 8009698:	e014      	b.n	80096c4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800969a:	f06f 0302 	mvn.w	r3, #2
 800969e:	61fb      	str	r3, [r7, #28]
 80096a0:	e010      	b.n	80096c4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80096a2:	6839      	ldr	r1, [r7, #0]
 80096a4:	69b8      	ldr	r0, [r7, #24]
 80096a6:	f001 fa51 	bl	800ab4c <xQueueSemaphoreTake>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d009      	beq.n	80096c4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d003      	beq.n	80096be <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80096b6:	f06f 0301 	mvn.w	r3, #1
 80096ba:	61fb      	str	r3, [r7, #28]
 80096bc:	e002      	b.n	80096c4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80096be:	f06f 0302 	mvn.w	r3, #2
 80096c2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80096c4:	69fb      	ldr	r3, [r7, #28]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3720      	adds	r7, #32
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	20008f9c 	.word	0x20008f9c

080096d4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b088      	sub	sp, #32
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f023 0301 	bic.w	r3, r3, #1
 80096e2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f003 0301 	and.w	r3, r3, #1
 80096ea:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80096ec:	2300      	movs	r3, #0
 80096ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096f0:	f3ef 8305 	mrs	r3, IPSR
 80096f4:	613b      	str	r3, [r7, #16]
  return(result);
 80096f6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d10f      	bne.n	800971c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096fc:	f3ef 8310 	mrs	r3, PRIMASK
 8009700:	60fb      	str	r3, [r7, #12]
  return(result);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d105      	bne.n	8009714 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009708:	f3ef 8311 	mrs	r3, BASEPRI
 800970c:	60bb      	str	r3, [r7, #8]
  return(result);
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d007      	beq.n	8009724 <osMutexRelease+0x50>
 8009714:	4b16      	ldr	r3, [pc, #88]	; (8009770 <osMutexRelease+0x9c>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2b02      	cmp	r3, #2
 800971a:	d103      	bne.n	8009724 <osMutexRelease+0x50>
    stat = osErrorISR;
 800971c:	f06f 0305 	mvn.w	r3, #5
 8009720:	61fb      	str	r3, [r7, #28]
 8009722:	e01f      	b.n	8009764 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d103      	bne.n	8009732 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800972a:	f06f 0303 	mvn.w	r3, #3
 800972e:	61fb      	str	r3, [r7, #28]
 8009730:	e018      	b.n	8009764 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d009      	beq.n	800974c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009738:	69b8      	ldr	r0, [r7, #24]
 800973a:	f000 fe05 	bl	800a348 <xQueueGiveMutexRecursive>
 800973e:	4603      	mov	r3, r0
 8009740:	2b01      	cmp	r3, #1
 8009742:	d00f      	beq.n	8009764 <osMutexRelease+0x90>
        stat = osErrorResource;
 8009744:	f06f 0302 	mvn.w	r3, #2
 8009748:	61fb      	str	r3, [r7, #28]
 800974a:	e00b      	b.n	8009764 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800974c:	2300      	movs	r3, #0
 800974e:	2200      	movs	r2, #0
 8009750:	2100      	movs	r1, #0
 8009752:	69b8      	ldr	r0, [r7, #24]
 8009754:	f000 fed8 	bl	800a508 <xQueueGenericSend>
 8009758:	4603      	mov	r3, r0
 800975a:	2b01      	cmp	r3, #1
 800975c:	d002      	beq.n	8009764 <osMutexRelease+0x90>
        stat = osErrorResource;
 800975e:	f06f 0302 	mvn.w	r3, #2
 8009762:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8009764:	69fb      	ldr	r3, [r7, #28]
}
 8009766:	4618      	mov	r0, r3
 8009768:	3720      	adds	r7, #32
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	20008f9c 	.word	0x20008f9c

08009774 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009774:	b580      	push	{r7, lr}
 8009776:	b08c      	sub	sp, #48	; 0x30
 8009778:	af02      	add	r7, sp, #8
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009780:	2300      	movs	r3, #0
 8009782:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009784:	f3ef 8305 	mrs	r3, IPSR
 8009788:	61bb      	str	r3, [r7, #24]
  return(result);
 800978a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800978c:	2b00      	cmp	r3, #0
 800978e:	f040 8086 	bne.w	800989e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009792:	f3ef 8310 	mrs	r3, PRIMASK
 8009796:	617b      	str	r3, [r7, #20]
  return(result);
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d105      	bne.n	80097aa <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800979e:	f3ef 8311 	mrs	r3, BASEPRI
 80097a2:	613b      	str	r3, [r7, #16]
  return(result);
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d003      	beq.n	80097b2 <osSemaphoreNew+0x3e>
 80097aa:	4b3f      	ldr	r3, [pc, #252]	; (80098a8 <osSemaphoreNew+0x134>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2b02      	cmp	r3, #2
 80097b0:	d075      	beq.n	800989e <osSemaphoreNew+0x12a>
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d072      	beq.n	800989e <osSemaphoreNew+0x12a>
 80097b8:	68ba      	ldr	r2, [r7, #8]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d86e      	bhi.n	800989e <osSemaphoreNew+0x12a>
    mem = -1;
 80097c0:	f04f 33ff 	mov.w	r3, #4294967295
 80097c4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d015      	beq.n	80097f8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d006      	beq.n	80097e2 <osSemaphoreNew+0x6e>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	2b4f      	cmp	r3, #79	; 0x4f
 80097da:	d902      	bls.n	80097e2 <osSemaphoreNew+0x6e>
        mem = 1;
 80097dc:	2301      	movs	r3, #1
 80097de:	623b      	str	r3, [r7, #32]
 80097e0:	e00c      	b.n	80097fc <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d108      	bne.n	80097fc <osSemaphoreNew+0x88>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d104      	bne.n	80097fc <osSemaphoreNew+0x88>
          mem = 0;
 80097f2:	2300      	movs	r3, #0
 80097f4:	623b      	str	r3, [r7, #32]
 80097f6:	e001      	b.n	80097fc <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80097f8:	2300      	movs	r3, #0
 80097fa:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80097fc:	6a3b      	ldr	r3, [r7, #32]
 80097fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009802:	d04c      	beq.n	800989e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2b01      	cmp	r3, #1
 8009808:	d128      	bne.n	800985c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800980a:	6a3b      	ldr	r3, [r7, #32]
 800980c:	2b01      	cmp	r3, #1
 800980e:	d10a      	bne.n	8009826 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	2203      	movs	r2, #3
 8009816:	9200      	str	r2, [sp, #0]
 8009818:	2200      	movs	r2, #0
 800981a:	2100      	movs	r1, #0
 800981c:	2001      	movs	r0, #1
 800981e:	f000 fc5f 	bl	800a0e0 <xQueueGenericCreateStatic>
 8009822:	6278      	str	r0, [r7, #36]	; 0x24
 8009824:	e005      	b.n	8009832 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8009826:	2203      	movs	r2, #3
 8009828:	2100      	movs	r1, #0
 800982a:	2001      	movs	r0, #1
 800982c:	f000 fcda 	bl	800a1e4 <xQueueGenericCreate>
 8009830:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009834:	2b00      	cmp	r3, #0
 8009836:	d022      	beq.n	800987e <osSemaphoreNew+0x10a>
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d01f      	beq.n	800987e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800983e:	2300      	movs	r3, #0
 8009840:	2200      	movs	r2, #0
 8009842:	2100      	movs	r1, #0
 8009844:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009846:	f000 fe5f 	bl	800a508 <xQueueGenericSend>
 800984a:	4603      	mov	r3, r0
 800984c:	2b01      	cmp	r3, #1
 800984e:	d016      	beq.n	800987e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8009850:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009852:	f001 fb55 	bl	800af00 <vQueueDelete>
            hSemaphore = NULL;
 8009856:	2300      	movs	r3, #0
 8009858:	627b      	str	r3, [r7, #36]	; 0x24
 800985a:	e010      	b.n	800987e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800985c:	6a3b      	ldr	r3, [r7, #32]
 800985e:	2b01      	cmp	r3, #1
 8009860:	d108      	bne.n	8009874 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	461a      	mov	r2, r3
 8009868:	68b9      	ldr	r1, [r7, #8]
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f000 fdda 	bl	800a424 <xQueueCreateCountingSemaphoreStatic>
 8009870:	6278      	str	r0, [r7, #36]	; 0x24
 8009872:	e004      	b.n	800987e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009874:	68b9      	ldr	r1, [r7, #8]
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f000 fe0f 	bl	800a49a <xQueueCreateCountingSemaphore>
 800987c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800987e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009880:	2b00      	cmp	r3, #0
 8009882:	d00c      	beq.n	800989e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d003      	beq.n	8009892 <osSemaphoreNew+0x11e>
          name = attr->name;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	61fb      	str	r3, [r7, #28]
 8009890:	e001      	b.n	8009896 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8009892:	2300      	movs	r3, #0
 8009894:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009896:	69f9      	ldr	r1, [r7, #28]
 8009898:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800989a:	f001 fc7f 	bl	800b19c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800989e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3728      	adds	r7, #40	; 0x28
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	20008f9c 	.word	0x20008f9c

080098ac <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b088      	sub	sp, #32
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80098ba:	2300      	movs	r3, #0
 80098bc:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d103      	bne.n	80098cc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80098c4:	f06f 0303 	mvn.w	r3, #3
 80098c8:	61fb      	str	r3, [r7, #28]
 80098ca:	e04b      	b.n	8009964 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098cc:	f3ef 8305 	mrs	r3, IPSR
 80098d0:	617b      	str	r3, [r7, #20]
  return(result);
 80098d2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d10f      	bne.n	80098f8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098d8:	f3ef 8310 	mrs	r3, PRIMASK
 80098dc:	613b      	str	r3, [r7, #16]
  return(result);
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d105      	bne.n	80098f0 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80098e4:	f3ef 8311 	mrs	r3, BASEPRI
 80098e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d026      	beq.n	800993e <osSemaphoreAcquire+0x92>
 80098f0:	4b1f      	ldr	r3, [pc, #124]	; (8009970 <osSemaphoreAcquire+0xc4>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d122      	bne.n	800993e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d003      	beq.n	8009906 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80098fe:	f06f 0303 	mvn.w	r3, #3
 8009902:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8009904:	e02d      	b.n	8009962 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8009906:	2300      	movs	r3, #0
 8009908:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800990a:	f107 0308 	add.w	r3, r7, #8
 800990e:	461a      	mov	r2, r3
 8009910:	2100      	movs	r1, #0
 8009912:	69b8      	ldr	r0, [r7, #24]
 8009914:	f001 fa2e 	bl	800ad74 <xQueueReceiveFromISR>
 8009918:	4603      	mov	r3, r0
 800991a:	2b01      	cmp	r3, #1
 800991c:	d003      	beq.n	8009926 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800991e:	f06f 0302 	mvn.w	r3, #2
 8009922:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8009924:	e01d      	b.n	8009962 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d01a      	beq.n	8009962 <osSemaphoreAcquire+0xb6>
 800992c:	4b11      	ldr	r3, [pc, #68]	; (8009974 <osSemaphoreAcquire+0xc8>)
 800992e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009932:	601a      	str	r2, [r3, #0]
 8009934:	f3bf 8f4f 	dsb	sy
 8009938:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800993c:	e011      	b.n	8009962 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800993e:	6839      	ldr	r1, [r7, #0]
 8009940:	69b8      	ldr	r0, [r7, #24]
 8009942:	f001 f903 	bl	800ab4c <xQueueSemaphoreTake>
 8009946:	4603      	mov	r3, r0
 8009948:	2b01      	cmp	r3, #1
 800994a:	d00b      	beq.n	8009964 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d003      	beq.n	800995a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8009952:	f06f 0301 	mvn.w	r3, #1
 8009956:	61fb      	str	r3, [r7, #28]
 8009958:	e004      	b.n	8009964 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800995a:	f06f 0302 	mvn.w	r3, #2
 800995e:	61fb      	str	r3, [r7, #28]
 8009960:	e000      	b.n	8009964 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8009962:	bf00      	nop
      }
    }
  }

  return (stat);
 8009964:	69fb      	ldr	r3, [r7, #28]
}
 8009966:	4618      	mov	r0, r3
 8009968:	3720      	adds	r7, #32
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	20008f9c 	.word	0x20008f9c
 8009974:	e000ed04 	.word	0xe000ed04

08009978 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009978:	b580      	push	{r7, lr}
 800997a:	b088      	sub	sp, #32
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009984:	2300      	movs	r3, #0
 8009986:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8009988:	69bb      	ldr	r3, [r7, #24]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d103      	bne.n	8009996 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800998e:	f06f 0303 	mvn.w	r3, #3
 8009992:	61fb      	str	r3, [r7, #28]
 8009994:	e03e      	b.n	8009a14 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009996:	f3ef 8305 	mrs	r3, IPSR
 800999a:	617b      	str	r3, [r7, #20]
  return(result);
 800999c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d10f      	bne.n	80099c2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099a2:	f3ef 8310 	mrs	r3, PRIMASK
 80099a6:	613b      	str	r3, [r7, #16]
  return(result);
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d105      	bne.n	80099ba <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80099ae:	f3ef 8311 	mrs	r3, BASEPRI
 80099b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d01e      	beq.n	80099f8 <osSemaphoreRelease+0x80>
 80099ba:	4b19      	ldr	r3, [pc, #100]	; (8009a20 <osSemaphoreRelease+0xa8>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d11a      	bne.n	80099f8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80099c2:	2300      	movs	r3, #0
 80099c4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80099c6:	f107 0308 	add.w	r3, r7, #8
 80099ca:	4619      	mov	r1, r3
 80099cc:	69b8      	ldr	r0, [r7, #24]
 80099ce:	f000 ff41 	bl	800a854 <xQueueGiveFromISR>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d003      	beq.n	80099e0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80099d8:	f06f 0302 	mvn.w	r3, #2
 80099dc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80099de:	e018      	b.n	8009a12 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d015      	beq.n	8009a12 <osSemaphoreRelease+0x9a>
 80099e6:	4b0f      	ldr	r3, [pc, #60]	; (8009a24 <osSemaphoreRelease+0xac>)
 80099e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099ec:	601a      	str	r2, [r3, #0]
 80099ee:	f3bf 8f4f 	dsb	sy
 80099f2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80099f6:	e00c      	b.n	8009a12 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80099f8:	2300      	movs	r3, #0
 80099fa:	2200      	movs	r2, #0
 80099fc:	2100      	movs	r1, #0
 80099fe:	69b8      	ldr	r0, [r7, #24]
 8009a00:	f000 fd82 	bl	800a508 <xQueueGenericSend>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d004      	beq.n	8009a14 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8009a0a:	f06f 0302 	mvn.w	r3, #2
 8009a0e:	61fb      	str	r3, [r7, #28]
 8009a10:	e000      	b.n	8009a14 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009a12:	bf00      	nop
    }
  }

  return (stat);
 8009a14:	69fb      	ldr	r3, [r7, #28]
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3720      	adds	r7, #32
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	20008f9c 	.word	0x20008f9c
 8009a24:	e000ed04 	.word	0xe000ed04

08009a28 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b088      	sub	sp, #32
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a34:	f3ef 8305 	mrs	r3, IPSR
 8009a38:	617b      	str	r3, [r7, #20]
  return(result);
 8009a3a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d10f      	bne.n	8009a60 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a40:	f3ef 8310 	mrs	r3, PRIMASK
 8009a44:	613b      	str	r3, [r7, #16]
  return(result);
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d105      	bne.n	8009a58 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009a4c:	f3ef 8311 	mrs	r3, BASEPRI
 8009a50:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d007      	beq.n	8009a68 <osSemaphoreDelete+0x40>
 8009a58:	4b0d      	ldr	r3, [pc, #52]	; (8009a90 <osSemaphoreDelete+0x68>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d103      	bne.n	8009a68 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8009a60:	f06f 0305 	mvn.w	r3, #5
 8009a64:	61fb      	str	r3, [r7, #28]
 8009a66:	e00e      	b.n	8009a86 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d103      	bne.n	8009a76 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8009a6e:	f06f 0303 	mvn.w	r3, #3
 8009a72:	61fb      	str	r3, [r7, #28]
 8009a74:	e007      	b.n	8009a86 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8009a76:	69b8      	ldr	r0, [r7, #24]
 8009a78:	f001 fbba 	bl	800b1f0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8009a80:	69b8      	ldr	r0, [r7, #24]
 8009a82:	f001 fa3d 	bl	800af00 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8009a86:	69fb      	ldr	r3, [r7, #28]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3720      	adds	r7, #32
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	20008f9c 	.word	0x20008f9c

08009a94 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b08c      	sub	sp, #48	; 0x30
 8009a98:	af02      	add	r7, sp, #8
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009aa4:	f3ef 8305 	mrs	r3, IPSR
 8009aa8:	61bb      	str	r3, [r7, #24]
  return(result);
 8009aaa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d16f      	bne.n	8009b90 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8009ab4:	617b      	str	r3, [r7, #20]
  return(result);
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d105      	bne.n	8009ac8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009abc:	f3ef 8311 	mrs	r3, BASEPRI
 8009ac0:	613b      	str	r3, [r7, #16]
  return(result);
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d003      	beq.n	8009ad0 <osMessageQueueNew+0x3c>
 8009ac8:	4b34      	ldr	r3, [pc, #208]	; (8009b9c <osMessageQueueNew+0x108>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2b02      	cmp	r3, #2
 8009ace:	d05f      	beq.n	8009b90 <osMessageQueueNew+0xfc>
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d05c      	beq.n	8009b90 <osMessageQueueNew+0xfc>
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d059      	beq.n	8009b90 <osMessageQueueNew+0xfc>
    mem = -1;
 8009adc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ae0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d029      	beq.n	8009b3c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d012      	beq.n	8009b16 <osMessageQueueNew+0x82>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	2b4f      	cmp	r3, #79	; 0x4f
 8009af6:	d90e      	bls.n	8009b16 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d00a      	beq.n	8009b16 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	695a      	ldr	r2, [r3, #20]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	68b9      	ldr	r1, [r7, #8]
 8009b08:	fb01 f303 	mul.w	r3, r1, r3
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d302      	bcc.n	8009b16 <osMessageQueueNew+0x82>
        mem = 1;
 8009b10:	2301      	movs	r3, #1
 8009b12:	623b      	str	r3, [r7, #32]
 8009b14:	e014      	b.n	8009b40 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	689b      	ldr	r3, [r3, #8]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d110      	bne.n	8009b40 <osMessageQueueNew+0xac>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d10c      	bne.n	8009b40 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d108      	bne.n	8009b40 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	695b      	ldr	r3, [r3, #20]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d104      	bne.n	8009b40 <osMessageQueueNew+0xac>
          mem = 0;
 8009b36:	2300      	movs	r3, #0
 8009b38:	623b      	str	r3, [r7, #32]
 8009b3a:	e001      	b.n	8009b40 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009b40:	6a3b      	ldr	r3, [r7, #32]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d10b      	bne.n	8009b5e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	691a      	ldr	r2, [r3, #16]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	689b      	ldr	r3, [r3, #8]
 8009b4e:	2100      	movs	r1, #0
 8009b50:	9100      	str	r1, [sp, #0]
 8009b52:	68b9      	ldr	r1, [r7, #8]
 8009b54:	68f8      	ldr	r0, [r7, #12]
 8009b56:	f000 fac3 	bl	800a0e0 <xQueueGenericCreateStatic>
 8009b5a:	6278      	str	r0, [r7, #36]	; 0x24
 8009b5c:	e008      	b.n	8009b70 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8009b5e:	6a3b      	ldr	r3, [r7, #32]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d105      	bne.n	8009b70 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8009b64:	2200      	movs	r2, #0
 8009b66:	68b9      	ldr	r1, [r7, #8]
 8009b68:	68f8      	ldr	r0, [r7, #12]
 8009b6a:	f000 fb3b 	bl	800a1e4 <xQueueGenericCreate>
 8009b6e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00c      	beq.n	8009b90 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d003      	beq.n	8009b84 <osMessageQueueNew+0xf0>
        name = attr->name;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	61fb      	str	r3, [r7, #28]
 8009b82:	e001      	b.n	8009b88 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8009b84:	2300      	movs	r3, #0
 8009b86:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8009b88:	69f9      	ldr	r1, [r7, #28]
 8009b8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b8c:	f001 fb06 	bl	800b19c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3728      	adds	r7, #40	; 0x28
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	20008f9c 	.word	0x20008f9c

08009ba0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b08a      	sub	sp, #40	; 0x28
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	603b      	str	r3, [r7, #0]
 8009bac:	4613      	mov	r3, r2
 8009bae:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bb8:	f3ef 8305 	mrs	r3, IPSR
 8009bbc:	61fb      	str	r3, [r7, #28]
  return(result);
 8009bbe:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d10f      	bne.n	8009be4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bc4:	f3ef 8310 	mrs	r3, PRIMASK
 8009bc8:	61bb      	str	r3, [r7, #24]
  return(result);
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d105      	bne.n	8009bdc <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009bd0:	f3ef 8311 	mrs	r3, BASEPRI
 8009bd4:	617b      	str	r3, [r7, #20]
  return(result);
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d02c      	beq.n	8009c36 <osMessageQueuePut+0x96>
 8009bdc:	4b28      	ldr	r3, [pc, #160]	; (8009c80 <osMessageQueuePut+0xe0>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2b02      	cmp	r3, #2
 8009be2:	d128      	bne.n	8009c36 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009be4:	6a3b      	ldr	r3, [r7, #32]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d005      	beq.n	8009bf6 <osMessageQueuePut+0x56>
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d002      	beq.n	8009bf6 <osMessageQueuePut+0x56>
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d003      	beq.n	8009bfe <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8009bf6:	f06f 0303 	mvn.w	r3, #3
 8009bfa:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009bfc:	e039      	b.n	8009c72 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009c02:	f107 0210 	add.w	r2, r7, #16
 8009c06:	2300      	movs	r3, #0
 8009c08:	68b9      	ldr	r1, [r7, #8]
 8009c0a:	6a38      	ldr	r0, [r7, #32]
 8009c0c:	f000 fd82 	bl	800a714 <xQueueGenericSendFromISR>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d003      	beq.n	8009c1e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8009c16:	f06f 0302 	mvn.w	r3, #2
 8009c1a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c1c:	e029      	b.n	8009c72 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d026      	beq.n	8009c72 <osMessageQueuePut+0xd2>
 8009c24:	4b17      	ldr	r3, [pc, #92]	; (8009c84 <osMessageQueuePut+0xe4>)
 8009c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c2a:	601a      	str	r2, [r3, #0]
 8009c2c:	f3bf 8f4f 	dsb	sy
 8009c30:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c34:	e01d      	b.n	8009c72 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009c36:	6a3b      	ldr	r3, [r7, #32]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d002      	beq.n	8009c42 <osMessageQueuePut+0xa2>
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d103      	bne.n	8009c4a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8009c42:	f06f 0303 	mvn.w	r3, #3
 8009c46:	627b      	str	r3, [r7, #36]	; 0x24
 8009c48:	e014      	b.n	8009c74 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	683a      	ldr	r2, [r7, #0]
 8009c4e:	68b9      	ldr	r1, [r7, #8]
 8009c50:	6a38      	ldr	r0, [r7, #32]
 8009c52:	f000 fc59 	bl	800a508 <xQueueGenericSend>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d00b      	beq.n	8009c74 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d003      	beq.n	8009c6a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8009c62:	f06f 0301 	mvn.w	r3, #1
 8009c66:	627b      	str	r3, [r7, #36]	; 0x24
 8009c68:	e004      	b.n	8009c74 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8009c6a:	f06f 0302 	mvn.w	r3, #2
 8009c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8009c70:	e000      	b.n	8009c74 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c72:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3728      	adds	r7, #40	; 0x28
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	20008f9c 	.word	0x20008f9c
 8009c84:	e000ed04 	.word	0xe000ed04

08009c88 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b08a      	sub	sp, #40	; 0x28
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	607a      	str	r2, [r7, #4]
 8009c94:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c9e:	f3ef 8305 	mrs	r3, IPSR
 8009ca2:	61fb      	str	r3, [r7, #28]
  return(result);
 8009ca4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d10f      	bne.n	8009cca <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009caa:	f3ef 8310 	mrs	r3, PRIMASK
 8009cae:	61bb      	str	r3, [r7, #24]
  return(result);
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d105      	bne.n	8009cc2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009cb6:	f3ef 8311 	mrs	r3, BASEPRI
 8009cba:	617b      	str	r3, [r7, #20]
  return(result);
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d02c      	beq.n	8009d1c <osMessageQueueGet+0x94>
 8009cc2:	4b28      	ldr	r3, [pc, #160]	; (8009d64 <osMessageQueueGet+0xdc>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d128      	bne.n	8009d1c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009cca:	6a3b      	ldr	r3, [r7, #32]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d005      	beq.n	8009cdc <osMessageQueueGet+0x54>
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d002      	beq.n	8009cdc <osMessageQueueGet+0x54>
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d003      	beq.n	8009ce4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8009cdc:	f06f 0303 	mvn.w	r3, #3
 8009ce0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009ce2:	e038      	b.n	8009d56 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009ce8:	f107 0310 	add.w	r3, r7, #16
 8009cec:	461a      	mov	r2, r3
 8009cee:	68b9      	ldr	r1, [r7, #8]
 8009cf0:	6a38      	ldr	r0, [r7, #32]
 8009cf2:	f001 f83f 	bl	800ad74 <xQueueReceiveFromISR>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d003      	beq.n	8009d04 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8009cfc:	f06f 0302 	mvn.w	r3, #2
 8009d00:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009d02:	e028      	b.n	8009d56 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d025      	beq.n	8009d56 <osMessageQueueGet+0xce>
 8009d0a:	4b17      	ldr	r3, [pc, #92]	; (8009d68 <osMessageQueueGet+0xe0>)
 8009d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d10:	601a      	str	r2, [r3, #0]
 8009d12:	f3bf 8f4f 	dsb	sy
 8009d16:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009d1a:	e01c      	b.n	8009d56 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009d1c:	6a3b      	ldr	r3, [r7, #32]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d002      	beq.n	8009d28 <osMessageQueueGet+0xa0>
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d103      	bne.n	8009d30 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8009d28:	f06f 0303 	mvn.w	r3, #3
 8009d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8009d2e:	e013      	b.n	8009d58 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009d30:	683a      	ldr	r2, [r7, #0]
 8009d32:	68b9      	ldr	r1, [r7, #8]
 8009d34:	6a38      	ldr	r0, [r7, #32]
 8009d36:	f000 fe23 	bl	800a980 <xQueueReceive>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d00b      	beq.n	8009d58 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d003      	beq.n	8009d4e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8009d46:	f06f 0301 	mvn.w	r3, #1
 8009d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8009d4c:	e004      	b.n	8009d58 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8009d4e:	f06f 0302 	mvn.w	r3, #2
 8009d52:	627b      	str	r3, [r7, #36]	; 0x24
 8009d54:	e000      	b.n	8009d58 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009d56:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3728      	adds	r7, #40	; 0x28
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	20008f9c 	.word	0x20008f9c
 8009d68:	e000ed04 	.word	0xe000ed04

08009d6c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b088      	sub	sp, #32
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d102      	bne.n	8009d84 <osMessageQueueGetCount+0x18>
    count = 0U;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	61fb      	str	r3, [r7, #28]
 8009d82:	e01e      	b.n	8009dc2 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d84:	f3ef 8305 	mrs	r3, IPSR
 8009d88:	617b      	str	r3, [r7, #20]
  return(result);
 8009d8a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d10f      	bne.n	8009db0 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d90:	f3ef 8310 	mrs	r3, PRIMASK
 8009d94:	613b      	str	r3, [r7, #16]
  return(result);
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d105      	bne.n	8009da8 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d9c:	f3ef 8311 	mrs	r3, BASEPRI
 8009da0:	60fb      	str	r3, [r7, #12]
  return(result);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d008      	beq.n	8009dba <osMessageQueueGetCount+0x4e>
 8009da8:	4b08      	ldr	r3, [pc, #32]	; (8009dcc <osMessageQueueGetCount+0x60>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2b02      	cmp	r3, #2
 8009dae:	d104      	bne.n	8009dba <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8009db0:	69b8      	ldr	r0, [r7, #24]
 8009db2:	f001 f885 	bl	800aec0 <uxQueueMessagesWaitingFromISR>
 8009db6:	61f8      	str	r0, [r7, #28]
 8009db8:	e003      	b.n	8009dc2 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8009dba:	69b8      	ldr	r0, [r7, #24]
 8009dbc:	f001 f860 	bl	800ae80 <uxQueueMessagesWaiting>
 8009dc0:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8009dc2:	69fb      	ldr	r3, [r7, #28]
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3720      	adds	r7, #32
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	20008f9c 	.word	0x20008f9c

08009dd0 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b088      	sub	sp, #32
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ddc:	f3ef 8305 	mrs	r3, IPSR
 8009de0:	617b      	str	r3, [r7, #20]
  return(result);
 8009de2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d10f      	bne.n	8009e08 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009de8:	f3ef 8310 	mrs	r3, PRIMASK
 8009dec:	613b      	str	r3, [r7, #16]
  return(result);
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d105      	bne.n	8009e00 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009df4:	f3ef 8311 	mrs	r3, BASEPRI
 8009df8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d007      	beq.n	8009e10 <osMessageQueueDelete+0x40>
 8009e00:	4b0d      	ldr	r3, [pc, #52]	; (8009e38 <osMessageQueueDelete+0x68>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	2b02      	cmp	r3, #2
 8009e06:	d103      	bne.n	8009e10 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 8009e08:	f06f 0305 	mvn.w	r3, #5
 8009e0c:	61fb      	str	r3, [r7, #28]
 8009e0e:	e00e      	b.n	8009e2e <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d103      	bne.n	8009e1e <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 8009e16:	f06f 0303 	mvn.w	r3, #3
 8009e1a:	61fb      	str	r3, [r7, #28]
 8009e1c:	e007      	b.n	8009e2e <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8009e1e:	69b8      	ldr	r0, [r7, #24]
 8009e20:	f001 f9e6 	bl	800b1f0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8009e24:	2300      	movs	r3, #0
 8009e26:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8009e28:	69b8      	ldr	r0, [r7, #24]
 8009e2a:	f001 f869 	bl	800af00 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8009e2e:	69fb      	ldr	r3, [r7, #28]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3720      	adds	r7, #32
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	20008f9c 	.word	0x20008f9c

08009e3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009e3c:	b480      	push	{r7}
 8009e3e:	b085      	sub	sp, #20
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	4a07      	ldr	r2, [pc, #28]	; (8009e68 <vApplicationGetIdleTaskMemory+0x2c>)
 8009e4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	4a06      	ldr	r2, [pc, #24]	; (8009e6c <vApplicationGetIdleTaskMemory+0x30>)
 8009e52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2280      	movs	r2, #128	; 0x80
 8009e58:	601a      	str	r2, [r3, #0]
}
 8009e5a:	bf00      	nop
 8009e5c:	3714      	adds	r7, #20
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr
 8009e66:	bf00      	nop
 8009e68:	20008fa0 	.word	0x20008fa0
 8009e6c:	20008ffc 	.word	0x20008ffc

08009e70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009e70:	b480      	push	{r7}
 8009e72:	b085      	sub	sp, #20
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	4a07      	ldr	r2, [pc, #28]	; (8009e9c <vApplicationGetTimerTaskMemory+0x2c>)
 8009e80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	4a06      	ldr	r2, [pc, #24]	; (8009ea0 <vApplicationGetTimerTaskMemory+0x30>)
 8009e86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e8e:	601a      	str	r2, [r3, #0]
}
 8009e90:	bf00      	nop
 8009e92:	3714      	adds	r7, #20
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr
 8009e9c:	200091fc 	.word	0x200091fc
 8009ea0:	20009258 	.word	0x20009258

08009ea4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f103 0208 	add.w	r2, r3, #8
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8009ebc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f103 0208 	add.w	r2, r3, #8
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f103 0208 	add.w	r2, r3, #8
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009ef2:	bf00      	nop
 8009ef4:	370c      	adds	r7, #12
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr

08009efe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009efe:	b480      	push	{r7}
 8009f00:	b085      	sub	sp, #20
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
 8009f06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	689a      	ldr	r2, [r3, #8]
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	683a      	ldr	r2, [r7, #0]
 8009f22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	683a      	ldr	r2, [r7, #0]
 8009f28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	1c5a      	adds	r2, r3, #1
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	601a      	str	r2, [r3, #0]
}
 8009f3a:	bf00      	nop
 8009f3c:	3714      	adds	r7, #20
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr

08009f46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f46:	b480      	push	{r7}
 8009f48:	b085      	sub	sp, #20
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
 8009f4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f5c:	d103      	bne.n	8009f66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	60fb      	str	r3, [r7, #12]
 8009f64:	e00c      	b.n	8009f80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	3308      	adds	r3, #8
 8009f6a:	60fb      	str	r3, [r7, #12]
 8009f6c:	e002      	b.n	8009f74 <vListInsert+0x2e>
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	60fb      	str	r3, [r7, #12]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	68ba      	ldr	r2, [r7, #8]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d2f6      	bcs.n	8009f6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	685a      	ldr	r2, [r3, #4]
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	683a      	ldr	r2, [r7, #0]
 8009f8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	68fa      	ldr	r2, [r7, #12]
 8009f94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	683a      	ldr	r2, [r7, #0]
 8009f9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	1c5a      	adds	r2, r3, #1
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	601a      	str	r2, [r3, #0]
}
 8009fac:	bf00      	nop
 8009fae:	3714      	adds	r7, #20
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b085      	sub	sp, #20
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	691b      	ldr	r3, [r3, #16]
 8009fc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	6892      	ldr	r2, [r2, #8]
 8009fce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	6852      	ldr	r2, [r2, #4]
 8009fd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d103      	bne.n	8009fec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	689a      	ldr	r2, [r3, #8]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	1e5a      	subs	r2, r3, #1
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
}
 800a000:	4618      	mov	r0, r3
 800a002:	3714      	adds	r7, #20
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10c      	bne.n	800a03a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a024:	b672      	cpsid	i
 800a026:	f383 8811 	msr	BASEPRI, r3
 800a02a:	f3bf 8f6f 	isb	sy
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	b662      	cpsie	i
 800a034:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a036:	bf00      	nop
 800a038:	e7fe      	b.n	800a038 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a03a:	f002 fde7 	bl	800cc0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a046:	68f9      	ldr	r1, [r7, #12]
 800a048:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a04a:	fb01 f303 	mul.w	r3, r1, r3
 800a04e:	441a      	add	r2, r3
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2200      	movs	r2, #0
 800a058:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a06a:	3b01      	subs	r3, #1
 800a06c:	68f9      	ldr	r1, [r7, #12]
 800a06e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a070:	fb01 f303 	mul.w	r3, r1, r3
 800a074:	441a      	add	r2, r3
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	22ff      	movs	r2, #255	; 0xff
 800a07e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	22ff      	movs	r2, #255	; 0xff
 800a086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d114      	bne.n	800a0ba <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	691b      	ldr	r3, [r3, #16]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d01a      	beq.n	800a0ce <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	3310      	adds	r3, #16
 800a09c:	4618      	mov	r0, r3
 800a09e:	f001 fd8f 	bl	800bbc0 <xTaskRemoveFromEventList>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d012      	beq.n	800a0ce <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a0a8:	4b0c      	ldr	r3, [pc, #48]	; (800a0dc <xQueueGenericReset+0xd0>)
 800a0aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ae:	601a      	str	r2, [r3, #0]
 800a0b0:	f3bf 8f4f 	dsb	sy
 800a0b4:	f3bf 8f6f 	isb	sy
 800a0b8:	e009      	b.n	800a0ce <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	3310      	adds	r3, #16
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7ff fef0 	bl	8009ea4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	3324      	adds	r3, #36	; 0x24
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f7ff feeb 	bl	8009ea4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a0ce:	f002 fdd1 	bl	800cc74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a0d2:	2301      	movs	r3, #1
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3710      	adds	r7, #16
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	e000ed04 	.word	0xe000ed04

0800a0e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b08e      	sub	sp, #56	; 0x38
 800a0e4:	af02      	add	r7, sp, #8
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	607a      	str	r2, [r7, #4]
 800a0ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d10c      	bne.n	800a10e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800a0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f8:	b672      	cpsid	i
 800a0fa:	f383 8811 	msr	BASEPRI, r3
 800a0fe:	f3bf 8f6f 	isb	sy
 800a102:	f3bf 8f4f 	dsb	sy
 800a106:	b662      	cpsie	i
 800a108:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a10a:	bf00      	nop
 800a10c:	e7fe      	b.n	800a10c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d10c      	bne.n	800a12e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800a114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a118:	b672      	cpsid	i
 800a11a:	f383 8811 	msr	BASEPRI, r3
 800a11e:	f3bf 8f6f 	isb	sy
 800a122:	f3bf 8f4f 	dsb	sy
 800a126:	b662      	cpsie	i
 800a128:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a12a:	bf00      	nop
 800a12c:	e7fe      	b.n	800a12c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d002      	beq.n	800a13a <xQueueGenericCreateStatic+0x5a>
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d001      	beq.n	800a13e <xQueueGenericCreateStatic+0x5e>
 800a13a:	2301      	movs	r3, #1
 800a13c:	e000      	b.n	800a140 <xQueueGenericCreateStatic+0x60>
 800a13e:	2300      	movs	r3, #0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d10c      	bne.n	800a15e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800a144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a148:	b672      	cpsid	i
 800a14a:	f383 8811 	msr	BASEPRI, r3
 800a14e:	f3bf 8f6f 	isb	sy
 800a152:	f3bf 8f4f 	dsb	sy
 800a156:	b662      	cpsie	i
 800a158:	623b      	str	r3, [r7, #32]
}
 800a15a:	bf00      	nop
 800a15c:	e7fe      	b.n	800a15c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d102      	bne.n	800a16a <xQueueGenericCreateStatic+0x8a>
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d101      	bne.n	800a16e <xQueueGenericCreateStatic+0x8e>
 800a16a:	2301      	movs	r3, #1
 800a16c:	e000      	b.n	800a170 <xQueueGenericCreateStatic+0x90>
 800a16e:	2300      	movs	r3, #0
 800a170:	2b00      	cmp	r3, #0
 800a172:	d10c      	bne.n	800a18e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800a174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a178:	b672      	cpsid	i
 800a17a:	f383 8811 	msr	BASEPRI, r3
 800a17e:	f3bf 8f6f 	isb	sy
 800a182:	f3bf 8f4f 	dsb	sy
 800a186:	b662      	cpsie	i
 800a188:	61fb      	str	r3, [r7, #28]
}
 800a18a:	bf00      	nop
 800a18c:	e7fe      	b.n	800a18c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a18e:	2350      	movs	r3, #80	; 0x50
 800a190:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	2b50      	cmp	r3, #80	; 0x50
 800a196:	d00c      	beq.n	800a1b2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800a198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19c:	b672      	cpsid	i
 800a19e:	f383 8811 	msr	BASEPRI, r3
 800a1a2:	f3bf 8f6f 	isb	sy
 800a1a6:	f3bf 8f4f 	dsb	sy
 800a1aa:	b662      	cpsie	i
 800a1ac:	61bb      	str	r3, [r7, #24]
}
 800a1ae:	bf00      	nop
 800a1b0:	e7fe      	b.n	800a1b0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a1b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00d      	beq.n	800a1da <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a1c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1cc:	9300      	str	r3, [sp, #0]
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	68b9      	ldr	r1, [r7, #8]
 800a1d4:	68f8      	ldr	r0, [r7, #12]
 800a1d6:	f000 f847 	bl	800a268 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3730      	adds	r7, #48	; 0x30
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b08a      	sub	sp, #40	; 0x28
 800a1e8:	af02      	add	r7, sp, #8
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	4613      	mov	r3, r2
 800a1f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d10c      	bne.n	800a212 <xQueueGenericCreate+0x2e>
	__asm volatile
 800a1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fc:	b672      	cpsid	i
 800a1fe:	f383 8811 	msr	BASEPRI, r3
 800a202:	f3bf 8f6f 	isb	sy
 800a206:	f3bf 8f4f 	dsb	sy
 800a20a:	b662      	cpsie	i
 800a20c:	613b      	str	r3, [r7, #16]
}
 800a20e:	bf00      	nop
 800a210:	e7fe      	b.n	800a210 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d102      	bne.n	800a21e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a218:	2300      	movs	r3, #0
 800a21a:	61fb      	str	r3, [r7, #28]
 800a21c:	e004      	b.n	800a228 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	68ba      	ldr	r2, [r7, #8]
 800a222:	fb02 f303 	mul.w	r3, r2, r3
 800a226:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	3350      	adds	r3, #80	; 0x50
 800a22c:	4618      	mov	r0, r3
 800a22e:	f002 fe19 	bl	800ce64 <pvPortMalloc>
 800a232:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a234:	69bb      	ldr	r3, [r7, #24]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d011      	beq.n	800a25e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a23a:	69bb      	ldr	r3, [r7, #24]
 800a23c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	3350      	adds	r3, #80	; 0x50
 800a242:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	2200      	movs	r2, #0
 800a248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a24c:	79fa      	ldrb	r2, [r7, #7]
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	9300      	str	r3, [sp, #0]
 800a252:	4613      	mov	r3, r2
 800a254:	697a      	ldr	r2, [r7, #20]
 800a256:	68b9      	ldr	r1, [r7, #8]
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	f000 f805 	bl	800a268 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a25e:	69bb      	ldr	r3, [r7, #24]
	}
 800a260:	4618      	mov	r0, r3
 800a262:	3720      	adds	r7, #32
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	607a      	str	r2, [r7, #4]
 800a274:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d103      	bne.n	800a284 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	69ba      	ldr	r2, [r7, #24]
 800a280:	601a      	str	r2, [r3, #0]
 800a282:	e002      	b.n	800a28a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a296:	2101      	movs	r1, #1
 800a298:	69b8      	ldr	r0, [r7, #24]
 800a29a:	f7ff feb7 	bl	800a00c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	78fa      	ldrb	r2, [r7, #3]
 800a2a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a2a6:	bf00      	nop
 800a2a8:	3710      	adds	r7, #16
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}

0800a2ae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a2ae:	b580      	push	{r7, lr}
 800a2b0:	b082      	sub	sp, #8
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d00e      	beq.n	800a2da <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	2100      	movs	r1, #0
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 f917 	bl	800a508 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a2da:	bf00      	nop
 800a2dc:	3708      	adds	r7, #8
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b086      	sub	sp, #24
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	617b      	str	r3, [r7, #20]
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a2f4:	79fb      	ldrb	r3, [r7, #7]
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	6939      	ldr	r1, [r7, #16]
 800a2fa:	6978      	ldr	r0, [r7, #20]
 800a2fc:	f7ff ff72 	bl	800a1e4 <xQueueGenericCreate>
 800a300:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	f7ff ffd3 	bl	800a2ae <prvInitialiseMutex>

		return xNewQueue;
 800a308:	68fb      	ldr	r3, [r7, #12]
	}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3718      	adds	r7, #24
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a312:	b580      	push	{r7, lr}
 800a314:	b088      	sub	sp, #32
 800a316:	af02      	add	r7, sp, #8
 800a318:	4603      	mov	r3, r0
 800a31a:	6039      	str	r1, [r7, #0]
 800a31c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a31e:	2301      	movs	r3, #1
 800a320:	617b      	str	r3, [r7, #20]
 800a322:	2300      	movs	r3, #0
 800a324:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a326:	79fb      	ldrb	r3, [r7, #7]
 800a328:	9300      	str	r3, [sp, #0]
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	2200      	movs	r2, #0
 800a32e:	6939      	ldr	r1, [r7, #16]
 800a330:	6978      	ldr	r0, [r7, #20]
 800a332:	f7ff fed5 	bl	800a0e0 <xQueueGenericCreateStatic>
 800a336:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a338:	68f8      	ldr	r0, [r7, #12]
 800a33a:	f7ff ffb8 	bl	800a2ae <prvInitialiseMutex>

		return xNewQueue;
 800a33e:	68fb      	ldr	r3, [r7, #12]
	}
 800a340:	4618      	mov	r0, r3
 800a342:	3718      	adds	r7, #24
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a348:	b590      	push	{r4, r7, lr}
 800a34a:	b087      	sub	sp, #28
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d10c      	bne.n	800a374 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 800a35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35e:	b672      	cpsid	i
 800a360:	f383 8811 	msr	BASEPRI, r3
 800a364:	f3bf 8f6f 	isb	sy
 800a368:	f3bf 8f4f 	dsb	sy
 800a36c:	b662      	cpsie	i
 800a36e:	60fb      	str	r3, [r7, #12]
}
 800a370:	bf00      	nop
 800a372:	e7fe      	b.n	800a372 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	689c      	ldr	r4, [r3, #8]
 800a378:	f001 fde8 	bl	800bf4c <xTaskGetCurrentTaskHandle>
 800a37c:	4603      	mov	r3, r0
 800a37e:	429c      	cmp	r4, r3
 800a380:	d111      	bne.n	800a3a6 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	1e5a      	subs	r2, r3, #1
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d105      	bne.n	800a3a0 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a394:	2300      	movs	r3, #0
 800a396:	2200      	movs	r2, #0
 800a398:	2100      	movs	r1, #0
 800a39a:	6938      	ldr	r0, [r7, #16]
 800a39c:	f000 f8b4 	bl	800a508 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	617b      	str	r3, [r7, #20]
 800a3a4:	e001      	b.n	800a3aa <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a3aa:	697b      	ldr	r3, [r7, #20]
	}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	371c      	adds	r7, #28
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd90      	pop	{r4, r7, pc}

0800a3b4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a3b4:	b590      	push	{r4, r7, lr}
 800a3b6:	b087      	sub	sp, #28
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10c      	bne.n	800a3e2 <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 800a3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3cc:	b672      	cpsid	i
 800a3ce:	f383 8811 	msr	BASEPRI, r3
 800a3d2:	f3bf 8f6f 	isb	sy
 800a3d6:	f3bf 8f4f 	dsb	sy
 800a3da:	b662      	cpsie	i
 800a3dc:	60fb      	str	r3, [r7, #12]
}
 800a3de:	bf00      	nop
 800a3e0:	e7fe      	b.n	800a3e0 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	689c      	ldr	r4, [r3, #8]
 800a3e6:	f001 fdb1 	bl	800bf4c <xTaskGetCurrentTaskHandle>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	429c      	cmp	r4, r3
 800a3ee:	d107      	bne.n	800a400 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	1c5a      	adds	r2, r3, #1
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	617b      	str	r3, [r7, #20]
 800a3fe:	e00c      	b.n	800a41a <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a400:	6839      	ldr	r1, [r7, #0]
 800a402:	6938      	ldr	r0, [r7, #16]
 800a404:	f000 fba2 	bl	800ab4c <xQueueSemaphoreTake>
 800a408:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d004      	beq.n	800a41a <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	68db      	ldr	r3, [r3, #12]
 800a414:	1c5a      	adds	r2, r3, #1
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a41a:	697b      	ldr	r3, [r7, #20]
	}
 800a41c:	4618      	mov	r0, r3
 800a41e:	371c      	adds	r7, #28
 800a420:	46bd      	mov	sp, r7
 800a422:	bd90      	pop	{r4, r7, pc}

0800a424 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a424:	b580      	push	{r7, lr}
 800a426:	b08a      	sub	sp, #40	; 0x28
 800a428:	af02      	add	r7, sp, #8
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d10c      	bne.n	800a450 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800a436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43a:	b672      	cpsid	i
 800a43c:	f383 8811 	msr	BASEPRI, r3
 800a440:	f3bf 8f6f 	isb	sy
 800a444:	f3bf 8f4f 	dsb	sy
 800a448:	b662      	cpsie	i
 800a44a:	61bb      	str	r3, [r7, #24]
}
 800a44c:	bf00      	nop
 800a44e:	e7fe      	b.n	800a44e <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a450:	68ba      	ldr	r2, [r7, #8]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	429a      	cmp	r2, r3
 800a456:	d90c      	bls.n	800a472 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800a458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45c:	b672      	cpsid	i
 800a45e:	f383 8811 	msr	BASEPRI, r3
 800a462:	f3bf 8f6f 	isb	sy
 800a466:	f3bf 8f4f 	dsb	sy
 800a46a:	b662      	cpsie	i
 800a46c:	617b      	str	r3, [r7, #20]
}
 800a46e:	bf00      	nop
 800a470:	e7fe      	b.n	800a470 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a472:	2302      	movs	r3, #2
 800a474:	9300      	str	r3, [sp, #0]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2200      	movs	r2, #0
 800a47a:	2100      	movs	r1, #0
 800a47c:	68f8      	ldr	r0, [r7, #12]
 800a47e:	f7ff fe2f 	bl	800a0e0 <xQueueGenericCreateStatic>
 800a482:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d002      	beq.n	800a490 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a48a:	69fb      	ldr	r3, [r7, #28]
 800a48c:	68ba      	ldr	r2, [r7, #8]
 800a48e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a490:	69fb      	ldr	r3, [r7, #28]
	}
 800a492:	4618      	mov	r0, r3
 800a494:	3720      	adds	r7, #32
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b086      	sub	sp, #24
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
 800a4a2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d10c      	bne.n	800a4c4 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800a4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ae:	b672      	cpsid	i
 800a4b0:	f383 8811 	msr	BASEPRI, r3
 800a4b4:	f3bf 8f6f 	isb	sy
 800a4b8:	f3bf 8f4f 	dsb	sy
 800a4bc:	b662      	cpsie	i
 800a4be:	613b      	str	r3, [r7, #16]
}
 800a4c0:	bf00      	nop
 800a4c2:	e7fe      	b.n	800a4c2 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a4c4:	683a      	ldr	r2, [r7, #0]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d90c      	bls.n	800a4e6 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800a4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d0:	b672      	cpsid	i
 800a4d2:	f383 8811 	msr	BASEPRI, r3
 800a4d6:	f3bf 8f6f 	isb	sy
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	b662      	cpsie	i
 800a4e0:	60fb      	str	r3, [r7, #12]
}
 800a4e2:	bf00      	nop
 800a4e4:	e7fe      	b.n	800a4e4 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a4e6:	2202      	movs	r2, #2
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f7ff fe7a 	bl	800a1e4 <xQueueGenericCreate>
 800a4f0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d002      	beq.n	800a4fe <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	683a      	ldr	r2, [r7, #0]
 800a4fc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a4fe:	697b      	ldr	r3, [r7, #20]
	}
 800a500:	4618      	mov	r0, r3
 800a502:	3718      	adds	r7, #24
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b08e      	sub	sp, #56	; 0x38
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	607a      	str	r2, [r7, #4]
 800a514:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a516:	2300      	movs	r3, #0
 800a518:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a520:	2b00      	cmp	r3, #0
 800a522:	d10c      	bne.n	800a53e <xQueueGenericSend+0x36>
	__asm volatile
 800a524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a528:	b672      	cpsid	i
 800a52a:	f383 8811 	msr	BASEPRI, r3
 800a52e:	f3bf 8f6f 	isb	sy
 800a532:	f3bf 8f4f 	dsb	sy
 800a536:	b662      	cpsie	i
 800a538:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a53a:	bf00      	nop
 800a53c:	e7fe      	b.n	800a53c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d103      	bne.n	800a54c <xQueueGenericSend+0x44>
 800a544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d101      	bne.n	800a550 <xQueueGenericSend+0x48>
 800a54c:	2301      	movs	r3, #1
 800a54e:	e000      	b.n	800a552 <xQueueGenericSend+0x4a>
 800a550:	2300      	movs	r3, #0
 800a552:	2b00      	cmp	r3, #0
 800a554:	d10c      	bne.n	800a570 <xQueueGenericSend+0x68>
	__asm volatile
 800a556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55a:	b672      	cpsid	i
 800a55c:	f383 8811 	msr	BASEPRI, r3
 800a560:	f3bf 8f6f 	isb	sy
 800a564:	f3bf 8f4f 	dsb	sy
 800a568:	b662      	cpsie	i
 800a56a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a56c:	bf00      	nop
 800a56e:	e7fe      	b.n	800a56e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	2b02      	cmp	r3, #2
 800a574:	d103      	bne.n	800a57e <xQueueGenericSend+0x76>
 800a576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d101      	bne.n	800a582 <xQueueGenericSend+0x7a>
 800a57e:	2301      	movs	r3, #1
 800a580:	e000      	b.n	800a584 <xQueueGenericSend+0x7c>
 800a582:	2300      	movs	r3, #0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d10c      	bne.n	800a5a2 <xQueueGenericSend+0x9a>
	__asm volatile
 800a588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58c:	b672      	cpsid	i
 800a58e:	f383 8811 	msr	BASEPRI, r3
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	f3bf 8f4f 	dsb	sy
 800a59a:	b662      	cpsie	i
 800a59c:	623b      	str	r3, [r7, #32]
}
 800a59e:	bf00      	nop
 800a5a0:	e7fe      	b.n	800a5a0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5a2:	f001 fce3 	bl	800bf6c <xTaskGetSchedulerState>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d102      	bne.n	800a5b2 <xQueueGenericSend+0xaa>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d101      	bne.n	800a5b6 <xQueueGenericSend+0xae>
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	e000      	b.n	800a5b8 <xQueueGenericSend+0xb0>
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d10c      	bne.n	800a5d6 <xQueueGenericSend+0xce>
	__asm volatile
 800a5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c0:	b672      	cpsid	i
 800a5c2:	f383 8811 	msr	BASEPRI, r3
 800a5c6:	f3bf 8f6f 	isb	sy
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	b662      	cpsie	i
 800a5d0:	61fb      	str	r3, [r7, #28]
}
 800a5d2:	bf00      	nop
 800a5d4:	e7fe      	b.n	800a5d4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a5d6:	f002 fb19 	bl	800cc0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d302      	bcc.n	800a5ec <xQueueGenericSend+0xe4>
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	2b02      	cmp	r3, #2
 800a5ea:	d129      	bne.n	800a640 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a5ec:	683a      	ldr	r2, [r7, #0]
 800a5ee:	68b9      	ldr	r1, [r7, #8]
 800a5f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5f2:	f000 fcc2 	bl	800af7a <prvCopyDataToQueue>
 800a5f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d010      	beq.n	800a622 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a602:	3324      	adds	r3, #36	; 0x24
 800a604:	4618      	mov	r0, r3
 800a606:	f001 fadb 	bl	800bbc0 <xTaskRemoveFromEventList>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d013      	beq.n	800a638 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a610:	4b3f      	ldr	r3, [pc, #252]	; (800a710 <xQueueGenericSend+0x208>)
 800a612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a616:	601a      	str	r2, [r3, #0]
 800a618:	f3bf 8f4f 	dsb	sy
 800a61c:	f3bf 8f6f 	isb	sy
 800a620:	e00a      	b.n	800a638 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a624:	2b00      	cmp	r3, #0
 800a626:	d007      	beq.n	800a638 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a628:	4b39      	ldr	r3, [pc, #228]	; (800a710 <xQueueGenericSend+0x208>)
 800a62a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a62e:	601a      	str	r2, [r3, #0]
 800a630:	f3bf 8f4f 	dsb	sy
 800a634:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a638:	f002 fb1c 	bl	800cc74 <vPortExitCritical>
				return pdPASS;
 800a63c:	2301      	movs	r3, #1
 800a63e:	e063      	b.n	800a708 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d103      	bne.n	800a64e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a646:	f002 fb15 	bl	800cc74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a64a:	2300      	movs	r3, #0
 800a64c:	e05c      	b.n	800a708 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a64e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a650:	2b00      	cmp	r3, #0
 800a652:	d106      	bne.n	800a662 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a654:	f107 0314 	add.w	r3, r7, #20
 800a658:	4618      	mov	r0, r3
 800a65a:	f001 fb17 	bl	800bc8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a65e:	2301      	movs	r3, #1
 800a660:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a662:	f002 fb07 	bl	800cc74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a666:	f001 f86b 	bl	800b740 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a66a:	f002 facf 	bl	800cc0c <vPortEnterCritical>
 800a66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a670:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a674:	b25b      	sxtb	r3, r3
 800a676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a67a:	d103      	bne.n	800a684 <xQueueGenericSend+0x17c>
 800a67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67e:	2200      	movs	r2, #0
 800a680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a686:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a68a:	b25b      	sxtb	r3, r3
 800a68c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a690:	d103      	bne.n	800a69a <xQueueGenericSend+0x192>
 800a692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a694:	2200      	movs	r2, #0
 800a696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a69a:	f002 faeb 	bl	800cc74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a69e:	1d3a      	adds	r2, r7, #4
 800a6a0:	f107 0314 	add.w	r3, r7, #20
 800a6a4:	4611      	mov	r1, r2
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f001 fb06 	bl	800bcb8 <xTaskCheckForTimeOut>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d124      	bne.n	800a6fc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a6b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6b4:	f000 fd59 	bl	800b16a <prvIsQueueFull>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d018      	beq.n	800a6f0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c0:	3310      	adds	r3, #16
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	4611      	mov	r1, r2
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f001 fa26 	bl	800bb18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a6cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6ce:	f000 fce4 	bl	800b09a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a6d2:	f001 f843 	bl	800b75c <xTaskResumeAll>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	f47f af7c 	bne.w	800a5d6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800a6de:	4b0c      	ldr	r3, [pc, #48]	; (800a710 <xQueueGenericSend+0x208>)
 800a6e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6e4:	601a      	str	r2, [r3, #0]
 800a6e6:	f3bf 8f4f 	dsb	sy
 800a6ea:	f3bf 8f6f 	isb	sy
 800a6ee:	e772      	b.n	800a5d6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a6f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6f2:	f000 fcd2 	bl	800b09a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6f6:	f001 f831 	bl	800b75c <xTaskResumeAll>
 800a6fa:	e76c      	b.n	800a5d6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a6fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6fe:	f000 fccc 	bl	800b09a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a702:	f001 f82b 	bl	800b75c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a706:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3738      	adds	r7, #56	; 0x38
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	e000ed04 	.word	0xe000ed04

0800a714 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b08e      	sub	sp, #56	; 0x38
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	607a      	str	r2, [r7, #4]
 800a720:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d10c      	bne.n	800a746 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800a72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a730:	b672      	cpsid	i
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	b662      	cpsie	i
 800a740:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a742:	bf00      	nop
 800a744:	e7fe      	b.n	800a744 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d103      	bne.n	800a754 <xQueueGenericSendFromISR+0x40>
 800a74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a74e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a750:	2b00      	cmp	r3, #0
 800a752:	d101      	bne.n	800a758 <xQueueGenericSendFromISR+0x44>
 800a754:	2301      	movs	r3, #1
 800a756:	e000      	b.n	800a75a <xQueueGenericSendFromISR+0x46>
 800a758:	2300      	movs	r3, #0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d10c      	bne.n	800a778 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800a75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a762:	b672      	cpsid	i
 800a764:	f383 8811 	msr	BASEPRI, r3
 800a768:	f3bf 8f6f 	isb	sy
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	b662      	cpsie	i
 800a772:	623b      	str	r3, [r7, #32]
}
 800a774:	bf00      	nop
 800a776:	e7fe      	b.n	800a776 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	2b02      	cmp	r3, #2
 800a77c:	d103      	bne.n	800a786 <xQueueGenericSendFromISR+0x72>
 800a77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a782:	2b01      	cmp	r3, #1
 800a784:	d101      	bne.n	800a78a <xQueueGenericSendFromISR+0x76>
 800a786:	2301      	movs	r3, #1
 800a788:	e000      	b.n	800a78c <xQueueGenericSendFromISR+0x78>
 800a78a:	2300      	movs	r3, #0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d10c      	bne.n	800a7aa <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800a790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a794:	b672      	cpsid	i
 800a796:	f383 8811 	msr	BASEPRI, r3
 800a79a:	f3bf 8f6f 	isb	sy
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	b662      	cpsie	i
 800a7a4:	61fb      	str	r3, [r7, #28]
}
 800a7a6:	bf00      	nop
 800a7a8:	e7fe      	b.n	800a7a8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7aa:	f002 fb17 	bl	800cddc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a7ae:	f3ef 8211 	mrs	r2, BASEPRI
 800a7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b6:	b672      	cpsid	i
 800a7b8:	f383 8811 	msr	BASEPRI, r3
 800a7bc:	f3bf 8f6f 	isb	sy
 800a7c0:	f3bf 8f4f 	dsb	sy
 800a7c4:	b662      	cpsie	i
 800a7c6:	61ba      	str	r2, [r7, #24]
 800a7c8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a7ca:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a7cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d302      	bcc.n	800a7e0 <xQueueGenericSendFromISR+0xcc>
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	d12c      	bne.n	800a83a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a7ea:	683a      	ldr	r2, [r7, #0]
 800a7ec:	68b9      	ldr	r1, [r7, #8]
 800a7ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7f0:	f000 fbc3 	bl	800af7a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a7f4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a7f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7fc:	d112      	bne.n	800a824 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a802:	2b00      	cmp	r3, #0
 800a804:	d016      	beq.n	800a834 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a808:	3324      	adds	r3, #36	; 0x24
 800a80a:	4618      	mov	r0, r3
 800a80c:	f001 f9d8 	bl	800bbc0 <xTaskRemoveFromEventList>
 800a810:	4603      	mov	r3, r0
 800a812:	2b00      	cmp	r3, #0
 800a814:	d00e      	beq.n	800a834 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d00b      	beq.n	800a834 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2201      	movs	r2, #1
 800a820:	601a      	str	r2, [r3, #0]
 800a822:	e007      	b.n	800a834 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a824:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a828:	3301      	adds	r3, #1
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	b25a      	sxtb	r2, r3
 800a82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a834:	2301      	movs	r3, #1
 800a836:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a838:	e001      	b.n	800a83e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a83a:	2300      	movs	r3, #0
 800a83c:	637b      	str	r3, [r7, #52]	; 0x34
 800a83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a840:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a848:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a84a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3738      	adds	r7, #56	; 0x38
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b08e      	sub	sp, #56	; 0x38
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a864:	2b00      	cmp	r3, #0
 800a866:	d10c      	bne.n	800a882 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800a868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86c:	b672      	cpsid	i
 800a86e:	f383 8811 	msr	BASEPRI, r3
 800a872:	f3bf 8f6f 	isb	sy
 800a876:	f3bf 8f4f 	dsb	sy
 800a87a:	b662      	cpsie	i
 800a87c:	623b      	str	r3, [r7, #32]
}
 800a87e:	bf00      	nop
 800a880:	e7fe      	b.n	800a880 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00c      	beq.n	800a8a4 <xQueueGiveFromISR+0x50>
	__asm volatile
 800a88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88e:	b672      	cpsid	i
 800a890:	f383 8811 	msr	BASEPRI, r3
 800a894:	f3bf 8f6f 	isb	sy
 800a898:	f3bf 8f4f 	dsb	sy
 800a89c:	b662      	cpsie	i
 800a89e:	61fb      	str	r3, [r7, #28]
}
 800a8a0:	bf00      	nop
 800a8a2:	e7fe      	b.n	800a8a2 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d103      	bne.n	800a8b4 <xQueueGiveFromISR+0x60>
 800a8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d101      	bne.n	800a8b8 <xQueueGiveFromISR+0x64>
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e000      	b.n	800a8ba <xQueueGiveFromISR+0x66>
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d10c      	bne.n	800a8d8 <xQueueGiveFromISR+0x84>
	__asm volatile
 800a8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c2:	b672      	cpsid	i
 800a8c4:	f383 8811 	msr	BASEPRI, r3
 800a8c8:	f3bf 8f6f 	isb	sy
 800a8cc:	f3bf 8f4f 	dsb	sy
 800a8d0:	b662      	cpsie	i
 800a8d2:	61bb      	str	r3, [r7, #24]
}
 800a8d4:	bf00      	nop
 800a8d6:	e7fe      	b.n	800a8d6 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a8d8:	f002 fa80 	bl	800cddc <vPortValidateInterruptPriority>
	__asm volatile
 800a8dc:	f3ef 8211 	mrs	r2, BASEPRI
 800a8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e4:	b672      	cpsid	i
 800a8e6:	f383 8811 	msr	BASEPRI, r3
 800a8ea:	f3bf 8f6f 	isb	sy
 800a8ee:	f3bf 8f4f 	dsb	sy
 800a8f2:	b662      	cpsie	i
 800a8f4:	617a      	str	r2, [r7, #20]
 800a8f6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a8f8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a8fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a900:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a908:	429a      	cmp	r2, r3
 800a90a:	d22b      	bcs.n	800a964 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a918:	1c5a      	adds	r2, r3, #1
 800a91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a91e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a926:	d112      	bne.n	800a94e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d016      	beq.n	800a95e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a932:	3324      	adds	r3, #36	; 0x24
 800a934:	4618      	mov	r0, r3
 800a936:	f001 f943 	bl	800bbc0 <xTaskRemoveFromEventList>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d00e      	beq.n	800a95e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d00b      	beq.n	800a95e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	2201      	movs	r2, #1
 800a94a:	601a      	str	r2, [r3, #0]
 800a94c:	e007      	b.n	800a95e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a94e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a952:	3301      	adds	r3, #1
 800a954:	b2db      	uxtb	r3, r3
 800a956:	b25a      	sxtb	r2, r3
 800a958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a95e:	2301      	movs	r3, #1
 800a960:	637b      	str	r3, [r7, #52]	; 0x34
 800a962:	e001      	b.n	800a968 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a964:	2300      	movs	r3, #0
 800a966:	637b      	str	r3, [r7, #52]	; 0x34
 800a968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f383 8811 	msr	BASEPRI, r3
}
 800a972:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a976:	4618      	mov	r0, r3
 800a978:	3738      	adds	r7, #56	; 0x38
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
	...

0800a980 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b08c      	sub	sp, #48	; 0x30
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a98c:	2300      	movs	r3, #0
 800a98e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a996:	2b00      	cmp	r3, #0
 800a998:	d10c      	bne.n	800a9b4 <xQueueReceive+0x34>
	__asm volatile
 800a99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99e:	b672      	cpsid	i
 800a9a0:	f383 8811 	msr	BASEPRI, r3
 800a9a4:	f3bf 8f6f 	isb	sy
 800a9a8:	f3bf 8f4f 	dsb	sy
 800a9ac:	b662      	cpsie	i
 800a9ae:	623b      	str	r3, [r7, #32]
}
 800a9b0:	bf00      	nop
 800a9b2:	e7fe      	b.n	800a9b2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d103      	bne.n	800a9c2 <xQueueReceive+0x42>
 800a9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d101      	bne.n	800a9c6 <xQueueReceive+0x46>
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	e000      	b.n	800a9c8 <xQueueReceive+0x48>
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d10c      	bne.n	800a9e6 <xQueueReceive+0x66>
	__asm volatile
 800a9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d0:	b672      	cpsid	i
 800a9d2:	f383 8811 	msr	BASEPRI, r3
 800a9d6:	f3bf 8f6f 	isb	sy
 800a9da:	f3bf 8f4f 	dsb	sy
 800a9de:	b662      	cpsie	i
 800a9e0:	61fb      	str	r3, [r7, #28]
}
 800a9e2:	bf00      	nop
 800a9e4:	e7fe      	b.n	800a9e4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9e6:	f001 fac1 	bl	800bf6c <xTaskGetSchedulerState>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d102      	bne.n	800a9f6 <xQueueReceive+0x76>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d101      	bne.n	800a9fa <xQueueReceive+0x7a>
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	e000      	b.n	800a9fc <xQueueReceive+0x7c>
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d10c      	bne.n	800aa1a <xQueueReceive+0x9a>
	__asm volatile
 800aa00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa04:	b672      	cpsid	i
 800aa06:	f383 8811 	msr	BASEPRI, r3
 800aa0a:	f3bf 8f6f 	isb	sy
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	b662      	cpsie	i
 800aa14:	61bb      	str	r3, [r7, #24]
}
 800aa16:	bf00      	nop
 800aa18:	e7fe      	b.n	800aa18 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa1a:	f002 f8f7 	bl	800cc0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa22:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d01f      	beq.n	800aa6a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa2a:	68b9      	ldr	r1, [r7, #8]
 800aa2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa2e:	f000 fb0e 	bl	800b04e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa34:	1e5a      	subs	r2, r3, #1
 800aa36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa38:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3c:	691b      	ldr	r3, [r3, #16]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00f      	beq.n	800aa62 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa44:	3310      	adds	r3, #16
 800aa46:	4618      	mov	r0, r3
 800aa48:	f001 f8ba 	bl	800bbc0 <xTaskRemoveFromEventList>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d007      	beq.n	800aa62 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa52:	4b3d      	ldr	r3, [pc, #244]	; (800ab48 <xQueueReceive+0x1c8>)
 800aa54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa58:	601a      	str	r2, [r3, #0]
 800aa5a:	f3bf 8f4f 	dsb	sy
 800aa5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa62:	f002 f907 	bl	800cc74 <vPortExitCritical>
				return pdPASS;
 800aa66:	2301      	movs	r3, #1
 800aa68:	e069      	b.n	800ab3e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d103      	bne.n	800aa78 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa70:	f002 f900 	bl	800cc74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aa74:	2300      	movs	r3, #0
 800aa76:	e062      	b.n	800ab3e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d106      	bne.n	800aa8c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa7e:	f107 0310 	add.w	r3, r7, #16
 800aa82:	4618      	mov	r0, r3
 800aa84:	f001 f902 	bl	800bc8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa8c:	f002 f8f2 	bl	800cc74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa90:	f000 fe56 	bl	800b740 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa94:	f002 f8ba 	bl	800cc0c <vPortEnterCritical>
 800aa98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa9e:	b25b      	sxtb	r3, r3
 800aaa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaa4:	d103      	bne.n	800aaae <xQueueReceive+0x12e>
 800aaa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aaae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aab4:	b25b      	sxtb	r3, r3
 800aab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaba:	d103      	bne.n	800aac4 <xQueueReceive+0x144>
 800aabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aabe:	2200      	movs	r2, #0
 800aac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aac4:	f002 f8d6 	bl	800cc74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aac8:	1d3a      	adds	r2, r7, #4
 800aaca:	f107 0310 	add.w	r3, r7, #16
 800aace:	4611      	mov	r1, r2
 800aad0:	4618      	mov	r0, r3
 800aad2:	f001 f8f1 	bl	800bcb8 <xTaskCheckForTimeOut>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d123      	bne.n	800ab24 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aadc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aade:	f000 fb2e 	bl	800b13e <prvIsQueueEmpty>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d017      	beq.n	800ab18 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaea:	3324      	adds	r3, #36	; 0x24
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	4611      	mov	r1, r2
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f001 f811 	bl	800bb18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aaf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaf8:	f000 facf 	bl	800b09a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aafc:	f000 fe2e 	bl	800b75c <xTaskResumeAll>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d189      	bne.n	800aa1a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800ab06:	4b10      	ldr	r3, [pc, #64]	; (800ab48 <xQueueReceive+0x1c8>)
 800ab08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab0c:	601a      	str	r2, [r3, #0]
 800ab0e:	f3bf 8f4f 	dsb	sy
 800ab12:	f3bf 8f6f 	isb	sy
 800ab16:	e780      	b.n	800aa1a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ab18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab1a:	f000 fabe 	bl	800b09a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab1e:	f000 fe1d 	bl	800b75c <xTaskResumeAll>
 800ab22:	e77a      	b.n	800aa1a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ab24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab26:	f000 fab8 	bl	800b09a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab2a:	f000 fe17 	bl	800b75c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab30:	f000 fb05 	bl	800b13e <prvIsQueueEmpty>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	f43f af6f 	beq.w	800aa1a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3730      	adds	r7, #48	; 0x30
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	e000ed04 	.word	0xe000ed04

0800ab4c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b08e      	sub	sp, #56	; 0x38
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ab56:	2300      	movs	r3, #0
 800ab58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ab62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d10c      	bne.n	800ab82 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800ab68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6c:	b672      	cpsid	i
 800ab6e:	f383 8811 	msr	BASEPRI, r3
 800ab72:	f3bf 8f6f 	isb	sy
 800ab76:	f3bf 8f4f 	dsb	sy
 800ab7a:	b662      	cpsie	i
 800ab7c:	623b      	str	r3, [r7, #32]
}
 800ab7e:	bf00      	nop
 800ab80:	e7fe      	b.n	800ab80 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ab82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00c      	beq.n	800aba4 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800ab8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab8e:	b672      	cpsid	i
 800ab90:	f383 8811 	msr	BASEPRI, r3
 800ab94:	f3bf 8f6f 	isb	sy
 800ab98:	f3bf 8f4f 	dsb	sy
 800ab9c:	b662      	cpsie	i
 800ab9e:	61fb      	str	r3, [r7, #28]
}
 800aba0:	bf00      	nop
 800aba2:	e7fe      	b.n	800aba2 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aba4:	f001 f9e2 	bl	800bf6c <xTaskGetSchedulerState>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d102      	bne.n	800abb4 <xQueueSemaphoreTake+0x68>
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d101      	bne.n	800abb8 <xQueueSemaphoreTake+0x6c>
 800abb4:	2301      	movs	r3, #1
 800abb6:	e000      	b.n	800abba <xQueueSemaphoreTake+0x6e>
 800abb8:	2300      	movs	r3, #0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d10c      	bne.n	800abd8 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800abbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc2:	b672      	cpsid	i
 800abc4:	f383 8811 	msr	BASEPRI, r3
 800abc8:	f3bf 8f6f 	isb	sy
 800abcc:	f3bf 8f4f 	dsb	sy
 800abd0:	b662      	cpsie	i
 800abd2:	61bb      	str	r3, [r7, #24]
}
 800abd4:	bf00      	nop
 800abd6:	e7fe      	b.n	800abd6 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800abd8:	f002 f818 	bl	800cc0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800abdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800abe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d024      	beq.n	800ac32 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800abe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abea:	1e5a      	subs	r2, r3, #1
 800abec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800abf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d104      	bne.n	800ac02 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800abf8:	f001 fb36 	bl	800c268 <pvTaskIncrementMutexHeldCount>
 800abfc:	4602      	mov	r2, r0
 800abfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac00:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac04:	691b      	ldr	r3, [r3, #16]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d00f      	beq.n	800ac2a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0c:	3310      	adds	r3, #16
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f000 ffd6 	bl	800bbc0 <xTaskRemoveFromEventList>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d007      	beq.n	800ac2a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac1a:	4b55      	ldr	r3, [pc, #340]	; (800ad70 <xQueueSemaphoreTake+0x224>)
 800ac1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac20:	601a      	str	r2, [r3, #0]
 800ac22:	f3bf 8f4f 	dsb	sy
 800ac26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac2a:	f002 f823 	bl	800cc74 <vPortExitCritical>
				return pdPASS;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	e099      	b.n	800ad66 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d113      	bne.n	800ac60 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ac38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00c      	beq.n	800ac58 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800ac3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac42:	b672      	cpsid	i
 800ac44:	f383 8811 	msr	BASEPRI, r3
 800ac48:	f3bf 8f6f 	isb	sy
 800ac4c:	f3bf 8f4f 	dsb	sy
 800ac50:	b662      	cpsie	i
 800ac52:	617b      	str	r3, [r7, #20]
}
 800ac54:	bf00      	nop
 800ac56:	e7fe      	b.n	800ac56 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ac58:	f002 f80c 	bl	800cc74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	e082      	b.n	800ad66 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d106      	bne.n	800ac74 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac66:	f107 030c 	add.w	r3, r7, #12
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f001 f80e 	bl	800bc8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac70:	2301      	movs	r3, #1
 800ac72:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac74:	f001 fffe 	bl	800cc74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac78:	f000 fd62 	bl	800b740 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac7c:	f001 ffc6 	bl	800cc0c <vPortEnterCritical>
 800ac80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac86:	b25b      	sxtb	r3, r3
 800ac88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac8c:	d103      	bne.n	800ac96 <xQueueSemaphoreTake+0x14a>
 800ac8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac90:	2200      	movs	r2, #0
 800ac92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac9c:	b25b      	sxtb	r3, r3
 800ac9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aca2:	d103      	bne.n	800acac <xQueueSemaphoreTake+0x160>
 800aca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca6:	2200      	movs	r2, #0
 800aca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acac:	f001 ffe2 	bl	800cc74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800acb0:	463a      	mov	r2, r7
 800acb2:	f107 030c 	add.w	r3, r7, #12
 800acb6:	4611      	mov	r1, r2
 800acb8:	4618      	mov	r0, r3
 800acba:	f000 fffd 	bl	800bcb8 <xTaskCheckForTimeOut>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d132      	bne.n	800ad2a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800acc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acc6:	f000 fa3a 	bl	800b13e <prvIsQueueEmpty>
 800acca:	4603      	mov	r3, r0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d026      	beq.n	800ad1e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800acd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d109      	bne.n	800acec <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800acd8:	f001 ff98 	bl	800cc0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800acdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	4618      	mov	r0, r3
 800ace2:	f001 f961 	bl	800bfa8 <xTaskPriorityInherit>
 800ace6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ace8:	f001 ffc4 	bl	800cc74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800acec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acee:	3324      	adds	r3, #36	; 0x24
 800acf0:	683a      	ldr	r2, [r7, #0]
 800acf2:	4611      	mov	r1, r2
 800acf4:	4618      	mov	r0, r3
 800acf6:	f000 ff0f 	bl	800bb18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800acfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acfc:	f000 f9cd 	bl	800b09a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad00:	f000 fd2c 	bl	800b75c <xTaskResumeAll>
 800ad04:	4603      	mov	r3, r0
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	f47f af66 	bne.w	800abd8 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800ad0c:	4b18      	ldr	r3, [pc, #96]	; (800ad70 <xQueueSemaphoreTake+0x224>)
 800ad0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad12:	601a      	str	r2, [r3, #0]
 800ad14:	f3bf 8f4f 	dsb	sy
 800ad18:	f3bf 8f6f 	isb	sy
 800ad1c:	e75c      	b.n	800abd8 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ad1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad20:	f000 f9bb 	bl	800b09a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad24:	f000 fd1a 	bl	800b75c <xTaskResumeAll>
 800ad28:	e756      	b.n	800abd8 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ad2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad2c:	f000 f9b5 	bl	800b09a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad30:	f000 fd14 	bl	800b75c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad36:	f000 fa02 	bl	800b13e <prvIsQueueEmpty>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f43f af4b 	beq.w	800abd8 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ad42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d00d      	beq.n	800ad64 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800ad48:	f001 ff60 	bl	800cc0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ad4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad4e:	f000 f8fc 	bl	800af4a <prvGetDisinheritPriorityAfterTimeout>
 800ad52:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ad54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f001 f9fe 	bl	800c15c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ad60:	f001 ff88 	bl	800cc74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3738      	adds	r7, #56	; 0x38
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	e000ed04 	.word	0xe000ed04

0800ad74 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b08e      	sub	sp, #56	; 0x38
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d10c      	bne.n	800ada4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800ad8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad8e:	b672      	cpsid	i
 800ad90:	f383 8811 	msr	BASEPRI, r3
 800ad94:	f3bf 8f6f 	isb	sy
 800ad98:	f3bf 8f4f 	dsb	sy
 800ad9c:	b662      	cpsie	i
 800ad9e:	623b      	str	r3, [r7, #32]
}
 800ada0:	bf00      	nop
 800ada2:	e7fe      	b.n	800ada2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d103      	bne.n	800adb2 <xQueueReceiveFromISR+0x3e>
 800adaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d101      	bne.n	800adb6 <xQueueReceiveFromISR+0x42>
 800adb2:	2301      	movs	r3, #1
 800adb4:	e000      	b.n	800adb8 <xQueueReceiveFromISR+0x44>
 800adb6:	2300      	movs	r3, #0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d10c      	bne.n	800add6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800adbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc0:	b672      	cpsid	i
 800adc2:	f383 8811 	msr	BASEPRI, r3
 800adc6:	f3bf 8f6f 	isb	sy
 800adca:	f3bf 8f4f 	dsb	sy
 800adce:	b662      	cpsie	i
 800add0:	61fb      	str	r3, [r7, #28]
}
 800add2:	bf00      	nop
 800add4:	e7fe      	b.n	800add4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800add6:	f002 f801 	bl	800cddc <vPortValidateInterruptPriority>
	__asm volatile
 800adda:	f3ef 8211 	mrs	r2, BASEPRI
 800adde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade2:	b672      	cpsid	i
 800ade4:	f383 8811 	msr	BASEPRI, r3
 800ade8:	f3bf 8f6f 	isb	sy
 800adec:	f3bf 8f4f 	dsb	sy
 800adf0:	b662      	cpsie	i
 800adf2:	61ba      	str	r2, [r7, #24]
 800adf4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800adf6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800adf8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800adfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adfe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d02f      	beq.n	800ae66 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ae06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ae10:	68b9      	ldr	r1, [r7, #8]
 800ae12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae14:	f000 f91b 	bl	800b04e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1a:	1e5a      	subs	r2, r3, #1
 800ae1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ae20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ae24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae28:	d112      	bne.n	800ae50 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2c:	691b      	ldr	r3, [r3, #16]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d016      	beq.n	800ae60 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae34:	3310      	adds	r3, #16
 800ae36:	4618      	mov	r0, r3
 800ae38:	f000 fec2 	bl	800bbc0 <xTaskRemoveFromEventList>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00e      	beq.n	800ae60 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00b      	beq.n	800ae60 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	601a      	str	r2, [r3, #0]
 800ae4e:	e007      	b.n	800ae60 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ae50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae54:	3301      	adds	r3, #1
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	b25a      	sxtb	r2, r3
 800ae5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ae60:	2301      	movs	r3, #1
 800ae62:	637b      	str	r3, [r7, #52]	; 0x34
 800ae64:	e001      	b.n	800ae6a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800ae66:	2300      	movs	r3, #0
 800ae68:	637b      	str	r3, [r7, #52]	; 0x34
 800ae6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae6c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	f383 8811 	msr	BASEPRI, r3
}
 800ae74:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ae76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3738      	adds	r7, #56	; 0x38
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d10c      	bne.n	800aea8 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800ae8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae92:	b672      	cpsid	i
 800ae94:	f383 8811 	msr	BASEPRI, r3
 800ae98:	f3bf 8f6f 	isb	sy
 800ae9c:	f3bf 8f4f 	dsb	sy
 800aea0:	b662      	cpsie	i
 800aea2:	60bb      	str	r3, [r7, #8]
}
 800aea4:	bf00      	nop
 800aea6:	e7fe      	b.n	800aea6 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800aea8:	f001 feb0 	bl	800cc0c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeb0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800aeb2:	f001 fedf 	bl	800cc74 <vPortExitCritical>

	return uxReturn;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3710      	adds	r7, #16
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800aec0:	b480      	push	{r7}
 800aec2:	b087      	sub	sp, #28
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d10c      	bne.n	800aeec <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 800aed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed6:	b672      	cpsid	i
 800aed8:	f383 8811 	msr	BASEPRI, r3
 800aedc:	f3bf 8f6f 	isb	sy
 800aee0:	f3bf 8f4f 	dsb	sy
 800aee4:	b662      	cpsie	i
 800aee6:	60fb      	str	r3, [r7, #12]
}
 800aee8:	bf00      	nop
 800aeea:	e7fe      	b.n	800aeea <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800aef2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800aef4:	4618      	mov	r0, r3
 800aef6:	371c      	adds	r7, #28
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d10c      	bne.n	800af2c <vQueueDelete+0x2c>
	__asm volatile
 800af12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af16:	b672      	cpsid	i
 800af18:	f383 8811 	msr	BASEPRI, r3
 800af1c:	f3bf 8f6f 	isb	sy
 800af20:	f3bf 8f4f 	dsb	sy
 800af24:	b662      	cpsie	i
 800af26:	60bb      	str	r3, [r7, #8]
}
 800af28:	bf00      	nop
 800af2a:	e7fe      	b.n	800af2a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800af2c:	68f8      	ldr	r0, [r7, #12]
 800af2e:	f000 f95f 	bl	800b1f0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d102      	bne.n	800af42 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800af3c:	68f8      	ldr	r0, [r7, #12]
 800af3e:	f002 f85b 	bl	800cff8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800af42:	bf00      	nop
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800af4a:	b480      	push	{r7}
 800af4c:	b085      	sub	sp, #20
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af56:	2b00      	cmp	r3, #0
 800af58:	d006      	beq.n	800af68 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800af64:	60fb      	str	r3, [r7, #12]
 800af66:	e001      	b.n	800af6c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800af68:	2300      	movs	r3, #0
 800af6a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800af6c:	68fb      	ldr	r3, [r7, #12]
	}
 800af6e:	4618      	mov	r0, r3
 800af70:	3714      	adds	r7, #20
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr

0800af7a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800af7a:	b580      	push	{r7, lr}
 800af7c:	b086      	sub	sp, #24
 800af7e:	af00      	add	r7, sp, #0
 800af80:	60f8      	str	r0, [r7, #12]
 800af82:	60b9      	str	r1, [r7, #8]
 800af84:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800af86:	2300      	movs	r3, #0
 800af88:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af8e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af94:	2b00      	cmp	r3, #0
 800af96:	d10d      	bne.n	800afb4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d14d      	bne.n	800b03c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	689b      	ldr	r3, [r3, #8]
 800afa4:	4618      	mov	r0, r3
 800afa6:	f001 f867 	bl	800c078 <xTaskPriorityDisinherit>
 800afaa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2200      	movs	r2, #0
 800afb0:	609a      	str	r2, [r3, #8]
 800afb2:	e043      	b.n	800b03c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d119      	bne.n	800afee <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	6858      	ldr	r0, [r3, #4]
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc2:	461a      	mov	r2, r3
 800afc4:	68b9      	ldr	r1, [r7, #8]
 800afc6:	f010 fc07 	bl	801b7d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	685a      	ldr	r2, [r3, #4]
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afd2:	441a      	add	r2, r3
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	685a      	ldr	r2, [r3, #4]
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	689b      	ldr	r3, [r3, #8]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d32b      	bcc.n	800b03c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681a      	ldr	r2, [r3, #0]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	605a      	str	r2, [r3, #4]
 800afec:	e026      	b.n	800b03c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	68d8      	ldr	r0, [r3, #12]
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff6:	461a      	mov	r2, r3
 800aff8:	68b9      	ldr	r1, [r7, #8]
 800affa:	f010 fbed 	bl	801b7d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	68da      	ldr	r2, [r3, #12]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b006:	425b      	negs	r3, r3
 800b008:	441a      	add	r2, r3
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	68da      	ldr	r2, [r3, #12]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	429a      	cmp	r2, r3
 800b018:	d207      	bcs.n	800b02a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	689a      	ldr	r2, [r3, #8]
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b022:	425b      	negs	r3, r3
 800b024:	441a      	add	r2, r3
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2b02      	cmp	r3, #2
 800b02e:	d105      	bne.n	800b03c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d002      	beq.n	800b03c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	3b01      	subs	r3, #1
 800b03a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	1c5a      	adds	r2, r3, #1
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b044:	697b      	ldr	r3, [r7, #20]
}
 800b046:	4618      	mov	r0, r3
 800b048:	3718      	adds	r7, #24
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b04e:	b580      	push	{r7, lr}
 800b050:	b082      	sub	sp, #8
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
 800b056:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d018      	beq.n	800b092 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	68da      	ldr	r2, [r3, #12]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b068:	441a      	add	r2, r3
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	68da      	ldr	r2, [r3, #12]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	689b      	ldr	r3, [r3, #8]
 800b076:	429a      	cmp	r2, r3
 800b078:	d303      	bcc.n	800b082 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681a      	ldr	r2, [r3, #0]
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	68d9      	ldr	r1, [r3, #12]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08a:	461a      	mov	r2, r3
 800b08c:	6838      	ldr	r0, [r7, #0]
 800b08e:	f010 fba3 	bl	801b7d8 <memcpy>
	}
}
 800b092:	bf00      	nop
 800b094:	3708      	adds	r7, #8
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b09a:	b580      	push	{r7, lr}
 800b09c:	b084      	sub	sp, #16
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b0a2:	f001 fdb3 	bl	800cc0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0ac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b0ae:	e011      	b.n	800b0d4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d012      	beq.n	800b0de <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	3324      	adds	r3, #36	; 0x24
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f000 fd7f 	bl	800bbc0 <xTaskRemoveFromEventList>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d001      	beq.n	800b0cc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b0c8:	f000 fe5c 	bl	800bd84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b0cc:	7bfb      	ldrb	r3, [r7, #15]
 800b0ce:	3b01      	subs	r3, #1
 800b0d0:	b2db      	uxtb	r3, r3
 800b0d2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b0d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	dce9      	bgt.n	800b0b0 <prvUnlockQueue+0x16>
 800b0dc:	e000      	b.n	800b0e0 <prvUnlockQueue+0x46>
					break;
 800b0de:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	22ff      	movs	r2, #255	; 0xff
 800b0e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b0e8:	f001 fdc4 	bl	800cc74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b0ec:	f001 fd8e 	bl	800cc0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0f6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b0f8:	e011      	b.n	800b11e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	691b      	ldr	r3, [r3, #16]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d012      	beq.n	800b128 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	3310      	adds	r3, #16
 800b106:	4618      	mov	r0, r3
 800b108:	f000 fd5a 	bl	800bbc0 <xTaskRemoveFromEventList>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d001      	beq.n	800b116 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b112:	f000 fe37 	bl	800bd84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b116:	7bbb      	ldrb	r3, [r7, #14]
 800b118:	3b01      	subs	r3, #1
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b11e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b122:	2b00      	cmp	r3, #0
 800b124:	dce9      	bgt.n	800b0fa <prvUnlockQueue+0x60>
 800b126:	e000      	b.n	800b12a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b128:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	22ff      	movs	r2, #255	; 0xff
 800b12e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b132:	f001 fd9f 	bl	800cc74 <vPortExitCritical>
}
 800b136:	bf00      	nop
 800b138:	3710      	adds	r7, #16
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}

0800b13e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b13e:	b580      	push	{r7, lr}
 800b140:	b084      	sub	sp, #16
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b146:	f001 fd61 	bl	800cc0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d102      	bne.n	800b158 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b152:	2301      	movs	r3, #1
 800b154:	60fb      	str	r3, [r7, #12]
 800b156:	e001      	b.n	800b15c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b158:	2300      	movs	r3, #0
 800b15a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b15c:	f001 fd8a 	bl	800cc74 <vPortExitCritical>

	return xReturn;
 800b160:	68fb      	ldr	r3, [r7, #12]
}
 800b162:	4618      	mov	r0, r3
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b084      	sub	sp, #16
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b172:	f001 fd4b 	bl	800cc0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b17e:	429a      	cmp	r2, r3
 800b180:	d102      	bne.n	800b188 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b182:	2301      	movs	r3, #1
 800b184:	60fb      	str	r3, [r7, #12]
 800b186:	e001      	b.n	800b18c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b188:	2300      	movs	r3, #0
 800b18a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b18c:	f001 fd72 	bl	800cc74 <vPortExitCritical>

	return xReturn;
 800b190:	68fb      	ldr	r3, [r7, #12]
}
 800b192:	4618      	mov	r0, r3
 800b194:	3710      	adds	r7, #16
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
	...

0800b19c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b19c:	b480      	push	{r7}
 800b19e:	b085      	sub	sp, #20
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	60fb      	str	r3, [r7, #12]
 800b1aa:	e014      	b.n	800b1d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b1ac:	4a0f      	ldr	r2, [pc, #60]	; (800b1ec <vQueueAddToRegistry+0x50>)
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d10b      	bne.n	800b1d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b1b8:	490c      	ldr	r1, [pc, #48]	; (800b1ec <vQueueAddToRegistry+0x50>)
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	683a      	ldr	r2, [r7, #0]
 800b1be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b1c2:	4a0a      	ldr	r2, [pc, #40]	; (800b1ec <vQueueAddToRegistry+0x50>)
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	00db      	lsls	r3, r3, #3
 800b1c8:	4413      	add	r3, r2
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b1ce:	e006      	b.n	800b1de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	60fb      	str	r3, [r7, #12]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2b07      	cmp	r3, #7
 800b1da:	d9e7      	bls.n	800b1ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b1dc:	bf00      	nop
 800b1de:	bf00      	nop
 800b1e0:	3714      	adds	r7, #20
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr
 800b1ea:	bf00      	nop
 800b1ec:	20009658 	.word	0x20009658

0800b1f0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b085      	sub	sp, #20
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	60fb      	str	r3, [r7, #12]
 800b1fc:	e016      	b.n	800b22c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b1fe:	4a10      	ldr	r2, [pc, #64]	; (800b240 <vQueueUnregisterQueue+0x50>)
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	00db      	lsls	r3, r3, #3
 800b204:	4413      	add	r3, r2
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d10b      	bne.n	800b226 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b20e:	4a0c      	ldr	r2, [pc, #48]	; (800b240 <vQueueUnregisterQueue+0x50>)
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2100      	movs	r1, #0
 800b214:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b218:	4a09      	ldr	r2, [pc, #36]	; (800b240 <vQueueUnregisterQueue+0x50>)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	00db      	lsls	r3, r3, #3
 800b21e:	4413      	add	r3, r2
 800b220:	2200      	movs	r2, #0
 800b222:	605a      	str	r2, [r3, #4]
				break;
 800b224:	e006      	b.n	800b234 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	3301      	adds	r3, #1
 800b22a:	60fb      	str	r3, [r7, #12]
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2b07      	cmp	r3, #7
 800b230:	d9e5      	bls.n	800b1fe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b232:	bf00      	nop
 800b234:	bf00      	nop
 800b236:	3714      	adds	r7, #20
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr
 800b240:	20009658 	.word	0x20009658

0800b244 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b244:	b580      	push	{r7, lr}
 800b246:	b086      	sub	sp, #24
 800b248:	af00      	add	r7, sp, #0
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	60b9      	str	r1, [r7, #8]
 800b24e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b254:	f001 fcda 	bl	800cc0c <vPortEnterCritical>
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b25e:	b25b      	sxtb	r3, r3
 800b260:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b264:	d103      	bne.n	800b26e <vQueueWaitForMessageRestricted+0x2a>
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	2200      	movs	r2, #0
 800b26a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b274:	b25b      	sxtb	r3, r3
 800b276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b27a:	d103      	bne.n	800b284 <vQueueWaitForMessageRestricted+0x40>
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	2200      	movs	r2, #0
 800b280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b284:	f001 fcf6 	bl	800cc74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d106      	bne.n	800b29e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	3324      	adds	r3, #36	; 0x24
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	68b9      	ldr	r1, [r7, #8]
 800b298:	4618      	mov	r0, r3
 800b29a:	f000 fc63 	bl	800bb64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b29e:	6978      	ldr	r0, [r7, #20]
 800b2a0:	f7ff fefb 	bl	800b09a <prvUnlockQueue>
	}
 800b2a4:	bf00      	nop
 800b2a6:	3718      	adds	r7, #24
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b08e      	sub	sp, #56	; 0x38
 800b2b0:	af04      	add	r7, sp, #16
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	607a      	str	r2, [r7, #4]
 800b2b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b2ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d10c      	bne.n	800b2da <xTaskCreateStatic+0x2e>
	__asm volatile
 800b2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c4:	b672      	cpsid	i
 800b2c6:	f383 8811 	msr	BASEPRI, r3
 800b2ca:	f3bf 8f6f 	isb	sy
 800b2ce:	f3bf 8f4f 	dsb	sy
 800b2d2:	b662      	cpsie	i
 800b2d4:	623b      	str	r3, [r7, #32]
}
 800b2d6:	bf00      	nop
 800b2d8:	e7fe      	b.n	800b2d8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d10c      	bne.n	800b2fa <xTaskCreateStatic+0x4e>
	__asm volatile
 800b2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e4:	b672      	cpsid	i
 800b2e6:	f383 8811 	msr	BASEPRI, r3
 800b2ea:	f3bf 8f6f 	isb	sy
 800b2ee:	f3bf 8f4f 	dsb	sy
 800b2f2:	b662      	cpsie	i
 800b2f4:	61fb      	str	r3, [r7, #28]
}
 800b2f6:	bf00      	nop
 800b2f8:	e7fe      	b.n	800b2f8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b2fa:	235c      	movs	r3, #92	; 0x5c
 800b2fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	2b5c      	cmp	r3, #92	; 0x5c
 800b302:	d00c      	beq.n	800b31e <xTaskCreateStatic+0x72>
	__asm volatile
 800b304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b308:	b672      	cpsid	i
 800b30a:	f383 8811 	msr	BASEPRI, r3
 800b30e:	f3bf 8f6f 	isb	sy
 800b312:	f3bf 8f4f 	dsb	sy
 800b316:	b662      	cpsie	i
 800b318:	61bb      	str	r3, [r7, #24]
}
 800b31a:	bf00      	nop
 800b31c:	e7fe      	b.n	800b31c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b31e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b322:	2b00      	cmp	r3, #0
 800b324:	d01e      	beq.n	800b364 <xTaskCreateStatic+0xb8>
 800b326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d01b      	beq.n	800b364 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b332:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b334:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b338:	2202      	movs	r2, #2
 800b33a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b33e:	2300      	movs	r3, #0
 800b340:	9303      	str	r3, [sp, #12]
 800b342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b344:	9302      	str	r3, [sp, #8]
 800b346:	f107 0314 	add.w	r3, r7, #20
 800b34a:	9301      	str	r3, [sp, #4]
 800b34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34e:	9300      	str	r3, [sp, #0]
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	687a      	ldr	r2, [r7, #4]
 800b354:	68b9      	ldr	r1, [r7, #8]
 800b356:	68f8      	ldr	r0, [r7, #12]
 800b358:	f000 f850 	bl	800b3fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b35c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b35e:	f000 f8df 	bl	800b520 <prvAddNewTaskToReadyList>
 800b362:	e001      	b.n	800b368 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800b364:	2300      	movs	r3, #0
 800b366:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b368:	697b      	ldr	r3, [r7, #20]
	}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3728      	adds	r7, #40	; 0x28
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b372:	b580      	push	{r7, lr}
 800b374:	b08c      	sub	sp, #48	; 0x30
 800b376:	af04      	add	r7, sp, #16
 800b378:	60f8      	str	r0, [r7, #12]
 800b37a:	60b9      	str	r1, [r7, #8]
 800b37c:	603b      	str	r3, [r7, #0]
 800b37e:	4613      	mov	r3, r2
 800b380:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b382:	88fb      	ldrh	r3, [r7, #6]
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	4618      	mov	r0, r3
 800b388:	f001 fd6c 	bl	800ce64 <pvPortMalloc>
 800b38c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d00e      	beq.n	800b3b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b394:	205c      	movs	r0, #92	; 0x5c
 800b396:	f001 fd65 	bl	800ce64 <pvPortMalloc>
 800b39a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d003      	beq.n	800b3aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	697a      	ldr	r2, [r7, #20]
 800b3a6:	631a      	str	r2, [r3, #48]	; 0x30
 800b3a8:	e005      	b.n	800b3b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b3aa:	6978      	ldr	r0, [r7, #20]
 800b3ac:	f001 fe24 	bl	800cff8 <vPortFree>
 800b3b0:	e001      	b.n	800b3b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b3b6:	69fb      	ldr	r3, [r7, #28]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d017      	beq.n	800b3ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b3bc:	69fb      	ldr	r3, [r7, #28]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b3c4:	88fa      	ldrh	r2, [r7, #6]
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	9303      	str	r3, [sp, #12]
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	9302      	str	r3, [sp, #8]
 800b3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d0:	9301      	str	r3, [sp, #4]
 800b3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d4:	9300      	str	r3, [sp, #0]
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	68b9      	ldr	r1, [r7, #8]
 800b3da:	68f8      	ldr	r0, [r7, #12]
 800b3dc:	f000 f80e 	bl	800b3fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b3e0:	69f8      	ldr	r0, [r7, #28]
 800b3e2:	f000 f89d 	bl	800b520 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	61bb      	str	r3, [r7, #24]
 800b3ea:	e002      	b.n	800b3f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b3ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b3f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b3f2:	69bb      	ldr	r3, [r7, #24]
	}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3720      	adds	r7, #32
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b088      	sub	sp, #32
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	607a      	str	r2, [r7, #4]
 800b408:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b40c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	461a      	mov	r2, r3
 800b414:	21a5      	movs	r1, #165	; 0xa5
 800b416:	f010 f9ed 	bl	801b7f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b41e:	6879      	ldr	r1, [r7, #4]
 800b420:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b424:	440b      	add	r3, r1
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	4413      	add	r3, r2
 800b42a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b42c:	69bb      	ldr	r3, [r7, #24]
 800b42e:	f023 0307 	bic.w	r3, r3, #7
 800b432:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	f003 0307 	and.w	r3, r3, #7
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00c      	beq.n	800b458 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800b43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b442:	b672      	cpsid	i
 800b444:	f383 8811 	msr	BASEPRI, r3
 800b448:	f3bf 8f6f 	isb	sy
 800b44c:	f3bf 8f4f 	dsb	sy
 800b450:	b662      	cpsie	i
 800b452:	617b      	str	r3, [r7, #20]
}
 800b454:	bf00      	nop
 800b456:	e7fe      	b.n	800b456 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d01f      	beq.n	800b49e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b45e:	2300      	movs	r3, #0
 800b460:	61fb      	str	r3, [r7, #28]
 800b462:	e012      	b.n	800b48a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b464:	68ba      	ldr	r2, [r7, #8]
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	4413      	add	r3, r2
 800b46a:	7819      	ldrb	r1, [r3, #0]
 800b46c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b46e:	69fb      	ldr	r3, [r7, #28]
 800b470:	4413      	add	r3, r2
 800b472:	3334      	adds	r3, #52	; 0x34
 800b474:	460a      	mov	r2, r1
 800b476:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b478:	68ba      	ldr	r2, [r7, #8]
 800b47a:	69fb      	ldr	r3, [r7, #28]
 800b47c:	4413      	add	r3, r2
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d006      	beq.n	800b492 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b484:	69fb      	ldr	r3, [r7, #28]
 800b486:	3301      	adds	r3, #1
 800b488:	61fb      	str	r3, [r7, #28]
 800b48a:	69fb      	ldr	r3, [r7, #28]
 800b48c:	2b0f      	cmp	r3, #15
 800b48e:	d9e9      	bls.n	800b464 <prvInitialiseNewTask+0x68>
 800b490:	e000      	b.n	800b494 <prvInitialiseNewTask+0x98>
			{
				break;
 800b492:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b496:	2200      	movs	r2, #0
 800b498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b49c:	e003      	b.n	800b4a6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a8:	2b37      	cmp	r3, #55	; 0x37
 800b4aa:	d901      	bls.n	800b4b0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b4ac:	2337      	movs	r3, #55	; 0x37
 800b4ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4be:	2200      	movs	r2, #0
 800b4c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c4:	3304      	adds	r3, #4
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7fe fd0c 	bl	8009ee4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ce:	3318      	adds	r3, #24
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7fe fd07 	bl	8009ee4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b4fa:	683a      	ldr	r2, [r7, #0]
 800b4fc:	68f9      	ldr	r1, [r7, #12]
 800b4fe:	69b8      	ldr	r0, [r7, #24]
 800b500:	f001 fa76 	bl	800c9f0 <pxPortInitialiseStack>
 800b504:	4602      	mov	r2, r0
 800b506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b508:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d002      	beq.n	800b516 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b514:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b516:	bf00      	nop
 800b518:	3720      	adds	r7, #32
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
	...

0800b520 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b082      	sub	sp, #8
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b528:	f001 fb70 	bl	800cc0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b52c:	4b2d      	ldr	r3, [pc, #180]	; (800b5e4 <prvAddNewTaskToReadyList+0xc4>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	3301      	adds	r3, #1
 800b532:	4a2c      	ldr	r2, [pc, #176]	; (800b5e4 <prvAddNewTaskToReadyList+0xc4>)
 800b534:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b536:	4b2c      	ldr	r3, [pc, #176]	; (800b5e8 <prvAddNewTaskToReadyList+0xc8>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d109      	bne.n	800b552 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b53e:	4a2a      	ldr	r2, [pc, #168]	; (800b5e8 <prvAddNewTaskToReadyList+0xc8>)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b544:	4b27      	ldr	r3, [pc, #156]	; (800b5e4 <prvAddNewTaskToReadyList+0xc4>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d110      	bne.n	800b56e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b54c:	f000 fc3e 	bl	800bdcc <prvInitialiseTaskLists>
 800b550:	e00d      	b.n	800b56e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b552:	4b26      	ldr	r3, [pc, #152]	; (800b5ec <prvAddNewTaskToReadyList+0xcc>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d109      	bne.n	800b56e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b55a:	4b23      	ldr	r3, [pc, #140]	; (800b5e8 <prvAddNewTaskToReadyList+0xc8>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b564:	429a      	cmp	r2, r3
 800b566:	d802      	bhi.n	800b56e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b568:	4a1f      	ldr	r2, [pc, #124]	; (800b5e8 <prvAddNewTaskToReadyList+0xc8>)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b56e:	4b20      	ldr	r3, [pc, #128]	; (800b5f0 <prvAddNewTaskToReadyList+0xd0>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	3301      	adds	r3, #1
 800b574:	4a1e      	ldr	r2, [pc, #120]	; (800b5f0 <prvAddNewTaskToReadyList+0xd0>)
 800b576:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b578:	4b1d      	ldr	r3, [pc, #116]	; (800b5f0 <prvAddNewTaskToReadyList+0xd0>)
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b584:	4b1b      	ldr	r3, [pc, #108]	; (800b5f4 <prvAddNewTaskToReadyList+0xd4>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d903      	bls.n	800b594 <prvAddNewTaskToReadyList+0x74>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b590:	4a18      	ldr	r2, [pc, #96]	; (800b5f4 <prvAddNewTaskToReadyList+0xd4>)
 800b592:	6013      	str	r3, [r2, #0]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b598:	4613      	mov	r3, r2
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	4413      	add	r3, r2
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	4a15      	ldr	r2, [pc, #84]	; (800b5f8 <prvAddNewTaskToReadyList+0xd8>)
 800b5a2:	441a      	add	r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	3304      	adds	r3, #4
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	4610      	mov	r0, r2
 800b5ac:	f7fe fca7 	bl	8009efe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b5b0:	f001 fb60 	bl	800cc74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b5b4:	4b0d      	ldr	r3, [pc, #52]	; (800b5ec <prvAddNewTaskToReadyList+0xcc>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d00e      	beq.n	800b5da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b5bc:	4b0a      	ldr	r3, [pc, #40]	; (800b5e8 <prvAddNewTaskToReadyList+0xc8>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d207      	bcs.n	800b5da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b5ca:	4b0c      	ldr	r3, [pc, #48]	; (800b5fc <prvAddNewTaskToReadyList+0xdc>)
 800b5cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5d0:	601a      	str	r2, [r3, #0]
 800b5d2:	f3bf 8f4f 	dsb	sy
 800b5d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5da:	bf00      	nop
 800b5dc:	3708      	adds	r7, #8
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	20009b6c 	.word	0x20009b6c
 800b5e8:	20009698 	.word	0x20009698
 800b5ec:	20009b78 	.word	0x20009b78
 800b5f0:	20009b88 	.word	0x20009b88
 800b5f4:	20009b74 	.word	0x20009b74
 800b5f8:	2000969c 	.word	0x2000969c
 800b5fc:	e000ed04 	.word	0xe000ed04

0800b600 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b600:	b580      	push	{r7, lr}
 800b602:	b084      	sub	sp, #16
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b608:	2300      	movs	r3, #0
 800b60a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d019      	beq.n	800b646 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b612:	4b14      	ldr	r3, [pc, #80]	; (800b664 <vTaskDelay+0x64>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d00c      	beq.n	800b634 <vTaskDelay+0x34>
	__asm volatile
 800b61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61e:	b672      	cpsid	i
 800b620:	f383 8811 	msr	BASEPRI, r3
 800b624:	f3bf 8f6f 	isb	sy
 800b628:	f3bf 8f4f 	dsb	sy
 800b62c:	b662      	cpsie	i
 800b62e:	60bb      	str	r3, [r7, #8]
}
 800b630:	bf00      	nop
 800b632:	e7fe      	b.n	800b632 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800b634:	f000 f884 	bl	800b740 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b638:	2100      	movs	r1, #0
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 fe28 	bl	800c290 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b640:	f000 f88c 	bl	800b75c <xTaskResumeAll>
 800b644:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d107      	bne.n	800b65c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800b64c:	4b06      	ldr	r3, [pc, #24]	; (800b668 <vTaskDelay+0x68>)
 800b64e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b652:	601a      	str	r2, [r3, #0]
 800b654:	f3bf 8f4f 	dsb	sy
 800b658:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b65c:	bf00      	nop
 800b65e:	3710      	adds	r7, #16
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	20009b94 	.word	0x20009b94
 800b668:	e000ed04 	.word	0xe000ed04

0800b66c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b08a      	sub	sp, #40	; 0x28
 800b670:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b672:	2300      	movs	r3, #0
 800b674:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b676:	2300      	movs	r3, #0
 800b678:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b67a:	463a      	mov	r2, r7
 800b67c:	1d39      	adds	r1, r7, #4
 800b67e:	f107 0308 	add.w	r3, r7, #8
 800b682:	4618      	mov	r0, r3
 800b684:	f7fe fbda 	bl	8009e3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b688:	6839      	ldr	r1, [r7, #0]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	68ba      	ldr	r2, [r7, #8]
 800b68e:	9202      	str	r2, [sp, #8]
 800b690:	9301      	str	r3, [sp, #4]
 800b692:	2300      	movs	r3, #0
 800b694:	9300      	str	r3, [sp, #0]
 800b696:	2300      	movs	r3, #0
 800b698:	460a      	mov	r2, r1
 800b69a:	4923      	ldr	r1, [pc, #140]	; (800b728 <vTaskStartScheduler+0xbc>)
 800b69c:	4823      	ldr	r0, [pc, #140]	; (800b72c <vTaskStartScheduler+0xc0>)
 800b69e:	f7ff fe05 	bl	800b2ac <xTaskCreateStatic>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	4a22      	ldr	r2, [pc, #136]	; (800b730 <vTaskStartScheduler+0xc4>)
 800b6a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b6a8:	4b21      	ldr	r3, [pc, #132]	; (800b730 <vTaskStartScheduler+0xc4>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d002      	beq.n	800b6b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	617b      	str	r3, [r7, #20]
 800b6b4:	e001      	b.n	800b6ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d102      	bne.n	800b6c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b6c0:	f000 fe3a 	bl	800c338 <xTimerCreateTimerTask>
 800b6c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d118      	bne.n	800b6fe <vTaskStartScheduler+0x92>
	__asm volatile
 800b6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d0:	b672      	cpsid	i
 800b6d2:	f383 8811 	msr	BASEPRI, r3
 800b6d6:	f3bf 8f6f 	isb	sy
 800b6da:	f3bf 8f4f 	dsb	sy
 800b6de:	b662      	cpsie	i
 800b6e0:	613b      	str	r3, [r7, #16]
}
 800b6e2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b6e4:	4b13      	ldr	r3, [pc, #76]	; (800b734 <vTaskStartScheduler+0xc8>)
 800b6e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b6ec:	4b12      	ldr	r3, [pc, #72]	; (800b738 <vTaskStartScheduler+0xcc>)
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b6f2:	4b12      	ldr	r3, [pc, #72]	; (800b73c <vTaskStartScheduler+0xd0>)
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b6f8:	f001 fa0a 	bl	800cb10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b6fc:	e010      	b.n	800b720 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b704:	d10c      	bne.n	800b720 <vTaskStartScheduler+0xb4>
	__asm volatile
 800b706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70a:	b672      	cpsid	i
 800b70c:	f383 8811 	msr	BASEPRI, r3
 800b710:	f3bf 8f6f 	isb	sy
 800b714:	f3bf 8f4f 	dsb	sy
 800b718:	b662      	cpsie	i
 800b71a:	60fb      	str	r3, [r7, #12]
}
 800b71c:	bf00      	nop
 800b71e:	e7fe      	b.n	800b71e <vTaskStartScheduler+0xb2>
}
 800b720:	bf00      	nop
 800b722:	3718      	adds	r7, #24
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}
 800b728:	0801ccfc 	.word	0x0801ccfc
 800b72c:	0800bd9d 	.word	0x0800bd9d
 800b730:	20009b90 	.word	0x20009b90
 800b734:	20009b8c 	.word	0x20009b8c
 800b738:	20009b78 	.word	0x20009b78
 800b73c:	20009b70 	.word	0x20009b70

0800b740 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b740:	b480      	push	{r7}
 800b742:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b744:	4b04      	ldr	r3, [pc, #16]	; (800b758 <vTaskSuspendAll+0x18>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	3301      	adds	r3, #1
 800b74a:	4a03      	ldr	r2, [pc, #12]	; (800b758 <vTaskSuspendAll+0x18>)
 800b74c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b74e:	bf00      	nop
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr
 800b758:	20009b94 	.word	0x20009b94

0800b75c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b762:	2300      	movs	r3, #0
 800b764:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b766:	2300      	movs	r3, #0
 800b768:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b76a:	4b43      	ldr	r3, [pc, #268]	; (800b878 <xTaskResumeAll+0x11c>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d10c      	bne.n	800b78c <xTaskResumeAll+0x30>
	__asm volatile
 800b772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b776:	b672      	cpsid	i
 800b778:	f383 8811 	msr	BASEPRI, r3
 800b77c:	f3bf 8f6f 	isb	sy
 800b780:	f3bf 8f4f 	dsb	sy
 800b784:	b662      	cpsie	i
 800b786:	603b      	str	r3, [r7, #0]
}
 800b788:	bf00      	nop
 800b78a:	e7fe      	b.n	800b78a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b78c:	f001 fa3e 	bl	800cc0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b790:	4b39      	ldr	r3, [pc, #228]	; (800b878 <xTaskResumeAll+0x11c>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	3b01      	subs	r3, #1
 800b796:	4a38      	ldr	r2, [pc, #224]	; (800b878 <xTaskResumeAll+0x11c>)
 800b798:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b79a:	4b37      	ldr	r3, [pc, #220]	; (800b878 <xTaskResumeAll+0x11c>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d162      	bne.n	800b868 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b7a2:	4b36      	ldr	r3, [pc, #216]	; (800b87c <xTaskResumeAll+0x120>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d05e      	beq.n	800b868 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b7aa:	e02f      	b.n	800b80c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7ac:	4b34      	ldr	r3, [pc, #208]	; (800b880 <xTaskResumeAll+0x124>)
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	3318      	adds	r3, #24
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f7fe fbfd 	bl	8009fb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	3304      	adds	r3, #4
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7fe fbf8 	bl	8009fb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7cc:	4b2d      	ldr	r3, [pc, #180]	; (800b884 <xTaskResumeAll+0x128>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d903      	bls.n	800b7dc <xTaskResumeAll+0x80>
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d8:	4a2a      	ldr	r2, [pc, #168]	; (800b884 <xTaskResumeAll+0x128>)
 800b7da:	6013      	str	r3, [r2, #0]
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7e0:	4613      	mov	r3, r2
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	4413      	add	r3, r2
 800b7e6:	009b      	lsls	r3, r3, #2
 800b7e8:	4a27      	ldr	r2, [pc, #156]	; (800b888 <xTaskResumeAll+0x12c>)
 800b7ea:	441a      	add	r2, r3
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	3304      	adds	r3, #4
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	4610      	mov	r0, r2
 800b7f4:	f7fe fb83 	bl	8009efe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7fc:	4b23      	ldr	r3, [pc, #140]	; (800b88c <xTaskResumeAll+0x130>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b802:	429a      	cmp	r2, r3
 800b804:	d302      	bcc.n	800b80c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800b806:	4b22      	ldr	r3, [pc, #136]	; (800b890 <xTaskResumeAll+0x134>)
 800b808:	2201      	movs	r2, #1
 800b80a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b80c:	4b1c      	ldr	r3, [pc, #112]	; (800b880 <xTaskResumeAll+0x124>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d1cb      	bne.n	800b7ac <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d001      	beq.n	800b81e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b81a:	f000 fb77 	bl	800bf0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b81e:	4b1d      	ldr	r3, [pc, #116]	; (800b894 <xTaskResumeAll+0x138>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d010      	beq.n	800b84c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b82a:	f000 f859 	bl	800b8e0 <xTaskIncrementTick>
 800b82e:	4603      	mov	r3, r0
 800b830:	2b00      	cmp	r3, #0
 800b832:	d002      	beq.n	800b83a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800b834:	4b16      	ldr	r3, [pc, #88]	; (800b890 <xTaskResumeAll+0x134>)
 800b836:	2201      	movs	r2, #1
 800b838:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	3b01      	subs	r3, #1
 800b83e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d1f1      	bne.n	800b82a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800b846:	4b13      	ldr	r3, [pc, #76]	; (800b894 <xTaskResumeAll+0x138>)
 800b848:	2200      	movs	r2, #0
 800b84a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b84c:	4b10      	ldr	r3, [pc, #64]	; (800b890 <xTaskResumeAll+0x134>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d009      	beq.n	800b868 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b854:	2301      	movs	r3, #1
 800b856:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b858:	4b0f      	ldr	r3, [pc, #60]	; (800b898 <xTaskResumeAll+0x13c>)
 800b85a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b85e:	601a      	str	r2, [r3, #0]
 800b860:	f3bf 8f4f 	dsb	sy
 800b864:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b868:	f001 fa04 	bl	800cc74 <vPortExitCritical>

	return xAlreadyYielded;
 800b86c:	68bb      	ldr	r3, [r7, #8]
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3710      	adds	r7, #16
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	20009b94 	.word	0x20009b94
 800b87c:	20009b6c 	.word	0x20009b6c
 800b880:	20009b2c 	.word	0x20009b2c
 800b884:	20009b74 	.word	0x20009b74
 800b888:	2000969c 	.word	0x2000969c
 800b88c:	20009698 	.word	0x20009698
 800b890:	20009b80 	.word	0x20009b80
 800b894:	20009b7c 	.word	0x20009b7c
 800b898:	e000ed04 	.word	0xe000ed04

0800b89c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b8a2:	4b05      	ldr	r3, [pc, #20]	; (800b8b8 <xTaskGetTickCount+0x1c>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b8a8:	687b      	ldr	r3, [r7, #4]
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	370c      	adds	r7, #12
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr
 800b8b6:	bf00      	nop
 800b8b8:	20009b70 	.word	0x20009b70

0800b8bc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b8c2:	f001 fa8b 	bl	800cddc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b8ca:	4b04      	ldr	r3, [pc, #16]	; (800b8dc <xTaskGetTickCountFromISR+0x20>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b8d0:	683b      	ldr	r3, [r7, #0]
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3708      	adds	r7, #8
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	20009b70 	.word	0x20009b70

0800b8e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b086      	sub	sp, #24
 800b8e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8ea:	4b50      	ldr	r3, [pc, #320]	; (800ba2c <xTaskIncrementTick+0x14c>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	f040 808b 	bne.w	800ba0a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b8f4:	4b4e      	ldr	r3, [pc, #312]	; (800ba30 <xTaskIncrementTick+0x150>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b8fc:	4a4c      	ldr	r2, [pc, #304]	; (800ba30 <xTaskIncrementTick+0x150>)
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d122      	bne.n	800b94e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800b908:	4b4a      	ldr	r3, [pc, #296]	; (800ba34 <xTaskIncrementTick+0x154>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d00c      	beq.n	800b92c <xTaskIncrementTick+0x4c>
	__asm volatile
 800b912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b916:	b672      	cpsid	i
 800b918:	f383 8811 	msr	BASEPRI, r3
 800b91c:	f3bf 8f6f 	isb	sy
 800b920:	f3bf 8f4f 	dsb	sy
 800b924:	b662      	cpsie	i
 800b926:	603b      	str	r3, [r7, #0]
}
 800b928:	bf00      	nop
 800b92a:	e7fe      	b.n	800b92a <xTaskIncrementTick+0x4a>
 800b92c:	4b41      	ldr	r3, [pc, #260]	; (800ba34 <xTaskIncrementTick+0x154>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	60fb      	str	r3, [r7, #12]
 800b932:	4b41      	ldr	r3, [pc, #260]	; (800ba38 <xTaskIncrementTick+0x158>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4a3f      	ldr	r2, [pc, #252]	; (800ba34 <xTaskIncrementTick+0x154>)
 800b938:	6013      	str	r3, [r2, #0]
 800b93a:	4a3f      	ldr	r2, [pc, #252]	; (800ba38 <xTaskIncrementTick+0x158>)
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	6013      	str	r3, [r2, #0]
 800b940:	4b3e      	ldr	r3, [pc, #248]	; (800ba3c <xTaskIncrementTick+0x15c>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	3301      	adds	r3, #1
 800b946:	4a3d      	ldr	r2, [pc, #244]	; (800ba3c <xTaskIncrementTick+0x15c>)
 800b948:	6013      	str	r3, [r2, #0]
 800b94a:	f000 fadf 	bl	800bf0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b94e:	4b3c      	ldr	r3, [pc, #240]	; (800ba40 <xTaskIncrementTick+0x160>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	693a      	ldr	r2, [r7, #16]
 800b954:	429a      	cmp	r2, r3
 800b956:	d349      	bcc.n	800b9ec <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b958:	4b36      	ldr	r3, [pc, #216]	; (800ba34 <xTaskIncrementTick+0x154>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d104      	bne.n	800b96c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b962:	4b37      	ldr	r3, [pc, #220]	; (800ba40 <xTaskIncrementTick+0x160>)
 800b964:	f04f 32ff 	mov.w	r2, #4294967295
 800b968:	601a      	str	r2, [r3, #0]
					break;
 800b96a:	e03f      	b.n	800b9ec <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b96c:	4b31      	ldr	r3, [pc, #196]	; (800ba34 <xTaskIncrementTick+0x154>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	68db      	ldr	r3, [r3, #12]
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b97c:	693a      	ldr	r2, [r7, #16]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	429a      	cmp	r2, r3
 800b982:	d203      	bcs.n	800b98c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b984:	4a2e      	ldr	r2, [pc, #184]	; (800ba40 <xTaskIncrementTick+0x160>)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b98a:	e02f      	b.n	800b9ec <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	3304      	adds	r3, #4
 800b990:	4618      	mov	r0, r3
 800b992:	f7fe fb11 	bl	8009fb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d004      	beq.n	800b9a8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	3318      	adds	r3, #24
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7fe fb08 	bl	8009fb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ac:	4b25      	ldr	r3, [pc, #148]	; (800ba44 <xTaskIncrementTick+0x164>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d903      	bls.n	800b9bc <xTaskIncrementTick+0xdc>
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b8:	4a22      	ldr	r2, [pc, #136]	; (800ba44 <xTaskIncrementTick+0x164>)
 800b9ba:	6013      	str	r3, [r2, #0]
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9c0:	4613      	mov	r3, r2
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	4413      	add	r3, r2
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	4a1f      	ldr	r2, [pc, #124]	; (800ba48 <xTaskIncrementTick+0x168>)
 800b9ca:	441a      	add	r2, r3
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	3304      	adds	r3, #4
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	4610      	mov	r0, r2
 800b9d4:	f7fe fa93 	bl	8009efe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9dc:	4b1b      	ldr	r3, [pc, #108]	; (800ba4c <xTaskIncrementTick+0x16c>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d3b8      	bcc.n	800b958 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9ea:	e7b5      	b.n	800b958 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b9ec:	4b17      	ldr	r3, [pc, #92]	; (800ba4c <xTaskIncrementTick+0x16c>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9f2:	4915      	ldr	r1, [pc, #84]	; (800ba48 <xTaskIncrementTick+0x168>)
 800b9f4:	4613      	mov	r3, r2
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	4413      	add	r3, r2
 800b9fa:	009b      	lsls	r3, r3, #2
 800b9fc:	440b      	add	r3, r1
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d907      	bls.n	800ba14 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800ba04:	2301      	movs	r3, #1
 800ba06:	617b      	str	r3, [r7, #20]
 800ba08:	e004      	b.n	800ba14 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ba0a:	4b11      	ldr	r3, [pc, #68]	; (800ba50 <xTaskIncrementTick+0x170>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	3301      	adds	r3, #1
 800ba10:	4a0f      	ldr	r2, [pc, #60]	; (800ba50 <xTaskIncrementTick+0x170>)
 800ba12:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ba14:	4b0f      	ldr	r3, [pc, #60]	; (800ba54 <xTaskIncrementTick+0x174>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d001      	beq.n	800ba20 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ba20:	697b      	ldr	r3, [r7, #20]
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3718      	adds	r7, #24
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	20009b94 	.word	0x20009b94
 800ba30:	20009b70 	.word	0x20009b70
 800ba34:	20009b24 	.word	0x20009b24
 800ba38:	20009b28 	.word	0x20009b28
 800ba3c:	20009b84 	.word	0x20009b84
 800ba40:	20009b8c 	.word	0x20009b8c
 800ba44:	20009b74 	.word	0x20009b74
 800ba48:	2000969c 	.word	0x2000969c
 800ba4c:	20009698 	.word	0x20009698
 800ba50:	20009b7c 	.word	0x20009b7c
 800ba54:	20009b80 	.word	0x20009b80

0800ba58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ba5e:	4b29      	ldr	r3, [pc, #164]	; (800bb04 <vTaskSwitchContext+0xac>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d003      	beq.n	800ba6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ba66:	4b28      	ldr	r3, [pc, #160]	; (800bb08 <vTaskSwitchContext+0xb0>)
 800ba68:	2201      	movs	r2, #1
 800ba6a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ba6c:	e043      	b.n	800baf6 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800ba6e:	4b26      	ldr	r3, [pc, #152]	; (800bb08 <vTaskSwitchContext+0xb0>)
 800ba70:	2200      	movs	r2, #0
 800ba72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba74:	4b25      	ldr	r3, [pc, #148]	; (800bb0c <vTaskSwitchContext+0xb4>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	60fb      	str	r3, [r7, #12]
 800ba7a:	e012      	b.n	800baa2 <vTaskSwitchContext+0x4a>
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d10c      	bne.n	800ba9c <vTaskSwitchContext+0x44>
	__asm volatile
 800ba82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba86:	b672      	cpsid	i
 800ba88:	f383 8811 	msr	BASEPRI, r3
 800ba8c:	f3bf 8f6f 	isb	sy
 800ba90:	f3bf 8f4f 	dsb	sy
 800ba94:	b662      	cpsie	i
 800ba96:	607b      	str	r3, [r7, #4]
}
 800ba98:	bf00      	nop
 800ba9a:	e7fe      	b.n	800ba9a <vTaskSwitchContext+0x42>
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	60fb      	str	r3, [r7, #12]
 800baa2:	491b      	ldr	r1, [pc, #108]	; (800bb10 <vTaskSwitchContext+0xb8>)
 800baa4:	68fa      	ldr	r2, [r7, #12]
 800baa6:	4613      	mov	r3, r2
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	4413      	add	r3, r2
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	440b      	add	r3, r1
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d0e2      	beq.n	800ba7c <vTaskSwitchContext+0x24>
 800bab6:	68fa      	ldr	r2, [r7, #12]
 800bab8:	4613      	mov	r3, r2
 800baba:	009b      	lsls	r3, r3, #2
 800babc:	4413      	add	r3, r2
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	4a13      	ldr	r2, [pc, #76]	; (800bb10 <vTaskSwitchContext+0xb8>)
 800bac2:	4413      	add	r3, r2
 800bac4:	60bb      	str	r3, [r7, #8]
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	685a      	ldr	r2, [r3, #4]
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	605a      	str	r2, [r3, #4]
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	685a      	ldr	r2, [r3, #4]
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	3308      	adds	r3, #8
 800bad8:	429a      	cmp	r2, r3
 800bada:	d104      	bne.n	800bae6 <vTaskSwitchContext+0x8e>
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	685a      	ldr	r2, [r3, #4]
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	605a      	str	r2, [r3, #4]
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	4a09      	ldr	r2, [pc, #36]	; (800bb14 <vTaskSwitchContext+0xbc>)
 800baee:	6013      	str	r3, [r2, #0]
 800baf0:	4a06      	ldr	r2, [pc, #24]	; (800bb0c <vTaskSwitchContext+0xb4>)
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	6013      	str	r3, [r2, #0]
}
 800baf6:	bf00      	nop
 800baf8:	3714      	adds	r7, #20
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr
 800bb02:	bf00      	nop
 800bb04:	20009b94 	.word	0x20009b94
 800bb08:	20009b80 	.word	0x20009b80
 800bb0c:	20009b74 	.word	0x20009b74
 800bb10:	2000969c 	.word	0x2000969c
 800bb14:	20009698 	.word	0x20009698

0800bb18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d10c      	bne.n	800bb42 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800bb28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2c:	b672      	cpsid	i
 800bb2e:	f383 8811 	msr	BASEPRI, r3
 800bb32:	f3bf 8f6f 	isb	sy
 800bb36:	f3bf 8f4f 	dsb	sy
 800bb3a:	b662      	cpsie	i
 800bb3c:	60fb      	str	r3, [r7, #12]
}
 800bb3e:	bf00      	nop
 800bb40:	e7fe      	b.n	800bb40 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb42:	4b07      	ldr	r3, [pc, #28]	; (800bb60 <vTaskPlaceOnEventList+0x48>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	3318      	adds	r3, #24
 800bb48:	4619      	mov	r1, r3
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f7fe f9fb 	bl	8009f46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bb50:	2101      	movs	r1, #1
 800bb52:	6838      	ldr	r0, [r7, #0]
 800bb54:	f000 fb9c 	bl	800c290 <prvAddCurrentTaskToDelayedList>
}
 800bb58:	bf00      	nop
 800bb5a:	3710      	adds	r7, #16
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}
 800bb60:	20009698 	.word	0x20009698

0800bb64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b086      	sub	sp, #24
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d10c      	bne.n	800bb90 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800bb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7a:	b672      	cpsid	i
 800bb7c:	f383 8811 	msr	BASEPRI, r3
 800bb80:	f3bf 8f6f 	isb	sy
 800bb84:	f3bf 8f4f 	dsb	sy
 800bb88:	b662      	cpsie	i
 800bb8a:	617b      	str	r3, [r7, #20]
}
 800bb8c:	bf00      	nop
 800bb8e:	e7fe      	b.n	800bb8e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb90:	4b0a      	ldr	r3, [pc, #40]	; (800bbbc <vTaskPlaceOnEventListRestricted+0x58>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	3318      	adds	r3, #24
 800bb96:	4619      	mov	r1, r3
 800bb98:	68f8      	ldr	r0, [r7, #12]
 800bb9a:	f7fe f9b0 	bl	8009efe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d002      	beq.n	800bbaa <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800bba4:	f04f 33ff 	mov.w	r3, #4294967295
 800bba8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bbaa:	6879      	ldr	r1, [r7, #4]
 800bbac:	68b8      	ldr	r0, [r7, #8]
 800bbae:	f000 fb6f 	bl	800c290 <prvAddCurrentTaskToDelayedList>
	}
 800bbb2:	bf00      	nop
 800bbb4:	3718      	adds	r7, #24
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	20009698 	.word	0x20009698

0800bbc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b086      	sub	sp, #24
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	68db      	ldr	r3, [r3, #12]
 800bbcc:	68db      	ldr	r3, [r3, #12]
 800bbce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d10c      	bne.n	800bbf0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800bbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbda:	b672      	cpsid	i
 800bbdc:	f383 8811 	msr	BASEPRI, r3
 800bbe0:	f3bf 8f6f 	isb	sy
 800bbe4:	f3bf 8f4f 	dsb	sy
 800bbe8:	b662      	cpsie	i
 800bbea:	60fb      	str	r3, [r7, #12]
}
 800bbec:	bf00      	nop
 800bbee:	e7fe      	b.n	800bbee <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	3318      	adds	r3, #24
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7fe f9df 	bl	8009fb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbfa:	4b1e      	ldr	r3, [pc, #120]	; (800bc74 <xTaskRemoveFromEventList+0xb4>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d11d      	bne.n	800bc3e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	3304      	adds	r3, #4
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7fe f9d6 	bl	8009fb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc10:	4b19      	ldr	r3, [pc, #100]	; (800bc78 <xTaskRemoveFromEventList+0xb8>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d903      	bls.n	800bc20 <xTaskRemoveFromEventList+0x60>
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc1c:	4a16      	ldr	r2, [pc, #88]	; (800bc78 <xTaskRemoveFromEventList+0xb8>)
 800bc1e:	6013      	str	r3, [r2, #0]
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc24:	4613      	mov	r3, r2
 800bc26:	009b      	lsls	r3, r3, #2
 800bc28:	4413      	add	r3, r2
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	4a13      	ldr	r2, [pc, #76]	; (800bc7c <xTaskRemoveFromEventList+0xbc>)
 800bc2e:	441a      	add	r2, r3
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	3304      	adds	r3, #4
 800bc34:	4619      	mov	r1, r3
 800bc36:	4610      	mov	r0, r2
 800bc38:	f7fe f961 	bl	8009efe <vListInsertEnd>
 800bc3c:	e005      	b.n	800bc4a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	3318      	adds	r3, #24
 800bc42:	4619      	mov	r1, r3
 800bc44:	480e      	ldr	r0, [pc, #56]	; (800bc80 <xTaskRemoveFromEventList+0xc0>)
 800bc46:	f7fe f95a 	bl	8009efe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc4e:	4b0d      	ldr	r3, [pc, #52]	; (800bc84 <xTaskRemoveFromEventList+0xc4>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d905      	bls.n	800bc64 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bc5c:	4b0a      	ldr	r3, [pc, #40]	; (800bc88 <xTaskRemoveFromEventList+0xc8>)
 800bc5e:	2201      	movs	r2, #1
 800bc60:	601a      	str	r2, [r3, #0]
 800bc62:	e001      	b.n	800bc68 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800bc64:	2300      	movs	r3, #0
 800bc66:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bc68:	697b      	ldr	r3, [r7, #20]
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3718      	adds	r7, #24
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	20009b94 	.word	0x20009b94
 800bc78:	20009b74 	.word	0x20009b74
 800bc7c:	2000969c 	.word	0x2000969c
 800bc80:	20009b2c 	.word	0x20009b2c
 800bc84:	20009698 	.word	0x20009698
 800bc88:	20009b80 	.word	0x20009b80

0800bc8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b083      	sub	sp, #12
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc94:	4b06      	ldr	r3, [pc, #24]	; (800bcb0 <vTaskInternalSetTimeOutState+0x24>)
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc9c:	4b05      	ldr	r3, [pc, #20]	; (800bcb4 <vTaskInternalSetTimeOutState+0x28>)
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	605a      	str	r2, [r3, #4]
}
 800bca4:	bf00      	nop
 800bca6:	370c      	adds	r7, #12
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr
 800bcb0:	20009b84 	.word	0x20009b84
 800bcb4:	20009b70 	.word	0x20009b70

0800bcb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b088      	sub	sp, #32
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d10c      	bne.n	800bce2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800bcc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bccc:	b672      	cpsid	i
 800bcce:	f383 8811 	msr	BASEPRI, r3
 800bcd2:	f3bf 8f6f 	isb	sy
 800bcd6:	f3bf 8f4f 	dsb	sy
 800bcda:	b662      	cpsie	i
 800bcdc:	613b      	str	r3, [r7, #16]
}
 800bcde:	bf00      	nop
 800bce0:	e7fe      	b.n	800bce0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d10c      	bne.n	800bd02 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800bce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcec:	b672      	cpsid	i
 800bcee:	f383 8811 	msr	BASEPRI, r3
 800bcf2:	f3bf 8f6f 	isb	sy
 800bcf6:	f3bf 8f4f 	dsb	sy
 800bcfa:	b662      	cpsie	i
 800bcfc:	60fb      	str	r3, [r7, #12]
}
 800bcfe:	bf00      	nop
 800bd00:	e7fe      	b.n	800bd00 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800bd02:	f000 ff83 	bl	800cc0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bd06:	4b1d      	ldr	r3, [pc, #116]	; (800bd7c <xTaskCheckForTimeOut+0xc4>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	69ba      	ldr	r2, [r7, #24]
 800bd12:	1ad3      	subs	r3, r2, r3
 800bd14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd1e:	d102      	bne.n	800bd26 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bd20:	2300      	movs	r3, #0
 800bd22:	61fb      	str	r3, [r7, #28]
 800bd24:	e023      	b.n	800bd6e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681a      	ldr	r2, [r3, #0]
 800bd2a:	4b15      	ldr	r3, [pc, #84]	; (800bd80 <xTaskCheckForTimeOut+0xc8>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d007      	beq.n	800bd42 <xTaskCheckForTimeOut+0x8a>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	69ba      	ldr	r2, [r7, #24]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d302      	bcc.n	800bd42 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	61fb      	str	r3, [r7, #28]
 800bd40:	e015      	b.n	800bd6e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	697a      	ldr	r2, [r7, #20]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d20b      	bcs.n	800bd64 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	681a      	ldr	r2, [r3, #0]
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	1ad2      	subs	r2, r2, r3
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f7ff ff97 	bl	800bc8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	61fb      	str	r3, [r7, #28]
 800bd62:	e004      	b.n	800bd6e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	2200      	movs	r2, #0
 800bd68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bd6e:	f000 ff81 	bl	800cc74 <vPortExitCritical>

	return xReturn;
 800bd72:	69fb      	ldr	r3, [r7, #28]
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3720      	adds	r7, #32
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}
 800bd7c:	20009b70 	.word	0x20009b70
 800bd80:	20009b84 	.word	0x20009b84

0800bd84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bd84:	b480      	push	{r7}
 800bd86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bd88:	4b03      	ldr	r3, [pc, #12]	; (800bd98 <vTaskMissedYield+0x14>)
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	601a      	str	r2, [r3, #0]
}
 800bd8e:	bf00      	nop
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr
 800bd98:	20009b80 	.word	0x20009b80

0800bd9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bda4:	f000 f852 	bl	800be4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bda8:	4b06      	ldr	r3, [pc, #24]	; (800bdc4 <prvIdleTask+0x28>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d9f9      	bls.n	800bda4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bdb0:	4b05      	ldr	r3, [pc, #20]	; (800bdc8 <prvIdleTask+0x2c>)
 800bdb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdb6:	601a      	str	r2, [r3, #0]
 800bdb8:	f3bf 8f4f 	dsb	sy
 800bdbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bdc0:	e7f0      	b.n	800bda4 <prvIdleTask+0x8>
 800bdc2:	bf00      	nop
 800bdc4:	2000969c 	.word	0x2000969c
 800bdc8:	e000ed04 	.word	0xe000ed04

0800bdcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	607b      	str	r3, [r7, #4]
 800bdd6:	e00c      	b.n	800bdf2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bdd8:	687a      	ldr	r2, [r7, #4]
 800bdda:	4613      	mov	r3, r2
 800bddc:	009b      	lsls	r3, r3, #2
 800bdde:	4413      	add	r3, r2
 800bde0:	009b      	lsls	r3, r3, #2
 800bde2:	4a12      	ldr	r2, [pc, #72]	; (800be2c <prvInitialiseTaskLists+0x60>)
 800bde4:	4413      	add	r3, r2
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7fe f85c 	bl	8009ea4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	607b      	str	r3, [r7, #4]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2b37      	cmp	r3, #55	; 0x37
 800bdf6:	d9ef      	bls.n	800bdd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bdf8:	480d      	ldr	r0, [pc, #52]	; (800be30 <prvInitialiseTaskLists+0x64>)
 800bdfa:	f7fe f853 	bl	8009ea4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bdfe:	480d      	ldr	r0, [pc, #52]	; (800be34 <prvInitialiseTaskLists+0x68>)
 800be00:	f7fe f850 	bl	8009ea4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800be04:	480c      	ldr	r0, [pc, #48]	; (800be38 <prvInitialiseTaskLists+0x6c>)
 800be06:	f7fe f84d 	bl	8009ea4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800be0a:	480c      	ldr	r0, [pc, #48]	; (800be3c <prvInitialiseTaskLists+0x70>)
 800be0c:	f7fe f84a 	bl	8009ea4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800be10:	480b      	ldr	r0, [pc, #44]	; (800be40 <prvInitialiseTaskLists+0x74>)
 800be12:	f7fe f847 	bl	8009ea4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800be16:	4b0b      	ldr	r3, [pc, #44]	; (800be44 <prvInitialiseTaskLists+0x78>)
 800be18:	4a05      	ldr	r2, [pc, #20]	; (800be30 <prvInitialiseTaskLists+0x64>)
 800be1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800be1c:	4b0a      	ldr	r3, [pc, #40]	; (800be48 <prvInitialiseTaskLists+0x7c>)
 800be1e:	4a05      	ldr	r2, [pc, #20]	; (800be34 <prvInitialiseTaskLists+0x68>)
 800be20:	601a      	str	r2, [r3, #0]
}
 800be22:	bf00      	nop
 800be24:	3708      	adds	r7, #8
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}
 800be2a:	bf00      	nop
 800be2c:	2000969c 	.word	0x2000969c
 800be30:	20009afc 	.word	0x20009afc
 800be34:	20009b10 	.word	0x20009b10
 800be38:	20009b2c 	.word	0x20009b2c
 800be3c:	20009b40 	.word	0x20009b40
 800be40:	20009b58 	.word	0x20009b58
 800be44:	20009b24 	.word	0x20009b24
 800be48:	20009b28 	.word	0x20009b28

0800be4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b082      	sub	sp, #8
 800be50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be52:	e019      	b.n	800be88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800be54:	f000 feda 	bl	800cc0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be58:	4b10      	ldr	r3, [pc, #64]	; (800be9c <prvCheckTasksWaitingTermination+0x50>)
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	68db      	ldr	r3, [r3, #12]
 800be5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	3304      	adds	r3, #4
 800be64:	4618      	mov	r0, r3
 800be66:	f7fe f8a7 	bl	8009fb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800be6a:	4b0d      	ldr	r3, [pc, #52]	; (800bea0 <prvCheckTasksWaitingTermination+0x54>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	3b01      	subs	r3, #1
 800be70:	4a0b      	ldr	r2, [pc, #44]	; (800bea0 <prvCheckTasksWaitingTermination+0x54>)
 800be72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800be74:	4b0b      	ldr	r3, [pc, #44]	; (800bea4 <prvCheckTasksWaitingTermination+0x58>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	3b01      	subs	r3, #1
 800be7a:	4a0a      	ldr	r2, [pc, #40]	; (800bea4 <prvCheckTasksWaitingTermination+0x58>)
 800be7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800be7e:	f000 fef9 	bl	800cc74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 f810 	bl	800bea8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be88:	4b06      	ldr	r3, [pc, #24]	; (800bea4 <prvCheckTasksWaitingTermination+0x58>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d1e1      	bne.n	800be54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800be90:	bf00      	nop
 800be92:	bf00      	nop
 800be94:	3708      	adds	r7, #8
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	20009b40 	.word	0x20009b40
 800bea0:	20009b6c 	.word	0x20009b6c
 800bea4:	20009b54 	.word	0x20009b54

0800bea8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d108      	bne.n	800becc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bebe:	4618      	mov	r0, r3
 800bec0:	f001 f89a 	bl	800cff8 <vPortFree>
				vPortFree( pxTCB );
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f001 f897 	bl	800cff8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800beca:	e01a      	b.n	800bf02 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	d103      	bne.n	800bede <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f001 f88e 	bl	800cff8 <vPortFree>
	}
 800bedc:	e011      	b.n	800bf02 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bee4:	2b02      	cmp	r3, #2
 800bee6:	d00c      	beq.n	800bf02 <prvDeleteTCB+0x5a>
	__asm volatile
 800bee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beec:	b672      	cpsid	i
 800beee:	f383 8811 	msr	BASEPRI, r3
 800bef2:	f3bf 8f6f 	isb	sy
 800bef6:	f3bf 8f4f 	dsb	sy
 800befa:	b662      	cpsie	i
 800befc:	60fb      	str	r3, [r7, #12]
}
 800befe:	bf00      	nop
 800bf00:	e7fe      	b.n	800bf00 <prvDeleteTCB+0x58>
	}
 800bf02:	bf00      	nop
 800bf04:	3710      	adds	r7, #16
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
	...

0800bf0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf12:	4b0c      	ldr	r3, [pc, #48]	; (800bf44 <prvResetNextTaskUnblockTime+0x38>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d104      	bne.n	800bf26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bf1c:	4b0a      	ldr	r3, [pc, #40]	; (800bf48 <prvResetNextTaskUnblockTime+0x3c>)
 800bf1e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bf24:	e008      	b.n	800bf38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf26:	4b07      	ldr	r3, [pc, #28]	; (800bf44 <prvResetNextTaskUnblockTime+0x38>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	68db      	ldr	r3, [r3, #12]
 800bf2c:	68db      	ldr	r3, [r3, #12]
 800bf2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	4a04      	ldr	r2, [pc, #16]	; (800bf48 <prvResetNextTaskUnblockTime+0x3c>)
 800bf36:	6013      	str	r3, [r2, #0]
}
 800bf38:	bf00      	nop
 800bf3a:	370c      	adds	r7, #12
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr
 800bf44:	20009b24 	.word	0x20009b24
 800bf48:	20009b8c 	.word	0x20009b8c

0800bf4c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b083      	sub	sp, #12
 800bf50:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800bf52:	4b05      	ldr	r3, [pc, #20]	; (800bf68 <xTaskGetCurrentTaskHandle+0x1c>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	607b      	str	r3, [r7, #4]

		return xReturn;
 800bf58:	687b      	ldr	r3, [r7, #4]
	}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	370c      	adds	r7, #12
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr
 800bf66:	bf00      	nop
 800bf68:	20009698 	.word	0x20009698

0800bf6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b083      	sub	sp, #12
 800bf70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bf72:	4b0b      	ldr	r3, [pc, #44]	; (800bfa0 <xTaskGetSchedulerState+0x34>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d102      	bne.n	800bf80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	607b      	str	r3, [r7, #4]
 800bf7e:	e008      	b.n	800bf92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf80:	4b08      	ldr	r3, [pc, #32]	; (800bfa4 <xTaskGetSchedulerState+0x38>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d102      	bne.n	800bf8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bf88:	2302      	movs	r3, #2
 800bf8a:	607b      	str	r3, [r7, #4]
 800bf8c:	e001      	b.n	800bf92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bf92:	687b      	ldr	r3, [r7, #4]
	}
 800bf94:	4618      	mov	r0, r3
 800bf96:	370c      	adds	r7, #12
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr
 800bfa0:	20009b78 	.word	0x20009b78
 800bfa4:	20009b94 	.word	0x20009b94

0800bfa8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d051      	beq.n	800c062 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfc2:	4b2a      	ldr	r3, [pc, #168]	; (800c06c <xTaskPriorityInherit+0xc4>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d241      	bcs.n	800c050 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	699b      	ldr	r3, [r3, #24]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	db06      	blt.n	800bfe2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfd4:	4b25      	ldr	r3, [pc, #148]	; (800c06c <xTaskPriorityInherit+0xc4>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	6959      	ldr	r1, [r3, #20]
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfea:	4613      	mov	r3, r2
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	4413      	add	r3, r2
 800bff0:	009b      	lsls	r3, r3, #2
 800bff2:	4a1f      	ldr	r2, [pc, #124]	; (800c070 <xTaskPriorityInherit+0xc8>)
 800bff4:	4413      	add	r3, r2
 800bff6:	4299      	cmp	r1, r3
 800bff8:	d122      	bne.n	800c040 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	3304      	adds	r3, #4
 800bffe:	4618      	mov	r0, r3
 800c000:	f7fd ffda 	bl	8009fb8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c004:	4b19      	ldr	r3, [pc, #100]	; (800c06c <xTaskPriorityInherit+0xc4>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c012:	4b18      	ldr	r3, [pc, #96]	; (800c074 <xTaskPriorityInherit+0xcc>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	429a      	cmp	r2, r3
 800c018:	d903      	bls.n	800c022 <xTaskPriorityInherit+0x7a>
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c01e:	4a15      	ldr	r2, [pc, #84]	; (800c074 <xTaskPriorityInherit+0xcc>)
 800c020:	6013      	str	r3, [r2, #0]
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c026:	4613      	mov	r3, r2
 800c028:	009b      	lsls	r3, r3, #2
 800c02a:	4413      	add	r3, r2
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	4a10      	ldr	r2, [pc, #64]	; (800c070 <xTaskPriorityInherit+0xc8>)
 800c030:	441a      	add	r2, r3
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	3304      	adds	r3, #4
 800c036:	4619      	mov	r1, r3
 800c038:	4610      	mov	r0, r2
 800c03a:	f7fd ff60 	bl	8009efe <vListInsertEnd>
 800c03e:	e004      	b.n	800c04a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c040:	4b0a      	ldr	r3, [pc, #40]	; (800c06c <xTaskPriorityInherit+0xc4>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c04a:	2301      	movs	r3, #1
 800c04c:	60fb      	str	r3, [r7, #12]
 800c04e:	e008      	b.n	800c062 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c054:	4b05      	ldr	r3, [pc, #20]	; (800c06c <xTaskPriorityInherit+0xc4>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d201      	bcs.n	800c062 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c05e:	2301      	movs	r3, #1
 800c060:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c062:	68fb      	ldr	r3, [r7, #12]
	}
 800c064:	4618      	mov	r0, r3
 800c066:	3710      	adds	r7, #16
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	20009698 	.word	0x20009698
 800c070:	2000969c 	.word	0x2000969c
 800c074:	20009b74 	.word	0x20009b74

0800c078 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b086      	sub	sp, #24
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c084:	2300      	movs	r3, #0
 800c086:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d05a      	beq.n	800c144 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c08e:	4b30      	ldr	r3, [pc, #192]	; (800c150 <xTaskPriorityDisinherit+0xd8>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	693a      	ldr	r2, [r7, #16]
 800c094:	429a      	cmp	r2, r3
 800c096:	d00c      	beq.n	800c0b2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800c098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c09c:	b672      	cpsid	i
 800c09e:	f383 8811 	msr	BASEPRI, r3
 800c0a2:	f3bf 8f6f 	isb	sy
 800c0a6:	f3bf 8f4f 	dsb	sy
 800c0aa:	b662      	cpsie	i
 800c0ac:	60fb      	str	r3, [r7, #12]
}
 800c0ae:	bf00      	nop
 800c0b0:	e7fe      	b.n	800c0b0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d10c      	bne.n	800c0d4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800c0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0be:	b672      	cpsid	i
 800c0c0:	f383 8811 	msr	BASEPRI, r3
 800c0c4:	f3bf 8f6f 	isb	sy
 800c0c8:	f3bf 8f4f 	dsb	sy
 800c0cc:	b662      	cpsie	i
 800c0ce:	60bb      	str	r3, [r7, #8]
}
 800c0d0:	bf00      	nop
 800c0d2:	e7fe      	b.n	800c0d2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0d8:	1e5a      	subs	r2, r3, #1
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d02c      	beq.n	800c144 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d128      	bne.n	800c144 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	3304      	adds	r3, #4
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f7fd ff5e 	bl	8009fb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c108:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c114:	4b0f      	ldr	r3, [pc, #60]	; (800c154 <xTaskPriorityDisinherit+0xdc>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	429a      	cmp	r2, r3
 800c11a:	d903      	bls.n	800c124 <xTaskPriorityDisinherit+0xac>
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c120:	4a0c      	ldr	r2, [pc, #48]	; (800c154 <xTaskPriorityDisinherit+0xdc>)
 800c122:	6013      	str	r3, [r2, #0]
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c128:	4613      	mov	r3, r2
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	4413      	add	r3, r2
 800c12e:	009b      	lsls	r3, r3, #2
 800c130:	4a09      	ldr	r2, [pc, #36]	; (800c158 <xTaskPriorityDisinherit+0xe0>)
 800c132:	441a      	add	r2, r3
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	3304      	adds	r3, #4
 800c138:	4619      	mov	r1, r3
 800c13a:	4610      	mov	r0, r2
 800c13c:	f7fd fedf 	bl	8009efe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c140:	2301      	movs	r3, #1
 800c142:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c144:	697b      	ldr	r3, [r7, #20]
	}
 800c146:	4618      	mov	r0, r3
 800c148:	3718      	adds	r7, #24
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	bf00      	nop
 800c150:	20009698 	.word	0x20009698
 800c154:	20009b74 	.word	0x20009b74
 800c158:	2000969c 	.word	0x2000969c

0800c15c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b088      	sub	sp, #32
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c16a:	2301      	movs	r3, #1
 800c16c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d06e      	beq.n	800c252 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d10c      	bne.n	800c196 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800c17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c180:	b672      	cpsid	i
 800c182:	f383 8811 	msr	BASEPRI, r3
 800c186:	f3bf 8f6f 	isb	sy
 800c18a:	f3bf 8f4f 	dsb	sy
 800c18e:	b662      	cpsie	i
 800c190:	60fb      	str	r3, [r7, #12]
}
 800c192:	bf00      	nop
 800c194:	e7fe      	b.n	800c194 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c196:	69bb      	ldr	r3, [r7, #24]
 800c198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c19a:	683a      	ldr	r2, [r7, #0]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d902      	bls.n	800c1a6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	61fb      	str	r3, [r7, #28]
 800c1a4:	e002      	b.n	800c1ac <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c1a6:	69bb      	ldr	r3, [r7, #24]
 800c1a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1aa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c1ac:	69bb      	ldr	r3, [r7, #24]
 800c1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b0:	69fa      	ldr	r2, [r7, #28]
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d04d      	beq.n	800c252 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1ba:	697a      	ldr	r2, [r7, #20]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d148      	bne.n	800c252 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c1c0:	4b26      	ldr	r3, [pc, #152]	; (800c25c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	69ba      	ldr	r2, [r7, #24]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d10c      	bne.n	800c1e4 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800c1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ce:	b672      	cpsid	i
 800c1d0:	f383 8811 	msr	BASEPRI, r3
 800c1d4:	f3bf 8f6f 	isb	sy
 800c1d8:	f3bf 8f4f 	dsb	sy
 800c1dc:	b662      	cpsie	i
 800c1de:	60bb      	str	r3, [r7, #8]
}
 800c1e0:	bf00      	nop
 800c1e2:	e7fe      	b.n	800c1e2 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c1e4:	69bb      	ldr	r3, [r7, #24]
 800c1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c1ea:	69bb      	ldr	r3, [r7, #24]
 800c1ec:	69fa      	ldr	r2, [r7, #28]
 800c1ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c1f0:	69bb      	ldr	r3, [r7, #24]
 800c1f2:	699b      	ldr	r3, [r3, #24]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	db04      	blt.n	800c202 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1f8:	69fb      	ldr	r3, [r7, #28]
 800c1fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c1fe:	69bb      	ldr	r3, [r7, #24]
 800c200:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c202:	69bb      	ldr	r3, [r7, #24]
 800c204:	6959      	ldr	r1, [r3, #20]
 800c206:	693a      	ldr	r2, [r7, #16]
 800c208:	4613      	mov	r3, r2
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	4413      	add	r3, r2
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	4a13      	ldr	r2, [pc, #76]	; (800c260 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c212:	4413      	add	r3, r2
 800c214:	4299      	cmp	r1, r3
 800c216:	d11c      	bne.n	800c252 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c218:	69bb      	ldr	r3, [r7, #24]
 800c21a:	3304      	adds	r3, #4
 800c21c:	4618      	mov	r0, r3
 800c21e:	f7fd fecb 	bl	8009fb8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c222:	69bb      	ldr	r3, [r7, #24]
 800c224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c226:	4b0f      	ldr	r3, [pc, #60]	; (800c264 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d903      	bls.n	800c236 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800c22e:	69bb      	ldr	r3, [r7, #24]
 800c230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c232:	4a0c      	ldr	r2, [pc, #48]	; (800c264 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800c234:	6013      	str	r3, [r2, #0]
 800c236:	69bb      	ldr	r3, [r7, #24]
 800c238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c23a:	4613      	mov	r3, r2
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	4413      	add	r3, r2
 800c240:	009b      	lsls	r3, r3, #2
 800c242:	4a07      	ldr	r2, [pc, #28]	; (800c260 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c244:	441a      	add	r2, r3
 800c246:	69bb      	ldr	r3, [r7, #24]
 800c248:	3304      	adds	r3, #4
 800c24a:	4619      	mov	r1, r3
 800c24c:	4610      	mov	r0, r2
 800c24e:	f7fd fe56 	bl	8009efe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c252:	bf00      	nop
 800c254:	3720      	adds	r7, #32
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
 800c25a:	bf00      	nop
 800c25c:	20009698 	.word	0x20009698
 800c260:	2000969c 	.word	0x2000969c
 800c264:	20009b74 	.word	0x20009b74

0800c268 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c268:	b480      	push	{r7}
 800c26a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c26c:	4b07      	ldr	r3, [pc, #28]	; (800c28c <pvTaskIncrementMutexHeldCount+0x24>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d004      	beq.n	800c27e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c274:	4b05      	ldr	r3, [pc, #20]	; (800c28c <pvTaskIncrementMutexHeldCount+0x24>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c27a:	3201      	adds	r2, #1
 800c27c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c27e:	4b03      	ldr	r3, [pc, #12]	; (800c28c <pvTaskIncrementMutexHeldCount+0x24>)
 800c280:	681b      	ldr	r3, [r3, #0]
	}
 800c282:	4618      	mov	r0, r3
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr
 800c28c:	20009698 	.word	0x20009698

0800c290 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c29a:	4b21      	ldr	r3, [pc, #132]	; (800c320 <prvAddCurrentTaskToDelayedList+0x90>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2a0:	4b20      	ldr	r3, [pc, #128]	; (800c324 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	3304      	adds	r3, #4
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7fd fe86 	bl	8009fb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2b2:	d10a      	bne.n	800c2ca <prvAddCurrentTaskToDelayedList+0x3a>
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d007      	beq.n	800c2ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2ba:	4b1a      	ldr	r3, [pc, #104]	; (800c324 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	3304      	adds	r3, #4
 800c2c0:	4619      	mov	r1, r3
 800c2c2:	4819      	ldr	r0, [pc, #100]	; (800c328 <prvAddCurrentTaskToDelayedList+0x98>)
 800c2c4:	f7fd fe1b 	bl	8009efe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c2c8:	e026      	b.n	800c318 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c2ca:	68fa      	ldr	r2, [r7, #12]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	4413      	add	r3, r2
 800c2d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c2d2:	4b14      	ldr	r3, [pc, #80]	; (800c324 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	68ba      	ldr	r2, [r7, #8]
 800c2d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c2da:	68ba      	ldr	r2, [r7, #8]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d209      	bcs.n	800c2f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2e2:	4b12      	ldr	r3, [pc, #72]	; (800c32c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c2e4:	681a      	ldr	r2, [r3, #0]
 800c2e6:	4b0f      	ldr	r3, [pc, #60]	; (800c324 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	3304      	adds	r3, #4
 800c2ec:	4619      	mov	r1, r3
 800c2ee:	4610      	mov	r0, r2
 800c2f0:	f7fd fe29 	bl	8009f46 <vListInsert>
}
 800c2f4:	e010      	b.n	800c318 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2f6:	4b0e      	ldr	r3, [pc, #56]	; (800c330 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c2f8:	681a      	ldr	r2, [r3, #0]
 800c2fa:	4b0a      	ldr	r3, [pc, #40]	; (800c324 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	3304      	adds	r3, #4
 800c300:	4619      	mov	r1, r3
 800c302:	4610      	mov	r0, r2
 800c304:	f7fd fe1f 	bl	8009f46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c308:	4b0a      	ldr	r3, [pc, #40]	; (800c334 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	68ba      	ldr	r2, [r7, #8]
 800c30e:	429a      	cmp	r2, r3
 800c310:	d202      	bcs.n	800c318 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c312:	4a08      	ldr	r2, [pc, #32]	; (800c334 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	6013      	str	r3, [r2, #0]
}
 800c318:	bf00      	nop
 800c31a:	3710      	adds	r7, #16
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	20009b70 	.word	0x20009b70
 800c324:	20009698 	.word	0x20009698
 800c328:	20009b58 	.word	0x20009b58
 800c32c:	20009b28 	.word	0x20009b28
 800c330:	20009b24 	.word	0x20009b24
 800c334:	20009b8c 	.word	0x20009b8c

0800c338 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b08a      	sub	sp, #40	; 0x28
 800c33c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c33e:	2300      	movs	r3, #0
 800c340:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c342:	f000 fb15 	bl	800c970 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c346:	4b1d      	ldr	r3, [pc, #116]	; (800c3bc <xTimerCreateTimerTask+0x84>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d021      	beq.n	800c392 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c34e:	2300      	movs	r3, #0
 800c350:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c352:	2300      	movs	r3, #0
 800c354:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c356:	1d3a      	adds	r2, r7, #4
 800c358:	f107 0108 	add.w	r1, r7, #8
 800c35c:	f107 030c 	add.w	r3, r7, #12
 800c360:	4618      	mov	r0, r3
 800c362:	f7fd fd85 	bl	8009e70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c366:	6879      	ldr	r1, [r7, #4]
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	68fa      	ldr	r2, [r7, #12]
 800c36c:	9202      	str	r2, [sp, #8]
 800c36e:	9301      	str	r3, [sp, #4]
 800c370:	2302      	movs	r3, #2
 800c372:	9300      	str	r3, [sp, #0]
 800c374:	2300      	movs	r3, #0
 800c376:	460a      	mov	r2, r1
 800c378:	4911      	ldr	r1, [pc, #68]	; (800c3c0 <xTimerCreateTimerTask+0x88>)
 800c37a:	4812      	ldr	r0, [pc, #72]	; (800c3c4 <xTimerCreateTimerTask+0x8c>)
 800c37c:	f7fe ff96 	bl	800b2ac <xTaskCreateStatic>
 800c380:	4603      	mov	r3, r0
 800c382:	4a11      	ldr	r2, [pc, #68]	; (800c3c8 <xTimerCreateTimerTask+0x90>)
 800c384:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c386:	4b10      	ldr	r3, [pc, #64]	; (800c3c8 <xTimerCreateTimerTask+0x90>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d001      	beq.n	800c392 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c38e:	2301      	movs	r3, #1
 800c390:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d10c      	bne.n	800c3b2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800c398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c39c:	b672      	cpsid	i
 800c39e:	f383 8811 	msr	BASEPRI, r3
 800c3a2:	f3bf 8f6f 	isb	sy
 800c3a6:	f3bf 8f4f 	dsb	sy
 800c3aa:	b662      	cpsie	i
 800c3ac:	613b      	str	r3, [r7, #16]
}
 800c3ae:	bf00      	nop
 800c3b0:	e7fe      	b.n	800c3b0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800c3b2:	697b      	ldr	r3, [r7, #20]
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3718      	adds	r7, #24
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	20009bc8 	.word	0x20009bc8
 800c3c0:	0801cd04 	.word	0x0801cd04
 800c3c4:	0800c509 	.word	0x0800c509
 800c3c8:	20009bcc 	.word	0x20009bcc

0800c3cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b08a      	sub	sp, #40	; 0x28
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	60b9      	str	r1, [r7, #8]
 800c3d6:	607a      	str	r2, [r7, #4]
 800c3d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d10c      	bne.n	800c3fe <xTimerGenericCommand+0x32>
	__asm volatile
 800c3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e8:	b672      	cpsid	i
 800c3ea:	f383 8811 	msr	BASEPRI, r3
 800c3ee:	f3bf 8f6f 	isb	sy
 800c3f2:	f3bf 8f4f 	dsb	sy
 800c3f6:	b662      	cpsie	i
 800c3f8:	623b      	str	r3, [r7, #32]
}
 800c3fa:	bf00      	nop
 800c3fc:	e7fe      	b.n	800c3fc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c3fe:	4b1a      	ldr	r3, [pc, #104]	; (800c468 <xTimerGenericCommand+0x9c>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d02a      	beq.n	800c45c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	2b05      	cmp	r3, #5
 800c416:	dc18      	bgt.n	800c44a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c418:	f7ff fda8 	bl	800bf6c <xTaskGetSchedulerState>
 800c41c:	4603      	mov	r3, r0
 800c41e:	2b02      	cmp	r3, #2
 800c420:	d109      	bne.n	800c436 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c422:	4b11      	ldr	r3, [pc, #68]	; (800c468 <xTimerGenericCommand+0x9c>)
 800c424:	6818      	ldr	r0, [r3, #0]
 800c426:	f107 0110 	add.w	r1, r7, #16
 800c42a:	2300      	movs	r3, #0
 800c42c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c42e:	f7fe f86b 	bl	800a508 <xQueueGenericSend>
 800c432:	6278      	str	r0, [r7, #36]	; 0x24
 800c434:	e012      	b.n	800c45c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c436:	4b0c      	ldr	r3, [pc, #48]	; (800c468 <xTimerGenericCommand+0x9c>)
 800c438:	6818      	ldr	r0, [r3, #0]
 800c43a:	f107 0110 	add.w	r1, r7, #16
 800c43e:	2300      	movs	r3, #0
 800c440:	2200      	movs	r2, #0
 800c442:	f7fe f861 	bl	800a508 <xQueueGenericSend>
 800c446:	6278      	str	r0, [r7, #36]	; 0x24
 800c448:	e008      	b.n	800c45c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c44a:	4b07      	ldr	r3, [pc, #28]	; (800c468 <xTimerGenericCommand+0x9c>)
 800c44c:	6818      	ldr	r0, [r3, #0]
 800c44e:	f107 0110 	add.w	r1, r7, #16
 800c452:	2300      	movs	r3, #0
 800c454:	683a      	ldr	r2, [r7, #0]
 800c456:	f7fe f95d 	bl	800a714 <xQueueGenericSendFromISR>
 800c45a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3728      	adds	r7, #40	; 0x28
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	20009bc8 	.word	0x20009bc8

0800c46c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b088      	sub	sp, #32
 800c470:	af02      	add	r7, sp, #8
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c476:	4b23      	ldr	r3, [pc, #140]	; (800c504 <prvProcessExpiredTimer+0x98>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	68db      	ldr	r3, [r3, #12]
 800c47c:	68db      	ldr	r3, [r3, #12]
 800c47e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	3304      	adds	r3, #4
 800c484:	4618      	mov	r0, r3
 800c486:	f7fd fd97 	bl	8009fb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c490:	f003 0304 	and.w	r3, r3, #4
 800c494:	2b00      	cmp	r3, #0
 800c496:	d024      	beq.n	800c4e2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	699a      	ldr	r2, [r3, #24]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	18d1      	adds	r1, r2, r3
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	683a      	ldr	r2, [r7, #0]
 800c4a4:	6978      	ldr	r0, [r7, #20]
 800c4a6:	f000 f8d3 	bl	800c650 <prvInsertTimerInActiveList>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d021      	beq.n	800c4f4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	9300      	str	r3, [sp, #0]
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	2100      	movs	r1, #0
 800c4ba:	6978      	ldr	r0, [r7, #20]
 800c4bc:	f7ff ff86 	bl	800c3cc <xTimerGenericCommand>
 800c4c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d115      	bne.n	800c4f4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800c4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4cc:	b672      	cpsid	i
 800c4ce:	f383 8811 	msr	BASEPRI, r3
 800c4d2:	f3bf 8f6f 	isb	sy
 800c4d6:	f3bf 8f4f 	dsb	sy
 800c4da:	b662      	cpsie	i
 800c4dc:	60fb      	str	r3, [r7, #12]
}
 800c4de:	bf00      	nop
 800c4e0:	e7fe      	b.n	800c4e0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4e8:	f023 0301 	bic.w	r3, r3, #1
 800c4ec:	b2da      	uxtb	r2, r3
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	6a1b      	ldr	r3, [r3, #32]
 800c4f8:	6978      	ldr	r0, [r7, #20]
 800c4fa:	4798      	blx	r3
}
 800c4fc:	bf00      	nop
 800c4fe:	3718      	adds	r7, #24
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}
 800c504:	20009bc0 	.word	0x20009bc0

0800c508 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b084      	sub	sp, #16
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c510:	f107 0308 	add.w	r3, r7, #8
 800c514:	4618      	mov	r0, r3
 800c516:	f000 f857 	bl	800c5c8 <prvGetNextExpireTime>
 800c51a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	4619      	mov	r1, r3
 800c520:	68f8      	ldr	r0, [r7, #12]
 800c522:	f000 f803 	bl	800c52c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c526:	f000 f8d5 	bl	800c6d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c52a:	e7f1      	b.n	800c510 <prvTimerTask+0x8>

0800c52c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c536:	f7ff f903 	bl	800b740 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c53a:	f107 0308 	add.w	r3, r7, #8
 800c53e:	4618      	mov	r0, r3
 800c540:	f000 f866 	bl	800c610 <prvSampleTimeNow>
 800c544:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d130      	bne.n	800c5ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d10a      	bne.n	800c568 <prvProcessTimerOrBlockTask+0x3c>
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	429a      	cmp	r2, r3
 800c558:	d806      	bhi.n	800c568 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c55a:	f7ff f8ff 	bl	800b75c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c55e:	68f9      	ldr	r1, [r7, #12]
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f7ff ff83 	bl	800c46c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c566:	e024      	b.n	800c5b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d008      	beq.n	800c580 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c56e:	4b13      	ldr	r3, [pc, #76]	; (800c5bc <prvProcessTimerOrBlockTask+0x90>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d101      	bne.n	800c57c <prvProcessTimerOrBlockTask+0x50>
 800c578:	2301      	movs	r3, #1
 800c57a:	e000      	b.n	800c57e <prvProcessTimerOrBlockTask+0x52>
 800c57c:	2300      	movs	r3, #0
 800c57e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c580:	4b0f      	ldr	r3, [pc, #60]	; (800c5c0 <prvProcessTimerOrBlockTask+0x94>)
 800c582:	6818      	ldr	r0, [r3, #0]
 800c584:	687a      	ldr	r2, [r7, #4]
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	1ad3      	subs	r3, r2, r3
 800c58a:	683a      	ldr	r2, [r7, #0]
 800c58c:	4619      	mov	r1, r3
 800c58e:	f7fe fe59 	bl	800b244 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c592:	f7ff f8e3 	bl	800b75c <xTaskResumeAll>
 800c596:	4603      	mov	r3, r0
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d10a      	bne.n	800c5b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c59c:	4b09      	ldr	r3, [pc, #36]	; (800c5c4 <prvProcessTimerOrBlockTask+0x98>)
 800c59e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5a2:	601a      	str	r2, [r3, #0]
 800c5a4:	f3bf 8f4f 	dsb	sy
 800c5a8:	f3bf 8f6f 	isb	sy
}
 800c5ac:	e001      	b.n	800c5b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c5ae:	f7ff f8d5 	bl	800b75c <xTaskResumeAll>
}
 800c5b2:	bf00      	nop
 800c5b4:	3710      	adds	r7, #16
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}
 800c5ba:	bf00      	nop
 800c5bc:	20009bc4 	.word	0x20009bc4
 800c5c0:	20009bc8 	.word	0x20009bc8
 800c5c4:	e000ed04 	.word	0xe000ed04

0800c5c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b085      	sub	sp, #20
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c5d0:	4b0e      	ldr	r3, [pc, #56]	; (800c60c <prvGetNextExpireTime+0x44>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d101      	bne.n	800c5de <prvGetNextExpireTime+0x16>
 800c5da:	2201      	movs	r2, #1
 800c5dc:	e000      	b.n	800c5e0 <prvGetNextExpireTime+0x18>
 800c5de:	2200      	movs	r2, #0
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d105      	bne.n	800c5f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c5ec:	4b07      	ldr	r3, [pc, #28]	; (800c60c <prvGetNextExpireTime+0x44>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	68db      	ldr	r3, [r3, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	60fb      	str	r3, [r7, #12]
 800c5f6:	e001      	b.n	800c5fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3714      	adds	r7, #20
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr
 800c60a:	bf00      	nop
 800c60c:	20009bc0 	.word	0x20009bc0

0800c610 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c618:	f7ff f940 	bl	800b89c <xTaskGetTickCount>
 800c61c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c61e:	4b0b      	ldr	r3, [pc, #44]	; (800c64c <prvSampleTimeNow+0x3c>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	68fa      	ldr	r2, [r7, #12]
 800c624:	429a      	cmp	r2, r3
 800c626:	d205      	bcs.n	800c634 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c628:	f000 f93c 	bl	800c8a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2201      	movs	r2, #1
 800c630:	601a      	str	r2, [r3, #0]
 800c632:	e002      	b.n	800c63a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2200      	movs	r2, #0
 800c638:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c63a:	4a04      	ldr	r2, [pc, #16]	; (800c64c <prvSampleTimeNow+0x3c>)
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c640:	68fb      	ldr	r3, [r7, #12]
}
 800c642:	4618      	mov	r0, r3
 800c644:	3710      	adds	r7, #16
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	20009bd0 	.word	0x20009bd0

0800c650 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b086      	sub	sp, #24
 800c654:	af00      	add	r7, sp, #0
 800c656:	60f8      	str	r0, [r7, #12]
 800c658:	60b9      	str	r1, [r7, #8]
 800c65a:	607a      	str	r2, [r7, #4]
 800c65c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c65e:	2300      	movs	r3, #0
 800c660:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	68ba      	ldr	r2, [r7, #8]
 800c666:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	68fa      	ldr	r2, [r7, #12]
 800c66c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c66e:	68ba      	ldr	r2, [r7, #8]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	429a      	cmp	r2, r3
 800c674:	d812      	bhi.n	800c69c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c676:	687a      	ldr	r2, [r7, #4]
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	1ad2      	subs	r2, r2, r3
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	699b      	ldr	r3, [r3, #24]
 800c680:	429a      	cmp	r2, r3
 800c682:	d302      	bcc.n	800c68a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c684:	2301      	movs	r3, #1
 800c686:	617b      	str	r3, [r7, #20]
 800c688:	e01b      	b.n	800c6c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c68a:	4b10      	ldr	r3, [pc, #64]	; (800c6cc <prvInsertTimerInActiveList+0x7c>)
 800c68c:	681a      	ldr	r2, [r3, #0]
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	3304      	adds	r3, #4
 800c692:	4619      	mov	r1, r3
 800c694:	4610      	mov	r0, r2
 800c696:	f7fd fc56 	bl	8009f46 <vListInsert>
 800c69a:	e012      	b.n	800c6c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d206      	bcs.n	800c6b2 <prvInsertTimerInActiveList+0x62>
 800c6a4:	68ba      	ldr	r2, [r7, #8]
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d302      	bcc.n	800c6b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	617b      	str	r3, [r7, #20]
 800c6b0:	e007      	b.n	800c6c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c6b2:	4b07      	ldr	r3, [pc, #28]	; (800c6d0 <prvInsertTimerInActiveList+0x80>)
 800c6b4:	681a      	ldr	r2, [r3, #0]
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	3304      	adds	r3, #4
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	4610      	mov	r0, r2
 800c6be:	f7fd fc42 	bl	8009f46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c6c2:	697b      	ldr	r3, [r7, #20]
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3718      	adds	r7, #24
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}
 800c6cc:	20009bc4 	.word	0x20009bc4
 800c6d0:	20009bc0 	.word	0x20009bc0

0800c6d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b08e      	sub	sp, #56	; 0x38
 800c6d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c6da:	e0d0      	b.n	800c87e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	da1a      	bge.n	800c718 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c6e2:	1d3b      	adds	r3, r7, #4
 800c6e4:	3304      	adds	r3, #4
 800c6e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d10c      	bne.n	800c708 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800c6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6f2:	b672      	cpsid	i
 800c6f4:	f383 8811 	msr	BASEPRI, r3
 800c6f8:	f3bf 8f6f 	isb	sy
 800c6fc:	f3bf 8f4f 	dsb	sy
 800c700:	b662      	cpsie	i
 800c702:	61fb      	str	r3, [r7, #28]
}
 800c704:	bf00      	nop
 800c706:	e7fe      	b.n	800c706 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c70e:	6850      	ldr	r0, [r2, #4]
 800c710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c712:	6892      	ldr	r2, [r2, #8]
 800c714:	4611      	mov	r1, r2
 800c716:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	f2c0 80ae 	blt.w	800c87c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c726:	695b      	ldr	r3, [r3, #20]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d004      	beq.n	800c736 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72e:	3304      	adds	r3, #4
 800c730:	4618      	mov	r0, r3
 800c732:	f7fd fc41 	bl	8009fb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c736:	463b      	mov	r3, r7
 800c738:	4618      	mov	r0, r3
 800c73a:	f7ff ff69 	bl	800c610 <prvSampleTimeNow>
 800c73e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2b09      	cmp	r3, #9
 800c744:	f200 809b 	bhi.w	800c87e <prvProcessReceivedCommands+0x1aa>
 800c748:	a201      	add	r2, pc, #4	; (adr r2, 800c750 <prvProcessReceivedCommands+0x7c>)
 800c74a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c74e:	bf00      	nop
 800c750:	0800c779 	.word	0x0800c779
 800c754:	0800c779 	.word	0x0800c779
 800c758:	0800c779 	.word	0x0800c779
 800c75c:	0800c7f1 	.word	0x0800c7f1
 800c760:	0800c805 	.word	0x0800c805
 800c764:	0800c853 	.word	0x0800c853
 800c768:	0800c779 	.word	0x0800c779
 800c76c:	0800c779 	.word	0x0800c779
 800c770:	0800c7f1 	.word	0x0800c7f1
 800c774:	0800c805 	.word	0x0800c805
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c77e:	f043 0301 	orr.w	r3, r3, #1
 800c782:	b2da      	uxtb	r2, r3
 800c784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c786:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c78a:	68ba      	ldr	r2, [r7, #8]
 800c78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78e:	699b      	ldr	r3, [r3, #24]
 800c790:	18d1      	adds	r1, r2, r3
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c798:	f7ff ff5a 	bl	800c650 <prvInsertTimerInActiveList>
 800c79c:	4603      	mov	r3, r0
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d06d      	beq.n	800c87e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a4:	6a1b      	ldr	r3, [r3, #32]
 800c7a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7b0:	f003 0304 	and.w	r3, r3, #4
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d062      	beq.n	800c87e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c7b8:	68ba      	ldr	r2, [r7, #8]
 800c7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7bc:	699b      	ldr	r3, [r3, #24]
 800c7be:	441a      	add	r2, r3
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	9300      	str	r3, [sp, #0]
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	2100      	movs	r1, #0
 800c7c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7ca:	f7ff fdff 	bl	800c3cc <xTimerGenericCommand>
 800c7ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c7d0:	6a3b      	ldr	r3, [r7, #32]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d153      	bne.n	800c87e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800c7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7da:	b672      	cpsid	i
 800c7dc:	f383 8811 	msr	BASEPRI, r3
 800c7e0:	f3bf 8f6f 	isb	sy
 800c7e4:	f3bf 8f4f 	dsb	sy
 800c7e8:	b662      	cpsie	i
 800c7ea:	61bb      	str	r3, [r7, #24]
}
 800c7ec:	bf00      	nop
 800c7ee:	e7fe      	b.n	800c7ee <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7f6:	f023 0301 	bic.w	r3, r3, #1
 800c7fa:	b2da      	uxtb	r2, r3
 800c7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c802:	e03c      	b.n	800c87e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c806:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c80a:	f043 0301 	orr.w	r3, r3, #1
 800c80e:	b2da      	uxtb	r2, r3
 800c810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c812:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c816:	68ba      	ldr	r2, [r7, #8]
 800c818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81e:	699b      	ldr	r3, [r3, #24]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d10c      	bne.n	800c83e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800c824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c828:	b672      	cpsid	i
 800c82a:	f383 8811 	msr	BASEPRI, r3
 800c82e:	f3bf 8f6f 	isb	sy
 800c832:	f3bf 8f4f 	dsb	sy
 800c836:	b662      	cpsie	i
 800c838:	617b      	str	r3, [r7, #20]
}
 800c83a:	bf00      	nop
 800c83c:	e7fe      	b.n	800c83c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c840:	699a      	ldr	r2, [r3, #24]
 800c842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c844:	18d1      	adds	r1, r2, r3
 800c846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c84a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c84c:	f7ff ff00 	bl	800c650 <prvInsertTimerInActiveList>
					break;
 800c850:	e015      	b.n	800c87e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c854:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c858:	f003 0302 	and.w	r3, r3, #2
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d103      	bne.n	800c868 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800c860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c862:	f000 fbc9 	bl	800cff8 <vPortFree>
 800c866:	e00a      	b.n	800c87e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c86a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c86e:	f023 0301 	bic.w	r3, r3, #1
 800c872:	b2da      	uxtb	r2, r3
 800c874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c876:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c87a:	e000      	b.n	800c87e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c87c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c87e:	4b08      	ldr	r3, [pc, #32]	; (800c8a0 <prvProcessReceivedCommands+0x1cc>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	1d39      	adds	r1, r7, #4
 800c884:	2200      	movs	r2, #0
 800c886:	4618      	mov	r0, r3
 800c888:	f7fe f87a 	bl	800a980 <xQueueReceive>
 800c88c:	4603      	mov	r3, r0
 800c88e:	2b00      	cmp	r3, #0
 800c890:	f47f af24 	bne.w	800c6dc <prvProcessReceivedCommands+0x8>
	}
}
 800c894:	bf00      	nop
 800c896:	bf00      	nop
 800c898:	3730      	adds	r7, #48	; 0x30
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	bf00      	nop
 800c8a0:	20009bc8 	.word	0x20009bc8

0800c8a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b088      	sub	sp, #32
 800c8a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c8aa:	e04a      	b.n	800c942 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c8ac:	4b2e      	ldr	r3, [pc, #184]	; (800c968 <prvSwitchTimerLists+0xc4>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	68db      	ldr	r3, [r3, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8b6:	4b2c      	ldr	r3, [pc, #176]	; (800c968 <prvSwitchTimerLists+0xc4>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	68db      	ldr	r3, [r3, #12]
 800c8bc:	68db      	ldr	r3, [r3, #12]
 800c8be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	3304      	adds	r3, #4
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f7fd fb77 	bl	8009fb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	6a1b      	ldr	r3, [r3, #32]
 800c8ce:	68f8      	ldr	r0, [r7, #12]
 800c8d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8d8:	f003 0304 	and.w	r3, r3, #4
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d030      	beq.n	800c942 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	699b      	ldr	r3, [r3, #24]
 800c8e4:	693a      	ldr	r2, [r7, #16]
 800c8e6:	4413      	add	r3, r2
 800c8e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c8ea:	68ba      	ldr	r2, [r7, #8]
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d90e      	bls.n	800c910 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	68ba      	ldr	r2, [r7, #8]
 800c8f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	68fa      	ldr	r2, [r7, #12]
 800c8fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c8fe:	4b1a      	ldr	r3, [pc, #104]	; (800c968 <prvSwitchTimerLists+0xc4>)
 800c900:	681a      	ldr	r2, [r3, #0]
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	3304      	adds	r3, #4
 800c906:	4619      	mov	r1, r3
 800c908:	4610      	mov	r0, r2
 800c90a:	f7fd fb1c 	bl	8009f46 <vListInsert>
 800c90e:	e018      	b.n	800c942 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c910:	2300      	movs	r3, #0
 800c912:	9300      	str	r3, [sp, #0]
 800c914:	2300      	movs	r3, #0
 800c916:	693a      	ldr	r2, [r7, #16]
 800c918:	2100      	movs	r1, #0
 800c91a:	68f8      	ldr	r0, [r7, #12]
 800c91c:	f7ff fd56 	bl	800c3cc <xTimerGenericCommand>
 800c920:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d10c      	bne.n	800c942 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800c928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92c:	b672      	cpsid	i
 800c92e:	f383 8811 	msr	BASEPRI, r3
 800c932:	f3bf 8f6f 	isb	sy
 800c936:	f3bf 8f4f 	dsb	sy
 800c93a:	b662      	cpsie	i
 800c93c:	603b      	str	r3, [r7, #0]
}
 800c93e:	bf00      	nop
 800c940:	e7fe      	b.n	800c940 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c942:	4b09      	ldr	r3, [pc, #36]	; (800c968 <prvSwitchTimerLists+0xc4>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d1af      	bne.n	800c8ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c94c:	4b06      	ldr	r3, [pc, #24]	; (800c968 <prvSwitchTimerLists+0xc4>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c952:	4b06      	ldr	r3, [pc, #24]	; (800c96c <prvSwitchTimerLists+0xc8>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	4a04      	ldr	r2, [pc, #16]	; (800c968 <prvSwitchTimerLists+0xc4>)
 800c958:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c95a:	4a04      	ldr	r2, [pc, #16]	; (800c96c <prvSwitchTimerLists+0xc8>)
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	6013      	str	r3, [r2, #0]
}
 800c960:	bf00      	nop
 800c962:	3718      	adds	r7, #24
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}
 800c968:	20009bc0 	.word	0x20009bc0
 800c96c:	20009bc4 	.word	0x20009bc4

0800c970 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c976:	f000 f949 	bl	800cc0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c97a:	4b15      	ldr	r3, [pc, #84]	; (800c9d0 <prvCheckForValidListAndQueue+0x60>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d120      	bne.n	800c9c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c982:	4814      	ldr	r0, [pc, #80]	; (800c9d4 <prvCheckForValidListAndQueue+0x64>)
 800c984:	f7fd fa8e 	bl	8009ea4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c988:	4813      	ldr	r0, [pc, #76]	; (800c9d8 <prvCheckForValidListAndQueue+0x68>)
 800c98a:	f7fd fa8b 	bl	8009ea4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c98e:	4b13      	ldr	r3, [pc, #76]	; (800c9dc <prvCheckForValidListAndQueue+0x6c>)
 800c990:	4a10      	ldr	r2, [pc, #64]	; (800c9d4 <prvCheckForValidListAndQueue+0x64>)
 800c992:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c994:	4b12      	ldr	r3, [pc, #72]	; (800c9e0 <prvCheckForValidListAndQueue+0x70>)
 800c996:	4a10      	ldr	r2, [pc, #64]	; (800c9d8 <prvCheckForValidListAndQueue+0x68>)
 800c998:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c99a:	2300      	movs	r3, #0
 800c99c:	9300      	str	r3, [sp, #0]
 800c99e:	4b11      	ldr	r3, [pc, #68]	; (800c9e4 <prvCheckForValidListAndQueue+0x74>)
 800c9a0:	4a11      	ldr	r2, [pc, #68]	; (800c9e8 <prvCheckForValidListAndQueue+0x78>)
 800c9a2:	2110      	movs	r1, #16
 800c9a4:	200a      	movs	r0, #10
 800c9a6:	f7fd fb9b 	bl	800a0e0 <xQueueGenericCreateStatic>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	4a08      	ldr	r2, [pc, #32]	; (800c9d0 <prvCheckForValidListAndQueue+0x60>)
 800c9ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c9b0:	4b07      	ldr	r3, [pc, #28]	; (800c9d0 <prvCheckForValidListAndQueue+0x60>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d005      	beq.n	800c9c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c9b8:	4b05      	ldr	r3, [pc, #20]	; (800c9d0 <prvCheckForValidListAndQueue+0x60>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	490b      	ldr	r1, [pc, #44]	; (800c9ec <prvCheckForValidListAndQueue+0x7c>)
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f7fe fbec 	bl	800b19c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c9c4:	f000 f956 	bl	800cc74 <vPortExitCritical>
}
 800c9c8:	bf00      	nop
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	20009bc8 	.word	0x20009bc8
 800c9d4:	20009b98 	.word	0x20009b98
 800c9d8:	20009bac 	.word	0x20009bac
 800c9dc:	20009bc0 	.word	0x20009bc0
 800c9e0:	20009bc4 	.word	0x20009bc4
 800c9e4:	20009c74 	.word	0x20009c74
 800c9e8:	20009bd4 	.word	0x20009bd4
 800c9ec:	0801cd0c 	.word	0x0801cd0c

0800c9f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b085      	sub	sp, #20
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	60f8      	str	r0, [r7, #12]
 800c9f8:	60b9      	str	r1, [r7, #8]
 800c9fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	3b04      	subs	r3, #4
 800ca00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ca08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	3b04      	subs	r3, #4
 800ca0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	f023 0201 	bic.w	r2, r3, #1
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	3b04      	subs	r3, #4
 800ca1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ca20:	4a0c      	ldr	r2, [pc, #48]	; (800ca54 <pxPortInitialiseStack+0x64>)
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	3b14      	subs	r3, #20
 800ca2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ca2c:	687a      	ldr	r2, [r7, #4]
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	3b04      	subs	r3, #4
 800ca36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	f06f 0202 	mvn.w	r2, #2
 800ca3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	3b20      	subs	r3, #32
 800ca44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ca46:	68fb      	ldr	r3, [r7, #12]
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3714      	adds	r7, #20
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr
 800ca54:	0800ca59 	.word	0x0800ca59

0800ca58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ca62:	4b14      	ldr	r3, [pc, #80]	; (800cab4 <prvTaskExitError+0x5c>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca6a:	d00c      	beq.n	800ca86 <prvTaskExitError+0x2e>
	__asm volatile
 800ca6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca70:	b672      	cpsid	i
 800ca72:	f383 8811 	msr	BASEPRI, r3
 800ca76:	f3bf 8f6f 	isb	sy
 800ca7a:	f3bf 8f4f 	dsb	sy
 800ca7e:	b662      	cpsie	i
 800ca80:	60fb      	str	r3, [r7, #12]
}
 800ca82:	bf00      	nop
 800ca84:	e7fe      	b.n	800ca84 <prvTaskExitError+0x2c>
	__asm volatile
 800ca86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca8a:	b672      	cpsid	i
 800ca8c:	f383 8811 	msr	BASEPRI, r3
 800ca90:	f3bf 8f6f 	isb	sy
 800ca94:	f3bf 8f4f 	dsb	sy
 800ca98:	b662      	cpsie	i
 800ca9a:	60bb      	str	r3, [r7, #8]
}
 800ca9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ca9e:	bf00      	nop
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d0fc      	beq.n	800caa0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800caa6:	bf00      	nop
 800caa8:	bf00      	nop
 800caaa:	3714      	adds	r7, #20
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr
 800cab4:	20000020 	.word	0x20000020
	...

0800cac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cac0:	4b07      	ldr	r3, [pc, #28]	; (800cae0 <pxCurrentTCBConst2>)
 800cac2:	6819      	ldr	r1, [r3, #0]
 800cac4:	6808      	ldr	r0, [r1, #0]
 800cac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caca:	f380 8809 	msr	PSP, r0
 800cace:	f3bf 8f6f 	isb	sy
 800cad2:	f04f 0000 	mov.w	r0, #0
 800cad6:	f380 8811 	msr	BASEPRI, r0
 800cada:	4770      	bx	lr
 800cadc:	f3af 8000 	nop.w

0800cae0 <pxCurrentTCBConst2>:
 800cae0:	20009698 	.word	0x20009698
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cae4:	bf00      	nop
 800cae6:	bf00      	nop

0800cae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cae8:	4808      	ldr	r0, [pc, #32]	; (800cb0c <prvPortStartFirstTask+0x24>)
 800caea:	6800      	ldr	r0, [r0, #0]
 800caec:	6800      	ldr	r0, [r0, #0]
 800caee:	f380 8808 	msr	MSP, r0
 800caf2:	f04f 0000 	mov.w	r0, #0
 800caf6:	f380 8814 	msr	CONTROL, r0
 800cafa:	b662      	cpsie	i
 800cafc:	b661      	cpsie	f
 800cafe:	f3bf 8f4f 	dsb	sy
 800cb02:	f3bf 8f6f 	isb	sy
 800cb06:	df00      	svc	0
 800cb08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cb0a:	bf00      	nop
 800cb0c:	e000ed08 	.word	0xe000ed08

0800cb10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cb16:	4b37      	ldr	r3, [pc, #220]	; (800cbf4 <xPortStartScheduler+0xe4>)
 800cb18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	22ff      	movs	r2, #255	; 0xff
 800cb26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	b2db      	uxtb	r3, r3
 800cb2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cb30:	78fb      	ldrb	r3, [r7, #3]
 800cb32:	b2db      	uxtb	r3, r3
 800cb34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cb38:	b2da      	uxtb	r2, r3
 800cb3a:	4b2f      	ldr	r3, [pc, #188]	; (800cbf8 <xPortStartScheduler+0xe8>)
 800cb3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cb3e:	4b2f      	ldr	r3, [pc, #188]	; (800cbfc <xPortStartScheduler+0xec>)
 800cb40:	2207      	movs	r2, #7
 800cb42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb44:	e009      	b.n	800cb5a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800cb46:	4b2d      	ldr	r3, [pc, #180]	; (800cbfc <xPortStartScheduler+0xec>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	3b01      	subs	r3, #1
 800cb4c:	4a2b      	ldr	r2, [pc, #172]	; (800cbfc <xPortStartScheduler+0xec>)
 800cb4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cb50:	78fb      	ldrb	r3, [r7, #3]
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	005b      	lsls	r3, r3, #1
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb5a:	78fb      	ldrb	r3, [r7, #3]
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb62:	2b80      	cmp	r3, #128	; 0x80
 800cb64:	d0ef      	beq.n	800cb46 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cb66:	4b25      	ldr	r3, [pc, #148]	; (800cbfc <xPortStartScheduler+0xec>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f1c3 0307 	rsb	r3, r3, #7
 800cb6e:	2b04      	cmp	r3, #4
 800cb70:	d00c      	beq.n	800cb8c <xPortStartScheduler+0x7c>
	__asm volatile
 800cb72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb76:	b672      	cpsid	i
 800cb78:	f383 8811 	msr	BASEPRI, r3
 800cb7c:	f3bf 8f6f 	isb	sy
 800cb80:	f3bf 8f4f 	dsb	sy
 800cb84:	b662      	cpsie	i
 800cb86:	60bb      	str	r3, [r7, #8]
}
 800cb88:	bf00      	nop
 800cb8a:	e7fe      	b.n	800cb8a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cb8c:	4b1b      	ldr	r3, [pc, #108]	; (800cbfc <xPortStartScheduler+0xec>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	021b      	lsls	r3, r3, #8
 800cb92:	4a1a      	ldr	r2, [pc, #104]	; (800cbfc <xPortStartScheduler+0xec>)
 800cb94:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cb96:	4b19      	ldr	r3, [pc, #100]	; (800cbfc <xPortStartScheduler+0xec>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cb9e:	4a17      	ldr	r2, [pc, #92]	; (800cbfc <xPortStartScheduler+0xec>)
 800cba0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	b2da      	uxtb	r2, r3
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cbaa:	4b15      	ldr	r3, [pc, #84]	; (800cc00 <xPortStartScheduler+0xf0>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	4a14      	ldr	r2, [pc, #80]	; (800cc00 <xPortStartScheduler+0xf0>)
 800cbb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cbb4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cbb6:	4b12      	ldr	r3, [pc, #72]	; (800cc00 <xPortStartScheduler+0xf0>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	4a11      	ldr	r2, [pc, #68]	; (800cc00 <xPortStartScheduler+0xf0>)
 800cbbc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cbc0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cbc2:	f000 f8dd 	bl	800cd80 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cbc6:	4b0f      	ldr	r3, [pc, #60]	; (800cc04 <xPortStartScheduler+0xf4>)
 800cbc8:	2200      	movs	r2, #0
 800cbca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cbcc:	f000 f8fc 	bl	800cdc8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cbd0:	4b0d      	ldr	r3, [pc, #52]	; (800cc08 <xPortStartScheduler+0xf8>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	4a0c      	ldr	r2, [pc, #48]	; (800cc08 <xPortStartScheduler+0xf8>)
 800cbd6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cbda:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cbdc:	f7ff ff84 	bl	800cae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cbe0:	f7fe ff3a 	bl	800ba58 <vTaskSwitchContext>
	prvTaskExitError();
 800cbe4:	f7ff ff38 	bl	800ca58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cbe8:	2300      	movs	r3, #0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3710      	adds	r7, #16
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	e000e400 	.word	0xe000e400
 800cbf8:	20009cc4 	.word	0x20009cc4
 800cbfc:	20009cc8 	.word	0x20009cc8
 800cc00:	e000ed20 	.word	0xe000ed20
 800cc04:	20000020 	.word	0x20000020
 800cc08:	e000ef34 	.word	0xe000ef34

0800cc0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b083      	sub	sp, #12
 800cc10:	af00      	add	r7, sp, #0
	__asm volatile
 800cc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc16:	b672      	cpsid	i
 800cc18:	f383 8811 	msr	BASEPRI, r3
 800cc1c:	f3bf 8f6f 	isb	sy
 800cc20:	f3bf 8f4f 	dsb	sy
 800cc24:	b662      	cpsie	i
 800cc26:	607b      	str	r3, [r7, #4]
}
 800cc28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cc2a:	4b10      	ldr	r3, [pc, #64]	; (800cc6c <vPortEnterCritical+0x60>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	3301      	adds	r3, #1
 800cc30:	4a0e      	ldr	r2, [pc, #56]	; (800cc6c <vPortEnterCritical+0x60>)
 800cc32:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cc34:	4b0d      	ldr	r3, [pc, #52]	; (800cc6c <vPortEnterCritical+0x60>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	2b01      	cmp	r3, #1
 800cc3a:	d111      	bne.n	800cc60 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cc3c:	4b0c      	ldr	r3, [pc, #48]	; (800cc70 <vPortEnterCritical+0x64>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d00c      	beq.n	800cc60 <vPortEnterCritical+0x54>
	__asm volatile
 800cc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc4a:	b672      	cpsid	i
 800cc4c:	f383 8811 	msr	BASEPRI, r3
 800cc50:	f3bf 8f6f 	isb	sy
 800cc54:	f3bf 8f4f 	dsb	sy
 800cc58:	b662      	cpsie	i
 800cc5a:	603b      	str	r3, [r7, #0]
}
 800cc5c:	bf00      	nop
 800cc5e:	e7fe      	b.n	800cc5e <vPortEnterCritical+0x52>
	}
}
 800cc60:	bf00      	nop
 800cc62:	370c      	adds	r7, #12
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr
 800cc6c:	20000020 	.word	0x20000020
 800cc70:	e000ed04 	.word	0xe000ed04

0800cc74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cc74:	b480      	push	{r7}
 800cc76:	b083      	sub	sp, #12
 800cc78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cc7a:	4b13      	ldr	r3, [pc, #76]	; (800ccc8 <vPortExitCritical+0x54>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d10c      	bne.n	800cc9c <vPortExitCritical+0x28>
	__asm volatile
 800cc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc86:	b672      	cpsid	i
 800cc88:	f383 8811 	msr	BASEPRI, r3
 800cc8c:	f3bf 8f6f 	isb	sy
 800cc90:	f3bf 8f4f 	dsb	sy
 800cc94:	b662      	cpsie	i
 800cc96:	607b      	str	r3, [r7, #4]
}
 800cc98:	bf00      	nop
 800cc9a:	e7fe      	b.n	800cc9a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800cc9c:	4b0a      	ldr	r3, [pc, #40]	; (800ccc8 <vPortExitCritical+0x54>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	3b01      	subs	r3, #1
 800cca2:	4a09      	ldr	r2, [pc, #36]	; (800ccc8 <vPortExitCritical+0x54>)
 800cca4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cca6:	4b08      	ldr	r3, [pc, #32]	; (800ccc8 <vPortExitCritical+0x54>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d105      	bne.n	800ccba <vPortExitCritical+0x46>
 800ccae:	2300      	movs	r3, #0
 800ccb0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	f383 8811 	msr	BASEPRI, r3
}
 800ccb8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ccba:	bf00      	nop
 800ccbc:	370c      	adds	r7, #12
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc4:	4770      	bx	lr
 800ccc6:	bf00      	nop
 800ccc8:	20000020 	.word	0x20000020
 800cccc:	00000000 	.word	0x00000000

0800ccd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ccd0:	f3ef 8009 	mrs	r0, PSP
 800ccd4:	f3bf 8f6f 	isb	sy
 800ccd8:	4b15      	ldr	r3, [pc, #84]	; (800cd30 <pxCurrentTCBConst>)
 800ccda:	681a      	ldr	r2, [r3, #0]
 800ccdc:	f01e 0f10 	tst.w	lr, #16
 800cce0:	bf08      	it	eq
 800cce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccea:	6010      	str	r0, [r2, #0]
 800ccec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ccf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ccf4:	b672      	cpsid	i
 800ccf6:	f380 8811 	msr	BASEPRI, r0
 800ccfa:	f3bf 8f4f 	dsb	sy
 800ccfe:	f3bf 8f6f 	isb	sy
 800cd02:	b662      	cpsie	i
 800cd04:	f7fe fea8 	bl	800ba58 <vTaskSwitchContext>
 800cd08:	f04f 0000 	mov.w	r0, #0
 800cd0c:	f380 8811 	msr	BASEPRI, r0
 800cd10:	bc09      	pop	{r0, r3}
 800cd12:	6819      	ldr	r1, [r3, #0]
 800cd14:	6808      	ldr	r0, [r1, #0]
 800cd16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd1a:	f01e 0f10 	tst.w	lr, #16
 800cd1e:	bf08      	it	eq
 800cd20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cd24:	f380 8809 	msr	PSP, r0
 800cd28:	f3bf 8f6f 	isb	sy
 800cd2c:	4770      	bx	lr
 800cd2e:	bf00      	nop

0800cd30 <pxCurrentTCBConst>:
 800cd30:	20009698 	.word	0x20009698
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cd34:	bf00      	nop
 800cd36:	bf00      	nop

0800cd38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b082      	sub	sp, #8
 800cd3c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd42:	b672      	cpsid	i
 800cd44:	f383 8811 	msr	BASEPRI, r3
 800cd48:	f3bf 8f6f 	isb	sy
 800cd4c:	f3bf 8f4f 	dsb	sy
 800cd50:	b662      	cpsie	i
 800cd52:	607b      	str	r3, [r7, #4]
}
 800cd54:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cd56:	f7fe fdc3 	bl	800b8e0 <xTaskIncrementTick>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d003      	beq.n	800cd68 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cd60:	4b06      	ldr	r3, [pc, #24]	; (800cd7c <SysTick_Handler+0x44>)
 800cd62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd66:	601a      	str	r2, [r3, #0]
 800cd68:	2300      	movs	r3, #0
 800cd6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	f383 8811 	msr	BASEPRI, r3
}
 800cd72:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cd74:	bf00      	nop
 800cd76:	3708      	adds	r7, #8
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}
 800cd7c:	e000ed04 	.word	0xe000ed04

0800cd80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cd80:	b480      	push	{r7}
 800cd82:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cd84:	4b0b      	ldr	r3, [pc, #44]	; (800cdb4 <vPortSetupTimerInterrupt+0x34>)
 800cd86:	2200      	movs	r2, #0
 800cd88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cd8a:	4b0b      	ldr	r3, [pc, #44]	; (800cdb8 <vPortSetupTimerInterrupt+0x38>)
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cd90:	4b0a      	ldr	r3, [pc, #40]	; (800cdbc <vPortSetupTimerInterrupt+0x3c>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4a0a      	ldr	r2, [pc, #40]	; (800cdc0 <vPortSetupTimerInterrupt+0x40>)
 800cd96:	fba2 2303 	umull	r2, r3, r2, r3
 800cd9a:	099b      	lsrs	r3, r3, #6
 800cd9c:	4a09      	ldr	r2, [pc, #36]	; (800cdc4 <vPortSetupTimerInterrupt+0x44>)
 800cd9e:	3b01      	subs	r3, #1
 800cda0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cda2:	4b04      	ldr	r3, [pc, #16]	; (800cdb4 <vPortSetupTimerInterrupt+0x34>)
 800cda4:	2207      	movs	r2, #7
 800cda6:	601a      	str	r2, [r3, #0]
}
 800cda8:	bf00      	nop
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb0:	4770      	bx	lr
 800cdb2:	bf00      	nop
 800cdb4:	e000e010 	.word	0xe000e010
 800cdb8:	e000e018 	.word	0xe000e018
 800cdbc:	20000000 	.word	0x20000000
 800cdc0:	10624dd3 	.word	0x10624dd3
 800cdc4:	e000e014 	.word	0xe000e014

0800cdc8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cdc8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cdd8 <vPortEnableVFP+0x10>
 800cdcc:	6801      	ldr	r1, [r0, #0]
 800cdce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cdd2:	6001      	str	r1, [r0, #0]
 800cdd4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cdd6:	bf00      	nop
 800cdd8:	e000ed88 	.word	0xe000ed88

0800cddc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cddc:	b480      	push	{r7}
 800cdde:	b085      	sub	sp, #20
 800cde0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cde2:	f3ef 8305 	mrs	r3, IPSR
 800cde6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	2b0f      	cmp	r3, #15
 800cdec:	d916      	bls.n	800ce1c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cdee:	4a19      	ldr	r2, [pc, #100]	; (800ce54 <vPortValidateInterruptPriority+0x78>)
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	4413      	add	r3, r2
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cdf8:	4b17      	ldr	r3, [pc, #92]	; (800ce58 <vPortValidateInterruptPriority+0x7c>)
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	7afa      	ldrb	r2, [r7, #11]
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	d20c      	bcs.n	800ce1c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800ce02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce06:	b672      	cpsid	i
 800ce08:	f383 8811 	msr	BASEPRI, r3
 800ce0c:	f3bf 8f6f 	isb	sy
 800ce10:	f3bf 8f4f 	dsb	sy
 800ce14:	b662      	cpsie	i
 800ce16:	607b      	str	r3, [r7, #4]
}
 800ce18:	bf00      	nop
 800ce1a:	e7fe      	b.n	800ce1a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ce1c:	4b0f      	ldr	r3, [pc, #60]	; (800ce5c <vPortValidateInterruptPriority+0x80>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ce24:	4b0e      	ldr	r3, [pc, #56]	; (800ce60 <vPortValidateInterruptPriority+0x84>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d90c      	bls.n	800ce46 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ce2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce30:	b672      	cpsid	i
 800ce32:	f383 8811 	msr	BASEPRI, r3
 800ce36:	f3bf 8f6f 	isb	sy
 800ce3a:	f3bf 8f4f 	dsb	sy
 800ce3e:	b662      	cpsie	i
 800ce40:	603b      	str	r3, [r7, #0]
}
 800ce42:	bf00      	nop
 800ce44:	e7fe      	b.n	800ce44 <vPortValidateInterruptPriority+0x68>
	}
 800ce46:	bf00      	nop
 800ce48:	3714      	adds	r7, #20
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce50:	4770      	bx	lr
 800ce52:	bf00      	nop
 800ce54:	e000e3f0 	.word	0xe000e3f0
 800ce58:	20009cc4 	.word	0x20009cc4
 800ce5c:	e000ed0c 	.word	0xe000ed0c
 800ce60:	20009cc8 	.word	0x20009cc8

0800ce64 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b08a      	sub	sp, #40	; 0x28
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ce70:	f7fe fc66 	bl	800b740 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ce74:	4b5b      	ldr	r3, [pc, #364]	; (800cfe4 <pvPortMalloc+0x180>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d101      	bne.n	800ce80 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ce7c:	f000 f91a 	bl	800d0b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ce80:	4b59      	ldr	r3, [pc, #356]	; (800cfe8 <pvPortMalloc+0x184>)
 800ce82:	681a      	ldr	r2, [r3, #0]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	4013      	ands	r3, r2
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	f040 8092 	bne.w	800cfb2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d01f      	beq.n	800ced4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800ce94:	2208      	movs	r2, #8
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	4413      	add	r3, r2
 800ce9a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f003 0307 	and.w	r3, r3, #7
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d016      	beq.n	800ced4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f023 0307 	bic.w	r3, r3, #7
 800ceac:	3308      	adds	r3, #8
 800ceae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f003 0307 	and.w	r3, r3, #7
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d00c      	beq.n	800ced4 <pvPortMalloc+0x70>
	__asm volatile
 800ceba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cebe:	b672      	cpsid	i
 800cec0:	f383 8811 	msr	BASEPRI, r3
 800cec4:	f3bf 8f6f 	isb	sy
 800cec8:	f3bf 8f4f 	dsb	sy
 800cecc:	b662      	cpsie	i
 800cece:	617b      	str	r3, [r7, #20]
}
 800ced0:	bf00      	nop
 800ced2:	e7fe      	b.n	800ced2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d06b      	beq.n	800cfb2 <pvPortMalloc+0x14e>
 800ceda:	4b44      	ldr	r3, [pc, #272]	; (800cfec <pvPortMalloc+0x188>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	687a      	ldr	r2, [r7, #4]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d866      	bhi.n	800cfb2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cee4:	4b42      	ldr	r3, [pc, #264]	; (800cff0 <pvPortMalloc+0x18c>)
 800cee6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cee8:	4b41      	ldr	r3, [pc, #260]	; (800cff0 <pvPortMalloc+0x18c>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ceee:	e004      	b.n	800cefa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800cef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefc:	685b      	ldr	r3, [r3, #4]
 800cefe:	687a      	ldr	r2, [r7, #4]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d903      	bls.n	800cf0c <pvPortMalloc+0xa8>
 800cf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d1f1      	bne.n	800cef0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cf0c:	4b35      	ldr	r3, [pc, #212]	; (800cfe4 <pvPortMalloc+0x180>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d04d      	beq.n	800cfb2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cf16:	6a3b      	ldr	r3, [r7, #32]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	2208      	movs	r2, #8
 800cf1c:	4413      	add	r3, r2
 800cf1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf22:	681a      	ldr	r2, [r3, #0]
 800cf24:	6a3b      	ldr	r3, [r7, #32]
 800cf26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cf28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf2a:	685a      	ldr	r2, [r3, #4]
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	1ad2      	subs	r2, r2, r3
 800cf30:	2308      	movs	r3, #8
 800cf32:	005b      	lsls	r3, r3, #1
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d921      	bls.n	800cf7c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cf38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	4413      	add	r3, r2
 800cf3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf40:	69bb      	ldr	r3, [r7, #24]
 800cf42:	f003 0307 	and.w	r3, r3, #7
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d00c      	beq.n	800cf64 <pvPortMalloc+0x100>
	__asm volatile
 800cf4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf4e:	b672      	cpsid	i
 800cf50:	f383 8811 	msr	BASEPRI, r3
 800cf54:	f3bf 8f6f 	isb	sy
 800cf58:	f3bf 8f4f 	dsb	sy
 800cf5c:	b662      	cpsie	i
 800cf5e:	613b      	str	r3, [r7, #16]
}
 800cf60:	bf00      	nop
 800cf62:	e7fe      	b.n	800cf62 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf66:	685a      	ldr	r2, [r3, #4]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	1ad2      	subs	r2, r2, r3
 800cf6c:	69bb      	ldr	r3, [r7, #24]
 800cf6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cf70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cf76:	69b8      	ldr	r0, [r7, #24]
 800cf78:	f000 f8fe 	bl	800d178 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cf7c:	4b1b      	ldr	r3, [pc, #108]	; (800cfec <pvPortMalloc+0x188>)
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf82:	685b      	ldr	r3, [r3, #4]
 800cf84:	1ad3      	subs	r3, r2, r3
 800cf86:	4a19      	ldr	r2, [pc, #100]	; (800cfec <pvPortMalloc+0x188>)
 800cf88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cf8a:	4b18      	ldr	r3, [pc, #96]	; (800cfec <pvPortMalloc+0x188>)
 800cf8c:	681a      	ldr	r2, [r3, #0]
 800cf8e:	4b19      	ldr	r3, [pc, #100]	; (800cff4 <pvPortMalloc+0x190>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d203      	bcs.n	800cf9e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cf96:	4b15      	ldr	r3, [pc, #84]	; (800cfec <pvPortMalloc+0x188>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	4a16      	ldr	r2, [pc, #88]	; (800cff4 <pvPortMalloc+0x190>)
 800cf9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cf9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa0:	685a      	ldr	r2, [r3, #4]
 800cfa2:	4b11      	ldr	r3, [pc, #68]	; (800cfe8 <pvPortMalloc+0x184>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	431a      	orrs	r2, r3
 800cfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfaa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfae:	2200      	movs	r2, #0
 800cfb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cfb2:	f7fe fbd3 	bl	800b75c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfb6:	69fb      	ldr	r3, [r7, #28]
 800cfb8:	f003 0307 	and.w	r3, r3, #7
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d00c      	beq.n	800cfda <pvPortMalloc+0x176>
	__asm volatile
 800cfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc4:	b672      	cpsid	i
 800cfc6:	f383 8811 	msr	BASEPRI, r3
 800cfca:	f3bf 8f6f 	isb	sy
 800cfce:	f3bf 8f4f 	dsb	sy
 800cfd2:	b662      	cpsie	i
 800cfd4:	60fb      	str	r3, [r7, #12]
}
 800cfd6:	bf00      	nop
 800cfd8:	e7fe      	b.n	800cfd8 <pvPortMalloc+0x174>
	return pvReturn;
 800cfda:	69fb      	ldr	r3, [r7, #28]
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3728      	adds	r7, #40	; 0x28
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}
 800cfe4:	2000d8d4 	.word	0x2000d8d4
 800cfe8:	2000d8e0 	.word	0x2000d8e0
 800cfec:	2000d8d8 	.word	0x2000d8d8
 800cff0:	2000d8cc 	.word	0x2000d8cc
 800cff4:	2000d8dc 	.word	0x2000d8dc

0800cff8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b086      	sub	sp, #24
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d04c      	beq.n	800d0a4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d00a:	2308      	movs	r3, #8
 800d00c:	425b      	negs	r3, r3
 800d00e:	697a      	ldr	r2, [r7, #20]
 800d010:	4413      	add	r3, r2
 800d012:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d018:	693b      	ldr	r3, [r7, #16]
 800d01a:	685a      	ldr	r2, [r3, #4]
 800d01c:	4b23      	ldr	r3, [pc, #140]	; (800d0ac <vPortFree+0xb4>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4013      	ands	r3, r2
 800d022:	2b00      	cmp	r3, #0
 800d024:	d10c      	bne.n	800d040 <vPortFree+0x48>
	__asm volatile
 800d026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d02a:	b672      	cpsid	i
 800d02c:	f383 8811 	msr	BASEPRI, r3
 800d030:	f3bf 8f6f 	isb	sy
 800d034:	f3bf 8f4f 	dsb	sy
 800d038:	b662      	cpsie	i
 800d03a:	60fb      	str	r3, [r7, #12]
}
 800d03c:	bf00      	nop
 800d03e:	e7fe      	b.n	800d03e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d00c      	beq.n	800d062 <vPortFree+0x6a>
	__asm volatile
 800d048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d04c:	b672      	cpsid	i
 800d04e:	f383 8811 	msr	BASEPRI, r3
 800d052:	f3bf 8f6f 	isb	sy
 800d056:	f3bf 8f4f 	dsb	sy
 800d05a:	b662      	cpsie	i
 800d05c:	60bb      	str	r3, [r7, #8]
}
 800d05e:	bf00      	nop
 800d060:	e7fe      	b.n	800d060 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	685a      	ldr	r2, [r3, #4]
 800d066:	4b11      	ldr	r3, [pc, #68]	; (800d0ac <vPortFree+0xb4>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4013      	ands	r3, r2
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d019      	beq.n	800d0a4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d115      	bne.n	800d0a4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d078:	693b      	ldr	r3, [r7, #16]
 800d07a:	685a      	ldr	r2, [r3, #4]
 800d07c:	4b0b      	ldr	r3, [pc, #44]	; (800d0ac <vPortFree+0xb4>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	43db      	mvns	r3, r3
 800d082:	401a      	ands	r2, r3
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d088:	f7fe fb5a 	bl	800b740 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	685a      	ldr	r2, [r3, #4]
 800d090:	4b07      	ldr	r3, [pc, #28]	; (800d0b0 <vPortFree+0xb8>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4413      	add	r3, r2
 800d096:	4a06      	ldr	r2, [pc, #24]	; (800d0b0 <vPortFree+0xb8>)
 800d098:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d09a:	6938      	ldr	r0, [r7, #16]
 800d09c:	f000 f86c 	bl	800d178 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d0a0:	f7fe fb5c 	bl	800b75c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d0a4:	bf00      	nop
 800d0a6:	3718      	adds	r7, #24
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}
 800d0ac:	2000d8e0 	.word	0x2000d8e0
 800d0b0:	2000d8d8 	.word	0x2000d8d8

0800d0b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b085      	sub	sp, #20
 800d0b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d0ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d0be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d0c0:	4b27      	ldr	r3, [pc, #156]	; (800d160 <prvHeapInit+0xac>)
 800d0c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f003 0307 	and.w	r3, r3, #7
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d00c      	beq.n	800d0e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	3307      	adds	r3, #7
 800d0d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f023 0307 	bic.w	r3, r3, #7
 800d0da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d0dc:	68ba      	ldr	r2, [r7, #8]
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	1ad3      	subs	r3, r2, r3
 800d0e2:	4a1f      	ldr	r2, [pc, #124]	; (800d160 <prvHeapInit+0xac>)
 800d0e4:	4413      	add	r3, r2
 800d0e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d0ec:	4a1d      	ldr	r2, [pc, #116]	; (800d164 <prvHeapInit+0xb0>)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d0f2:	4b1c      	ldr	r3, [pc, #112]	; (800d164 <prvHeapInit+0xb0>)
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	68ba      	ldr	r2, [r7, #8]
 800d0fc:	4413      	add	r3, r2
 800d0fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d100:	2208      	movs	r2, #8
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	1a9b      	subs	r3, r3, r2
 800d106:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	f023 0307 	bic.w	r3, r3, #7
 800d10e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	4a15      	ldr	r2, [pc, #84]	; (800d168 <prvHeapInit+0xb4>)
 800d114:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d116:	4b14      	ldr	r3, [pc, #80]	; (800d168 <prvHeapInit+0xb4>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	2200      	movs	r2, #0
 800d11c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d11e:	4b12      	ldr	r3, [pc, #72]	; (800d168 <prvHeapInit+0xb4>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	2200      	movs	r2, #0
 800d124:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	68fa      	ldr	r2, [r7, #12]
 800d12e:	1ad2      	subs	r2, r2, r3
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d134:	4b0c      	ldr	r3, [pc, #48]	; (800d168 <prvHeapInit+0xb4>)
 800d136:	681a      	ldr	r2, [r3, #0]
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	4a0a      	ldr	r2, [pc, #40]	; (800d16c <prvHeapInit+0xb8>)
 800d142:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	685b      	ldr	r3, [r3, #4]
 800d148:	4a09      	ldr	r2, [pc, #36]	; (800d170 <prvHeapInit+0xbc>)
 800d14a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d14c:	4b09      	ldr	r3, [pc, #36]	; (800d174 <prvHeapInit+0xc0>)
 800d14e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d152:	601a      	str	r2, [r3, #0]
}
 800d154:	bf00      	nop
 800d156:	3714      	adds	r7, #20
 800d158:	46bd      	mov	sp, r7
 800d15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15e:	4770      	bx	lr
 800d160:	20009ccc 	.word	0x20009ccc
 800d164:	2000d8cc 	.word	0x2000d8cc
 800d168:	2000d8d4 	.word	0x2000d8d4
 800d16c:	2000d8dc 	.word	0x2000d8dc
 800d170:	2000d8d8 	.word	0x2000d8d8
 800d174:	2000d8e0 	.word	0x2000d8e0

0800d178 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d178:	b480      	push	{r7}
 800d17a:	b085      	sub	sp, #20
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d180:	4b28      	ldr	r3, [pc, #160]	; (800d224 <prvInsertBlockIntoFreeList+0xac>)
 800d182:	60fb      	str	r3, [r7, #12]
 800d184:	e002      	b.n	800d18c <prvInsertBlockIntoFreeList+0x14>
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	60fb      	str	r3, [r7, #12]
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	687a      	ldr	r2, [r7, #4]
 800d192:	429a      	cmp	r2, r3
 800d194:	d8f7      	bhi.n	800d186 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	68ba      	ldr	r2, [r7, #8]
 800d1a0:	4413      	add	r3, r2
 800d1a2:	687a      	ldr	r2, [r7, #4]
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d108      	bne.n	800d1ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	685a      	ldr	r2, [r3, #4]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	441a      	add	r2, r3
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	685b      	ldr	r3, [r3, #4]
 800d1c2:	68ba      	ldr	r2, [r7, #8]
 800d1c4:	441a      	add	r2, r3
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d118      	bne.n	800d200 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	681a      	ldr	r2, [r3, #0]
 800d1d2:	4b15      	ldr	r3, [pc, #84]	; (800d228 <prvInsertBlockIntoFreeList+0xb0>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d00d      	beq.n	800d1f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	685a      	ldr	r2, [r3, #4]
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	685b      	ldr	r3, [r3, #4]
 800d1e4:	441a      	add	r2, r3
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	681a      	ldr	r2, [r3, #0]
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	601a      	str	r2, [r3, #0]
 800d1f4:	e008      	b.n	800d208 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d1f6:	4b0c      	ldr	r3, [pc, #48]	; (800d228 <prvInsertBlockIntoFreeList+0xb0>)
 800d1f8:	681a      	ldr	r2, [r3, #0]
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	601a      	str	r2, [r3, #0]
 800d1fe:	e003      	b.n	800d208 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	681a      	ldr	r2, [r3, #0]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d208:	68fa      	ldr	r2, [r7, #12]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d002      	beq.n	800d216 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d216:	bf00      	nop
 800d218:	3714      	adds	r7, #20
 800d21a:	46bd      	mov	sp, r7
 800d21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d220:	4770      	bx	lr
 800d222:	bf00      	nop
 800d224:	2000d8cc 	.word	0x2000d8cc
 800d228:	2000d8d4 	.word	0x2000d8d4

0800d22c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b084      	sub	sp, #16
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	330c      	adds	r3, #12
 800d23c:	461a      	mov	r2, r3
 800d23e:	6839      	ldr	r1, [r7, #0]
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f003 fac5 	bl	80107d0 <tcpip_send_msg_wait_sem>
 800d246:	4603      	mov	r3, r0
 800d248:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800d24a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d103      	bne.n	800d25a <netconn_apimsg+0x2e>
    return apimsg->err;
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d258:	e001      	b.n	800d25e <netconn_apimsg+0x32>
  }
  return err;
 800d25a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3710      	adds	r7, #16
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
	...

0800d268 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b08c      	sub	sp, #48	; 0x30
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	4603      	mov	r3, r0
 800d270:	603a      	str	r2, [r7, #0]
 800d272:	71fb      	strb	r3, [r7, #7]
 800d274:	460b      	mov	r3, r1
 800d276:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800d278:	79fb      	ldrb	r3, [r7, #7]
 800d27a:	6839      	ldr	r1, [r7, #0]
 800d27c:	4618      	mov	r0, r3
 800d27e:	f000 ff2f 	bl	800e0e0 <netconn_alloc>
 800d282:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800d284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d286:	2b00      	cmp	r3, #0
 800d288:	d054      	beq.n	800d334 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800d28a:	79bb      	ldrb	r3, [r7, #6]
 800d28c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800d28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d290:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800d292:	f107 0308 	add.w	r3, r7, #8
 800d296:	4619      	mov	r1, r3
 800d298:	4829      	ldr	r0, [pc, #164]	; (800d340 <netconn_new_with_proto_and_callback+0xd8>)
 800d29a:	f7ff ffc7 	bl	800d22c <netconn_apimsg>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800d2a4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d043      	beq.n	800d334 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800d2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ae:	685b      	ldr	r3, [r3, #4]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d005      	beq.n	800d2c0 <netconn_new_with_proto_and_callback+0x58>
 800d2b4:	4b23      	ldr	r3, [pc, #140]	; (800d344 <netconn_new_with_proto_and_callback+0xdc>)
 800d2b6:	22a3      	movs	r2, #163	; 0xa3
 800d2b8:	4923      	ldr	r1, [pc, #140]	; (800d348 <netconn_new_with_proto_and_callback+0xe0>)
 800d2ba:	4824      	ldr	r0, [pc, #144]	; (800d34c <netconn_new_with_proto_and_callback+0xe4>)
 800d2bc:	f00e faa2 	bl	801b804 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800d2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c2:	3310      	adds	r3, #16
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f00e f92b 	bl	801b520 <sys_mbox_valid>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d105      	bne.n	800d2dc <netconn_new_with_proto_and_callback+0x74>
 800d2d0:	4b1c      	ldr	r3, [pc, #112]	; (800d344 <netconn_new_with_proto_and_callback+0xdc>)
 800d2d2:	22a4      	movs	r2, #164	; 0xa4
 800d2d4:	491e      	ldr	r1, [pc, #120]	; (800d350 <netconn_new_with_proto_and_callback+0xe8>)
 800d2d6:	481d      	ldr	r0, [pc, #116]	; (800d34c <netconn_new_with_proto_and_callback+0xe4>)
 800d2d8:	f00e fa94 	bl	801b804 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800d2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2de:	3314      	adds	r3, #20
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f00e f91d 	bl	801b520 <sys_mbox_valid>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d005      	beq.n	800d2f8 <netconn_new_with_proto_and_callback+0x90>
 800d2ec:	4b15      	ldr	r3, [pc, #84]	; (800d344 <netconn_new_with_proto_and_callback+0xdc>)
 800d2ee:	22a6      	movs	r2, #166	; 0xa6
 800d2f0:	4918      	ldr	r1, [pc, #96]	; (800d354 <netconn_new_with_proto_and_callback+0xec>)
 800d2f2:	4816      	ldr	r0, [pc, #88]	; (800d34c <netconn_new_with_proto_and_callback+0xe4>)
 800d2f4:	f00e fa86 	bl	801b804 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800d2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fa:	330c      	adds	r3, #12
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f00e f99d 	bl	801b63c <sys_sem_valid>
 800d302:	4603      	mov	r3, r0
 800d304:	2b00      	cmp	r3, #0
 800d306:	d105      	bne.n	800d314 <netconn_new_with_proto_and_callback+0xac>
 800d308:	4b0e      	ldr	r3, [pc, #56]	; (800d344 <netconn_new_with_proto_and_callback+0xdc>)
 800d30a:	22a9      	movs	r2, #169	; 0xa9
 800d30c:	4912      	ldr	r1, [pc, #72]	; (800d358 <netconn_new_with_proto_and_callback+0xf0>)
 800d30e:	480f      	ldr	r0, [pc, #60]	; (800d34c <netconn_new_with_proto_and_callback+0xe4>)
 800d310:	f00e fa78 	bl	801b804 <iprintf>
      sys_sem_free(&conn->op_completed);
 800d314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d316:	330c      	adds	r3, #12
 800d318:	4618      	mov	r0, r3
 800d31a:	f00e f982 	bl	801b622 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800d31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d320:	3310      	adds	r3, #16
 800d322:	4618      	mov	r0, r3
 800d324:	f00e f888 	bl	801b438 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800d328:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d32a:	2007      	movs	r0, #7
 800d32c:	f003 fffe 	bl	801132c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800d330:	2300      	movs	r3, #0
 800d332:	e000      	b.n	800d336 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800d334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d336:	4618      	mov	r0, r3
 800d338:	3730      	adds	r7, #48	; 0x30
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
 800d33e:	bf00      	nop
 800d340:	0800e0b5 	.word	0x0800e0b5
 800d344:	0801cd14 	.word	0x0801cd14
 800d348:	0801cd48 	.word	0x0801cd48
 800d34c:	0801cd6c 	.word	0x0801cd6c
 800d350:	0801cd94 	.word	0x0801cd94
 800d354:	0801cdac 	.word	0x0801cdac
 800d358:	0801cdd0 	.word	0x0801cdd0

0800d35c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b08c      	sub	sp, #48	; 0x30
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d101      	bne.n	800d36e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800d36a:	2300      	movs	r3, #0
 800d36c:	e014      	b.n	800d398 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800d372:	2329      	movs	r3, #41	; 0x29
 800d374:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800d376:	f107 030c 	add.w	r3, r7, #12
 800d37a:	4619      	mov	r1, r3
 800d37c:	4808      	ldr	r0, [pc, #32]	; (800d3a0 <netconn_prepare_delete+0x44>)
 800d37e:	f7ff ff55 	bl	800d22c <netconn_apimsg>
 800d382:	4603      	mov	r3, r0
 800d384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800d388:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d002      	beq.n	800d396 <netconn_prepare_delete+0x3a>
    return err;
 800d390:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d394:	e000      	b.n	800d398 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800d396:	2300      	movs	r3, #0
}
 800d398:	4618      	mov	r0, r3
 800d39a:	3730      	adds	r7, #48	; 0x30
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}
 800d3a0:	0800e621 	.word	0x0800e621

0800d3a4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b084      	sub	sp, #16
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d101      	bne.n	800d3b6 <netconn_delete+0x12>
    return ERR_OK;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	e00d      	b.n	800d3d2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f7ff ffd0 	bl	800d35c <netconn_prepare_delete>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800d3c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d102      	bne.n	800d3ce <netconn_delete+0x2a>
    netconn_free(conn);
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f000 fef7 	bl	800e1bc <netconn_free>
  }
  return err;
 800d3ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3710      	adds	r7, #16
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
	...

0800d3dc <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b08e      	sub	sp, #56	; 0x38
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	60f8      	str	r0, [r7, #12]
 800d3e4:	60b9      	str	r1, [r7, #8]
 800d3e6:	607a      	str	r2, [r7, #4]
 800d3e8:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d109      	bne.n	800d404 <netconn_getaddr+0x28>
 800d3f0:	4b1d      	ldr	r3, [pc, #116]	; (800d468 <netconn_getaddr+0x8c>)
 800d3f2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d3f6:	491d      	ldr	r1, [pc, #116]	; (800d46c <netconn_getaddr+0x90>)
 800d3f8:	481d      	ldr	r0, [pc, #116]	; (800d470 <netconn_getaddr+0x94>)
 800d3fa:	f00e fa03 	bl	801b804 <iprintf>
 800d3fe:	f06f 030f 	mvn.w	r3, #15
 800d402:	e02d      	b.n	800d460 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d109      	bne.n	800d41e <netconn_getaddr+0x42>
 800d40a:	4b17      	ldr	r3, [pc, #92]	; (800d468 <netconn_getaddr+0x8c>)
 800d40c:	f240 1213 	movw	r2, #275	; 0x113
 800d410:	4918      	ldr	r1, [pc, #96]	; (800d474 <netconn_getaddr+0x98>)
 800d412:	4817      	ldr	r0, [pc, #92]	; (800d470 <netconn_getaddr+0x94>)
 800d414:	f00e f9f6 	bl	801b804 <iprintf>
 800d418:	f06f 030f 	mvn.w	r3, #15
 800d41c:	e020      	b.n	800d460 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d109      	bne.n	800d438 <netconn_getaddr+0x5c>
 800d424:	4b10      	ldr	r3, [pc, #64]	; (800d468 <netconn_getaddr+0x8c>)
 800d426:	f44f 728a 	mov.w	r2, #276	; 0x114
 800d42a:	4913      	ldr	r1, [pc, #76]	; (800d478 <netconn_getaddr+0x9c>)
 800d42c:	4810      	ldr	r0, [pc, #64]	; (800d470 <netconn_getaddr+0x94>)
 800d42e:	f00e f9e9 	bl	801b804 <iprintf>
 800d432:	f06f 030f 	mvn.w	r3, #15
 800d436:	e013      	b.n	800d460 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800d43c:	78fb      	ldrb	r3, [r7, #3]
 800d43e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800d44a:	f107 0314 	add.w	r3, r7, #20
 800d44e:	4619      	mov	r1, r3
 800d450:	480a      	ldr	r0, [pc, #40]	; (800d47c <netconn_getaddr+0xa0>)
 800d452:	f7ff feeb 	bl	800d22c <netconn_apimsg>
 800d456:	4603      	mov	r3, r0
 800d458:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800d45c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d460:	4618      	mov	r0, r3
 800d462:	3738      	adds	r7, #56	; 0x38
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}
 800d468:	0801cd14 	.word	0x0801cd14
 800d46c:	0801cdec 	.word	0x0801cdec
 800d470:	0801cd6c 	.word	0x0801cd6c
 800d474:	0801ce0c 	.word	0x0801ce0c
 800d478:	0801ce2c 	.word	0x0801ce2c
 800d47c:	0800ec61 	.word	0x0800ec61

0800d480 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b08e      	sub	sp, #56	; 0x38
 800d484:	af00      	add	r7, sp, #0
 800d486:	60f8      	str	r0, [r7, #12]
 800d488:	60b9      	str	r1, [r7, #8]
 800d48a:	4613      	mov	r3, r2
 800d48c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d109      	bne.n	800d4a8 <netconn_bind+0x28>
 800d494:	4b11      	ldr	r3, [pc, #68]	; (800d4dc <netconn_bind+0x5c>)
 800d496:	f44f 729c 	mov.w	r2, #312	; 0x138
 800d49a:	4911      	ldr	r1, [pc, #68]	; (800d4e0 <netconn_bind+0x60>)
 800d49c:	4811      	ldr	r0, [pc, #68]	; (800d4e4 <netconn_bind+0x64>)
 800d49e:	f00e f9b1 	bl	801b804 <iprintf>
 800d4a2:	f06f 030f 	mvn.w	r3, #15
 800d4a6:	e015      	b.n	800d4d4 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d101      	bne.n	800d4b2 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800d4ae:	4b0e      	ldr	r3, [pc, #56]	; (800d4e8 <netconn_bind+0x68>)
 800d4b0:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800d4ba:	88fb      	ldrh	r3, [r7, #6]
 800d4bc:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800d4be:	f107 0314 	add.w	r3, r7, #20
 800d4c2:	4619      	mov	r1, r3
 800d4c4:	4809      	ldr	r0, [pc, #36]	; (800d4ec <netconn_bind+0x6c>)
 800d4c6:	f7ff feb1 	bl	800d22c <netconn_apimsg>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800d4d0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3738      	adds	r7, #56	; 0x38
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}
 800d4dc:	0801cd14 	.word	0x0801cd14
 800d4e0:	0801ce4c 	.word	0x0801ce4c
 800d4e4:	0801cd6c 	.word	0x0801cd6c
 800d4e8:	0802060c 	.word	0x0802060c
 800d4ec:	0800e7e9 	.word	0x0800e7e9

0800d4f0 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b088      	sub	sp, #32
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	4613      	mov	r3, r2
 800d4fc:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800d4fe:	2300      	movs	r3, #0
 800d500:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d109      	bne.n	800d51c <netconn_recv_data+0x2c>
 800d508:	4b58      	ldr	r3, [pc, #352]	; (800d66c <netconn_recv_data+0x17c>)
 800d50a:	f44f 7212 	mov.w	r2, #584	; 0x248
 800d50e:	4958      	ldr	r1, [pc, #352]	; (800d670 <netconn_recv_data+0x180>)
 800d510:	4858      	ldr	r0, [pc, #352]	; (800d674 <netconn_recv_data+0x184>)
 800d512:	f00e f977 	bl	801b804 <iprintf>
 800d516:	f06f 030f 	mvn.w	r3, #15
 800d51a:	e0a2      	b.n	800d662 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	2200      	movs	r2, #0
 800d520:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d109      	bne.n	800d53c <netconn_recv_data+0x4c>
 800d528:	4b50      	ldr	r3, [pc, #320]	; (800d66c <netconn_recv_data+0x17c>)
 800d52a:	f240 224a 	movw	r2, #586	; 0x24a
 800d52e:	4952      	ldr	r1, [pc, #328]	; (800d678 <netconn_recv_data+0x188>)
 800d530:	4850      	ldr	r0, [pc, #320]	; (800d674 <netconn_recv_data+0x184>)
 800d532:	f00e f967 	bl	801b804 <iprintf>
 800d536:	f06f 030f 	mvn.w	r3, #15
 800d53a:	e092      	b.n	800d662 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	3310      	adds	r3, #16
 800d540:	4618      	mov	r0, r3
 800d542:	f00d ffed 	bl	801b520 <sys_mbox_valid>
 800d546:	4603      	mov	r3, r0
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d10e      	bne.n	800d56a <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800d54c:	68f8      	ldr	r0, [r7, #12]
 800d54e:	f000 fa01 	bl	800d954 <netconn_err>
 800d552:	4603      	mov	r3, r0
 800d554:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800d556:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d002      	beq.n	800d564 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800d55e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800d562:	e07e      	b.n	800d662 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800d564:	f06f 030a 	mvn.w	r3, #10
 800d568:	e07b      	b.n	800d662 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	7f1b      	ldrb	r3, [r3, #28]
 800d56e:	f003 0302 	and.w	r3, r3, #2
 800d572:	2b00      	cmp	r3, #0
 800d574:	d10f      	bne.n	800d596 <netconn_recv_data+0xa6>
 800d576:	79fb      	ldrb	r3, [r7, #7]
 800d578:	f003 0304 	and.w	r3, r3, #4
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d10a      	bne.n	800d596 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	7f1b      	ldrb	r3, [r3, #28]
 800d584:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d104      	bne.n	800d596 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d023      	beq.n	800d5de <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	3310      	adds	r3, #16
 800d59a:	f107 0218 	add.w	r2, r7, #24
 800d59e:	4611      	mov	r1, r2
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f00d ffa6 	bl	801b4f2 <sys_arch_mbox_tryfetch>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5ac:	d11f      	bne.n	800d5ee <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800d5ae:	68f8      	ldr	r0, [r7, #12]
 800d5b0:	f000 f9d0 	bl	800d954 <netconn_err>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800d5b8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d002      	beq.n	800d5c6 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800d5c0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d5c4:	e04d      	b.n	800d662 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	7f1b      	ldrb	r3, [r3, #28]
 800d5ca:	f003 0301 	and.w	r3, r3, #1
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d002      	beq.n	800d5d8 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800d5d2:	f06f 030a 	mvn.w	r3, #10
 800d5d6:	e044      	b.n	800d662 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800d5d8:	f06f 0306 	mvn.w	r3, #6
 800d5dc:	e041      	b.n	800d662 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	3310      	adds	r3, #16
 800d5e2:	f107 0118 	add.w	r1, r7, #24
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f00d ff51 	bl	801b490 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	781b      	ldrb	r3, [r3, #0]
 800d5f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d5f6:	2b10      	cmp	r3, #16
 800d5f8:	d117      	bne.n	800d62a <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800d5fa:	69bb      	ldr	r3, [r7, #24]
 800d5fc:	f107 0217 	add.w	r2, r7, #23
 800d600:	4611      	mov	r1, r2
 800d602:	4618      	mov	r0, r3
 800d604:	f000 f9f8 	bl	800d9f8 <lwip_netconn_is_err_msg>
 800d608:	4603      	mov	r3, r0
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d009      	beq.n	800d622 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800d60e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d612:	f113 0f0f 	cmn.w	r3, #15
 800d616:	d101      	bne.n	800d61c <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800d618:	2300      	movs	r3, #0
 800d61a:	e022      	b.n	800d662 <netconn_recv_data+0x172>
      }
      return err;
 800d61c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d620:	e01f      	b.n	800d662 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800d622:	69bb      	ldr	r3, [r7, #24]
 800d624:	891b      	ldrh	r3, [r3, #8]
 800d626:	83fb      	strh	r3, [r7, #30]
 800d628:	e00d      	b.n	800d646 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800d62a:	69bb      	ldr	r3, [r7, #24]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d106      	bne.n	800d63e <netconn_recv_data+0x14e>
 800d630:	4b0e      	ldr	r3, [pc, #56]	; (800d66c <netconn_recv_data+0x17c>)
 800d632:	f240 2291 	movw	r2, #657	; 0x291
 800d636:	4911      	ldr	r1, [pc, #68]	; (800d67c <netconn_recv_data+0x18c>)
 800d638:	480e      	ldr	r0, [pc, #56]	; (800d674 <netconn_recv_data+0x184>)
 800d63a:	f00e f8e3 	bl	801b804 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800d63e:	69bb      	ldr	r3, [r7, #24]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	891b      	ldrh	r3, [r3, #8]
 800d644:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d005      	beq.n	800d65a <netconn_recv_data+0x16a>
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d652:	8bfa      	ldrh	r2, [r7, #30]
 800d654:	2101      	movs	r1, #1
 800d656:	68f8      	ldr	r0, [r7, #12]
 800d658:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800d65a:	69ba      	ldr	r2, [r7, #24]
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800d660:	2300      	movs	r3, #0
}
 800d662:	4618      	mov	r0, r3
 800d664:	3720      	adds	r7, #32
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}
 800d66a:	bf00      	nop
 800d66c:	0801cd14 	.word	0x0801cd14
 800d670:	0801cf2c 	.word	0x0801cf2c
 800d674:	0801cd6c 	.word	0x0801cd6c
 800d678:	0801cf4c 	.word	0x0801cf4c
 800d67c:	0801cf68 	.word	0x0801cf68

0800d680 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b084      	sub	sp, #16
 800d684:	af00      	add	r7, sp, #0
 800d686:	60f8      	str	r0, [r7, #12]
 800d688:	60b9      	str	r1, [r7, #8]
 800d68a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d005      	beq.n	800d69e <netconn_tcp_recvd_msg+0x1e>
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d69a:	2b10      	cmp	r3, #16
 800d69c:	d009      	beq.n	800d6b2 <netconn_tcp_recvd_msg+0x32>
 800d69e:	4b0c      	ldr	r3, [pc, #48]	; (800d6d0 <netconn_tcp_recvd_msg+0x50>)
 800d6a0:	f240 22a7 	movw	r2, #679	; 0x2a7
 800d6a4:	490b      	ldr	r1, [pc, #44]	; (800d6d4 <netconn_tcp_recvd_msg+0x54>)
 800d6a6:	480c      	ldr	r0, [pc, #48]	; (800d6d8 <netconn_tcp_recvd_msg+0x58>)
 800d6a8:	f00e f8ac 	bl	801b804 <iprintf>
 800d6ac:	f06f 030f 	mvn.w	r3, #15
 800d6b0:	e00a      	b.n	800d6c8 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	68fa      	ldr	r2, [r7, #12]
 800d6b6:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	68ba      	ldr	r2, [r7, #8]
 800d6bc:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800d6be:	6879      	ldr	r1, [r7, #4]
 800d6c0:	4806      	ldr	r0, [pc, #24]	; (800d6dc <netconn_tcp_recvd_msg+0x5c>)
 800d6c2:	f7ff fdb3 	bl	800d22c <netconn_apimsg>
 800d6c6:	4603      	mov	r3, r0
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3710      	adds	r7, #16
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}
 800d6d0:	0801cd14 	.word	0x0801cd14
 800d6d4:	0801cf74 	.word	0x0801cf74
 800d6d8:	0801cd6c 	.word	0x0801cd6c
 800d6dc:	0800e85d 	.word	0x0800e85d

0800d6e0 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b08c      	sub	sp, #48	; 0x30
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d005      	beq.n	800d6fc <netconn_tcp_recvd+0x1c>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	781b      	ldrb	r3, [r3, #0]
 800d6f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d6f8:	2b10      	cmp	r3, #16
 800d6fa:	d009      	beq.n	800d710 <netconn_tcp_recvd+0x30>
 800d6fc:	4b0c      	ldr	r3, [pc, #48]	; (800d730 <netconn_tcp_recvd+0x50>)
 800d6fe:	f240 22b5 	movw	r2, #693	; 0x2b5
 800d702:	490c      	ldr	r1, [pc, #48]	; (800d734 <netconn_tcp_recvd+0x54>)
 800d704:	480c      	ldr	r0, [pc, #48]	; (800d738 <netconn_tcp_recvd+0x58>)
 800d706:	f00e f87d 	bl	801b804 <iprintf>
 800d70a:	f06f 030f 	mvn.w	r3, #15
 800d70e:	e00b      	b.n	800d728 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800d710:	f107 030c 	add.w	r3, r7, #12
 800d714:	461a      	mov	r2, r3
 800d716:	6839      	ldr	r1, [r7, #0]
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f7ff ffb1 	bl	800d680 <netconn_tcp_recvd_msg>
 800d71e:	4603      	mov	r3, r0
 800d720:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800d724:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3730      	adds	r7, #48	; 0x30
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}
 800d730:	0801cd14 	.word	0x0801cd14
 800d734:	0801cf74 	.word	0x0801cf74
 800d738:	0801cd6c 	.word	0x0801cd6c

0800d73c <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b090      	sub	sp, #64	; 0x40
 800d740:	af00      	add	r7, sp, #0
 800d742:	60f8      	str	r0, [r7, #12]
 800d744:	60b9      	str	r1, [r7, #8]
 800d746:	4613      	mov	r3, r2
 800d748:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	3310      	adds	r3, #16
 800d74e:	4618      	mov	r0, r3
 800d750:	f00d fee6 	bl	801b520 <sys_mbox_valid>
 800d754:	4603      	mov	r3, r0
 800d756:	2b00      	cmp	r3, #0
 800d758:	d102      	bne.n	800d760 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800d75a:	f06f 030a 	mvn.w	r3, #10
 800d75e:	e06d      	b.n	800d83c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	7f1b      	ldrb	r3, [r3, #28]
 800d764:	b25b      	sxtb	r3, r3
 800d766:	2b00      	cmp	r3, #0
 800d768:	da07      	bge.n	800d77a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	7f1b      	ldrb	r3, [r3, #28]
 800d76e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d772:	b2da      	uxtb	r2, r3
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800d778:	e039      	b.n	800d7ee <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800d77a:	79fb      	ldrb	r3, [r7, #7]
 800d77c:	461a      	mov	r2, r3
 800d77e:	68b9      	ldr	r1, [r7, #8]
 800d780:	68f8      	ldr	r0, [r7, #12]
 800d782:	f7ff feb5 	bl	800d4f0 <netconn_recv_data>
 800d786:	4603      	mov	r3, r0
 800d788:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800d78c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d790:	2b00      	cmp	r3, #0
 800d792:	d002      	beq.n	800d79a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800d794:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d798:	e050      	b.n	800d83c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800d7a0:	79fb      	ldrb	r3, [r7, #7]
 800d7a2:	f003 0308 	and.w	r3, r3, #8
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d10e      	bne.n	800d7c8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800d7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d002      	beq.n	800d7b6 <netconn_recv_data_tcp+0x7a>
 800d7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b2:	891b      	ldrh	r3, [r3, #8]
 800d7b4:	e000      	b.n	800d7b8 <netconn_recv_data_tcp+0x7c>
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800d7ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d7bc:	f107 0214 	add.w	r2, r7, #20
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	68f8      	ldr	r0, [r7, #12]
 800d7c4:	f7ff ff5c 	bl	800d680 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800d7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d134      	bne.n	800d838 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800d7ce:	79fb      	ldrb	r3, [r7, #7]
 800d7d0:	f003 0310 	and.w	r3, r3, #16
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d009      	beq.n	800d7ec <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	7f1b      	ldrb	r3, [r3, #28]
 800d7dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d7e0:	b2da      	uxtb	r2, r3
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800d7e6:	f06f 0306 	mvn.w	r3, #6
 800d7ea:	e027      	b.n	800d83c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800d7ec:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d005      	beq.n	800d802 <netconn_recv_data_tcp+0xc6>
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	2101      	movs	r1, #1
 800d7fe:	68f8      	ldr	r0, [r7, #12]
 800d800:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	685b      	ldr	r3, [r3, #4]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d10f      	bne.n	800d82a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800d80a:	68f8      	ldr	r0, [r7, #12]
 800d80c:	f000 f8a2 	bl	800d954 <netconn_err>
 800d810:	4603      	mov	r3, r0
 800d812:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800d816:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d002      	beq.n	800d824 <netconn_recv_data_tcp+0xe8>
          return err;
 800d81e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d822:	e00b      	b.n	800d83c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800d824:	f06f 030d 	mvn.w	r3, #13
 800d828:	e008      	b.n	800d83c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800d82a:	2101      	movs	r1, #1
 800d82c:	68f8      	ldr	r0, [r7, #12]
 800d82e:	f000 f861 	bl	800d8f4 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800d832:	f06f 030e 	mvn.w	r3, #14
 800d836:	e001      	b.n	800d83c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800d838:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3740      	adds	r7, #64	; 0x40
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}

0800d844 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b084      	sub	sp, #16
 800d848:	af00      	add	r7, sp, #0
 800d84a:	60f8      	str	r0, [r7, #12]
 800d84c:	60b9      	str	r1, [r7, #8]
 800d84e:	4613      	mov	r3, r2
 800d850:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d005      	beq.n	800d864 <netconn_recv_tcp_pbuf_flags+0x20>
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	781b      	ldrb	r3, [r3, #0]
 800d85c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d860:	2b10      	cmp	r3, #16
 800d862:	d009      	beq.n	800d878 <netconn_recv_tcp_pbuf_flags+0x34>
 800d864:	4b0a      	ldr	r3, [pc, #40]	; (800d890 <netconn_recv_tcp_pbuf_flags+0x4c>)
 800d866:	f240 3225 	movw	r2, #805	; 0x325
 800d86a:	490a      	ldr	r1, [pc, #40]	; (800d894 <netconn_recv_tcp_pbuf_flags+0x50>)
 800d86c:	480a      	ldr	r0, [pc, #40]	; (800d898 <netconn_recv_tcp_pbuf_flags+0x54>)
 800d86e:	f00d ffc9 	bl	801b804 <iprintf>
 800d872:	f06f 030f 	mvn.w	r3, #15
 800d876:	e006      	b.n	800d886 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800d878:	79fb      	ldrb	r3, [r7, #7]
 800d87a:	461a      	mov	r2, r3
 800d87c:	68b9      	ldr	r1, [r7, #8]
 800d87e:	68f8      	ldr	r0, [r7, #12]
 800d880:	f7ff ff5c 	bl	800d73c <netconn_recv_data_tcp>
 800d884:	4603      	mov	r3, r0
}
 800d886:	4618      	mov	r0, r3
 800d888:	3710      	adds	r7, #16
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}
 800d88e:	bf00      	nop
 800d890:	0801cd14 	.word	0x0801cd14
 800d894:	0801cf74 	.word	0x0801cf74
 800d898:	0801cd6c 	.word	0x0801cd6c

0800d89c <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b084      	sub	sp, #16
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	60f8      	str	r0, [r7, #12]
 800d8a4:	60b9      	str	r1, [r7, #8]
 800d8a6:	4613      	mov	r3, r2
 800d8a8:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d005      	beq.n	800d8bc <netconn_recv_udp_raw_netbuf_flags+0x20>
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	781b      	ldrb	r3, [r3, #0]
 800d8b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d8b8:	2b10      	cmp	r3, #16
 800d8ba:	d109      	bne.n	800d8d0 <netconn_recv_udp_raw_netbuf_flags+0x34>
 800d8bc:	4b0a      	ldr	r3, [pc, #40]	; (800d8e8 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800d8be:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800d8c2:	490a      	ldr	r1, [pc, #40]	; (800d8ec <netconn_recv_udp_raw_netbuf_flags+0x50>)
 800d8c4:	480a      	ldr	r0, [pc, #40]	; (800d8f0 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800d8c6:	f00d ff9d 	bl	801b804 <iprintf>
 800d8ca:	f06f 030f 	mvn.w	r3, #15
 800d8ce:	e006      	b.n	800d8de <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800d8d0:	79fb      	ldrb	r3, [r7, #7]
 800d8d2:	461a      	mov	r2, r3
 800d8d4:	68b9      	ldr	r1, [r7, #8]
 800d8d6:	68f8      	ldr	r0, [r7, #12]
 800d8d8:	f7ff fe0a 	bl	800d4f0 <netconn_recv_data>
 800d8dc:	4603      	mov	r3, r0
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3710      	adds	r7, #16
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
 800d8e6:	bf00      	nop
 800d8e8:	0801cd14 	.word	0x0801cd14
 800d8ec:	0801cf98 	.word	0x0801cf98
 800d8f0:	0801cd6c 	.word	0x0801cd6c

0800d8f4 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b08c      	sub	sp, #48	; 0x30
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
 800d8fc:	460b      	mov	r3, r1
 800d8fe:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d109      	bne.n	800d91a <netconn_close_shutdown+0x26>
 800d906:	4b0f      	ldr	r3, [pc, #60]	; (800d944 <netconn_close_shutdown+0x50>)
 800d908:	f240 4247 	movw	r2, #1095	; 0x447
 800d90c:	490e      	ldr	r1, [pc, #56]	; (800d948 <netconn_close_shutdown+0x54>)
 800d90e:	480f      	ldr	r0, [pc, #60]	; (800d94c <netconn_close_shutdown+0x58>)
 800d910:	f00d ff78 	bl	801b804 <iprintf>
 800d914:	f06f 030f 	mvn.w	r3, #15
 800d918:	e010      	b.n	800d93c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800d91e:	78fb      	ldrb	r3, [r7, #3]
 800d920:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800d922:	2329      	movs	r3, #41	; 0x29
 800d924:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800d926:	f107 030c 	add.w	r3, r7, #12
 800d92a:	4619      	mov	r1, r3
 800d92c:	4808      	ldr	r0, [pc, #32]	; (800d950 <netconn_close_shutdown+0x5c>)
 800d92e:	f7ff fc7d 	bl	800d22c <netconn_apimsg>
 800d932:	4603      	mov	r3, r0
 800d934:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800d938:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3730      	adds	r7, #48	; 0x30
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}
 800d944:	0801cd14 	.word	0x0801cd14
 800d948:	0801d050 	.word	0x0801d050
 800d94c:	0801cd6c 	.word	0x0801cd6c
 800d950:	0800ed6d 	.word	0x0800ed6d

0800d954 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b084      	sub	sp, #16
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d101      	bne.n	800d966 <netconn_err+0x12>
    return ERR_OK;
 800d962:	2300      	movs	r3, #0
 800d964:	e00d      	b.n	800d982 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800d966:	f00d fee5 	bl	801b734 <sys_arch_protect>
 800d96a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	7a1b      	ldrb	r3, [r3, #8]
 800d970:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2200      	movs	r2, #0
 800d976:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800d978:	68f8      	ldr	r0, [r7, #12]
 800d97a:	f00d fee9 	bl	801b750 <sys_arch_unprotect>
  return err;
 800d97e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d982:	4618      	mov	r0, r3
 800d984:	3710      	adds	r7, #16
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
	...

0800d98c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
 800d992:	4603      	mov	r3, r0
 800d994:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800d996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d99a:	f113 0f0d 	cmn.w	r3, #13
 800d99e:	d009      	beq.n	800d9b4 <lwip_netconn_err_to_msg+0x28>
 800d9a0:	f113 0f0d 	cmn.w	r3, #13
 800d9a4:	dc0c      	bgt.n	800d9c0 <lwip_netconn_err_to_msg+0x34>
 800d9a6:	f113 0f0f 	cmn.w	r3, #15
 800d9aa:	d007      	beq.n	800d9bc <lwip_netconn_err_to_msg+0x30>
 800d9ac:	f113 0f0e 	cmn.w	r3, #14
 800d9b0:	d002      	beq.n	800d9b8 <lwip_netconn_err_to_msg+0x2c>
 800d9b2:	e005      	b.n	800d9c0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800d9b4:	4b0a      	ldr	r3, [pc, #40]	; (800d9e0 <lwip_netconn_err_to_msg+0x54>)
 800d9b6:	e00e      	b.n	800d9d6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800d9b8:	4b0a      	ldr	r3, [pc, #40]	; (800d9e4 <lwip_netconn_err_to_msg+0x58>)
 800d9ba:	e00c      	b.n	800d9d6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800d9bc:	4b0a      	ldr	r3, [pc, #40]	; (800d9e8 <lwip_netconn_err_to_msg+0x5c>)
 800d9be:	e00a      	b.n	800d9d6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800d9c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d005      	beq.n	800d9d4 <lwip_netconn_err_to_msg+0x48>
 800d9c8:	4b08      	ldr	r3, [pc, #32]	; (800d9ec <lwip_netconn_err_to_msg+0x60>)
 800d9ca:	227d      	movs	r2, #125	; 0x7d
 800d9cc:	4908      	ldr	r1, [pc, #32]	; (800d9f0 <lwip_netconn_err_to_msg+0x64>)
 800d9ce:	4809      	ldr	r0, [pc, #36]	; (800d9f4 <lwip_netconn_err_to_msg+0x68>)
 800d9d0:	f00d ff18 	bl	801b804 <iprintf>
      return NULL;
 800d9d4:	2300      	movs	r3, #0
  }
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3708      	adds	r7, #8
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}
 800d9de:	bf00      	nop
 800d9e0:	080204b4 	.word	0x080204b4
 800d9e4:	080204b5 	.word	0x080204b5
 800d9e8:	080204b6 	.word	0x080204b6
 800d9ec:	0801d06c 	.word	0x0801d06c
 800d9f0:	0801d0a0 	.word	0x0801d0a0
 800d9f4:	0801d0b0 	.word	0x0801d0b0

0800d9f8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b082      	sub	sp, #8
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d105      	bne.n	800da14 <lwip_netconn_is_err_msg+0x1c>
 800da08:	4b12      	ldr	r3, [pc, #72]	; (800da54 <lwip_netconn_is_err_msg+0x5c>)
 800da0a:	2285      	movs	r2, #133	; 0x85
 800da0c:	4912      	ldr	r1, [pc, #72]	; (800da58 <lwip_netconn_is_err_msg+0x60>)
 800da0e:	4813      	ldr	r0, [pc, #76]	; (800da5c <lwip_netconn_is_err_msg+0x64>)
 800da10:	f00d fef8 	bl	801b804 <iprintf>

  if (msg == &netconn_aborted) {
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	4a12      	ldr	r2, [pc, #72]	; (800da60 <lwip_netconn_is_err_msg+0x68>)
 800da18:	4293      	cmp	r3, r2
 800da1a:	d104      	bne.n	800da26 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	22f3      	movs	r2, #243	; 0xf3
 800da20:	701a      	strb	r2, [r3, #0]
    return 1;
 800da22:	2301      	movs	r3, #1
 800da24:	e012      	b.n	800da4c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	4a0e      	ldr	r2, [pc, #56]	; (800da64 <lwip_netconn_is_err_msg+0x6c>)
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d104      	bne.n	800da38 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	22f2      	movs	r2, #242	; 0xf2
 800da32:	701a      	strb	r2, [r3, #0]
    return 1;
 800da34:	2301      	movs	r3, #1
 800da36:	e009      	b.n	800da4c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	4a0b      	ldr	r2, [pc, #44]	; (800da68 <lwip_netconn_is_err_msg+0x70>)
 800da3c:	4293      	cmp	r3, r2
 800da3e:	d104      	bne.n	800da4a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	22f1      	movs	r2, #241	; 0xf1
 800da44:	701a      	strb	r2, [r3, #0]
    return 1;
 800da46:	2301      	movs	r3, #1
 800da48:	e000      	b.n	800da4c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800da4a:	2300      	movs	r3, #0
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	3708      	adds	r7, #8
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}
 800da54:	0801d06c 	.word	0x0801d06c
 800da58:	0801d0d8 	.word	0x0801d0d8
 800da5c:	0801d0b0 	.word	0x0801d0b0
 800da60:	080204b4 	.word	0x080204b4
 800da64:	080204b5 	.word	0x080204b5
 800da68:	080204b6 	.word	0x080204b6

0800da6c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b088      	sub	sp, #32
 800da70:	af00      	add	r7, sp, #0
 800da72:	60f8      	str	r0, [r7, #12]
 800da74:	60b9      	str	r1, [r7, #8]
 800da76:	607a      	str	r2, [r7, #4]
 800da78:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d105      	bne.n	800da8c <recv_udp+0x20>
 800da80:	4b34      	ldr	r3, [pc, #208]	; (800db54 <recv_udp+0xe8>)
 800da82:	22e5      	movs	r2, #229	; 0xe5
 800da84:	4934      	ldr	r1, [pc, #208]	; (800db58 <recv_udp+0xec>)
 800da86:	4835      	ldr	r0, [pc, #212]	; (800db5c <recv_udp+0xf0>)
 800da88:	f00d febc 	bl	801b804 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d105      	bne.n	800da9e <recv_udp+0x32>
 800da92:	4b30      	ldr	r3, [pc, #192]	; (800db54 <recv_udp+0xe8>)
 800da94:	22e6      	movs	r2, #230	; 0xe6
 800da96:	4932      	ldr	r1, [pc, #200]	; (800db60 <recv_udp+0xf4>)
 800da98:	4830      	ldr	r0, [pc, #192]	; (800db5c <recv_udp+0xf0>)
 800da9a:	f00d feb3 	bl	801b804 <iprintf>
  conn = (struct netconn *)arg;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800daa2:	69fb      	ldr	r3, [r7, #28]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d103      	bne.n	800dab0 <recv_udp+0x44>
    pbuf_free(p);
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f004 fb15 	bl	80120d8 <pbuf_free>
    return;
 800daae:	e04d      	b.n	800db4c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800dab0:	69fb      	ldr	r3, [r7, #28]
 800dab2:	685b      	ldr	r3, [r3, #4]
 800dab4:	68ba      	ldr	r2, [r7, #8]
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d005      	beq.n	800dac6 <recv_udp+0x5a>
 800daba:	4b26      	ldr	r3, [pc, #152]	; (800db54 <recv_udp+0xe8>)
 800dabc:	22ee      	movs	r2, #238	; 0xee
 800dabe:	4929      	ldr	r1, [pc, #164]	; (800db64 <recv_udp+0xf8>)
 800dac0:	4826      	ldr	r0, [pc, #152]	; (800db5c <recv_udp+0xf0>)
 800dac2:	f00d fe9f 	bl	801b804 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800dac6:	69fb      	ldr	r3, [r7, #28]
 800dac8:	3310      	adds	r3, #16
 800daca:	4618      	mov	r0, r3
 800dacc:	f00d fd28 	bl	801b520 <sys_mbox_valid>
 800dad0:	4603      	mov	r3, r0
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d103      	bne.n	800dade <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f004 fafe 	bl	80120d8 <pbuf_free>
    return;
 800dadc:	e036      	b.n	800db4c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800dade:	2006      	movs	r0, #6
 800dae0:	f003 fbae 	bl	8011240 <memp_malloc>
 800dae4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800dae6:	69bb      	ldr	r3, [r7, #24]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d103      	bne.n	800daf4 <recv_udp+0x88>
    pbuf_free(p);
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f004 faf3 	bl	80120d8 <pbuf_free>
    return;
 800daf2:	e02b      	b.n	800db4c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800daf4:	69bb      	ldr	r3, [r7, #24]
 800daf6:	687a      	ldr	r2, [r7, #4]
 800daf8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800dafa:	69bb      	ldr	r3, [r7, #24]
 800dafc:	687a      	ldr	r2, [r7, #4]
 800dafe:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d002      	beq.n	800db0c <recv_udp+0xa0>
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	e000      	b.n	800db0e <recv_udp+0xa2>
 800db0c:	2300      	movs	r3, #0
 800db0e:	69ba      	ldr	r2, [r7, #24]
 800db10:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800db12:	69bb      	ldr	r3, [r7, #24]
 800db14:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800db16:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	891b      	ldrh	r3, [r3, #8]
 800db1c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800db1e:	69fb      	ldr	r3, [r7, #28]
 800db20:	3310      	adds	r3, #16
 800db22:	69b9      	ldr	r1, [r7, #24]
 800db24:	4618      	mov	r0, r3
 800db26:	f00d fc99 	bl	801b45c <sys_mbox_trypost>
 800db2a:	4603      	mov	r3, r0
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d003      	beq.n	800db38 <recv_udp+0xcc>
    netbuf_delete(buf);
 800db30:	69b8      	ldr	r0, [r7, #24]
 800db32:	f001 f9c5 	bl	800eec0 <netbuf_delete>
    return;
 800db36:	e009      	b.n	800db4c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800db38:	69fb      	ldr	r3, [r7, #28]
 800db3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d005      	beq.n	800db4c <recv_udp+0xe0>
 800db40:	69fb      	ldr	r3, [r7, #28]
 800db42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db44:	8afa      	ldrh	r2, [r7, #22]
 800db46:	2100      	movs	r1, #0
 800db48:	69f8      	ldr	r0, [r7, #28]
 800db4a:	4798      	blx	r3
  }
}
 800db4c:	3720      	adds	r7, #32
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}
 800db52:	bf00      	nop
 800db54:	0801d06c 	.word	0x0801d06c
 800db58:	0801d0e4 	.word	0x0801d0e4
 800db5c:	0801d0b0 	.word	0x0801d0b0
 800db60:	0801d108 	.word	0x0801d108
 800db64:	0801d128 	.word	0x0801d128

0800db68 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b088      	sub	sp, #32
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	60f8      	str	r0, [r7, #12]
 800db70:	60b9      	str	r1, [r7, #8]
 800db72:	607a      	str	r2, [r7, #4]
 800db74:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d106      	bne.n	800db8a <recv_tcp+0x22>
 800db7c:	4b36      	ldr	r3, [pc, #216]	; (800dc58 <recv_tcp+0xf0>)
 800db7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800db82:	4936      	ldr	r1, [pc, #216]	; (800dc5c <recv_tcp+0xf4>)
 800db84:	4836      	ldr	r0, [pc, #216]	; (800dc60 <recv_tcp+0xf8>)
 800db86:	f00d fe3d 	bl	801b804 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d106      	bne.n	800db9e <recv_tcp+0x36>
 800db90:	4b31      	ldr	r3, [pc, #196]	; (800dc58 <recv_tcp+0xf0>)
 800db92:	f240 122d 	movw	r2, #301	; 0x12d
 800db96:	4933      	ldr	r1, [pc, #204]	; (800dc64 <recv_tcp+0xfc>)
 800db98:	4831      	ldr	r0, [pc, #196]	; (800dc60 <recv_tcp+0xf8>)
 800db9a:	f00d fe33 	bl	801b804 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800db9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d006      	beq.n	800dbb4 <recv_tcp+0x4c>
 800dba6:	4b2c      	ldr	r3, [pc, #176]	; (800dc58 <recv_tcp+0xf0>)
 800dba8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800dbac:	492e      	ldr	r1, [pc, #184]	; (800dc68 <recv_tcp+0x100>)
 800dbae:	482c      	ldr	r0, [pc, #176]	; (800dc60 <recv_tcp+0xf8>)
 800dbb0:	f00d fe28 	bl	801b804 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d102      	bne.n	800dbc4 <recv_tcp+0x5c>
    return ERR_VAL;
 800dbbe:	f06f 0305 	mvn.w	r3, #5
 800dbc2:	e045      	b.n	800dc50 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	685b      	ldr	r3, [r3, #4]
 800dbc8:	68ba      	ldr	r2, [r7, #8]
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d006      	beq.n	800dbdc <recv_tcp+0x74>
 800dbce:	4b22      	ldr	r3, [pc, #136]	; (800dc58 <recv_tcp+0xf0>)
 800dbd0:	f240 1235 	movw	r2, #309	; 0x135
 800dbd4:	4925      	ldr	r1, [pc, #148]	; (800dc6c <recv_tcp+0x104>)
 800dbd6:	4822      	ldr	r0, [pc, #136]	; (800dc60 <recv_tcp+0xf8>)
 800dbd8:	f00d fe14 	bl	801b804 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	3310      	adds	r3, #16
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f00d fc9d 	bl	801b520 <sys_mbox_valid>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d10d      	bne.n	800dc08 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d008      	beq.n	800dc04 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	891b      	ldrh	r3, [r3, #8]
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	68b8      	ldr	r0, [r7, #8]
 800dbfa:	f005 f95b 	bl	8012eb4 <tcp_recved>
      pbuf_free(p);
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f004 fa6a 	bl	80120d8 <pbuf_free>
    }
    return ERR_OK;
 800dc04:	2300      	movs	r3, #0
 800dc06:	e023      	b.n	800dc50 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d005      	beq.n	800dc1a <recv_tcp+0xb2>
    msg = p;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	891b      	ldrh	r3, [r3, #8]
 800dc16:	83fb      	strh	r3, [r7, #30]
 800dc18:	e003      	b.n	800dc22 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800dc1a:	4b15      	ldr	r3, [pc, #84]	; (800dc70 <recv_tcp+0x108>)
 800dc1c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	3310      	adds	r3, #16
 800dc26:	69b9      	ldr	r1, [r7, #24]
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f00d fc17 	bl	801b45c <sys_mbox_trypost>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d002      	beq.n	800dc3a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800dc34:	f04f 33ff 	mov.w	r3, #4294967295
 800dc38:	e00a      	b.n	800dc50 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d005      	beq.n	800dc4e <recv_tcp+0xe6>
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc46:	8bfa      	ldrh	r2, [r7, #30]
 800dc48:	2100      	movs	r1, #0
 800dc4a:	6978      	ldr	r0, [r7, #20]
 800dc4c:	4798      	blx	r3
  }

  return ERR_OK;
 800dc4e:	2300      	movs	r3, #0
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3720      	adds	r7, #32
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}
 800dc58:	0801d06c 	.word	0x0801d06c
 800dc5c:	0801d148 	.word	0x0801d148
 800dc60:	0801d0b0 	.word	0x0801d0b0
 800dc64:	0801d16c 	.word	0x0801d16c
 800dc68:	0801d18c 	.word	0x0801d18c
 800dc6c:	0801d1a4 	.word	0x0801d1a4
 800dc70:	080204b6 	.word	0x080204b6

0800dc74 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b084      	sub	sp, #16
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d106      	bne.n	800dc96 <poll_tcp+0x22>
 800dc88:	4b29      	ldr	r3, [pc, #164]	; (800dd30 <poll_tcp+0xbc>)
 800dc8a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800dc8e:	4929      	ldr	r1, [pc, #164]	; (800dd34 <poll_tcp+0xc0>)
 800dc90:	4829      	ldr	r0, [pc, #164]	; (800dd38 <poll_tcp+0xc4>)
 800dc92:	f00d fdb7 	bl	801b804 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	785b      	ldrb	r3, [r3, #1]
 800dc9a:	2b01      	cmp	r3, #1
 800dc9c:	d104      	bne.n	800dca8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800dc9e:	2101      	movs	r1, #1
 800dca0:	68f8      	ldr	r0, [r7, #12]
 800dca2:	f000 fe11 	bl	800e8c8 <lwip_netconn_do_writemore>
 800dca6:	e016      	b.n	800dcd6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	785b      	ldrb	r3, [r3, #1]
 800dcac:	2b04      	cmp	r3, #4
 800dcae:	d112      	bne.n	800dcd6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	6a1b      	ldr	r3, [r3, #32]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d00a      	beq.n	800dcce <poll_tcp+0x5a>
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	6a1b      	ldr	r3, [r3, #32]
 800dcbc:	7a5b      	ldrb	r3, [r3, #9]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d005      	beq.n	800dcce <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	6a1b      	ldr	r3, [r3, #32]
 800dcc6:	7a5a      	ldrb	r2, [r3, #9]
 800dcc8:	3a01      	subs	r2, #1
 800dcca:	b2d2      	uxtb	r2, r2
 800dccc:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800dcce:	2101      	movs	r1, #1
 800dcd0:	68f8      	ldr	r0, [r7, #12]
 800dcd2:	f000 fb3b 	bl	800e34c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	7f1b      	ldrb	r3, [r3, #28]
 800dcda:	f003 0310 	and.w	r3, r3, #16
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d021      	beq.n	800dd26 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	685b      	ldr	r3, [r3, #4]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d01d      	beq.n	800dd26 <poll_tcp+0xb2>
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	685b      	ldr	r3, [r3, #4]
 800dcee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dcf2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800dcf6:	d316      	bcc.n	800dd26 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800dd00:	2b04      	cmp	r3, #4
 800dd02:	d810      	bhi.n	800dd26 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	7f1b      	ldrb	r3, [r3, #28]
 800dd08:	f023 0310 	bic.w	r3, r3, #16
 800dd0c:	b2da      	uxtb	r2, r3
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d005      	beq.n	800dd26 <poll_tcp+0xb2>
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd1e:	2200      	movs	r2, #0
 800dd20:	2102      	movs	r1, #2
 800dd22:	68f8      	ldr	r0, [r7, #12]
 800dd24:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800dd26:	2300      	movs	r3, #0
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3710      	adds	r7, #16
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}
 800dd30:	0801d06c 	.word	0x0801d06c
 800dd34:	0801d1c4 	.word	0x0801d1c4
 800dd38:	0801d0b0 	.word	0x0801d0b0

0800dd3c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b086      	sub	sp, #24
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	60f8      	str	r0, [r7, #12]
 800dd44:	60b9      	str	r1, [r7, #8]
 800dd46:	4613      	mov	r3, r2
 800dd48:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d106      	bne.n	800dd62 <sent_tcp+0x26>
 800dd54:	4b20      	ldr	r3, [pc, #128]	; (800ddd8 <sent_tcp+0x9c>)
 800dd56:	f240 1293 	movw	r2, #403	; 0x193
 800dd5a:	4920      	ldr	r1, [pc, #128]	; (800dddc <sent_tcp+0xa0>)
 800dd5c:	4820      	ldr	r0, [pc, #128]	; (800dde0 <sent_tcp+0xa4>)
 800dd5e:	f00d fd51 	bl	801b804 <iprintf>

  if (conn) {
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d032      	beq.n	800ddce <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	785b      	ldrb	r3, [r3, #1]
 800dd6c:	2b01      	cmp	r3, #1
 800dd6e:	d104      	bne.n	800dd7a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800dd70:	2101      	movs	r1, #1
 800dd72:	6978      	ldr	r0, [r7, #20]
 800dd74:	f000 fda8 	bl	800e8c8 <lwip_netconn_do_writemore>
 800dd78:	e007      	b.n	800dd8a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	785b      	ldrb	r3, [r3, #1]
 800dd7e:	2b04      	cmp	r3, #4
 800dd80:	d103      	bne.n	800dd8a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800dd82:	2101      	movs	r1, #1
 800dd84:	6978      	ldr	r0, [r7, #20]
 800dd86:	f000 fae1 	bl	800e34c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	685b      	ldr	r3, [r3, #4]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d01d      	beq.n	800ddce <sent_tcp+0x92>
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	685b      	ldr	r3, [r3, #4]
 800dd96:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dd9a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800dd9e:	d316      	bcc.n	800ddce <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	685b      	ldr	r3, [r3, #4]
 800dda4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800dda8:	2b04      	cmp	r3, #4
 800ddaa:	d810      	bhi.n	800ddce <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	7f1b      	ldrb	r3, [r3, #28]
 800ddb0:	f023 0310 	bic.w	r3, r3, #16
 800ddb4:	b2da      	uxtb	r2, r3
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d005      	beq.n	800ddce <sent_tcp+0x92>
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddc6:	88fa      	ldrh	r2, [r7, #6]
 800ddc8:	2102      	movs	r1, #2
 800ddca:	6978      	ldr	r0, [r7, #20]
 800ddcc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ddce:	2300      	movs	r3, #0
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3718      	adds	r7, #24
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}
 800ddd8:	0801d06c 	.word	0x0801d06c
 800dddc:	0801d1c4 	.word	0x0801d1c4
 800dde0:	0801d0b0 	.word	0x0801d0b0

0800dde4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b088      	sub	sp, #32
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	460b      	mov	r3, r1
 800ddee:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ddf4:	69fb      	ldr	r3, [r7, #28]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d106      	bne.n	800de08 <err_tcp+0x24>
 800ddfa:	4b5f      	ldr	r3, [pc, #380]	; (800df78 <err_tcp+0x194>)
 800ddfc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800de00:	495e      	ldr	r1, [pc, #376]	; (800df7c <err_tcp+0x198>)
 800de02:	485f      	ldr	r0, [pc, #380]	; (800df80 <err_tcp+0x19c>)
 800de04:	f00d fcfe 	bl	801b804 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800de08:	f00d fc94 	bl	801b734 <sys_arch_protect>
 800de0c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800de0e:	69fb      	ldr	r3, [r7, #28]
 800de10:	2200      	movs	r2, #0
 800de12:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800de14:	69fb      	ldr	r3, [r7, #28]
 800de16:	78fa      	ldrb	r2, [r7, #3]
 800de18:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800de1a:	69fb      	ldr	r3, [r7, #28]
 800de1c:	7f1b      	ldrb	r3, [r3, #28]
 800de1e:	f043 0301 	orr.w	r3, r3, #1
 800de22:	b2da      	uxtb	r2, r3
 800de24:	69fb      	ldr	r3, [r7, #28]
 800de26:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800de28:	69fb      	ldr	r3, [r7, #28]
 800de2a:	785b      	ldrb	r3, [r3, #1]
 800de2c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800de2e:	69fb      	ldr	r3, [r7, #28]
 800de30:	2200      	movs	r2, #0
 800de32:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800de34:	69b8      	ldr	r0, [r7, #24]
 800de36:	f00d fc8b 	bl	801b750 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800de3a:	69fb      	ldr	r3, [r7, #28]
 800de3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d005      	beq.n	800de4e <err_tcp+0x6a>
 800de42:	69fb      	ldr	r3, [r7, #28]
 800de44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de46:	2200      	movs	r2, #0
 800de48:	2104      	movs	r1, #4
 800de4a:	69f8      	ldr	r0, [r7, #28]
 800de4c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800de4e:	69fb      	ldr	r3, [r7, #28]
 800de50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de52:	2b00      	cmp	r3, #0
 800de54:	d005      	beq.n	800de62 <err_tcp+0x7e>
 800de56:	69fb      	ldr	r3, [r7, #28]
 800de58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de5a:	2200      	movs	r2, #0
 800de5c:	2100      	movs	r1, #0
 800de5e:	69f8      	ldr	r0, [r7, #28]
 800de60:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800de62:	69fb      	ldr	r3, [r7, #28]
 800de64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de66:	2b00      	cmp	r3, #0
 800de68:	d005      	beq.n	800de76 <err_tcp+0x92>
 800de6a:	69fb      	ldr	r3, [r7, #28]
 800de6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de6e:	2200      	movs	r2, #0
 800de70:	2102      	movs	r1, #2
 800de72:	69f8      	ldr	r0, [r7, #28]
 800de74:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800de76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800de7a:	4618      	mov	r0, r3
 800de7c:	f7ff fd86 	bl	800d98c <lwip_netconn_err_to_msg>
 800de80:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800de82:	69fb      	ldr	r3, [r7, #28]
 800de84:	3310      	adds	r3, #16
 800de86:	4618      	mov	r0, r3
 800de88:	f00d fb4a 	bl	801b520 <sys_mbox_valid>
 800de8c:	4603      	mov	r3, r0
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d005      	beq.n	800de9e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800de92:	69fb      	ldr	r3, [r7, #28]
 800de94:	3310      	adds	r3, #16
 800de96:	6939      	ldr	r1, [r7, #16]
 800de98:	4618      	mov	r0, r3
 800de9a:	f00d fadf 	bl	801b45c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800de9e:	69fb      	ldr	r3, [r7, #28]
 800dea0:	3314      	adds	r3, #20
 800dea2:	4618      	mov	r0, r3
 800dea4:	f00d fb3c 	bl	801b520 <sys_mbox_valid>
 800dea8:	4603      	mov	r3, r0
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d005      	beq.n	800deba <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800deae:	69fb      	ldr	r3, [r7, #28]
 800deb0:	3314      	adds	r3, #20
 800deb2:	6939      	ldr	r1, [r7, #16]
 800deb4:	4618      	mov	r0, r3
 800deb6:	f00d fad1 	bl	801b45c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800deba:	7dfb      	ldrb	r3, [r7, #23]
 800debc:	2b01      	cmp	r3, #1
 800debe:	d005      	beq.n	800decc <err_tcp+0xe8>
 800dec0:	7dfb      	ldrb	r3, [r7, #23]
 800dec2:	2b04      	cmp	r3, #4
 800dec4:	d002      	beq.n	800decc <err_tcp+0xe8>
 800dec6:	7dfb      	ldrb	r3, [r7, #23]
 800dec8:	2b03      	cmp	r3, #3
 800deca:	d143      	bne.n	800df54 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800decc:	69fb      	ldr	r3, [r7, #28]
 800dece:	7f1b      	ldrb	r3, [r3, #28]
 800ded0:	f003 0304 	and.w	r3, r3, #4
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	bf14      	ite	ne
 800ded8:	2301      	movne	r3, #1
 800deda:	2300      	moveq	r3, #0
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800dee0:	69fb      	ldr	r3, [r7, #28]
 800dee2:	7f1b      	ldrb	r3, [r3, #28]
 800dee4:	f023 0304 	bic.w	r3, r3, #4
 800dee8:	b2da      	uxtb	r2, r3
 800deea:	69fb      	ldr	r3, [r7, #28]
 800deec:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d13b      	bne.n	800df6c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800def4:	69fb      	ldr	r3, [r7, #28]
 800def6:	6a1b      	ldr	r3, [r3, #32]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d106      	bne.n	800df0a <err_tcp+0x126>
 800defc:	4b1e      	ldr	r3, [pc, #120]	; (800df78 <err_tcp+0x194>)
 800defe:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800df02:	4920      	ldr	r1, [pc, #128]	; (800df84 <err_tcp+0x1a0>)
 800df04:	481e      	ldr	r0, [pc, #120]	; (800df80 <err_tcp+0x19c>)
 800df06:	f00d fc7d 	bl	801b804 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800df0a:	7dfb      	ldrb	r3, [r7, #23]
 800df0c:	2b04      	cmp	r3, #4
 800df0e:	d104      	bne.n	800df1a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800df10:	69fb      	ldr	r3, [r7, #28]
 800df12:	6a1b      	ldr	r3, [r3, #32]
 800df14:	2200      	movs	r2, #0
 800df16:	711a      	strb	r2, [r3, #4]
 800df18:	e003      	b.n	800df22 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800df1a:	69fb      	ldr	r3, [r7, #28]
 800df1c:	6a1b      	ldr	r3, [r3, #32]
 800df1e:	78fa      	ldrb	r2, [r7, #3]
 800df20:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800df22:	69fb      	ldr	r3, [r7, #28]
 800df24:	6a1b      	ldr	r3, [r3, #32]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	330c      	adds	r3, #12
 800df2a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800df2c:	68b8      	ldr	r0, [r7, #8]
 800df2e:	f00d fb85 	bl	801b63c <sys_sem_valid>
 800df32:	4603      	mov	r3, r0
 800df34:	2b00      	cmp	r3, #0
 800df36:	d106      	bne.n	800df46 <err_tcp+0x162>
 800df38:	4b0f      	ldr	r3, [pc, #60]	; (800df78 <err_tcp+0x194>)
 800df3a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800df3e:	4912      	ldr	r1, [pc, #72]	; (800df88 <err_tcp+0x1a4>)
 800df40:	480f      	ldr	r0, [pc, #60]	; (800df80 <err_tcp+0x19c>)
 800df42:	f00d fc5f 	bl	801b804 <iprintf>
      conn->current_msg = NULL;
 800df46:	69fb      	ldr	r3, [r7, #28]
 800df48:	2200      	movs	r2, #0
 800df4a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800df4c:	68b8      	ldr	r0, [r7, #8]
 800df4e:	f00d fb5b 	bl	801b608 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800df52:	e00b      	b.n	800df6c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800df54:	69fb      	ldr	r3, [r7, #28]
 800df56:	6a1b      	ldr	r3, [r3, #32]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d008      	beq.n	800df6e <err_tcp+0x18a>
 800df5c:	4b06      	ldr	r3, [pc, #24]	; (800df78 <err_tcp+0x194>)
 800df5e:	f240 12f7 	movw	r2, #503	; 0x1f7
 800df62:	490a      	ldr	r1, [pc, #40]	; (800df8c <err_tcp+0x1a8>)
 800df64:	4806      	ldr	r0, [pc, #24]	; (800df80 <err_tcp+0x19c>)
 800df66:	f00d fc4d 	bl	801b804 <iprintf>
  }
}
 800df6a:	e000      	b.n	800df6e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800df6c:	bf00      	nop
}
 800df6e:	bf00      	nop
 800df70:	3720      	adds	r7, #32
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}
 800df76:	bf00      	nop
 800df78:	0801d06c 	.word	0x0801d06c
 800df7c:	0801d1c4 	.word	0x0801d1c4
 800df80:	0801d0b0 	.word	0x0801d0b0
 800df84:	0801d1d4 	.word	0x0801d1d4
 800df88:	0801d1f0 	.word	0x0801d1f0
 800df8c:	0801d20c 	.word	0x0801d20c

0800df90 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b084      	sub	sp, #16
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800df9e:	6879      	ldr	r1, [r7, #4]
 800dfa0:	68f8      	ldr	r0, [r7, #12]
 800dfa2:	f005 fe4d 	bl	8013c40 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800dfa6:	490a      	ldr	r1, [pc, #40]	; (800dfd0 <setup_tcp+0x40>)
 800dfa8:	68f8      	ldr	r0, [r7, #12]
 800dfaa:	f005 fe5b 	bl	8013c64 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800dfae:	4909      	ldr	r1, [pc, #36]	; (800dfd4 <setup_tcp+0x44>)
 800dfb0:	68f8      	ldr	r0, [r7, #12]
 800dfb2:	f005 fe79 	bl	8013ca8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800dfb6:	2202      	movs	r2, #2
 800dfb8:	4907      	ldr	r1, [pc, #28]	; (800dfd8 <setup_tcp+0x48>)
 800dfba:	68f8      	ldr	r0, [r7, #12]
 800dfbc:	f005 fed0 	bl	8013d60 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800dfc0:	4906      	ldr	r1, [pc, #24]	; (800dfdc <setup_tcp+0x4c>)
 800dfc2:	68f8      	ldr	r0, [r7, #12]
 800dfc4:	f005 fe92 	bl	8013cec <tcp_err>
}
 800dfc8:	bf00      	nop
 800dfca:	3710      	adds	r7, #16
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}
 800dfd0:	0800db69 	.word	0x0800db69
 800dfd4:	0800dd3d 	.word	0x0800dd3d
 800dfd8:	0800dc75 	.word	0x0800dc75
 800dfdc:	0800dde5 	.word	0x0800dde5

0800dfe0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800dfe0:	b590      	push	{r4, r7, lr}
 800dfe2:	b085      	sub	sp, #20
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800dfe8:	2300      	movs	r3, #0
 800dfea:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d006      	beq.n	800e004 <pcb_new+0x24>
 800dff6:	4b2b      	ldr	r3, [pc, #172]	; (800e0a4 <pcb_new+0xc4>)
 800dff8:	f240 2265 	movw	r2, #613	; 0x265
 800dffc:	492a      	ldr	r1, [pc, #168]	; (800e0a8 <pcb_new+0xc8>)
 800dffe:	482b      	ldr	r0, [pc, #172]	; (800e0ac <pcb_new+0xcc>)
 800e000:	f00d fc00 	bl	801b804 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	781b      	ldrb	r3, [r3, #0]
 800e00a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e00e:	2b10      	cmp	r3, #16
 800e010:	d022      	beq.n	800e058 <pcb_new+0x78>
 800e012:	2b20      	cmp	r3, #32
 800e014:	d133      	bne.n	800e07e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681c      	ldr	r4, [r3, #0]
 800e01a:	7bfb      	ldrb	r3, [r7, #15]
 800e01c:	4618      	mov	r0, r3
 800e01e:	f00a feee 	bl	8018dfe <udp_new_ip_type>
 800e022:	4603      	mov	r3, r0
 800e024:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	685b      	ldr	r3, [r3, #4]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d02a      	beq.n	800e086 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	781b      	ldrb	r3, [r3, #0]
 800e036:	2b22      	cmp	r3, #34	; 0x22
 800e038:	d104      	bne.n	800e044 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	685b      	ldr	r3, [r3, #4]
 800e040:	2201      	movs	r2, #1
 800e042:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	6858      	ldr	r0, [r3, #4]
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	461a      	mov	r2, r3
 800e050:	4917      	ldr	r1, [pc, #92]	; (800e0b0 <pcb_new+0xd0>)
 800e052:	f00a fe5b 	bl	8018d0c <udp_recv>
      }
      break;
 800e056:	e016      	b.n	800e086 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681c      	ldr	r4, [r3, #0]
 800e05c:	7bfb      	ldrb	r3, [r7, #15]
 800e05e:	4618      	mov	r0, r3
 800e060:	f005 fde0 	bl	8013c24 <tcp_new_ip_type>
 800e064:	4603      	mov	r3, r0
 800e066:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	685b      	ldr	r3, [r3, #4]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d00b      	beq.n	800e08a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	4618      	mov	r0, r3
 800e078:	f7ff ff8a 	bl	800df90 <setup_tcp>
      }
      break;
 800e07c:	e005      	b.n	800e08a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	22fa      	movs	r2, #250	; 0xfa
 800e082:	711a      	strb	r2, [r3, #4]
      return;
 800e084:	e00a      	b.n	800e09c <pcb_new+0xbc>
      break;
 800e086:	bf00      	nop
 800e088:	e000      	b.n	800e08c <pcb_new+0xac>
      break;
 800e08a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d102      	bne.n	800e09c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	22ff      	movs	r2, #255	; 0xff
 800e09a:	711a      	strb	r2, [r3, #4]
  }
}
 800e09c:	3714      	adds	r7, #20
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd90      	pop	{r4, r7, pc}
 800e0a2:	bf00      	nop
 800e0a4:	0801d06c 	.word	0x0801d06c
 800e0a8:	0801d250 	.word	0x0801d250
 800e0ac:	0801d0b0 	.word	0x0801d0b0
 800e0b0:	0800da6d 	.word	0x0800da6d

0800e0b4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b084      	sub	sp, #16
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	685b      	ldr	r3, [r3, #4]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d102      	bne.n	800e0d6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800e0d0:	68f8      	ldr	r0, [r7, #12]
 800e0d2:	f7ff ff85 	bl	800dfe0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800e0d6:	bf00      	nop
 800e0d8:	3710      	adds	r7, #16
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}
	...

0800e0e0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b086      	sub	sp, #24
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	6039      	str	r1, [r7, #0]
 800e0ea:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800e0f0:	2007      	movs	r0, #7
 800e0f2:	f003 f8a5 	bl	8011240 <memp_malloc>
 800e0f6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d101      	bne.n	800e102 <netconn_alloc+0x22>
    return NULL;
 800e0fe:	2300      	movs	r3, #0
 800e100:	e052      	b.n	800e1a8 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	2200      	movs	r2, #0
 800e106:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	79fa      	ldrb	r2, [r7, #7]
 800e10c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2200      	movs	r2, #0
 800e112:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800e114:	79fb      	ldrb	r3, [r7, #7]
 800e116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e11a:	2b10      	cmp	r3, #16
 800e11c:	d004      	beq.n	800e128 <netconn_alloc+0x48>
 800e11e:	2b20      	cmp	r3, #32
 800e120:	d105      	bne.n	800e12e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800e122:	2306      	movs	r3, #6
 800e124:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800e126:	e00a      	b.n	800e13e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800e128:	2306      	movs	r3, #6
 800e12a:	617b      	str	r3, [r7, #20]
      break;
 800e12c:	e007      	b.n	800e13e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800e12e:	4b20      	ldr	r3, [pc, #128]	; (800e1b0 <netconn_alloc+0xd0>)
 800e130:	f240 22e5 	movw	r2, #741	; 0x2e5
 800e134:	491f      	ldr	r1, [pc, #124]	; (800e1b4 <netconn_alloc+0xd4>)
 800e136:	4820      	ldr	r0, [pc, #128]	; (800e1b8 <netconn_alloc+0xd8>)
 800e138:	f00d fb64 	bl	801b804 <iprintf>
      goto free_and_return;
 800e13c:	e02f      	b.n	800e19e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	3310      	adds	r3, #16
 800e142:	6979      	ldr	r1, [r7, #20]
 800e144:	4618      	mov	r0, r3
 800e146:	f00d f95d 	bl	801b404 <sys_mbox_new>
 800e14a:	4603      	mov	r3, r0
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d125      	bne.n	800e19c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	330c      	adds	r3, #12
 800e154:	2100      	movs	r1, #0
 800e156:	4618      	mov	r0, r3
 800e158:	f00d fa00 	bl	801b55c <sys_sem_new>
 800e15c:	4603      	mov	r3, r0
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d005      	beq.n	800e16e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	3310      	adds	r3, #16
 800e166:	4618      	mov	r0, r3
 800e168:	f00d f966 	bl	801b438 <sys_mbox_free>
    goto free_and_return;
 800e16c:	e017      	b.n	800e19e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	3314      	adds	r3, #20
 800e172:	4618      	mov	r0, r3
 800e174:	f00d f9e5 	bl	801b542 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	2200      	movs	r2, #0
 800e17c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	f04f 32ff 	mov.w	r2, #4294967295
 800e184:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	683a      	ldr	r2, [r7, #0]
 800e18a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2200      	movs	r2, #0
 800e190:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	7cfa      	ldrb	r2, [r7, #19]
 800e196:	771a      	strb	r2, [r3, #28]
  return conn;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	e005      	b.n	800e1a8 <netconn_alloc+0xc8>
    goto free_and_return;
 800e19c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800e19e:	68f9      	ldr	r1, [r7, #12]
 800e1a0:	2007      	movs	r0, #7
 800e1a2:	f003 f8c3 	bl	801132c <memp_free>
  return NULL;
 800e1a6:	2300      	movs	r3, #0
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3718      	adds	r7, #24
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}
 800e1b0:	0801d06c 	.word	0x0801d06c
 800e1b4:	0801d270 	.word	0x0801d270
 800e1b8:	0801d0b0 	.word	0x0801d0b0

0800e1bc <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b082      	sub	sp, #8
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	685b      	ldr	r3, [r3, #4]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d006      	beq.n	800e1da <netconn_free+0x1e>
 800e1cc:	4b1b      	ldr	r3, [pc, #108]	; (800e23c <netconn_free+0x80>)
 800e1ce:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e1d2:	491b      	ldr	r1, [pc, #108]	; (800e240 <netconn_free+0x84>)
 800e1d4:	481b      	ldr	r0, [pc, #108]	; (800e244 <netconn_free+0x88>)
 800e1d6:	f00d fb15 	bl	801b804 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	3310      	adds	r3, #16
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f00d f99e 	bl	801b520 <sys_mbox_valid>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d006      	beq.n	800e1f8 <netconn_free+0x3c>
 800e1ea:	4b14      	ldr	r3, [pc, #80]	; (800e23c <netconn_free+0x80>)
 800e1ec:	f240 3223 	movw	r2, #803	; 0x323
 800e1f0:	4915      	ldr	r1, [pc, #84]	; (800e248 <netconn_free+0x8c>)
 800e1f2:	4814      	ldr	r0, [pc, #80]	; (800e244 <netconn_free+0x88>)
 800e1f4:	f00d fb06 	bl	801b804 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	3314      	adds	r3, #20
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f00d f98f 	bl	801b520 <sys_mbox_valid>
 800e202:	4603      	mov	r3, r0
 800e204:	2b00      	cmp	r3, #0
 800e206:	d006      	beq.n	800e216 <netconn_free+0x5a>
 800e208:	4b0c      	ldr	r3, [pc, #48]	; (800e23c <netconn_free+0x80>)
 800e20a:	f240 3226 	movw	r2, #806	; 0x326
 800e20e:	490f      	ldr	r1, [pc, #60]	; (800e24c <netconn_free+0x90>)
 800e210:	480c      	ldr	r0, [pc, #48]	; (800e244 <netconn_free+0x88>)
 800e212:	f00d faf7 	bl	801b804 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	330c      	adds	r3, #12
 800e21a:	4618      	mov	r0, r3
 800e21c:	f00d fa01 	bl	801b622 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	330c      	adds	r3, #12
 800e224:	4618      	mov	r0, r3
 800e226:	f00d fa1a 	bl	801b65e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800e22a:	6879      	ldr	r1, [r7, #4]
 800e22c:	2007      	movs	r0, #7
 800e22e:	f003 f87d 	bl	801132c <memp_free>
}
 800e232:	bf00      	nop
 800e234:	3708      	adds	r7, #8
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}
 800e23a:	bf00      	nop
 800e23c:	0801d06c 	.word	0x0801d06c
 800e240:	0801d298 	.word	0x0801d298
 800e244:	0801d0b0 	.word	0x0801d0b0
 800e248:	0801d2c8 	.word	0x0801d2c8
 800e24c:	0801d304 	.word	0x0801d304

0800e250 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b086      	sub	sp, #24
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	3310      	adds	r3, #16
 800e25c:	4618      	mov	r0, r3
 800e25e:	f00d f95f 	bl	801b520 <sys_mbox_valid>
 800e262:	4603      	mov	r3, r0
 800e264:	2b00      	cmp	r3, #0
 800e266:	d02f      	beq.n	800e2c8 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800e268:	e018      	b.n	800e29c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e272:	2b10      	cmp	r3, #16
 800e274:	d10e      	bne.n	800e294 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800e276:	693b      	ldr	r3, [r7, #16]
 800e278:	f107 020f 	add.w	r2, r7, #15
 800e27c:	4611      	mov	r1, r2
 800e27e:	4618      	mov	r0, r3
 800e280:	f7ff fbba 	bl	800d9f8 <lwip_netconn_is_err_msg>
 800e284:	4603      	mov	r3, r0
 800e286:	2b00      	cmp	r3, #0
 800e288:	d108      	bne.n	800e29c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	4618      	mov	r0, r3
 800e28e:	f003 ff23 	bl	80120d8 <pbuf_free>
 800e292:	e003      	b.n	800e29c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800e294:	693b      	ldr	r3, [r7, #16]
 800e296:	4618      	mov	r0, r3
 800e298:	f000 fe12 	bl	800eec0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	3310      	adds	r3, #16
 800e2a0:	f107 0210 	add.w	r2, r7, #16
 800e2a4:	4611      	mov	r1, r2
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f00d f923 	bl	801b4f2 <sys_arch_mbox_tryfetch>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2b2:	d1da      	bne.n	800e26a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	3310      	adds	r3, #16
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f00d f8bd 	bl	801b438 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	3310      	adds	r3, #16
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f00d f93d 	bl	801b542 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	3314      	adds	r3, #20
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f00d f927 	bl	801b520 <sys_mbox_valid>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d034      	beq.n	800e342 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800e2d8:	e01d      	b.n	800e316 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	f107 020e 	add.w	r2, r7, #14
 800e2e0:	4611      	mov	r1, r2
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f7ff fb88 	bl	800d9f8 <lwip_netconn_is_err_msg>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d113      	bne.n	800e316 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800e2f2:	6978      	ldr	r0, [r7, #20]
 800e2f4:	f7ff ffac 	bl	800e250 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800e2f8:	697b      	ldr	r3, [r7, #20]
 800e2fa:	685b      	ldr	r3, [r3, #4]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d007      	beq.n	800e310 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	4618      	mov	r0, r3
 800e306:	f004 fcd7 	bl	8012cb8 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	2200      	movs	r2, #0
 800e30e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800e310:	6978      	ldr	r0, [r7, #20]
 800e312:	f7ff ff53 	bl	800e1bc <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	3314      	adds	r3, #20
 800e31a:	f107 0210 	add.w	r2, r7, #16
 800e31e:	4611      	mov	r1, r2
 800e320:	4618      	mov	r0, r3
 800e322:	f00d f8e6 	bl	801b4f2 <sys_arch_mbox_tryfetch>
 800e326:	4603      	mov	r3, r0
 800e328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e32c:	d1d5      	bne.n	800e2da <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	3314      	adds	r3, #20
 800e332:	4618      	mov	r0, r3
 800e334:	f00d f880 	bl	801b438 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	3314      	adds	r3, #20
 800e33c:	4618      	mov	r0, r3
 800e33e:	f00d f900 	bl	801b542 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800e342:	bf00      	nop
 800e344:	3718      	adds	r7, #24
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
	...

0800e34c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b086      	sub	sp, #24
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
 800e354:	460b      	mov	r3, r1
 800e356:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800e358:	2300      	movs	r3, #0
 800e35a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d106      	bne.n	800e370 <lwip_netconn_do_close_internal+0x24>
 800e362:	4b87      	ldr	r3, [pc, #540]	; (800e580 <lwip_netconn_do_close_internal+0x234>)
 800e364:	f240 32a2 	movw	r2, #930	; 0x3a2
 800e368:	4986      	ldr	r1, [pc, #536]	; (800e584 <lwip_netconn_do_close_internal+0x238>)
 800e36a:	4887      	ldr	r0, [pc, #540]	; (800e588 <lwip_netconn_do_close_internal+0x23c>)
 800e36c:	f00d fa4a 	bl	801b804 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	781b      	ldrb	r3, [r3, #0]
 800e374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e378:	2b10      	cmp	r3, #16
 800e37a:	d006      	beq.n	800e38a <lwip_netconn_do_close_internal+0x3e>
 800e37c:	4b80      	ldr	r3, [pc, #512]	; (800e580 <lwip_netconn_do_close_internal+0x234>)
 800e37e:	f240 32a3 	movw	r2, #931	; 0x3a3
 800e382:	4982      	ldr	r1, [pc, #520]	; (800e58c <lwip_netconn_do_close_internal+0x240>)
 800e384:	4880      	ldr	r0, [pc, #512]	; (800e588 <lwip_netconn_do_close_internal+0x23c>)
 800e386:	f00d fa3d 	bl	801b804 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	785b      	ldrb	r3, [r3, #1]
 800e38e:	2b04      	cmp	r3, #4
 800e390:	d006      	beq.n	800e3a0 <lwip_netconn_do_close_internal+0x54>
 800e392:	4b7b      	ldr	r3, [pc, #492]	; (800e580 <lwip_netconn_do_close_internal+0x234>)
 800e394:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800e398:	497d      	ldr	r1, [pc, #500]	; (800e590 <lwip_netconn_do_close_internal+0x244>)
 800e39a:	487b      	ldr	r0, [pc, #492]	; (800e588 <lwip_netconn_do_close_internal+0x23c>)
 800e39c:	f00d fa32 	bl	801b804 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	685b      	ldr	r3, [r3, #4]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d106      	bne.n	800e3b6 <lwip_netconn_do_close_internal+0x6a>
 800e3a8:	4b75      	ldr	r3, [pc, #468]	; (800e580 <lwip_netconn_do_close_internal+0x234>)
 800e3aa:	f240 32a5 	movw	r2, #933	; 0x3a5
 800e3ae:	4979      	ldr	r1, [pc, #484]	; (800e594 <lwip_netconn_do_close_internal+0x248>)
 800e3b0:	4875      	ldr	r0, [pc, #468]	; (800e588 <lwip_netconn_do_close_internal+0x23c>)
 800e3b2:	f00d fa27 	bl	801b804 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6a1b      	ldr	r3, [r3, #32]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d106      	bne.n	800e3cc <lwip_netconn_do_close_internal+0x80>
 800e3be:	4b70      	ldr	r3, [pc, #448]	; (800e580 <lwip_netconn_do_close_internal+0x234>)
 800e3c0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e3c4:	4974      	ldr	r1, [pc, #464]	; (800e598 <lwip_netconn_do_close_internal+0x24c>)
 800e3c6:	4870      	ldr	r0, [pc, #448]	; (800e588 <lwip_netconn_do_close_internal+0x23c>)
 800e3c8:	f00d fa1c 	bl	801b804 <iprintf>

  tpcb = conn->pcb.tcp;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	685b      	ldr	r3, [r3, #4]
 800e3d0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6a1b      	ldr	r3, [r3, #32]
 800e3d6:	7a1b      	ldrb	r3, [r3, #8]
 800e3d8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800e3da:	7bfb      	ldrb	r3, [r7, #15]
 800e3dc:	f003 0301 	and.w	r3, r3, #1
 800e3e0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800e3e2:	7bfb      	ldrb	r3, [r7, #15]
 800e3e4:	f003 0302 	and.w	r3, r3, #2
 800e3e8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800e3ea:	7bfb      	ldrb	r3, [r7, #15]
 800e3ec:	2b03      	cmp	r3, #3
 800e3ee:	d102      	bne.n	800e3f6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	75bb      	strb	r3, [r7, #22]
 800e3f4:	e01f      	b.n	800e436 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800e3f6:	7bbb      	ldrb	r3, [r7, #14]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d00e      	beq.n	800e41a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800e3fc:	693b      	ldr	r3, [r7, #16]
 800e3fe:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800e400:	2b05      	cmp	r3, #5
 800e402:	d007      	beq.n	800e414 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800e404:	693b      	ldr	r3, [r7, #16]
 800e406:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800e408:	2b06      	cmp	r3, #6
 800e40a:	d003      	beq.n	800e414 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800e40c:	693b      	ldr	r3, [r7, #16]
 800e40e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800e410:	2b08      	cmp	r3, #8
 800e412:	d102      	bne.n	800e41a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800e414:	2301      	movs	r3, #1
 800e416:	75bb      	strb	r3, [r7, #22]
 800e418:	e00d      	b.n	800e436 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800e41a:	7b7b      	ldrb	r3, [r7, #13]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d008      	beq.n	800e432 <lwip_netconn_do_close_internal+0xe6>
 800e420:	693b      	ldr	r3, [r7, #16]
 800e422:	8b5b      	ldrh	r3, [r3, #26]
 800e424:	f003 0310 	and.w	r3, r3, #16
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d002      	beq.n	800e432 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800e42c:	2301      	movs	r3, #1
 800e42e:	75bb      	strb	r3, [r7, #22]
 800e430:	e001      	b.n	800e436 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800e432:	2300      	movs	r3, #0
 800e434:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800e436:	7dbb      	ldrb	r3, [r7, #22]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d003      	beq.n	800e444 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800e43c:	2100      	movs	r1, #0
 800e43e:	6938      	ldr	r0, [r7, #16]
 800e440:	f005 fbfe 	bl	8013c40 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800e444:	693b      	ldr	r3, [r7, #16]
 800e446:	7d1b      	ldrb	r3, [r3, #20]
 800e448:	2b01      	cmp	r3, #1
 800e44a:	d104      	bne.n	800e456 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800e44c:	2100      	movs	r1, #0
 800e44e:	6938      	ldr	r0, [r7, #16]
 800e450:	f005 fc6e 	bl	8013d30 <tcp_accept>
 800e454:	e01d      	b.n	800e492 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800e456:	7bbb      	ldrb	r3, [r7, #14]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d007      	beq.n	800e46c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800e45c:	2100      	movs	r1, #0
 800e45e:	6938      	ldr	r0, [r7, #16]
 800e460:	f005 fc00 	bl	8013c64 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800e464:	2100      	movs	r1, #0
 800e466:	6938      	ldr	r0, [r7, #16]
 800e468:	f005 fc62 	bl	8013d30 <tcp_accept>
    }
    if (shut_tx) {
 800e46c:	7b7b      	ldrb	r3, [r7, #13]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d003      	beq.n	800e47a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800e472:	2100      	movs	r1, #0
 800e474:	6938      	ldr	r0, [r7, #16]
 800e476:	f005 fc17 	bl	8013ca8 <tcp_sent>
    }
    if (shut_close) {
 800e47a:	7dbb      	ldrb	r3, [r7, #22]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d008      	beq.n	800e492 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800e480:	2200      	movs	r2, #0
 800e482:	2100      	movs	r1, #0
 800e484:	6938      	ldr	r0, [r7, #16]
 800e486:	f005 fc6b 	bl	8013d60 <tcp_poll>
      tcp_err(tpcb, NULL);
 800e48a:	2100      	movs	r1, #0
 800e48c:	6938      	ldr	r0, [r7, #16]
 800e48e:	f005 fc2d 	bl	8013cec <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800e492:	7dbb      	ldrb	r3, [r7, #22]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d005      	beq.n	800e4a4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800e498:	6938      	ldr	r0, [r7, #16]
 800e49a:	f004 fac7 	bl	8012a2c <tcp_close>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	75fb      	strb	r3, [r7, #23]
 800e4a2:	e007      	b.n	800e4b4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800e4a4:	7bbb      	ldrb	r3, [r7, #14]
 800e4a6:	7b7a      	ldrb	r2, [r7, #13]
 800e4a8:	4619      	mov	r1, r3
 800e4aa:	6938      	ldr	r0, [r7, #16]
 800e4ac:	f004 faea 	bl	8012a84 <tcp_shutdown>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800e4b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d102      	bne.n	800e4c2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800e4bc:	2301      	movs	r3, #1
 800e4be:	757b      	strb	r3, [r7, #21]
 800e4c0:	e016      	b.n	800e4f0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800e4c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e4c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4ca:	d10f      	bne.n	800e4ec <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	6a1b      	ldr	r3, [r3, #32]
 800e4d0:	7a5b      	ldrb	r3, [r3, #9]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d10c      	bne.n	800e4f0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800e4da:	7dbb      	ldrb	r3, [r7, #22]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d007      	beq.n	800e4f0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800e4e0:	6938      	ldr	r0, [r7, #16]
 800e4e2:	f004 fbe9 	bl	8012cb8 <tcp_abort>
          err = ERR_OK;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	75fb      	strb	r3, [r7, #23]
 800e4ea:	e001      	b.n	800e4f0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800e4f0:	7d7b      	ldrb	r3, [r7, #21]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d052      	beq.n	800e59c <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6a1b      	ldr	r3, [r3, #32]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	330c      	adds	r3, #12
 800e4fe:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	6a1b      	ldr	r3, [r3, #32]
 800e504:	7dfa      	ldrb	r2, [r7, #23]
 800e506:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2200      	movs	r2, #0
 800e50c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2200      	movs	r2, #0
 800e512:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800e514:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d129      	bne.n	800e570 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800e51c:	7dbb      	ldrb	r3, [r7, #22]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d00c      	beq.n	800e53c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2200      	movs	r2, #0
 800e526:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d005      	beq.n	800e53c <lwip_netconn_do_close_internal+0x1f0>
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e534:	2200      	movs	r2, #0
 800e536:	2104      	movs	r1, #4
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	4798      	blx	r3
      }
      if (shut_rx) {
 800e53c:	7bbb      	ldrb	r3, [r7, #14]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d009      	beq.n	800e556 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e546:	2b00      	cmp	r3, #0
 800e548:	d005      	beq.n	800e556 <lwip_netconn_do_close_internal+0x20a>
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e54e:	2200      	movs	r2, #0
 800e550:	2100      	movs	r1, #0
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	4798      	blx	r3
      }
      if (shut_tx) {
 800e556:	7b7b      	ldrb	r3, [r7, #13]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d009      	beq.n	800e570 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e560:	2b00      	cmp	r3, #0
 800e562:	d005      	beq.n	800e570 <lwip_netconn_do_close_internal+0x224>
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e568:	2200      	movs	r2, #0
 800e56a:	2102      	movs	r1, #2
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e570:	78fb      	ldrb	r3, [r7, #3]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d002      	beq.n	800e57c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800e576:	68b8      	ldr	r0, [r7, #8]
 800e578:	f00d f846 	bl	801b608 <sys_sem_signal>
    }
    return ERR_OK;
 800e57c:	2300      	movs	r3, #0
 800e57e:	e03c      	b.n	800e5fa <lwip_netconn_do_close_internal+0x2ae>
 800e580:	0801d06c 	.word	0x0801d06c
 800e584:	0801d340 	.word	0x0801d340
 800e588:	0801d0b0 	.word	0x0801d0b0
 800e58c:	0801d350 	.word	0x0801d350
 800e590:	0801d370 	.word	0x0801d370
 800e594:	0801d394 	.word	0x0801d394
 800e598:	0801d1d4 	.word	0x0801d1d4
  }
  if (!close_finished) {
 800e59c:	7d7b      	ldrb	r3, [r7, #21]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d11e      	bne.n	800e5e0 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	7d1b      	ldrb	r3, [r3, #20]
 800e5a6:	2b01      	cmp	r3, #1
 800e5a8:	d106      	bne.n	800e5b8 <lwip_netconn_do_close_internal+0x26c>
 800e5aa:	4b16      	ldr	r3, [pc, #88]	; (800e604 <lwip_netconn_do_close_internal+0x2b8>)
 800e5ac:	f240 4241 	movw	r2, #1089	; 0x441
 800e5b0:	4915      	ldr	r1, [pc, #84]	; (800e608 <lwip_netconn_do_close_internal+0x2bc>)
 800e5b2:	4816      	ldr	r0, [pc, #88]	; (800e60c <lwip_netconn_do_close_internal+0x2c0>)
 800e5b4:	f00d f926 	bl	801b804 <iprintf>
    if (shut_tx) {
 800e5b8:	7b7b      	ldrb	r3, [r7, #13]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d003      	beq.n	800e5c6 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800e5be:	4914      	ldr	r1, [pc, #80]	; (800e610 <lwip_netconn_do_close_internal+0x2c4>)
 800e5c0:	6938      	ldr	r0, [r7, #16]
 800e5c2:	f005 fb71 	bl	8013ca8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800e5c6:	2201      	movs	r2, #1
 800e5c8:	4912      	ldr	r1, [pc, #72]	; (800e614 <lwip_netconn_do_close_internal+0x2c8>)
 800e5ca:	6938      	ldr	r0, [r7, #16]
 800e5cc:	f005 fbc8 	bl	8013d60 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800e5d0:	4911      	ldr	r1, [pc, #68]	; (800e618 <lwip_netconn_do_close_internal+0x2cc>)
 800e5d2:	6938      	ldr	r0, [r7, #16]
 800e5d4:	f005 fb8a 	bl	8013cec <tcp_err>
    tcp_arg(tpcb, conn);
 800e5d8:	6879      	ldr	r1, [r7, #4]
 800e5da:	6938      	ldr	r0, [r7, #16]
 800e5dc:	f005 fb30 	bl	8013c40 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800e5e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d106      	bne.n	800e5f6 <lwip_netconn_do_close_internal+0x2aa>
 800e5e8:	4b06      	ldr	r3, [pc, #24]	; (800e604 <lwip_netconn_do_close_internal+0x2b8>)
 800e5ea:	f240 424d 	movw	r2, #1101	; 0x44d
 800e5ee:	490b      	ldr	r1, [pc, #44]	; (800e61c <lwip_netconn_do_close_internal+0x2d0>)
 800e5f0:	4806      	ldr	r0, [pc, #24]	; (800e60c <lwip_netconn_do_close_internal+0x2c0>)
 800e5f2:	f00d f907 	bl	801b804 <iprintf>
  return err;
 800e5f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3718      	adds	r7, #24
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}
 800e602:	bf00      	nop
 800e604:	0801d06c 	.word	0x0801d06c
 800e608:	0801d3a8 	.word	0x0801d3a8
 800e60c:	0801d0b0 	.word	0x0801d0b0
 800e610:	0800dd3d 	.word	0x0800dd3d
 800e614:	0800dc75 	.word	0x0800dc75
 800e618:	0800dde5 	.word	0x0800dde5
 800e61c:	0801d3cc 	.word	0x0801d3cc

0800e620 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b084      	sub	sp, #16
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	785b      	ldrb	r3, [r3, #1]
 800e632:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800e634:	7afb      	ldrb	r3, [r7, #11]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d00d      	beq.n	800e656 <lwip_netconn_do_delconn+0x36>
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	781b      	ldrb	r3, [r3, #0]
 800e640:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e644:	2b10      	cmp	r3, #16
 800e646:	d006      	beq.n	800e656 <lwip_netconn_do_delconn+0x36>
 800e648:	4b60      	ldr	r3, [pc, #384]	; (800e7cc <lwip_netconn_do_delconn+0x1ac>)
 800e64a:	f240 425e 	movw	r2, #1118	; 0x45e
 800e64e:	4960      	ldr	r1, [pc, #384]	; (800e7d0 <lwip_netconn_do_delconn+0x1b0>)
 800e650:	4860      	ldr	r0, [pc, #384]	; (800e7d4 <lwip_netconn_do_delconn+0x1b4>)
 800e652:	f00d f8d7 	bl	801b804 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800e656:	7afb      	ldrb	r3, [r7, #11]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d005      	beq.n	800e668 <lwip_netconn_do_delconn+0x48>
 800e65c:	7afb      	ldrb	r3, [r7, #11]
 800e65e:	2b02      	cmp	r3, #2
 800e660:	d002      	beq.n	800e668 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800e662:	7afb      	ldrb	r3, [r7, #11]
 800e664:	2b03      	cmp	r3, #3
 800e666:	d109      	bne.n	800e67c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800e668:	7afb      	ldrb	r3, [r7, #11]
 800e66a:	2b03      	cmp	r3, #3
 800e66c:	d10a      	bne.n	800e684 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	7f1b      	ldrb	r3, [r3, #28]
 800e674:	f003 0304 	and.w	r3, r3, #4
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d103      	bne.n	800e684 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	22fb      	movs	r2, #251	; 0xfb
 800e680:	711a      	strb	r2, [r3, #4]
 800e682:	e097      	b.n	800e7b4 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800e684:	7afb      	ldrb	r3, [r7, #11]
 800e686:	2b03      	cmp	r3, #3
 800e688:	d10d      	bne.n	800e6a6 <lwip_netconn_do_delconn+0x86>
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	7f1b      	ldrb	r3, [r3, #28]
 800e690:	f003 0304 	and.w	r3, r3, #4
 800e694:	2b00      	cmp	r3, #0
 800e696:	d106      	bne.n	800e6a6 <lwip_netconn_do_delconn+0x86>
 800e698:	4b4c      	ldr	r3, [pc, #304]	; (800e7cc <lwip_netconn_do_delconn+0x1ac>)
 800e69a:	f240 427a 	movw	r2, #1146	; 0x47a
 800e69e:	494e      	ldr	r1, [pc, #312]	; (800e7d8 <lwip_netconn_do_delconn+0x1b8>)
 800e6a0:	484c      	ldr	r0, [pc, #304]	; (800e7d4 <lwip_netconn_do_delconn+0x1b4>)
 800e6a2:	f00d f8af 	bl	801b804 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	f7ff fdcd 	bl	800e250 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	685b      	ldr	r3, [r3, #4]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d05f      	beq.n	800e780 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e6ca:	2b10      	cmp	r3, #16
 800e6cc:	d00d      	beq.n	800e6ea <lwip_netconn_do_delconn+0xca>
 800e6ce:	2b20      	cmp	r3, #32
 800e6d0:	d151      	bne.n	800e776 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	685b      	ldr	r3, [r3, #4]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	685b      	ldr	r3, [r3, #4]
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f00a fb32 	bl	8018d4c <udp_remove>
          break;
 800e6e8:	e046      	b.n	800e778 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	6a1b      	ldr	r3, [r3, #32]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d006      	beq.n	800e702 <lwip_netconn_do_delconn+0xe2>
 800e6f4:	4b35      	ldr	r3, [pc, #212]	; (800e7cc <lwip_netconn_do_delconn+0x1ac>)
 800e6f6:	f240 4294 	movw	r2, #1172	; 0x494
 800e6fa:	4938      	ldr	r1, [pc, #224]	; (800e7dc <lwip_netconn_do_delconn+0x1bc>)
 800e6fc:	4835      	ldr	r0, [pc, #212]	; (800e7d4 <lwip_netconn_do_delconn+0x1b4>)
 800e6fe:	f00d f881 	bl	801b804 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	2204      	movs	r2, #4
 800e708:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2203      	movs	r2, #3
 800e70e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	68fa      	ldr	r2, [r7, #12]
 800e716:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	2100      	movs	r1, #0
 800e71e:	4618      	mov	r0, r3
 800e720:	f7ff fe14 	bl	800e34c <lwip_netconn_do_close_internal>
 800e724:	4603      	mov	r3, r0
 800e726:	2b00      	cmp	r3, #0
 800e728:	d04b      	beq.n	800e7c2 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	785b      	ldrb	r3, [r3, #1]
 800e730:	2b04      	cmp	r3, #4
 800e732:	d006      	beq.n	800e742 <lwip_netconn_do_delconn+0x122>
 800e734:	4b25      	ldr	r3, [pc, #148]	; (800e7cc <lwip_netconn_do_delconn+0x1ac>)
 800e736:	f240 429a 	movw	r2, #1178	; 0x49a
 800e73a:	4929      	ldr	r1, [pc, #164]	; (800e7e0 <lwip_netconn_do_delconn+0x1c0>)
 800e73c:	4825      	ldr	r0, [pc, #148]	; (800e7d4 <lwip_netconn_do_delconn+0x1b4>)
 800e73e:	f00d f861 	bl	801b804 <iprintf>
            UNLOCK_TCPIP_CORE();
 800e742:	4828      	ldr	r0, [pc, #160]	; (800e7e4 <lwip_netconn_do_delconn+0x1c4>)
 800e744:	f00c ffc9 	bl	801b6da <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	330c      	adds	r3, #12
 800e74e:	2100      	movs	r1, #0
 800e750:	4618      	mov	r0, r3
 800e752:	f00c ff28 	bl	801b5a6 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800e756:	4823      	ldr	r0, [pc, #140]	; (800e7e4 <lwip_netconn_do_delconn+0x1c4>)
 800e758:	f00c ffb0 	bl	801b6bc <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	785b      	ldrb	r3, [r3, #1]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d02d      	beq.n	800e7c2 <lwip_netconn_do_delconn+0x1a2>
 800e766:	4b19      	ldr	r3, [pc, #100]	; (800e7cc <lwip_netconn_do_delconn+0x1ac>)
 800e768:	f240 429e 	movw	r2, #1182	; 0x49e
 800e76c:	491c      	ldr	r1, [pc, #112]	; (800e7e0 <lwip_netconn_do_delconn+0x1c0>)
 800e76e:	4819      	ldr	r0, [pc, #100]	; (800e7d4 <lwip_netconn_do_delconn+0x1b4>)
 800e770:	f00d f848 	bl	801b804 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800e774:	e025      	b.n	800e7c2 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800e776:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	2200      	movs	r2, #0
 800e77e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e786:	2b00      	cmp	r3, #0
 800e788:	d007      	beq.n	800e79a <lwip_netconn_do_delconn+0x17a>
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e790:	68fa      	ldr	r2, [r7, #12]
 800e792:	6810      	ldr	r0, [r2, #0]
 800e794:	2200      	movs	r2, #0
 800e796:	2100      	movs	r1, #0
 800e798:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d007      	beq.n	800e7b4 <lwip_netconn_do_delconn+0x194>
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7aa:	68fa      	ldr	r2, [r7, #12]
 800e7ac:	6810      	ldr	r0, [r2, #0]
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	2102      	movs	r1, #2
 800e7b2:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	330c      	adds	r3, #12
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f00c ff3e 	bl	801b63c <sys_sem_valid>
 800e7c0:	e000      	b.n	800e7c4 <lwip_netconn_do_delconn+0x1a4>
          return;
 800e7c2:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800e7c4:	3710      	adds	r7, #16
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}
 800e7ca:	bf00      	nop
 800e7cc:	0801d06c 	.word	0x0801d06c
 800e7d0:	0801d3dc 	.word	0x0801d3dc
 800e7d4:	0801d0b0 	.word	0x0801d0b0
 800e7d8:	0801d3f0 	.word	0x0801d3f0
 800e7dc:	0801d410 	.word	0x0801d410
 800e7e0:	0801d42c 	.word	0x0801d42c
 800e7e4:	2000d934 	.word	0x2000d934

0800e7e8 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b084      	sub	sp, #16
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	685b      	ldr	r3, [r3, #4]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d025      	beq.n	800e84a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	781b      	ldrb	r3, [r3, #0]
 800e804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e808:	2b10      	cmp	r3, #16
 800e80a:	d00e      	beq.n	800e82a <lwip_netconn_do_bind+0x42>
 800e80c:	2b20      	cmp	r3, #32
 800e80e:	d119      	bne.n	800e844 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	6858      	ldr	r0, [r3, #4]
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	6899      	ldr	r1, [r3, #8]
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	899b      	ldrh	r3, [r3, #12]
 800e81e:	461a      	mov	r2, r3
 800e820:	f00a f9ec 	bl	8018bfc <udp_bind>
 800e824:	4603      	mov	r3, r0
 800e826:	73fb      	strb	r3, [r7, #15]
        break;
 800e828:	e011      	b.n	800e84e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	6858      	ldr	r0, [r3, #4]
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	6899      	ldr	r1, [r3, #8]
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	899b      	ldrh	r3, [r3, #12]
 800e838:	461a      	mov	r2, r3
 800e83a:	f004 fa49 	bl	8012cd0 <tcp_bind>
 800e83e:	4603      	mov	r3, r0
 800e840:	73fb      	strb	r3, [r7, #15]
        break;
 800e842:	e004      	b.n	800e84e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800e844:	23fa      	movs	r3, #250	; 0xfa
 800e846:	73fb      	strb	r3, [r7, #15]
        break;
 800e848:	e001      	b.n	800e84e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800e84a:	23fa      	movs	r3, #250	; 0xfa
 800e84c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	7bfa      	ldrb	r2, [r7, #15]
 800e852:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800e854:	bf00      	nop
 800e856:	3710      	adds	r7, #16
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}

0800e85c <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b086      	sub	sp, #24
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800e868:	693b      	ldr	r3, [r7, #16]
 800e86a:	2200      	movs	r2, #0
 800e86c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	685b      	ldr	r3, [r3, #4]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d022      	beq.n	800e8be <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	781b      	ldrb	r3, [r3, #0]
 800e87e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e882:	2b10      	cmp	r3, #16
 800e884:	d11b      	bne.n	800e8be <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800e886:	693b      	ldr	r3, [r7, #16]
 800e888:	689b      	ldr	r3, [r3, #8]
 800e88a:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800e88c:	697b      	ldr	r3, [r7, #20]
 800e88e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e892:	d202      	bcs.n	800e89a <lwip_netconn_do_recv+0x3e>
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	b29b      	uxth	r3, r3
 800e898:	e001      	b.n	800e89e <lwip_netconn_do_recv+0x42>
 800e89a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e89e:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	685b      	ldr	r3, [r3, #4]
 800e8a6:	89fa      	ldrh	r2, [r7, #14]
 800e8a8:	4611      	mov	r1, r2
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f004 fb02 	bl	8012eb4 <tcp_recved>
        remaining -= recved;
 800e8b0:	89fb      	ldrh	r3, [r7, #14]
 800e8b2:	697a      	ldr	r2, [r7, #20]
 800e8b4:	1ad3      	subs	r3, r2, r3
 800e8b6:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800e8b8:	697b      	ldr	r3, [r7, #20]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d1e6      	bne.n	800e88c <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e8be:	bf00      	nop
 800e8c0:	3718      	adds	r7, #24
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}
	...

0800e8c8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b088      	sub	sp, #32
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
 800e8d0:	460b      	mov	r3, r1
 800e8d2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d106      	bne.n	800e8ec <lwip_netconn_do_writemore+0x24>
 800e8de:	4b96      	ldr	r3, [pc, #600]	; (800eb38 <lwip_netconn_do_writemore+0x270>)
 800e8e0:	f240 6273 	movw	r2, #1651	; 0x673
 800e8e4:	4995      	ldr	r1, [pc, #596]	; (800eb3c <lwip_netconn_do_writemore+0x274>)
 800e8e6:	4896      	ldr	r0, [pc, #600]	; (800eb40 <lwip_netconn_do_writemore+0x278>)
 800e8e8:	f00c ff8c 	bl	801b804 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	785b      	ldrb	r3, [r3, #1]
 800e8f0:	2b01      	cmp	r3, #1
 800e8f2:	d006      	beq.n	800e902 <lwip_netconn_do_writemore+0x3a>
 800e8f4:	4b90      	ldr	r3, [pc, #576]	; (800eb38 <lwip_netconn_do_writemore+0x270>)
 800e8f6:	f240 6274 	movw	r2, #1652	; 0x674
 800e8fa:	4992      	ldr	r1, [pc, #584]	; (800eb44 <lwip_netconn_do_writemore+0x27c>)
 800e8fc:	4890      	ldr	r0, [pc, #576]	; (800eb40 <lwip_netconn_do_writemore+0x278>)
 800e8fe:	f00c ff81 	bl	801b804 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6a1b      	ldr	r3, [r3, #32]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d106      	bne.n	800e918 <lwip_netconn_do_writemore+0x50>
 800e90a:	4b8b      	ldr	r3, [pc, #556]	; (800eb38 <lwip_netconn_do_writemore+0x270>)
 800e90c:	f240 6275 	movw	r2, #1653	; 0x675
 800e910:	498d      	ldr	r1, [pc, #564]	; (800eb48 <lwip_netconn_do_writemore+0x280>)
 800e912:	488b      	ldr	r0, [pc, #556]	; (800eb40 <lwip_netconn_do_writemore+0x278>)
 800e914:	f00c ff76 	bl	801b804 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	685b      	ldr	r3, [r3, #4]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d106      	bne.n	800e92e <lwip_netconn_do_writemore+0x66>
 800e920:	4b85      	ldr	r3, [pc, #532]	; (800eb38 <lwip_netconn_do_writemore+0x270>)
 800e922:	f240 6276 	movw	r2, #1654	; 0x676
 800e926:	4989      	ldr	r1, [pc, #548]	; (800eb4c <lwip_netconn_do_writemore+0x284>)
 800e928:	4885      	ldr	r0, [pc, #532]	; (800eb40 <lwip_netconn_do_writemore+0x278>)
 800e92a:	f00c ff6b 	bl	801b804 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6a1b      	ldr	r3, [r3, #32]
 800e932:	699a      	ldr	r2, [r3, #24]
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	6a1b      	ldr	r3, [r3, #32]
 800e938:	695b      	ldr	r3, [r3, #20]
 800e93a:	429a      	cmp	r2, r3
 800e93c:	d306      	bcc.n	800e94c <lwip_netconn_do_writemore+0x84>
 800e93e:	4b7e      	ldr	r3, [pc, #504]	; (800eb38 <lwip_netconn_do_writemore+0x270>)
 800e940:	f240 6277 	movw	r2, #1655	; 0x677
 800e944:	4982      	ldr	r1, [pc, #520]	; (800eb50 <lwip_netconn_do_writemore+0x288>)
 800e946:	487e      	ldr	r0, [pc, #504]	; (800eb40 <lwip_netconn_do_writemore+0x278>)
 800e948:	f00c ff5c 	bl	801b804 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6a1b      	ldr	r3, [r3, #32]
 800e950:	899b      	ldrh	r3, [r3, #12]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d106      	bne.n	800e964 <lwip_netconn_do_writemore+0x9c>
 800e956:	4b78      	ldr	r3, [pc, #480]	; (800eb38 <lwip_netconn_do_writemore+0x270>)
 800e958:	f240 6279 	movw	r2, #1657	; 0x679
 800e95c:	497d      	ldr	r1, [pc, #500]	; (800eb54 <lwip_netconn_do_writemore+0x28c>)
 800e95e:	4878      	ldr	r0, [pc, #480]	; (800eb40 <lwip_netconn_do_writemore+0x278>)
 800e960:	f00c ff50 	bl	801b804 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	6a1b      	ldr	r3, [r3, #32]
 800e968:	7f1b      	ldrb	r3, [r3, #28]
 800e96a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	7f1b      	ldrb	r3, [r3, #28]
 800e970:	f003 0302 	and.w	r3, r3, #2
 800e974:	2b00      	cmp	r3, #0
 800e976:	d104      	bne.n	800e982 <lwip_netconn_do_writemore+0xba>
 800e978:	7ebb      	ldrb	r3, [r7, #26]
 800e97a:	f003 0304 	and.w	r3, r3, #4
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d001      	beq.n	800e986 <lwip_netconn_do_writemore+0xbe>
 800e982:	2301      	movs	r3, #1
 800e984:	e000      	b.n	800e988 <lwip_netconn_do_writemore+0xc0>
 800e986:	2300      	movs	r3, #0
 800e988:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6a1b      	ldr	r3, [r3, #32]
 800e98e:	689b      	ldr	r3, [r3, #8]
 800e990:	681a      	ldr	r2, [r3, #0]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6a1b      	ldr	r3, [r3, #32]
 800e996:	691b      	ldr	r3, [r3, #16]
 800e998:	4413      	add	r3, r2
 800e99a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6a1b      	ldr	r3, [r3, #32]
 800e9a0:	689b      	ldr	r3, [r3, #8]
 800e9a2:	685a      	ldr	r2, [r3, #4]
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6a1b      	ldr	r3, [r3, #32]
 800e9a8:	691b      	ldr	r3, [r3, #16]
 800e9aa:	1ad3      	subs	r3, r2, r3
 800e9ac:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800e9ae:	693b      	ldr	r3, [r7, #16]
 800e9b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9b4:	d307      	bcc.n	800e9c6 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800e9b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e9ba:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800e9bc:	7ebb      	ldrb	r3, [r7, #26]
 800e9be:	f043 0302 	orr.w	r3, r3, #2
 800e9c2:	76bb      	strb	r3, [r7, #26]
 800e9c4:	e001      	b.n	800e9ca <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	685b      	ldr	r3, [r3, #4]
 800e9ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e9d2:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800e9d4:	89fa      	ldrh	r2, [r7, #14]
 800e9d6:	8bbb      	ldrh	r3, [r7, #28]
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	d216      	bcs.n	800ea0a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800e9dc:	89fb      	ldrh	r3, [r7, #14]
 800e9de:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800e9e0:	7e3b      	ldrb	r3, [r7, #24]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d00d      	beq.n	800ea02 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800e9e6:	8bbb      	ldrh	r3, [r7, #28]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d10e      	bne.n	800ea0a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	6a1b      	ldr	r3, [r3, #32]
 800e9f0:	699b      	ldr	r3, [r3, #24]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d102      	bne.n	800e9fc <lwip_netconn_do_writemore+0x134>
 800e9f6:	f06f 0306 	mvn.w	r3, #6
 800e9fa:	e000      	b.n	800e9fe <lwip_netconn_do_writemore+0x136>
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800ea00:	e07d      	b.n	800eafe <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800ea02:	7ebb      	ldrb	r3, [r7, #26]
 800ea04:	f043 0302 	orr.w	r3, r3, #2
 800ea08:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6a1b      	ldr	r3, [r3, #32]
 800ea0e:	691a      	ldr	r2, [r3, #16]
 800ea10:	8bbb      	ldrh	r3, [r7, #28]
 800ea12:	441a      	add	r2, r3
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6a1b      	ldr	r3, [r3, #32]
 800ea18:	689b      	ldr	r3, [r3, #8]
 800ea1a:	685b      	ldr	r3, [r3, #4]
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	d906      	bls.n	800ea2e <lwip_netconn_do_writemore+0x166>
 800ea20:	4b45      	ldr	r3, [pc, #276]	; (800eb38 <lwip_netconn_do_writemore+0x270>)
 800ea22:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800ea26:	494c      	ldr	r1, [pc, #304]	; (800eb58 <lwip_netconn_do_writemore+0x290>)
 800ea28:	4845      	ldr	r0, [pc, #276]	; (800eb40 <lwip_netconn_do_writemore+0x278>)
 800ea2a:	f00c feeb 	bl	801b804 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ea2e:	8bbb      	ldrh	r3, [r7, #28]
 800ea30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea34:	4293      	cmp	r3, r2
 800ea36:	d103      	bne.n	800ea40 <lwip_netconn_do_writemore+0x178>
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea3e:	d209      	bcs.n	800ea54 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ea40:	693b      	ldr	r3, [r7, #16]
 800ea42:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ea44:	8bba      	ldrh	r2, [r7, #28]
 800ea46:	429a      	cmp	r2, r3
 800ea48:	d10b      	bne.n	800ea62 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	6a1b      	ldr	r3, [r3, #32]
 800ea4e:	899b      	ldrh	r3, [r3, #12]
 800ea50:	2b01      	cmp	r3, #1
 800ea52:	d906      	bls.n	800ea62 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800ea54:	2301      	movs	r3, #1
 800ea56:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ea58:	7ebb      	ldrb	r3, [r7, #26]
 800ea5a:	f043 0302 	orr.w	r3, r3, #2
 800ea5e:	76bb      	strb	r3, [r7, #26]
 800ea60:	e001      	b.n	800ea66 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800ea62:	2300      	movs	r3, #0
 800ea64:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6858      	ldr	r0, [r3, #4]
 800ea6a:	7ebb      	ldrb	r3, [r7, #26]
 800ea6c:	8bba      	ldrh	r2, [r7, #28]
 800ea6e:	6979      	ldr	r1, [r7, #20]
 800ea70:	f008 f828 	bl	8016ac4 <tcp_write>
 800ea74:	4603      	mov	r3, r0
 800ea76:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800ea78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d12c      	bne.n	800eada <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6a1b      	ldr	r3, [r3, #32]
 800ea84:	6999      	ldr	r1, [r3, #24]
 800ea86:	8bba      	ldrh	r2, [r7, #28]
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6a1b      	ldr	r3, [r3, #32]
 800ea8c:	440a      	add	r2, r1
 800ea8e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	6a1b      	ldr	r3, [r3, #32]
 800ea94:	6919      	ldr	r1, [r3, #16]
 800ea96:	8bba      	ldrh	r2, [r7, #28]
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6a1b      	ldr	r3, [r3, #32]
 800ea9c:	440a      	add	r2, r1
 800ea9e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6a1b      	ldr	r3, [r3, #32]
 800eaa4:	691a      	ldr	r2, [r3, #16]
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6a1b      	ldr	r3, [r3, #32]
 800eaaa:	689b      	ldr	r3, [r3, #8]
 800eaac:	685b      	ldr	r3, [r3, #4]
 800eaae:	429a      	cmp	r2, r3
 800eab0:	d113      	bne.n	800eada <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6a1b      	ldr	r3, [r3, #32]
 800eab6:	899a      	ldrh	r2, [r3, #12]
 800eab8:	3a01      	subs	r2, #1
 800eaba:	b292      	uxth	r2, r2
 800eabc:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6a1b      	ldr	r3, [r3, #32]
 800eac2:	899b      	ldrh	r3, [r3, #12]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d008      	beq.n	800eada <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6a1b      	ldr	r3, [r3, #32]
 800eacc:	689a      	ldr	r2, [r3, #8]
 800eace:	3208      	adds	r2, #8
 800ead0:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	6a1b      	ldr	r3, [r3, #32]
 800ead6:	2200      	movs	r2, #0
 800ead8:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800eada:	7e7b      	ldrb	r3, [r7, #25]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d004      	beq.n	800eaea <lwip_netconn_do_writemore+0x222>
 800eae0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	f43f af50 	beq.w	800e98a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800eaea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d004      	beq.n	800eafc <lwip_netconn_do_writemore+0x234>
 800eaf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800eaf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eafa:	d146      	bne.n	800eb8a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800eafc:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800eafe:	7e3b      	ldrb	r3, [r7, #24]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d02b      	beq.n	800eb5c <lwip_netconn_do_writemore+0x294>
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6a1b      	ldr	r3, [r3, #32]
 800eb08:	699a      	ldr	r2, [r3, #24]
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6a1b      	ldr	r3, [r3, #32]
 800eb0e:	695b      	ldr	r3, [r3, #20]
 800eb10:	429a      	cmp	r2, r3
 800eb12:	d223      	bcs.n	800eb5c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d005      	beq.n	800eb28 <lwip_netconn_do_writemore+0x260>
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb20:	2200      	movs	r2, #0
 800eb22:	2103      	movs	r1, #3
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	7f1b      	ldrb	r3, [r3, #28]
 800eb2c:	f043 0310 	orr.w	r3, r3, #16
 800eb30:	b2da      	uxtb	r2, r3
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	771a      	strb	r2, [r3, #28]
 800eb36:	e028      	b.n	800eb8a <lwip_netconn_do_writemore+0x2c2>
 800eb38:	0801d06c 	.word	0x0801d06c
 800eb3c:	0801d1c4 	.word	0x0801d1c4
 800eb40:	0801d0b0 	.word	0x0801d0b0
 800eb44:	0801d4cc 	.word	0x0801d4cc
 800eb48:	0801d1d4 	.word	0x0801d1d4
 800eb4c:	0801d4ec 	.word	0x0801d4ec
 800eb50:	0801d504 	.word	0x0801d504
 800eb54:	0801d544 	.word	0x0801d544
 800eb58:	0801d56c 	.word	0x0801d56c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	685b      	ldr	r3, [r3, #4]
 800eb60:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800eb64:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800eb68:	d305      	bcc.n	800eb76 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	685b      	ldr	r3, [r3, #4]
 800eb6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800eb72:	2b04      	cmp	r3, #4
 800eb74:	d909      	bls.n	800eb8a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d005      	beq.n	800eb8a <lwip_netconn_do_writemore+0x2c2>
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb82:	2200      	movs	r2, #0
 800eb84:	2103      	movs	r1, #3
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800eb8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d11d      	bne.n	800ebce <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6a1b      	ldr	r3, [r3, #32]
 800eb96:	699a      	ldr	r2, [r3, #24]
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6a1b      	ldr	r3, [r3, #32]
 800eb9c:	695b      	ldr	r3, [r3, #20]
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	d002      	beq.n	800eba8 <lwip_netconn_do_writemore+0x2e0>
 800eba2:	7e3b      	ldrb	r3, [r7, #24]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d001      	beq.n	800ebac <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800eba8:	2301      	movs	r3, #1
 800ebaa:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	685b      	ldr	r3, [r3, #4]
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f008 fd71 	bl	8017698 <tcp_output>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800ebba:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800ebbe:	f113 0f04 	cmn.w	r3, #4
 800ebc2:	d12c      	bne.n	800ec1e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ebc4:	7b3b      	ldrb	r3, [r7, #12]
 800ebc6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ebc8:	2301      	movs	r3, #1
 800ebca:	76fb      	strb	r3, [r7, #27]
 800ebcc:	e027      	b.n	800ec1e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800ebce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ebd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebd6:	d120      	bne.n	800ec1a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	685b      	ldr	r3, [r3, #4]
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f008 fd5b 	bl	8017698 <tcp_output>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800ebe6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800ebea:	f113 0f04 	cmn.w	r3, #4
 800ebee:	d104      	bne.n	800ebfa <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ebf0:	7b7b      	ldrb	r3, [r7, #13]
 800ebf2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	76fb      	strb	r3, [r7, #27]
 800ebf8:	e011      	b.n	800ec1e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800ebfa:	7e3b      	ldrb	r3, [r7, #24]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d00e      	beq.n	800ec1e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	6a1b      	ldr	r3, [r3, #32]
 800ec04:	699b      	ldr	r3, [r3, #24]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d102      	bne.n	800ec10 <lwip_netconn_do_writemore+0x348>
 800ec0a:	f06f 0306 	mvn.w	r3, #6
 800ec0e:	e000      	b.n	800ec12 <lwip_netconn_do_writemore+0x34a>
 800ec10:	2300      	movs	r3, #0
 800ec12:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ec14:	2301      	movs	r3, #1
 800ec16:	76fb      	strb	r3, [r7, #27]
 800ec18:	e001      	b.n	800ec1e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800ec1e:	7efb      	ldrb	r3, [r7, #27]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d015      	beq.n	800ec50 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6a1b      	ldr	r3, [r3, #32]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	330c      	adds	r3, #12
 800ec2c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	6a1b      	ldr	r3, [r3, #32]
 800ec32:	7ffa      	ldrb	r2, [r7, #31]
 800ec34:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2200      	movs	r2, #0
 800ec3a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800ec42:	78fb      	ldrb	r3, [r7, #3]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d006      	beq.n	800ec56 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800ec48:	68b8      	ldr	r0, [r7, #8]
 800ec4a:	f00c fcdd 	bl	801b608 <sys_sem_signal>
 800ec4e:	e002      	b.n	800ec56 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800ec50:	f04f 33ff 	mov.w	r3, #4294967295
 800ec54:	e000      	b.n	800ec58 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800ec56:	2300      	movs	r3, #0
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3720      	adds	r7, #32
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}

0800ec60 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b084      	sub	sp, #16
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	685b      	ldr	r3, [r3, #4]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d06b      	beq.n	800ed4e <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	7c1b      	ldrb	r3, [r3, #16]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d007      	beq.n	800ec8e <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	685a      	ldr	r2, [r3, #4]
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	689b      	ldr	r3, [r3, #8]
 800ec88:	6812      	ldr	r2, [r2, #0]
 800ec8a:	601a      	str	r2, [r3, #0]
 800ec8c:	e006      	b.n	800ec9c <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	685a      	ldr	r2, [r3, #4]
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	689b      	ldr	r3, [r3, #8]
 800ec98:	6852      	ldr	r2, [r2, #4]
 800ec9a:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	2200      	movs	r2, #0
 800eca0:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	781b      	ldrb	r3, [r3, #0]
 800eca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ecac:	2b10      	cmp	r3, #16
 800ecae:	d021      	beq.n	800ecf4 <lwip_netconn_do_getaddr+0x94>
 800ecb0:	2b20      	cmp	r3, #32
 800ecb2:	d144      	bne.n	800ed3e <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	7c1b      	ldrb	r3, [r3, #16]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d007      	beq.n	800eccc <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	685a      	ldr	r2, [r3, #4]
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	68db      	ldr	r3, [r3, #12]
 800ecc6:	8a52      	ldrh	r2, [r2, #18]
 800ecc8:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800ecca:	e044      	b.n	800ed56 <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	685b      	ldr	r3, [r3, #4]
 800ecd2:	7c1b      	ldrb	r3, [r3, #16]
 800ecd4:	f003 0304 	and.w	r3, r3, #4
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d103      	bne.n	800ece4 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	22f5      	movs	r2, #245	; 0xf5
 800ece0:	711a      	strb	r2, [r3, #4]
        break;
 800ece2:	e038      	b.n	800ed56 <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	685a      	ldr	r2, [r3, #4]
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	68db      	ldr	r3, [r3, #12]
 800ecee:	8a92      	ldrh	r2, [r2, #20]
 800ecf0:	801a      	strh	r2, [r3, #0]
        break;
 800ecf2:	e030      	b.n	800ed56 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	7c1b      	ldrb	r3, [r3, #16]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d10f      	bne.n	800ed1c <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	685b      	ldr	r3, [r3, #4]
 800ed02:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d005      	beq.n	800ed14 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	7d1b      	ldrb	r3, [r3, #20]
 800ed10:	2b01      	cmp	r3, #1
 800ed12:	d103      	bne.n	800ed1c <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	22f5      	movs	r2, #245	; 0xf5
 800ed18:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800ed1a:	e01c      	b.n	800ed56 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	7c1b      	ldrb	r3, [r3, #16]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d004      	beq.n	800ed2e <lwip_netconn_do_getaddr+0xce>
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	685b      	ldr	r3, [r3, #4]
 800ed2a:	8adb      	ldrh	r3, [r3, #22]
 800ed2c:	e003      	b.n	800ed36 <lwip_netconn_do_getaddr+0xd6>
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	685b      	ldr	r3, [r3, #4]
 800ed34:	8b1b      	ldrh	r3, [r3, #24]
 800ed36:	68fa      	ldr	r2, [r7, #12]
 800ed38:	68d2      	ldr	r2, [r2, #12]
 800ed3a:	8013      	strh	r3, [r2, #0]
        break;
 800ed3c:	e00b      	b.n	800ed56 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800ed3e:	4b08      	ldr	r3, [pc, #32]	; (800ed60 <lwip_netconn_do_getaddr+0x100>)
 800ed40:	f240 727d 	movw	r2, #1917	; 0x77d
 800ed44:	4907      	ldr	r1, [pc, #28]	; (800ed64 <lwip_netconn_do_getaddr+0x104>)
 800ed46:	4808      	ldr	r0, [pc, #32]	; (800ed68 <lwip_netconn_do_getaddr+0x108>)
 800ed48:	f00c fd5c 	bl	801b804 <iprintf>
        break;
 800ed4c:	e003      	b.n	800ed56 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	22f5      	movs	r2, #245	; 0xf5
 800ed52:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ed54:	bf00      	nop
 800ed56:	bf00      	nop
 800ed58:	3710      	adds	r7, #16
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}
 800ed5e:	bf00      	nop
 800ed60:	0801d06c 	.word	0x0801d06c
 800ed64:	0801d5ac 	.word	0x0801d5ac
 800ed68:	0801d0b0 	.word	0x0801d0b0

0800ed6c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b084      	sub	sp, #16
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	785b      	ldrb	r3, [r3, #1]
 800ed7e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	685b      	ldr	r3, [r3, #4]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d069      	beq.n	800ee5e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	781b      	ldrb	r3, [r3, #0]
 800ed90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800ed94:	2b10      	cmp	r3, #16
 800ed96:	d162      	bne.n	800ee5e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800ed9c:	2b03      	cmp	r3, #3
 800ed9e:	d002      	beq.n	800eda6 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800eda0:	7afb      	ldrb	r3, [r7, #11]
 800eda2:	2b02      	cmp	r3, #2
 800eda4:	d05b      	beq.n	800ee5e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800eda6:	7afb      	ldrb	r3, [r7, #11]
 800eda8:	2b03      	cmp	r3, #3
 800edaa:	d103      	bne.n	800edb4 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	22f5      	movs	r2, #245	; 0xf5
 800edb0:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800edb2:	e059      	b.n	800ee68 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800edb4:	7afb      	ldrb	r3, [r7, #11]
 800edb6:	2b01      	cmp	r3, #1
 800edb8:	d103      	bne.n	800edc2 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	22fb      	movs	r2, #251	; 0xfb
 800edbe:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800edc0:	e052      	b.n	800ee68 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	7a1b      	ldrb	r3, [r3, #8]
 800edc6:	f003 0301 	and.w	r3, r3, #1
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d004      	beq.n	800edd8 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	4618      	mov	r0, r3
 800edd4:	f7ff fa3c 	bl	800e250 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	6a1b      	ldr	r3, [r3, #32]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d006      	beq.n	800edf0 <lwip_netconn_do_close+0x84>
 800ede2:	4b23      	ldr	r3, [pc, #140]	; (800ee70 <lwip_netconn_do_close+0x104>)
 800ede4:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800ede8:	4922      	ldr	r1, [pc, #136]	; (800ee74 <lwip_netconn_do_close+0x108>)
 800edea:	4823      	ldr	r0, [pc, #140]	; (800ee78 <lwip_netconn_do_close+0x10c>)
 800edec:	f00c fd0a 	bl	801b804 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	2204      	movs	r2, #4
 800edf6:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	68fa      	ldr	r2, [r7, #12]
 800edfe:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	2100      	movs	r1, #0
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7ff faa0 	bl	800e34c <lwip_netconn_do_close_internal>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d029      	beq.n	800ee66 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	785b      	ldrb	r3, [r3, #1]
 800ee18:	2b04      	cmp	r3, #4
 800ee1a:	d006      	beq.n	800ee2a <lwip_netconn_do_close+0xbe>
 800ee1c:	4b14      	ldr	r3, [pc, #80]	; (800ee70 <lwip_netconn_do_close+0x104>)
 800ee1e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800ee22:	4916      	ldr	r1, [pc, #88]	; (800ee7c <lwip_netconn_do_close+0x110>)
 800ee24:	4814      	ldr	r0, [pc, #80]	; (800ee78 <lwip_netconn_do_close+0x10c>)
 800ee26:	f00c fced 	bl	801b804 <iprintf>
        UNLOCK_TCPIP_CORE();
 800ee2a:	4815      	ldr	r0, [pc, #84]	; (800ee80 <lwip_netconn_do_close+0x114>)
 800ee2c:	f00c fc55 	bl	801b6da <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	330c      	adds	r3, #12
 800ee36:	2100      	movs	r1, #0
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f00c fbb4 	bl	801b5a6 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800ee3e:	4810      	ldr	r0, [pc, #64]	; (800ee80 <lwip_netconn_do_close+0x114>)
 800ee40:	f00c fc3c 	bl	801b6bc <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	785b      	ldrb	r3, [r3, #1]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d00b      	beq.n	800ee66 <lwip_netconn_do_close+0xfa>
 800ee4e:	4b08      	ldr	r3, [pc, #32]	; (800ee70 <lwip_netconn_do_close+0x104>)
 800ee50:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800ee54:	4909      	ldr	r1, [pc, #36]	; (800ee7c <lwip_netconn_do_close+0x110>)
 800ee56:	4808      	ldr	r0, [pc, #32]	; (800ee78 <lwip_netconn_do_close+0x10c>)
 800ee58:	f00c fcd4 	bl	801b804 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800ee5c:	e003      	b.n	800ee66 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	22f5      	movs	r2, #245	; 0xf5
 800ee62:	711a      	strb	r2, [r3, #4]
 800ee64:	e000      	b.n	800ee68 <lwip_netconn_do_close+0xfc>
      return;
 800ee66:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ee68:	3710      	adds	r7, #16
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}
 800ee6e:	bf00      	nop
 800ee70:	0801d06c 	.word	0x0801d06c
 800ee74:	0801d410 	.word	0x0801d410
 800ee78:	0801d0b0 	.word	0x0801d0b0
 800ee7c:	0801d42c 	.word	0x0801d42c
 800ee80:	2000d934 	.word	0x2000d934

0800ee84 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800ee84:	b480      	push	{r7}
 800ee86:	b083      	sub	sp, #12
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800ee8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	dc04      	bgt.n	800eea0 <err_to_errno+0x1c>
 800ee96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee9a:	f113 0f10 	cmn.w	r3, #16
 800ee9e:	da01      	bge.n	800eea4 <err_to_errno+0x20>
    return EIO;
 800eea0:	2305      	movs	r3, #5
 800eea2:	e005      	b.n	800eeb0 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800eea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eea8:	425b      	negs	r3, r3
 800eeaa:	4a04      	ldr	r2, [pc, #16]	; (800eebc <err_to_errno+0x38>)
 800eeac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	370c      	adds	r7, #12
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr
 800eebc:	080204b8 	.word	0x080204b8

0800eec0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b082      	sub	sp, #8
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d013      	beq.n	800eef6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d00b      	beq.n	800eeee <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	4618      	mov	r0, r3
 800eedc:	f003 f8fc 	bl	80120d8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2200      	movs	r2, #0
 800eee4:	605a      	str	r2, [r3, #4]
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	685a      	ldr	r2, [r3, #4]
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800eeee:	6879      	ldr	r1, [r7, #4]
 800eef0:	2006      	movs	r0, #6
 800eef2:	f002 fa1b 	bl	801132c <memp_free>
  }
}
 800eef6:	bf00      	nop
 800eef8:	3708      	adds	r7, #8
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
	...

0800ef00 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800ef00:	b480      	push	{r7}
 800ef02:	b085      	sub	sp, #20
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	db02      	blt.n	800ef18 <tryget_socket_unconn_nouse+0x18>
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	2b03      	cmp	r3, #3
 800ef16:	dd01      	ble.n	800ef1c <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800ef18:	2300      	movs	r3, #0
 800ef1a:	e003      	b.n	800ef24 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	011b      	lsls	r3, r3, #4
 800ef20:	4a03      	ldr	r2, [pc, #12]	; (800ef30 <tryget_socket_unconn_nouse+0x30>)
 800ef22:	4413      	add	r3, r2
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	3714      	adds	r7, #20
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2e:	4770      	bx	lr
 800ef30:	2000d8e4 	.word	0x2000d8e4

0800ef34 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b084      	sub	sp, #16
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f7ff ffdf 	bl	800ef00 <tryget_socket_unconn_nouse>
 800ef42:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800ef44:	68fb      	ldr	r3, [r7, #12]
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	3710      	adds	r7, #16
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd80      	pop	{r7, pc}

0800ef4e <tryget_socket_unconn_locked>:

/* Like tryget_socket_unconn(), but called under SYS_ARCH_PROTECT lock. */
static struct lwip_sock *
tryget_socket_unconn_locked(int fd)
{
 800ef4e:	b580      	push	{r7, lr}
 800ef50:	b084      	sub	sp, #16
 800ef52:	af00      	add	r7, sp, #0
 800ef54:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f7ff ffd2 	bl	800ef00 <tryget_socket_unconn_nouse>
 800ef5c:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used_locked(ret)) {
      return NULL;
    }
  }
  return ret;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	3710      	adds	r7, #16
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}

0800ef68 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b084      	sub	sp, #16
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800ef70:	6878      	ldr	r0, [r7, #4]
 800ef72:	f7ff ffdf 	bl	800ef34 <tryget_socket_unconn>
 800ef76:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d005      	beq.n	800ef8a <tryget_socket+0x22>
    if (sock->conn) {
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d001      	beq.n	800ef8a <tryget_socket+0x22>
      return sock;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	e000      	b.n	800ef8c <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800ef8a:	2300      	movs	r3, #0
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3710      	adds	r7, #16
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}

0800ef94 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b084      	sub	sp, #16
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f7ff ffe3 	bl	800ef68 <tryget_socket>
 800efa2:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d104      	bne.n	800efb4 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800efaa:	4b05      	ldr	r3, [pc, #20]	; (800efc0 <get_socket+0x2c>)
 800efac:	2209      	movs	r2, #9
 800efae:	601a      	str	r2, [r3, #0]
    return NULL;
 800efb0:	2300      	movs	r3, #0
 800efb2:	e000      	b.n	800efb6 <get_socket+0x22>
  }
  return sock;
 800efb4:	68fb      	ldr	r3, [r7, #12]
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	3710      	adds	r7, #16
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}
 800efbe:	bf00      	nop
 800efc0:	200111e8 	.word	0x200111e8

0800efc4 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b084      	sub	sp, #16
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800efce:	2300      	movs	r3, #0
 800efd0:	60fb      	str	r3, [r7, #12]
 800efd2:	e052      	b.n	800f07a <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800efd4:	f00c fbae 	bl	801b734 <sys_arch_protect>
 800efd8:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800efda:	4a2c      	ldr	r2, [pc, #176]	; (800f08c <alloc_socket+0xc8>)
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	011b      	lsls	r3, r3, #4
 800efe0:	4413      	add	r3, r2
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d142      	bne.n	800f06e <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800efe8:	4a28      	ldr	r2, [pc, #160]	; (800f08c <alloc_socket+0xc8>)
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	011b      	lsls	r3, r3, #4
 800efee:	4413      	add	r3, r2
 800eff0:	687a      	ldr	r2, [r7, #4]
 800eff2:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800eff4:	68b8      	ldr	r0, [r7, #8]
 800eff6:	f00c fbab 	bl	801b750 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800effa:	4a24      	ldr	r2, [pc, #144]	; (800f08c <alloc_socket+0xc8>)
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	011b      	lsls	r3, r3, #4
 800f000:	4413      	add	r3, r2
 800f002:	3304      	adds	r3, #4
 800f004:	2200      	movs	r2, #0
 800f006:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800f008:	4a20      	ldr	r2, [pc, #128]	; (800f08c <alloc_socket+0xc8>)
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	011b      	lsls	r3, r3, #4
 800f00e:	4413      	add	r3, r2
 800f010:	330e      	adds	r3, #14
 800f012:	781b      	ldrb	r3, [r3, #0]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d006      	beq.n	800f026 <alloc_socket+0x62>
 800f018:	4b1d      	ldr	r3, [pc, #116]	; (800f090 <alloc_socket+0xcc>)
 800f01a:	f240 220e 	movw	r2, #526	; 0x20e
 800f01e:	491d      	ldr	r1, [pc, #116]	; (800f094 <alloc_socket+0xd0>)
 800f020:	481d      	ldr	r0, [pc, #116]	; (800f098 <alloc_socket+0xd4>)
 800f022:	f00c fbef 	bl	801b804 <iprintf>
      sockets[i].rcvevent   = 0;
 800f026:	4a19      	ldr	r2, [pc, #100]	; (800f08c <alloc_socket+0xc8>)
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	011b      	lsls	r3, r3, #4
 800f02c:	4413      	add	r3, r2
 800f02e:	3308      	adds	r3, #8
 800f030:	2200      	movs	r2, #0
 800f032:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	781b      	ldrb	r3, [r3, #0]
 800f038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f03c:	2b10      	cmp	r3, #16
 800f03e:	d102      	bne.n	800f046 <alloc_socket+0x82>
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d001      	beq.n	800f04a <alloc_socket+0x86>
 800f046:	2301      	movs	r3, #1
 800f048:	e000      	b.n	800f04c <alloc_socket+0x88>
 800f04a:	2300      	movs	r3, #0
 800f04c:	b299      	uxth	r1, r3
 800f04e:	4a0f      	ldr	r2, [pc, #60]	; (800f08c <alloc_socket+0xc8>)
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	011b      	lsls	r3, r3, #4
 800f054:	4413      	add	r3, r2
 800f056:	330a      	adds	r3, #10
 800f058:	460a      	mov	r2, r1
 800f05a:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800f05c:	4a0b      	ldr	r2, [pc, #44]	; (800f08c <alloc_socket+0xc8>)
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	011b      	lsls	r3, r3, #4
 800f062:	4413      	add	r3, r2
 800f064:	330c      	adds	r3, #12
 800f066:	2200      	movs	r2, #0
 800f068:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	e00a      	b.n	800f084 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800f06e:	68b8      	ldr	r0, [r7, #8]
 800f070:	f00c fb6e 	bl	801b750 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	3301      	adds	r3, #1
 800f078:	60fb      	str	r3, [r7, #12]
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	2b03      	cmp	r3, #3
 800f07e:	dda9      	ble.n	800efd4 <alloc_socket+0x10>
  }
  return -1;
 800f080:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f084:	4618      	mov	r0, r3
 800f086:	3710      	adds	r7, #16
 800f088:	46bd      	mov	sp, r7
 800f08a:	bd80      	pop	{r7, pc}
 800f08c:	2000d8e4 	.word	0x2000d8e4
 800f090:	0801d5c4 	.word	0x0801d5c4
 800f094:	0801d5f8 	.word	0x0801d5f8
 800f098:	0801d618 	.word	0x0801d618

0800f09c <lwip_bind>:
  return newsock;
}

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b08a      	sub	sp, #40	; 0x28
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	60f8      	str	r0, [r7, #12]
 800f0a4:	60b9      	str	r1, [r7, #8]
 800f0a6:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800f0a8:	68f8      	ldr	r0, [r7, #12]
 800f0aa:	f7ff ff73 	bl	800ef94 <get_socket>
 800f0ae:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800f0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d102      	bne.n	800f0bc <lwip_bind+0x20>
    return -1;
 800f0b6:	f04f 33ff 	mov.w	r3, #4294967295
 800f0ba:	e051      	b.n	800f160 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2b10      	cmp	r3, #16
 800f0c0:	d108      	bne.n	800f0d4 <lwip_bind+0x38>
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	785b      	ldrb	r3, [r3, #1]
 800f0c6:	2b02      	cmp	r3, #2
 800f0c8:	d104      	bne.n	800f0d4 <lwip_bind+0x38>
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	f003 0303 	and.w	r3, r3, #3
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d014      	beq.n	800f0fe <lwip_bind+0x62>
 800f0d4:	4b24      	ldr	r3, [pc, #144]	; (800f168 <lwip_bind+0xcc>)
 800f0d6:	f240 22e2 	movw	r2, #738	; 0x2e2
 800f0da:	4924      	ldr	r1, [pc, #144]	; (800f16c <lwip_bind+0xd0>)
 800f0dc:	4824      	ldr	r0, [pc, #144]	; (800f170 <lwip_bind+0xd4>)
 800f0de:	f00c fb91 	bl	801b804 <iprintf>
 800f0e2:	f06f 000f 	mvn.w	r0, #15
 800f0e6:	f7ff fecd 	bl	800ee84 <err_to_errno>
 800f0ea:	6178      	str	r0, [r7, #20]
 800f0ec:	697b      	ldr	r3, [r7, #20]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d002      	beq.n	800f0f8 <lwip_bind+0x5c>
 800f0f2:	4a20      	ldr	r2, [pc, #128]	; (800f174 <lwip_bind+0xd8>)
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	6013      	str	r3, [r2, #0]
 800f0f8:	f04f 33ff 	mov.w	r3, #4294967295
 800f0fc:	e030      	b.n	800f160 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800f0fe:	68bb      	ldr	r3, [r7, #8]
 800f100:	685b      	ldr	r3, [r3, #4]
 800f102:	613b      	str	r3, [r7, #16]
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	885b      	ldrh	r3, [r3, #2]
 800f108:	4618      	mov	r0, r3
 800f10a:	f001 fbc1 	bl	8010890 <lwip_htons>
 800f10e:	4603      	mov	r3, r0
 800f110:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800f112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f118:	f107 0110 	add.w	r1, r7, #16
 800f11c:	4618      	mov	r0, r3
 800f11e:	f7fe f9af 	bl	800d480 <netconn_bind>
 800f122:	4603      	mov	r3, r0
 800f124:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 800f128:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d00e      	beq.n	800f14e <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800f130:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800f134:	4618      	mov	r0, r3
 800f136:	f7ff fea5 	bl	800ee84 <err_to_errno>
 800f13a:	61b8      	str	r0, [r7, #24]
 800f13c:	69bb      	ldr	r3, [r7, #24]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d002      	beq.n	800f148 <lwip_bind+0xac>
 800f142:	4a0c      	ldr	r2, [pc, #48]	; (800f174 <lwip_bind+0xd8>)
 800f144:	69bb      	ldr	r3, [r7, #24]
 800f146:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800f148:	f04f 33ff 	mov.w	r3, #4294967295
 800f14c:	e008      	b.n	800f160 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800f14e:	2300      	movs	r3, #0
 800f150:	61fb      	str	r3, [r7, #28]
 800f152:	69fb      	ldr	r3, [r7, #28]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d002      	beq.n	800f15e <lwip_bind+0xc2>
 800f158:	4a06      	ldr	r2, [pc, #24]	; (800f174 <lwip_bind+0xd8>)
 800f15a:	69fb      	ldr	r3, [r7, #28]
 800f15c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800f15e:	2300      	movs	r3, #0
}
 800f160:	4618      	mov	r0, r3
 800f162:	3728      	adds	r7, #40	; 0x28
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}
 800f168:	0801d5c4 	.word	0x0801d5c4
 800f16c:	0801d668 	.word	0x0801d668
 800f170:	0801d618 	.word	0x0801d618
 800f174:	200111e8 	.word	0x200111e8

0800f178 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b08c      	sub	sp, #48	; 0x30
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	60f8      	str	r0, [r7, #12]
 800f180:	60b9      	str	r1, [r7, #8]
 800f182:	607a      	str	r2, [r7, #4]
 800f184:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800f186:	2308      	movs	r3, #8
 800f188:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 800f18c:	2300      	movs	r3, #0
 800f18e:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2b00      	cmp	r3, #0
 800f194:	db01      	blt.n	800f19a <lwip_recv_tcp+0x22>
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	e001      	b.n	800f19e <lwip_recv_tcp+0x26>
 800f19a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f19e:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d106      	bne.n	800f1b4 <lwip_recv_tcp+0x3c>
 800f1a6:	4b74      	ldr	r3, [pc, #464]	; (800f378 <lwip_recv_tcp+0x200>)
 800f1a8:	f240 329e 	movw	r2, #926	; 0x39e
 800f1ac:	4973      	ldr	r1, [pc, #460]	; (800f37c <lwip_recv_tcp+0x204>)
 800f1ae:	4874      	ldr	r0, [pc, #464]	; (800f380 <lwip_recv_tcp+0x208>)
 800f1b0:	f00c fb28 	bl	801b804 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	781b      	ldrb	r3, [r3, #0]
 800f1ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f1be:	2b10      	cmp	r3, #16
 800f1c0:	d006      	beq.n	800f1d0 <lwip_recv_tcp+0x58>
 800f1c2:	4b6d      	ldr	r3, [pc, #436]	; (800f378 <lwip_recv_tcp+0x200>)
 800f1c4:	f240 329f 	movw	r2, #927	; 0x39f
 800f1c8:	496e      	ldr	r1, [pc, #440]	; (800f384 <lwip_recv_tcp+0x20c>)
 800f1ca:	486d      	ldr	r0, [pc, #436]	; (800f380 <lwip_recv_tcp+0x208>)
 800f1cc:	f00c fb1a 	bl	801b804 <iprintf>

  if (flags & MSG_DONTWAIT) {
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	f003 0308 	and.w	r3, r3, #8
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d005      	beq.n	800f1e6 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800f1da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f1de:	f043 0304 	orr.w	r3, r3, #4
 800f1e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	685b      	ldr	r3, [r3, #4]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d003      	beq.n	800f1f6 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	685b      	ldr	r3, [r3, #4]
 800f1f2:	617b      	str	r3, [r7, #20]
 800f1f4:	e036      	b.n	800f264 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f1fe:	f107 0114 	add.w	r1, r7, #20
 800f202:	4618      	mov	r0, r3
 800f204:	f7fe fb1e 	bl	800d844 <netconn_recv_tcp_pbuf_flags>
 800f208:	4603      	mov	r3, r0
 800f20a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800f20e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800f212:	2b00      	cmp	r3, #0
 800f214:	d019      	beq.n	800f24a <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800f216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f218:	2b00      	cmp	r3, #0
 800f21a:	f300 808d 	bgt.w	800f338 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800f21e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800f222:	4618      	mov	r0, r3
 800f224:	f7ff fe2e 	bl	800ee84 <err_to_errno>
 800f228:	61f8      	str	r0, [r7, #28]
 800f22a:	69fb      	ldr	r3, [r7, #28]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d002      	beq.n	800f236 <lwip_recv_tcp+0xbe>
 800f230:	4a55      	ldr	r2, [pc, #340]	; (800f388 <lwip_recv_tcp+0x210>)
 800f232:	69fb      	ldr	r3, [r7, #28]
 800f234:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800f236:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800f23a:	f113 0f0f 	cmn.w	r3, #15
 800f23e:	d101      	bne.n	800f244 <lwip_recv_tcp+0xcc>
          return 0;
 800f240:	2300      	movs	r3, #0
 800f242:	e094      	b.n	800f36e <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800f244:	f04f 33ff 	mov.w	r3, #4294967295
 800f248:	e091      	b.n	800f36e <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d106      	bne.n	800f25e <lwip_recv_tcp+0xe6>
 800f250:	4b49      	ldr	r3, [pc, #292]	; (800f378 <lwip_recv_tcp+0x200>)
 800f252:	f240 32c5 	movw	r2, #965	; 0x3c5
 800f256:	494d      	ldr	r1, [pc, #308]	; (800f38c <lwip_recv_tcp+0x214>)
 800f258:	4849      	ldr	r0, [pc, #292]	; (800f380 <lwip_recv_tcp+0x208>)
 800f25a:	f00c fad3 	bl	801b804 <iprintf>
      sock->lastdata.pbuf = p;
 800f25e:	697a      	ldr	r2, [r7, #20]
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800f264:	697b      	ldr	r3, [r7, #20]
 800f266:	891b      	ldrh	r3, [r3, #8]
 800f268:	461a      	mov	r2, r3
 800f26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f26c:	4293      	cmp	r3, r2
 800f26e:	dd03      	ble.n	800f278 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	891b      	ldrh	r3, [r3, #8]
 800f274:	847b      	strh	r3, [r7, #34]	; 0x22
 800f276:	e001      	b.n	800f27c <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800f278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f27a:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 800f27c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f280:	4413      	add	r3, r2
 800f282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f284:	429a      	cmp	r2, r3
 800f286:	dd03      	ble.n	800f290 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800f288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f28a:	b29b      	uxth	r3, r3
 800f28c:	43db      	mvns	r3, r3
 800f28e:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800f290:	6978      	ldr	r0, [r7, #20]
 800f292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f294:	68ba      	ldr	r2, [r7, #8]
 800f296:	18d1      	adds	r1, r2, r3
 800f298:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f29a:	2300      	movs	r3, #0
 800f29c:	f003 f912 	bl	80124c4 <pbuf_copy_partial>

    recvd += copylen;
 800f2a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f2a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2a4:	4413      	add	r3, r2
 800f2a6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800f2a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f2aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2ac:	429a      	cmp	r2, r3
 800f2ae:	da06      	bge.n	800f2be <lwip_recv_tcp+0x146>
 800f2b0:	4b31      	ldr	r3, [pc, #196]	; (800f378 <lwip_recv_tcp+0x200>)
 800f2b2:	f240 32dd 	movw	r2, #989	; 0x3dd
 800f2b6:	4936      	ldr	r1, [pc, #216]	; (800f390 <lwip_recv_tcp+0x218>)
 800f2b8:	4831      	ldr	r0, [pc, #196]	; (800f380 <lwip_recv_tcp+0x208>)
 800f2ba:	f00c faa3 	bl	801b804 <iprintf>
    recv_left -= copylen;
 800f2be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f2c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2c2:	1ad3      	subs	r3, r2, r3
 800f2c4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	f003 0301 	and.w	r3, r3, #1
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d123      	bne.n	800f318 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800f2d0:	697b      	ldr	r3, [r7, #20]
 800f2d2:	891b      	ldrh	r3, [r3, #8]
 800f2d4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f2d6:	429a      	cmp	r2, r3
 800f2d8:	d906      	bls.n	800f2e8 <lwip_recv_tcp+0x170>
 800f2da:	4b27      	ldr	r3, [pc, #156]	; (800f378 <lwip_recv_tcp+0x200>)
 800f2dc:	f240 32e3 	movw	r2, #995	; 0x3e3
 800f2e0:	492c      	ldr	r1, [pc, #176]	; (800f394 <lwip_recv_tcp+0x21c>)
 800f2e2:	4827      	ldr	r0, [pc, #156]	; (800f380 <lwip_recv_tcp+0x208>)
 800f2e4:	f00c fa8e 	bl	801b804 <iprintf>
      if (p->tot_len - copylen > 0) {
 800f2e8:	697b      	ldr	r3, [r7, #20]
 800f2ea:	891b      	ldrh	r3, [r3, #8]
 800f2ec:	461a      	mov	r2, r3
 800f2ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f2f0:	1ad3      	subs	r3, r2, r3
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	dd09      	ble.n	800f30a <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f2fa:	4611      	mov	r1, r2
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	f002 feb8 	bl	8012072 <pbuf_free_header>
 800f302:	4602      	mov	r2, r0
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	605a      	str	r2, [r3, #4]
 800f308:	e006      	b.n	800f318 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	2200      	movs	r2, #0
 800f30e:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	4618      	mov	r0, r3
 800f314:	f002 fee0 	bl	80120d8 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800f318:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f31c:	f043 0314 	orr.w	r3, r3, #20
 800f320:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800f324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f326:	2b00      	cmp	r3, #0
 800f328:	dd08      	ble.n	800f33c <lwip_recv_tcp+0x1c4>
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	f003 0301 	and.w	r3, r3, #1
 800f330:	2b00      	cmp	r3, #0
 800f332:	f43f af58 	beq.w	800f1e6 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800f336:	e001      	b.n	800f33c <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800f338:	bf00      	nop
 800f33a:	e000      	b.n	800f33e <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800f33c:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800f33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f340:	2b00      	cmp	r3, #0
 800f342:	dd0b      	ble.n	800f35c <lwip_recv_tcp+0x1e4>
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	f003 0301 	and.w	r3, r3, #1
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d106      	bne.n	800f35c <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f354:	4611      	mov	r1, r2
 800f356:	4618      	mov	r0, r3
 800f358:	f7fe f9c2 	bl	800d6e0 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800f35c:	2300      	movs	r3, #0
 800f35e:	61bb      	str	r3, [r7, #24]
 800f360:	69bb      	ldr	r3, [r7, #24]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d002      	beq.n	800f36c <lwip_recv_tcp+0x1f4>
 800f366:	4a08      	ldr	r2, [pc, #32]	; (800f388 <lwip_recv_tcp+0x210>)
 800f368:	69bb      	ldr	r3, [r7, #24]
 800f36a:	6013      	str	r3, [r2, #0]
  return recvd;
 800f36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800f36e:	4618      	mov	r0, r3
 800f370:	3730      	adds	r7, #48	; 0x30
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}
 800f376:	bf00      	nop
 800f378:	0801d5c4 	.word	0x0801d5c4
 800f37c:	0801d6bc 	.word	0x0801d6bc
 800f380:	0801d618 	.word	0x0801d618
 800f384:	0801d6cc 	.word	0x0801d6cc
 800f388:	200111e8 	.word	0x200111e8
 800f38c:	0801d6f0 	.word	0x0801d6f0
 800f390:	0801d6fc 	.word	0x0801d6fc
 800f394:	0801d724 	.word	0x0801d724

0800f398 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800f398:	b590      	push	{r4, r7, lr}
 800f39a:	b08b      	sub	sp, #44	; 0x2c
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	60f8      	str	r0, [r7, #12]
 800f3a0:	60b9      	str	r1, [r7, #8]
 800f3a2:	603b      	str	r3, [r7, #0]
 800f3a4:	4613      	mov	r3, r2
 800f3a6:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d106      	bne.n	800f3c0 <lwip_sock_make_addr+0x28>
 800f3b2:	4b2b      	ldr	r3, [pc, #172]	; (800f460 <lwip_sock_make_addr+0xc8>)
 800f3b4:	f240 4207 	movw	r2, #1031	; 0x407
 800f3b8:	492a      	ldr	r1, [pc, #168]	; (800f464 <lwip_sock_make_addr+0xcc>)
 800f3ba:	482b      	ldr	r0, [pc, #172]	; (800f468 <lwip_sock_make_addr+0xd0>)
 800f3bc:	f00c fa22 	bl	801b804 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d106      	bne.n	800f3d4 <lwip_sock_make_addr+0x3c>
 800f3c6:	4b26      	ldr	r3, [pc, #152]	; (800f460 <lwip_sock_make_addr+0xc8>)
 800f3c8:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800f3cc:	4927      	ldr	r1, [pc, #156]	; (800f46c <lwip_sock_make_addr+0xd4>)
 800f3ce:	4826      	ldr	r0, [pc, #152]	; (800f468 <lwip_sock_make_addr+0xd0>)
 800f3d0:	f00c fa18 	bl	801b804 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800f3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d106      	bne.n	800f3e8 <lwip_sock_make_addr+0x50>
 800f3da:	4b21      	ldr	r3, [pc, #132]	; (800f460 <lwip_sock_make_addr+0xc8>)
 800f3dc:	f240 4209 	movw	r2, #1033	; 0x409
 800f3e0:	4923      	ldr	r1, [pc, #140]	; (800f470 <lwip_sock_make_addr+0xd8>)
 800f3e2:	4821      	ldr	r0, [pc, #132]	; (800f468 <lwip_sock_make_addr+0xd0>)
 800f3e4:	f00c fa0e 	bl	801b804 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800f3e8:	f107 0314 	add.w	r3, r7, #20
 800f3ec:	2210      	movs	r2, #16
 800f3ee:	701a      	strb	r2, [r3, #0]
 800f3f0:	f107 0314 	add.w	r3, r7, #20
 800f3f4:	2202      	movs	r2, #2
 800f3f6:	705a      	strb	r2, [r3, #1]
 800f3f8:	f107 0414 	add.w	r4, r7, #20
 800f3fc:	88fb      	ldrh	r3, [r7, #6]
 800f3fe:	4618      	mov	r0, r3
 800f400:	f001 fa46 	bl	8010890 <lwip_htons>
 800f404:	4603      	mov	r3, r0
 800f406:	8063      	strh	r3, [r4, #2]
 800f408:	f107 0314 	add.w	r3, r7, #20
 800f40c:	68ba      	ldr	r2, [r7, #8]
 800f40e:	6812      	ldr	r2, [r2, #0]
 800f410:	605a      	str	r2, [r3, #4]
 800f412:	f107 0314 	add.w	r3, r7, #20
 800f416:	3308      	adds	r3, #8
 800f418:	2208      	movs	r2, #8
 800f41a:	2100      	movs	r1, #0
 800f41c:	4618      	mov	r0, r3
 800f41e:	f00c f9e9 	bl	801b7f4 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800f422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	7d3a      	ldrb	r2, [r7, #20]
 800f428:	4293      	cmp	r3, r2
 800f42a:	d202      	bcs.n	800f432 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800f42c:	2301      	movs	r3, #1
 800f42e:	627b      	str	r3, [r7, #36]	; 0x24
 800f430:	e008      	b.n	800f444 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800f432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	7d3a      	ldrb	r2, [r7, #20]
 800f438:	4293      	cmp	r3, r2
 800f43a:	d903      	bls.n	800f444 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800f43c:	7d3b      	ldrb	r3, [r7, #20]
 800f43e:	461a      	mov	r2, r3
 800f440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f442:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800f444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f446:	681a      	ldr	r2, [r3, #0]
 800f448:	f107 0314 	add.w	r3, r7, #20
 800f44c:	4619      	mov	r1, r3
 800f44e:	6838      	ldr	r0, [r7, #0]
 800f450:	f00c f9c2 	bl	801b7d8 <memcpy>
  return truncated;
 800f454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f456:	4618      	mov	r0, r3
 800f458:	372c      	adds	r7, #44	; 0x2c
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd90      	pop	{r4, r7, pc}
 800f45e:	bf00      	nop
 800f460:	0801d5c4 	.word	0x0801d5c4
 800f464:	0801d734 	.word	0x0801d734
 800f468:	0801d618 	.word	0x0801d618
 800f46c:	0801d748 	.word	0x0801d748
 800f470:	0801d758 	.word	0x0801d758

0800f474 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b088      	sub	sp, #32
 800f478:	af02      	add	r7, sp, #8
 800f47a:	60f8      	str	r0, [r7, #12]
 800f47c:	60b9      	str	r1, [r7, #8]
 800f47e:	607a      	str	r2, [r7, #4]
 800f480:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d101      	bne.n	800f48c <lwip_recv_tcp_from+0x18>
    return 0;
 800f488:	2300      	movs	r3, #0
 800f48a:	e021      	b.n	800f4d0 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d01d      	beq.n	800f4ce <lwip_recv_tcp_from+0x5a>
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d01a      	beq.n	800f4ce <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	6818      	ldr	r0, [r3, #0]
 800f49c:	f107 0216 	add.w	r2, r7, #22
 800f4a0:	f107 0110 	add.w	r1, r7, #16
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	f7fd ff99 	bl	800d3dc <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800f4aa:	68bb      	ldr	r3, [r7, #8]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d00e      	beq.n	800f4ce <lwip_recv_tcp_from+0x5a>
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d00b      	beq.n	800f4ce <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	6818      	ldr	r0, [r3, #0]
 800f4ba:	8afa      	ldrh	r2, [r7, #22]
 800f4bc:	f107 0110 	add.w	r1, r7, #16
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	9300      	str	r3, [sp, #0]
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	f7ff ff67 	bl	800f398 <lwip_sock_make_addr>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	e000      	b.n	800f4d0 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800f4ce:	2300      	movs	r3, #0
}
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3718      	adds	r7, #24
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}

0800f4d8 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800f4d8:	b590      	push	{r4, r7, lr}
 800f4da:	b08d      	sub	sp, #52	; 0x34
 800f4dc:	af02      	add	r7, sp, #8
 800f4de:	60f8      	str	r0, [r7, #12]
 800f4e0:	60b9      	str	r1, [r7, #8]
 800f4e2:	607a      	str	r2, [r7, #4]
 800f4e4:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	689b      	ldr	r3, [r3, #8]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d10d      	bne.n	800f50a <lwip_recvfrom_udp_raw+0x32>
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	68db      	ldr	r3, [r3, #12]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	dd09      	ble.n	800f50a <lwip_recvfrom_udp_raw+0x32>
 800f4f6:	4b5e      	ldr	r3, [pc, #376]	; (800f670 <lwip_recvfrom_udp_raw+0x198>)
 800f4f8:	f240 4249 	movw	r2, #1097	; 0x449
 800f4fc:	495d      	ldr	r1, [pc, #372]	; (800f674 <lwip_recvfrom_udp_raw+0x19c>)
 800f4fe:	485e      	ldr	r0, [pc, #376]	; (800f678 <lwip_recvfrom_udp_raw+0x1a0>)
 800f500:	f00c f980 	bl	801b804 <iprintf>
 800f504:	f06f 030f 	mvn.w	r3, #15
 800f508:	e0ad      	b.n	800f666 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800f50a:	68bb      	ldr	r3, [r7, #8]
 800f50c:	f003 0308 	and.w	r3, r3, #8
 800f510:	2b00      	cmp	r3, #0
 800f512:	d003      	beq.n	800f51c <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800f514:	2304      	movs	r3, #4
 800f516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f51a:	e002      	b.n	800f522 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800f51c:	2300      	movs	r3, #0
 800f51e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	685b      	ldr	r3, [r3, #4]
 800f526:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800f528:	693b      	ldr	r3, [r7, #16]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d11e      	bne.n	800f56c <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f536:	f107 0110 	add.w	r1, r7, #16
 800f53a:	4618      	mov	r0, r3
 800f53c:	f7fe f9ae 	bl	800d89c <netconn_recv_udp_raw_netbuf_flags>
 800f540:	4603      	mov	r3, r0
 800f542:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800f544:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d002      	beq.n	800f552 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800f54c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f550:	e089      	b.n	800f666 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800f552:	693b      	ldr	r3, [r7, #16]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d106      	bne.n	800f566 <lwip_recvfrom_udp_raw+0x8e>
 800f558:	4b45      	ldr	r3, [pc, #276]	; (800f670 <lwip_recvfrom_udp_raw+0x198>)
 800f55a:	f240 425e 	movw	r2, #1118	; 0x45e
 800f55e:	4947      	ldr	r1, [pc, #284]	; (800f67c <lwip_recvfrom_udp_raw+0x1a4>)
 800f560:	4845      	ldr	r0, [pc, #276]	; (800f678 <lwip_recvfrom_udp_raw+0x1a0>)
 800f562:	f00c f94f 	bl	801b804 <iprintf>
    sock->lastdata.netbuf = buf;
 800f566:	693a      	ldr	r2, [r7, #16]
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800f56c:	693b      	ldr	r3, [r7, #16]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	891b      	ldrh	r3, [r3, #8]
 800f572:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800f574:	2300      	movs	r3, #0
 800f576:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800f578:	2300      	movs	r3, #0
 800f57a:	61fb      	str	r3, [r7, #28]
 800f57c:	e029      	b.n	800f5d2 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800f57e:	8b3a      	ldrh	r2, [r7, #24]
 800f580:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f582:	1ad3      	subs	r3, r2, r3
 800f584:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	689a      	ldr	r2, [r3, #8]
 800f58a:	69fb      	ldr	r3, [r7, #28]
 800f58c:	00db      	lsls	r3, r3, #3
 800f58e:	4413      	add	r3, r2
 800f590:	685a      	ldr	r2, [r3, #4]
 800f592:	8afb      	ldrh	r3, [r7, #22]
 800f594:	429a      	cmp	r2, r3
 800f596:	d902      	bls.n	800f59e <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800f598:	8afb      	ldrh	r3, [r7, #22]
 800f59a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f59c:	e006      	b.n	800f5ac <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	689a      	ldr	r2, [r3, #8]
 800f5a2:	69fb      	ldr	r3, [r7, #28]
 800f5a4:	00db      	lsls	r3, r3, #3
 800f5a6:	4413      	add	r3, r2
 800f5a8:	685b      	ldr	r3, [r3, #4]
 800f5aa:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800f5ac:	693b      	ldr	r3, [r7, #16]
 800f5ae:	6818      	ldr	r0, [r3, #0]
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	689a      	ldr	r2, [r3, #8]
 800f5b4:	69fb      	ldr	r3, [r7, #28]
 800f5b6:	00db      	lsls	r3, r3, #3
 800f5b8:	4413      	add	r3, r2
 800f5ba:	6819      	ldr	r1, [r3, #0]
 800f5bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f5be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f5c0:	f002 ff80 	bl	80124c4 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800f5c4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f5c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5c8:	4413      	add	r3, r2
 800f5ca:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800f5cc:	69fb      	ldr	r3, [r7, #28]
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	61fb      	str	r3, [r7, #28]
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	68db      	ldr	r3, [r3, #12]
 800f5d6:	69fa      	ldr	r2, [r7, #28]
 800f5d8:	429a      	cmp	r2, r3
 800f5da:	da03      	bge.n	800f5e4 <lwip_recvfrom_udp_raw+0x10c>
 800f5dc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f5de:	8b3b      	ldrh	r3, [r7, #24]
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d3cc      	bcc.n	800f57e <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d01a      	beq.n	800f622 <lwip_recvfrom_udp_raw+0x14a>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	685b      	ldr	r3, [r3, #4]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d016      	beq.n	800f622 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d012      	beq.n	800f622 <lwip_recvfrom_udp_raw+0x14a>
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	685b      	ldr	r3, [r3, #4]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d00e      	beq.n	800f622 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	6818      	ldr	r0, [r3, #0]
 800f608:	693b      	ldr	r3, [r7, #16]
 800f60a:	f103 0108 	add.w	r1, r3, #8
 800f60e:	693b      	ldr	r3, [r7, #16]
 800f610:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	3304      	adds	r3, #4
 800f61a:	9300      	str	r3, [sp, #0]
 800f61c:	4623      	mov	r3, r4
 800f61e:	f7ff febb 	bl	800f398 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	2200      	movs	r2, #0
 800f626:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	691b      	ldr	r3, [r3, #16]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d007      	beq.n	800f640 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800f630:	2300      	movs	r3, #0
 800f632:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800f634:	7d7b      	ldrb	r3, [r7, #21]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d102      	bne.n	800f640 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	2200      	movs	r2, #0
 800f63e:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	f003 0301 	and.w	r3, r3, #1
 800f646:	2b00      	cmp	r3, #0
 800f648:	d106      	bne.n	800f658 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	2200      	movs	r2, #0
 800f64e:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800f650:	693b      	ldr	r3, [r7, #16]
 800f652:	4618      	mov	r0, r3
 800f654:	f7ff fc34 	bl	800eec0 <netbuf_delete>
  }
  if (datagram_len) {
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d002      	beq.n	800f664 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	8b3a      	ldrh	r2, [r7, #24]
 800f662:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800f664:	2300      	movs	r3, #0
}
 800f666:	4618      	mov	r0, r3
 800f668:	372c      	adds	r7, #44	; 0x2c
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd90      	pop	{r4, r7, pc}
 800f66e:	bf00      	nop
 800f670:	0801d5c4 	.word	0x0801d5c4
 800f674:	0801d768 	.word	0x0801d768
 800f678:	0801d618 	.word	0x0801d618
 800f67c:	0801d794 	.word	0x0801d794

0800f680 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b096      	sub	sp, #88	; 0x58
 800f684:	af02      	add	r7, sp, #8
 800f686:	60f8      	str	r0, [r7, #12]
 800f688:	60b9      	str	r1, [r7, #8]
 800f68a:	607a      	str	r2, [r7, #4]
 800f68c:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800f68e:	68f8      	ldr	r0, [r7, #12]
 800f690:	f7ff fc80 	bl	800ef94 <get_socket>
 800f694:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800f696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d102      	bne.n	800f6a2 <lwip_recvfrom+0x22>
    return -1;
 800f69c:	f04f 33ff 	mov.w	r3, #4294967295
 800f6a0:	e078      	b.n	800f794 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800f6a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	781b      	ldrb	r3, [r3, #0]
 800f6a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f6ac:	2b10      	cmp	r3, #16
 800f6ae:	d112      	bne.n	800f6d6 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	687a      	ldr	r2, [r7, #4]
 800f6b4:	68b9      	ldr	r1, [r7, #8]
 800f6b6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f6b8:	f7ff fd5e 	bl	800f178 <lwip_recv_tcp>
 800f6bc:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800f6be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6c0:	9301      	str	r3, [sp, #4]
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	9300      	str	r3, [sp, #0]
 800f6c6:	4b35      	ldr	r3, [pc, #212]	; (800f79c <lwip_recvfrom+0x11c>)
 800f6c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f6ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f6cc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f6ce:	f7ff fed1 	bl	800f474 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800f6d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6d4:	e05e      	b.n	800f794 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800f6ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f6f2:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800f6f4:	2301      	movs	r3, #1
 800f6f6:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800f6f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6fa:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800f6fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d002      	beq.n	800f708 <lwip_recvfrom+0x88>
 800f702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	e000      	b.n	800f70a <lwip_recvfrom+0x8a>
 800f708:	2300      	movs	r3, #0
 800f70a:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800f70c:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800f710:	f107 0214 	add.w	r2, r7, #20
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	9300      	str	r3, [sp, #0]
 800f718:	460b      	mov	r3, r1
 800f71a:	6839      	ldr	r1, [r7, #0]
 800f71c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f71e:	f7ff fedb 	bl	800f4d8 <lwip_recvfrom_udp_raw>
 800f722:	4603      	mov	r3, r0
 800f724:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 800f728:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d00e      	beq.n	800f74e <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800f730:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800f734:	4618      	mov	r0, r3
 800f736:	f7ff fba5 	bl	800ee84 <err_to_errno>
 800f73a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800f73c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d002      	beq.n	800f748 <lwip_recvfrom+0xc8>
 800f742:	4a17      	ldr	r2, [pc, #92]	; (800f7a0 <lwip_recvfrom+0x120>)
 800f744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f746:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800f748:	f04f 33ff 	mov.w	r3, #4294967295
 800f74c:	e022      	b.n	800f794 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800f74e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f750:	461a      	mov	r2, r3
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	4293      	cmp	r3, r2
 800f756:	bf28      	it	cs
 800f758:	4613      	movcs	r3, r2
 800f75a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800f75e:	4293      	cmp	r3, r2
 800f760:	d206      	bcs.n	800f770 <lwip_recvfrom+0xf0>
 800f762:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f764:	461a      	mov	r2, r3
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	4293      	cmp	r3, r2
 800f76a:	bf28      	it	cs
 800f76c:	4613      	movcs	r3, r2
 800f76e:	e001      	b.n	800f774 <lwip_recvfrom+0xf4>
 800f770:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f774:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 800f776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d002      	beq.n	800f782 <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800f77c:	69ba      	ldr	r2, [r7, #24]
 800f77e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f780:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800f782:	2300      	movs	r3, #0
 800f784:	643b      	str	r3, [r7, #64]	; 0x40
 800f786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d002      	beq.n	800f792 <lwip_recvfrom+0x112>
 800f78c:	4a04      	ldr	r2, [pc, #16]	; (800f7a0 <lwip_recvfrom+0x120>)
 800f78e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f790:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800f792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800f794:	4618      	mov	r0, r3
 800f796:	3750      	adds	r7, #80	; 0x50
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}
 800f79c:	0801d7a0 	.word	0x0801d7a0
 800f7a0:	200111e8 	.word	0x200111e8

0800f7a4 <lwip_socket>:
  return (err == ERR_OK ? short_size : -1);
}

int
lwip_socket(int domain, int type, int protocol)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b086      	sub	sp, #24
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	60f8      	str	r0, [r7, #12]
 800f7ac:	60b9      	str	r1, [r7, #8]
 800f7ae:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	2b03      	cmp	r3, #3
 800f7b4:	d009      	beq.n	800f7ca <lwip_socket+0x26>
 800f7b6:	68bb      	ldr	r3, [r7, #8]
 800f7b8:	2b03      	cmp	r3, #3
 800f7ba:	dc23      	bgt.n	800f804 <lwip_socket+0x60>
 800f7bc:	68bb      	ldr	r3, [r7, #8]
 800f7be:	2b01      	cmp	r3, #1
 800f7c0:	d019      	beq.n	800f7f6 <lwip_socket+0x52>
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	2b02      	cmp	r3, #2
 800f7c6:	d009      	beq.n	800f7dc <lwip_socket+0x38>
 800f7c8:	e01c      	b.n	800f804 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	4a22      	ldr	r2, [pc, #136]	; (800f858 <lwip_socket+0xb4>)
 800f7d0:	4619      	mov	r1, r3
 800f7d2:	2040      	movs	r0, #64	; 0x40
 800f7d4:	f7fd fd48 	bl	800d268 <netconn_new_with_proto_and_callback>
 800f7d8:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800f7da:	e019      	b.n	800f810 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2b88      	cmp	r3, #136	; 0x88
 800f7e0:	d101      	bne.n	800f7e6 <lwip_socket+0x42>
 800f7e2:	2321      	movs	r3, #33	; 0x21
 800f7e4:	e000      	b.n	800f7e8 <lwip_socket+0x44>
 800f7e6:	2320      	movs	r3, #32
 800f7e8:	4a1b      	ldr	r2, [pc, #108]	; (800f858 <lwip_socket+0xb4>)
 800f7ea:	2100      	movs	r1, #0
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f7fd fd3b 	bl	800d268 <netconn_new_with_proto_and_callback>
 800f7f2:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800f7f4:	e00c      	b.n	800f810 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800f7f6:	4a18      	ldr	r2, [pc, #96]	; (800f858 <lwip_socket+0xb4>)
 800f7f8:	2100      	movs	r1, #0
 800f7fa:	2010      	movs	r0, #16
 800f7fc:	f7fd fd34 	bl	800d268 <netconn_new_with_proto_and_callback>
 800f800:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800f802:	e005      	b.n	800f810 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800f804:	4b15      	ldr	r3, [pc, #84]	; (800f85c <lwip_socket+0xb8>)
 800f806:	2216      	movs	r2, #22
 800f808:	601a      	str	r2, [r3, #0]
      return -1;
 800f80a:	f04f 33ff 	mov.w	r3, #4294967295
 800f80e:	e01e      	b.n	800f84e <lwip_socket+0xaa>
  }

  if (!conn) {
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d105      	bne.n	800f822 <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800f816:	4b11      	ldr	r3, [pc, #68]	; (800f85c <lwip_socket+0xb8>)
 800f818:	2269      	movs	r2, #105	; 0x69
 800f81a:	601a      	str	r2, [r3, #0]
    return -1;
 800f81c:	f04f 33ff 	mov.w	r3, #4294967295
 800f820:	e015      	b.n	800f84e <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800f822:	2100      	movs	r1, #0
 800f824:	6978      	ldr	r0, [r7, #20]
 800f826:	f7ff fbcd 	bl	800efc4 <alloc_socket>
 800f82a:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800f82c:	693b      	ldr	r3, [r7, #16]
 800f82e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f832:	d108      	bne.n	800f846 <lwip_socket+0xa2>
    netconn_delete(conn);
 800f834:	6978      	ldr	r0, [r7, #20]
 800f836:	f7fd fdb5 	bl	800d3a4 <netconn_delete>
    set_errno(ENFILE);
 800f83a:	4b08      	ldr	r3, [pc, #32]	; (800f85c <lwip_socket+0xb8>)
 800f83c:	2217      	movs	r2, #23
 800f83e:	601a      	str	r2, [r3, #0]
    return -1;
 800f840:	f04f 33ff 	mov.w	r3, #4294967295
 800f844:	e003      	b.n	800f84e <lwip_socket+0xaa>
  }
  conn->socket = i;
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	693a      	ldr	r2, [r7, #16]
 800f84a:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800f84c:	693b      	ldr	r3, [r7, #16]
}
 800f84e:	4618      	mov	r0, r3
 800f850:	3718      	adds	r7, #24
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}
 800f856:	bf00      	nop
 800f858:	08010115 	.word	0x08010115
 800f85c:	200111e8 	.word	0x200111e8

0800f860 <lwip_link_select_cb>:

#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
/* Add select_cb to select_cb_list. */
static void
lwip_link_select_cb(struct lwip_select_cb *select_cb)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b082      	sub	sp, #8
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
  LWIP_SOCKET_SELECT_DECL_PROTECT(lev);

  /* Protect the select_cb_list */
  LWIP_SOCKET_SELECT_PROTECT(lev);
 800f868:	480c      	ldr	r0, [pc, #48]	; (800f89c <lwip_link_select_cb+0x3c>)
 800f86a:	f00b ff27 	bl	801b6bc <sys_mutex_lock>

  /* Put this select_cb on top of list */
  select_cb->next = select_cb_list;
 800f86e:	4b0c      	ldr	r3, [pc, #48]	; (800f8a0 <lwip_link_select_cb+0x40>)
 800f870:	681a      	ldr	r2, [r3, #0]
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	601a      	str	r2, [r3, #0]
  if (select_cb_list != NULL) {
 800f876:	4b0a      	ldr	r3, [pc, #40]	; (800f8a0 <lwip_link_select_cb+0x40>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d003      	beq.n	800f886 <lwip_link_select_cb+0x26>
    select_cb_list->prev = select_cb;
 800f87e:	4b08      	ldr	r3, [pc, #32]	; (800f8a0 <lwip_link_select_cb+0x40>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	687a      	ldr	r2, [r7, #4]
 800f884:	605a      	str	r2, [r3, #4]
  }
  select_cb_list = select_cb;
 800f886:	4a06      	ldr	r2, [pc, #24]	; (800f8a0 <lwip_link_select_cb+0x40>)
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	6013      	str	r3, [r2, #0]
  /* Increasing this counter tells select_check_waiters that the list has changed. */
  select_cb_ctr++;
#endif

  /* Now we can safely unprotect */
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 800f88c:	4803      	ldr	r0, [pc, #12]	; (800f89c <lwip_link_select_cb+0x3c>)
 800f88e:	f00b ff24 	bl	801b6da <sys_mutex_unlock>
}
 800f892:	bf00      	nop
 800f894:	3708      	adds	r7, #8
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}
 800f89a:	bf00      	nop
 800f89c:	2000d934 	.word	0x2000d934
 800f8a0:	2000d924 	.word	0x2000d924

0800f8a4 <lwip_unlink_select_cb>:

/* Remove select_cb from select_cb_list. */
static void
lwip_unlink_select_cb(struct lwip_select_cb *select_cb)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b082      	sub	sp, #8
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
  LWIP_SOCKET_SELECT_DECL_PROTECT(lev);

  /* Take us off the list */
  LWIP_SOCKET_SELECT_PROTECT(lev);
 800f8ac:	481b      	ldr	r0, [pc, #108]	; (800f91c <lwip_unlink_select_cb+0x78>)
 800f8ae:	f00b ff05 	bl	801b6bc <sys_mutex_lock>
  if (select_cb->next != NULL) {
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d004      	beq.n	800f8c4 <lwip_unlink_select_cb+0x20>
    select_cb->next->prev = select_cb->prev;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	687a      	ldr	r2, [r7, #4]
 800f8c0:	6852      	ldr	r2, [r2, #4]
 800f8c2:	605a      	str	r2, [r3, #4]
  }
  if (select_cb_list == select_cb) {
 800f8c4:	4b16      	ldr	r3, [pc, #88]	; (800f920 <lwip_unlink_select_cb+0x7c>)
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	687a      	ldr	r2, [r7, #4]
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d10f      	bne.n	800f8ee <lwip_unlink_select_cb+0x4a>
    LWIP_ASSERT("select_cb->prev == NULL", select_cb->prev == NULL);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	685b      	ldr	r3, [r3, #4]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d006      	beq.n	800f8e4 <lwip_unlink_select_cb+0x40>
 800f8d6:	4b13      	ldr	r3, [pc, #76]	; (800f924 <lwip_unlink_select_cb+0x80>)
 800f8d8:	f240 720d 	movw	r2, #1805	; 0x70d
 800f8dc:	4912      	ldr	r1, [pc, #72]	; (800f928 <lwip_unlink_select_cb+0x84>)
 800f8de:	4813      	ldr	r0, [pc, #76]	; (800f92c <lwip_unlink_select_cb+0x88>)
 800f8e0:	f00b ff90 	bl	801b804 <iprintf>
    select_cb_list = select_cb->next;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	4a0d      	ldr	r2, [pc, #52]	; (800f920 <lwip_unlink_select_cb+0x7c>)
 800f8ea:	6013      	str	r3, [r2, #0]
 800f8ec:	e00f      	b.n	800f90e <lwip_unlink_select_cb+0x6a>
  } else {
    LWIP_ASSERT("select_cb->prev != NULL", select_cb->prev != NULL);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	685b      	ldr	r3, [r3, #4]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d106      	bne.n	800f904 <lwip_unlink_select_cb+0x60>
 800f8f6:	4b0b      	ldr	r3, [pc, #44]	; (800f924 <lwip_unlink_select_cb+0x80>)
 800f8f8:	f44f 62e2 	mov.w	r2, #1808	; 0x710
 800f8fc:	490c      	ldr	r1, [pc, #48]	; (800f930 <lwip_unlink_select_cb+0x8c>)
 800f8fe:	480b      	ldr	r0, [pc, #44]	; (800f92c <lwip_unlink_select_cb+0x88>)
 800f900:	f00b ff80 	bl	801b804 <iprintf>
    select_cb->prev->next = select_cb->next;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	685b      	ldr	r3, [r3, #4]
 800f908:	687a      	ldr	r2, [r7, #4]
 800f90a:	6812      	ldr	r2, [r2, #0]
 800f90c:	601a      	str	r2, [r3, #0]
  }
#if !LWIP_TCPIP_CORE_LOCKING
  /* Increasing this counter tells select_check_waiters that the list has changed. */
  select_cb_ctr++;
#endif
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 800f90e:	4803      	ldr	r0, [pc, #12]	; (800f91c <lwip_unlink_select_cb+0x78>)
 800f910:	f00b fee3 	bl	801b6da <sys_mutex_unlock>
}
 800f914:	bf00      	nop
 800f916:	3708      	adds	r7, #8
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}
 800f91c:	2000d934 	.word	0x2000d934
 800f920:	2000d924 	.word	0x2000d924
 800f924:	0801d5c4 	.word	0x0801d5c4
 800f928:	0801d8c4 	.word	0x0801d8c4
 800f92c:	0801d618 	.word	0x0801d618
 800f930:	0801d8dc 	.word	0x0801d8dc

0800f934 <lwip_selscan>:
 * @return number of sockets that had events (read/write/exception) (>= 0)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
             fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b098      	sub	sp, #96	; 0x60
 800f938:	af00      	add	r7, sp, #0
 800f93a:	60f8      	str	r0, [r7, #12]
 800f93c:	60b9      	str	r1, [r7, #8]
 800f93e:	607a      	str	r2, [r7, #4]
 800f940:	603b      	str	r3, [r7, #0]
  int i, nready = 0;
 800f942:	2300      	movs	r3, #0
 800f944:	65bb      	str	r3, [r7, #88]	; 0x58
  fd_set lreadset, lwriteset, lexceptset;
  struct lwip_sock *sock;
  SYS_ARCH_DECL_PROTECT(lev);

  FD_ZERO(&lreadset);
 800f946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f94a:	64bb      	str	r3, [r7, #72]	; 0x48
 800f94c:	2302      	movs	r3, #2
 800f94e:	657b      	str	r3, [r7, #84]	; 0x54
 800f950:	e007      	b.n	800f962 <lwip_selscan+0x2e>
 800f952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f954:	3b01      	subs	r3, #1
 800f956:	657b      	str	r3, [r7, #84]	; 0x54
 800f958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f95a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f95c:	2100      	movs	r1, #0
 800f95e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f964:	2b00      	cmp	r3, #0
 800f966:	d1f4      	bne.n	800f952 <lwip_selscan+0x1e>
  FD_ZERO(&lwriteset);
 800f968:	f107 031c 	add.w	r3, r7, #28
 800f96c:	647b      	str	r3, [r7, #68]	; 0x44
 800f96e:	2302      	movs	r3, #2
 800f970:	653b      	str	r3, [r7, #80]	; 0x50
 800f972:	e007      	b.n	800f984 <lwip_selscan+0x50>
 800f974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f976:	3b01      	subs	r3, #1
 800f978:	653b      	str	r3, [r7, #80]	; 0x50
 800f97a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f97c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f97e:	2100      	movs	r1, #0
 800f980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f986:	2b00      	cmp	r3, #0
 800f988:	d1f4      	bne.n	800f974 <lwip_selscan+0x40>
  FD_ZERO(&lexceptset);
 800f98a:	f107 0314 	add.w	r3, r7, #20
 800f98e:	643b      	str	r3, [r7, #64]	; 0x40
 800f990:	2302      	movs	r3, #2
 800f992:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f994:	e007      	b.n	800f9a6 <lwip_selscan+0x72>
 800f996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f998:	3b01      	subs	r3, #1
 800f99a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f99c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f99e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f9a0:	2100      	movs	r1, #0
 800f9a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f9a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d1f4      	bne.n	800f996 <lwip_selscan+0x62>

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f9b0:	e12c      	b.n	800fc0c <lwip_selscan+0x2d8>
    /* if this FD is not in the set, continue */
    if (!(readset_in && FD_ISSET(i, readset_in)) &&
 800f9b2:	68bb      	ldr	r3, [r7, #8]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d016      	beq.n	800f9e6 <lwip_selscan+0xb2>
 800f9b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	da00      	bge.n	800f9c0 <lwip_selscan+0x8c>
 800f9be:	331f      	adds	r3, #31
 800f9c0:	115b      	asrs	r3, r3, #5
 800f9c2:	461a      	mov	r2, r3
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f9ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9cc:	4259      	negs	r1, r3
 800f9ce:	f003 031f 	and.w	r3, r3, #31
 800f9d2:	f001 011f 	and.w	r1, r1, #31
 800f9d6:	bf58      	it	pl
 800f9d8:	424b      	negpl	r3, r1
 800f9da:	fa22 f303 	lsr.w	r3, r2, r3
 800f9de:	f003 0301 	and.w	r3, r3, #1
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d135      	bne.n	800fa52 <lwip_selscan+0x11e>
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d016      	beq.n	800fa1a <lwip_selscan+0xe6>
        !(writeset_in && FD_ISSET(i, writeset_in)) &&
 800f9ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	da00      	bge.n	800f9f4 <lwip_selscan+0xc0>
 800f9f2:	331f      	adds	r3, #31
 800f9f4:	115b      	asrs	r3, r3, #5
 800f9f6:	461a      	mov	r2, r3
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f9fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa00:	4259      	negs	r1, r3
 800fa02:	f003 031f 	and.w	r3, r3, #31
 800fa06:	f001 011f 	and.w	r1, r1, #31
 800fa0a:	bf58      	it	pl
 800fa0c:	424b      	negpl	r3, r1
 800fa0e:	fa22 f303 	lsr.w	r3, r2, r3
 800fa12:	f003 0301 	and.w	r3, r3, #1
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d11b      	bne.n	800fa52 <lwip_selscan+0x11e>
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	f000 80f1 	beq.w	800fc04 <lwip_selscan+0x2d0>
        !(exceptset_in && FD_ISSET(i, exceptset_in))) {
 800fa22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	da00      	bge.n	800fa2a <lwip_selscan+0xf6>
 800fa28:	331f      	adds	r3, #31
 800fa2a:	115b      	asrs	r3, r3, #5
 800fa2c:	461a      	mov	r2, r3
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fa34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa36:	4259      	negs	r1, r3
 800fa38:	f003 031f 	and.w	r3, r3, #31
 800fa3c:	f001 011f 	and.w	r1, r1, #31
 800fa40:	bf58      	it	pl
 800fa42:	424b      	negpl	r3, r1
 800fa44:	fa22 f303 	lsr.w	r3, r2, r3
 800fa48:	f003 0301 	and.w	r3, r3, #1
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	f000 80d9 	beq.w	800fc04 <lwip_selscan+0x2d0>
      continue;
    }
    /* First get the socket's status (protected)... */
    SYS_ARCH_PROTECT(lev);
 800fa52:	f00b fe6f 	bl	801b734 <sys_arch_protect>
 800fa56:	63f8      	str	r0, [r7, #60]	; 0x3c
    sock = tryget_socket_unconn_locked(i);
 800fa58:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800fa5a:	f7ff fa78 	bl	800ef4e <tryget_socket_unconn_locked>
 800fa5e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (sock != NULL) {
 800fa60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	f000 80c8 	beq.w	800fbf8 <lwip_selscan+0x2c4>
      void *lastdata = sock->lastdata.pbuf;
 800fa68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa6a:	685b      	ldr	r3, [r3, #4]
 800fa6c:	637b      	str	r3, [r7, #52]	; 0x34
      s16_t rcvevent = sock->rcvevent;
 800fa6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa70:	891b      	ldrh	r3, [r3, #8]
 800fa72:	867b      	strh	r3, [r7, #50]	; 0x32
      u16_t sendevent = sock->sendevent;
 800fa74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa76:	895b      	ldrh	r3, [r3, #10]
 800fa78:	863b      	strh	r3, [r7, #48]	; 0x30
      u16_t errevent = sock->errevent;
 800fa7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa7c:	899b      	ldrh	r3, [r3, #12]
 800fa7e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      SYS_ARCH_UNPROTECT(lev);
 800fa80:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fa82:	f00b fe65 	bl	801b750 <sys_arch_unprotect>

      /* ... then examine it: */
      /* See if netconn of this socket is ready for read */
      if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
 800fa86:	68bb      	ldr	r3, [r7, #8]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d03c      	beq.n	800fb06 <lwip_selscan+0x1d2>
 800fa8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	da00      	bge.n	800fa94 <lwip_selscan+0x160>
 800fa92:	331f      	adds	r3, #31
 800fa94:	115b      	asrs	r3, r3, #5
 800fa96:	461a      	mov	r2, r3
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fa9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800faa0:	4259      	negs	r1, r3
 800faa2:	f003 031f 	and.w	r3, r3, #31
 800faa6:	f001 011f 	and.w	r1, r1, #31
 800faaa:	bf58      	it	pl
 800faac:	424b      	negpl	r3, r1
 800faae:	fa22 f303 	lsr.w	r3, r2, r3
 800fab2:	f003 0301 	and.w	r3, r3, #1
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d025      	beq.n	800fb06 <lwip_selscan+0x1d2>
 800faba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d103      	bne.n	800fac8 <lwip_selscan+0x194>
 800fac0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	dd1e      	ble.n	800fb06 <lwip_selscan+0x1d2>
        FD_SET(i, &lreadset);
 800fac8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800faca:	2b00      	cmp	r3, #0
 800facc:	da00      	bge.n	800fad0 <lwip_selscan+0x19c>
 800face:	331f      	adds	r3, #31
 800fad0:	115b      	asrs	r3, r3, #5
 800fad2:	461a      	mov	r2, r3
 800fad4:	0093      	lsls	r3, r2, #2
 800fad6:	3360      	adds	r3, #96	; 0x60
 800fad8:	443b      	add	r3, r7
 800fada:	f853 1c3c 	ldr.w	r1, [r3, #-60]
 800fade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fae0:	4258      	negs	r0, r3
 800fae2:	f003 031f 	and.w	r3, r3, #31
 800fae6:	f000 001f 	and.w	r0, r0, #31
 800faea:	bf58      	it	pl
 800faec:	4243      	negpl	r3, r0
 800faee:	2001      	movs	r0, #1
 800faf0:	fa00 f303 	lsl.w	r3, r0, r3
 800faf4:	4319      	orrs	r1, r3
 800faf6:	0093      	lsls	r3, r2, #2
 800faf8:	3360      	adds	r3, #96	; 0x60
 800fafa:	443b      	add	r3, r7
 800fafc:	f843 1c3c 	str.w	r1, [r3, #-60]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
        nready++;
 800fb00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb02:	3301      	adds	r3, #1
 800fb04:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      /* See if netconn of this socket is ready for write */
      if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d038      	beq.n	800fb7e <lwip_selscan+0x24a>
 800fb0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	da00      	bge.n	800fb14 <lwip_selscan+0x1e0>
 800fb12:	331f      	adds	r3, #31
 800fb14:	115b      	asrs	r3, r3, #5
 800fb16:	461a      	mov	r2, r3
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fb1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb20:	4259      	negs	r1, r3
 800fb22:	f003 031f 	and.w	r3, r3, #31
 800fb26:	f001 011f 	and.w	r1, r1, #31
 800fb2a:	bf58      	it	pl
 800fb2c:	424b      	negpl	r3, r1
 800fb2e:	fa22 f303 	lsr.w	r3, r2, r3
 800fb32:	f003 0301 	and.w	r3, r3, #1
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d021      	beq.n	800fb7e <lwip_selscan+0x24a>
 800fb3a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d01e      	beq.n	800fb7e <lwip_selscan+0x24a>
        FD_SET(i, &lwriteset);
 800fb40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	da00      	bge.n	800fb48 <lwip_selscan+0x214>
 800fb46:	331f      	adds	r3, #31
 800fb48:	115b      	asrs	r3, r3, #5
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	0093      	lsls	r3, r2, #2
 800fb4e:	3360      	adds	r3, #96	; 0x60
 800fb50:	443b      	add	r3, r7
 800fb52:	f853 1c44 	ldr.w	r1, [r3, #-68]
 800fb56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb58:	4258      	negs	r0, r3
 800fb5a:	f003 031f 	and.w	r3, r3, #31
 800fb5e:	f000 001f 	and.w	r0, r0, #31
 800fb62:	bf58      	it	pl
 800fb64:	4243      	negpl	r3, r0
 800fb66:	2001      	movs	r0, #1
 800fb68:	fa00 f303 	lsl.w	r3, r0, r3
 800fb6c:	4319      	orrs	r1, r3
 800fb6e:	0093      	lsls	r3, r2, #2
 800fb70:	3360      	adds	r3, #96	; 0x60
 800fb72:	443b      	add	r3, r7
 800fb74:	f843 1c44 	str.w	r1, [r3, #-68]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
        nready++;
 800fb78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb7a:	3301      	adds	r3, #1
 800fb7c:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      /* See if netconn of this socket had an error */
      if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d040      	beq.n	800fc06 <lwip_selscan+0x2d2>
 800fb84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	da00      	bge.n	800fb8c <lwip_selscan+0x258>
 800fb8a:	331f      	adds	r3, #31
 800fb8c:	115b      	asrs	r3, r3, #5
 800fb8e:	461a      	mov	r2, r3
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fb96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb98:	4259      	negs	r1, r3
 800fb9a:	f003 031f 	and.w	r3, r3, #31
 800fb9e:	f001 011f 	and.w	r1, r1, #31
 800fba2:	bf58      	it	pl
 800fba4:	424b      	negpl	r3, r1
 800fba6:	fa22 f303 	lsr.w	r3, r2, r3
 800fbaa:	f003 0301 	and.w	r3, r3, #1
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d029      	beq.n	800fc06 <lwip_selscan+0x2d2>
 800fbb2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d026      	beq.n	800fc06 <lwip_selscan+0x2d2>
        FD_SET(i, &lexceptset);
 800fbb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	da00      	bge.n	800fbc0 <lwip_selscan+0x28c>
 800fbbe:	331f      	adds	r3, #31
 800fbc0:	115b      	asrs	r3, r3, #5
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	0093      	lsls	r3, r2, #2
 800fbc6:	3360      	adds	r3, #96	; 0x60
 800fbc8:	443b      	add	r3, r7
 800fbca:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 800fbce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbd0:	4258      	negs	r0, r3
 800fbd2:	f003 031f 	and.w	r3, r3, #31
 800fbd6:	f000 001f 	and.w	r0, r0, #31
 800fbda:	bf58      	it	pl
 800fbdc:	4243      	negpl	r3, r0
 800fbde:	2001      	movs	r0, #1
 800fbe0:	fa00 f303 	lsl.w	r3, r0, r3
 800fbe4:	4319      	orrs	r1, r3
 800fbe6:	0093      	lsls	r3, r2, #2
 800fbe8:	3360      	adds	r3, #96	; 0x60
 800fbea:	443b      	add	r3, r7
 800fbec:	f843 1c4c 	str.w	r1, [r3, #-76]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
        nready++;
 800fbf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fbf2:	3301      	adds	r3, #1
 800fbf4:	65bb      	str	r3, [r7, #88]	; 0x58
 800fbf6:	e006      	b.n	800fc06 <lwip_selscan+0x2d2>
      }
      done_socket(sock);
    } else {
      SYS_ARCH_UNPROTECT(lev);
 800fbf8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fbfa:	f00b fda9 	bl	801b750 <sys_arch_unprotect>
      /* no a valid open socket */
      return -1;
 800fbfe:	f04f 33ff 	mov.w	r3, #4294967295
 800fc02:	e02b      	b.n	800fc5c <lwip_selscan+0x328>
      continue;
 800fc04:	bf00      	nop
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800fc06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc08:	3301      	adds	r3, #1
 800fc0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fc0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	429a      	cmp	r2, r3
 800fc12:	f6ff aece 	blt.w	800f9b2 <lwip_selscan+0x7e>
    }
  }
  /* copy local sets to the ones provided as arguments */
  *readset_out = lreadset;
 800fc16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc18:	461a      	mov	r2, r3
 800fc1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fc22:	e882 0003 	stmia.w	r2, {r0, r1}
  *writeset_out = lwriteset;
 800fc26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc28:	461a      	mov	r2, r3
 800fc2a:	f107 031c 	add.w	r3, r7, #28
 800fc2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fc32:	e882 0003 	stmia.w	r2, {r0, r1}
  *exceptset_out = lexceptset;
 800fc36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fc38:	461a      	mov	r2, r3
 800fc3a:	f107 0314 	add.w	r3, r7, #20
 800fc3e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fc42:	e882 0003 	stmia.w	r2, {r0, r1}

  LWIP_ASSERT("nready >= 0", nready >= 0);
 800fc46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	da06      	bge.n	800fc5a <lwip_selscan+0x326>
 800fc4c:	4b05      	ldr	r3, [pc, #20]	; (800fc64 <lwip_selscan+0x330>)
 800fc4e:	f240 7269 	movw	r2, #1897	; 0x769
 800fc52:	4905      	ldr	r1, [pc, #20]	; (800fc68 <lwip_selscan+0x334>)
 800fc54:	4805      	ldr	r0, [pc, #20]	; (800fc6c <lwip_selscan+0x338>)
 800fc56:	f00b fdd5 	bl	801b804 <iprintf>
  return nready;
 800fc5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	3760      	adds	r7, #96	; 0x60
 800fc60:	46bd      	mov	sp, r7
 800fc62:	bd80      	pop	{r7, pc}
 800fc64:	0801d5c4 	.word	0x0801d5c4
 800fc68:	0801d8f4 	.word	0x0801d8f4
 800fc6c:	0801d618 	.word	0x0801d618

0800fc70 <lwip_select>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

int
lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
            struct timeval *timeout)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b0a0      	sub	sp, #128	; 0x80
 800fc74:	af04      	add	r7, sp, #16
 800fc76:	60f8      	str	r0, [r7, #12]
 800fc78:	60b9      	str	r1, [r7, #8]
 800fc7a:	607a      	str	r2, [r7, #4]
 800fc7c:	603b      	str	r3, [r7, #0]
  u32_t waitres = 0;
 800fc7e:	2300      	movs	r3, #0
 800fc80:	66fb      	str	r3, [r7, #108]	; 0x6c
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select(%d, %p, %p, %p, tvsec=%"S32_F" tvusec=%"S32_F")\n",
                              maxfdp1, (void *)readset, (void *) writeset, (void *) exceptset,
                              timeout ? (s32_t)timeout->tv_sec : (s32_t) - 1,
                              timeout ? (s32_t)timeout->tv_usec : (s32_t) - 1));

  if ((maxfdp1 < 0) || (maxfdp1 > LWIP_SELECT_MAXNFDS)) {
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	db02      	blt.n	800fc8e <lwip_select+0x1e>
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	2b40      	cmp	r3, #64	; 0x40
 800fc8c:	dd05      	ble.n	800fc9a <lwip_select+0x2a>
    set_errno(EINVAL);
 800fc8e:	4b92      	ldr	r3, [pc, #584]	; (800fed8 <lwip_select+0x268>)
 800fc90:	2216      	movs	r2, #22
 800fc92:	601a      	str	r2, [r3, #0]
    return -1;
 800fc94:	f04f 33ff 	mov.w	r3, #4294967295
 800fc98:	e1eb      	b.n	8010072 <lwip_select+0x402>

  lwip_select_inc_sockets_used(maxfdp1, readset, writeset, exceptset, &used_sockets);

  /* Go through each socket in each list to count number of sockets which
     currently match */
  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 800fc9a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fc9e:	9302      	str	r3, [sp, #8]
 800fca0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800fca4:	9301      	str	r3, [sp, #4]
 800fca6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800fcaa:	9300      	str	r3, [sp, #0]
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	687a      	ldr	r2, [r7, #4]
 800fcb0:	68b9      	ldr	r1, [r7, #8]
 800fcb2:	68f8      	ldr	r0, [r7, #12]
 800fcb4:	f7ff fe3e 	bl	800f934 <lwip_selscan>
 800fcb8:	66b8      	str	r0, [r7, #104]	; 0x68

  if (nready < 0) {
 800fcba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	da05      	bge.n	800fccc <lwip_select+0x5c>
    /* one of the sockets in one of the fd_sets was invalid */
    set_errno(EBADF);
 800fcc0:	4b85      	ldr	r3, [pc, #532]	; (800fed8 <lwip_select+0x268>)
 800fcc2:	2209      	movs	r2, #9
 800fcc4:	601a      	str	r2, [r3, #0]
    lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
    return -1;
 800fcc6:	f04f 33ff 	mov.w	r3, #4294967295
 800fcca:	e1d2      	b.n	8010072 <lwip_select+0x402>
  } else if (nready > 0) {
 800fccc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	f300 81ad 	bgt.w	801002e <lwip_select+0x3be>
    /* one or more sockets are set, no need to wait */
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
  } else {
    /* If we don't have any current events, then suspend if we are supposed to */
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
 800fcd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d009      	beq.n	800fcee <lwip_select+0x7e>
 800fcda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fce0:	4313      	orrs	r3, r2
 800fce2:	d104      	bne.n	800fcee <lwip_select+0x7e>
 800fce4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fce6:	689b      	ldr	r3, [r3, #8]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	f000 81a0 	beq.w	801002e <lwip_select+0x3be>
         list is only valid while we are in this function, so it's ok
         to use local variables (unless we're running in MPU compatible
         mode). */
      API_SELECT_CB_VAR_DECLARE(select_cb);
      API_SELECT_CB_VAR_ALLOC(select_cb, set_errno(ENOMEM); lwip_select_dec_sockets_used(maxfdp1, &used_sockets); return -1);
      memset(&API_SELECT_CB_VAR_REF(select_cb), 0, sizeof(struct lwip_select_cb));
 800fcee:	f107 0310 	add.w	r3, r7, #16
 800fcf2:	2224      	movs	r2, #36	; 0x24
 800fcf4:	2100      	movs	r1, #0
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f00b fd7c 	bl	801b7f4 <memset>

      API_SELECT_CB_VAR_REF(select_cb).readset = readset;
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	61bb      	str	r3, [r7, #24]
      API_SELECT_CB_VAR_REF(select_cb).writeset = writeset;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	61fb      	str	r3, [r7, #28]
      API_SELECT_CB_VAR_REF(select_cb).exceptset = exceptset;
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	623b      	str	r3, [r7, #32]
#if LWIP_NETCONN_SEM_PER_THREAD
      API_SELECT_CB_VAR_REF(select_cb).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD */
      if (sys_sem_new(&API_SELECT_CB_VAR_REF(select_cb).sem, 0) != ERR_OK) {
 800fd08:	f107 0310 	add.w	r3, r7, #16
 800fd0c:	3320      	adds	r3, #32
 800fd0e:	2100      	movs	r1, #0
 800fd10:	4618      	mov	r0, r3
 800fd12:	f00b fc23 	bl	801b55c <sys_sem_new>
 800fd16:	4603      	mov	r3, r0
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d005      	beq.n	800fd28 <lwip_select+0xb8>
        /* failed to create semaphore */
        set_errno(ENOMEM);
 800fd1c:	4b6e      	ldr	r3, [pc, #440]	; (800fed8 <lwip_select+0x268>)
 800fd1e:	220c      	movs	r2, #12
 800fd20:	601a      	str	r2, [r3, #0]
        lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
        API_SELECT_CB_VAR_FREE(select_cb);
        return -1;
 800fd22:	f04f 33ff 	mov.w	r3, #4294967295
 800fd26:	e1a4      	b.n	8010072 <lwip_select+0x402>
      }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

      lwip_link_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 800fd28:	f107 0310 	add.w	r3, r7, #16
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f7ff fd97 	bl	800f860 <lwip_link_select_cb>

      /* Increase select_waiting for each socket we are interested in */
      maxfdp2 = maxfdp1;
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	65fb      	str	r3, [r7, #92]	; 0x5c
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800fd36:	2300      	movs	r3, #0
 800fd38:	663b      	str	r3, [r7, #96]	; 0x60
 800fd3a:	e086      	b.n	800fe4a <lwip_select+0x1da>
        if ((readset && FD_ISSET(i, readset)) ||
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d016      	beq.n	800fd70 <lwip_select+0x100>
 800fd42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	da00      	bge.n	800fd4a <lwip_select+0xda>
 800fd48:	331f      	adds	r3, #31
 800fd4a:	115b      	asrs	r3, r3, #5
 800fd4c:	461a      	mov	r2, r3
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fd54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd56:	4259      	negs	r1, r3
 800fd58:	f003 031f 	and.w	r3, r3, #31
 800fd5c:	f001 011f 	and.w	r1, r1, #31
 800fd60:	bf58      	it	pl
 800fd62:	424b      	negpl	r3, r1
 800fd64:	fa22 f303 	lsr.w	r3, r2, r3
 800fd68:	f003 0301 	and.w	r3, r3, #1
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d133      	bne.n	800fdd8 <lwip_select+0x168>
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d016      	beq.n	800fda4 <lwip_select+0x134>
            (writeset && FD_ISSET(i, writeset)) ||
 800fd76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	da00      	bge.n	800fd7e <lwip_select+0x10e>
 800fd7c:	331f      	adds	r3, #31
 800fd7e:	115b      	asrs	r3, r3, #5
 800fd80:	461a      	mov	r2, r3
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fd88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd8a:	4259      	negs	r1, r3
 800fd8c:	f003 031f 	and.w	r3, r3, #31
 800fd90:	f001 011f 	and.w	r1, r1, #31
 800fd94:	bf58      	it	pl
 800fd96:	424b      	negpl	r3, r1
 800fd98:	fa22 f303 	lsr.w	r3, r2, r3
 800fd9c:	f003 0301 	and.w	r3, r3, #1
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d119      	bne.n	800fdd8 <lwip_select+0x168>
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d04c      	beq.n	800fe44 <lwip_select+0x1d4>
            (exceptset && FD_ISSET(i, exceptset))) {
 800fdaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	da00      	bge.n	800fdb2 <lwip_select+0x142>
 800fdb0:	331f      	adds	r3, #31
 800fdb2:	115b      	asrs	r3, r3, #5
 800fdb4:	461a      	mov	r2, r3
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fdbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fdbe:	4259      	negs	r1, r3
 800fdc0:	f003 031f 	and.w	r3, r3, #31
 800fdc4:	f001 011f 	and.w	r1, r1, #31
 800fdc8:	bf58      	it	pl
 800fdca:	424b      	negpl	r3, r1
 800fdcc:	fa22 f303 	lsr.w	r3, r2, r3
 800fdd0:	f003 0301 	and.w	r3, r3, #1
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d035      	beq.n	800fe44 <lwip_select+0x1d4>
          struct lwip_sock *sock;
          SYS_ARCH_PROTECT(lev);
 800fdd8:	f00b fcac 	bl	801b734 <sys_arch_protect>
 800fddc:	65b8      	str	r0, [r7, #88]	; 0x58
          sock = tryget_socket_unconn_locked(i);
 800fdde:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800fde0:	f7ff f8b5 	bl	800ef4e <tryget_socket_unconn_locked>
 800fde4:	6578      	str	r0, [r7, #84]	; 0x54
          if (sock != NULL) {
 800fde6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d01f      	beq.n	800fe2c <lwip_select+0x1bc>
            sock->select_waiting++;
 800fdec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fdee:	7b9b      	ldrb	r3, [r3, #14]
 800fdf0:	3301      	adds	r3, #1
 800fdf2:	b2da      	uxtb	r2, r3
 800fdf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fdf6:	739a      	strb	r2, [r3, #14]
            if (sock->select_waiting == 0) {
 800fdf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fdfa:	7b9b      	ldrb	r3, [r3, #14]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d111      	bne.n	800fe24 <lwip_select+0x1b4>
              /* overflow - too many threads waiting */
              sock->select_waiting--;
 800fe00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe02:	7b9b      	ldrb	r3, [r3, #14]
 800fe04:	3b01      	subs	r3, #1
 800fe06:	b2da      	uxtb	r2, r3
 800fe08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe0a:	739a      	strb	r2, [r3, #14]
              nready = -1;
 800fe0c:	f04f 33ff 	mov.w	r3, #4294967295
 800fe10:	66bb      	str	r3, [r7, #104]	; 0x68
              maxfdp2 = i;
 800fe12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe14:	65fb      	str	r3, [r7, #92]	; 0x5c
              SYS_ARCH_UNPROTECT(lev);
 800fe16:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fe18:	f00b fc9a 	bl	801b750 <sys_arch_unprotect>
              done_socket(sock);
              set_errno(EBUSY);
 800fe1c:	4b2e      	ldr	r3, [pc, #184]	; (800fed8 <lwip_select+0x268>)
 800fe1e:	2210      	movs	r2, #16
 800fe20:	601a      	str	r2, [r3, #0]
              break;
 800fe22:	e017      	b.n	800fe54 <lwip_select+0x1e4>
            }
            SYS_ARCH_UNPROTECT(lev);
 800fe24:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fe26:	f00b fc93 	bl	801b750 <sys_arch_unprotect>
 800fe2a:	e00b      	b.n	800fe44 <lwip_select+0x1d4>
            done_socket(sock);
          } else {
            /* Not a valid socket */
            nready = -1;
 800fe2c:	f04f 33ff 	mov.w	r3, #4294967295
 800fe30:	66bb      	str	r3, [r7, #104]	; 0x68
            maxfdp2 = i;
 800fe32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe34:	65fb      	str	r3, [r7, #92]	; 0x5c
            SYS_ARCH_UNPROTECT(lev);
 800fe36:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fe38:	f00b fc8a 	bl	801b750 <sys_arch_unprotect>
            set_errno(EBADF);
 800fe3c:	4b26      	ldr	r3, [pc, #152]	; (800fed8 <lwip_select+0x268>)
 800fe3e:	2209      	movs	r2, #9
 800fe40:	601a      	str	r2, [r3, #0]
            break;
 800fe42:	e007      	b.n	800fe54 <lwip_select+0x1e4>
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800fe44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe46:	3301      	adds	r3, #1
 800fe48:	663b      	str	r3, [r7, #96]	; 0x60
 800fe4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	f6ff af74 	blt.w	800fd3c <lwip_select+0xcc>
          }
        }
      }

      if (nready >= 0) {
 800fe54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	db3b      	blt.n	800fed2 <lwip_select+0x262>
        /* Call lwip_selscan again: there could have been events between
           the last scan (without us on the list) and putting us on the list! */
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 800fe5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fe5e:	9302      	str	r3, [sp, #8]
 800fe60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800fe64:	9301      	str	r3, [sp, #4]
 800fe66:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800fe6a:	9300      	str	r3, [sp, #0]
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	687a      	ldr	r2, [r7, #4]
 800fe70:	68b9      	ldr	r1, [r7, #8]
 800fe72:	68f8      	ldr	r0, [r7, #12]
 800fe74:	f7ff fd5e 	bl	800f934 <lwip_selscan>
 800fe78:	66b8      	str	r0, [r7, #104]	; 0x68
        if (!nready) {
 800fe7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d128      	bne.n	800fed2 <lwip_select+0x262>
          /* Still none ready, just wait to be woken */
          if (timeout == 0) {
 800fe80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d102      	bne.n	800fe8c <lwip_select+0x21c>
            /* Wait forever */
            msectimeout = 0;
 800fe86:	2300      	movs	r3, #0
 800fe88:	667b      	str	r3, [r7, #100]	; 0x64
 800fe8a:	e01a      	b.n	800fec2 <lwip_select+0x252>
          } else {
            long msecs_long = ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500) / 1000));
 800fe8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fe8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fe96:	fb03 f202 	mul.w	r2, r3, r2
 800fe9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fe9c:	689b      	ldr	r3, [r3, #8]
 800fe9e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800fea2:	490e      	ldr	r1, [pc, #56]	; (800fedc <lwip_select+0x26c>)
 800fea4:	fb81 0103 	smull	r0, r1, r1, r3
 800fea8:	1189      	asrs	r1, r1, #6
 800feaa:	17db      	asrs	r3, r3, #31
 800feac:	1acb      	subs	r3, r1, r3
 800feae:	4413      	add	r3, r2
 800feb0:	653b      	str	r3, [r7, #80]	; 0x50
            if (msecs_long <= 0) {
 800feb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	dc02      	bgt.n	800febe <lwip_select+0x24e>
              /* Wait 1ms at least (0 means wait forever) */
              msectimeout = 1;
 800feb8:	2301      	movs	r3, #1
 800feba:	667b      	str	r3, [r7, #100]	; 0x64
 800febc:	e001      	b.n	800fec2 <lwip_select+0x252>
            } else {
              msectimeout = (u32_t)msecs_long;
 800febe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fec0:	667b      	str	r3, [r7, #100]	; 0x64
            }
          }

          waitres = sys_arch_sem_wait(SELECT_SEM_PTR(API_SELECT_CB_VAR_REF(select_cb).sem), msectimeout);
 800fec2:	f107 0310 	add.w	r3, r7, #16
 800fec6:	3320      	adds	r3, #32
 800fec8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800feca:	4618      	mov	r0, r3
 800fecc:	f00b fb6b 	bl	801b5a6 <sys_arch_sem_wait>
 800fed0:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif
        }
      }

      /* Decrease select_waiting for each socket we are interested in */
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 800fed2:	2300      	movs	r3, #0
 800fed4:	663b      	str	r3, [r7, #96]	; 0x60
 800fed6:	e080      	b.n	800ffda <lwip_select+0x36a>
 800fed8:	200111e8 	.word	0x200111e8
 800fedc:	10624dd3 	.word	0x10624dd3
        if ((readset && FD_ISSET(i, readset)) ||
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d016      	beq.n	800ff14 <lwip_select+0x2a4>
 800fee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fee8:	2b00      	cmp	r3, #0
 800feea:	da00      	bge.n	800feee <lwip_select+0x27e>
 800feec:	331f      	adds	r3, #31
 800feee:	115b      	asrs	r3, r3, #5
 800fef0:	461a      	mov	r2, r3
 800fef2:	68bb      	ldr	r3, [r7, #8]
 800fef4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fef8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fefa:	4259      	negs	r1, r3
 800fefc:	f003 031f 	and.w	r3, r3, #31
 800ff00:	f001 011f 	and.w	r1, r1, #31
 800ff04:	bf58      	it	pl
 800ff06:	424b      	negpl	r3, r1
 800ff08:	fa22 f303 	lsr.w	r3, r2, r3
 800ff0c:	f003 0301 	and.w	r3, r3, #1
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d133      	bne.n	800ff7c <lwip_select+0x30c>
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d016      	beq.n	800ff48 <lwip_select+0x2d8>
            (writeset && FD_ISSET(i, writeset)) ||
 800ff1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	da00      	bge.n	800ff22 <lwip_select+0x2b2>
 800ff20:	331f      	adds	r3, #31
 800ff22:	115b      	asrs	r3, r3, #5
 800ff24:	461a      	mov	r2, r3
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ff2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff2e:	4259      	negs	r1, r3
 800ff30:	f003 031f 	and.w	r3, r3, #31
 800ff34:	f001 011f 	and.w	r1, r1, #31
 800ff38:	bf58      	it	pl
 800ff3a:	424b      	negpl	r3, r1
 800ff3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ff40:	f003 0301 	and.w	r3, r3, #1
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d119      	bne.n	800ff7c <lwip_select+0x30c>
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d042      	beq.n	800ffd4 <lwip_select+0x364>
            (exceptset && FD_ISSET(i, exceptset))) {
 800ff4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	da00      	bge.n	800ff56 <lwip_select+0x2e6>
 800ff54:	331f      	adds	r3, #31
 800ff56:	115b      	asrs	r3, r3, #5
 800ff58:	461a      	mov	r2, r3
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ff60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff62:	4259      	negs	r1, r3
 800ff64:	f003 031f 	and.w	r3, r3, #31
 800ff68:	f001 011f 	and.w	r1, r1, #31
 800ff6c:	bf58      	it	pl
 800ff6e:	424b      	negpl	r3, r1
 800ff70:	fa22 f303 	lsr.w	r3, r2, r3
 800ff74:	f003 0301 	and.w	r3, r3, #1
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d02b      	beq.n	800ffd4 <lwip_select+0x364>
          struct lwip_sock *sock;
          SYS_ARCH_PROTECT(lev);
 800ff7c:	f00b fbda 	bl	801b734 <sys_arch_protect>
 800ff80:	65b8      	str	r0, [r7, #88]	; 0x58
          sock = tryget_socket_unconn_locked(i);
 800ff82:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800ff84:	f7fe ffe3 	bl	800ef4e <tryget_socket_unconn_locked>
 800ff88:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (sock != NULL) {
 800ff8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d018      	beq.n	800ffc2 <lwip_select+0x352>
            /* for now, handle select_waiting==0... */
            LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
 800ff90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff92:	7b9b      	ldrb	r3, [r3, #14]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d106      	bne.n	800ffa6 <lwip_select+0x336>
 800ff98:	4b38      	ldr	r3, [pc, #224]	; (801007c <lwip_select+0x40c>)
 800ff9a:	f640 023c 	movw	r2, #2108	; 0x83c
 800ff9e:	4938      	ldr	r1, [pc, #224]	; (8010080 <lwip_select+0x410>)
 800ffa0:	4838      	ldr	r0, [pc, #224]	; (8010084 <lwip_select+0x414>)
 800ffa2:	f00b fc2f 	bl	801b804 <iprintf>
            if (sock->select_waiting > 0) {
 800ffa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffa8:	7b9b      	ldrb	r3, [r3, #14]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d005      	beq.n	800ffba <lwip_select+0x34a>
              sock->select_waiting--;
 800ffae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffb0:	7b9b      	ldrb	r3, [r3, #14]
 800ffb2:	3b01      	subs	r3, #1
 800ffb4:	b2da      	uxtb	r2, r3
 800ffb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffb8:	739a      	strb	r2, [r3, #14]
            }
            SYS_ARCH_UNPROTECT(lev);
 800ffba:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ffbc:	f00b fbc8 	bl	801b750 <sys_arch_unprotect>
 800ffc0:	e008      	b.n	800ffd4 <lwip_select+0x364>
            done_socket(sock);
          } else {
            SYS_ARCH_UNPROTECT(lev);
 800ffc2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ffc4:	f00b fbc4 	bl	801b750 <sys_arch_unprotect>
            /* Not a valid socket */
            nready = -1;
 800ffc8:	f04f 33ff 	mov.w	r3, #4294967295
 800ffcc:	66bb      	str	r3, [r7, #104]	; 0x68
            set_errno(EBADF);
 800ffce:	4b2e      	ldr	r3, [pc, #184]	; (8010088 <lwip_select+0x418>)
 800ffd0:	2209      	movs	r2, #9
 800ffd2:	601a      	str	r2, [r3, #0]
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 800ffd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ffd6:	3301      	adds	r3, #1
 800ffd8:	663b      	str	r3, [r7, #96]	; 0x60
 800ffda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ffdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ffde:	429a      	cmp	r2, r3
 800ffe0:	f6ff af7e 	blt.w	800fee0 <lwip_select+0x270>
          }
        }
      }

      lwip_unlink_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 800ffe4:	f107 0310 	add.w	r3, r7, #16
 800ffe8:	4618      	mov	r0, r3
 800ffea:	f7ff fc5b 	bl	800f8a4 <lwip_unlink_select_cb>
      if (API_SELECT_CB_VAR_REF(select_cb).sem_signalled && (!waited || (waitres == SYS_ARCH_TIMEOUT))) {
        /* don't leave the thread-local semaphore signalled */
        sys_arch_sem_wait(API_SELECT_CB_VAR_REF(select_cb).sem, 1);
      }
#else /* LWIP_NETCONN_SEM_PER_THREAD */
      sys_sem_free(&API_SELECT_CB_VAR_REF(select_cb).sem);
 800ffee:	f107 0310 	add.w	r3, r7, #16
 800fff2:	3320      	adds	r3, #32
 800fff4:	4618      	mov	r0, r3
 800fff6:	f00b fb14 	bl	801b622 <sys_sem_free>
#endif /* LWIP_NETCONN_SEM_PER_THREAD */
      API_SELECT_CB_VAR_FREE(select_cb);

      if (nready < 0) {
 800fffa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	da02      	bge.n	8010006 <lwip_select+0x396>
        /* This happens when a socket got closed while waiting */
        lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
        return -1;
 8010000:	f04f 33ff 	mov.w	r3, #4294967295
 8010004:	e035      	b.n	8010072 <lwip_select+0x402>
      }

      if (waitres == SYS_ARCH_TIMEOUT) {
 8010006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010008:	f1b3 3fff 	cmp.w	r3, #4294967295
 801000c:	d00f      	beq.n	801002e <lwip_select+0x3be>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: timeout expired\n"));
        /* This is OK as the local fdsets are empty and nready is zero,
           or we would have returned earlier. */
      } else {
        /* See what's set now after waiting */
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 801000e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010012:	9302      	str	r3, [sp, #8]
 8010014:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010018:	9301      	str	r3, [sp, #4]
 801001a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801001e:	9300      	str	r3, [sp, #0]
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	687a      	ldr	r2, [r7, #4]
 8010024:	68b9      	ldr	r1, [r7, #8]
 8010026:	68f8      	ldr	r0, [r7, #12]
 8010028:	f7ff fc84 	bl	800f934 <lwip_selscan>
 801002c:	66b8      	str	r0, [r7, #104]	; 0x68
    }
  }

  lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
  set_errno(0);
  if (readset) {
 801002e:	68bb      	ldr	r3, [r7, #8]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d007      	beq.n	8010044 <lwip_select+0x3d4>
    *readset = lreadset;
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	461a      	mov	r2, r3
 8010038:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801003c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010040:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  if (writeset) {
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d007      	beq.n	801005a <lwip_select+0x3ea>
    *writeset = lwriteset;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	461a      	mov	r2, r3
 801004e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010052:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010056:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  if (exceptset) {
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d007      	beq.n	8010070 <lwip_select+0x400>
    *exceptset = lexceptset;
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	461a      	mov	r2, r3
 8010064:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010068:	e893 0003 	ldmia.w	r3, {r0, r1}
 801006c:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  return nready;
 8010070:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8010072:	4618      	mov	r0, r3
 8010074:	3770      	adds	r7, #112	; 0x70
 8010076:	46bd      	mov	sp, r7
 8010078:	bd80      	pop	{r7, pc}
 801007a:	bf00      	nop
 801007c:	0801d5c4 	.word	0x0801d5c4
 8010080:	0801d900 	.word	0x0801d900
 8010084:	0801d618 	.word	0x0801d618
 8010088:	200111e8 	.word	0x200111e8

0801008c <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 801008c:	b480      	push	{r7}
 801008e:	b087      	sub	sp, #28
 8010090:	af00      	add	r7, sp, #0
 8010092:	60f8      	str	r0, [r7, #12]
 8010094:	60b9      	str	r1, [r7, #8]
 8010096:	607a      	str	r2, [r7, #4]
 8010098:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 801009a:	2300      	movs	r3, #0
 801009c:	617b      	str	r3, [r7, #20]
 801009e:	e02c      	b.n	80100fa <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	695a      	ldr	r2, [r3, #20]
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	00db      	lsls	r3, r3, #3
 80100a8:	4413      	add	r3, r2
 80100aa:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 80100ac:	693b      	ldr	r3, [r7, #16]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	68ba      	ldr	r2, [r7, #8]
 80100b2:	429a      	cmp	r2, r3
 80100b4:	d11e      	bne.n	80100f4 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d009      	beq.n	80100d0 <lwip_poll_should_wake+0x44>
 80100bc:	693b      	ldr	r3, [r7, #16]
 80100be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80100c2:	b29b      	uxth	r3, r3
 80100c4:	f003 0301 	and.w	r3, r3, #1
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d001      	beq.n	80100d0 <lwip_poll_should_wake+0x44>
        return 1;
 80100cc:	2301      	movs	r3, #1
 80100ce:	e01a      	b.n	8010106 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d009      	beq.n	80100ea <lwip_poll_should_wake+0x5e>
 80100d6:	693b      	ldr	r3, [r7, #16]
 80100d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80100dc:	b29b      	uxth	r3, r3
 80100de:	f003 0302 	and.w	r3, r3, #2
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d001      	beq.n	80100ea <lwip_poll_should_wake+0x5e>
        return 1;
 80100e6:	2301      	movs	r3, #1
 80100e8:	e00d      	b.n	8010106 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 80100ea:	6a3b      	ldr	r3, [r7, #32]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d001      	beq.n	80100f4 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 80100f0:	2301      	movs	r3, #1
 80100f2:	e008      	b.n	8010106 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 80100f4:	697b      	ldr	r3, [r7, #20]
 80100f6:	3301      	adds	r3, #1
 80100f8:	617b      	str	r3, [r7, #20]
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	699b      	ldr	r3, [r3, #24]
 80100fe:	697a      	ldr	r2, [r7, #20]
 8010100:	429a      	cmp	r2, r3
 8010102:	d3cd      	bcc.n	80100a0 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 8010104:	2300      	movs	r3, #0
}
 8010106:	4618      	mov	r0, r3
 8010108:	371c      	adds	r7, #28
 801010a:	46bd      	mov	sp, r7
 801010c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010110:	4770      	bx	lr
	...

08010114 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b08a      	sub	sp, #40	; 0x28
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
 801011c:	460b      	mov	r3, r1
 801011e:	70fb      	strb	r3, [r7, #3]
 8010120:	4613      	mov	r3, r2
 8010122:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2b00      	cmp	r3, #0
 8010128:	f000 80a4 	beq.w	8010274 <event_callback+0x160>
    s = conn->socket;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	699b      	ldr	r3, [r3, #24]
 8010130:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 8010132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010134:	2b00      	cmp	r3, #0
 8010136:	da18      	bge.n	801016a <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 8010138:	f00b fafc 	bl	801b734 <sys_arch_protect>
 801013c:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	699b      	ldr	r3, [r3, #24]
 8010142:	2b00      	cmp	r3, #0
 8010144:	da0b      	bge.n	801015e <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 8010146:	78fb      	ldrb	r3, [r7, #3]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d104      	bne.n	8010156 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	699b      	ldr	r3, [r3, #24]
 8010150:	1e5a      	subs	r2, r3, #1
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 8010156:	69f8      	ldr	r0, [r7, #28]
 8010158:	f00b fafa 	bl	801b750 <sys_arch_unprotect>
        return;
 801015c:	e08d      	b.n	801027a <event_callback+0x166>
      }
      s = conn->socket;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	699b      	ldr	r3, [r3, #24]
 8010162:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 8010164:	69f8      	ldr	r0, [r7, #28]
 8010166:	f00b faf3 	bl	801b750 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 801016a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801016c:	f7fe ff12 	bl	800ef94 <get_socket>
 8010170:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 8010172:	69bb      	ldr	r3, [r7, #24]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d07f      	beq.n	8010278 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 8010178:	2301      	movs	r3, #1
 801017a:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 801017c:	f00b fada 	bl	801b734 <sys_arch_protect>
 8010180:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 8010182:	78fb      	ldrb	r3, [r7, #3]
 8010184:	2b04      	cmp	r3, #4
 8010186:	d83e      	bhi.n	8010206 <event_callback+0xf2>
 8010188:	a201      	add	r2, pc, #4	; (adr r2, 8010190 <event_callback+0x7c>)
 801018a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801018e:	bf00      	nop
 8010190:	080101a5 	.word	0x080101a5
 8010194:	080101c7 	.word	0x080101c7
 8010198:	080101df 	.word	0x080101df
 801019c:	080101f3 	.word	0x080101f3
 80101a0:	080101ff 	.word	0x080101ff
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 80101a4:	69bb      	ldr	r3, [r7, #24]
 80101a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80101aa:	b29b      	uxth	r3, r3
 80101ac:	3301      	adds	r3, #1
 80101ae:	b29b      	uxth	r3, r3
 80101b0:	b21a      	sxth	r2, r3
 80101b2:	69bb      	ldr	r3, [r7, #24]
 80101b4:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 80101b6:	69bb      	ldr	r3, [r7, #24]
 80101b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80101bc:	2b01      	cmp	r3, #1
 80101be:	dd2a      	ble.n	8010216 <event_callback+0x102>
        check_waiters = 0;
 80101c0:	2300      	movs	r3, #0
 80101c2:	623b      	str	r3, [r7, #32]
      }
      break;
 80101c4:	e027      	b.n	8010216 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 80101c6:	69bb      	ldr	r3, [r7, #24]
 80101c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80101cc:	b29b      	uxth	r3, r3
 80101ce:	3b01      	subs	r3, #1
 80101d0:	b29b      	uxth	r3, r3
 80101d2:	b21a      	sxth	r2, r3
 80101d4:	69bb      	ldr	r3, [r7, #24]
 80101d6:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 80101d8:	2300      	movs	r3, #0
 80101da:	623b      	str	r3, [r7, #32]
      break;
 80101dc:	e01c      	b.n	8010218 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 80101de:	69bb      	ldr	r3, [r7, #24]
 80101e0:	895b      	ldrh	r3, [r3, #10]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d001      	beq.n	80101ea <event_callback+0xd6>
        check_waiters = 0;
 80101e6:	2300      	movs	r3, #0
 80101e8:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 80101ea:	69bb      	ldr	r3, [r7, #24]
 80101ec:	2201      	movs	r2, #1
 80101ee:	815a      	strh	r2, [r3, #10]
      break;
 80101f0:	e012      	b.n	8010218 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 80101f2:	69bb      	ldr	r3, [r7, #24]
 80101f4:	2200      	movs	r2, #0
 80101f6:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 80101f8:	2300      	movs	r3, #0
 80101fa:	623b      	str	r3, [r7, #32]
      break;
 80101fc:	e00c      	b.n	8010218 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 80101fe:	69bb      	ldr	r3, [r7, #24]
 8010200:	2201      	movs	r2, #1
 8010202:	819a      	strh	r2, [r3, #12]
      break;
 8010204:	e008      	b.n	8010218 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 8010206:	4b1e      	ldr	r3, [pc, #120]	; (8010280 <event_callback+0x16c>)
 8010208:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 801020c:	491d      	ldr	r1, [pc, #116]	; (8010284 <event_callback+0x170>)
 801020e:	481e      	ldr	r0, [pc, #120]	; (8010288 <event_callback+0x174>)
 8010210:	f00b faf8 	bl	801b804 <iprintf>
      break;
 8010214:	e000      	b.n	8010218 <event_callback+0x104>
      break;
 8010216:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 8010218:	69bb      	ldr	r3, [r7, #24]
 801021a:	7b9b      	ldrb	r3, [r3, #14]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d025      	beq.n	801026c <event_callback+0x158>
 8010220:	6a3b      	ldr	r3, [r7, #32]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d022      	beq.n	801026c <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 8010226:	69bb      	ldr	r3, [r7, #24]
 8010228:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801022c:	2b00      	cmp	r3, #0
 801022e:	bfcc      	ite	gt
 8010230:	2301      	movgt	r3, #1
 8010232:	2300      	movle	r3, #0
 8010234:	b2db      	uxtb	r3, r3
 8010236:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 8010238:	69bb      	ldr	r3, [r7, #24]
 801023a:	895b      	ldrh	r3, [r3, #10]
 801023c:	2b00      	cmp	r3, #0
 801023e:	bf14      	ite	ne
 8010240:	2301      	movne	r3, #1
 8010242:	2300      	moveq	r3, #0
 8010244:	b2db      	uxtb	r3, r3
 8010246:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 8010248:	69bb      	ldr	r3, [r7, #24]
 801024a:	899b      	ldrh	r3, [r3, #12]
 801024c:	2b00      	cmp	r3, #0
 801024e:	bf14      	ite	ne
 8010250:	2301      	movne	r3, #1
 8010252:	2300      	moveq	r3, #0
 8010254:	b2db      	uxtb	r3, r3
 8010256:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 8010258:	69f8      	ldr	r0, [r7, #28]
 801025a:	f00b fa79 	bl	801b750 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	693a      	ldr	r2, [r7, #16]
 8010262:	6979      	ldr	r1, [r7, #20]
 8010264:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010266:	f000 f811 	bl	801028c <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 801026a:	e006      	b.n	801027a <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 801026c:	69f8      	ldr	r0, [r7, #28]
 801026e:	f00b fa6f 	bl	801b750 <sys_arch_unprotect>
 8010272:	e002      	b.n	801027a <event_callback+0x166>
    return;
 8010274:	bf00      	nop
 8010276:	e000      	b.n	801027a <event_callback+0x166>
      return;
 8010278:	bf00      	nop
  }
  done_socket(sock);
}
 801027a:	3728      	adds	r7, #40	; 0x28
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}
 8010280:	0801d5c4 	.word	0x0801d5c4
 8010284:	0801d940 	.word	0x0801d940
 8010288:	0801d618 	.word	0x0801d618

0801028c <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b088      	sub	sp, #32
 8010290:	af02      	add	r7, sp, #8
 8010292:	60f8      	str	r0, [r7, #12]
 8010294:	60b9      	str	r1, [r7, #8]
 8010296:	607a      	str	r2, [r7, #4]
 8010298:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 801029a:	4b4b      	ldr	r3, [pc, #300]	; (80103c8 <select_check_waiters+0x13c>)
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	617b      	str	r3, [r7, #20]
 80102a0:	e088      	b.n	80103b4 <select_check_waiters+0x128>
    if (scb->sem_signalled == 0) {
 80102a2:	697b      	ldr	r3, [r7, #20]
 80102a4:	69db      	ldr	r3, [r3, #28]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	f040 8081 	bne.w	80103ae <select_check_waiters+0x122>
      /* semaphore not signalled yet */
      int do_signal = 0;
 80102ac:	2300      	movs	r3, #0
 80102ae:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 80102b0:	697b      	ldr	r3, [r7, #20]
 80102b2:	695b      	ldr	r3, [r3, #20]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d009      	beq.n	80102cc <select_check_waiters+0x40>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	9300      	str	r3, [sp, #0]
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	68ba      	ldr	r2, [r7, #8]
 80102c0:	68f9      	ldr	r1, [r7, #12]
 80102c2:	6978      	ldr	r0, [r7, #20]
 80102c4:	f7ff fee2 	bl	801008c <lwip_poll_should_wake>
 80102c8:	6138      	str	r0, [r7, #16]
 80102ca:	e065      	b.n	8010398 <select_check_waiters+0x10c>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d01c      	beq.n	801030c <select_check_waiters+0x80>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	689b      	ldr	r3, [r3, #8]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d018      	beq.n	801030c <select_check_waiters+0x80>
 80102da:	697b      	ldr	r3, [r7, #20]
 80102dc:	689a      	ldr	r2, [r3, #8]
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	da00      	bge.n	80102e6 <select_check_waiters+0x5a>
 80102e4:	331f      	adds	r3, #31
 80102e6:	115b      	asrs	r3, r3, #5
 80102e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	4259      	negs	r1, r3
 80102f0:	f003 031f 	and.w	r3, r3, #31
 80102f4:	f001 011f 	and.w	r1, r1, #31
 80102f8:	bf58      	it	pl
 80102fa:	424b      	negpl	r3, r1
 80102fc:	fa22 f303 	lsr.w	r3, r2, r3
 8010300:	f003 0301 	and.w	r3, r3, #1
 8010304:	2b00      	cmp	r3, #0
 8010306:	d001      	beq.n	801030c <select_check_waiters+0x80>
            do_signal = 1;
 8010308:	2301      	movs	r3, #1
 801030a:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d01f      	beq.n	8010352 <select_check_waiters+0xc6>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 8010312:	693b      	ldr	r3, [r7, #16]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d11c      	bne.n	8010352 <select_check_waiters+0xc6>
 8010318:	697b      	ldr	r3, [r7, #20]
 801031a:	68db      	ldr	r3, [r3, #12]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d018      	beq.n	8010352 <select_check_waiters+0xc6>
 8010320:	697b      	ldr	r3, [r7, #20]
 8010322:	68da      	ldr	r2, [r3, #12]
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	2b00      	cmp	r3, #0
 8010328:	da00      	bge.n	801032c <select_check_waiters+0xa0>
 801032a:	331f      	adds	r3, #31
 801032c:	115b      	asrs	r3, r3, #5
 801032e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	4259      	negs	r1, r3
 8010336:	f003 031f 	and.w	r3, r3, #31
 801033a:	f001 011f 	and.w	r1, r1, #31
 801033e:	bf58      	it	pl
 8010340:	424b      	negpl	r3, r1
 8010342:	fa22 f303 	lsr.w	r3, r2, r3
 8010346:	f003 0301 	and.w	r3, r3, #1
 801034a:	2b00      	cmp	r3, #0
 801034c:	d001      	beq.n	8010352 <select_check_waiters+0xc6>
            do_signal = 1;
 801034e:	2301      	movs	r3, #1
 8010350:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 8010352:	683b      	ldr	r3, [r7, #0]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d01f      	beq.n	8010398 <select_check_waiters+0x10c>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 8010358:	693b      	ldr	r3, [r7, #16]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d11c      	bne.n	8010398 <select_check_waiters+0x10c>
 801035e:	697b      	ldr	r3, [r7, #20]
 8010360:	691b      	ldr	r3, [r3, #16]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d018      	beq.n	8010398 <select_check_waiters+0x10c>
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	691a      	ldr	r2, [r3, #16]
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	2b00      	cmp	r3, #0
 801036e:	da00      	bge.n	8010372 <select_check_waiters+0xe6>
 8010370:	331f      	adds	r3, #31
 8010372:	115b      	asrs	r3, r3, #5
 8010374:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	4259      	negs	r1, r3
 801037c:	f003 031f 	and.w	r3, r3, #31
 8010380:	f001 011f 	and.w	r1, r1, #31
 8010384:	bf58      	it	pl
 8010386:	424b      	negpl	r3, r1
 8010388:	fa22 f303 	lsr.w	r3, r2, r3
 801038c:	f003 0301 	and.w	r3, r3, #1
 8010390:	2b00      	cmp	r3, #0
 8010392:	d001      	beq.n	8010398 <select_check_waiters+0x10c>
            do_signal = 1;
 8010394:	2301      	movs	r3, #1
 8010396:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 8010398:	693b      	ldr	r3, [r7, #16]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d007      	beq.n	80103ae <select_check_waiters+0x122>
        scb->sem_signalled = 1;
 801039e:	697b      	ldr	r3, [r7, #20]
 80103a0:	2201      	movs	r2, #1
 80103a2:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 80103a4:	697b      	ldr	r3, [r7, #20]
 80103a6:	3320      	adds	r3, #32
 80103a8:	4618      	mov	r0, r3
 80103aa:	f00b f92d 	bl	801b608 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 80103ae:	697b      	ldr	r3, [r7, #20]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	617b      	str	r3, [r7, #20]
 80103b4:	697b      	ldr	r3, [r7, #20]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	f47f af73 	bne.w	80102a2 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 80103bc:	bf00      	nop
 80103be:	bf00      	nop
 80103c0:	3718      	adds	r7, #24
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}
 80103c6:	bf00      	nop
 80103c8:	2000d924 	.word	0x2000d924

080103cc <lwip_fcntl>:
 * The flag O_NONBLOCK and access modes are supported for F_GETFL, only
 * the flag O_NONBLOCK is implemented for F_SETFL.
 */
int
lwip_fcntl(int s, int cmd, int val)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b08c      	sub	sp, #48	; 0x30
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	60f8      	str	r0, [r7, #12]
 80103d4:	60b9      	str	r1, [r7, #8]
 80103d6:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock = get_socket(s);
 80103d8:	68f8      	ldr	r0, [r7, #12]
 80103da:	f7fe fddb 	bl	800ef94 <get_socket>
 80103de:	6278      	str	r0, [r7, #36]	; 0x24
  int ret = -1;
 80103e0:	f04f 33ff 	mov.w	r3, #4294967295
 80103e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int op_mode = 0;
 80103e6:	2300      	movs	r3, #0
 80103e8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (!sock) {
 80103ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d102      	bne.n	80103f6 <lwip_fcntl+0x2a>
    return -1;
 80103f0:	f04f 33ff 	mov.w	r3, #4294967295
 80103f4:	e08b      	b.n	801050e <lwip_fcntl+0x142>
  }

  switch (cmd) {
 80103f6:	68bb      	ldr	r3, [r7, #8]
 80103f8:	2b03      	cmp	r3, #3
 80103fa:	d003      	beq.n	8010404 <lwip_fcntl+0x38>
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	2b04      	cmp	r3, #4
 8010400:	d043      	beq.n	801048a <lwip_fcntl+0xbe>
 8010402:	e077      	b.n	80104f4 <lwip_fcntl+0x128>
    case F_GETFL:
      ret = netconn_is_nonblocking(sock->conn) ? O_NONBLOCK : 0;
 8010404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	7f1b      	ldrb	r3, [r3, #28]
 801040a:	105b      	asrs	r3, r3, #1
 801040c:	f003 0301 	and.w	r3, r3, #1
 8010410:	62fb      	str	r3, [r7, #44]	; 0x2c
      sock_set_errno(sock, 0);
 8010412:	2300      	movs	r3, #0
 8010414:	61bb      	str	r3, [r7, #24]
 8010416:	69bb      	ldr	r3, [r7, #24]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d002      	beq.n	8010422 <lwip_fcntl+0x56>
 801041c:	4a3e      	ldr	r2, [pc, #248]	; (8010518 <lwip_fcntl+0x14c>)
 801041e:	69bb      	ldr	r3, [r7, #24]
 8010420:	6013      	str	r3, [r2, #0]

      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8010422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	781b      	ldrb	r3, [r3, #0]
 8010428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801042c:	2b10      	cmp	r3, #16
 801042e:	d123      	bne.n	8010478 <lwip_fcntl+0xac>
#if LWIP_TCPIP_CORE_LOCKING
        LOCK_TCPIP_CORE();
 8010430:	483a      	ldr	r0, [pc, #232]	; (801051c <lwip_fcntl+0x150>)
 8010432:	f00b f943 	bl	801b6bc <sys_mutex_lock>
        /* the proper thing to do here would be to get into the tcpip_thread,
           but locking should be OK as well since we only *read* some flags */
        SYS_ARCH_PROTECT(lev);
#endif
#if LWIP_TCP
        if (sock->conn->pcb.tcp) {
 8010436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	685b      	ldr	r3, [r3, #4]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d017      	beq.n	8010470 <lwip_fcntl+0xa4>
          if (!(sock->conn->pcb.tcp->flags & TF_RXCLOSED)) {
 8010440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	685b      	ldr	r3, [r3, #4]
 8010446:	8b5b      	ldrh	r3, [r3, #26]
 8010448:	f003 0310 	and.w	r3, r3, #16
 801044c:	2b00      	cmp	r3, #0
 801044e:	d103      	bne.n	8010458 <lwip_fcntl+0x8c>
            op_mode |= O_RDONLY;
 8010450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010452:	f043 0302 	orr.w	r3, r3, #2
 8010456:	62bb      	str	r3, [r7, #40]	; 0x28
          }
          if (!(sock->conn->pcb.tcp->flags & TF_FIN)) {
 8010458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	685b      	ldr	r3, [r3, #4]
 801045e:	8b5b      	ldrh	r3, [r3, #26]
 8010460:	f003 0320 	and.w	r3, r3, #32
 8010464:	2b00      	cmp	r3, #0
 8010466:	d103      	bne.n	8010470 <lwip_fcntl+0xa4>
            op_mode |= O_WRONLY;
 8010468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801046a:	f043 0304 	orr.w	r3, r3, #4
 801046e:	62bb      	str	r3, [r7, #40]	; 0x28
          }
        }
#endif
#if LWIP_TCPIP_CORE_LOCKING
        UNLOCK_TCPIP_CORE();
 8010470:	482a      	ldr	r0, [pc, #168]	; (801051c <lwip_fcntl+0x150>)
 8010472:	f00b f932 	bl	801b6da <sys_mutex_unlock>
 8010476:	e003      	b.n	8010480 <lwip_fcntl+0xb4>
#else
        SYS_ARCH_UNPROTECT(lev);
#endif
      } else {
        op_mode |= O_RDWR;
 8010478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801047a:	f043 0306 	orr.w	r3, r3, #6
 801047e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* ensure O_RDWR for (O_RDONLY|O_WRONLY) != O_RDWR cases */
      ret |= (op_mode == (O_RDONLY | O_WRONLY)) ? O_RDWR : op_mode;
 8010480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010484:	4313      	orrs	r3, r2
 8010486:	62fb      	str	r3, [r7, #44]	; 0x2c

      break;
 8010488:	e040      	b.n	801050c <lwip_fcntl+0x140>
    case F_SETFL:
      /* Bits corresponding to the file access mode and the file creation flags [..] that are set in arg shall be ignored */
      val &= ~(O_RDONLY | O_WRONLY | O_RDWR);
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	f023 0306 	bic.w	r3, r3, #6
 8010490:	607b      	str	r3, [r7, #4]
      if ((val & ~O_NONBLOCK) == 0) {
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f023 0301 	bic.w	r3, r3, #1
 8010498:	2b00      	cmp	r3, #0
 801049a:	d122      	bne.n	80104e2 <lwip_fcntl+0x116>
        /* only O_NONBLOCK, all other bits are zero */
        netconn_set_nonblocking(sock->conn, val & O_NONBLOCK);
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f003 0301 	and.w	r3, r3, #1
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d009      	beq.n	80104ba <lwip_fcntl+0xee>
 80104a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	7f1a      	ldrb	r2, [r3, #28]
 80104ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	f042 0202 	orr.w	r2, r2, #2
 80104b4:	b2d2      	uxtb	r2, r2
 80104b6:	771a      	strb	r2, [r3, #28]
 80104b8:	e008      	b.n	80104cc <lwip_fcntl+0x100>
 80104ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	7f1a      	ldrb	r2, [r3, #28]
 80104c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	f022 0202 	bic.w	r2, r2, #2
 80104c8:	b2d2      	uxtb	r2, r2
 80104ca:	771a      	strb	r2, [r3, #28]
        ret = 0;
 80104cc:	2300      	movs	r3, #0
 80104ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        sock_set_errno(sock, 0);
 80104d0:	2300      	movs	r3, #0
 80104d2:	61fb      	str	r3, [r7, #28]
 80104d4:	69fb      	ldr	r3, [r7, #28]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d015      	beq.n	8010506 <lwip_fcntl+0x13a>
 80104da:	4a0f      	ldr	r2, [pc, #60]	; (8010518 <lwip_fcntl+0x14c>)
 80104dc:	69fb      	ldr	r3, [r7, #28]
 80104de:	6013      	str	r3, [r2, #0]
      } else {
        sock_set_errno(sock, ENOSYS); /* not yet implemented */
      }
      break;
 80104e0:	e011      	b.n	8010506 <lwip_fcntl+0x13a>
        sock_set_errno(sock, ENOSYS); /* not yet implemented */
 80104e2:	2326      	movs	r3, #38	; 0x26
 80104e4:	623b      	str	r3, [r7, #32]
 80104e6:	6a3b      	ldr	r3, [r7, #32]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d00c      	beq.n	8010506 <lwip_fcntl+0x13a>
 80104ec:	4a0a      	ldr	r2, [pc, #40]	; (8010518 <lwip_fcntl+0x14c>)
 80104ee:	6a3b      	ldr	r3, [r7, #32]
 80104f0:	6013      	str	r3, [r2, #0]
      break;
 80104f2:	e008      	b.n	8010506 <lwip_fcntl+0x13a>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_fcntl(%d, UNIMPL: %d, %d)\n", s, cmd, val));
      sock_set_errno(sock, ENOSYS); /* not yet implemented */
 80104f4:	2326      	movs	r3, #38	; 0x26
 80104f6:	617b      	str	r3, [r7, #20]
 80104f8:	697b      	ldr	r3, [r7, #20]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d005      	beq.n	801050a <lwip_fcntl+0x13e>
 80104fe:	4a06      	ldr	r2, [pc, #24]	; (8010518 <lwip_fcntl+0x14c>)
 8010500:	697b      	ldr	r3, [r7, #20]
 8010502:	6013      	str	r3, [r2, #0]
      break;
 8010504:	e001      	b.n	801050a <lwip_fcntl+0x13e>
      break;
 8010506:	bf00      	nop
 8010508:	e000      	b.n	801050c <lwip_fcntl+0x140>
      break;
 801050a:	bf00      	nop
  }
  done_socket(sock);
  return ret;
 801050c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801050e:	4618      	mov	r0, r3
 8010510:	3730      	adds	r7, #48	; 0x30
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}
 8010516:	bf00      	nop
 8010518:	200111e8 	.word	0x200111e8
 801051c:	2000d934 	.word	0x2000d934

08010520 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b084      	sub	sp, #16
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
 8010528:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801052a:	f008 f96d 	bl	8018808 <sys_timeouts_sleeptime>
 801052e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010536:	d10b      	bne.n	8010550 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8010538:	4813      	ldr	r0, [pc, #76]	; (8010588 <tcpip_timeouts_mbox_fetch+0x68>)
 801053a:	f00b f8ce 	bl	801b6da <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801053e:	2200      	movs	r2, #0
 8010540:	6839      	ldr	r1, [r7, #0]
 8010542:	6878      	ldr	r0, [r7, #4]
 8010544:	f00a ffa4 	bl	801b490 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8010548:	480f      	ldr	r0, [pc, #60]	; (8010588 <tcpip_timeouts_mbox_fetch+0x68>)
 801054a:	f00b f8b7 	bl	801b6bc <sys_mutex_lock>
    return;
 801054e:	e018      	b.n	8010582 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d102      	bne.n	801055c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8010556:	f008 f91d 	bl	8018794 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801055a:	e7e6      	b.n	801052a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801055c:	480a      	ldr	r0, [pc, #40]	; (8010588 <tcpip_timeouts_mbox_fetch+0x68>)
 801055e:	f00b f8bc 	bl	801b6da <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8010562:	68fa      	ldr	r2, [r7, #12]
 8010564:	6839      	ldr	r1, [r7, #0]
 8010566:	6878      	ldr	r0, [r7, #4]
 8010568:	f00a ff92 	bl	801b490 <sys_arch_mbox_fetch>
 801056c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801056e:	4806      	ldr	r0, [pc, #24]	; (8010588 <tcpip_timeouts_mbox_fetch+0x68>)
 8010570:	f00b f8a4 	bl	801b6bc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	f1b3 3fff 	cmp.w	r3, #4294967295
 801057a:	d102      	bne.n	8010582 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801057c:	f008 f90a 	bl	8018794 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010580:	e7d3      	b.n	801052a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8010582:	3710      	adds	r7, #16
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}
 8010588:	2000d934 	.word	0x2000d934

0801058c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b084      	sub	sp, #16
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8010594:	4810      	ldr	r0, [pc, #64]	; (80105d8 <tcpip_thread+0x4c>)
 8010596:	f00b f891 	bl	801b6bc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801059a:	4b10      	ldr	r3, [pc, #64]	; (80105dc <tcpip_thread+0x50>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d005      	beq.n	80105ae <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80105a2:	4b0e      	ldr	r3, [pc, #56]	; (80105dc <tcpip_thread+0x50>)
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	4a0e      	ldr	r2, [pc, #56]	; (80105e0 <tcpip_thread+0x54>)
 80105a8:	6812      	ldr	r2, [r2, #0]
 80105aa:	4610      	mov	r0, r2
 80105ac:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80105ae:	f107 030c 	add.w	r3, r7, #12
 80105b2:	4619      	mov	r1, r3
 80105b4:	480b      	ldr	r0, [pc, #44]	; (80105e4 <tcpip_thread+0x58>)
 80105b6:	f7ff ffb3 	bl	8010520 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d106      	bne.n	80105ce <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80105c0:	4b09      	ldr	r3, [pc, #36]	; (80105e8 <tcpip_thread+0x5c>)
 80105c2:	2291      	movs	r2, #145	; 0x91
 80105c4:	4909      	ldr	r1, [pc, #36]	; (80105ec <tcpip_thread+0x60>)
 80105c6:	480a      	ldr	r0, [pc, #40]	; (80105f0 <tcpip_thread+0x64>)
 80105c8:	f00b f91c 	bl	801b804 <iprintf>
      continue;
 80105cc:	e003      	b.n	80105d6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	4618      	mov	r0, r3
 80105d2:	f000 f80f 	bl	80105f4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80105d6:	e7ea      	b.n	80105ae <tcpip_thread+0x22>
 80105d8:	2000d934 	.word	0x2000d934
 80105dc:	2000d928 	.word	0x2000d928
 80105e0:	2000d92c 	.word	0x2000d92c
 80105e4:	2000d930 	.word	0x2000d930
 80105e8:	0801d994 	.word	0x0801d994
 80105ec:	0801d9c4 	.word	0x0801d9c4
 80105f0:	0801d9e4 	.word	0x0801d9e4

080105f4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b082      	sub	sp, #8
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	781b      	ldrb	r3, [r3, #0]
 8010600:	2b02      	cmp	r3, #2
 8010602:	d026      	beq.n	8010652 <tcpip_thread_handle_msg+0x5e>
 8010604:	2b02      	cmp	r3, #2
 8010606:	dc2b      	bgt.n	8010660 <tcpip_thread_handle_msg+0x6c>
 8010608:	2b00      	cmp	r3, #0
 801060a:	d002      	beq.n	8010612 <tcpip_thread_handle_msg+0x1e>
 801060c:	2b01      	cmp	r3, #1
 801060e:	d015      	beq.n	801063c <tcpip_thread_handle_msg+0x48>
 8010610:	e026      	b.n	8010660 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	68db      	ldr	r3, [r3, #12]
 8010616:	687a      	ldr	r2, [r7, #4]
 8010618:	6850      	ldr	r0, [r2, #4]
 801061a:	687a      	ldr	r2, [r7, #4]
 801061c:	6892      	ldr	r2, [r2, #8]
 801061e:	4611      	mov	r1, r2
 8010620:	4798      	blx	r3
 8010622:	4603      	mov	r3, r0
 8010624:	2b00      	cmp	r3, #0
 8010626:	d004      	beq.n	8010632 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	685b      	ldr	r3, [r3, #4]
 801062c:	4618      	mov	r0, r3
 801062e:	f001 fd53 	bl	80120d8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8010632:	6879      	ldr	r1, [r7, #4]
 8010634:	2009      	movs	r0, #9
 8010636:	f000 fe79 	bl	801132c <memp_free>
      break;
 801063a:	e018      	b.n	801066e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	685b      	ldr	r3, [r3, #4]
 8010640:	687a      	ldr	r2, [r7, #4]
 8010642:	6892      	ldr	r2, [r2, #8]
 8010644:	4610      	mov	r0, r2
 8010646:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8010648:	6879      	ldr	r1, [r7, #4]
 801064a:	2008      	movs	r0, #8
 801064c:	f000 fe6e 	bl	801132c <memp_free>
      break;
 8010650:	e00d      	b.n	801066e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	685b      	ldr	r3, [r3, #4]
 8010656:	687a      	ldr	r2, [r7, #4]
 8010658:	6892      	ldr	r2, [r2, #8]
 801065a:	4610      	mov	r0, r2
 801065c:	4798      	blx	r3
      break;
 801065e:	e006      	b.n	801066e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010660:	4b05      	ldr	r3, [pc, #20]	; (8010678 <tcpip_thread_handle_msg+0x84>)
 8010662:	22cf      	movs	r2, #207	; 0xcf
 8010664:	4905      	ldr	r1, [pc, #20]	; (801067c <tcpip_thread_handle_msg+0x88>)
 8010666:	4806      	ldr	r0, [pc, #24]	; (8010680 <tcpip_thread_handle_msg+0x8c>)
 8010668:	f00b f8cc 	bl	801b804 <iprintf>
      break;
 801066c:	bf00      	nop
  }
}
 801066e:	bf00      	nop
 8010670:	3708      	adds	r7, #8
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}
 8010676:	bf00      	nop
 8010678:	0801d994 	.word	0x0801d994
 801067c:	0801d9c4 	.word	0x0801d9c4
 8010680:	0801d9e4 	.word	0x0801d9e4

08010684 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b086      	sub	sp, #24
 8010688:	af00      	add	r7, sp, #0
 801068a:	60f8      	str	r0, [r7, #12]
 801068c:	60b9      	str	r1, [r7, #8]
 801068e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010690:	481a      	ldr	r0, [pc, #104]	; (80106fc <tcpip_inpkt+0x78>)
 8010692:	f00a ff45 	bl	801b520 <sys_mbox_valid>
 8010696:	4603      	mov	r3, r0
 8010698:	2b00      	cmp	r3, #0
 801069a:	d105      	bne.n	80106a8 <tcpip_inpkt+0x24>
 801069c:	4b18      	ldr	r3, [pc, #96]	; (8010700 <tcpip_inpkt+0x7c>)
 801069e:	22fc      	movs	r2, #252	; 0xfc
 80106a0:	4918      	ldr	r1, [pc, #96]	; (8010704 <tcpip_inpkt+0x80>)
 80106a2:	4819      	ldr	r0, [pc, #100]	; (8010708 <tcpip_inpkt+0x84>)
 80106a4:	f00b f8ae 	bl	801b804 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80106a8:	2009      	movs	r0, #9
 80106aa:	f000 fdc9 	bl	8011240 <memp_malloc>
 80106ae:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80106b0:	697b      	ldr	r3, [r7, #20]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d102      	bne.n	80106bc <tcpip_inpkt+0x38>
    return ERR_MEM;
 80106b6:	f04f 33ff 	mov.w	r3, #4294967295
 80106ba:	e01a      	b.n	80106f2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	2200      	movs	r2, #0
 80106c0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80106c2:	697b      	ldr	r3, [r7, #20]
 80106c4:	68fa      	ldr	r2, [r7, #12]
 80106c6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80106c8:	697b      	ldr	r3, [r7, #20]
 80106ca:	68ba      	ldr	r2, [r7, #8]
 80106cc:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	687a      	ldr	r2, [r7, #4]
 80106d2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80106d4:	6979      	ldr	r1, [r7, #20]
 80106d6:	4809      	ldr	r0, [pc, #36]	; (80106fc <tcpip_inpkt+0x78>)
 80106d8:	f00a fec0 	bl	801b45c <sys_mbox_trypost>
 80106dc:	4603      	mov	r3, r0
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d006      	beq.n	80106f0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80106e2:	6979      	ldr	r1, [r7, #20]
 80106e4:	2009      	movs	r0, #9
 80106e6:	f000 fe21 	bl	801132c <memp_free>
    return ERR_MEM;
 80106ea:	f04f 33ff 	mov.w	r3, #4294967295
 80106ee:	e000      	b.n	80106f2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80106f0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80106f2:	4618      	mov	r0, r3
 80106f4:	3718      	adds	r7, #24
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}
 80106fa:	bf00      	nop
 80106fc:	2000d930 	.word	0x2000d930
 8010700:	0801d994 	.word	0x0801d994
 8010704:	0801da0c 	.word	0x0801da0c
 8010708:	0801d9e4 	.word	0x0801d9e4

0801070c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b082      	sub	sp, #8
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801071c:	f003 0318 	and.w	r3, r3, #24
 8010720:	2b00      	cmp	r3, #0
 8010722:	d006      	beq.n	8010732 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8010724:	4a08      	ldr	r2, [pc, #32]	; (8010748 <tcpip_input+0x3c>)
 8010726:	6839      	ldr	r1, [r7, #0]
 8010728:	6878      	ldr	r0, [r7, #4]
 801072a:	f7ff ffab 	bl	8010684 <tcpip_inpkt>
 801072e:	4603      	mov	r3, r0
 8010730:	e005      	b.n	801073e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8010732:	4a06      	ldr	r2, [pc, #24]	; (801074c <tcpip_input+0x40>)
 8010734:	6839      	ldr	r1, [r7, #0]
 8010736:	6878      	ldr	r0, [r7, #4]
 8010738:	f7ff ffa4 	bl	8010684 <tcpip_inpkt>
 801073c:	4603      	mov	r3, r0
}
 801073e:	4618      	mov	r0, r3
 8010740:	3708      	adds	r7, #8
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}
 8010746:	bf00      	nop
 8010748:	0801b259 	.word	0x0801b259
 801074c:	0801a161 	.word	0x0801a161

08010750 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b084      	sub	sp, #16
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
 8010758:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801075a:	4819      	ldr	r0, [pc, #100]	; (80107c0 <tcpip_try_callback+0x70>)
 801075c:	f00a fee0 	bl	801b520 <sys_mbox_valid>
 8010760:	4603      	mov	r3, r0
 8010762:	2b00      	cmp	r3, #0
 8010764:	d106      	bne.n	8010774 <tcpip_try_callback+0x24>
 8010766:	4b17      	ldr	r3, [pc, #92]	; (80107c4 <tcpip_try_callback+0x74>)
 8010768:	f240 125d 	movw	r2, #349	; 0x15d
 801076c:	4916      	ldr	r1, [pc, #88]	; (80107c8 <tcpip_try_callback+0x78>)
 801076e:	4817      	ldr	r0, [pc, #92]	; (80107cc <tcpip_try_callback+0x7c>)
 8010770:	f00b f848 	bl	801b804 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8010774:	2008      	movs	r0, #8
 8010776:	f000 fd63 	bl	8011240 <memp_malloc>
 801077a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d102      	bne.n	8010788 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8010782:	f04f 33ff 	mov.w	r3, #4294967295
 8010786:	e017      	b.n	80107b8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	2201      	movs	r2, #1
 801078c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	687a      	ldr	r2, [r7, #4]
 8010792:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	683a      	ldr	r2, [r7, #0]
 8010798:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801079a:	68f9      	ldr	r1, [r7, #12]
 801079c:	4808      	ldr	r0, [pc, #32]	; (80107c0 <tcpip_try_callback+0x70>)
 801079e:	f00a fe5d 	bl	801b45c <sys_mbox_trypost>
 80107a2:	4603      	mov	r3, r0
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d006      	beq.n	80107b6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80107a8:	68f9      	ldr	r1, [r7, #12]
 80107aa:	2008      	movs	r0, #8
 80107ac:	f000 fdbe 	bl	801132c <memp_free>
    return ERR_MEM;
 80107b0:	f04f 33ff 	mov.w	r3, #4294967295
 80107b4:	e000      	b.n	80107b8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80107b6:	2300      	movs	r3, #0
}
 80107b8:	4618      	mov	r0, r3
 80107ba:	3710      	adds	r7, #16
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd80      	pop	{r7, pc}
 80107c0:	2000d930 	.word	0x2000d930
 80107c4:	0801d994 	.word	0x0801d994
 80107c8:	0801da0c 	.word	0x0801da0c
 80107cc:	0801d9e4 	.word	0x0801d9e4

080107d0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b084      	sub	sp, #16
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	60f8      	str	r0, [r7, #12]
 80107d8:	60b9      	str	r1, [r7, #8]
 80107da:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80107dc:	4806      	ldr	r0, [pc, #24]	; (80107f8 <tcpip_send_msg_wait_sem+0x28>)
 80107de:	f00a ff6d 	bl	801b6bc <sys_mutex_lock>
  fn(apimsg);
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	68b8      	ldr	r0, [r7, #8]
 80107e6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80107e8:	4803      	ldr	r0, [pc, #12]	; (80107f8 <tcpip_send_msg_wait_sem+0x28>)
 80107ea:	f00a ff76 	bl	801b6da <sys_mutex_unlock>
  return ERR_OK;
 80107ee:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80107f0:	4618      	mov	r0, r3
 80107f2:	3710      	adds	r7, #16
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}
 80107f8:	2000d934 	.word	0x2000d934

080107fc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b084      	sub	sp, #16
 8010800:	af02      	add	r7, sp, #8
 8010802:	6078      	str	r0, [r7, #4]
 8010804:	6039      	str	r1, [r7, #0]
  lwip_init();
 8010806:	f000 f871 	bl	80108ec <lwip_init>

  tcpip_init_done = initfunc;
 801080a:	4a17      	ldr	r2, [pc, #92]	; (8010868 <tcpip_init+0x6c>)
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8010810:	4a16      	ldr	r2, [pc, #88]	; (801086c <tcpip_init+0x70>)
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8010816:	2106      	movs	r1, #6
 8010818:	4815      	ldr	r0, [pc, #84]	; (8010870 <tcpip_init+0x74>)
 801081a:	f00a fdf3 	bl	801b404 <sys_mbox_new>
 801081e:	4603      	mov	r3, r0
 8010820:	2b00      	cmp	r3, #0
 8010822:	d006      	beq.n	8010832 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8010824:	4b13      	ldr	r3, [pc, #76]	; (8010874 <tcpip_init+0x78>)
 8010826:	f240 2261 	movw	r2, #609	; 0x261
 801082a:	4913      	ldr	r1, [pc, #76]	; (8010878 <tcpip_init+0x7c>)
 801082c:	4813      	ldr	r0, [pc, #76]	; (801087c <tcpip_init+0x80>)
 801082e:	f00a ffe9 	bl	801b804 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8010832:	4813      	ldr	r0, [pc, #76]	; (8010880 <tcpip_init+0x84>)
 8010834:	f00a ff2c 	bl	801b690 <sys_mutex_new>
 8010838:	4603      	mov	r3, r0
 801083a:	2b00      	cmp	r3, #0
 801083c:	d006      	beq.n	801084c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801083e:	4b0d      	ldr	r3, [pc, #52]	; (8010874 <tcpip_init+0x78>)
 8010840:	f240 2265 	movw	r2, #613	; 0x265
 8010844:	490f      	ldr	r1, [pc, #60]	; (8010884 <tcpip_init+0x88>)
 8010846:	480d      	ldr	r0, [pc, #52]	; (801087c <tcpip_init+0x80>)
 8010848:	f00a ffdc 	bl	801b804 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801084c:	2318      	movs	r3, #24
 801084e:	9300      	str	r3, [sp, #0]
 8010850:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010854:	2200      	movs	r2, #0
 8010856:	490c      	ldr	r1, [pc, #48]	; (8010888 <tcpip_init+0x8c>)
 8010858:	480c      	ldr	r0, [pc, #48]	; (801088c <tcpip_init+0x90>)
 801085a:	f00a ff4b 	bl	801b6f4 <sys_thread_new>
}
 801085e:	bf00      	nop
 8010860:	3708      	adds	r7, #8
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}
 8010866:	bf00      	nop
 8010868:	2000d928 	.word	0x2000d928
 801086c:	2000d92c 	.word	0x2000d92c
 8010870:	2000d930 	.word	0x2000d930
 8010874:	0801d994 	.word	0x0801d994
 8010878:	0801da1c 	.word	0x0801da1c
 801087c:	0801d9e4 	.word	0x0801d9e4
 8010880:	2000d934 	.word	0x2000d934
 8010884:	0801da40 	.word	0x0801da40
 8010888:	0801058d 	.word	0x0801058d
 801088c:	0801da64 	.word	0x0801da64

08010890 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8010890:	b480      	push	{r7}
 8010892:	b083      	sub	sp, #12
 8010894:	af00      	add	r7, sp, #0
 8010896:	4603      	mov	r3, r0
 8010898:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801089a:	88fb      	ldrh	r3, [r7, #6]
 801089c:	021b      	lsls	r3, r3, #8
 801089e:	b21a      	sxth	r2, r3
 80108a0:	88fb      	ldrh	r3, [r7, #6]
 80108a2:	0a1b      	lsrs	r3, r3, #8
 80108a4:	b29b      	uxth	r3, r3
 80108a6:	b21b      	sxth	r3, r3
 80108a8:	4313      	orrs	r3, r2
 80108aa:	b21b      	sxth	r3, r3
 80108ac:	b29b      	uxth	r3, r3
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	370c      	adds	r7, #12
 80108b2:	46bd      	mov	sp, r7
 80108b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b8:	4770      	bx	lr

080108ba <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80108ba:	b480      	push	{r7}
 80108bc:	b083      	sub	sp, #12
 80108be:	af00      	add	r7, sp, #0
 80108c0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	061a      	lsls	r2, r3, #24
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	021b      	lsls	r3, r3, #8
 80108ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80108ce:	431a      	orrs	r2, r3
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	0a1b      	lsrs	r3, r3, #8
 80108d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80108d8:	431a      	orrs	r2, r3
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	0e1b      	lsrs	r3, r3, #24
 80108de:	4313      	orrs	r3, r2
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	370c      	adds	r7, #12
 80108e4:	46bd      	mov	sp, r7
 80108e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ea:	4770      	bx	lr

080108ec <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b082      	sub	sp, #8
 80108f0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80108f2:	2300      	movs	r3, #0
 80108f4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80108f6:	f00a febf 	bl	801b678 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80108fa:	f000 f8d5 	bl	8010aa8 <mem_init>
  memp_init();
 80108fe:	f000 fc31 	bl	8011164 <memp_init>
  pbuf_init();
  netif_init();
 8010902:	f000 fd3d 	bl	8011380 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8010906:	f007 ffb7 	bl	8018878 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801090a:	f001 fe7f 	bl	801260c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801090e:	f007 fef9 	bl	8018704 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8010912:	bf00      	nop
 8010914:	3708      	adds	r7, #8
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}
	...

0801091c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801091c:	b480      	push	{r7}
 801091e:	b083      	sub	sp, #12
 8010920:	af00      	add	r7, sp, #0
 8010922:	4603      	mov	r3, r0
 8010924:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8010926:	4b05      	ldr	r3, [pc, #20]	; (801093c <ptr_to_mem+0x20>)
 8010928:	681a      	ldr	r2, [r3, #0]
 801092a:	88fb      	ldrh	r3, [r7, #6]
 801092c:	4413      	add	r3, r2
}
 801092e:	4618      	mov	r0, r3
 8010930:	370c      	adds	r7, #12
 8010932:	46bd      	mov	sp, r7
 8010934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010938:	4770      	bx	lr
 801093a:	bf00      	nop
 801093c:	2000dfa4 	.word	0x2000dfa4

08010940 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8010940:	b480      	push	{r7}
 8010942:	b083      	sub	sp, #12
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8010948:	4b05      	ldr	r3, [pc, #20]	; (8010960 <mem_to_ptr+0x20>)
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	687a      	ldr	r2, [r7, #4]
 801094e:	1ad3      	subs	r3, r2, r3
 8010950:	b29b      	uxth	r3, r3
}
 8010952:	4618      	mov	r0, r3
 8010954:	370c      	adds	r7, #12
 8010956:	46bd      	mov	sp, r7
 8010958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095c:	4770      	bx	lr
 801095e:	bf00      	nop
 8010960:	2000dfa4 	.word	0x2000dfa4

08010964 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8010964:	b590      	push	{r4, r7, lr}
 8010966:	b085      	sub	sp, #20
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801096c:	4b45      	ldr	r3, [pc, #276]	; (8010a84 <plug_holes+0x120>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	687a      	ldr	r2, [r7, #4]
 8010972:	429a      	cmp	r2, r3
 8010974:	d206      	bcs.n	8010984 <plug_holes+0x20>
 8010976:	4b44      	ldr	r3, [pc, #272]	; (8010a88 <plug_holes+0x124>)
 8010978:	f240 12df 	movw	r2, #479	; 0x1df
 801097c:	4943      	ldr	r1, [pc, #268]	; (8010a8c <plug_holes+0x128>)
 801097e:	4844      	ldr	r0, [pc, #272]	; (8010a90 <plug_holes+0x12c>)
 8010980:	f00a ff40 	bl	801b804 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8010984:	4b43      	ldr	r3, [pc, #268]	; (8010a94 <plug_holes+0x130>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	687a      	ldr	r2, [r7, #4]
 801098a:	429a      	cmp	r2, r3
 801098c:	d306      	bcc.n	801099c <plug_holes+0x38>
 801098e:	4b3e      	ldr	r3, [pc, #248]	; (8010a88 <plug_holes+0x124>)
 8010990:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010994:	4940      	ldr	r1, [pc, #256]	; (8010a98 <plug_holes+0x134>)
 8010996:	483e      	ldr	r0, [pc, #248]	; (8010a90 <plug_holes+0x12c>)
 8010998:	f00a ff34 	bl	801b804 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	791b      	ldrb	r3, [r3, #4]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d006      	beq.n	80109b2 <plug_holes+0x4e>
 80109a4:	4b38      	ldr	r3, [pc, #224]	; (8010a88 <plug_holes+0x124>)
 80109a6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80109aa:	493c      	ldr	r1, [pc, #240]	; (8010a9c <plug_holes+0x138>)
 80109ac:	4838      	ldr	r0, [pc, #224]	; (8010a90 <plug_holes+0x12c>)
 80109ae:	f00a ff29 	bl	801b804 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	881b      	ldrh	r3, [r3, #0]
 80109b6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80109ba:	d906      	bls.n	80109ca <plug_holes+0x66>
 80109bc:	4b32      	ldr	r3, [pc, #200]	; (8010a88 <plug_holes+0x124>)
 80109be:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80109c2:	4937      	ldr	r1, [pc, #220]	; (8010aa0 <plug_holes+0x13c>)
 80109c4:	4832      	ldr	r0, [pc, #200]	; (8010a90 <plug_holes+0x12c>)
 80109c6:	f00a ff1d 	bl	801b804 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	881b      	ldrh	r3, [r3, #0]
 80109ce:	4618      	mov	r0, r3
 80109d0:	f7ff ffa4 	bl	801091c <ptr_to_mem>
 80109d4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80109d6:	687a      	ldr	r2, [r7, #4]
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	429a      	cmp	r2, r3
 80109dc:	d024      	beq.n	8010a28 <plug_holes+0xc4>
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	791b      	ldrb	r3, [r3, #4]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d120      	bne.n	8010a28 <plug_holes+0xc4>
 80109e6:	4b2b      	ldr	r3, [pc, #172]	; (8010a94 <plug_holes+0x130>)
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	68fa      	ldr	r2, [r7, #12]
 80109ec:	429a      	cmp	r2, r3
 80109ee:	d01b      	beq.n	8010a28 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80109f0:	4b2c      	ldr	r3, [pc, #176]	; (8010aa4 <plug_holes+0x140>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	68fa      	ldr	r2, [r7, #12]
 80109f6:	429a      	cmp	r2, r3
 80109f8:	d102      	bne.n	8010a00 <plug_holes+0x9c>
      lfree = mem;
 80109fa:	4a2a      	ldr	r2, [pc, #168]	; (8010aa4 <plug_holes+0x140>)
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	881a      	ldrh	r2, [r3, #0]
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	881b      	ldrh	r3, [r3, #0]
 8010a0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010a10:	d00a      	beq.n	8010a28 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	881b      	ldrh	r3, [r3, #0]
 8010a16:	4618      	mov	r0, r3
 8010a18:	f7ff ff80 	bl	801091c <ptr_to_mem>
 8010a1c:	4604      	mov	r4, r0
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f7ff ff8e 	bl	8010940 <mem_to_ptr>
 8010a24:	4603      	mov	r3, r0
 8010a26:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	885b      	ldrh	r3, [r3, #2]
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	f7ff ff75 	bl	801091c <ptr_to_mem>
 8010a32:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8010a34:	68ba      	ldr	r2, [r7, #8]
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	429a      	cmp	r2, r3
 8010a3a:	d01f      	beq.n	8010a7c <plug_holes+0x118>
 8010a3c:	68bb      	ldr	r3, [r7, #8]
 8010a3e:	791b      	ldrb	r3, [r3, #4]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d11b      	bne.n	8010a7c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8010a44:	4b17      	ldr	r3, [pc, #92]	; (8010aa4 <plug_holes+0x140>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	687a      	ldr	r2, [r7, #4]
 8010a4a:	429a      	cmp	r2, r3
 8010a4c:	d102      	bne.n	8010a54 <plug_holes+0xf0>
      lfree = pmem;
 8010a4e:	4a15      	ldr	r2, [pc, #84]	; (8010aa4 <plug_holes+0x140>)
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	881a      	ldrh	r2, [r3, #0]
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	881b      	ldrh	r3, [r3, #0]
 8010a60:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010a64:	d00a      	beq.n	8010a7c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	881b      	ldrh	r3, [r3, #0]
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f7ff ff56 	bl	801091c <ptr_to_mem>
 8010a70:	4604      	mov	r4, r0
 8010a72:	68b8      	ldr	r0, [r7, #8]
 8010a74:	f7ff ff64 	bl	8010940 <mem_to_ptr>
 8010a78:	4603      	mov	r3, r0
 8010a7a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8010a7c:	bf00      	nop
 8010a7e:	3714      	adds	r7, #20
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd90      	pop	{r4, r7, pc}
 8010a84:	2000dfa4 	.word	0x2000dfa4
 8010a88:	0801da74 	.word	0x0801da74
 8010a8c:	0801daa4 	.word	0x0801daa4
 8010a90:	0801dabc 	.word	0x0801dabc
 8010a94:	2000dfa8 	.word	0x2000dfa8
 8010a98:	0801dae4 	.word	0x0801dae4
 8010a9c:	0801db00 	.word	0x0801db00
 8010aa0:	0801db1c 	.word	0x0801db1c
 8010aa4:	2000dfb0 	.word	0x2000dfb0

08010aa8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b082      	sub	sp, #8
 8010aac:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8010aae:	4b1f      	ldr	r3, [pc, #124]	; (8010b2c <mem_init+0x84>)
 8010ab0:	3303      	adds	r3, #3
 8010ab2:	f023 0303 	bic.w	r3, r3, #3
 8010ab6:	461a      	mov	r2, r3
 8010ab8:	4b1d      	ldr	r3, [pc, #116]	; (8010b30 <mem_init+0x88>)
 8010aba:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8010abc:	4b1c      	ldr	r3, [pc, #112]	; (8010b30 <mem_init+0x88>)
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8010ac8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	2200      	movs	r2, #0
 8010ace:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8010ad6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8010ada:	f7ff ff1f 	bl	801091c <ptr_to_mem>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	4a14      	ldr	r2, [pc, #80]	; (8010b34 <mem_init+0x8c>)
 8010ae2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8010ae4:	4b13      	ldr	r3, [pc, #76]	; (8010b34 <mem_init+0x8c>)
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	2201      	movs	r2, #1
 8010aea:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8010aec:	4b11      	ldr	r3, [pc, #68]	; (8010b34 <mem_init+0x8c>)
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8010af4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8010af6:	4b0f      	ldr	r3, [pc, #60]	; (8010b34 <mem_init+0x8c>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8010afe:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8010b00:	4b0b      	ldr	r3, [pc, #44]	; (8010b30 <mem_init+0x88>)
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	4a0c      	ldr	r2, [pc, #48]	; (8010b38 <mem_init+0x90>)
 8010b06:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8010b08:	480c      	ldr	r0, [pc, #48]	; (8010b3c <mem_init+0x94>)
 8010b0a:	f00a fdc1 	bl	801b690 <sys_mutex_new>
 8010b0e:	4603      	mov	r3, r0
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d006      	beq.n	8010b22 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8010b14:	4b0a      	ldr	r3, [pc, #40]	; (8010b40 <mem_init+0x98>)
 8010b16:	f240 221f 	movw	r2, #543	; 0x21f
 8010b1a:	490a      	ldr	r1, [pc, #40]	; (8010b44 <mem_init+0x9c>)
 8010b1c:	480a      	ldr	r0, [pc, #40]	; (8010b48 <mem_init+0xa0>)
 8010b1e:	f00a fe71 	bl	801b804 <iprintf>
  }
}
 8010b22:	bf00      	nop
 8010b24:	3708      	adds	r7, #8
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}
 8010b2a:	bf00      	nop
 8010b2c:	2000d950 	.word	0x2000d950
 8010b30:	2000dfa4 	.word	0x2000dfa4
 8010b34:	2000dfa8 	.word	0x2000dfa8
 8010b38:	2000dfb0 	.word	0x2000dfb0
 8010b3c:	2000dfac 	.word	0x2000dfac
 8010b40:	0801da74 	.word	0x0801da74
 8010b44:	0801db48 	.word	0x0801db48
 8010b48:	0801dabc 	.word	0x0801dabc

08010b4c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b086      	sub	sp, #24
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	f7ff fef3 	bl	8010940 <mem_to_ptr>
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	881b      	ldrh	r3, [r3, #0]
 8010b62:	4618      	mov	r0, r3
 8010b64:	f7ff feda 	bl	801091c <ptr_to_mem>
 8010b68:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	885b      	ldrh	r3, [r3, #2]
 8010b6e:	4618      	mov	r0, r3
 8010b70:	f7ff fed4 	bl	801091c <ptr_to_mem>
 8010b74:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	881b      	ldrh	r3, [r3, #0]
 8010b7a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010b7e:	d818      	bhi.n	8010bb2 <mem_link_valid+0x66>
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	885b      	ldrh	r3, [r3, #2]
 8010b84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010b88:	d813      	bhi.n	8010bb2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010b8e:	8afa      	ldrh	r2, [r7, #22]
 8010b90:	429a      	cmp	r2, r3
 8010b92:	d004      	beq.n	8010b9e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	881b      	ldrh	r3, [r3, #0]
 8010b98:	8afa      	ldrh	r2, [r7, #22]
 8010b9a:	429a      	cmp	r2, r3
 8010b9c:	d109      	bne.n	8010bb2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010b9e:	4b08      	ldr	r3, [pc, #32]	; (8010bc0 <mem_link_valid+0x74>)
 8010ba0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010ba2:	693a      	ldr	r2, [r7, #16]
 8010ba4:	429a      	cmp	r2, r3
 8010ba6:	d006      	beq.n	8010bb6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010ba8:	693b      	ldr	r3, [r7, #16]
 8010baa:	885b      	ldrh	r3, [r3, #2]
 8010bac:	8afa      	ldrh	r2, [r7, #22]
 8010bae:	429a      	cmp	r2, r3
 8010bb0:	d001      	beq.n	8010bb6 <mem_link_valid+0x6a>
    return 0;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	e000      	b.n	8010bb8 <mem_link_valid+0x6c>
  }
  return 1;
 8010bb6:	2301      	movs	r3, #1
}
 8010bb8:	4618      	mov	r0, r3
 8010bba:	3718      	adds	r7, #24
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	bd80      	pop	{r7, pc}
 8010bc0:	2000dfa8 	.word	0x2000dfa8

08010bc4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b088      	sub	sp, #32
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d070      	beq.n	8010cb4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	f003 0303 	and.w	r3, r3, #3
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d00d      	beq.n	8010bf8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8010bdc:	4b37      	ldr	r3, [pc, #220]	; (8010cbc <mem_free+0xf8>)
 8010bde:	f240 2273 	movw	r2, #627	; 0x273
 8010be2:	4937      	ldr	r1, [pc, #220]	; (8010cc0 <mem_free+0xfc>)
 8010be4:	4837      	ldr	r0, [pc, #220]	; (8010cc4 <mem_free+0x100>)
 8010be6:	f00a fe0d 	bl	801b804 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010bea:	f00a fda3 	bl	801b734 <sys_arch_protect>
 8010bee:	60f8      	str	r0, [r7, #12]
 8010bf0:	68f8      	ldr	r0, [r7, #12]
 8010bf2:	f00a fdad 	bl	801b750 <sys_arch_unprotect>
    return;
 8010bf6:	e05e      	b.n	8010cb6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	3b08      	subs	r3, #8
 8010bfc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8010bfe:	4b32      	ldr	r3, [pc, #200]	; (8010cc8 <mem_free+0x104>)
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	69fa      	ldr	r2, [r7, #28]
 8010c04:	429a      	cmp	r2, r3
 8010c06:	d306      	bcc.n	8010c16 <mem_free+0x52>
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	f103 020c 	add.w	r2, r3, #12
 8010c0e:	4b2f      	ldr	r3, [pc, #188]	; (8010ccc <mem_free+0x108>)
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	429a      	cmp	r2, r3
 8010c14:	d90d      	bls.n	8010c32 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8010c16:	4b29      	ldr	r3, [pc, #164]	; (8010cbc <mem_free+0xf8>)
 8010c18:	f240 227f 	movw	r2, #639	; 0x27f
 8010c1c:	492c      	ldr	r1, [pc, #176]	; (8010cd0 <mem_free+0x10c>)
 8010c1e:	4829      	ldr	r0, [pc, #164]	; (8010cc4 <mem_free+0x100>)
 8010c20:	f00a fdf0 	bl	801b804 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010c24:	f00a fd86 	bl	801b734 <sys_arch_protect>
 8010c28:	6138      	str	r0, [r7, #16]
 8010c2a:	6938      	ldr	r0, [r7, #16]
 8010c2c:	f00a fd90 	bl	801b750 <sys_arch_unprotect>
    return;
 8010c30:	e041      	b.n	8010cb6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010c32:	4828      	ldr	r0, [pc, #160]	; (8010cd4 <mem_free+0x110>)
 8010c34:	f00a fd42 	bl	801b6bc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8010c38:	69fb      	ldr	r3, [r7, #28]
 8010c3a:	791b      	ldrb	r3, [r3, #4]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d110      	bne.n	8010c62 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8010c40:	4b1e      	ldr	r3, [pc, #120]	; (8010cbc <mem_free+0xf8>)
 8010c42:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8010c46:	4924      	ldr	r1, [pc, #144]	; (8010cd8 <mem_free+0x114>)
 8010c48:	481e      	ldr	r0, [pc, #120]	; (8010cc4 <mem_free+0x100>)
 8010c4a:	f00a fddb 	bl	801b804 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8010c4e:	4821      	ldr	r0, [pc, #132]	; (8010cd4 <mem_free+0x110>)
 8010c50:	f00a fd43 	bl	801b6da <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010c54:	f00a fd6e 	bl	801b734 <sys_arch_protect>
 8010c58:	6178      	str	r0, [r7, #20]
 8010c5a:	6978      	ldr	r0, [r7, #20]
 8010c5c:	f00a fd78 	bl	801b750 <sys_arch_unprotect>
    return;
 8010c60:	e029      	b.n	8010cb6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8010c62:	69f8      	ldr	r0, [r7, #28]
 8010c64:	f7ff ff72 	bl	8010b4c <mem_link_valid>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d110      	bne.n	8010c90 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8010c6e:	4b13      	ldr	r3, [pc, #76]	; (8010cbc <mem_free+0xf8>)
 8010c70:	f240 2295 	movw	r2, #661	; 0x295
 8010c74:	4919      	ldr	r1, [pc, #100]	; (8010cdc <mem_free+0x118>)
 8010c76:	4813      	ldr	r0, [pc, #76]	; (8010cc4 <mem_free+0x100>)
 8010c78:	f00a fdc4 	bl	801b804 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8010c7c:	4815      	ldr	r0, [pc, #84]	; (8010cd4 <mem_free+0x110>)
 8010c7e:	f00a fd2c 	bl	801b6da <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010c82:	f00a fd57 	bl	801b734 <sys_arch_protect>
 8010c86:	61b8      	str	r0, [r7, #24]
 8010c88:	69b8      	ldr	r0, [r7, #24]
 8010c8a:	f00a fd61 	bl	801b750 <sys_arch_unprotect>
    return;
 8010c8e:	e012      	b.n	8010cb6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8010c90:	69fb      	ldr	r3, [r7, #28]
 8010c92:	2200      	movs	r2, #0
 8010c94:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8010c96:	4b12      	ldr	r3, [pc, #72]	; (8010ce0 <mem_free+0x11c>)
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	69fa      	ldr	r2, [r7, #28]
 8010c9c:	429a      	cmp	r2, r3
 8010c9e:	d202      	bcs.n	8010ca6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8010ca0:	4a0f      	ldr	r2, [pc, #60]	; (8010ce0 <mem_free+0x11c>)
 8010ca2:	69fb      	ldr	r3, [r7, #28]
 8010ca4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8010ca6:	69f8      	ldr	r0, [r7, #28]
 8010ca8:	f7ff fe5c 	bl	8010964 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010cac:	4809      	ldr	r0, [pc, #36]	; (8010cd4 <mem_free+0x110>)
 8010cae:	f00a fd14 	bl	801b6da <sys_mutex_unlock>
 8010cb2:	e000      	b.n	8010cb6 <mem_free+0xf2>
    return;
 8010cb4:	bf00      	nop
}
 8010cb6:	3720      	adds	r7, #32
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}
 8010cbc:	0801da74 	.word	0x0801da74
 8010cc0:	0801db64 	.word	0x0801db64
 8010cc4:	0801dabc 	.word	0x0801dabc
 8010cc8:	2000dfa4 	.word	0x2000dfa4
 8010ccc:	2000dfa8 	.word	0x2000dfa8
 8010cd0:	0801db88 	.word	0x0801db88
 8010cd4:	2000dfac 	.word	0x2000dfac
 8010cd8:	0801dba4 	.word	0x0801dba4
 8010cdc:	0801dbcc 	.word	0x0801dbcc
 8010ce0:	2000dfb0 	.word	0x2000dfb0

08010ce4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b088      	sub	sp, #32
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
 8010cec:	460b      	mov	r3, r1
 8010cee:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8010cf0:	887b      	ldrh	r3, [r7, #2]
 8010cf2:	3303      	adds	r3, #3
 8010cf4:	b29b      	uxth	r3, r3
 8010cf6:	f023 0303 	bic.w	r3, r3, #3
 8010cfa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8010cfc:	8bfb      	ldrh	r3, [r7, #30]
 8010cfe:	2b0b      	cmp	r3, #11
 8010d00:	d801      	bhi.n	8010d06 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8010d02:	230c      	movs	r3, #12
 8010d04:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8010d06:	8bfb      	ldrh	r3, [r7, #30]
 8010d08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010d0c:	d803      	bhi.n	8010d16 <mem_trim+0x32>
 8010d0e:	8bfa      	ldrh	r2, [r7, #30]
 8010d10:	887b      	ldrh	r3, [r7, #2]
 8010d12:	429a      	cmp	r2, r3
 8010d14:	d201      	bcs.n	8010d1a <mem_trim+0x36>
    return NULL;
 8010d16:	2300      	movs	r3, #0
 8010d18:	e0d8      	b.n	8010ecc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8010d1a:	4b6e      	ldr	r3, [pc, #440]	; (8010ed4 <mem_trim+0x1f0>)
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	687a      	ldr	r2, [r7, #4]
 8010d20:	429a      	cmp	r2, r3
 8010d22:	d304      	bcc.n	8010d2e <mem_trim+0x4a>
 8010d24:	4b6c      	ldr	r3, [pc, #432]	; (8010ed8 <mem_trim+0x1f4>)
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	687a      	ldr	r2, [r7, #4]
 8010d2a:	429a      	cmp	r2, r3
 8010d2c:	d306      	bcc.n	8010d3c <mem_trim+0x58>
 8010d2e:	4b6b      	ldr	r3, [pc, #428]	; (8010edc <mem_trim+0x1f8>)
 8010d30:	f240 22d1 	movw	r2, #721	; 0x2d1
 8010d34:	496a      	ldr	r1, [pc, #424]	; (8010ee0 <mem_trim+0x1fc>)
 8010d36:	486b      	ldr	r0, [pc, #428]	; (8010ee4 <mem_trim+0x200>)
 8010d38:	f00a fd64 	bl	801b804 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8010d3c:	4b65      	ldr	r3, [pc, #404]	; (8010ed4 <mem_trim+0x1f0>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	687a      	ldr	r2, [r7, #4]
 8010d42:	429a      	cmp	r2, r3
 8010d44:	d304      	bcc.n	8010d50 <mem_trim+0x6c>
 8010d46:	4b64      	ldr	r3, [pc, #400]	; (8010ed8 <mem_trim+0x1f4>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	687a      	ldr	r2, [r7, #4]
 8010d4c:	429a      	cmp	r2, r3
 8010d4e:	d307      	bcc.n	8010d60 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010d50:	f00a fcf0 	bl	801b734 <sys_arch_protect>
 8010d54:	60b8      	str	r0, [r7, #8]
 8010d56:	68b8      	ldr	r0, [r7, #8]
 8010d58:	f00a fcfa 	bl	801b750 <sys_arch_unprotect>
    return rmem;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	e0b5      	b.n	8010ecc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	3b08      	subs	r3, #8
 8010d64:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8010d66:	69b8      	ldr	r0, [r7, #24]
 8010d68:	f7ff fdea 	bl	8010940 <mem_to_ptr>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8010d70:	69bb      	ldr	r3, [r7, #24]
 8010d72:	881a      	ldrh	r2, [r3, #0]
 8010d74:	8afb      	ldrh	r3, [r7, #22]
 8010d76:	1ad3      	subs	r3, r2, r3
 8010d78:	b29b      	uxth	r3, r3
 8010d7a:	3b08      	subs	r3, #8
 8010d7c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8010d7e:	8bfa      	ldrh	r2, [r7, #30]
 8010d80:	8abb      	ldrh	r3, [r7, #20]
 8010d82:	429a      	cmp	r2, r3
 8010d84:	d906      	bls.n	8010d94 <mem_trim+0xb0>
 8010d86:	4b55      	ldr	r3, [pc, #340]	; (8010edc <mem_trim+0x1f8>)
 8010d88:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8010d8c:	4956      	ldr	r1, [pc, #344]	; (8010ee8 <mem_trim+0x204>)
 8010d8e:	4855      	ldr	r0, [pc, #340]	; (8010ee4 <mem_trim+0x200>)
 8010d90:	f00a fd38 	bl	801b804 <iprintf>
  if (newsize > size) {
 8010d94:	8bfa      	ldrh	r2, [r7, #30]
 8010d96:	8abb      	ldrh	r3, [r7, #20]
 8010d98:	429a      	cmp	r2, r3
 8010d9a:	d901      	bls.n	8010da0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	e095      	b.n	8010ecc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8010da0:	8bfa      	ldrh	r2, [r7, #30]
 8010da2:	8abb      	ldrh	r3, [r7, #20]
 8010da4:	429a      	cmp	r2, r3
 8010da6:	d101      	bne.n	8010dac <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	e08f      	b.n	8010ecc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010dac:	484f      	ldr	r0, [pc, #316]	; (8010eec <mem_trim+0x208>)
 8010dae:	f00a fc85 	bl	801b6bc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8010db2:	69bb      	ldr	r3, [r7, #24]
 8010db4:	881b      	ldrh	r3, [r3, #0]
 8010db6:	4618      	mov	r0, r3
 8010db8:	f7ff fdb0 	bl	801091c <ptr_to_mem>
 8010dbc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8010dbe:	693b      	ldr	r3, [r7, #16]
 8010dc0:	791b      	ldrb	r3, [r3, #4]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d13f      	bne.n	8010e46 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010dc6:	69bb      	ldr	r3, [r7, #24]
 8010dc8:	881b      	ldrh	r3, [r3, #0]
 8010dca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010dce:	d106      	bne.n	8010dde <mem_trim+0xfa>
 8010dd0:	4b42      	ldr	r3, [pc, #264]	; (8010edc <mem_trim+0x1f8>)
 8010dd2:	f240 22f5 	movw	r2, #757	; 0x2f5
 8010dd6:	4946      	ldr	r1, [pc, #280]	; (8010ef0 <mem_trim+0x20c>)
 8010dd8:	4842      	ldr	r0, [pc, #264]	; (8010ee4 <mem_trim+0x200>)
 8010dda:	f00a fd13 	bl	801b804 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8010dde:	693b      	ldr	r3, [r7, #16]
 8010de0:	881b      	ldrh	r3, [r3, #0]
 8010de2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010de4:	8afa      	ldrh	r2, [r7, #22]
 8010de6:	8bfb      	ldrh	r3, [r7, #30]
 8010de8:	4413      	add	r3, r2
 8010dea:	b29b      	uxth	r3, r3
 8010dec:	3308      	adds	r3, #8
 8010dee:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8010df0:	4b40      	ldr	r3, [pc, #256]	; (8010ef4 <mem_trim+0x210>)
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	693a      	ldr	r2, [r7, #16]
 8010df6:	429a      	cmp	r2, r3
 8010df8:	d106      	bne.n	8010e08 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8010dfa:	89fb      	ldrh	r3, [r7, #14]
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f7ff fd8d 	bl	801091c <ptr_to_mem>
 8010e02:	4603      	mov	r3, r0
 8010e04:	4a3b      	ldr	r2, [pc, #236]	; (8010ef4 <mem_trim+0x210>)
 8010e06:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8010e08:	89fb      	ldrh	r3, [r7, #14]
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	f7ff fd86 	bl	801091c <ptr_to_mem>
 8010e10:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8010e12:	693b      	ldr	r3, [r7, #16]
 8010e14:	2200      	movs	r2, #0
 8010e16:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8010e18:	693b      	ldr	r3, [r7, #16]
 8010e1a:	89ba      	ldrh	r2, [r7, #12]
 8010e1c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8010e1e:	693b      	ldr	r3, [r7, #16]
 8010e20:	8afa      	ldrh	r2, [r7, #22]
 8010e22:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8010e24:	69bb      	ldr	r3, [r7, #24]
 8010e26:	89fa      	ldrh	r2, [r7, #14]
 8010e28:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010e2a:	693b      	ldr	r3, [r7, #16]
 8010e2c:	881b      	ldrh	r3, [r3, #0]
 8010e2e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010e32:	d047      	beq.n	8010ec4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010e34:	693b      	ldr	r3, [r7, #16]
 8010e36:	881b      	ldrh	r3, [r3, #0]
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f7ff fd6f 	bl	801091c <ptr_to_mem>
 8010e3e:	4602      	mov	r2, r0
 8010e40:	89fb      	ldrh	r3, [r7, #14]
 8010e42:	8053      	strh	r3, [r2, #2]
 8010e44:	e03e      	b.n	8010ec4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8010e46:	8bfb      	ldrh	r3, [r7, #30]
 8010e48:	f103 0214 	add.w	r2, r3, #20
 8010e4c:	8abb      	ldrh	r3, [r7, #20]
 8010e4e:	429a      	cmp	r2, r3
 8010e50:	d838      	bhi.n	8010ec4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010e52:	8afa      	ldrh	r2, [r7, #22]
 8010e54:	8bfb      	ldrh	r3, [r7, #30]
 8010e56:	4413      	add	r3, r2
 8010e58:	b29b      	uxth	r3, r3
 8010e5a:	3308      	adds	r3, #8
 8010e5c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010e5e:	69bb      	ldr	r3, [r7, #24]
 8010e60:	881b      	ldrh	r3, [r3, #0]
 8010e62:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010e66:	d106      	bne.n	8010e76 <mem_trim+0x192>
 8010e68:	4b1c      	ldr	r3, [pc, #112]	; (8010edc <mem_trim+0x1f8>)
 8010e6a:	f240 3216 	movw	r2, #790	; 0x316
 8010e6e:	4920      	ldr	r1, [pc, #128]	; (8010ef0 <mem_trim+0x20c>)
 8010e70:	481c      	ldr	r0, [pc, #112]	; (8010ee4 <mem_trim+0x200>)
 8010e72:	f00a fcc7 	bl	801b804 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8010e76:	89fb      	ldrh	r3, [r7, #14]
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f7ff fd4f 	bl	801091c <ptr_to_mem>
 8010e7e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8010e80:	4b1c      	ldr	r3, [pc, #112]	; (8010ef4 <mem_trim+0x210>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	693a      	ldr	r2, [r7, #16]
 8010e86:	429a      	cmp	r2, r3
 8010e88:	d202      	bcs.n	8010e90 <mem_trim+0x1ac>
      lfree = mem2;
 8010e8a:	4a1a      	ldr	r2, [pc, #104]	; (8010ef4 <mem_trim+0x210>)
 8010e8c:	693b      	ldr	r3, [r7, #16]
 8010e8e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8010e90:	693b      	ldr	r3, [r7, #16]
 8010e92:	2200      	movs	r2, #0
 8010e94:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8010e96:	69bb      	ldr	r3, [r7, #24]
 8010e98:	881a      	ldrh	r2, [r3, #0]
 8010e9a:	693b      	ldr	r3, [r7, #16]
 8010e9c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	8afa      	ldrh	r2, [r7, #22]
 8010ea2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8010ea4:	69bb      	ldr	r3, [r7, #24]
 8010ea6:	89fa      	ldrh	r2, [r7, #14]
 8010ea8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010eaa:	693b      	ldr	r3, [r7, #16]
 8010eac:	881b      	ldrh	r3, [r3, #0]
 8010eae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010eb2:	d007      	beq.n	8010ec4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010eb4:	693b      	ldr	r3, [r7, #16]
 8010eb6:	881b      	ldrh	r3, [r3, #0]
 8010eb8:	4618      	mov	r0, r3
 8010eba:	f7ff fd2f 	bl	801091c <ptr_to_mem>
 8010ebe:	4602      	mov	r2, r0
 8010ec0:	89fb      	ldrh	r3, [r7, #14]
 8010ec2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010ec4:	4809      	ldr	r0, [pc, #36]	; (8010eec <mem_trim+0x208>)
 8010ec6:	f00a fc08 	bl	801b6da <sys_mutex_unlock>
  return rmem;
 8010eca:	687b      	ldr	r3, [r7, #4]
}
 8010ecc:	4618      	mov	r0, r3
 8010ece:	3720      	adds	r7, #32
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}
 8010ed4:	2000dfa4 	.word	0x2000dfa4
 8010ed8:	2000dfa8 	.word	0x2000dfa8
 8010edc:	0801da74 	.word	0x0801da74
 8010ee0:	0801dc00 	.word	0x0801dc00
 8010ee4:	0801dabc 	.word	0x0801dabc
 8010ee8:	0801dc18 	.word	0x0801dc18
 8010eec:	2000dfac 	.word	0x2000dfac
 8010ef0:	0801dc38 	.word	0x0801dc38
 8010ef4:	2000dfb0 	.word	0x2000dfb0

08010ef8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b088      	sub	sp, #32
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	4603      	mov	r3, r0
 8010f00:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8010f02:	88fb      	ldrh	r3, [r7, #6]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d101      	bne.n	8010f0c <mem_malloc+0x14>
    return NULL;
 8010f08:	2300      	movs	r3, #0
 8010f0a:	e0e2      	b.n	80110d2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010f0c:	88fb      	ldrh	r3, [r7, #6]
 8010f0e:	3303      	adds	r3, #3
 8010f10:	b29b      	uxth	r3, r3
 8010f12:	f023 0303 	bic.w	r3, r3, #3
 8010f16:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8010f18:	8bbb      	ldrh	r3, [r7, #28]
 8010f1a:	2b0b      	cmp	r3, #11
 8010f1c:	d801      	bhi.n	8010f22 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8010f1e:	230c      	movs	r3, #12
 8010f20:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8010f22:	8bbb      	ldrh	r3, [r7, #28]
 8010f24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010f28:	d803      	bhi.n	8010f32 <mem_malloc+0x3a>
 8010f2a:	8bba      	ldrh	r2, [r7, #28]
 8010f2c:	88fb      	ldrh	r3, [r7, #6]
 8010f2e:	429a      	cmp	r2, r3
 8010f30:	d201      	bcs.n	8010f36 <mem_malloc+0x3e>
    return NULL;
 8010f32:	2300      	movs	r3, #0
 8010f34:	e0cd      	b.n	80110d2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8010f36:	4869      	ldr	r0, [pc, #420]	; (80110dc <mem_malloc+0x1e4>)
 8010f38:	f00a fbc0 	bl	801b6bc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010f3c:	4b68      	ldr	r3, [pc, #416]	; (80110e0 <mem_malloc+0x1e8>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	4618      	mov	r0, r3
 8010f42:	f7ff fcfd 	bl	8010940 <mem_to_ptr>
 8010f46:	4603      	mov	r3, r0
 8010f48:	83fb      	strh	r3, [r7, #30]
 8010f4a:	e0b7      	b.n	80110bc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8010f4c:	8bfb      	ldrh	r3, [r7, #30]
 8010f4e:	4618      	mov	r0, r3
 8010f50:	f7ff fce4 	bl	801091c <ptr_to_mem>
 8010f54:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8010f56:	697b      	ldr	r3, [r7, #20]
 8010f58:	791b      	ldrb	r3, [r3, #4]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	f040 80a7 	bne.w	80110ae <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8010f60:	697b      	ldr	r3, [r7, #20]
 8010f62:	881b      	ldrh	r3, [r3, #0]
 8010f64:	461a      	mov	r2, r3
 8010f66:	8bfb      	ldrh	r3, [r7, #30]
 8010f68:	1ad3      	subs	r3, r2, r3
 8010f6a:	f1a3 0208 	sub.w	r2, r3, #8
 8010f6e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8010f70:	429a      	cmp	r2, r3
 8010f72:	f0c0 809c 	bcc.w	80110ae <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010f76:	697b      	ldr	r3, [r7, #20]
 8010f78:	881b      	ldrh	r3, [r3, #0]
 8010f7a:	461a      	mov	r2, r3
 8010f7c:	8bfb      	ldrh	r3, [r7, #30]
 8010f7e:	1ad3      	subs	r3, r2, r3
 8010f80:	f1a3 0208 	sub.w	r2, r3, #8
 8010f84:	8bbb      	ldrh	r3, [r7, #28]
 8010f86:	3314      	adds	r3, #20
 8010f88:	429a      	cmp	r2, r3
 8010f8a:	d333      	bcc.n	8010ff4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010f8c:	8bfa      	ldrh	r2, [r7, #30]
 8010f8e:	8bbb      	ldrh	r3, [r7, #28]
 8010f90:	4413      	add	r3, r2
 8010f92:	b29b      	uxth	r3, r3
 8010f94:	3308      	adds	r3, #8
 8010f96:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8010f98:	8a7b      	ldrh	r3, [r7, #18]
 8010f9a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010f9e:	d106      	bne.n	8010fae <mem_malloc+0xb6>
 8010fa0:	4b50      	ldr	r3, [pc, #320]	; (80110e4 <mem_malloc+0x1ec>)
 8010fa2:	f240 3287 	movw	r2, #903	; 0x387
 8010fa6:	4950      	ldr	r1, [pc, #320]	; (80110e8 <mem_malloc+0x1f0>)
 8010fa8:	4850      	ldr	r0, [pc, #320]	; (80110ec <mem_malloc+0x1f4>)
 8010faa:	f00a fc2b 	bl	801b804 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8010fae:	8a7b      	ldrh	r3, [r7, #18]
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f7ff fcb3 	bl	801091c <ptr_to_mem>
 8010fb6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	2200      	movs	r2, #0
 8010fbc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8010fbe:	697b      	ldr	r3, [r7, #20]
 8010fc0:	881a      	ldrh	r2, [r3, #0]
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	8bfa      	ldrh	r2, [r7, #30]
 8010fca:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010fcc:	697b      	ldr	r3, [r7, #20]
 8010fce:	8a7a      	ldrh	r2, [r7, #18]
 8010fd0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8010fd2:	697b      	ldr	r3, [r7, #20]
 8010fd4:	2201      	movs	r2, #1
 8010fd6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	881b      	ldrh	r3, [r3, #0]
 8010fdc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010fe0:	d00b      	beq.n	8010ffa <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	881b      	ldrh	r3, [r3, #0]
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	f7ff fc98 	bl	801091c <ptr_to_mem>
 8010fec:	4602      	mov	r2, r0
 8010fee:	8a7b      	ldrh	r3, [r7, #18]
 8010ff0:	8053      	strh	r3, [r2, #2]
 8010ff2:	e002      	b.n	8010ffa <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8010ff4:	697b      	ldr	r3, [r7, #20]
 8010ff6:	2201      	movs	r2, #1
 8010ff8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8010ffa:	4b39      	ldr	r3, [pc, #228]	; (80110e0 <mem_malloc+0x1e8>)
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	697a      	ldr	r2, [r7, #20]
 8011000:	429a      	cmp	r2, r3
 8011002:	d127      	bne.n	8011054 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8011004:	4b36      	ldr	r3, [pc, #216]	; (80110e0 <mem_malloc+0x1e8>)
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801100a:	e005      	b.n	8011018 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801100c:	69bb      	ldr	r3, [r7, #24]
 801100e:	881b      	ldrh	r3, [r3, #0]
 8011010:	4618      	mov	r0, r3
 8011012:	f7ff fc83 	bl	801091c <ptr_to_mem>
 8011016:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8011018:	69bb      	ldr	r3, [r7, #24]
 801101a:	791b      	ldrb	r3, [r3, #4]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d004      	beq.n	801102a <mem_malloc+0x132>
 8011020:	4b33      	ldr	r3, [pc, #204]	; (80110f0 <mem_malloc+0x1f8>)
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	69ba      	ldr	r2, [r7, #24]
 8011026:	429a      	cmp	r2, r3
 8011028:	d1f0      	bne.n	801100c <mem_malloc+0x114>
          }
          lfree = cur;
 801102a:	4a2d      	ldr	r2, [pc, #180]	; (80110e0 <mem_malloc+0x1e8>)
 801102c:	69bb      	ldr	r3, [r7, #24]
 801102e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8011030:	4b2b      	ldr	r3, [pc, #172]	; (80110e0 <mem_malloc+0x1e8>)
 8011032:	681a      	ldr	r2, [r3, #0]
 8011034:	4b2e      	ldr	r3, [pc, #184]	; (80110f0 <mem_malloc+0x1f8>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	429a      	cmp	r2, r3
 801103a:	d00b      	beq.n	8011054 <mem_malloc+0x15c>
 801103c:	4b28      	ldr	r3, [pc, #160]	; (80110e0 <mem_malloc+0x1e8>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	791b      	ldrb	r3, [r3, #4]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d006      	beq.n	8011054 <mem_malloc+0x15c>
 8011046:	4b27      	ldr	r3, [pc, #156]	; (80110e4 <mem_malloc+0x1ec>)
 8011048:	f240 32b5 	movw	r2, #949	; 0x3b5
 801104c:	4929      	ldr	r1, [pc, #164]	; (80110f4 <mem_malloc+0x1fc>)
 801104e:	4827      	ldr	r0, [pc, #156]	; (80110ec <mem_malloc+0x1f4>)
 8011050:	f00a fbd8 	bl	801b804 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8011054:	4821      	ldr	r0, [pc, #132]	; (80110dc <mem_malloc+0x1e4>)
 8011056:	f00a fb40 	bl	801b6da <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801105a:	8bba      	ldrh	r2, [r7, #28]
 801105c:	697b      	ldr	r3, [r7, #20]
 801105e:	4413      	add	r3, r2
 8011060:	3308      	adds	r3, #8
 8011062:	4a23      	ldr	r2, [pc, #140]	; (80110f0 <mem_malloc+0x1f8>)
 8011064:	6812      	ldr	r2, [r2, #0]
 8011066:	4293      	cmp	r3, r2
 8011068:	d906      	bls.n	8011078 <mem_malloc+0x180>
 801106a:	4b1e      	ldr	r3, [pc, #120]	; (80110e4 <mem_malloc+0x1ec>)
 801106c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8011070:	4921      	ldr	r1, [pc, #132]	; (80110f8 <mem_malloc+0x200>)
 8011072:	481e      	ldr	r0, [pc, #120]	; (80110ec <mem_malloc+0x1f4>)
 8011074:	f00a fbc6 	bl	801b804 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8011078:	697b      	ldr	r3, [r7, #20]
 801107a:	f003 0303 	and.w	r3, r3, #3
 801107e:	2b00      	cmp	r3, #0
 8011080:	d006      	beq.n	8011090 <mem_malloc+0x198>
 8011082:	4b18      	ldr	r3, [pc, #96]	; (80110e4 <mem_malloc+0x1ec>)
 8011084:	f240 32bb 	movw	r2, #955	; 0x3bb
 8011088:	491c      	ldr	r1, [pc, #112]	; (80110fc <mem_malloc+0x204>)
 801108a:	4818      	ldr	r0, [pc, #96]	; (80110ec <mem_malloc+0x1f4>)
 801108c:	f00a fbba 	bl	801b804 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8011090:	697b      	ldr	r3, [r7, #20]
 8011092:	f003 0303 	and.w	r3, r3, #3
 8011096:	2b00      	cmp	r3, #0
 8011098:	d006      	beq.n	80110a8 <mem_malloc+0x1b0>
 801109a:	4b12      	ldr	r3, [pc, #72]	; (80110e4 <mem_malloc+0x1ec>)
 801109c:	f240 32bd 	movw	r2, #957	; 0x3bd
 80110a0:	4917      	ldr	r1, [pc, #92]	; (8011100 <mem_malloc+0x208>)
 80110a2:	4812      	ldr	r0, [pc, #72]	; (80110ec <mem_malloc+0x1f4>)
 80110a4:	f00a fbae 	bl	801b804 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80110a8:	697b      	ldr	r3, [r7, #20]
 80110aa:	3308      	adds	r3, #8
 80110ac:	e011      	b.n	80110d2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80110ae:	8bfb      	ldrh	r3, [r7, #30]
 80110b0:	4618      	mov	r0, r3
 80110b2:	f7ff fc33 	bl	801091c <ptr_to_mem>
 80110b6:	4603      	mov	r3, r0
 80110b8:	881b      	ldrh	r3, [r3, #0]
 80110ba:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80110bc:	8bfa      	ldrh	r2, [r7, #30]
 80110be:	8bbb      	ldrh	r3, [r7, #28]
 80110c0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80110c4:	429a      	cmp	r2, r3
 80110c6:	f4ff af41 	bcc.w	8010f4c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80110ca:	4804      	ldr	r0, [pc, #16]	; (80110dc <mem_malloc+0x1e4>)
 80110cc:	f00a fb05 	bl	801b6da <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80110d0:	2300      	movs	r3, #0
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	3720      	adds	r7, #32
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}
 80110da:	bf00      	nop
 80110dc:	2000dfac 	.word	0x2000dfac
 80110e0:	2000dfb0 	.word	0x2000dfb0
 80110e4:	0801da74 	.word	0x0801da74
 80110e8:	0801dc38 	.word	0x0801dc38
 80110ec:	0801dabc 	.word	0x0801dabc
 80110f0:	2000dfa8 	.word	0x2000dfa8
 80110f4:	0801dc4c 	.word	0x0801dc4c
 80110f8:	0801dc68 	.word	0x0801dc68
 80110fc:	0801dc98 	.word	0x0801dc98
 8011100:	0801dcc8 	.word	0x0801dcc8

08011104 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8011104:	b480      	push	{r7}
 8011106:	b085      	sub	sp, #20
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	689b      	ldr	r3, [r3, #8]
 8011110:	2200      	movs	r2, #0
 8011112:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	685b      	ldr	r3, [r3, #4]
 8011118:	3303      	adds	r3, #3
 801111a:	f023 0303 	bic.w	r3, r3, #3
 801111e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8011120:	2300      	movs	r3, #0
 8011122:	60fb      	str	r3, [r7, #12]
 8011124:	e011      	b.n	801114a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	689b      	ldr	r3, [r3, #8]
 801112a:	681a      	ldr	r2, [r3, #0]
 801112c:	68bb      	ldr	r3, [r7, #8]
 801112e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	689b      	ldr	r3, [r3, #8]
 8011134:	68ba      	ldr	r2, [r7, #8]
 8011136:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	881b      	ldrh	r3, [r3, #0]
 801113c:	461a      	mov	r2, r3
 801113e:	68bb      	ldr	r3, [r7, #8]
 8011140:	4413      	add	r3, r2
 8011142:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	3301      	adds	r3, #1
 8011148:	60fb      	str	r3, [r7, #12]
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	885b      	ldrh	r3, [r3, #2]
 801114e:	461a      	mov	r2, r3
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	4293      	cmp	r3, r2
 8011154:	dbe7      	blt.n	8011126 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8011156:	bf00      	nop
 8011158:	bf00      	nop
 801115a:	3714      	adds	r7, #20
 801115c:	46bd      	mov	sp, r7
 801115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011162:	4770      	bx	lr

08011164 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b082      	sub	sp, #8
 8011168:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801116a:	2300      	movs	r3, #0
 801116c:	80fb      	strh	r3, [r7, #6]
 801116e:	e009      	b.n	8011184 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8011170:	88fb      	ldrh	r3, [r7, #6]
 8011172:	4a08      	ldr	r2, [pc, #32]	; (8011194 <memp_init+0x30>)
 8011174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011178:	4618      	mov	r0, r3
 801117a:	f7ff ffc3 	bl	8011104 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801117e:	88fb      	ldrh	r3, [r7, #6]
 8011180:	3301      	adds	r3, #1
 8011182:	80fb      	strh	r3, [r7, #6]
 8011184:	88fb      	ldrh	r3, [r7, #6]
 8011186:	2b0c      	cmp	r3, #12
 8011188:	d9f2      	bls.n	8011170 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801118a:	bf00      	nop
 801118c:	bf00      	nop
 801118e:	3708      	adds	r7, #8
 8011190:	46bd      	mov	sp, r7
 8011192:	bd80      	pop	{r7, pc}
 8011194:	08020598 	.word	0x08020598

08011198 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b084      	sub	sp, #16
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80111a0:	f00a fac8 	bl	801b734 <sys_arch_protect>
 80111a4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	689b      	ldr	r3, [r3, #8]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80111ae:	68bb      	ldr	r3, [r7, #8]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d015      	beq.n	80111e0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	689b      	ldr	r3, [r3, #8]
 80111b8:	68ba      	ldr	r2, [r7, #8]
 80111ba:	6812      	ldr	r2, [r2, #0]
 80111bc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80111be:	68bb      	ldr	r3, [r7, #8]
 80111c0:	f003 0303 	and.w	r3, r3, #3
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d006      	beq.n	80111d6 <do_memp_malloc_pool+0x3e>
 80111c8:	4b09      	ldr	r3, [pc, #36]	; (80111f0 <do_memp_malloc_pool+0x58>)
 80111ca:	f44f 728c 	mov.w	r2, #280	; 0x118
 80111ce:	4909      	ldr	r1, [pc, #36]	; (80111f4 <do_memp_malloc_pool+0x5c>)
 80111d0:	4809      	ldr	r0, [pc, #36]	; (80111f8 <do_memp_malloc_pool+0x60>)
 80111d2:	f00a fb17 	bl	801b804 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80111d6:	68f8      	ldr	r0, [r7, #12]
 80111d8:	f00a faba 	bl	801b750 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80111dc:	68bb      	ldr	r3, [r7, #8]
 80111de:	e003      	b.n	80111e8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80111e0:	68f8      	ldr	r0, [r7, #12]
 80111e2:	f00a fab5 	bl	801b750 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80111e6:	2300      	movs	r3, #0
}
 80111e8:	4618      	mov	r0, r3
 80111ea:	3710      	adds	r7, #16
 80111ec:	46bd      	mov	sp, r7
 80111ee:	bd80      	pop	{r7, pc}
 80111f0:	0801dcec 	.word	0x0801dcec
 80111f4:	0801dd1c 	.word	0x0801dd1c
 80111f8:	0801dd40 	.word	0x0801dd40

080111fc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b082      	sub	sp, #8
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d106      	bne.n	8011218 <memp_malloc_pool+0x1c>
 801120a:	4b0a      	ldr	r3, [pc, #40]	; (8011234 <memp_malloc_pool+0x38>)
 801120c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8011210:	4909      	ldr	r1, [pc, #36]	; (8011238 <memp_malloc_pool+0x3c>)
 8011212:	480a      	ldr	r0, [pc, #40]	; (801123c <memp_malloc_pool+0x40>)
 8011214:	f00a faf6 	bl	801b804 <iprintf>
  if (desc == NULL) {
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d101      	bne.n	8011222 <memp_malloc_pool+0x26>
    return NULL;
 801121e:	2300      	movs	r3, #0
 8011220:	e003      	b.n	801122a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8011222:	6878      	ldr	r0, [r7, #4]
 8011224:	f7ff ffb8 	bl	8011198 <do_memp_malloc_pool>
 8011228:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801122a:	4618      	mov	r0, r3
 801122c:	3708      	adds	r7, #8
 801122e:	46bd      	mov	sp, r7
 8011230:	bd80      	pop	{r7, pc}
 8011232:	bf00      	nop
 8011234:	0801dcec 	.word	0x0801dcec
 8011238:	0801dd68 	.word	0x0801dd68
 801123c:	0801dd40 	.word	0x0801dd40

08011240 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b084      	sub	sp, #16
 8011244:	af00      	add	r7, sp, #0
 8011246:	4603      	mov	r3, r0
 8011248:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801124a:	79fb      	ldrb	r3, [r7, #7]
 801124c:	2b0c      	cmp	r3, #12
 801124e:	d908      	bls.n	8011262 <memp_malloc+0x22>
 8011250:	4b0a      	ldr	r3, [pc, #40]	; (801127c <memp_malloc+0x3c>)
 8011252:	f240 1257 	movw	r2, #343	; 0x157
 8011256:	490a      	ldr	r1, [pc, #40]	; (8011280 <memp_malloc+0x40>)
 8011258:	480a      	ldr	r0, [pc, #40]	; (8011284 <memp_malloc+0x44>)
 801125a:	f00a fad3 	bl	801b804 <iprintf>
 801125e:	2300      	movs	r3, #0
 8011260:	e008      	b.n	8011274 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8011262:	79fb      	ldrb	r3, [r7, #7]
 8011264:	4a08      	ldr	r2, [pc, #32]	; (8011288 <memp_malloc+0x48>)
 8011266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801126a:	4618      	mov	r0, r3
 801126c:	f7ff ff94 	bl	8011198 <do_memp_malloc_pool>
 8011270:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8011272:	68fb      	ldr	r3, [r7, #12]
}
 8011274:	4618      	mov	r0, r3
 8011276:	3710      	adds	r7, #16
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}
 801127c:	0801dcec 	.word	0x0801dcec
 8011280:	0801dd7c 	.word	0x0801dd7c
 8011284:	0801dd40 	.word	0x0801dd40
 8011288:	08020598 	.word	0x08020598

0801128c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b084      	sub	sp, #16
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
 8011294:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	f003 0303 	and.w	r3, r3, #3
 801129c:	2b00      	cmp	r3, #0
 801129e:	d006      	beq.n	80112ae <do_memp_free_pool+0x22>
 80112a0:	4b0d      	ldr	r3, [pc, #52]	; (80112d8 <do_memp_free_pool+0x4c>)
 80112a2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80112a6:	490d      	ldr	r1, [pc, #52]	; (80112dc <do_memp_free_pool+0x50>)
 80112a8:	480d      	ldr	r0, [pc, #52]	; (80112e0 <do_memp_free_pool+0x54>)
 80112aa:	f00a faab 	bl	801b804 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80112b2:	f00a fa3f 	bl	801b734 <sys_arch_protect>
 80112b6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	689b      	ldr	r3, [r3, #8]
 80112bc:	681a      	ldr	r2, [r3, #0]
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	689b      	ldr	r3, [r3, #8]
 80112c6:	68fa      	ldr	r2, [r7, #12]
 80112c8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80112ca:	68b8      	ldr	r0, [r7, #8]
 80112cc:	f00a fa40 	bl	801b750 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80112d0:	bf00      	nop
 80112d2:	3710      	adds	r7, #16
 80112d4:	46bd      	mov	sp, r7
 80112d6:	bd80      	pop	{r7, pc}
 80112d8:	0801dcec 	.word	0x0801dcec
 80112dc:	0801dd9c 	.word	0x0801dd9c
 80112e0:	0801dd40 	.word	0x0801dd40

080112e4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b082      	sub	sp, #8
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
 80112ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d106      	bne.n	8011302 <memp_free_pool+0x1e>
 80112f4:	4b0a      	ldr	r3, [pc, #40]	; (8011320 <memp_free_pool+0x3c>)
 80112f6:	f240 1295 	movw	r2, #405	; 0x195
 80112fa:	490a      	ldr	r1, [pc, #40]	; (8011324 <memp_free_pool+0x40>)
 80112fc:	480a      	ldr	r0, [pc, #40]	; (8011328 <memp_free_pool+0x44>)
 80112fe:	f00a fa81 	bl	801b804 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d007      	beq.n	8011318 <memp_free_pool+0x34>
 8011308:	683b      	ldr	r3, [r7, #0]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d004      	beq.n	8011318 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801130e:	6839      	ldr	r1, [r7, #0]
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f7ff ffbb 	bl	801128c <do_memp_free_pool>
 8011316:	e000      	b.n	801131a <memp_free_pool+0x36>
    return;
 8011318:	bf00      	nop
}
 801131a:	3708      	adds	r7, #8
 801131c:	46bd      	mov	sp, r7
 801131e:	bd80      	pop	{r7, pc}
 8011320:	0801dcec 	.word	0x0801dcec
 8011324:	0801dd68 	.word	0x0801dd68
 8011328:	0801dd40 	.word	0x0801dd40

0801132c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b082      	sub	sp, #8
 8011330:	af00      	add	r7, sp, #0
 8011332:	4603      	mov	r3, r0
 8011334:	6039      	str	r1, [r7, #0]
 8011336:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8011338:	79fb      	ldrb	r3, [r7, #7]
 801133a:	2b0c      	cmp	r3, #12
 801133c:	d907      	bls.n	801134e <memp_free+0x22>
 801133e:	4b0c      	ldr	r3, [pc, #48]	; (8011370 <memp_free+0x44>)
 8011340:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8011344:	490b      	ldr	r1, [pc, #44]	; (8011374 <memp_free+0x48>)
 8011346:	480c      	ldr	r0, [pc, #48]	; (8011378 <memp_free+0x4c>)
 8011348:	f00a fa5c 	bl	801b804 <iprintf>
 801134c:	e00c      	b.n	8011368 <memp_free+0x3c>

  if (mem == NULL) {
 801134e:	683b      	ldr	r3, [r7, #0]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d008      	beq.n	8011366 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8011354:	79fb      	ldrb	r3, [r7, #7]
 8011356:	4a09      	ldr	r2, [pc, #36]	; (801137c <memp_free+0x50>)
 8011358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801135c:	6839      	ldr	r1, [r7, #0]
 801135e:	4618      	mov	r0, r3
 8011360:	f7ff ff94 	bl	801128c <do_memp_free_pool>
 8011364:	e000      	b.n	8011368 <memp_free+0x3c>
    return;
 8011366:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8011368:	3708      	adds	r7, #8
 801136a:	46bd      	mov	sp, r7
 801136c:	bd80      	pop	{r7, pc}
 801136e:	bf00      	nop
 8011370:	0801dcec 	.word	0x0801dcec
 8011374:	0801ddbc 	.word	0x0801ddbc
 8011378:	0801dd40 	.word	0x0801dd40
 801137c:	08020598 	.word	0x08020598

08011380 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8011380:	b480      	push	{r7}
 8011382:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8011384:	bf00      	nop
 8011386:	46bd      	mov	sp, r7
 8011388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138c:	4770      	bx	lr
	...

08011390 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b086      	sub	sp, #24
 8011394:	af00      	add	r7, sp, #0
 8011396:	60f8      	str	r0, [r7, #12]
 8011398:	60b9      	str	r1, [r7, #8]
 801139a:	607a      	str	r2, [r7, #4]
 801139c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d108      	bne.n	80113b6 <netif_add+0x26>
 80113a4:	4b57      	ldr	r3, [pc, #348]	; (8011504 <netif_add+0x174>)
 80113a6:	f240 1227 	movw	r2, #295	; 0x127
 80113aa:	4957      	ldr	r1, [pc, #348]	; (8011508 <netif_add+0x178>)
 80113ac:	4857      	ldr	r0, [pc, #348]	; (801150c <netif_add+0x17c>)
 80113ae:	f00a fa29 	bl	801b804 <iprintf>
 80113b2:	2300      	movs	r3, #0
 80113b4:	e0a2      	b.n	80114fc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80113b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d108      	bne.n	80113ce <netif_add+0x3e>
 80113bc:	4b51      	ldr	r3, [pc, #324]	; (8011504 <netif_add+0x174>)
 80113be:	f44f 7294 	mov.w	r2, #296	; 0x128
 80113c2:	4953      	ldr	r1, [pc, #332]	; (8011510 <netif_add+0x180>)
 80113c4:	4851      	ldr	r0, [pc, #324]	; (801150c <netif_add+0x17c>)
 80113c6:	f00a fa1d 	bl	801b804 <iprintf>
 80113ca:	2300      	movs	r3, #0
 80113cc:	e096      	b.n	80114fc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80113ce:	68bb      	ldr	r3, [r7, #8]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d101      	bne.n	80113d8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80113d4:	4b4f      	ldr	r3, [pc, #316]	; (8011514 <netif_add+0x184>)
 80113d6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d101      	bne.n	80113e2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80113de:	4b4d      	ldr	r3, [pc, #308]	; (8011514 <netif_add+0x184>)
 80113e0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80113e2:	683b      	ldr	r3, [r7, #0]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d101      	bne.n	80113ec <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80113e8:	4b4a      	ldr	r3, [pc, #296]	; (8011514 <netif_add+0x184>)
 80113ea:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	2200      	movs	r2, #0
 80113f0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	2200      	movs	r2, #0
 80113f6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	2200      	movs	r2, #0
 80113fc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	4a45      	ldr	r2, [pc, #276]	; (8011518 <netif_add+0x188>)
 8011402:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	2200      	movs	r2, #0
 8011408:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	2200      	movs	r2, #0
 801140e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	2200      	movs	r2, #0
 8011416:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	6a3a      	ldr	r2, [r7, #32]
 801141c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801141e:	4b3f      	ldr	r3, [pc, #252]	; (801151c <netif_add+0x18c>)
 8011420:	781a      	ldrb	r2, [r3, #0]
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801142c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	687a      	ldr	r2, [r7, #4]
 8011432:	68b9      	ldr	r1, [r7, #8]
 8011434:	68f8      	ldr	r0, [r7, #12]
 8011436:	f000 f913 	bl	8011660 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801143c:	68f8      	ldr	r0, [r7, #12]
 801143e:	4798      	blx	r3
 8011440:	4603      	mov	r3, r0
 8011442:	2b00      	cmp	r3, #0
 8011444:	d001      	beq.n	801144a <netif_add+0xba>
    return NULL;
 8011446:	2300      	movs	r3, #0
 8011448:	e058      	b.n	80114fc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011450:	2bff      	cmp	r3, #255	; 0xff
 8011452:	d103      	bne.n	801145c <netif_add+0xcc>
        netif->num = 0;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	2200      	movs	r2, #0
 8011458:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 801145c:	2300      	movs	r3, #0
 801145e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011460:	4b2f      	ldr	r3, [pc, #188]	; (8011520 <netif_add+0x190>)
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	617b      	str	r3, [r7, #20]
 8011466:	e02b      	b.n	80114c0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8011468:	697a      	ldr	r2, [r7, #20]
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	429a      	cmp	r2, r3
 801146e:	d106      	bne.n	801147e <netif_add+0xee>
 8011470:	4b24      	ldr	r3, [pc, #144]	; (8011504 <netif_add+0x174>)
 8011472:	f240 128b 	movw	r2, #395	; 0x18b
 8011476:	492b      	ldr	r1, [pc, #172]	; (8011524 <netif_add+0x194>)
 8011478:	4824      	ldr	r0, [pc, #144]	; (801150c <netif_add+0x17c>)
 801147a:	f00a f9c3 	bl	801b804 <iprintf>
        num_netifs++;
 801147e:	693b      	ldr	r3, [r7, #16]
 8011480:	3301      	adds	r3, #1
 8011482:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8011484:	693b      	ldr	r3, [r7, #16]
 8011486:	2bff      	cmp	r3, #255	; 0xff
 8011488:	dd06      	ble.n	8011498 <netif_add+0x108>
 801148a:	4b1e      	ldr	r3, [pc, #120]	; (8011504 <netif_add+0x174>)
 801148c:	f240 128d 	movw	r2, #397	; 0x18d
 8011490:	4925      	ldr	r1, [pc, #148]	; (8011528 <netif_add+0x198>)
 8011492:	481e      	ldr	r0, [pc, #120]	; (801150c <netif_add+0x17c>)
 8011494:	f00a f9b6 	bl	801b804 <iprintf>
        if (netif2->num == netif->num) {
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80114a4:	429a      	cmp	r2, r3
 80114a6:	d108      	bne.n	80114ba <netif_add+0x12a>
          netif->num++;
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80114ae:	3301      	adds	r3, #1
 80114b0:	b2da      	uxtb	r2, r3
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80114b8:	e005      	b.n	80114c6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80114ba:	697b      	ldr	r3, [r7, #20]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	617b      	str	r3, [r7, #20]
 80114c0:	697b      	ldr	r3, [r7, #20]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d1d0      	bne.n	8011468 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80114c6:	697b      	ldr	r3, [r7, #20]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d1be      	bne.n	801144a <netif_add+0xba>
  }
  if (netif->num == 254) {
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80114d2:	2bfe      	cmp	r3, #254	; 0xfe
 80114d4:	d103      	bne.n	80114de <netif_add+0x14e>
    netif_num = 0;
 80114d6:	4b11      	ldr	r3, [pc, #68]	; (801151c <netif_add+0x18c>)
 80114d8:	2200      	movs	r2, #0
 80114da:	701a      	strb	r2, [r3, #0]
 80114dc:	e006      	b.n	80114ec <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80114e4:	3301      	adds	r3, #1
 80114e6:	b2da      	uxtb	r2, r3
 80114e8:	4b0c      	ldr	r3, [pc, #48]	; (801151c <netif_add+0x18c>)
 80114ea:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80114ec:	4b0c      	ldr	r3, [pc, #48]	; (8011520 <netif_add+0x190>)
 80114ee:	681a      	ldr	r2, [r3, #0]
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80114f4:	4a0a      	ldr	r2, [pc, #40]	; (8011520 <netif_add+0x190>)
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80114fa:	68fb      	ldr	r3, [r7, #12]
}
 80114fc:	4618      	mov	r0, r3
 80114fe:	3718      	adds	r7, #24
 8011500:	46bd      	mov	sp, r7
 8011502:	bd80      	pop	{r7, pc}
 8011504:	0801ddd8 	.word	0x0801ddd8
 8011508:	0801de6c 	.word	0x0801de6c
 801150c:	0801de28 	.word	0x0801de28
 8011510:	0801de88 	.word	0x0801de88
 8011514:	0802060c 	.word	0x0802060c
 8011518:	0801193b 	.word	0x0801193b
 801151c:	20011088 	.word	0x20011088
 8011520:	20011080 	.word	0x20011080
 8011524:	0801deac 	.word	0x0801deac
 8011528:	0801dec0 	.word	0x0801dec0

0801152c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801152c:	b580      	push	{r7, lr}
 801152e:	b082      	sub	sp, #8
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
 8011534:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8011536:	6839      	ldr	r1, [r7, #0]
 8011538:	6878      	ldr	r0, [r7, #4]
 801153a:	f002 fdb7 	bl	80140ac <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801153e:	6839      	ldr	r1, [r7, #0]
 8011540:	6878      	ldr	r0, [r7, #4]
 8011542:	f007 fc69 	bl	8018e18 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8011546:	bf00      	nop
 8011548:	3708      	adds	r7, #8
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}
	...

08011550 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8011550:	b580      	push	{r7, lr}
 8011552:	b086      	sub	sp, #24
 8011554:	af00      	add	r7, sp, #0
 8011556:	60f8      	str	r0, [r7, #12]
 8011558:	60b9      	str	r1, [r7, #8]
 801155a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801155c:	68bb      	ldr	r3, [r7, #8]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d106      	bne.n	8011570 <netif_do_set_ipaddr+0x20>
 8011562:	4b1d      	ldr	r3, [pc, #116]	; (80115d8 <netif_do_set_ipaddr+0x88>)
 8011564:	f240 12cb 	movw	r2, #459	; 0x1cb
 8011568:	491c      	ldr	r1, [pc, #112]	; (80115dc <netif_do_set_ipaddr+0x8c>)
 801156a:	481d      	ldr	r0, [pc, #116]	; (80115e0 <netif_do_set_ipaddr+0x90>)
 801156c:	f00a f94a 	bl	801b804 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d106      	bne.n	8011584 <netif_do_set_ipaddr+0x34>
 8011576:	4b18      	ldr	r3, [pc, #96]	; (80115d8 <netif_do_set_ipaddr+0x88>)
 8011578:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801157c:	4917      	ldr	r1, [pc, #92]	; (80115dc <netif_do_set_ipaddr+0x8c>)
 801157e:	4818      	ldr	r0, [pc, #96]	; (80115e0 <netif_do_set_ipaddr+0x90>)
 8011580:	f00a f940 	bl	801b804 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8011584:	68bb      	ldr	r3, [r7, #8]
 8011586:	681a      	ldr	r2, [r3, #0]
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	3304      	adds	r3, #4
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	429a      	cmp	r2, r3
 8011590:	d01c      	beq.n	80115cc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8011592:	68bb      	ldr	r3, [r7, #8]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	3304      	adds	r3, #4
 801159c:	681a      	ldr	r2, [r3, #0]
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80115a2:	f107 0314 	add.w	r3, r7, #20
 80115a6:	4619      	mov	r1, r3
 80115a8:	6878      	ldr	r0, [r7, #4]
 80115aa:	f7ff ffbf 	bl	801152c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80115ae:	68bb      	ldr	r3, [r7, #8]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d002      	beq.n	80115ba <netif_do_set_ipaddr+0x6a>
 80115b4:	68bb      	ldr	r3, [r7, #8]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	e000      	b.n	80115bc <netif_do_set_ipaddr+0x6c>
 80115ba:	2300      	movs	r3, #0
 80115bc:	68fa      	ldr	r2, [r7, #12]
 80115be:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80115c0:	2101      	movs	r1, #1
 80115c2:	68f8      	ldr	r0, [r7, #12]
 80115c4:	f000 f8d2 	bl	801176c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80115c8:	2301      	movs	r3, #1
 80115ca:	e000      	b.n	80115ce <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80115cc:	2300      	movs	r3, #0
}
 80115ce:	4618      	mov	r0, r3
 80115d0:	3718      	adds	r7, #24
 80115d2:	46bd      	mov	sp, r7
 80115d4:	bd80      	pop	{r7, pc}
 80115d6:	bf00      	nop
 80115d8:	0801ddd8 	.word	0x0801ddd8
 80115dc:	0801def0 	.word	0x0801def0
 80115e0:	0801de28 	.word	0x0801de28

080115e4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80115e4:	b480      	push	{r7}
 80115e6:	b085      	sub	sp, #20
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	60f8      	str	r0, [r7, #12]
 80115ec:	60b9      	str	r1, [r7, #8]
 80115ee:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80115f0:	68bb      	ldr	r3, [r7, #8]
 80115f2:	681a      	ldr	r2, [r3, #0]
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	3308      	adds	r3, #8
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	429a      	cmp	r2, r3
 80115fc:	d00a      	beq.n	8011614 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80115fe:	68bb      	ldr	r3, [r7, #8]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d002      	beq.n	801160a <netif_do_set_netmask+0x26>
 8011604:	68bb      	ldr	r3, [r7, #8]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	e000      	b.n	801160c <netif_do_set_netmask+0x28>
 801160a:	2300      	movs	r3, #0
 801160c:	68fa      	ldr	r2, [r7, #12]
 801160e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8011610:	2301      	movs	r3, #1
 8011612:	e000      	b.n	8011616 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8011614:	2300      	movs	r3, #0
}
 8011616:	4618      	mov	r0, r3
 8011618:	3714      	adds	r7, #20
 801161a:	46bd      	mov	sp, r7
 801161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011620:	4770      	bx	lr

08011622 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8011622:	b480      	push	{r7}
 8011624:	b085      	sub	sp, #20
 8011626:	af00      	add	r7, sp, #0
 8011628:	60f8      	str	r0, [r7, #12]
 801162a:	60b9      	str	r1, [r7, #8]
 801162c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801162e:	68bb      	ldr	r3, [r7, #8]
 8011630:	681a      	ldr	r2, [r3, #0]
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	330c      	adds	r3, #12
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	429a      	cmp	r2, r3
 801163a:	d00a      	beq.n	8011652 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801163c:	68bb      	ldr	r3, [r7, #8]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d002      	beq.n	8011648 <netif_do_set_gw+0x26>
 8011642:	68bb      	ldr	r3, [r7, #8]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	e000      	b.n	801164a <netif_do_set_gw+0x28>
 8011648:	2300      	movs	r3, #0
 801164a:	68fa      	ldr	r2, [r7, #12]
 801164c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801164e:	2301      	movs	r3, #1
 8011650:	e000      	b.n	8011654 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8011652:	2300      	movs	r3, #0
}
 8011654:	4618      	mov	r0, r3
 8011656:	3714      	adds	r7, #20
 8011658:	46bd      	mov	sp, r7
 801165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165e:	4770      	bx	lr

08011660 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8011660:	b580      	push	{r7, lr}
 8011662:	b088      	sub	sp, #32
 8011664:	af00      	add	r7, sp, #0
 8011666:	60f8      	str	r0, [r7, #12]
 8011668:	60b9      	str	r1, [r7, #8]
 801166a:	607a      	str	r2, [r7, #4]
 801166c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801166e:	2300      	movs	r3, #0
 8011670:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8011672:	2300      	movs	r3, #0
 8011674:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011676:	68bb      	ldr	r3, [r7, #8]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d101      	bne.n	8011680 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801167c:	4b1c      	ldr	r3, [pc, #112]	; (80116f0 <netif_set_addr+0x90>)
 801167e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d101      	bne.n	801168a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8011686:	4b1a      	ldr	r3, [pc, #104]	; (80116f0 <netif_set_addr+0x90>)
 8011688:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801168a:	683b      	ldr	r3, [r7, #0]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d101      	bne.n	8011694 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8011690:	4b17      	ldr	r3, [pc, #92]	; (80116f0 <netif_set_addr+0x90>)
 8011692:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d003      	beq.n	80116a2 <netif_set_addr+0x42>
 801169a:	68bb      	ldr	r3, [r7, #8]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d101      	bne.n	80116a6 <netif_set_addr+0x46>
 80116a2:	2301      	movs	r3, #1
 80116a4:	e000      	b.n	80116a8 <netif_set_addr+0x48>
 80116a6:	2300      	movs	r3, #0
 80116a8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80116aa:	697b      	ldr	r3, [r7, #20]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d006      	beq.n	80116be <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80116b0:	f107 0310 	add.w	r3, r7, #16
 80116b4:	461a      	mov	r2, r3
 80116b6:	68b9      	ldr	r1, [r7, #8]
 80116b8:	68f8      	ldr	r0, [r7, #12]
 80116ba:	f7ff ff49 	bl	8011550 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80116be:	69fa      	ldr	r2, [r7, #28]
 80116c0:	6879      	ldr	r1, [r7, #4]
 80116c2:	68f8      	ldr	r0, [r7, #12]
 80116c4:	f7ff ff8e 	bl	80115e4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80116c8:	69ba      	ldr	r2, [r7, #24]
 80116ca:	6839      	ldr	r1, [r7, #0]
 80116cc:	68f8      	ldr	r0, [r7, #12]
 80116ce:	f7ff ffa8 	bl	8011622 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80116d2:	697b      	ldr	r3, [r7, #20]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d106      	bne.n	80116e6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80116d8:	f107 0310 	add.w	r3, r7, #16
 80116dc:	461a      	mov	r2, r3
 80116de:	68b9      	ldr	r1, [r7, #8]
 80116e0:	68f8      	ldr	r0, [r7, #12]
 80116e2:	f7ff ff35 	bl	8011550 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80116e6:	bf00      	nop
 80116e8:	3720      	adds	r7, #32
 80116ea:	46bd      	mov	sp, r7
 80116ec:	bd80      	pop	{r7, pc}
 80116ee:	bf00      	nop
 80116f0:	0802060c 	.word	0x0802060c

080116f4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80116f4:	b480      	push	{r7}
 80116f6:	b083      	sub	sp, #12
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80116fc:	4a04      	ldr	r2, [pc, #16]	; (8011710 <netif_set_default+0x1c>)
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8011702:	bf00      	nop
 8011704:	370c      	adds	r7, #12
 8011706:	46bd      	mov	sp, r7
 8011708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170c:	4770      	bx	lr
 801170e:	bf00      	nop
 8011710:	20011084 	.word	0x20011084

08011714 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b082      	sub	sp, #8
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d107      	bne.n	8011732 <netif_set_up+0x1e>
 8011722:	4b0f      	ldr	r3, [pc, #60]	; (8011760 <netif_set_up+0x4c>)
 8011724:	f44f 7254 	mov.w	r2, #848	; 0x350
 8011728:	490e      	ldr	r1, [pc, #56]	; (8011764 <netif_set_up+0x50>)
 801172a:	480f      	ldr	r0, [pc, #60]	; (8011768 <netif_set_up+0x54>)
 801172c:	f00a f86a 	bl	801b804 <iprintf>
 8011730:	e013      	b.n	801175a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011738:	f003 0301 	and.w	r3, r3, #1
 801173c:	2b00      	cmp	r3, #0
 801173e:	d10c      	bne.n	801175a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011746:	f043 0301 	orr.w	r3, r3, #1
 801174a:	b2da      	uxtb	r2, r3
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011752:	2103      	movs	r1, #3
 8011754:	6878      	ldr	r0, [r7, #4]
 8011756:	f000 f809 	bl	801176c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801175a:	3708      	adds	r7, #8
 801175c:	46bd      	mov	sp, r7
 801175e:	bd80      	pop	{r7, pc}
 8011760:	0801ddd8 	.word	0x0801ddd8
 8011764:	0801df60 	.word	0x0801df60
 8011768:	0801de28 	.word	0x0801de28

0801176c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801176c:	b580      	push	{r7, lr}
 801176e:	b082      	sub	sp, #8
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
 8011774:	460b      	mov	r3, r1
 8011776:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d106      	bne.n	801178c <netif_issue_reports+0x20>
 801177e:	4b18      	ldr	r3, [pc, #96]	; (80117e0 <netif_issue_reports+0x74>)
 8011780:	f240 326d 	movw	r2, #877	; 0x36d
 8011784:	4917      	ldr	r1, [pc, #92]	; (80117e4 <netif_issue_reports+0x78>)
 8011786:	4818      	ldr	r0, [pc, #96]	; (80117e8 <netif_issue_reports+0x7c>)
 8011788:	f00a f83c 	bl	801b804 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011792:	f003 0304 	and.w	r3, r3, #4
 8011796:	2b00      	cmp	r3, #0
 8011798:	d01e      	beq.n	80117d8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80117a0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d017      	beq.n	80117d8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80117a8:	78fb      	ldrb	r3, [r7, #3]
 80117aa:	f003 0301 	and.w	r3, r3, #1
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d013      	beq.n	80117da <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	3304      	adds	r3, #4
 80117b6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d00e      	beq.n	80117da <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80117c2:	f003 0308 	and.w	r3, r3, #8
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d007      	beq.n	80117da <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	3304      	adds	r3, #4
 80117ce:	4619      	mov	r1, r3
 80117d0:	6878      	ldr	r0, [r7, #4]
 80117d2:	f008 fa8b 	bl	8019cec <etharp_request>
 80117d6:	e000      	b.n	80117da <netif_issue_reports+0x6e>
    return;
 80117d8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80117da:	3708      	adds	r7, #8
 80117dc:	46bd      	mov	sp, r7
 80117de:	bd80      	pop	{r7, pc}
 80117e0:	0801ddd8 	.word	0x0801ddd8
 80117e4:	0801df7c 	.word	0x0801df7c
 80117e8:	0801de28 	.word	0x0801de28

080117ec <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80117ec:	b580      	push	{r7, lr}
 80117ee:	b082      	sub	sp, #8
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d107      	bne.n	801180a <netif_set_down+0x1e>
 80117fa:	4b12      	ldr	r3, [pc, #72]	; (8011844 <netif_set_down+0x58>)
 80117fc:	f240 329b 	movw	r2, #923	; 0x39b
 8011800:	4911      	ldr	r1, [pc, #68]	; (8011848 <netif_set_down+0x5c>)
 8011802:	4812      	ldr	r0, [pc, #72]	; (801184c <netif_set_down+0x60>)
 8011804:	f009 fffe 	bl	801b804 <iprintf>
 8011808:	e019      	b.n	801183e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011810:	f003 0301 	and.w	r3, r3, #1
 8011814:	2b00      	cmp	r3, #0
 8011816:	d012      	beq.n	801183e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801181e:	f023 0301 	bic.w	r3, r3, #1
 8011822:	b2da      	uxtb	r2, r3
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011830:	f003 0308 	and.w	r3, r3, #8
 8011834:	2b00      	cmp	r3, #0
 8011836:	d002      	beq.n	801183e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8011838:	6878      	ldr	r0, [r7, #4]
 801183a:	f007 fe15 	bl	8019468 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801183e:	3708      	adds	r7, #8
 8011840:	46bd      	mov	sp, r7
 8011842:	bd80      	pop	{r7, pc}
 8011844:	0801ddd8 	.word	0x0801ddd8
 8011848:	0801dfa0 	.word	0x0801dfa0
 801184c:	0801de28 	.word	0x0801de28

08011850 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b082      	sub	sp, #8
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d107      	bne.n	801186e <netif_set_link_up+0x1e>
 801185e:	4b13      	ldr	r3, [pc, #76]	; (80118ac <netif_set_link_up+0x5c>)
 8011860:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8011864:	4912      	ldr	r1, [pc, #72]	; (80118b0 <netif_set_link_up+0x60>)
 8011866:	4813      	ldr	r0, [pc, #76]	; (80118b4 <netif_set_link_up+0x64>)
 8011868:	f009 ffcc 	bl	801b804 <iprintf>
 801186c:	e01b      	b.n	80118a6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011874:	f003 0304 	and.w	r3, r3, #4
 8011878:	2b00      	cmp	r3, #0
 801187a:	d114      	bne.n	80118a6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011882:	f043 0304 	orr.w	r3, r3, #4
 8011886:	b2da      	uxtb	r2, r3
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801188e:	2103      	movs	r1, #3
 8011890:	6878      	ldr	r0, [r7, #4]
 8011892:	f7ff ff6b 	bl	801176c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	69db      	ldr	r3, [r3, #28]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d003      	beq.n	80118a6 <netif_set_link_up+0x56>
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	69db      	ldr	r3, [r3, #28]
 80118a2:	6878      	ldr	r0, [r7, #4]
 80118a4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80118a6:	3708      	adds	r7, #8
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd80      	pop	{r7, pc}
 80118ac:	0801ddd8 	.word	0x0801ddd8
 80118b0:	0801dfc0 	.word	0x0801dfc0
 80118b4:	0801de28 	.word	0x0801de28

080118b8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b082      	sub	sp, #8
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d107      	bne.n	80118d6 <netif_set_link_down+0x1e>
 80118c6:	4b11      	ldr	r3, [pc, #68]	; (801190c <netif_set_link_down+0x54>)
 80118c8:	f240 4206 	movw	r2, #1030	; 0x406
 80118cc:	4910      	ldr	r1, [pc, #64]	; (8011910 <netif_set_link_down+0x58>)
 80118ce:	4811      	ldr	r0, [pc, #68]	; (8011914 <netif_set_link_down+0x5c>)
 80118d0:	f009 ff98 	bl	801b804 <iprintf>
 80118d4:	e017      	b.n	8011906 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80118dc:	f003 0304 	and.w	r3, r3, #4
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d010      	beq.n	8011906 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80118ea:	f023 0304 	bic.w	r3, r3, #4
 80118ee:	b2da      	uxtb	r2, r3
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	69db      	ldr	r3, [r3, #28]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d003      	beq.n	8011906 <netif_set_link_down+0x4e>
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	69db      	ldr	r3, [r3, #28]
 8011902:	6878      	ldr	r0, [r7, #4]
 8011904:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011906:	3708      	adds	r7, #8
 8011908:	46bd      	mov	sp, r7
 801190a:	bd80      	pop	{r7, pc}
 801190c:	0801ddd8 	.word	0x0801ddd8
 8011910:	0801dfe4 	.word	0x0801dfe4
 8011914:	0801de28 	.word	0x0801de28

08011918 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8011918:	b480      	push	{r7}
 801191a:	b083      	sub	sp, #12
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
 8011920:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d002      	beq.n	801192e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	683a      	ldr	r2, [r7, #0]
 801192c:	61da      	str	r2, [r3, #28]
  }
}
 801192e:	bf00      	nop
 8011930:	370c      	adds	r7, #12
 8011932:	46bd      	mov	sp, r7
 8011934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011938:	4770      	bx	lr

0801193a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801193a:	b480      	push	{r7}
 801193c:	b085      	sub	sp, #20
 801193e:	af00      	add	r7, sp, #0
 8011940:	60f8      	str	r0, [r7, #12]
 8011942:	60b9      	str	r1, [r7, #8]
 8011944:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8011946:	f06f 030b 	mvn.w	r3, #11
}
 801194a:	4618      	mov	r0, r3
 801194c:	3714      	adds	r7, #20
 801194e:	46bd      	mov	sp, r7
 8011950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011954:	4770      	bx	lr
	...

08011958 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8011958:	b480      	push	{r7}
 801195a:	b085      	sub	sp, #20
 801195c:	af00      	add	r7, sp, #0
 801195e:	4603      	mov	r3, r0
 8011960:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8011962:	79fb      	ldrb	r3, [r7, #7]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d013      	beq.n	8011990 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8011968:	4b0d      	ldr	r3, [pc, #52]	; (80119a0 <netif_get_by_index+0x48>)
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	60fb      	str	r3, [r7, #12]
 801196e:	e00c      	b.n	801198a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011976:	3301      	adds	r3, #1
 8011978:	b2db      	uxtb	r3, r3
 801197a:	79fa      	ldrb	r2, [r7, #7]
 801197c:	429a      	cmp	r2, r3
 801197e:	d101      	bne.n	8011984 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	e006      	b.n	8011992 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	60fb      	str	r3, [r7, #12]
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d1ef      	bne.n	8011970 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8011990:	2300      	movs	r3, #0
}
 8011992:	4618      	mov	r0, r3
 8011994:	3714      	adds	r7, #20
 8011996:	46bd      	mov	sp, r7
 8011998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199c:	4770      	bx	lr
 801199e:	bf00      	nop
 80119a0:	20011080 	.word	0x20011080

080119a4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b082      	sub	sp, #8
 80119a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80119aa:	f009 fec3 	bl	801b734 <sys_arch_protect>
 80119ae:	6038      	str	r0, [r7, #0]
 80119b0:	4b0d      	ldr	r3, [pc, #52]	; (80119e8 <pbuf_free_ooseq+0x44>)
 80119b2:	2200      	movs	r2, #0
 80119b4:	701a      	strb	r2, [r3, #0]
 80119b6:	6838      	ldr	r0, [r7, #0]
 80119b8:	f009 feca 	bl	801b750 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80119bc:	4b0b      	ldr	r3, [pc, #44]	; (80119ec <pbuf_free_ooseq+0x48>)
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	607b      	str	r3, [r7, #4]
 80119c2:	e00a      	b.n	80119da <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d003      	beq.n	80119d4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80119cc:	6878      	ldr	r0, [r7, #4]
 80119ce:	f002 fbab 	bl	8014128 <tcp_free_ooseq>
      return;
 80119d2:	e005      	b.n	80119e0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	68db      	ldr	r3, [r3, #12]
 80119d8:	607b      	str	r3, [r7, #4]
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d1f1      	bne.n	80119c4 <pbuf_free_ooseq+0x20>
    }
  }
}
 80119e0:	3708      	adds	r7, #8
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd80      	pop	{r7, pc}
 80119e6:	bf00      	nop
 80119e8:	20011089 	.word	0x20011089
 80119ec:	20011098 	.word	0x20011098

080119f0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b082      	sub	sp, #8
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80119f8:	f7ff ffd4 	bl	80119a4 <pbuf_free_ooseq>
}
 80119fc:	bf00      	nop
 80119fe:	3708      	adds	r7, #8
 8011a00:	46bd      	mov	sp, r7
 8011a02:	bd80      	pop	{r7, pc}

08011a04 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b082      	sub	sp, #8
 8011a08:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8011a0a:	f009 fe93 	bl	801b734 <sys_arch_protect>
 8011a0e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8011a10:	4b0f      	ldr	r3, [pc, #60]	; (8011a50 <pbuf_pool_is_empty+0x4c>)
 8011a12:	781b      	ldrb	r3, [r3, #0]
 8011a14:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8011a16:	4b0e      	ldr	r3, [pc, #56]	; (8011a50 <pbuf_pool_is_empty+0x4c>)
 8011a18:	2201      	movs	r2, #1
 8011a1a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8011a1c:	6878      	ldr	r0, [r7, #4]
 8011a1e:	f009 fe97 	bl	801b750 <sys_arch_unprotect>

  if (!queued) {
 8011a22:	78fb      	ldrb	r3, [r7, #3]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d10f      	bne.n	8011a48 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8011a28:	2100      	movs	r1, #0
 8011a2a:	480a      	ldr	r0, [pc, #40]	; (8011a54 <pbuf_pool_is_empty+0x50>)
 8011a2c:	f7fe fe90 	bl	8010750 <tcpip_try_callback>
 8011a30:	4603      	mov	r3, r0
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d008      	beq.n	8011a48 <pbuf_pool_is_empty+0x44>
 8011a36:	f009 fe7d 	bl	801b734 <sys_arch_protect>
 8011a3a:	6078      	str	r0, [r7, #4]
 8011a3c:	4b04      	ldr	r3, [pc, #16]	; (8011a50 <pbuf_pool_is_empty+0x4c>)
 8011a3e:	2200      	movs	r2, #0
 8011a40:	701a      	strb	r2, [r3, #0]
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f009 fe84 	bl	801b750 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8011a48:	bf00      	nop
 8011a4a:	3708      	adds	r7, #8
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	bd80      	pop	{r7, pc}
 8011a50:	20011089 	.word	0x20011089
 8011a54:	080119f1 	.word	0x080119f1

08011a58 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8011a58:	b480      	push	{r7}
 8011a5a:	b085      	sub	sp, #20
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	60f8      	str	r0, [r7, #12]
 8011a60:	60b9      	str	r1, [r7, #8]
 8011a62:	4611      	mov	r1, r2
 8011a64:	461a      	mov	r2, r3
 8011a66:	460b      	mov	r3, r1
 8011a68:	80fb      	strh	r3, [r7, #6]
 8011a6a:	4613      	mov	r3, r2
 8011a6c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	2200      	movs	r2, #0
 8011a72:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	68ba      	ldr	r2, [r7, #8]
 8011a78:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	88fa      	ldrh	r2, [r7, #6]
 8011a7e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	88ba      	ldrh	r2, [r7, #4]
 8011a84:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8011a86:	8b3b      	ldrh	r3, [r7, #24]
 8011a88:	b2da      	uxtb	r2, r3
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	7f3a      	ldrb	r2, [r7, #28]
 8011a92:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	2201      	movs	r2, #1
 8011a98:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	2200      	movs	r2, #0
 8011a9e:	73da      	strb	r2, [r3, #15]
}
 8011aa0:	bf00      	nop
 8011aa2:	3714      	adds	r7, #20
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aaa:	4770      	bx	lr

08011aac <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8011aac:	b580      	push	{r7, lr}
 8011aae:	b08c      	sub	sp, #48	; 0x30
 8011ab0:	af02      	add	r7, sp, #8
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	71fb      	strb	r3, [r7, #7]
 8011ab6:	460b      	mov	r3, r1
 8011ab8:	80bb      	strh	r3, [r7, #4]
 8011aba:	4613      	mov	r3, r2
 8011abc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8011abe:	79fb      	ldrb	r3, [r7, #7]
 8011ac0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8011ac2:	887b      	ldrh	r3, [r7, #2]
 8011ac4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8011ac8:	d07f      	beq.n	8011bca <pbuf_alloc+0x11e>
 8011aca:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8011ace:	f300 80c8 	bgt.w	8011c62 <pbuf_alloc+0x1b6>
 8011ad2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8011ad6:	d010      	beq.n	8011afa <pbuf_alloc+0x4e>
 8011ad8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8011adc:	f300 80c1 	bgt.w	8011c62 <pbuf_alloc+0x1b6>
 8011ae0:	2b01      	cmp	r3, #1
 8011ae2:	d002      	beq.n	8011aea <pbuf_alloc+0x3e>
 8011ae4:	2b41      	cmp	r3, #65	; 0x41
 8011ae6:	f040 80bc 	bne.w	8011c62 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8011aea:	887a      	ldrh	r2, [r7, #2]
 8011aec:	88bb      	ldrh	r3, [r7, #4]
 8011aee:	4619      	mov	r1, r3
 8011af0:	2000      	movs	r0, #0
 8011af2:	f000 f8d1 	bl	8011c98 <pbuf_alloc_reference>
 8011af6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8011af8:	e0bd      	b.n	8011c76 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8011afa:	2300      	movs	r3, #0
 8011afc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8011afe:	2300      	movs	r3, #0
 8011b00:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8011b02:	88bb      	ldrh	r3, [r7, #4]
 8011b04:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8011b06:	200c      	movs	r0, #12
 8011b08:	f7ff fb9a 	bl	8011240 <memp_malloc>
 8011b0c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8011b0e:	693b      	ldr	r3, [r7, #16]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d109      	bne.n	8011b28 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8011b14:	f7ff ff76 	bl	8011a04 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8011b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d002      	beq.n	8011b24 <pbuf_alloc+0x78>
            pbuf_free(p);
 8011b1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b20:	f000 fada 	bl	80120d8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8011b24:	2300      	movs	r3, #0
 8011b26:	e0a7      	b.n	8011c78 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8011b28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b2a:	3303      	adds	r3, #3
 8011b2c:	b29b      	uxth	r3, r3
 8011b2e:	f023 0303 	bic.w	r3, r3, #3
 8011b32:	b29b      	uxth	r3, r3
 8011b34:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8011b38:	b29b      	uxth	r3, r3
 8011b3a:	8b7a      	ldrh	r2, [r7, #26]
 8011b3c:	4293      	cmp	r3, r2
 8011b3e:	bf28      	it	cs
 8011b40:	4613      	movcs	r3, r2
 8011b42:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8011b44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b46:	3310      	adds	r3, #16
 8011b48:	693a      	ldr	r2, [r7, #16]
 8011b4a:	4413      	add	r3, r2
 8011b4c:	3303      	adds	r3, #3
 8011b4e:	f023 0303 	bic.w	r3, r3, #3
 8011b52:	4618      	mov	r0, r3
 8011b54:	89f9      	ldrh	r1, [r7, #14]
 8011b56:	8b7a      	ldrh	r2, [r7, #26]
 8011b58:	2300      	movs	r3, #0
 8011b5a:	9301      	str	r3, [sp, #4]
 8011b5c:	887b      	ldrh	r3, [r7, #2]
 8011b5e:	9300      	str	r3, [sp, #0]
 8011b60:	460b      	mov	r3, r1
 8011b62:	4601      	mov	r1, r0
 8011b64:	6938      	ldr	r0, [r7, #16]
 8011b66:	f7ff ff77 	bl	8011a58 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8011b6a:	693b      	ldr	r3, [r7, #16]
 8011b6c:	685b      	ldr	r3, [r3, #4]
 8011b6e:	f003 0303 	and.w	r3, r3, #3
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d006      	beq.n	8011b84 <pbuf_alloc+0xd8>
 8011b76:	4b42      	ldr	r3, [pc, #264]	; (8011c80 <pbuf_alloc+0x1d4>)
 8011b78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011b7c:	4941      	ldr	r1, [pc, #260]	; (8011c84 <pbuf_alloc+0x1d8>)
 8011b7e:	4842      	ldr	r0, [pc, #264]	; (8011c88 <pbuf_alloc+0x1dc>)
 8011b80:	f009 fe40 	bl	801b804 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8011b84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b86:	3303      	adds	r3, #3
 8011b88:	f023 0303 	bic.w	r3, r3, #3
 8011b8c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8011b90:	d106      	bne.n	8011ba0 <pbuf_alloc+0xf4>
 8011b92:	4b3b      	ldr	r3, [pc, #236]	; (8011c80 <pbuf_alloc+0x1d4>)
 8011b94:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011b98:	493c      	ldr	r1, [pc, #240]	; (8011c8c <pbuf_alloc+0x1e0>)
 8011b9a:	483b      	ldr	r0, [pc, #236]	; (8011c88 <pbuf_alloc+0x1dc>)
 8011b9c:	f009 fe32 	bl	801b804 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8011ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d102      	bne.n	8011bac <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8011ba6:	693b      	ldr	r3, [r7, #16]
 8011ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8011baa:	e002      	b.n	8011bb2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8011bac:	69fb      	ldr	r3, [r7, #28]
 8011bae:	693a      	ldr	r2, [r7, #16]
 8011bb0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8011bb2:	693b      	ldr	r3, [r7, #16]
 8011bb4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8011bb6:	8b7a      	ldrh	r2, [r7, #26]
 8011bb8:	89fb      	ldrh	r3, [r7, #14]
 8011bba:	1ad3      	subs	r3, r2, r3
 8011bbc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8011bc2:	8b7b      	ldrh	r3, [r7, #26]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d19e      	bne.n	8011b06 <pbuf_alloc+0x5a>
      break;
 8011bc8:	e055      	b.n	8011c76 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8011bca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011bcc:	3303      	adds	r3, #3
 8011bce:	b29b      	uxth	r3, r3
 8011bd0:	f023 0303 	bic.w	r3, r3, #3
 8011bd4:	b29a      	uxth	r2, r3
 8011bd6:	88bb      	ldrh	r3, [r7, #4]
 8011bd8:	3303      	adds	r3, #3
 8011bda:	b29b      	uxth	r3, r3
 8011bdc:	f023 0303 	bic.w	r3, r3, #3
 8011be0:	b29b      	uxth	r3, r3
 8011be2:	4413      	add	r3, r2
 8011be4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8011be6:	8b3b      	ldrh	r3, [r7, #24]
 8011be8:	3310      	adds	r3, #16
 8011bea:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011bec:	8b3a      	ldrh	r2, [r7, #24]
 8011bee:	88bb      	ldrh	r3, [r7, #4]
 8011bf0:	3303      	adds	r3, #3
 8011bf2:	f023 0303 	bic.w	r3, r3, #3
 8011bf6:	429a      	cmp	r2, r3
 8011bf8:	d306      	bcc.n	8011c08 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8011bfa:	8afa      	ldrh	r2, [r7, #22]
 8011bfc:	88bb      	ldrh	r3, [r7, #4]
 8011bfe:	3303      	adds	r3, #3
 8011c00:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011c04:	429a      	cmp	r2, r3
 8011c06:	d201      	bcs.n	8011c0c <pbuf_alloc+0x160>
        return NULL;
 8011c08:	2300      	movs	r3, #0
 8011c0a:	e035      	b.n	8011c78 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8011c0c:	8afb      	ldrh	r3, [r7, #22]
 8011c0e:	4618      	mov	r0, r3
 8011c10:	f7ff f972 	bl	8010ef8 <mem_malloc>
 8011c14:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8011c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d101      	bne.n	8011c20 <pbuf_alloc+0x174>
        return NULL;
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	e02b      	b.n	8011c78 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8011c20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011c22:	3310      	adds	r3, #16
 8011c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c26:	4413      	add	r3, r2
 8011c28:	3303      	adds	r3, #3
 8011c2a:	f023 0303 	bic.w	r3, r3, #3
 8011c2e:	4618      	mov	r0, r3
 8011c30:	88b9      	ldrh	r1, [r7, #4]
 8011c32:	88ba      	ldrh	r2, [r7, #4]
 8011c34:	2300      	movs	r3, #0
 8011c36:	9301      	str	r3, [sp, #4]
 8011c38:	887b      	ldrh	r3, [r7, #2]
 8011c3a:	9300      	str	r3, [sp, #0]
 8011c3c:	460b      	mov	r3, r1
 8011c3e:	4601      	mov	r1, r0
 8011c40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c42:	f7ff ff09 	bl	8011a58 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8011c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c48:	685b      	ldr	r3, [r3, #4]
 8011c4a:	f003 0303 	and.w	r3, r3, #3
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d010      	beq.n	8011c74 <pbuf_alloc+0x1c8>
 8011c52:	4b0b      	ldr	r3, [pc, #44]	; (8011c80 <pbuf_alloc+0x1d4>)
 8011c54:	f44f 7291 	mov.w	r2, #290	; 0x122
 8011c58:	490d      	ldr	r1, [pc, #52]	; (8011c90 <pbuf_alloc+0x1e4>)
 8011c5a:	480b      	ldr	r0, [pc, #44]	; (8011c88 <pbuf_alloc+0x1dc>)
 8011c5c:	f009 fdd2 	bl	801b804 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8011c60:	e008      	b.n	8011c74 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8011c62:	4b07      	ldr	r3, [pc, #28]	; (8011c80 <pbuf_alloc+0x1d4>)
 8011c64:	f240 1227 	movw	r2, #295	; 0x127
 8011c68:	490a      	ldr	r1, [pc, #40]	; (8011c94 <pbuf_alloc+0x1e8>)
 8011c6a:	4807      	ldr	r0, [pc, #28]	; (8011c88 <pbuf_alloc+0x1dc>)
 8011c6c:	f009 fdca 	bl	801b804 <iprintf>
      return NULL;
 8011c70:	2300      	movs	r3, #0
 8011c72:	e001      	b.n	8011c78 <pbuf_alloc+0x1cc>
      break;
 8011c74:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8011c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011c78:	4618      	mov	r0, r3
 8011c7a:	3728      	adds	r7, #40	; 0x28
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	bd80      	pop	{r7, pc}
 8011c80:	0801e008 	.word	0x0801e008
 8011c84:	0801e038 	.word	0x0801e038
 8011c88:	0801e068 	.word	0x0801e068
 8011c8c:	0801e090 	.word	0x0801e090
 8011c90:	0801e0c4 	.word	0x0801e0c4
 8011c94:	0801e0f0 	.word	0x0801e0f0

08011c98 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b086      	sub	sp, #24
 8011c9c:	af02      	add	r7, sp, #8
 8011c9e:	6078      	str	r0, [r7, #4]
 8011ca0:	460b      	mov	r3, r1
 8011ca2:	807b      	strh	r3, [r7, #2]
 8011ca4:	4613      	mov	r3, r2
 8011ca6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8011ca8:	883b      	ldrh	r3, [r7, #0]
 8011caa:	2b41      	cmp	r3, #65	; 0x41
 8011cac:	d009      	beq.n	8011cc2 <pbuf_alloc_reference+0x2a>
 8011cae:	883b      	ldrh	r3, [r7, #0]
 8011cb0:	2b01      	cmp	r3, #1
 8011cb2:	d006      	beq.n	8011cc2 <pbuf_alloc_reference+0x2a>
 8011cb4:	4b0f      	ldr	r3, [pc, #60]	; (8011cf4 <pbuf_alloc_reference+0x5c>)
 8011cb6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8011cba:	490f      	ldr	r1, [pc, #60]	; (8011cf8 <pbuf_alloc_reference+0x60>)
 8011cbc:	480f      	ldr	r0, [pc, #60]	; (8011cfc <pbuf_alloc_reference+0x64>)
 8011cbe:	f009 fda1 	bl	801b804 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8011cc2:	200b      	movs	r0, #11
 8011cc4:	f7ff fabc 	bl	8011240 <memp_malloc>
 8011cc8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d101      	bne.n	8011cd4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	e00b      	b.n	8011cec <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8011cd4:	8879      	ldrh	r1, [r7, #2]
 8011cd6:	887a      	ldrh	r2, [r7, #2]
 8011cd8:	2300      	movs	r3, #0
 8011cda:	9301      	str	r3, [sp, #4]
 8011cdc:	883b      	ldrh	r3, [r7, #0]
 8011cde:	9300      	str	r3, [sp, #0]
 8011ce0:	460b      	mov	r3, r1
 8011ce2:	6879      	ldr	r1, [r7, #4]
 8011ce4:	68f8      	ldr	r0, [r7, #12]
 8011ce6:	f7ff feb7 	bl	8011a58 <pbuf_init_alloced_pbuf>
  return p;
 8011cea:	68fb      	ldr	r3, [r7, #12]
}
 8011cec:	4618      	mov	r0, r3
 8011cee:	3710      	adds	r7, #16
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	bd80      	pop	{r7, pc}
 8011cf4:	0801e008 	.word	0x0801e008
 8011cf8:	0801e10c 	.word	0x0801e10c
 8011cfc:	0801e068 	.word	0x0801e068

08011d00 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b088      	sub	sp, #32
 8011d04:	af02      	add	r7, sp, #8
 8011d06:	607b      	str	r3, [r7, #4]
 8011d08:	4603      	mov	r3, r0
 8011d0a:	73fb      	strb	r3, [r7, #15]
 8011d0c:	460b      	mov	r3, r1
 8011d0e:	81bb      	strh	r3, [r7, #12]
 8011d10:	4613      	mov	r3, r2
 8011d12:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8011d14:	7bfb      	ldrb	r3, [r7, #15]
 8011d16:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8011d18:	8a7b      	ldrh	r3, [r7, #18]
 8011d1a:	3303      	adds	r3, #3
 8011d1c:	f023 0203 	bic.w	r2, r3, #3
 8011d20:	89bb      	ldrh	r3, [r7, #12]
 8011d22:	441a      	add	r2, r3
 8011d24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011d26:	429a      	cmp	r2, r3
 8011d28:	d901      	bls.n	8011d2e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	e018      	b.n	8011d60 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8011d2e:	6a3b      	ldr	r3, [r7, #32]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d007      	beq.n	8011d44 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8011d34:	8a7b      	ldrh	r3, [r7, #18]
 8011d36:	3303      	adds	r3, #3
 8011d38:	f023 0303 	bic.w	r3, r3, #3
 8011d3c:	6a3a      	ldr	r2, [r7, #32]
 8011d3e:	4413      	add	r3, r2
 8011d40:	617b      	str	r3, [r7, #20]
 8011d42:	e001      	b.n	8011d48 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8011d44:	2300      	movs	r3, #0
 8011d46:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8011d48:	6878      	ldr	r0, [r7, #4]
 8011d4a:	89b9      	ldrh	r1, [r7, #12]
 8011d4c:	89ba      	ldrh	r2, [r7, #12]
 8011d4e:	2302      	movs	r3, #2
 8011d50:	9301      	str	r3, [sp, #4]
 8011d52:	897b      	ldrh	r3, [r7, #10]
 8011d54:	9300      	str	r3, [sp, #0]
 8011d56:	460b      	mov	r3, r1
 8011d58:	6979      	ldr	r1, [r7, #20]
 8011d5a:	f7ff fe7d 	bl	8011a58 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8011d5e:	687b      	ldr	r3, [r7, #4]
}
 8011d60:	4618      	mov	r0, r3
 8011d62:	3718      	adds	r7, #24
 8011d64:	46bd      	mov	sp, r7
 8011d66:	bd80      	pop	{r7, pc}

08011d68 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b084      	sub	sp, #16
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
 8011d70:	460b      	mov	r3, r1
 8011d72:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d106      	bne.n	8011d88 <pbuf_realloc+0x20>
 8011d7a:	4b3a      	ldr	r3, [pc, #232]	; (8011e64 <pbuf_realloc+0xfc>)
 8011d7c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8011d80:	4939      	ldr	r1, [pc, #228]	; (8011e68 <pbuf_realloc+0x100>)
 8011d82:	483a      	ldr	r0, [pc, #232]	; (8011e6c <pbuf_realloc+0x104>)
 8011d84:	f009 fd3e 	bl	801b804 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	891b      	ldrh	r3, [r3, #8]
 8011d8c:	887a      	ldrh	r2, [r7, #2]
 8011d8e:	429a      	cmp	r2, r3
 8011d90:	d263      	bcs.n	8011e5a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	891a      	ldrh	r2, [r3, #8]
 8011d96:	887b      	ldrh	r3, [r7, #2]
 8011d98:	1ad3      	subs	r3, r2, r3
 8011d9a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8011d9c:	887b      	ldrh	r3, [r7, #2]
 8011d9e:	817b      	strh	r3, [r7, #10]
  q = p;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8011da4:	e018      	b.n	8011dd8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	895b      	ldrh	r3, [r3, #10]
 8011daa:	897a      	ldrh	r2, [r7, #10]
 8011dac:	1ad3      	subs	r3, r2, r3
 8011dae:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	891a      	ldrh	r2, [r3, #8]
 8011db4:	893b      	ldrh	r3, [r7, #8]
 8011db6:	1ad3      	subs	r3, r2, r3
 8011db8:	b29a      	uxth	r2, r3
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d106      	bne.n	8011dd8 <pbuf_realloc+0x70>
 8011dca:	4b26      	ldr	r3, [pc, #152]	; (8011e64 <pbuf_realloc+0xfc>)
 8011dcc:	f240 12af 	movw	r2, #431	; 0x1af
 8011dd0:	4927      	ldr	r1, [pc, #156]	; (8011e70 <pbuf_realloc+0x108>)
 8011dd2:	4826      	ldr	r0, [pc, #152]	; (8011e6c <pbuf_realloc+0x104>)
 8011dd4:	f009 fd16 	bl	801b804 <iprintf>
  while (rem_len > q->len) {
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	895b      	ldrh	r3, [r3, #10]
 8011ddc:	897a      	ldrh	r2, [r7, #10]
 8011dde:	429a      	cmp	r2, r3
 8011de0:	d8e1      	bhi.n	8011da6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	7b1b      	ldrb	r3, [r3, #12]
 8011de6:	f003 030f 	and.w	r3, r3, #15
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d121      	bne.n	8011e32 <pbuf_realloc+0xca>
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	895b      	ldrh	r3, [r3, #10]
 8011df2:	897a      	ldrh	r2, [r7, #10]
 8011df4:	429a      	cmp	r2, r3
 8011df6:	d01c      	beq.n	8011e32 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	7b5b      	ldrb	r3, [r3, #13]
 8011dfc:	f003 0302 	and.w	r3, r3, #2
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d116      	bne.n	8011e32 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	685a      	ldr	r2, [r3, #4]
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	1ad3      	subs	r3, r2, r3
 8011e0c:	b29a      	uxth	r2, r3
 8011e0e:	897b      	ldrh	r3, [r7, #10]
 8011e10:	4413      	add	r3, r2
 8011e12:	b29b      	uxth	r3, r3
 8011e14:	4619      	mov	r1, r3
 8011e16:	68f8      	ldr	r0, [r7, #12]
 8011e18:	f7fe ff64 	bl	8010ce4 <mem_trim>
 8011e1c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d106      	bne.n	8011e32 <pbuf_realloc+0xca>
 8011e24:	4b0f      	ldr	r3, [pc, #60]	; (8011e64 <pbuf_realloc+0xfc>)
 8011e26:	f240 12bd 	movw	r2, #445	; 0x1bd
 8011e2a:	4912      	ldr	r1, [pc, #72]	; (8011e74 <pbuf_realloc+0x10c>)
 8011e2c:	480f      	ldr	r0, [pc, #60]	; (8011e6c <pbuf_realloc+0x104>)
 8011e2e:	f009 fce9 	bl	801b804 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	897a      	ldrh	r2, [r7, #10]
 8011e36:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	895a      	ldrh	r2, [r3, #10]
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d004      	beq.n	8011e52 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	f000 f943 	bl	80120d8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	2200      	movs	r2, #0
 8011e56:	601a      	str	r2, [r3, #0]
 8011e58:	e000      	b.n	8011e5c <pbuf_realloc+0xf4>
    return;
 8011e5a:	bf00      	nop

}
 8011e5c:	3710      	adds	r7, #16
 8011e5e:	46bd      	mov	sp, r7
 8011e60:	bd80      	pop	{r7, pc}
 8011e62:	bf00      	nop
 8011e64:	0801e008 	.word	0x0801e008
 8011e68:	0801e120 	.word	0x0801e120
 8011e6c:	0801e068 	.word	0x0801e068
 8011e70:	0801e138 	.word	0x0801e138
 8011e74:	0801e150 	.word	0x0801e150

08011e78 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b086      	sub	sp, #24
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	60f8      	str	r0, [r7, #12]
 8011e80:	60b9      	str	r1, [r7, #8]
 8011e82:	4613      	mov	r3, r2
 8011e84:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d106      	bne.n	8011e9a <pbuf_add_header_impl+0x22>
 8011e8c:	4b2b      	ldr	r3, [pc, #172]	; (8011f3c <pbuf_add_header_impl+0xc4>)
 8011e8e:	f240 12df 	movw	r2, #479	; 0x1df
 8011e92:	492b      	ldr	r1, [pc, #172]	; (8011f40 <pbuf_add_header_impl+0xc8>)
 8011e94:	482b      	ldr	r0, [pc, #172]	; (8011f44 <pbuf_add_header_impl+0xcc>)
 8011e96:	f009 fcb5 	bl	801b804 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d003      	beq.n	8011ea8 <pbuf_add_header_impl+0x30>
 8011ea0:	68bb      	ldr	r3, [r7, #8]
 8011ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011ea6:	d301      	bcc.n	8011eac <pbuf_add_header_impl+0x34>
    return 1;
 8011ea8:	2301      	movs	r3, #1
 8011eaa:	e043      	b.n	8011f34 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8011eac:	68bb      	ldr	r3, [r7, #8]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d101      	bne.n	8011eb6 <pbuf_add_header_impl+0x3e>
    return 0;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	e03e      	b.n	8011f34 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8011eb6:	68bb      	ldr	r3, [r7, #8]
 8011eb8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	891a      	ldrh	r2, [r3, #8]
 8011ebe:	8a7b      	ldrh	r3, [r7, #18]
 8011ec0:	4413      	add	r3, r2
 8011ec2:	b29b      	uxth	r3, r3
 8011ec4:	8a7a      	ldrh	r2, [r7, #18]
 8011ec6:	429a      	cmp	r2, r3
 8011ec8:	d901      	bls.n	8011ece <pbuf_add_header_impl+0x56>
    return 1;
 8011eca:	2301      	movs	r3, #1
 8011ecc:	e032      	b.n	8011f34 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	7b1b      	ldrb	r3, [r3, #12]
 8011ed2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8011ed4:	8a3b      	ldrh	r3, [r7, #16]
 8011ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d00c      	beq.n	8011ef8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	685a      	ldr	r2, [r3, #4]
 8011ee2:	68bb      	ldr	r3, [r7, #8]
 8011ee4:	425b      	negs	r3, r3
 8011ee6:	4413      	add	r3, r2
 8011ee8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	3310      	adds	r3, #16
 8011eee:	697a      	ldr	r2, [r7, #20]
 8011ef0:	429a      	cmp	r2, r3
 8011ef2:	d20d      	bcs.n	8011f10 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8011ef4:	2301      	movs	r3, #1
 8011ef6:	e01d      	b.n	8011f34 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8011ef8:	79fb      	ldrb	r3, [r7, #7]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d006      	beq.n	8011f0c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	685a      	ldr	r2, [r3, #4]
 8011f02:	68bb      	ldr	r3, [r7, #8]
 8011f04:	425b      	negs	r3, r3
 8011f06:	4413      	add	r3, r2
 8011f08:	617b      	str	r3, [r7, #20]
 8011f0a:	e001      	b.n	8011f10 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8011f0c:	2301      	movs	r3, #1
 8011f0e:	e011      	b.n	8011f34 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	697a      	ldr	r2, [r7, #20]
 8011f14:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	895a      	ldrh	r2, [r3, #10]
 8011f1a:	8a7b      	ldrh	r3, [r7, #18]
 8011f1c:	4413      	add	r3, r2
 8011f1e:	b29a      	uxth	r2, r3
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	891a      	ldrh	r2, [r3, #8]
 8011f28:	8a7b      	ldrh	r3, [r7, #18]
 8011f2a:	4413      	add	r3, r2
 8011f2c:	b29a      	uxth	r2, r3
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	811a      	strh	r2, [r3, #8]


  return 0;
 8011f32:	2300      	movs	r3, #0
}
 8011f34:	4618      	mov	r0, r3
 8011f36:	3718      	adds	r7, #24
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd80      	pop	{r7, pc}
 8011f3c:	0801e008 	.word	0x0801e008
 8011f40:	0801e16c 	.word	0x0801e16c
 8011f44:	0801e068 	.word	0x0801e068

08011f48 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b082      	sub	sp, #8
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
 8011f50:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8011f52:	2200      	movs	r2, #0
 8011f54:	6839      	ldr	r1, [r7, #0]
 8011f56:	6878      	ldr	r0, [r7, #4]
 8011f58:	f7ff ff8e 	bl	8011e78 <pbuf_add_header_impl>
 8011f5c:	4603      	mov	r3, r0
}
 8011f5e:	4618      	mov	r0, r3
 8011f60:	3708      	adds	r7, #8
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}
	...

08011f68 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b084      	sub	sp, #16
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
 8011f70:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d106      	bne.n	8011f86 <pbuf_remove_header+0x1e>
 8011f78:	4b20      	ldr	r3, [pc, #128]	; (8011ffc <pbuf_remove_header+0x94>)
 8011f7a:	f240 224b 	movw	r2, #587	; 0x24b
 8011f7e:	4920      	ldr	r1, [pc, #128]	; (8012000 <pbuf_remove_header+0x98>)
 8011f80:	4820      	ldr	r0, [pc, #128]	; (8012004 <pbuf_remove_header+0x9c>)
 8011f82:	f009 fc3f 	bl	801b804 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d003      	beq.n	8011f94 <pbuf_remove_header+0x2c>
 8011f8c:	683b      	ldr	r3, [r7, #0]
 8011f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011f92:	d301      	bcc.n	8011f98 <pbuf_remove_header+0x30>
    return 1;
 8011f94:	2301      	movs	r3, #1
 8011f96:	e02c      	b.n	8011ff2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8011f98:	683b      	ldr	r3, [r7, #0]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d101      	bne.n	8011fa2 <pbuf_remove_header+0x3a>
    return 0;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	e027      	b.n	8011ff2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	895b      	ldrh	r3, [r3, #10]
 8011faa:	89fa      	ldrh	r2, [r7, #14]
 8011fac:	429a      	cmp	r2, r3
 8011fae:	d908      	bls.n	8011fc2 <pbuf_remove_header+0x5a>
 8011fb0:	4b12      	ldr	r3, [pc, #72]	; (8011ffc <pbuf_remove_header+0x94>)
 8011fb2:	f240 2255 	movw	r2, #597	; 0x255
 8011fb6:	4914      	ldr	r1, [pc, #80]	; (8012008 <pbuf_remove_header+0xa0>)
 8011fb8:	4812      	ldr	r0, [pc, #72]	; (8012004 <pbuf_remove_header+0x9c>)
 8011fba:	f009 fc23 	bl	801b804 <iprintf>
 8011fbe:	2301      	movs	r3, #1
 8011fc0:	e017      	b.n	8011ff2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	685b      	ldr	r3, [r3, #4]
 8011fc6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	685a      	ldr	r2, [r3, #4]
 8011fcc:	683b      	ldr	r3, [r7, #0]
 8011fce:	441a      	add	r2, r3
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	895a      	ldrh	r2, [r3, #10]
 8011fd8:	89fb      	ldrh	r3, [r7, #14]
 8011fda:	1ad3      	subs	r3, r2, r3
 8011fdc:	b29a      	uxth	r2, r3
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	891a      	ldrh	r2, [r3, #8]
 8011fe6:	89fb      	ldrh	r3, [r7, #14]
 8011fe8:	1ad3      	subs	r3, r2, r3
 8011fea:	b29a      	uxth	r2, r3
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8011ff0:	2300      	movs	r3, #0
}
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	3710      	adds	r7, #16
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	bd80      	pop	{r7, pc}
 8011ffa:	bf00      	nop
 8011ffc:	0801e008 	.word	0x0801e008
 8012000:	0801e16c 	.word	0x0801e16c
 8012004:	0801e068 	.word	0x0801e068
 8012008:	0801e178 	.word	0x0801e178

0801200c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801200c:	b580      	push	{r7, lr}
 801200e:	b082      	sub	sp, #8
 8012010:	af00      	add	r7, sp, #0
 8012012:	6078      	str	r0, [r7, #4]
 8012014:	460b      	mov	r3, r1
 8012016:	807b      	strh	r3, [r7, #2]
 8012018:	4613      	mov	r3, r2
 801201a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801201c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012020:	2b00      	cmp	r3, #0
 8012022:	da08      	bge.n	8012036 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8012024:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012028:	425b      	negs	r3, r3
 801202a:	4619      	mov	r1, r3
 801202c:	6878      	ldr	r0, [r7, #4]
 801202e:	f7ff ff9b 	bl	8011f68 <pbuf_remove_header>
 8012032:	4603      	mov	r3, r0
 8012034:	e007      	b.n	8012046 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8012036:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801203a:	787a      	ldrb	r2, [r7, #1]
 801203c:	4619      	mov	r1, r3
 801203e:	6878      	ldr	r0, [r7, #4]
 8012040:	f7ff ff1a 	bl	8011e78 <pbuf_add_header_impl>
 8012044:	4603      	mov	r3, r0
  }
}
 8012046:	4618      	mov	r0, r3
 8012048:	3708      	adds	r7, #8
 801204a:	46bd      	mov	sp, r7
 801204c:	bd80      	pop	{r7, pc}

0801204e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801204e:	b580      	push	{r7, lr}
 8012050:	b082      	sub	sp, #8
 8012052:	af00      	add	r7, sp, #0
 8012054:	6078      	str	r0, [r7, #4]
 8012056:	460b      	mov	r3, r1
 8012058:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801205a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801205e:	2201      	movs	r2, #1
 8012060:	4619      	mov	r1, r3
 8012062:	6878      	ldr	r0, [r7, #4]
 8012064:	f7ff ffd2 	bl	801200c <pbuf_header_impl>
 8012068:	4603      	mov	r3, r0
}
 801206a:	4618      	mov	r0, r3
 801206c:	3708      	adds	r7, #8
 801206e:	46bd      	mov	sp, r7
 8012070:	bd80      	pop	{r7, pc}

08012072 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 8012072:	b580      	push	{r7, lr}
 8012074:	b086      	sub	sp, #24
 8012076:	af00      	add	r7, sp, #0
 8012078:	6078      	str	r0, [r7, #4]
 801207a:	460b      	mov	r3, r1
 801207c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 8012082:	887b      	ldrh	r3, [r7, #2]
 8012084:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8012086:	e01c      	b.n	80120c2 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 8012088:	697b      	ldr	r3, [r7, #20]
 801208a:	895b      	ldrh	r3, [r3, #10]
 801208c:	8a7a      	ldrh	r2, [r7, #18]
 801208e:	429a      	cmp	r2, r3
 8012090:	d310      	bcc.n	80120b4 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 8012092:	697b      	ldr	r3, [r7, #20]
 8012094:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 8012096:	697b      	ldr	r3, [r7, #20]
 8012098:	895b      	ldrh	r3, [r3, #10]
 801209a:	8a7a      	ldrh	r2, [r7, #18]
 801209c:	1ad3      	subs	r3, r2, r3
 801209e:	827b      	strh	r3, [r7, #18]
      p = p->next;
 80120a0:	697b      	ldr	r3, [r7, #20]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	617b      	str	r3, [r7, #20]
      f->next = 0;
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	2200      	movs	r2, #0
 80120aa:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 80120ac:	68f8      	ldr	r0, [r7, #12]
 80120ae:	f000 f813 	bl	80120d8 <pbuf_free>
 80120b2:	e006      	b.n	80120c2 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 80120b4:	8a7b      	ldrh	r3, [r7, #18]
 80120b6:	4619      	mov	r1, r3
 80120b8:	6978      	ldr	r0, [r7, #20]
 80120ba:	f7ff ff55 	bl	8011f68 <pbuf_remove_header>
      free_left = 0;
 80120be:	2300      	movs	r3, #0
 80120c0:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 80120c2:	8a7b      	ldrh	r3, [r7, #18]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d002      	beq.n	80120ce <pbuf_free_header+0x5c>
 80120c8:	697b      	ldr	r3, [r7, #20]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d1dc      	bne.n	8012088 <pbuf_free_header+0x16>
    }
  }
  return p;
 80120ce:	697b      	ldr	r3, [r7, #20]
}
 80120d0:	4618      	mov	r0, r3
 80120d2:	3718      	adds	r7, #24
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bd80      	pop	{r7, pc}

080120d8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80120d8:	b580      	push	{r7, lr}
 80120da:	b088      	sub	sp, #32
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d10b      	bne.n	80120fe <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d106      	bne.n	80120fa <pbuf_free+0x22>
 80120ec:	4b3b      	ldr	r3, [pc, #236]	; (80121dc <pbuf_free+0x104>)
 80120ee:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80120f2:	493b      	ldr	r1, [pc, #236]	; (80121e0 <pbuf_free+0x108>)
 80120f4:	483b      	ldr	r0, [pc, #236]	; (80121e4 <pbuf_free+0x10c>)
 80120f6:	f009 fb85 	bl	801b804 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80120fa:	2300      	movs	r3, #0
 80120fc:	e069      	b.n	80121d2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80120fe:	2300      	movs	r3, #0
 8012100:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8012102:	e062      	b.n	80121ca <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8012104:	f009 fb16 	bl	801b734 <sys_arch_protect>
 8012108:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	7b9b      	ldrb	r3, [r3, #14]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d106      	bne.n	8012120 <pbuf_free+0x48>
 8012112:	4b32      	ldr	r3, [pc, #200]	; (80121dc <pbuf_free+0x104>)
 8012114:	f240 22f1 	movw	r2, #753	; 0x2f1
 8012118:	4933      	ldr	r1, [pc, #204]	; (80121e8 <pbuf_free+0x110>)
 801211a:	4832      	ldr	r0, [pc, #200]	; (80121e4 <pbuf_free+0x10c>)
 801211c:	f009 fb72 	bl	801b804 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	7b9b      	ldrb	r3, [r3, #14]
 8012124:	3b01      	subs	r3, #1
 8012126:	b2da      	uxtb	r2, r3
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	739a      	strb	r2, [r3, #14]
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	7b9b      	ldrb	r3, [r3, #14]
 8012130:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8012132:	69b8      	ldr	r0, [r7, #24]
 8012134:	f009 fb0c 	bl	801b750 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8012138:	7dfb      	ldrb	r3, [r7, #23]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d143      	bne.n	80121c6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	7b1b      	ldrb	r3, [r3, #12]
 8012148:	f003 030f 	and.w	r3, r3, #15
 801214c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	7b5b      	ldrb	r3, [r3, #13]
 8012152:	f003 0302 	and.w	r3, r3, #2
 8012156:	2b00      	cmp	r3, #0
 8012158:	d011      	beq.n	801217e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801215e:	68bb      	ldr	r3, [r7, #8]
 8012160:	691b      	ldr	r3, [r3, #16]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d106      	bne.n	8012174 <pbuf_free+0x9c>
 8012166:	4b1d      	ldr	r3, [pc, #116]	; (80121dc <pbuf_free+0x104>)
 8012168:	f240 22ff 	movw	r2, #767	; 0x2ff
 801216c:	491f      	ldr	r1, [pc, #124]	; (80121ec <pbuf_free+0x114>)
 801216e:	481d      	ldr	r0, [pc, #116]	; (80121e4 <pbuf_free+0x10c>)
 8012170:	f009 fb48 	bl	801b804 <iprintf>
        pc->custom_free_function(p);
 8012174:	68bb      	ldr	r3, [r7, #8]
 8012176:	691b      	ldr	r3, [r3, #16]
 8012178:	6878      	ldr	r0, [r7, #4]
 801217a:	4798      	blx	r3
 801217c:	e01d      	b.n	80121ba <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801217e:	7bfb      	ldrb	r3, [r7, #15]
 8012180:	2b02      	cmp	r3, #2
 8012182:	d104      	bne.n	801218e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8012184:	6879      	ldr	r1, [r7, #4]
 8012186:	200c      	movs	r0, #12
 8012188:	f7ff f8d0 	bl	801132c <memp_free>
 801218c:	e015      	b.n	80121ba <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801218e:	7bfb      	ldrb	r3, [r7, #15]
 8012190:	2b01      	cmp	r3, #1
 8012192:	d104      	bne.n	801219e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8012194:	6879      	ldr	r1, [r7, #4]
 8012196:	200b      	movs	r0, #11
 8012198:	f7ff f8c8 	bl	801132c <memp_free>
 801219c:	e00d      	b.n	80121ba <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801219e:	7bfb      	ldrb	r3, [r7, #15]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d103      	bne.n	80121ac <pbuf_free+0xd4>
          mem_free(p);
 80121a4:	6878      	ldr	r0, [r7, #4]
 80121a6:	f7fe fd0d 	bl	8010bc4 <mem_free>
 80121aa:	e006      	b.n	80121ba <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80121ac:	4b0b      	ldr	r3, [pc, #44]	; (80121dc <pbuf_free+0x104>)
 80121ae:	f240 320f 	movw	r2, #783	; 0x30f
 80121b2:	490f      	ldr	r1, [pc, #60]	; (80121f0 <pbuf_free+0x118>)
 80121b4:	480b      	ldr	r0, [pc, #44]	; (80121e4 <pbuf_free+0x10c>)
 80121b6:	f009 fb25 	bl	801b804 <iprintf>
        }
      }
      count++;
 80121ba:	7ffb      	ldrb	r3, [r7, #31]
 80121bc:	3301      	adds	r3, #1
 80121be:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80121c0:	693b      	ldr	r3, [r7, #16]
 80121c2:	607b      	str	r3, [r7, #4]
 80121c4:	e001      	b.n	80121ca <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80121c6:	2300      	movs	r3, #0
 80121c8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d199      	bne.n	8012104 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80121d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80121d2:	4618      	mov	r0, r3
 80121d4:	3720      	adds	r7, #32
 80121d6:	46bd      	mov	sp, r7
 80121d8:	bd80      	pop	{r7, pc}
 80121da:	bf00      	nop
 80121dc:	0801e008 	.word	0x0801e008
 80121e0:	0801e16c 	.word	0x0801e16c
 80121e4:	0801e068 	.word	0x0801e068
 80121e8:	0801e198 	.word	0x0801e198
 80121ec:	0801e1b0 	.word	0x0801e1b0
 80121f0:	0801e1d4 	.word	0x0801e1d4

080121f4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80121f4:	b480      	push	{r7}
 80121f6:	b085      	sub	sp, #20
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80121fc:	2300      	movs	r3, #0
 80121fe:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8012200:	e005      	b.n	801220e <pbuf_clen+0x1a>
    ++len;
 8012202:	89fb      	ldrh	r3, [r7, #14]
 8012204:	3301      	adds	r3, #1
 8012206:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d1f6      	bne.n	8012202 <pbuf_clen+0xe>
  }
  return len;
 8012214:	89fb      	ldrh	r3, [r7, #14]
}
 8012216:	4618      	mov	r0, r3
 8012218:	3714      	adds	r7, #20
 801221a:	46bd      	mov	sp, r7
 801221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012220:	4770      	bx	lr
	...

08012224 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b084      	sub	sp, #16
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d016      	beq.n	8012260 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8012232:	f009 fa7f 	bl	801b734 <sys_arch_protect>
 8012236:	60f8      	str	r0, [r7, #12]
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	7b9b      	ldrb	r3, [r3, #14]
 801223c:	3301      	adds	r3, #1
 801223e:	b2da      	uxtb	r2, r3
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	739a      	strb	r2, [r3, #14]
 8012244:	68f8      	ldr	r0, [r7, #12]
 8012246:	f009 fa83 	bl	801b750 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	7b9b      	ldrb	r3, [r3, #14]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d106      	bne.n	8012260 <pbuf_ref+0x3c>
 8012252:	4b05      	ldr	r3, [pc, #20]	; (8012268 <pbuf_ref+0x44>)
 8012254:	f240 3242 	movw	r2, #834	; 0x342
 8012258:	4904      	ldr	r1, [pc, #16]	; (801226c <pbuf_ref+0x48>)
 801225a:	4805      	ldr	r0, [pc, #20]	; (8012270 <pbuf_ref+0x4c>)
 801225c:	f009 fad2 	bl	801b804 <iprintf>
  }
}
 8012260:	bf00      	nop
 8012262:	3710      	adds	r7, #16
 8012264:	46bd      	mov	sp, r7
 8012266:	bd80      	pop	{r7, pc}
 8012268:	0801e008 	.word	0x0801e008
 801226c:	0801e1e8 	.word	0x0801e1e8
 8012270:	0801e068 	.word	0x0801e068

08012274 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b084      	sub	sp, #16
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
 801227c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d002      	beq.n	801228a <pbuf_cat+0x16>
 8012284:	683b      	ldr	r3, [r7, #0]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d107      	bne.n	801229a <pbuf_cat+0x26>
 801228a:	4b20      	ldr	r3, [pc, #128]	; (801230c <pbuf_cat+0x98>)
 801228c:	f240 3259 	movw	r2, #857	; 0x359
 8012290:	491f      	ldr	r1, [pc, #124]	; (8012310 <pbuf_cat+0x9c>)
 8012292:	4820      	ldr	r0, [pc, #128]	; (8012314 <pbuf_cat+0xa0>)
 8012294:	f009 fab6 	bl	801b804 <iprintf>
 8012298:	e034      	b.n	8012304 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	60fb      	str	r3, [r7, #12]
 801229e:	e00a      	b.n	80122b6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	891a      	ldrh	r2, [r3, #8]
 80122a4:	683b      	ldr	r3, [r7, #0]
 80122a6:	891b      	ldrh	r3, [r3, #8]
 80122a8:	4413      	add	r3, r2
 80122aa:	b29a      	uxth	r2, r3
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	60fb      	str	r3, [r7, #12]
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d1f0      	bne.n	80122a0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	891a      	ldrh	r2, [r3, #8]
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	895b      	ldrh	r3, [r3, #10]
 80122c6:	429a      	cmp	r2, r3
 80122c8:	d006      	beq.n	80122d8 <pbuf_cat+0x64>
 80122ca:	4b10      	ldr	r3, [pc, #64]	; (801230c <pbuf_cat+0x98>)
 80122cc:	f240 3262 	movw	r2, #866	; 0x362
 80122d0:	4911      	ldr	r1, [pc, #68]	; (8012318 <pbuf_cat+0xa4>)
 80122d2:	4810      	ldr	r0, [pc, #64]	; (8012314 <pbuf_cat+0xa0>)
 80122d4:	f009 fa96 	bl	801b804 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d006      	beq.n	80122ee <pbuf_cat+0x7a>
 80122e0:	4b0a      	ldr	r3, [pc, #40]	; (801230c <pbuf_cat+0x98>)
 80122e2:	f240 3263 	movw	r2, #867	; 0x363
 80122e6:	490d      	ldr	r1, [pc, #52]	; (801231c <pbuf_cat+0xa8>)
 80122e8:	480a      	ldr	r0, [pc, #40]	; (8012314 <pbuf_cat+0xa0>)
 80122ea:	f009 fa8b 	bl	801b804 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	891a      	ldrh	r2, [r3, #8]
 80122f2:	683b      	ldr	r3, [r7, #0]
 80122f4:	891b      	ldrh	r3, [r3, #8]
 80122f6:	4413      	add	r3, r2
 80122f8:	b29a      	uxth	r2, r3
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	683a      	ldr	r2, [r7, #0]
 8012302:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8012304:	3710      	adds	r7, #16
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}
 801230a:	bf00      	nop
 801230c:	0801e008 	.word	0x0801e008
 8012310:	0801e1fc 	.word	0x0801e1fc
 8012314:	0801e068 	.word	0x0801e068
 8012318:	0801e234 	.word	0x0801e234
 801231c:	0801e264 	.word	0x0801e264

08012320 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b086      	sub	sp, #24
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
 8012328:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801232a:	2300      	movs	r3, #0
 801232c:	617b      	str	r3, [r7, #20]
 801232e:	2300      	movs	r3, #0
 8012330:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d008      	beq.n	801234a <pbuf_copy+0x2a>
 8012338:	683b      	ldr	r3, [r7, #0]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d005      	beq.n	801234a <pbuf_copy+0x2a>
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	891a      	ldrh	r2, [r3, #8]
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	891b      	ldrh	r3, [r3, #8]
 8012346:	429a      	cmp	r2, r3
 8012348:	d209      	bcs.n	801235e <pbuf_copy+0x3e>
 801234a:	4b57      	ldr	r3, [pc, #348]	; (80124a8 <pbuf_copy+0x188>)
 801234c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8012350:	4956      	ldr	r1, [pc, #344]	; (80124ac <pbuf_copy+0x18c>)
 8012352:	4857      	ldr	r0, [pc, #348]	; (80124b0 <pbuf_copy+0x190>)
 8012354:	f009 fa56 	bl	801b804 <iprintf>
 8012358:	f06f 030f 	mvn.w	r3, #15
 801235c:	e09f      	b.n	801249e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	895b      	ldrh	r3, [r3, #10]
 8012362:	461a      	mov	r2, r3
 8012364:	697b      	ldr	r3, [r7, #20]
 8012366:	1ad2      	subs	r2, r2, r3
 8012368:	683b      	ldr	r3, [r7, #0]
 801236a:	895b      	ldrh	r3, [r3, #10]
 801236c:	4619      	mov	r1, r3
 801236e:	693b      	ldr	r3, [r7, #16]
 8012370:	1acb      	subs	r3, r1, r3
 8012372:	429a      	cmp	r2, r3
 8012374:	d306      	bcc.n	8012384 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8012376:	683b      	ldr	r3, [r7, #0]
 8012378:	895b      	ldrh	r3, [r3, #10]
 801237a:	461a      	mov	r2, r3
 801237c:	693b      	ldr	r3, [r7, #16]
 801237e:	1ad3      	subs	r3, r2, r3
 8012380:	60fb      	str	r3, [r7, #12]
 8012382:	e005      	b.n	8012390 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	895b      	ldrh	r3, [r3, #10]
 8012388:	461a      	mov	r2, r3
 801238a:	697b      	ldr	r3, [r7, #20]
 801238c:	1ad3      	subs	r3, r2, r3
 801238e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	685a      	ldr	r2, [r3, #4]
 8012394:	697b      	ldr	r3, [r7, #20]
 8012396:	18d0      	adds	r0, r2, r3
 8012398:	683b      	ldr	r3, [r7, #0]
 801239a:	685a      	ldr	r2, [r3, #4]
 801239c:	693b      	ldr	r3, [r7, #16]
 801239e:	4413      	add	r3, r2
 80123a0:	68fa      	ldr	r2, [r7, #12]
 80123a2:	4619      	mov	r1, r3
 80123a4:	f009 fa18 	bl	801b7d8 <memcpy>
    offset_to += len;
 80123a8:	697a      	ldr	r2, [r7, #20]
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	4413      	add	r3, r2
 80123ae:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80123b0:	693a      	ldr	r2, [r7, #16]
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	4413      	add	r3, r2
 80123b6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	895b      	ldrh	r3, [r3, #10]
 80123bc:	461a      	mov	r2, r3
 80123be:	697b      	ldr	r3, [r7, #20]
 80123c0:	4293      	cmp	r3, r2
 80123c2:	d906      	bls.n	80123d2 <pbuf_copy+0xb2>
 80123c4:	4b38      	ldr	r3, [pc, #224]	; (80124a8 <pbuf_copy+0x188>)
 80123c6:	f240 32d9 	movw	r2, #985	; 0x3d9
 80123ca:	493a      	ldr	r1, [pc, #232]	; (80124b4 <pbuf_copy+0x194>)
 80123cc:	4838      	ldr	r0, [pc, #224]	; (80124b0 <pbuf_copy+0x190>)
 80123ce:	f009 fa19 	bl	801b804 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80123d2:	683b      	ldr	r3, [r7, #0]
 80123d4:	895b      	ldrh	r3, [r3, #10]
 80123d6:	461a      	mov	r2, r3
 80123d8:	693b      	ldr	r3, [r7, #16]
 80123da:	4293      	cmp	r3, r2
 80123dc:	d906      	bls.n	80123ec <pbuf_copy+0xcc>
 80123de:	4b32      	ldr	r3, [pc, #200]	; (80124a8 <pbuf_copy+0x188>)
 80123e0:	f240 32da 	movw	r2, #986	; 0x3da
 80123e4:	4934      	ldr	r1, [pc, #208]	; (80124b8 <pbuf_copy+0x198>)
 80123e6:	4832      	ldr	r0, [pc, #200]	; (80124b0 <pbuf_copy+0x190>)
 80123e8:	f009 fa0c 	bl	801b804 <iprintf>
    if (offset_from >= p_from->len) {
 80123ec:	683b      	ldr	r3, [r7, #0]
 80123ee:	895b      	ldrh	r3, [r3, #10]
 80123f0:	461a      	mov	r2, r3
 80123f2:	693b      	ldr	r3, [r7, #16]
 80123f4:	4293      	cmp	r3, r2
 80123f6:	d304      	bcc.n	8012402 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80123f8:	2300      	movs	r3, #0
 80123fa:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80123fc:	683b      	ldr	r3, [r7, #0]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	895b      	ldrh	r3, [r3, #10]
 8012406:	461a      	mov	r2, r3
 8012408:	697b      	ldr	r3, [r7, #20]
 801240a:	4293      	cmp	r3, r2
 801240c:	d114      	bne.n	8012438 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801240e:	2300      	movs	r3, #0
 8012410:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d10c      	bne.n	8012438 <pbuf_copy+0x118>
 801241e:	683b      	ldr	r3, [r7, #0]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d009      	beq.n	8012438 <pbuf_copy+0x118>
 8012424:	4b20      	ldr	r3, [pc, #128]	; (80124a8 <pbuf_copy+0x188>)
 8012426:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801242a:	4924      	ldr	r1, [pc, #144]	; (80124bc <pbuf_copy+0x19c>)
 801242c:	4820      	ldr	r0, [pc, #128]	; (80124b0 <pbuf_copy+0x190>)
 801242e:	f009 f9e9 	bl	801b804 <iprintf>
 8012432:	f06f 030f 	mvn.w	r3, #15
 8012436:	e032      	b.n	801249e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8012438:	683b      	ldr	r3, [r7, #0]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d013      	beq.n	8012466 <pbuf_copy+0x146>
 801243e:	683b      	ldr	r3, [r7, #0]
 8012440:	895a      	ldrh	r2, [r3, #10]
 8012442:	683b      	ldr	r3, [r7, #0]
 8012444:	891b      	ldrh	r3, [r3, #8]
 8012446:	429a      	cmp	r2, r3
 8012448:	d10d      	bne.n	8012466 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801244a:	683b      	ldr	r3, [r7, #0]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d009      	beq.n	8012466 <pbuf_copy+0x146>
 8012452:	4b15      	ldr	r3, [pc, #84]	; (80124a8 <pbuf_copy+0x188>)
 8012454:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8012458:	4919      	ldr	r1, [pc, #100]	; (80124c0 <pbuf_copy+0x1a0>)
 801245a:	4815      	ldr	r0, [pc, #84]	; (80124b0 <pbuf_copy+0x190>)
 801245c:	f009 f9d2 	bl	801b804 <iprintf>
 8012460:	f06f 0305 	mvn.w	r3, #5
 8012464:	e01b      	b.n	801249e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d013      	beq.n	8012494 <pbuf_copy+0x174>
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	895a      	ldrh	r2, [r3, #10]
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	891b      	ldrh	r3, [r3, #8]
 8012474:	429a      	cmp	r2, r3
 8012476:	d10d      	bne.n	8012494 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d009      	beq.n	8012494 <pbuf_copy+0x174>
 8012480:	4b09      	ldr	r3, [pc, #36]	; (80124a8 <pbuf_copy+0x188>)
 8012482:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8012486:	490e      	ldr	r1, [pc, #56]	; (80124c0 <pbuf_copy+0x1a0>)
 8012488:	4809      	ldr	r0, [pc, #36]	; (80124b0 <pbuf_copy+0x190>)
 801248a:	f009 f9bb 	bl	801b804 <iprintf>
 801248e:	f06f 0305 	mvn.w	r3, #5
 8012492:	e004      	b.n	801249e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8012494:	683b      	ldr	r3, [r7, #0]
 8012496:	2b00      	cmp	r3, #0
 8012498:	f47f af61 	bne.w	801235e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801249c:	2300      	movs	r3, #0
}
 801249e:	4618      	mov	r0, r3
 80124a0:	3718      	adds	r7, #24
 80124a2:	46bd      	mov	sp, r7
 80124a4:	bd80      	pop	{r7, pc}
 80124a6:	bf00      	nop
 80124a8:	0801e008 	.word	0x0801e008
 80124ac:	0801e2b0 	.word	0x0801e2b0
 80124b0:	0801e068 	.word	0x0801e068
 80124b4:	0801e2e0 	.word	0x0801e2e0
 80124b8:	0801e2f8 	.word	0x0801e2f8
 80124bc:	0801e314 	.word	0x0801e314
 80124c0:	0801e324 	.word	0x0801e324

080124c4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b088      	sub	sp, #32
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	60f8      	str	r0, [r7, #12]
 80124cc:	60b9      	str	r1, [r7, #8]
 80124ce:	4611      	mov	r1, r2
 80124d0:	461a      	mov	r2, r3
 80124d2:	460b      	mov	r3, r1
 80124d4:	80fb      	strh	r3, [r7, #6]
 80124d6:	4613      	mov	r3, r2
 80124d8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80124da:	2300      	movs	r3, #0
 80124dc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80124de:	2300      	movs	r3, #0
 80124e0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d108      	bne.n	80124fa <pbuf_copy_partial+0x36>
 80124e8:	4b2b      	ldr	r3, [pc, #172]	; (8012598 <pbuf_copy_partial+0xd4>)
 80124ea:	f240 420a 	movw	r2, #1034	; 0x40a
 80124ee:	492b      	ldr	r1, [pc, #172]	; (801259c <pbuf_copy_partial+0xd8>)
 80124f0:	482b      	ldr	r0, [pc, #172]	; (80125a0 <pbuf_copy_partial+0xdc>)
 80124f2:	f009 f987 	bl	801b804 <iprintf>
 80124f6:	2300      	movs	r3, #0
 80124f8:	e04a      	b.n	8012590 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80124fa:	68bb      	ldr	r3, [r7, #8]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d108      	bne.n	8012512 <pbuf_copy_partial+0x4e>
 8012500:	4b25      	ldr	r3, [pc, #148]	; (8012598 <pbuf_copy_partial+0xd4>)
 8012502:	f240 420b 	movw	r2, #1035	; 0x40b
 8012506:	4927      	ldr	r1, [pc, #156]	; (80125a4 <pbuf_copy_partial+0xe0>)
 8012508:	4825      	ldr	r0, [pc, #148]	; (80125a0 <pbuf_copy_partial+0xdc>)
 801250a:	f009 f97b 	bl	801b804 <iprintf>
 801250e:	2300      	movs	r3, #0
 8012510:	e03e      	b.n	8012590 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	61fb      	str	r3, [r7, #28]
 8012516:	e034      	b.n	8012582 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8012518:	88bb      	ldrh	r3, [r7, #4]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d00a      	beq.n	8012534 <pbuf_copy_partial+0x70>
 801251e:	69fb      	ldr	r3, [r7, #28]
 8012520:	895b      	ldrh	r3, [r3, #10]
 8012522:	88ba      	ldrh	r2, [r7, #4]
 8012524:	429a      	cmp	r2, r3
 8012526:	d305      	bcc.n	8012534 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8012528:	69fb      	ldr	r3, [r7, #28]
 801252a:	895b      	ldrh	r3, [r3, #10]
 801252c:	88ba      	ldrh	r2, [r7, #4]
 801252e:	1ad3      	subs	r3, r2, r3
 8012530:	80bb      	strh	r3, [r7, #4]
 8012532:	e023      	b.n	801257c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8012534:	69fb      	ldr	r3, [r7, #28]
 8012536:	895a      	ldrh	r2, [r3, #10]
 8012538:	88bb      	ldrh	r3, [r7, #4]
 801253a:	1ad3      	subs	r3, r2, r3
 801253c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801253e:	8b3a      	ldrh	r2, [r7, #24]
 8012540:	88fb      	ldrh	r3, [r7, #6]
 8012542:	429a      	cmp	r2, r3
 8012544:	d901      	bls.n	801254a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8012546:	88fb      	ldrh	r3, [r7, #6]
 8012548:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801254a:	8b7b      	ldrh	r3, [r7, #26]
 801254c:	68ba      	ldr	r2, [r7, #8]
 801254e:	18d0      	adds	r0, r2, r3
 8012550:	69fb      	ldr	r3, [r7, #28]
 8012552:	685a      	ldr	r2, [r3, #4]
 8012554:	88bb      	ldrh	r3, [r7, #4]
 8012556:	4413      	add	r3, r2
 8012558:	8b3a      	ldrh	r2, [r7, #24]
 801255a:	4619      	mov	r1, r3
 801255c:	f009 f93c 	bl	801b7d8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8012560:	8afa      	ldrh	r2, [r7, #22]
 8012562:	8b3b      	ldrh	r3, [r7, #24]
 8012564:	4413      	add	r3, r2
 8012566:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8012568:	8b7a      	ldrh	r2, [r7, #26]
 801256a:	8b3b      	ldrh	r3, [r7, #24]
 801256c:	4413      	add	r3, r2
 801256e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8012570:	88fa      	ldrh	r2, [r7, #6]
 8012572:	8b3b      	ldrh	r3, [r7, #24]
 8012574:	1ad3      	subs	r3, r2, r3
 8012576:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8012578:	2300      	movs	r3, #0
 801257a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801257c:	69fb      	ldr	r3, [r7, #28]
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	61fb      	str	r3, [r7, #28]
 8012582:	88fb      	ldrh	r3, [r7, #6]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d002      	beq.n	801258e <pbuf_copy_partial+0xca>
 8012588:	69fb      	ldr	r3, [r7, #28]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d1c4      	bne.n	8012518 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801258e:	8afb      	ldrh	r3, [r7, #22]
}
 8012590:	4618      	mov	r0, r3
 8012592:	3720      	adds	r7, #32
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}
 8012598:	0801e008 	.word	0x0801e008
 801259c:	0801e350 	.word	0x0801e350
 80125a0:	0801e068 	.word	0x0801e068
 80125a4:	0801e370 	.word	0x0801e370

080125a8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b084      	sub	sp, #16
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	4603      	mov	r3, r0
 80125b0:	603a      	str	r2, [r7, #0]
 80125b2:	71fb      	strb	r3, [r7, #7]
 80125b4:	460b      	mov	r3, r1
 80125b6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80125b8:	683b      	ldr	r3, [r7, #0]
 80125ba:	8919      	ldrh	r1, [r3, #8]
 80125bc:	88ba      	ldrh	r2, [r7, #4]
 80125be:	79fb      	ldrb	r3, [r7, #7]
 80125c0:	4618      	mov	r0, r3
 80125c2:	f7ff fa73 	bl	8011aac <pbuf_alloc>
 80125c6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d101      	bne.n	80125d2 <pbuf_clone+0x2a>
    return NULL;
 80125ce:	2300      	movs	r3, #0
 80125d0:	e011      	b.n	80125f6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80125d2:	6839      	ldr	r1, [r7, #0]
 80125d4:	68f8      	ldr	r0, [r7, #12]
 80125d6:	f7ff fea3 	bl	8012320 <pbuf_copy>
 80125da:	4603      	mov	r3, r0
 80125dc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80125de:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d006      	beq.n	80125f4 <pbuf_clone+0x4c>
 80125e6:	4b06      	ldr	r3, [pc, #24]	; (8012600 <pbuf_clone+0x58>)
 80125e8:	f240 5224 	movw	r2, #1316	; 0x524
 80125ec:	4905      	ldr	r1, [pc, #20]	; (8012604 <pbuf_clone+0x5c>)
 80125ee:	4806      	ldr	r0, [pc, #24]	; (8012608 <pbuf_clone+0x60>)
 80125f0:	f009 f908 	bl	801b804 <iprintf>
  return q;
 80125f4:	68fb      	ldr	r3, [r7, #12]
}
 80125f6:	4618      	mov	r0, r3
 80125f8:	3710      	adds	r7, #16
 80125fa:	46bd      	mov	sp, r7
 80125fc:	bd80      	pop	{r7, pc}
 80125fe:	bf00      	nop
 8012600:	0801e008 	.word	0x0801e008
 8012604:	0801e47c 	.word	0x0801e47c
 8012608:	0801e068 	.word	0x0801e068

0801260c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801260c:	b580      	push	{r7, lr}
 801260e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012610:	f009 f99c 	bl	801b94c <rand>
 8012614:	4603      	mov	r3, r0
 8012616:	b29b      	uxth	r3, r3
 8012618:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801261c:	b29b      	uxth	r3, r3
 801261e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012622:	b29a      	uxth	r2, r3
 8012624:	4b01      	ldr	r3, [pc, #4]	; (801262c <tcp_init+0x20>)
 8012626:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012628:	bf00      	nop
 801262a:	bd80      	pop	{r7, pc}
 801262c:	20000024 	.word	0x20000024

08012630 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8012630:	b580      	push	{r7, lr}
 8012632:	b082      	sub	sp, #8
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	7d1b      	ldrb	r3, [r3, #20]
 801263c:	2b01      	cmp	r3, #1
 801263e:	d105      	bne.n	801264c <tcp_free+0x1c>
 8012640:	4b06      	ldr	r3, [pc, #24]	; (801265c <tcp_free+0x2c>)
 8012642:	22d4      	movs	r2, #212	; 0xd4
 8012644:	4906      	ldr	r1, [pc, #24]	; (8012660 <tcp_free+0x30>)
 8012646:	4807      	ldr	r0, [pc, #28]	; (8012664 <tcp_free+0x34>)
 8012648:	f009 f8dc 	bl	801b804 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801264c:	6879      	ldr	r1, [r7, #4]
 801264e:	2001      	movs	r0, #1
 8012650:	f7fe fe6c 	bl	801132c <memp_free>
}
 8012654:	bf00      	nop
 8012656:	3708      	adds	r7, #8
 8012658:	46bd      	mov	sp, r7
 801265a:	bd80      	pop	{r7, pc}
 801265c:	0801e508 	.word	0x0801e508
 8012660:	0801e538 	.word	0x0801e538
 8012664:	0801e54c 	.word	0x0801e54c

08012668 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b082      	sub	sp, #8
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	7d1b      	ldrb	r3, [r3, #20]
 8012674:	2b01      	cmp	r3, #1
 8012676:	d105      	bne.n	8012684 <tcp_free_listen+0x1c>
 8012678:	4b06      	ldr	r3, [pc, #24]	; (8012694 <tcp_free_listen+0x2c>)
 801267a:	22df      	movs	r2, #223	; 0xdf
 801267c:	4906      	ldr	r1, [pc, #24]	; (8012698 <tcp_free_listen+0x30>)
 801267e:	4807      	ldr	r0, [pc, #28]	; (801269c <tcp_free_listen+0x34>)
 8012680:	f009 f8c0 	bl	801b804 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8012684:	6879      	ldr	r1, [r7, #4]
 8012686:	2002      	movs	r0, #2
 8012688:	f7fe fe50 	bl	801132c <memp_free>
}
 801268c:	bf00      	nop
 801268e:	3708      	adds	r7, #8
 8012690:	46bd      	mov	sp, r7
 8012692:	bd80      	pop	{r7, pc}
 8012694:	0801e508 	.word	0x0801e508
 8012698:	0801e574 	.word	0x0801e574
 801269c:	0801e54c 	.word	0x0801e54c

080126a0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80126a4:	f000 ffdc 	bl	8013660 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80126a8:	4b07      	ldr	r3, [pc, #28]	; (80126c8 <tcp_tmr+0x28>)
 80126aa:	781b      	ldrb	r3, [r3, #0]
 80126ac:	3301      	adds	r3, #1
 80126ae:	b2da      	uxtb	r2, r3
 80126b0:	4b05      	ldr	r3, [pc, #20]	; (80126c8 <tcp_tmr+0x28>)
 80126b2:	701a      	strb	r2, [r3, #0]
 80126b4:	4b04      	ldr	r3, [pc, #16]	; (80126c8 <tcp_tmr+0x28>)
 80126b6:	781b      	ldrb	r3, [r3, #0]
 80126b8:	f003 0301 	and.w	r3, r3, #1
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d001      	beq.n	80126c4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80126c0:	f000 fc8e 	bl	8012fe0 <tcp_slowtmr>
  }
}
 80126c4:	bf00      	nop
 80126c6:	bd80      	pop	{r7, pc}
 80126c8:	200110a1 	.word	0x200110a1

080126cc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b084      	sub	sp, #16
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]
 80126d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80126d6:	683b      	ldr	r3, [r7, #0]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d105      	bne.n	80126e8 <tcp_remove_listener+0x1c>
 80126dc:	4b0d      	ldr	r3, [pc, #52]	; (8012714 <tcp_remove_listener+0x48>)
 80126de:	22ff      	movs	r2, #255	; 0xff
 80126e0:	490d      	ldr	r1, [pc, #52]	; (8012718 <tcp_remove_listener+0x4c>)
 80126e2:	480e      	ldr	r0, [pc, #56]	; (801271c <tcp_remove_listener+0x50>)
 80126e4:	f009 f88e 	bl	801b804 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	60fb      	str	r3, [r7, #12]
 80126ec:	e00a      	b.n	8012704 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80126f2:	683a      	ldr	r2, [r7, #0]
 80126f4:	429a      	cmp	r2, r3
 80126f6:	d102      	bne.n	80126fe <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	2200      	movs	r2, #0
 80126fc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	68db      	ldr	r3, [r3, #12]
 8012702:	60fb      	str	r3, [r7, #12]
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d1f1      	bne.n	80126ee <tcp_remove_listener+0x22>
    }
  }
}
 801270a:	bf00      	nop
 801270c:	bf00      	nop
 801270e:	3710      	adds	r7, #16
 8012710:	46bd      	mov	sp, r7
 8012712:	bd80      	pop	{r7, pc}
 8012714:	0801e508 	.word	0x0801e508
 8012718:	0801e590 	.word	0x0801e590
 801271c:	0801e54c 	.word	0x0801e54c

08012720 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8012720:	b580      	push	{r7, lr}
 8012722:	b084      	sub	sp, #16
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d106      	bne.n	801273c <tcp_listen_closed+0x1c>
 801272e:	4b14      	ldr	r3, [pc, #80]	; (8012780 <tcp_listen_closed+0x60>)
 8012730:	f240 1211 	movw	r2, #273	; 0x111
 8012734:	4913      	ldr	r1, [pc, #76]	; (8012784 <tcp_listen_closed+0x64>)
 8012736:	4814      	ldr	r0, [pc, #80]	; (8012788 <tcp_listen_closed+0x68>)
 8012738:	f009 f864 	bl	801b804 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	7d1b      	ldrb	r3, [r3, #20]
 8012740:	2b01      	cmp	r3, #1
 8012742:	d006      	beq.n	8012752 <tcp_listen_closed+0x32>
 8012744:	4b0e      	ldr	r3, [pc, #56]	; (8012780 <tcp_listen_closed+0x60>)
 8012746:	f44f 7289 	mov.w	r2, #274	; 0x112
 801274a:	4910      	ldr	r1, [pc, #64]	; (801278c <tcp_listen_closed+0x6c>)
 801274c:	480e      	ldr	r0, [pc, #56]	; (8012788 <tcp_listen_closed+0x68>)
 801274e:	f009 f859 	bl	801b804 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012752:	2301      	movs	r3, #1
 8012754:	60fb      	str	r3, [r7, #12]
 8012756:	e00b      	b.n	8012770 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8012758:	4a0d      	ldr	r2, [pc, #52]	; (8012790 <tcp_listen_closed+0x70>)
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	6879      	ldr	r1, [r7, #4]
 8012764:	4618      	mov	r0, r3
 8012766:	f7ff ffb1 	bl	80126cc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	3301      	adds	r3, #1
 801276e:	60fb      	str	r3, [r7, #12]
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	2b03      	cmp	r3, #3
 8012774:	d9f0      	bls.n	8012758 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8012776:	bf00      	nop
 8012778:	bf00      	nop
 801277a:	3710      	adds	r7, #16
 801277c:	46bd      	mov	sp, r7
 801277e:	bd80      	pop	{r7, pc}
 8012780:	0801e508 	.word	0x0801e508
 8012784:	0801e5b8 	.word	0x0801e5b8
 8012788:	0801e54c 	.word	0x0801e54c
 801278c:	0801e5c4 	.word	0x0801e5c4
 8012790:	080205e4 	.word	0x080205e4

08012794 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8012794:	b5b0      	push	{r4, r5, r7, lr}
 8012796:	b088      	sub	sp, #32
 8012798:	af04      	add	r7, sp, #16
 801279a:	6078      	str	r0, [r7, #4]
 801279c:	460b      	mov	r3, r1
 801279e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d106      	bne.n	80127b4 <tcp_close_shutdown+0x20>
 80127a6:	4b63      	ldr	r3, [pc, #396]	; (8012934 <tcp_close_shutdown+0x1a0>)
 80127a8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80127ac:	4962      	ldr	r1, [pc, #392]	; (8012938 <tcp_close_shutdown+0x1a4>)
 80127ae:	4863      	ldr	r0, [pc, #396]	; (801293c <tcp_close_shutdown+0x1a8>)
 80127b0:	f009 f828 	bl	801b804 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80127b4:	78fb      	ldrb	r3, [r7, #3]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d066      	beq.n	8012888 <tcp_close_shutdown+0xf4>
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	7d1b      	ldrb	r3, [r3, #20]
 80127be:	2b04      	cmp	r3, #4
 80127c0:	d003      	beq.n	80127ca <tcp_close_shutdown+0x36>
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	7d1b      	ldrb	r3, [r3, #20]
 80127c6:	2b07      	cmp	r3, #7
 80127c8:	d15e      	bne.n	8012888 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d104      	bne.n	80127dc <tcp_close_shutdown+0x48>
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80127d6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80127da:	d055      	beq.n	8012888 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	8b5b      	ldrh	r3, [r3, #26]
 80127e0:	f003 0310 	and.w	r3, r3, #16
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d106      	bne.n	80127f6 <tcp_close_shutdown+0x62>
 80127e8:	4b52      	ldr	r3, [pc, #328]	; (8012934 <tcp_close_shutdown+0x1a0>)
 80127ea:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80127ee:	4954      	ldr	r1, [pc, #336]	; (8012940 <tcp_close_shutdown+0x1ac>)
 80127f0:	4852      	ldr	r0, [pc, #328]	; (801293c <tcp_close_shutdown+0x1a8>)
 80127f2:	f009 f807 	bl	801b804 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80127fe:	687d      	ldr	r5, [r7, #4]
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	3304      	adds	r3, #4
 8012804:	687a      	ldr	r2, [r7, #4]
 8012806:	8ad2      	ldrh	r2, [r2, #22]
 8012808:	6879      	ldr	r1, [r7, #4]
 801280a:	8b09      	ldrh	r1, [r1, #24]
 801280c:	9102      	str	r1, [sp, #8]
 801280e:	9201      	str	r2, [sp, #4]
 8012810:	9300      	str	r3, [sp, #0]
 8012812:	462b      	mov	r3, r5
 8012814:	4622      	mov	r2, r4
 8012816:	4601      	mov	r1, r0
 8012818:	6878      	ldr	r0, [r7, #4]
 801281a:	f005 fcf1 	bl	8018200 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801281e:	6878      	ldr	r0, [r7, #4]
 8012820:	f001 face 	bl	8013dc0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012824:	4b47      	ldr	r3, [pc, #284]	; (8012944 <tcp_close_shutdown+0x1b0>)
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	687a      	ldr	r2, [r7, #4]
 801282a:	429a      	cmp	r2, r3
 801282c:	d105      	bne.n	801283a <tcp_close_shutdown+0xa6>
 801282e:	4b45      	ldr	r3, [pc, #276]	; (8012944 <tcp_close_shutdown+0x1b0>)
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	68db      	ldr	r3, [r3, #12]
 8012834:	4a43      	ldr	r2, [pc, #268]	; (8012944 <tcp_close_shutdown+0x1b0>)
 8012836:	6013      	str	r3, [r2, #0]
 8012838:	e013      	b.n	8012862 <tcp_close_shutdown+0xce>
 801283a:	4b42      	ldr	r3, [pc, #264]	; (8012944 <tcp_close_shutdown+0x1b0>)
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	60fb      	str	r3, [r7, #12]
 8012840:	e00c      	b.n	801285c <tcp_close_shutdown+0xc8>
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	68db      	ldr	r3, [r3, #12]
 8012846:	687a      	ldr	r2, [r7, #4]
 8012848:	429a      	cmp	r2, r3
 801284a:	d104      	bne.n	8012856 <tcp_close_shutdown+0xc2>
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	68da      	ldr	r2, [r3, #12]
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	60da      	str	r2, [r3, #12]
 8012854:	e005      	b.n	8012862 <tcp_close_shutdown+0xce>
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	68db      	ldr	r3, [r3, #12]
 801285a:	60fb      	str	r3, [r7, #12]
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d1ef      	bne.n	8012842 <tcp_close_shutdown+0xae>
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	2200      	movs	r2, #0
 8012866:	60da      	str	r2, [r3, #12]
 8012868:	4b37      	ldr	r3, [pc, #220]	; (8012948 <tcp_close_shutdown+0x1b4>)
 801286a:	2201      	movs	r2, #1
 801286c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801286e:	4b37      	ldr	r3, [pc, #220]	; (801294c <tcp_close_shutdown+0x1b8>)
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	687a      	ldr	r2, [r7, #4]
 8012874:	429a      	cmp	r2, r3
 8012876:	d102      	bne.n	801287e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8012878:	f003 ff66 	bl	8016748 <tcp_trigger_input_pcb_close>
 801287c:	e002      	b.n	8012884 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801287e:	6878      	ldr	r0, [r7, #4]
 8012880:	f7ff fed6 	bl	8012630 <tcp_free>
      }
      return ERR_OK;
 8012884:	2300      	movs	r3, #0
 8012886:	e050      	b.n	801292a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	7d1b      	ldrb	r3, [r3, #20]
 801288c:	2b02      	cmp	r3, #2
 801288e:	d03b      	beq.n	8012908 <tcp_close_shutdown+0x174>
 8012890:	2b02      	cmp	r3, #2
 8012892:	dc44      	bgt.n	801291e <tcp_close_shutdown+0x18a>
 8012894:	2b00      	cmp	r3, #0
 8012896:	d002      	beq.n	801289e <tcp_close_shutdown+0x10a>
 8012898:	2b01      	cmp	r3, #1
 801289a:	d02a      	beq.n	80128f2 <tcp_close_shutdown+0x15e>
 801289c:	e03f      	b.n	801291e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	8adb      	ldrh	r3, [r3, #22]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d021      	beq.n	80128ea <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80128a6:	4b2a      	ldr	r3, [pc, #168]	; (8012950 <tcp_close_shutdown+0x1bc>)
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	687a      	ldr	r2, [r7, #4]
 80128ac:	429a      	cmp	r2, r3
 80128ae:	d105      	bne.n	80128bc <tcp_close_shutdown+0x128>
 80128b0:	4b27      	ldr	r3, [pc, #156]	; (8012950 <tcp_close_shutdown+0x1bc>)
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	68db      	ldr	r3, [r3, #12]
 80128b6:	4a26      	ldr	r2, [pc, #152]	; (8012950 <tcp_close_shutdown+0x1bc>)
 80128b8:	6013      	str	r3, [r2, #0]
 80128ba:	e013      	b.n	80128e4 <tcp_close_shutdown+0x150>
 80128bc:	4b24      	ldr	r3, [pc, #144]	; (8012950 <tcp_close_shutdown+0x1bc>)
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	60bb      	str	r3, [r7, #8]
 80128c2:	e00c      	b.n	80128de <tcp_close_shutdown+0x14a>
 80128c4:	68bb      	ldr	r3, [r7, #8]
 80128c6:	68db      	ldr	r3, [r3, #12]
 80128c8:	687a      	ldr	r2, [r7, #4]
 80128ca:	429a      	cmp	r2, r3
 80128cc:	d104      	bne.n	80128d8 <tcp_close_shutdown+0x144>
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	68da      	ldr	r2, [r3, #12]
 80128d2:	68bb      	ldr	r3, [r7, #8]
 80128d4:	60da      	str	r2, [r3, #12]
 80128d6:	e005      	b.n	80128e4 <tcp_close_shutdown+0x150>
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	68db      	ldr	r3, [r3, #12]
 80128dc:	60bb      	str	r3, [r7, #8]
 80128de:	68bb      	ldr	r3, [r7, #8]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d1ef      	bne.n	80128c4 <tcp_close_shutdown+0x130>
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	2200      	movs	r2, #0
 80128e8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80128ea:	6878      	ldr	r0, [r7, #4]
 80128ec:	f7ff fea0 	bl	8012630 <tcp_free>
      break;
 80128f0:	e01a      	b.n	8012928 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80128f2:	6878      	ldr	r0, [r7, #4]
 80128f4:	f7ff ff14 	bl	8012720 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80128f8:	6879      	ldr	r1, [r7, #4]
 80128fa:	4816      	ldr	r0, [pc, #88]	; (8012954 <tcp_close_shutdown+0x1c0>)
 80128fc:	f001 fab0 	bl	8013e60 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8012900:	6878      	ldr	r0, [r7, #4]
 8012902:	f7ff feb1 	bl	8012668 <tcp_free_listen>
      break;
 8012906:	e00f      	b.n	8012928 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012908:	6879      	ldr	r1, [r7, #4]
 801290a:	480e      	ldr	r0, [pc, #56]	; (8012944 <tcp_close_shutdown+0x1b0>)
 801290c:	f001 faa8 	bl	8013e60 <tcp_pcb_remove>
 8012910:	4b0d      	ldr	r3, [pc, #52]	; (8012948 <tcp_close_shutdown+0x1b4>)
 8012912:	2201      	movs	r2, #1
 8012914:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8012916:	6878      	ldr	r0, [r7, #4]
 8012918:	f7ff fe8a 	bl	8012630 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801291c:	e004      	b.n	8012928 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801291e:	6878      	ldr	r0, [r7, #4]
 8012920:	f000 f81a 	bl	8012958 <tcp_close_shutdown_fin>
 8012924:	4603      	mov	r3, r0
 8012926:	e000      	b.n	801292a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8012928:	2300      	movs	r3, #0
}
 801292a:	4618      	mov	r0, r3
 801292c:	3710      	adds	r7, #16
 801292e:	46bd      	mov	sp, r7
 8012930:	bdb0      	pop	{r4, r5, r7, pc}
 8012932:	bf00      	nop
 8012934:	0801e508 	.word	0x0801e508
 8012938:	0801e5dc 	.word	0x0801e5dc
 801293c:	0801e54c 	.word	0x0801e54c
 8012940:	0801e5fc 	.word	0x0801e5fc
 8012944:	20011098 	.word	0x20011098
 8012948:	200110a0 	.word	0x200110a0
 801294c:	200110d8 	.word	0x200110d8
 8012950:	20011090 	.word	0x20011090
 8012954:	20011094 	.word	0x20011094

08012958 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b084      	sub	sp, #16
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d106      	bne.n	8012974 <tcp_close_shutdown_fin+0x1c>
 8012966:	4b2e      	ldr	r3, [pc, #184]	; (8012a20 <tcp_close_shutdown_fin+0xc8>)
 8012968:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801296c:	492d      	ldr	r1, [pc, #180]	; (8012a24 <tcp_close_shutdown_fin+0xcc>)
 801296e:	482e      	ldr	r0, [pc, #184]	; (8012a28 <tcp_close_shutdown_fin+0xd0>)
 8012970:	f008 ff48 	bl	801b804 <iprintf>

  switch (pcb->state) {
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	7d1b      	ldrb	r3, [r3, #20]
 8012978:	2b07      	cmp	r3, #7
 801297a:	d020      	beq.n	80129be <tcp_close_shutdown_fin+0x66>
 801297c:	2b07      	cmp	r3, #7
 801297e:	dc2b      	bgt.n	80129d8 <tcp_close_shutdown_fin+0x80>
 8012980:	2b03      	cmp	r3, #3
 8012982:	d002      	beq.n	801298a <tcp_close_shutdown_fin+0x32>
 8012984:	2b04      	cmp	r3, #4
 8012986:	d00d      	beq.n	80129a4 <tcp_close_shutdown_fin+0x4c>
 8012988:	e026      	b.n	80129d8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801298a:	6878      	ldr	r0, [r7, #4]
 801298c:	f004 fd46 	bl	801741c <tcp_send_fin>
 8012990:	4603      	mov	r3, r0
 8012992:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d11f      	bne.n	80129dc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	2205      	movs	r2, #5
 80129a0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80129a2:	e01b      	b.n	80129dc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80129a4:	6878      	ldr	r0, [r7, #4]
 80129a6:	f004 fd39 	bl	801741c <tcp_send_fin>
 80129aa:	4603      	mov	r3, r0
 80129ac:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80129ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d114      	bne.n	80129e0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	2205      	movs	r2, #5
 80129ba:	751a      	strb	r2, [r3, #20]
      }
      break;
 80129bc:	e010      	b.n	80129e0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80129be:	6878      	ldr	r0, [r7, #4]
 80129c0:	f004 fd2c 	bl	801741c <tcp_send_fin>
 80129c4:	4603      	mov	r3, r0
 80129c6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80129c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d109      	bne.n	80129e4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	2209      	movs	r2, #9
 80129d4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80129d6:	e005      	b.n	80129e4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80129d8:	2300      	movs	r3, #0
 80129da:	e01c      	b.n	8012a16 <tcp_close_shutdown_fin+0xbe>
      break;
 80129dc:	bf00      	nop
 80129de:	e002      	b.n	80129e6 <tcp_close_shutdown_fin+0x8e>
      break;
 80129e0:	bf00      	nop
 80129e2:	e000      	b.n	80129e6 <tcp_close_shutdown_fin+0x8e>
      break;
 80129e4:	bf00      	nop
  }

  if (err == ERR_OK) {
 80129e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d103      	bne.n	80129f6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80129ee:	6878      	ldr	r0, [r7, #4]
 80129f0:	f004 fe52 	bl	8017698 <tcp_output>
 80129f4:	e00d      	b.n	8012a12 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80129f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80129fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129fe:	d108      	bne.n	8012a12 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	8b5b      	ldrh	r3, [r3, #26]
 8012a04:	f043 0308 	orr.w	r3, r3, #8
 8012a08:	b29a      	uxth	r2, r3
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8012a0e:	2300      	movs	r3, #0
 8012a10:	e001      	b.n	8012a16 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8012a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012a16:	4618      	mov	r0, r3
 8012a18:	3710      	adds	r7, #16
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	bd80      	pop	{r7, pc}
 8012a1e:	bf00      	nop
 8012a20:	0801e508 	.word	0x0801e508
 8012a24:	0801e5b8 	.word	0x0801e5b8
 8012a28:	0801e54c 	.word	0x0801e54c

08012a2c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b082      	sub	sp, #8
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d109      	bne.n	8012a4e <tcp_close+0x22>
 8012a3a:	4b0f      	ldr	r3, [pc, #60]	; (8012a78 <tcp_close+0x4c>)
 8012a3c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8012a40:	490e      	ldr	r1, [pc, #56]	; (8012a7c <tcp_close+0x50>)
 8012a42:	480f      	ldr	r0, [pc, #60]	; (8012a80 <tcp_close+0x54>)
 8012a44:	f008 fede 	bl	801b804 <iprintf>
 8012a48:	f06f 030f 	mvn.w	r3, #15
 8012a4c:	e00f      	b.n	8012a6e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	7d1b      	ldrb	r3, [r3, #20]
 8012a52:	2b01      	cmp	r3, #1
 8012a54:	d006      	beq.n	8012a64 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	8b5b      	ldrh	r3, [r3, #26]
 8012a5a:	f043 0310 	orr.w	r3, r3, #16
 8012a5e:	b29a      	uxth	r2, r3
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8012a64:	2101      	movs	r1, #1
 8012a66:	6878      	ldr	r0, [r7, #4]
 8012a68:	f7ff fe94 	bl	8012794 <tcp_close_shutdown>
 8012a6c:	4603      	mov	r3, r0
}
 8012a6e:	4618      	mov	r0, r3
 8012a70:	3708      	adds	r7, #8
 8012a72:	46bd      	mov	sp, r7
 8012a74:	bd80      	pop	{r7, pc}
 8012a76:	bf00      	nop
 8012a78:	0801e508 	.word	0x0801e508
 8012a7c:	0801e618 	.word	0x0801e618
 8012a80:	0801e54c 	.word	0x0801e54c

08012a84 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8012a84:	b580      	push	{r7, lr}
 8012a86:	b084      	sub	sp, #16
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	60f8      	str	r0, [r7, #12]
 8012a8c:	60b9      	str	r1, [r7, #8]
 8012a8e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d109      	bne.n	8012aaa <tcp_shutdown+0x26>
 8012a96:	4b26      	ldr	r3, [pc, #152]	; (8012b30 <tcp_shutdown+0xac>)
 8012a98:	f240 2207 	movw	r2, #519	; 0x207
 8012a9c:	4925      	ldr	r1, [pc, #148]	; (8012b34 <tcp_shutdown+0xb0>)
 8012a9e:	4826      	ldr	r0, [pc, #152]	; (8012b38 <tcp_shutdown+0xb4>)
 8012aa0:	f008 feb0 	bl	801b804 <iprintf>
 8012aa4:	f06f 030f 	mvn.w	r3, #15
 8012aa8:	e03d      	b.n	8012b26 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	7d1b      	ldrb	r3, [r3, #20]
 8012aae:	2b01      	cmp	r3, #1
 8012ab0:	d102      	bne.n	8012ab8 <tcp_shutdown+0x34>
    return ERR_CONN;
 8012ab2:	f06f 030a 	mvn.w	r3, #10
 8012ab6:	e036      	b.n	8012b26 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8012ab8:	68bb      	ldr	r3, [r7, #8]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d01b      	beq.n	8012af6 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	8b5b      	ldrh	r3, [r3, #26]
 8012ac2:	f043 0310 	orr.w	r3, r3, #16
 8012ac6:	b29a      	uxth	r2, r3
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d005      	beq.n	8012ade <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8012ad2:	2101      	movs	r1, #1
 8012ad4:	68f8      	ldr	r0, [r7, #12]
 8012ad6:	f7ff fe5d 	bl	8012794 <tcp_close_shutdown>
 8012ada:	4603      	mov	r3, r0
 8012adc:	e023      	b.n	8012b26 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d007      	beq.n	8012af6 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012aea:	4618      	mov	r0, r3
 8012aec:	f7ff faf4 	bl	80120d8 <pbuf_free>
      pcb->refused_data = NULL;
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	2200      	movs	r2, #0
 8012af4:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d013      	beq.n	8012b24 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	7d1b      	ldrb	r3, [r3, #20]
 8012b00:	2b04      	cmp	r3, #4
 8012b02:	dc02      	bgt.n	8012b0a <tcp_shutdown+0x86>
 8012b04:	2b03      	cmp	r3, #3
 8012b06:	da02      	bge.n	8012b0e <tcp_shutdown+0x8a>
 8012b08:	e009      	b.n	8012b1e <tcp_shutdown+0x9a>
 8012b0a:	2b07      	cmp	r3, #7
 8012b0c:	d107      	bne.n	8012b1e <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8012b0e:	68bb      	ldr	r3, [r7, #8]
 8012b10:	b2db      	uxtb	r3, r3
 8012b12:	4619      	mov	r1, r3
 8012b14:	68f8      	ldr	r0, [r7, #12]
 8012b16:	f7ff fe3d 	bl	8012794 <tcp_close_shutdown>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	e003      	b.n	8012b26 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8012b1e:	f06f 030a 	mvn.w	r3, #10
 8012b22:	e000      	b.n	8012b26 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8012b24:	2300      	movs	r3, #0
}
 8012b26:	4618      	mov	r0, r3
 8012b28:	3710      	adds	r7, #16
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	bd80      	pop	{r7, pc}
 8012b2e:	bf00      	nop
 8012b30:	0801e508 	.word	0x0801e508
 8012b34:	0801e630 	.word	0x0801e630
 8012b38:	0801e54c 	.word	0x0801e54c

08012b3c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b08e      	sub	sp, #56	; 0x38
 8012b40:	af04      	add	r7, sp, #16
 8012b42:	6078      	str	r0, [r7, #4]
 8012b44:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d107      	bne.n	8012b5c <tcp_abandon+0x20>
 8012b4c:	4b52      	ldr	r3, [pc, #328]	; (8012c98 <tcp_abandon+0x15c>)
 8012b4e:	f240 223d 	movw	r2, #573	; 0x23d
 8012b52:	4952      	ldr	r1, [pc, #328]	; (8012c9c <tcp_abandon+0x160>)
 8012b54:	4852      	ldr	r0, [pc, #328]	; (8012ca0 <tcp_abandon+0x164>)
 8012b56:	f008 fe55 	bl	801b804 <iprintf>
 8012b5a:	e099      	b.n	8012c90 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	7d1b      	ldrb	r3, [r3, #20]
 8012b60:	2b01      	cmp	r3, #1
 8012b62:	d106      	bne.n	8012b72 <tcp_abandon+0x36>
 8012b64:	4b4c      	ldr	r3, [pc, #304]	; (8012c98 <tcp_abandon+0x15c>)
 8012b66:	f44f 7210 	mov.w	r2, #576	; 0x240
 8012b6a:	494e      	ldr	r1, [pc, #312]	; (8012ca4 <tcp_abandon+0x168>)
 8012b6c:	484c      	ldr	r0, [pc, #304]	; (8012ca0 <tcp_abandon+0x164>)
 8012b6e:	f008 fe49 	bl	801b804 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	7d1b      	ldrb	r3, [r3, #20]
 8012b76:	2b0a      	cmp	r3, #10
 8012b78:	d107      	bne.n	8012b8a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8012b7a:	6879      	ldr	r1, [r7, #4]
 8012b7c:	484a      	ldr	r0, [pc, #296]	; (8012ca8 <tcp_abandon+0x16c>)
 8012b7e:	f001 f96f 	bl	8013e60 <tcp_pcb_remove>
    tcp_free(pcb);
 8012b82:	6878      	ldr	r0, [r7, #4]
 8012b84:	f7ff fd54 	bl	8012630 <tcp_free>
 8012b88:	e082      	b.n	8012c90 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8012b8a:	2300      	movs	r3, #0
 8012b8c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8012b8e:	2300      	movs	r3, #0
 8012b90:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b96:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b9c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012ba4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	691b      	ldr	r3, [r3, #16]
 8012baa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	7d1b      	ldrb	r3, [r3, #20]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d126      	bne.n	8012c02 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	8adb      	ldrh	r3, [r3, #22]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d02e      	beq.n	8012c1a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012bbc:	4b3b      	ldr	r3, [pc, #236]	; (8012cac <tcp_abandon+0x170>)
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	687a      	ldr	r2, [r7, #4]
 8012bc2:	429a      	cmp	r2, r3
 8012bc4:	d105      	bne.n	8012bd2 <tcp_abandon+0x96>
 8012bc6:	4b39      	ldr	r3, [pc, #228]	; (8012cac <tcp_abandon+0x170>)
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	68db      	ldr	r3, [r3, #12]
 8012bcc:	4a37      	ldr	r2, [pc, #220]	; (8012cac <tcp_abandon+0x170>)
 8012bce:	6013      	str	r3, [r2, #0]
 8012bd0:	e013      	b.n	8012bfa <tcp_abandon+0xbe>
 8012bd2:	4b36      	ldr	r3, [pc, #216]	; (8012cac <tcp_abandon+0x170>)
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	61fb      	str	r3, [r7, #28]
 8012bd8:	e00c      	b.n	8012bf4 <tcp_abandon+0xb8>
 8012bda:	69fb      	ldr	r3, [r7, #28]
 8012bdc:	68db      	ldr	r3, [r3, #12]
 8012bde:	687a      	ldr	r2, [r7, #4]
 8012be0:	429a      	cmp	r2, r3
 8012be2:	d104      	bne.n	8012bee <tcp_abandon+0xb2>
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	68da      	ldr	r2, [r3, #12]
 8012be8:	69fb      	ldr	r3, [r7, #28]
 8012bea:	60da      	str	r2, [r3, #12]
 8012bec:	e005      	b.n	8012bfa <tcp_abandon+0xbe>
 8012bee:	69fb      	ldr	r3, [r7, #28]
 8012bf0:	68db      	ldr	r3, [r3, #12]
 8012bf2:	61fb      	str	r3, [r7, #28]
 8012bf4:	69fb      	ldr	r3, [r7, #28]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d1ef      	bne.n	8012bda <tcp_abandon+0x9e>
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	60da      	str	r2, [r3, #12]
 8012c00:	e00b      	b.n	8012c1a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8012c02:	683b      	ldr	r3, [r7, #0]
 8012c04:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	8adb      	ldrh	r3, [r3, #22]
 8012c0a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012c0c:	6879      	ldr	r1, [r7, #4]
 8012c0e:	4828      	ldr	r0, [pc, #160]	; (8012cb0 <tcp_abandon+0x174>)
 8012c10:	f001 f926 	bl	8013e60 <tcp_pcb_remove>
 8012c14:	4b27      	ldr	r3, [pc, #156]	; (8012cb4 <tcp_abandon+0x178>)
 8012c16:	2201      	movs	r2, #1
 8012c18:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d004      	beq.n	8012c2c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c26:	4618      	mov	r0, r3
 8012c28:	f000 fdfa 	bl	8013820 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d004      	beq.n	8012c3e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f000 fdf1 	bl	8013820 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d004      	beq.n	8012c50 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	f000 fde8 	bl	8013820 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d00e      	beq.n	8012c74 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8012c56:	6879      	ldr	r1, [r7, #4]
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	3304      	adds	r3, #4
 8012c5c:	687a      	ldr	r2, [r7, #4]
 8012c5e:	8b12      	ldrh	r2, [r2, #24]
 8012c60:	9202      	str	r2, [sp, #8]
 8012c62:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012c64:	9201      	str	r2, [sp, #4]
 8012c66:	9300      	str	r3, [sp, #0]
 8012c68:	460b      	mov	r3, r1
 8012c6a:	697a      	ldr	r2, [r7, #20]
 8012c6c:	69b9      	ldr	r1, [r7, #24]
 8012c6e:	6878      	ldr	r0, [r7, #4]
 8012c70:	f005 fac6 	bl	8018200 <tcp_rst>
    }
    last_state = pcb->state;
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	7d1b      	ldrb	r3, [r3, #20]
 8012c78:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8012c7a:	6878      	ldr	r0, [r7, #4]
 8012c7c:	f7ff fcd8 	bl	8012630 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012c80:	693b      	ldr	r3, [r7, #16]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d004      	beq.n	8012c90 <tcp_abandon+0x154>
 8012c86:	693b      	ldr	r3, [r7, #16]
 8012c88:	f06f 010c 	mvn.w	r1, #12
 8012c8c:	68f8      	ldr	r0, [r7, #12]
 8012c8e:	4798      	blx	r3
  }
}
 8012c90:	3728      	adds	r7, #40	; 0x28
 8012c92:	46bd      	mov	sp, r7
 8012c94:	bd80      	pop	{r7, pc}
 8012c96:	bf00      	nop
 8012c98:	0801e508 	.word	0x0801e508
 8012c9c:	0801e64c 	.word	0x0801e64c
 8012ca0:	0801e54c 	.word	0x0801e54c
 8012ca4:	0801e668 	.word	0x0801e668
 8012ca8:	2001109c 	.word	0x2001109c
 8012cac:	20011090 	.word	0x20011090
 8012cb0:	20011098 	.word	0x20011098
 8012cb4:	200110a0 	.word	0x200110a0

08012cb8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b082      	sub	sp, #8
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012cc0:	2101      	movs	r1, #1
 8012cc2:	6878      	ldr	r0, [r7, #4]
 8012cc4:	f7ff ff3a 	bl	8012b3c <tcp_abandon>
}
 8012cc8:	bf00      	nop
 8012cca:	3708      	adds	r7, #8
 8012ccc:	46bd      	mov	sp, r7
 8012cce:	bd80      	pop	{r7, pc}

08012cd0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b088      	sub	sp, #32
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	60f8      	str	r0, [r7, #12]
 8012cd8:	60b9      	str	r1, [r7, #8]
 8012cda:	4613      	mov	r3, r2
 8012cdc:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8012cde:	2304      	movs	r3, #4
 8012ce0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012ce2:	68bb      	ldr	r3, [r7, #8]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d101      	bne.n	8012cec <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8012ce8:	4b3e      	ldr	r3, [pc, #248]	; (8012de4 <tcp_bind+0x114>)
 8012cea:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d109      	bne.n	8012d06 <tcp_bind+0x36>
 8012cf2:	4b3d      	ldr	r3, [pc, #244]	; (8012de8 <tcp_bind+0x118>)
 8012cf4:	f240 22a9 	movw	r2, #681	; 0x2a9
 8012cf8:	493c      	ldr	r1, [pc, #240]	; (8012dec <tcp_bind+0x11c>)
 8012cfa:	483d      	ldr	r0, [pc, #244]	; (8012df0 <tcp_bind+0x120>)
 8012cfc:	f008 fd82 	bl	801b804 <iprintf>
 8012d00:	f06f 030f 	mvn.w	r3, #15
 8012d04:	e06a      	b.n	8012ddc <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	7d1b      	ldrb	r3, [r3, #20]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d009      	beq.n	8012d22 <tcp_bind+0x52>
 8012d0e:	4b36      	ldr	r3, [pc, #216]	; (8012de8 <tcp_bind+0x118>)
 8012d10:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012d14:	4937      	ldr	r1, [pc, #220]	; (8012df4 <tcp_bind+0x124>)
 8012d16:	4836      	ldr	r0, [pc, #216]	; (8012df0 <tcp_bind+0x120>)
 8012d18:	f008 fd74 	bl	801b804 <iprintf>
 8012d1c:	f06f 0305 	mvn.w	r3, #5
 8012d20:	e05c      	b.n	8012ddc <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8012d22:	88fb      	ldrh	r3, [r7, #6]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d109      	bne.n	8012d3c <tcp_bind+0x6c>
    port = tcp_new_port();
 8012d28:	f000 f914 	bl	8012f54 <tcp_new_port>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012d30:	88fb      	ldrh	r3, [r7, #6]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d135      	bne.n	8012da2 <tcp_bind+0xd2>
      return ERR_BUF;
 8012d36:	f06f 0301 	mvn.w	r3, #1
 8012d3a:	e04f      	b.n	8012ddc <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	61fb      	str	r3, [r7, #28]
 8012d40:	e02b      	b.n	8012d9a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8012d42:	4a2d      	ldr	r2, [pc, #180]	; (8012df8 <tcp_bind+0x128>)
 8012d44:	69fb      	ldr	r3, [r7, #28]
 8012d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	61bb      	str	r3, [r7, #24]
 8012d4e:	e01e      	b.n	8012d8e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8012d50:	69bb      	ldr	r3, [r7, #24]
 8012d52:	8adb      	ldrh	r3, [r3, #22]
 8012d54:	88fa      	ldrh	r2, [r7, #6]
 8012d56:	429a      	cmp	r2, r3
 8012d58:	d116      	bne.n	8012d88 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8012d5a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d010      	beq.n	8012d82 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8012d60:	69bb      	ldr	r3, [r7, #24]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d00c      	beq.n	8012d82 <tcp_bind+0xb2>
 8012d68:	68bb      	ldr	r3, [r7, #8]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d009      	beq.n	8012d82 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8012d6e:	68bb      	ldr	r3, [r7, #8]
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d005      	beq.n	8012d82 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8012d76:	69bb      	ldr	r3, [r7, #24]
 8012d78:	681a      	ldr	r2, [r3, #0]
 8012d7a:	68bb      	ldr	r3, [r7, #8]
 8012d7c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8012d7e:	429a      	cmp	r2, r3
 8012d80:	d102      	bne.n	8012d88 <tcp_bind+0xb8>
              return ERR_USE;
 8012d82:	f06f 0307 	mvn.w	r3, #7
 8012d86:	e029      	b.n	8012ddc <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8012d88:	69bb      	ldr	r3, [r7, #24]
 8012d8a:	68db      	ldr	r3, [r3, #12]
 8012d8c:	61bb      	str	r3, [r7, #24]
 8012d8e:	69bb      	ldr	r3, [r7, #24]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d1dd      	bne.n	8012d50 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8012d94:	69fb      	ldr	r3, [r7, #28]
 8012d96:	3301      	adds	r3, #1
 8012d98:	61fb      	str	r3, [r7, #28]
 8012d9a:	69fa      	ldr	r2, [r7, #28]
 8012d9c:	697b      	ldr	r3, [r7, #20]
 8012d9e:	429a      	cmp	r2, r3
 8012da0:	dbcf      	blt.n	8012d42 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8012da2:	68bb      	ldr	r3, [r7, #8]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d00c      	beq.n	8012dc2 <tcp_bind+0xf2>
 8012da8:	68bb      	ldr	r3, [r7, #8]
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d008      	beq.n	8012dc2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8012db0:	68bb      	ldr	r3, [r7, #8]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d002      	beq.n	8012dbc <tcp_bind+0xec>
 8012db6:	68bb      	ldr	r3, [r7, #8]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	e000      	b.n	8012dbe <tcp_bind+0xee>
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	68fa      	ldr	r2, [r7, #12]
 8012dc0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	88fa      	ldrh	r2, [r7, #6]
 8012dc6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8012dc8:	4b0c      	ldr	r3, [pc, #48]	; (8012dfc <tcp_bind+0x12c>)
 8012dca:	681a      	ldr	r2, [r3, #0]
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	60da      	str	r2, [r3, #12]
 8012dd0:	4a0a      	ldr	r2, [pc, #40]	; (8012dfc <tcp_bind+0x12c>)
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	6013      	str	r3, [r2, #0]
 8012dd6:	f005 fbd5 	bl	8018584 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8012dda:	2300      	movs	r3, #0
}
 8012ddc:	4618      	mov	r0, r3
 8012dde:	3720      	adds	r7, #32
 8012de0:	46bd      	mov	sp, r7
 8012de2:	bd80      	pop	{r7, pc}
 8012de4:	0802060c 	.word	0x0802060c
 8012de8:	0801e508 	.word	0x0801e508
 8012dec:	0801e69c 	.word	0x0801e69c
 8012df0:	0801e54c 	.word	0x0801e54c
 8012df4:	0801e6b4 	.word	0x0801e6b4
 8012df8:	080205e4 	.word	0x080205e4
 8012dfc:	20011090 	.word	0x20011090

08012e00 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b084      	sub	sp, #16
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d106      	bne.n	8012e1c <tcp_update_rcv_ann_wnd+0x1c>
 8012e0e:	4b25      	ldr	r3, [pc, #148]	; (8012ea4 <tcp_update_rcv_ann_wnd+0xa4>)
 8012e10:	f240 32a6 	movw	r2, #934	; 0x3a6
 8012e14:	4924      	ldr	r1, [pc, #144]	; (8012ea8 <tcp_update_rcv_ann_wnd+0xa8>)
 8012e16:	4825      	ldr	r0, [pc, #148]	; (8012eac <tcp_update_rcv_ann_wnd+0xac>)
 8012e18:	f008 fcf4 	bl	801b804 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e20:	687a      	ldr	r2, [r7, #4]
 8012e22:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8012e24:	4413      	add	r3, r2
 8012e26:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e2c:	687a      	ldr	r2, [r7, #4]
 8012e2e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8012e30:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8012e34:	bf28      	it	cs
 8012e36:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8012e3a:	b292      	uxth	r2, r2
 8012e3c:	4413      	add	r3, r2
 8012e3e:	68fa      	ldr	r2, [r7, #12]
 8012e40:	1ad3      	subs	r3, r2, r3
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	db08      	blt.n	8012e58 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e52:	68fa      	ldr	r2, [r7, #12]
 8012e54:	1ad3      	subs	r3, r2, r3
 8012e56:	e020      	b.n	8012e9a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e60:	1ad3      	subs	r3, r2, r3
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	dd03      	ble.n	8012e6e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	2200      	movs	r2, #0
 8012e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012e6c:	e014      	b.n	8012e98 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e76:	1ad3      	subs	r3, r2, r3
 8012e78:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8012e7a:	68bb      	ldr	r3, [r7, #8]
 8012e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012e80:	d306      	bcc.n	8012e90 <tcp_update_rcv_ann_wnd+0x90>
 8012e82:	4b08      	ldr	r3, [pc, #32]	; (8012ea4 <tcp_update_rcv_ann_wnd+0xa4>)
 8012e84:	f240 32b6 	movw	r2, #950	; 0x3b6
 8012e88:	4909      	ldr	r1, [pc, #36]	; (8012eb0 <tcp_update_rcv_ann_wnd+0xb0>)
 8012e8a:	4808      	ldr	r0, [pc, #32]	; (8012eac <tcp_update_rcv_ann_wnd+0xac>)
 8012e8c:	f008 fcba 	bl	801b804 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012e90:	68bb      	ldr	r3, [r7, #8]
 8012e92:	b29a      	uxth	r2, r3
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8012e98:	2300      	movs	r3, #0
  }
}
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	3710      	adds	r7, #16
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	bd80      	pop	{r7, pc}
 8012ea2:	bf00      	nop
 8012ea4:	0801e508 	.word	0x0801e508
 8012ea8:	0801e764 	.word	0x0801e764
 8012eac:	0801e54c 	.word	0x0801e54c
 8012eb0:	0801e788 	.word	0x0801e788

08012eb4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b084      	sub	sp, #16
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
 8012ebc:	460b      	mov	r3, r1
 8012ebe:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d107      	bne.n	8012ed6 <tcp_recved+0x22>
 8012ec6:	4b1f      	ldr	r3, [pc, #124]	; (8012f44 <tcp_recved+0x90>)
 8012ec8:	f240 32cf 	movw	r2, #975	; 0x3cf
 8012ecc:	491e      	ldr	r1, [pc, #120]	; (8012f48 <tcp_recved+0x94>)
 8012ece:	481f      	ldr	r0, [pc, #124]	; (8012f4c <tcp_recved+0x98>)
 8012ed0:	f008 fc98 	bl	801b804 <iprintf>
 8012ed4:	e032      	b.n	8012f3c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	7d1b      	ldrb	r3, [r3, #20]
 8012eda:	2b01      	cmp	r3, #1
 8012edc:	d106      	bne.n	8012eec <tcp_recved+0x38>
 8012ede:	4b19      	ldr	r3, [pc, #100]	; (8012f44 <tcp_recved+0x90>)
 8012ee0:	f240 32d2 	movw	r2, #978	; 0x3d2
 8012ee4:	491a      	ldr	r1, [pc, #104]	; (8012f50 <tcp_recved+0x9c>)
 8012ee6:	4819      	ldr	r0, [pc, #100]	; (8012f4c <tcp_recved+0x98>)
 8012ee8:	f008 fc8c 	bl	801b804 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012ef0:	887b      	ldrh	r3, [r7, #2]
 8012ef2:	4413      	add	r3, r2
 8012ef4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8012ef6:	89fb      	ldrh	r3, [r7, #14]
 8012ef8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012efc:	d804      	bhi.n	8012f08 <tcp_recved+0x54>
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012f02:	89fa      	ldrh	r2, [r7, #14]
 8012f04:	429a      	cmp	r2, r3
 8012f06:	d204      	bcs.n	8012f12 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012f0e:	851a      	strh	r2, [r3, #40]	; 0x28
 8012f10:	e002      	b.n	8012f18 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	89fa      	ldrh	r2, [r7, #14]
 8012f16:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8012f18:	6878      	ldr	r0, [r7, #4]
 8012f1a:	f7ff ff71 	bl	8012e00 <tcp_update_rcv_ann_wnd>
 8012f1e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8012f20:	68bb      	ldr	r3, [r7, #8]
 8012f22:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012f26:	d309      	bcc.n	8012f3c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	8b5b      	ldrh	r3, [r3, #26]
 8012f2c:	f043 0302 	orr.w	r3, r3, #2
 8012f30:	b29a      	uxth	r2, r3
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012f36:	6878      	ldr	r0, [r7, #4]
 8012f38:	f004 fbae 	bl	8017698 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8012f3c:	3710      	adds	r7, #16
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	bd80      	pop	{r7, pc}
 8012f42:	bf00      	nop
 8012f44:	0801e508 	.word	0x0801e508
 8012f48:	0801e7a4 	.word	0x0801e7a4
 8012f4c:	0801e54c 	.word	0x0801e54c
 8012f50:	0801e7bc 	.word	0x0801e7bc

08012f54 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8012f54:	b480      	push	{r7}
 8012f56:	b083      	sub	sp, #12
 8012f58:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8012f5e:	4b1e      	ldr	r3, [pc, #120]	; (8012fd8 <tcp_new_port+0x84>)
 8012f60:	881b      	ldrh	r3, [r3, #0]
 8012f62:	3301      	adds	r3, #1
 8012f64:	b29a      	uxth	r2, r3
 8012f66:	4b1c      	ldr	r3, [pc, #112]	; (8012fd8 <tcp_new_port+0x84>)
 8012f68:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8012f6a:	4b1b      	ldr	r3, [pc, #108]	; (8012fd8 <tcp_new_port+0x84>)
 8012f6c:	881b      	ldrh	r3, [r3, #0]
 8012f6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012f72:	4293      	cmp	r3, r2
 8012f74:	d103      	bne.n	8012f7e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8012f76:	4b18      	ldr	r3, [pc, #96]	; (8012fd8 <tcp_new_port+0x84>)
 8012f78:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012f7c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012f7e:	2300      	movs	r3, #0
 8012f80:	71fb      	strb	r3, [r7, #7]
 8012f82:	e01e      	b.n	8012fc2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012f84:	79fb      	ldrb	r3, [r7, #7]
 8012f86:	4a15      	ldr	r2, [pc, #84]	; (8012fdc <tcp_new_port+0x88>)
 8012f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	603b      	str	r3, [r7, #0]
 8012f90:	e011      	b.n	8012fb6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8012f92:	683b      	ldr	r3, [r7, #0]
 8012f94:	8ada      	ldrh	r2, [r3, #22]
 8012f96:	4b10      	ldr	r3, [pc, #64]	; (8012fd8 <tcp_new_port+0x84>)
 8012f98:	881b      	ldrh	r3, [r3, #0]
 8012f9a:	429a      	cmp	r2, r3
 8012f9c:	d108      	bne.n	8012fb0 <tcp_new_port+0x5c>
        n++;
 8012f9e:	88bb      	ldrh	r3, [r7, #4]
 8012fa0:	3301      	adds	r3, #1
 8012fa2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8012fa4:	88bb      	ldrh	r3, [r7, #4]
 8012fa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012faa:	d3d8      	bcc.n	8012f5e <tcp_new_port+0xa>
          return 0;
 8012fac:	2300      	movs	r3, #0
 8012fae:	e00d      	b.n	8012fcc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012fb0:	683b      	ldr	r3, [r7, #0]
 8012fb2:	68db      	ldr	r3, [r3, #12]
 8012fb4:	603b      	str	r3, [r7, #0]
 8012fb6:	683b      	ldr	r3, [r7, #0]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d1ea      	bne.n	8012f92 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012fbc:	79fb      	ldrb	r3, [r7, #7]
 8012fbe:	3301      	adds	r3, #1
 8012fc0:	71fb      	strb	r3, [r7, #7]
 8012fc2:	79fb      	ldrb	r3, [r7, #7]
 8012fc4:	2b03      	cmp	r3, #3
 8012fc6:	d9dd      	bls.n	8012f84 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8012fc8:	4b03      	ldr	r3, [pc, #12]	; (8012fd8 <tcp_new_port+0x84>)
 8012fca:	881b      	ldrh	r3, [r3, #0]
}
 8012fcc:	4618      	mov	r0, r3
 8012fce:	370c      	adds	r7, #12
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd6:	4770      	bx	lr
 8012fd8:	20000024 	.word	0x20000024
 8012fdc:	080205e4 	.word	0x080205e4

08012fe0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012fe0:	b5b0      	push	{r4, r5, r7, lr}
 8012fe2:	b090      	sub	sp, #64	; 0x40
 8012fe4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8012fec:	4b94      	ldr	r3, [pc, #592]	; (8013240 <tcp_slowtmr+0x260>)
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	3301      	adds	r3, #1
 8012ff2:	4a93      	ldr	r2, [pc, #588]	; (8013240 <tcp_slowtmr+0x260>)
 8012ff4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8012ff6:	4b93      	ldr	r3, [pc, #588]	; (8013244 <tcp_slowtmr+0x264>)
 8012ff8:	781b      	ldrb	r3, [r3, #0]
 8012ffa:	3301      	adds	r3, #1
 8012ffc:	b2da      	uxtb	r2, r3
 8012ffe:	4b91      	ldr	r3, [pc, #580]	; (8013244 <tcp_slowtmr+0x264>)
 8013000:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8013002:	2300      	movs	r3, #0
 8013004:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8013006:	4b90      	ldr	r3, [pc, #576]	; (8013248 <tcp_slowtmr+0x268>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801300c:	e29d      	b.n	801354a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801300e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013010:	7d1b      	ldrb	r3, [r3, #20]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d106      	bne.n	8013024 <tcp_slowtmr+0x44>
 8013016:	4b8d      	ldr	r3, [pc, #564]	; (801324c <tcp_slowtmr+0x26c>)
 8013018:	f240 42be 	movw	r2, #1214	; 0x4be
 801301c:	498c      	ldr	r1, [pc, #560]	; (8013250 <tcp_slowtmr+0x270>)
 801301e:	488d      	ldr	r0, [pc, #564]	; (8013254 <tcp_slowtmr+0x274>)
 8013020:	f008 fbf0 	bl	801b804 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8013024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013026:	7d1b      	ldrb	r3, [r3, #20]
 8013028:	2b01      	cmp	r3, #1
 801302a:	d106      	bne.n	801303a <tcp_slowtmr+0x5a>
 801302c:	4b87      	ldr	r3, [pc, #540]	; (801324c <tcp_slowtmr+0x26c>)
 801302e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8013032:	4989      	ldr	r1, [pc, #548]	; (8013258 <tcp_slowtmr+0x278>)
 8013034:	4887      	ldr	r0, [pc, #540]	; (8013254 <tcp_slowtmr+0x274>)
 8013036:	f008 fbe5 	bl	801b804 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801303a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801303c:	7d1b      	ldrb	r3, [r3, #20]
 801303e:	2b0a      	cmp	r3, #10
 8013040:	d106      	bne.n	8013050 <tcp_slowtmr+0x70>
 8013042:	4b82      	ldr	r3, [pc, #520]	; (801324c <tcp_slowtmr+0x26c>)
 8013044:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8013048:	4984      	ldr	r1, [pc, #528]	; (801325c <tcp_slowtmr+0x27c>)
 801304a:	4882      	ldr	r0, [pc, #520]	; (8013254 <tcp_slowtmr+0x274>)
 801304c:	f008 fbda 	bl	801b804 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8013050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013052:	7f9a      	ldrb	r2, [r3, #30]
 8013054:	4b7b      	ldr	r3, [pc, #492]	; (8013244 <tcp_slowtmr+0x264>)
 8013056:	781b      	ldrb	r3, [r3, #0]
 8013058:	429a      	cmp	r2, r3
 801305a:	d105      	bne.n	8013068 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801305c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801305e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013062:	68db      	ldr	r3, [r3, #12]
 8013064:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8013066:	e270      	b.n	801354a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8013068:	4b76      	ldr	r3, [pc, #472]	; (8013244 <tcp_slowtmr+0x264>)
 801306a:	781a      	ldrb	r2, [r3, #0]
 801306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801306e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8013070:	2300      	movs	r3, #0
 8013072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8013076:	2300      	movs	r3, #0
 8013078:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801307c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801307e:	7d1b      	ldrb	r3, [r3, #20]
 8013080:	2b02      	cmp	r3, #2
 8013082:	d10a      	bne.n	801309a <tcp_slowtmr+0xba>
 8013084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013086:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801308a:	2b05      	cmp	r3, #5
 801308c:	d905      	bls.n	801309a <tcp_slowtmr+0xba>
      ++pcb_remove;
 801308e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013092:	3301      	adds	r3, #1
 8013094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013098:	e11e      	b.n	80132d8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801309a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801309c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80130a0:	2b0b      	cmp	r3, #11
 80130a2:	d905      	bls.n	80130b0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80130a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80130a8:	3301      	adds	r3, #1
 80130aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80130ae:	e113      	b.n	80132d8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80130b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130b2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d075      	beq.n	80131a6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80130ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d006      	beq.n	80130d0 <tcp_slowtmr+0xf0>
 80130c2:	4b62      	ldr	r3, [pc, #392]	; (801324c <tcp_slowtmr+0x26c>)
 80130c4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80130c8:	4965      	ldr	r1, [pc, #404]	; (8013260 <tcp_slowtmr+0x280>)
 80130ca:	4862      	ldr	r0, [pc, #392]	; (8013254 <tcp_slowtmr+0x274>)
 80130cc:	f008 fb9a 	bl	801b804 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80130d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d106      	bne.n	80130e6 <tcp_slowtmr+0x106>
 80130d8:	4b5c      	ldr	r3, [pc, #368]	; (801324c <tcp_slowtmr+0x26c>)
 80130da:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80130de:	4961      	ldr	r1, [pc, #388]	; (8013264 <tcp_slowtmr+0x284>)
 80130e0:	485c      	ldr	r0, [pc, #368]	; (8013254 <tcp_slowtmr+0x274>)
 80130e2:	f008 fb8f 	bl	801b804 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80130e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130e8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80130ec:	2b0b      	cmp	r3, #11
 80130ee:	d905      	bls.n	80130fc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80130f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80130f4:	3301      	adds	r3, #1
 80130f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80130fa:	e0ed      	b.n	80132d8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80130fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130fe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013102:	3b01      	subs	r3, #1
 8013104:	4a58      	ldr	r2, [pc, #352]	; (8013268 <tcp_slowtmr+0x288>)
 8013106:	5cd3      	ldrb	r3, [r2, r3]
 8013108:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801310a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801310c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013110:	7c7a      	ldrb	r2, [r7, #17]
 8013112:	429a      	cmp	r2, r3
 8013114:	d907      	bls.n	8013126 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8013116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013118:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801311c:	3301      	adds	r3, #1
 801311e:	b2da      	uxtb	r2, r3
 8013120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013122:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8013126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013128:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801312c:	7c7a      	ldrb	r2, [r7, #17]
 801312e:	429a      	cmp	r2, r3
 8013130:	f200 80d2 	bhi.w	80132d8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8013134:	2301      	movs	r3, #1
 8013136:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8013138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801313a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801313e:	2b00      	cmp	r3, #0
 8013140:	d108      	bne.n	8013154 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8013142:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013144:	f005 f950 	bl	80183e8 <tcp_zero_window_probe>
 8013148:	4603      	mov	r3, r0
 801314a:	2b00      	cmp	r3, #0
 801314c:	d014      	beq.n	8013178 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801314e:	2300      	movs	r3, #0
 8013150:	623b      	str	r3, [r7, #32]
 8013152:	e011      	b.n	8013178 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8013154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013156:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801315a:	4619      	mov	r1, r3
 801315c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801315e:	f004 f815 	bl	801718c <tcp_split_unsent_seg>
 8013162:	4603      	mov	r3, r0
 8013164:	2b00      	cmp	r3, #0
 8013166:	d107      	bne.n	8013178 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8013168:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801316a:	f004 fa95 	bl	8017698 <tcp_output>
 801316e:	4603      	mov	r3, r0
 8013170:	2b00      	cmp	r3, #0
 8013172:	d101      	bne.n	8013178 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8013174:	2300      	movs	r3, #0
 8013176:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8013178:	6a3b      	ldr	r3, [r7, #32]
 801317a:	2b00      	cmp	r3, #0
 801317c:	f000 80ac 	beq.w	80132d8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8013180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013182:	2200      	movs	r2, #0
 8013184:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8013188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801318a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801318e:	2b06      	cmp	r3, #6
 8013190:	f200 80a2 	bhi.w	80132d8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8013194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013196:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801319a:	3301      	adds	r3, #1
 801319c:	b2da      	uxtb	r2, r3
 801319e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131a0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80131a4:	e098      	b.n	80132d8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80131a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	db0f      	blt.n	80131d0 <tcp_slowtmr+0x1f0>
 80131b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131b2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80131b6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80131ba:	4293      	cmp	r3, r2
 80131bc:	d008      	beq.n	80131d0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80131be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80131c4:	b29b      	uxth	r3, r3
 80131c6:	3301      	adds	r3, #1
 80131c8:	b29b      	uxth	r3, r3
 80131ca:	b21a      	sxth	r2, r3
 80131cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ce:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80131d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131d2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80131d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131d8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80131dc:	429a      	cmp	r2, r3
 80131de:	db7b      	blt.n	80132d8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80131e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80131e2:	f004 fd4b 	bl	8017c7c <tcp_rexmit_rto_prepare>
 80131e6:	4603      	mov	r3, r0
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d007      	beq.n	80131fc <tcp_slowtmr+0x21c>
 80131ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d171      	bne.n	80132d8 <tcp_slowtmr+0x2f8>
 80131f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d06d      	beq.n	80132d8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80131fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131fe:	7d1b      	ldrb	r3, [r3, #20]
 8013200:	2b02      	cmp	r3, #2
 8013202:	d03a      	beq.n	801327a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8013204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013206:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801320a:	2b0c      	cmp	r3, #12
 801320c:	bf28      	it	cs
 801320e:	230c      	movcs	r3, #12
 8013210:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8013212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013214:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013218:	10db      	asrs	r3, r3, #3
 801321a:	b21b      	sxth	r3, r3
 801321c:	461a      	mov	r2, r3
 801321e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013220:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013224:	4413      	add	r3, r2
 8013226:	7efa      	ldrb	r2, [r7, #27]
 8013228:	4910      	ldr	r1, [pc, #64]	; (801326c <tcp_slowtmr+0x28c>)
 801322a:	5c8a      	ldrb	r2, [r1, r2]
 801322c:	4093      	lsls	r3, r2
 801322e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8013230:	697b      	ldr	r3, [r7, #20]
 8013232:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8013236:	4293      	cmp	r3, r2
 8013238:	dc1a      	bgt.n	8013270 <tcp_slowtmr+0x290>
 801323a:	697b      	ldr	r3, [r7, #20]
 801323c:	b21a      	sxth	r2, r3
 801323e:	e019      	b.n	8013274 <tcp_slowtmr+0x294>
 8013240:	2001108c 	.word	0x2001108c
 8013244:	200110a2 	.word	0x200110a2
 8013248:	20011098 	.word	0x20011098
 801324c:	0801e508 	.word	0x0801e508
 8013250:	0801e84c 	.word	0x0801e84c
 8013254:	0801e54c 	.word	0x0801e54c
 8013258:	0801e878 	.word	0x0801e878
 801325c:	0801e8a4 	.word	0x0801e8a4
 8013260:	0801e8d4 	.word	0x0801e8d4
 8013264:	0801e908 	.word	0x0801e908
 8013268:	080205dc 	.word	0x080205dc
 801326c:	080205cc 	.word	0x080205cc
 8013270:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013276:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801327a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801327c:	2200      	movs	r2, #0
 801327e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8013280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013282:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013288:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801328c:	4293      	cmp	r3, r2
 801328e:	bf28      	it	cs
 8013290:	4613      	movcs	r3, r2
 8013292:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8013294:	8a7b      	ldrh	r3, [r7, #18]
 8013296:	085b      	lsrs	r3, r3, #1
 8013298:	b29a      	uxth	r2, r3
 801329a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801329c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80132a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132a2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80132a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80132aa:	005b      	lsls	r3, r3, #1
 80132ac:	b29b      	uxth	r3, r3
 80132ae:	429a      	cmp	r2, r3
 80132b0:	d206      	bcs.n	80132c0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80132b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80132b6:	005b      	lsls	r3, r3, #1
 80132b8:	b29a      	uxth	r2, r3
 80132ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132bc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80132c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132c2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80132c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80132ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132cc:	2200      	movs	r2, #0
 80132ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80132d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80132d4:	f004 fd42 	bl	8017d5c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80132d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132da:	7d1b      	ldrb	r3, [r3, #20]
 80132dc:	2b06      	cmp	r3, #6
 80132de:	d111      	bne.n	8013304 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80132e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132e2:	8b5b      	ldrh	r3, [r3, #26]
 80132e4:	f003 0310 	and.w	r3, r3, #16
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d00b      	beq.n	8013304 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80132ec:	4b9c      	ldr	r3, [pc, #624]	; (8013560 <tcp_slowtmr+0x580>)
 80132ee:	681a      	ldr	r2, [r3, #0]
 80132f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132f2:	6a1b      	ldr	r3, [r3, #32]
 80132f4:	1ad3      	subs	r3, r2, r3
 80132f6:	2b28      	cmp	r3, #40	; 0x28
 80132f8:	d904      	bls.n	8013304 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80132fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132fe:	3301      	adds	r3, #1
 8013300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013306:	7a5b      	ldrb	r3, [r3, #9]
 8013308:	f003 0308 	and.w	r3, r3, #8
 801330c:	2b00      	cmp	r3, #0
 801330e:	d04a      	beq.n	80133a6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8013310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013312:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013314:	2b04      	cmp	r3, #4
 8013316:	d003      	beq.n	8013320 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8013318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801331a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801331c:	2b07      	cmp	r3, #7
 801331e:	d142      	bne.n	80133a6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013320:	4b8f      	ldr	r3, [pc, #572]	; (8013560 <tcp_slowtmr+0x580>)
 8013322:	681a      	ldr	r2, [r3, #0]
 8013324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013326:	6a1b      	ldr	r3, [r3, #32]
 8013328:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801332a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801332c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8013330:	4b8c      	ldr	r3, [pc, #560]	; (8013564 <tcp_slowtmr+0x584>)
 8013332:	440b      	add	r3, r1
 8013334:	498c      	ldr	r1, [pc, #560]	; (8013568 <tcp_slowtmr+0x588>)
 8013336:	fba1 1303 	umull	r1, r3, r1, r3
 801333a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801333c:	429a      	cmp	r2, r3
 801333e:	d90a      	bls.n	8013356 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8013340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013344:	3301      	adds	r3, #1
 8013346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801334a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801334e:	3301      	adds	r3, #1
 8013350:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013354:	e027      	b.n	80133a6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013356:	4b82      	ldr	r3, [pc, #520]	; (8013560 <tcp_slowtmr+0x580>)
 8013358:	681a      	ldr	r2, [r3, #0]
 801335a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801335c:	6a1b      	ldr	r3, [r3, #32]
 801335e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8013360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013362:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8013366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013368:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801336c:	4618      	mov	r0, r3
 801336e:	4b7f      	ldr	r3, [pc, #508]	; (801356c <tcp_slowtmr+0x58c>)
 8013370:	fb00 f303 	mul.w	r3, r0, r3
 8013374:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8013376:	497c      	ldr	r1, [pc, #496]	; (8013568 <tcp_slowtmr+0x588>)
 8013378:	fba1 1303 	umull	r1, r3, r1, r3
 801337c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801337e:	429a      	cmp	r2, r3
 8013380:	d911      	bls.n	80133a6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8013382:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013384:	f004 fff0 	bl	8018368 <tcp_keepalive>
 8013388:	4603      	mov	r3, r0
 801338a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801338e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8013392:	2b00      	cmp	r3, #0
 8013394:	d107      	bne.n	80133a6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8013396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013398:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801339c:	3301      	adds	r3, #1
 801339e:	b2da      	uxtb	r2, r3
 80133a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133a2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80133a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d011      	beq.n	80133d2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80133ae:	4b6c      	ldr	r3, [pc, #432]	; (8013560 <tcp_slowtmr+0x580>)
 80133b0:	681a      	ldr	r2, [r3, #0]
 80133b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133b4:	6a1b      	ldr	r3, [r3, #32]
 80133b6:	1ad2      	subs	r2, r2, r3
 80133b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133ba:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80133be:	4619      	mov	r1, r3
 80133c0:	460b      	mov	r3, r1
 80133c2:	005b      	lsls	r3, r3, #1
 80133c4:	440b      	add	r3, r1
 80133c6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80133c8:	429a      	cmp	r2, r3
 80133ca:	d302      	bcc.n	80133d2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80133cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80133ce:	f000 feab 	bl	8014128 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80133d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133d4:	7d1b      	ldrb	r3, [r3, #20]
 80133d6:	2b03      	cmp	r3, #3
 80133d8:	d10b      	bne.n	80133f2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80133da:	4b61      	ldr	r3, [pc, #388]	; (8013560 <tcp_slowtmr+0x580>)
 80133dc:	681a      	ldr	r2, [r3, #0]
 80133de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133e0:	6a1b      	ldr	r3, [r3, #32]
 80133e2:	1ad3      	subs	r3, r2, r3
 80133e4:	2b28      	cmp	r3, #40	; 0x28
 80133e6:	d904      	bls.n	80133f2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80133e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80133ec:	3301      	adds	r3, #1
 80133ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80133f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133f4:	7d1b      	ldrb	r3, [r3, #20]
 80133f6:	2b09      	cmp	r3, #9
 80133f8:	d10b      	bne.n	8013412 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80133fa:	4b59      	ldr	r3, [pc, #356]	; (8013560 <tcp_slowtmr+0x580>)
 80133fc:	681a      	ldr	r2, [r3, #0]
 80133fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013400:	6a1b      	ldr	r3, [r3, #32]
 8013402:	1ad3      	subs	r3, r2, r3
 8013404:	2bf0      	cmp	r3, #240	; 0xf0
 8013406:	d904      	bls.n	8013412 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8013408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801340c:	3301      	adds	r3, #1
 801340e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013412:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013416:	2b00      	cmp	r3, #0
 8013418:	d060      	beq.n	80134dc <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801341a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801341c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013420:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8013422:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013424:	f000 fccc 	bl	8013dc0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8013428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801342a:	2b00      	cmp	r3, #0
 801342c:	d010      	beq.n	8013450 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801342e:	4b50      	ldr	r3, [pc, #320]	; (8013570 <tcp_slowtmr+0x590>)
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013434:	429a      	cmp	r2, r3
 8013436:	d106      	bne.n	8013446 <tcp_slowtmr+0x466>
 8013438:	4b4e      	ldr	r3, [pc, #312]	; (8013574 <tcp_slowtmr+0x594>)
 801343a:	f240 526d 	movw	r2, #1389	; 0x56d
 801343e:	494e      	ldr	r1, [pc, #312]	; (8013578 <tcp_slowtmr+0x598>)
 8013440:	484e      	ldr	r0, [pc, #312]	; (801357c <tcp_slowtmr+0x59c>)
 8013442:	f008 f9df 	bl	801b804 <iprintf>
        prev->next = pcb->next;
 8013446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013448:	68da      	ldr	r2, [r3, #12]
 801344a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801344c:	60da      	str	r2, [r3, #12]
 801344e:	e00f      	b.n	8013470 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8013450:	4b47      	ldr	r3, [pc, #284]	; (8013570 <tcp_slowtmr+0x590>)
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013456:	429a      	cmp	r2, r3
 8013458:	d006      	beq.n	8013468 <tcp_slowtmr+0x488>
 801345a:	4b46      	ldr	r3, [pc, #280]	; (8013574 <tcp_slowtmr+0x594>)
 801345c:	f240 5271 	movw	r2, #1393	; 0x571
 8013460:	4947      	ldr	r1, [pc, #284]	; (8013580 <tcp_slowtmr+0x5a0>)
 8013462:	4846      	ldr	r0, [pc, #280]	; (801357c <tcp_slowtmr+0x59c>)
 8013464:	f008 f9ce 	bl	801b804 <iprintf>
        tcp_active_pcbs = pcb->next;
 8013468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801346a:	68db      	ldr	r3, [r3, #12]
 801346c:	4a40      	ldr	r2, [pc, #256]	; (8013570 <tcp_slowtmr+0x590>)
 801346e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8013470:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013474:	2b00      	cmp	r3, #0
 8013476:	d013      	beq.n	80134a0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801347a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801347c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801347e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8013480:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8013482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013484:	3304      	adds	r3, #4
 8013486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013488:	8ad2      	ldrh	r2, [r2, #22]
 801348a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801348c:	8b09      	ldrh	r1, [r1, #24]
 801348e:	9102      	str	r1, [sp, #8]
 8013490:	9201      	str	r2, [sp, #4]
 8013492:	9300      	str	r3, [sp, #0]
 8013494:	462b      	mov	r3, r5
 8013496:	4622      	mov	r2, r4
 8013498:	4601      	mov	r1, r0
 801349a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801349c:	f004 feb0 	bl	8018200 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80134a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134a2:	691b      	ldr	r3, [r3, #16]
 80134a4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80134a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134a8:	7d1b      	ldrb	r3, [r3, #20]
 80134aa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80134ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ae:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80134b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134b2:	68db      	ldr	r3, [r3, #12]
 80134b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80134b6:	6838      	ldr	r0, [r7, #0]
 80134b8:	f7ff f8ba 	bl	8012630 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80134bc:	4b31      	ldr	r3, [pc, #196]	; (8013584 <tcp_slowtmr+0x5a4>)
 80134be:	2200      	movs	r2, #0
 80134c0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d004      	beq.n	80134d2 <tcp_slowtmr+0x4f2>
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	f06f 010c 	mvn.w	r1, #12
 80134ce:	68b8      	ldr	r0, [r7, #8]
 80134d0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80134d2:	4b2c      	ldr	r3, [pc, #176]	; (8013584 <tcp_slowtmr+0x5a4>)
 80134d4:	781b      	ldrb	r3, [r3, #0]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d037      	beq.n	801354a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80134da:	e592      	b.n	8013002 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80134dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134de:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80134e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134e2:	68db      	ldr	r3, [r3, #12]
 80134e4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80134e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134e8:	7f1b      	ldrb	r3, [r3, #28]
 80134ea:	3301      	adds	r3, #1
 80134ec:	b2da      	uxtb	r2, r3
 80134ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134f0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80134f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134f4:	7f1a      	ldrb	r2, [r3, #28]
 80134f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134f8:	7f5b      	ldrb	r3, [r3, #29]
 80134fa:	429a      	cmp	r2, r3
 80134fc:	d325      	bcc.n	801354a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80134fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013500:	2200      	movs	r2, #0
 8013502:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8013504:	4b1f      	ldr	r3, [pc, #124]	; (8013584 <tcp_slowtmr+0x5a4>)
 8013506:	2200      	movs	r2, #0
 8013508:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801350a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801350c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013510:	2b00      	cmp	r3, #0
 8013512:	d00b      	beq.n	801352c <tcp_slowtmr+0x54c>
 8013514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013516:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801351a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801351c:	6912      	ldr	r2, [r2, #16]
 801351e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013520:	4610      	mov	r0, r2
 8013522:	4798      	blx	r3
 8013524:	4603      	mov	r3, r0
 8013526:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801352a:	e002      	b.n	8013532 <tcp_slowtmr+0x552>
 801352c:	2300      	movs	r3, #0
 801352e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8013532:	4b14      	ldr	r3, [pc, #80]	; (8013584 <tcp_slowtmr+0x5a4>)
 8013534:	781b      	ldrb	r3, [r3, #0]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d000      	beq.n	801353c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801353a:	e562      	b.n	8013002 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801353c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8013540:	2b00      	cmp	r3, #0
 8013542:	d102      	bne.n	801354a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8013544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013546:	f004 f8a7 	bl	8017698 <tcp_output>
  while (pcb != NULL) {
 801354a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801354c:	2b00      	cmp	r3, #0
 801354e:	f47f ad5e 	bne.w	801300e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8013552:	2300      	movs	r3, #0
 8013554:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8013556:	4b0c      	ldr	r3, [pc, #48]	; (8013588 <tcp_slowtmr+0x5a8>)
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801355c:	e069      	b.n	8013632 <tcp_slowtmr+0x652>
 801355e:	bf00      	nop
 8013560:	2001108c 	.word	0x2001108c
 8013564:	000a4cb8 	.word	0x000a4cb8
 8013568:	10624dd3 	.word	0x10624dd3
 801356c:	000124f8 	.word	0x000124f8
 8013570:	20011098 	.word	0x20011098
 8013574:	0801e508 	.word	0x0801e508
 8013578:	0801e940 	.word	0x0801e940
 801357c:	0801e54c 	.word	0x0801e54c
 8013580:	0801e96c 	.word	0x0801e96c
 8013584:	200110a0 	.word	0x200110a0
 8013588:	2001109c 	.word	0x2001109c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801358c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801358e:	7d1b      	ldrb	r3, [r3, #20]
 8013590:	2b0a      	cmp	r3, #10
 8013592:	d006      	beq.n	80135a2 <tcp_slowtmr+0x5c2>
 8013594:	4b2b      	ldr	r3, [pc, #172]	; (8013644 <tcp_slowtmr+0x664>)
 8013596:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801359a:	492b      	ldr	r1, [pc, #172]	; (8013648 <tcp_slowtmr+0x668>)
 801359c:	482b      	ldr	r0, [pc, #172]	; (801364c <tcp_slowtmr+0x66c>)
 801359e:	f008 f931 	bl	801b804 <iprintf>
    pcb_remove = 0;
 80135a2:	2300      	movs	r3, #0
 80135a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80135a8:	4b29      	ldr	r3, [pc, #164]	; (8013650 <tcp_slowtmr+0x670>)
 80135aa:	681a      	ldr	r2, [r3, #0]
 80135ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ae:	6a1b      	ldr	r3, [r3, #32]
 80135b0:	1ad3      	subs	r3, r2, r3
 80135b2:	2bf0      	cmp	r3, #240	; 0xf0
 80135b4:	d904      	bls.n	80135c0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80135b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80135ba:	3301      	adds	r3, #1
 80135bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80135c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d02f      	beq.n	8013628 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80135c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80135ca:	f000 fbf9 	bl	8013dc0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80135ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d010      	beq.n	80135f6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80135d4:	4b1f      	ldr	r3, [pc, #124]	; (8013654 <tcp_slowtmr+0x674>)
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135da:	429a      	cmp	r2, r3
 80135dc:	d106      	bne.n	80135ec <tcp_slowtmr+0x60c>
 80135de:	4b19      	ldr	r3, [pc, #100]	; (8013644 <tcp_slowtmr+0x664>)
 80135e0:	f240 52af 	movw	r2, #1455	; 0x5af
 80135e4:	491c      	ldr	r1, [pc, #112]	; (8013658 <tcp_slowtmr+0x678>)
 80135e6:	4819      	ldr	r0, [pc, #100]	; (801364c <tcp_slowtmr+0x66c>)
 80135e8:	f008 f90c 	bl	801b804 <iprintf>
        prev->next = pcb->next;
 80135ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ee:	68da      	ldr	r2, [r3, #12]
 80135f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135f2:	60da      	str	r2, [r3, #12]
 80135f4:	e00f      	b.n	8013616 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80135f6:	4b17      	ldr	r3, [pc, #92]	; (8013654 <tcp_slowtmr+0x674>)
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135fc:	429a      	cmp	r2, r3
 80135fe:	d006      	beq.n	801360e <tcp_slowtmr+0x62e>
 8013600:	4b10      	ldr	r3, [pc, #64]	; (8013644 <tcp_slowtmr+0x664>)
 8013602:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8013606:	4915      	ldr	r1, [pc, #84]	; (801365c <tcp_slowtmr+0x67c>)
 8013608:	4810      	ldr	r0, [pc, #64]	; (801364c <tcp_slowtmr+0x66c>)
 801360a:	f008 f8fb 	bl	801b804 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801360e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013610:	68db      	ldr	r3, [r3, #12]
 8013612:	4a10      	ldr	r2, [pc, #64]	; (8013654 <tcp_slowtmr+0x674>)
 8013614:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8013616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013618:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801361a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801361c:	68db      	ldr	r3, [r3, #12]
 801361e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8013620:	69f8      	ldr	r0, [r7, #28]
 8013622:	f7ff f805 	bl	8012630 <tcp_free>
 8013626:	e004      	b.n	8013632 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8013628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801362a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801362c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801362e:	68db      	ldr	r3, [r3, #12]
 8013630:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8013632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013634:	2b00      	cmp	r3, #0
 8013636:	d1a9      	bne.n	801358c <tcp_slowtmr+0x5ac>
    }
  }
}
 8013638:	bf00      	nop
 801363a:	bf00      	nop
 801363c:	3730      	adds	r7, #48	; 0x30
 801363e:	46bd      	mov	sp, r7
 8013640:	bdb0      	pop	{r4, r5, r7, pc}
 8013642:	bf00      	nop
 8013644:	0801e508 	.word	0x0801e508
 8013648:	0801e998 	.word	0x0801e998
 801364c:	0801e54c 	.word	0x0801e54c
 8013650:	2001108c 	.word	0x2001108c
 8013654:	2001109c 	.word	0x2001109c
 8013658:	0801e9c8 	.word	0x0801e9c8
 801365c:	0801e9f0 	.word	0x0801e9f0

08013660 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8013660:	b580      	push	{r7, lr}
 8013662:	b082      	sub	sp, #8
 8013664:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8013666:	4b2d      	ldr	r3, [pc, #180]	; (801371c <tcp_fasttmr+0xbc>)
 8013668:	781b      	ldrb	r3, [r3, #0]
 801366a:	3301      	adds	r3, #1
 801366c:	b2da      	uxtb	r2, r3
 801366e:	4b2b      	ldr	r3, [pc, #172]	; (801371c <tcp_fasttmr+0xbc>)
 8013670:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8013672:	4b2b      	ldr	r3, [pc, #172]	; (8013720 <tcp_fasttmr+0xc0>)
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013678:	e048      	b.n	801370c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	7f9a      	ldrb	r2, [r3, #30]
 801367e:	4b27      	ldr	r3, [pc, #156]	; (801371c <tcp_fasttmr+0xbc>)
 8013680:	781b      	ldrb	r3, [r3, #0]
 8013682:	429a      	cmp	r2, r3
 8013684:	d03f      	beq.n	8013706 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8013686:	4b25      	ldr	r3, [pc, #148]	; (801371c <tcp_fasttmr+0xbc>)
 8013688:	781a      	ldrb	r2, [r3, #0]
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	8b5b      	ldrh	r3, [r3, #26]
 8013692:	f003 0301 	and.w	r3, r3, #1
 8013696:	2b00      	cmp	r3, #0
 8013698:	d010      	beq.n	80136bc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	8b5b      	ldrh	r3, [r3, #26]
 801369e:	f043 0302 	orr.w	r3, r3, #2
 80136a2:	b29a      	uxth	r2, r3
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80136a8:	6878      	ldr	r0, [r7, #4]
 80136aa:	f003 fff5 	bl	8017698 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	8b5b      	ldrh	r3, [r3, #26]
 80136b2:	f023 0303 	bic.w	r3, r3, #3
 80136b6:	b29a      	uxth	r2, r3
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	8b5b      	ldrh	r3, [r3, #26]
 80136c0:	f003 0308 	and.w	r3, r3, #8
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d009      	beq.n	80136dc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	8b5b      	ldrh	r3, [r3, #26]
 80136cc:	f023 0308 	bic.w	r3, r3, #8
 80136d0:	b29a      	uxth	r2, r3
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80136d6:	6878      	ldr	r0, [r7, #4]
 80136d8:	f7ff f93e 	bl	8012958 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	68db      	ldr	r3, [r3, #12]
 80136e0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d00a      	beq.n	8013700 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80136ea:	4b0e      	ldr	r3, [pc, #56]	; (8013724 <tcp_fasttmr+0xc4>)
 80136ec:	2200      	movs	r2, #0
 80136ee:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80136f0:	6878      	ldr	r0, [r7, #4]
 80136f2:	f000 f819 	bl	8013728 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80136f6:	4b0b      	ldr	r3, [pc, #44]	; (8013724 <tcp_fasttmr+0xc4>)
 80136f8:	781b      	ldrb	r3, [r3, #0]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d000      	beq.n	8013700 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80136fe:	e7b8      	b.n	8013672 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8013700:	683b      	ldr	r3, [r7, #0]
 8013702:	607b      	str	r3, [r7, #4]
 8013704:	e002      	b.n	801370c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	68db      	ldr	r3, [r3, #12]
 801370a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d1b3      	bne.n	801367a <tcp_fasttmr+0x1a>
    }
  }
}
 8013712:	bf00      	nop
 8013714:	bf00      	nop
 8013716:	3708      	adds	r7, #8
 8013718:	46bd      	mov	sp, r7
 801371a:	bd80      	pop	{r7, pc}
 801371c:	200110a2 	.word	0x200110a2
 8013720:	20011098 	.word	0x20011098
 8013724:	200110a0 	.word	0x200110a0

08013728 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8013728:	b590      	push	{r4, r7, lr}
 801372a:	b085      	sub	sp, #20
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d109      	bne.n	801374a <tcp_process_refused_data+0x22>
 8013736:	4b37      	ldr	r3, [pc, #220]	; (8013814 <tcp_process_refused_data+0xec>)
 8013738:	f240 6209 	movw	r2, #1545	; 0x609
 801373c:	4936      	ldr	r1, [pc, #216]	; (8013818 <tcp_process_refused_data+0xf0>)
 801373e:	4837      	ldr	r0, [pc, #220]	; (801381c <tcp_process_refused_data+0xf4>)
 8013740:	f008 f860 	bl	801b804 <iprintf>
 8013744:	f06f 030f 	mvn.w	r3, #15
 8013748:	e060      	b.n	801380c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801374e:	7b5b      	ldrb	r3, [r3, #13]
 8013750:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013756:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	2200      	movs	r2, #0
 801375c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013764:	2b00      	cmp	r3, #0
 8013766:	d00b      	beq.n	8013780 <tcp_process_refused_data+0x58>
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	6918      	ldr	r0, [r3, #16]
 8013772:	2300      	movs	r3, #0
 8013774:	68ba      	ldr	r2, [r7, #8]
 8013776:	6879      	ldr	r1, [r7, #4]
 8013778:	47a0      	blx	r4
 801377a:	4603      	mov	r3, r0
 801377c:	73fb      	strb	r3, [r7, #15]
 801377e:	e007      	b.n	8013790 <tcp_process_refused_data+0x68>
 8013780:	2300      	movs	r3, #0
 8013782:	68ba      	ldr	r2, [r7, #8]
 8013784:	6879      	ldr	r1, [r7, #4]
 8013786:	2000      	movs	r0, #0
 8013788:	f000 f8a4 	bl	80138d4 <tcp_recv_null>
 801378c:	4603      	mov	r3, r0
 801378e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8013790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d12a      	bne.n	80137ee <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8013798:	7bbb      	ldrb	r3, [r7, #14]
 801379a:	f003 0320 	and.w	r3, r3, #32
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d033      	beq.n	801380a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80137a6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80137aa:	d005      	beq.n	80137b8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80137b0:	3301      	adds	r3, #1
 80137b2:	b29a      	uxth	r2, r3
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d00b      	beq.n	80137da <tcp_process_refused_data+0xb2>
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	6918      	ldr	r0, [r3, #16]
 80137cc:	2300      	movs	r3, #0
 80137ce:	2200      	movs	r2, #0
 80137d0:	6879      	ldr	r1, [r7, #4]
 80137d2:	47a0      	blx	r4
 80137d4:	4603      	mov	r3, r0
 80137d6:	73fb      	strb	r3, [r7, #15]
 80137d8:	e001      	b.n	80137de <tcp_process_refused_data+0xb6>
 80137da:	2300      	movs	r3, #0
 80137dc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80137de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137e2:	f113 0f0d 	cmn.w	r3, #13
 80137e6:	d110      	bne.n	801380a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80137e8:	f06f 030c 	mvn.w	r3, #12
 80137ec:	e00e      	b.n	801380c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80137ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137f2:	f113 0f0d 	cmn.w	r3, #13
 80137f6:	d102      	bne.n	80137fe <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80137f8:	f06f 030c 	mvn.w	r3, #12
 80137fc:	e006      	b.n	801380c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	68ba      	ldr	r2, [r7, #8]
 8013802:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8013804:	f06f 0304 	mvn.w	r3, #4
 8013808:	e000      	b.n	801380c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801380a:	2300      	movs	r3, #0
}
 801380c:	4618      	mov	r0, r3
 801380e:	3714      	adds	r7, #20
 8013810:	46bd      	mov	sp, r7
 8013812:	bd90      	pop	{r4, r7, pc}
 8013814:	0801e508 	.word	0x0801e508
 8013818:	0801ea18 	.word	0x0801ea18
 801381c:	0801e54c 	.word	0x0801e54c

08013820 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8013820:	b580      	push	{r7, lr}
 8013822:	b084      	sub	sp, #16
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8013828:	e007      	b.n	801383a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8013830:	6878      	ldr	r0, [r7, #4]
 8013832:	f000 f80a 	bl	801384a <tcp_seg_free>
    seg = next;
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d1f4      	bne.n	801382a <tcp_segs_free+0xa>
  }
}
 8013840:	bf00      	nop
 8013842:	bf00      	nop
 8013844:	3710      	adds	r7, #16
 8013846:	46bd      	mov	sp, r7
 8013848:	bd80      	pop	{r7, pc}

0801384a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801384a:	b580      	push	{r7, lr}
 801384c:	b082      	sub	sp, #8
 801384e:	af00      	add	r7, sp, #0
 8013850:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d00c      	beq.n	8013872 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	685b      	ldr	r3, [r3, #4]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d004      	beq.n	801386a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	685b      	ldr	r3, [r3, #4]
 8013864:	4618      	mov	r0, r3
 8013866:	f7fe fc37 	bl	80120d8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801386a:	6879      	ldr	r1, [r7, #4]
 801386c:	2003      	movs	r0, #3
 801386e:	f7fd fd5d 	bl	801132c <memp_free>
  }
}
 8013872:	bf00      	nop
 8013874:	3708      	adds	r7, #8
 8013876:	46bd      	mov	sp, r7
 8013878:	bd80      	pop	{r7, pc}
	...

0801387c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b084      	sub	sp, #16
 8013880:	af00      	add	r7, sp, #0
 8013882:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d106      	bne.n	8013898 <tcp_seg_copy+0x1c>
 801388a:	4b0f      	ldr	r3, [pc, #60]	; (80138c8 <tcp_seg_copy+0x4c>)
 801388c:	f240 6282 	movw	r2, #1666	; 0x682
 8013890:	490e      	ldr	r1, [pc, #56]	; (80138cc <tcp_seg_copy+0x50>)
 8013892:	480f      	ldr	r0, [pc, #60]	; (80138d0 <tcp_seg_copy+0x54>)
 8013894:	f007 ffb6 	bl	801b804 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8013898:	2003      	movs	r0, #3
 801389a:	f7fd fcd1 	bl	8011240 <memp_malloc>
 801389e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d101      	bne.n	80138aa <tcp_seg_copy+0x2e>
    return NULL;
 80138a6:	2300      	movs	r3, #0
 80138a8:	e00a      	b.n	80138c0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80138aa:	2210      	movs	r2, #16
 80138ac:	6879      	ldr	r1, [r7, #4]
 80138ae:	68f8      	ldr	r0, [r7, #12]
 80138b0:	f007 ff92 	bl	801b7d8 <memcpy>
  pbuf_ref(cseg->p);
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	685b      	ldr	r3, [r3, #4]
 80138b8:	4618      	mov	r0, r3
 80138ba:	f7fe fcb3 	bl	8012224 <pbuf_ref>
  return cseg;
 80138be:	68fb      	ldr	r3, [r7, #12]
}
 80138c0:	4618      	mov	r0, r3
 80138c2:	3710      	adds	r7, #16
 80138c4:	46bd      	mov	sp, r7
 80138c6:	bd80      	pop	{r7, pc}
 80138c8:	0801e508 	.word	0x0801e508
 80138cc:	0801ea5c 	.word	0x0801ea5c
 80138d0:	0801e54c 	.word	0x0801e54c

080138d4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b084      	sub	sp, #16
 80138d8:	af00      	add	r7, sp, #0
 80138da:	60f8      	str	r0, [r7, #12]
 80138dc:	60b9      	str	r1, [r7, #8]
 80138de:	607a      	str	r2, [r7, #4]
 80138e0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80138e2:	68bb      	ldr	r3, [r7, #8]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d109      	bne.n	80138fc <tcp_recv_null+0x28>
 80138e8:	4b12      	ldr	r3, [pc, #72]	; (8013934 <tcp_recv_null+0x60>)
 80138ea:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80138ee:	4912      	ldr	r1, [pc, #72]	; (8013938 <tcp_recv_null+0x64>)
 80138f0:	4812      	ldr	r0, [pc, #72]	; (801393c <tcp_recv_null+0x68>)
 80138f2:	f007 ff87 	bl	801b804 <iprintf>
 80138f6:	f06f 030f 	mvn.w	r3, #15
 80138fa:	e016      	b.n	801392a <tcp_recv_null+0x56>

  if (p != NULL) {
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d009      	beq.n	8013916 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	891b      	ldrh	r3, [r3, #8]
 8013906:	4619      	mov	r1, r3
 8013908:	68b8      	ldr	r0, [r7, #8]
 801390a:	f7ff fad3 	bl	8012eb4 <tcp_recved>
    pbuf_free(p);
 801390e:	6878      	ldr	r0, [r7, #4]
 8013910:	f7fe fbe2 	bl	80120d8 <pbuf_free>
 8013914:	e008      	b.n	8013928 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8013916:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d104      	bne.n	8013928 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801391e:	68b8      	ldr	r0, [r7, #8]
 8013920:	f7ff f884 	bl	8012a2c <tcp_close>
 8013924:	4603      	mov	r3, r0
 8013926:	e000      	b.n	801392a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8013928:	2300      	movs	r3, #0
}
 801392a:	4618      	mov	r0, r3
 801392c:	3710      	adds	r7, #16
 801392e:	46bd      	mov	sp, r7
 8013930:	bd80      	pop	{r7, pc}
 8013932:	bf00      	nop
 8013934:	0801e508 	.word	0x0801e508
 8013938:	0801ea78 	.word	0x0801ea78
 801393c:	0801e54c 	.word	0x0801e54c

08013940 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b086      	sub	sp, #24
 8013944:	af00      	add	r7, sp, #0
 8013946:	4603      	mov	r3, r0
 8013948:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801394a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801394e:	2b00      	cmp	r3, #0
 8013950:	db01      	blt.n	8013956 <tcp_kill_prio+0x16>
 8013952:	79fb      	ldrb	r3, [r7, #7]
 8013954:	e000      	b.n	8013958 <tcp_kill_prio+0x18>
 8013956:	237f      	movs	r3, #127	; 0x7f
 8013958:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801395a:	7afb      	ldrb	r3, [r7, #11]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d034      	beq.n	80139ca <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013960:	7afb      	ldrb	r3, [r7, #11]
 8013962:	3b01      	subs	r3, #1
 8013964:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8013966:	2300      	movs	r3, #0
 8013968:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801396a:	2300      	movs	r3, #0
 801396c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801396e:	4b19      	ldr	r3, [pc, #100]	; (80139d4 <tcp_kill_prio+0x94>)
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	617b      	str	r3, [r7, #20]
 8013974:	e01f      	b.n	80139b6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8013976:	697b      	ldr	r3, [r7, #20]
 8013978:	7d5b      	ldrb	r3, [r3, #21]
 801397a:	7afa      	ldrb	r2, [r7, #11]
 801397c:	429a      	cmp	r2, r3
 801397e:	d80c      	bhi.n	801399a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013980:	697b      	ldr	r3, [r7, #20]
 8013982:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8013984:	7afa      	ldrb	r2, [r7, #11]
 8013986:	429a      	cmp	r2, r3
 8013988:	d112      	bne.n	80139b0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801398a:	4b13      	ldr	r3, [pc, #76]	; (80139d8 <tcp_kill_prio+0x98>)
 801398c:	681a      	ldr	r2, [r3, #0]
 801398e:	697b      	ldr	r3, [r7, #20]
 8013990:	6a1b      	ldr	r3, [r3, #32]
 8013992:	1ad3      	subs	r3, r2, r3
 8013994:	68fa      	ldr	r2, [r7, #12]
 8013996:	429a      	cmp	r2, r3
 8013998:	d80a      	bhi.n	80139b0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801399a:	4b0f      	ldr	r3, [pc, #60]	; (80139d8 <tcp_kill_prio+0x98>)
 801399c:	681a      	ldr	r2, [r3, #0]
 801399e:	697b      	ldr	r3, [r7, #20]
 80139a0:	6a1b      	ldr	r3, [r3, #32]
 80139a2:	1ad3      	subs	r3, r2, r3
 80139a4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80139a6:	697b      	ldr	r3, [r7, #20]
 80139a8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80139aa:	697b      	ldr	r3, [r7, #20]
 80139ac:	7d5b      	ldrb	r3, [r3, #21]
 80139ae:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80139b0:	697b      	ldr	r3, [r7, #20]
 80139b2:	68db      	ldr	r3, [r3, #12]
 80139b4:	617b      	str	r3, [r7, #20]
 80139b6:	697b      	ldr	r3, [r7, #20]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d1dc      	bne.n	8013976 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80139bc:	693b      	ldr	r3, [r7, #16]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d004      	beq.n	80139cc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80139c2:	6938      	ldr	r0, [r7, #16]
 80139c4:	f7ff f978 	bl	8012cb8 <tcp_abort>
 80139c8:	e000      	b.n	80139cc <tcp_kill_prio+0x8c>
    return;
 80139ca:	bf00      	nop
  }
}
 80139cc:	3718      	adds	r7, #24
 80139ce:	46bd      	mov	sp, r7
 80139d0:	bd80      	pop	{r7, pc}
 80139d2:	bf00      	nop
 80139d4:	20011098 	.word	0x20011098
 80139d8:	2001108c 	.word	0x2001108c

080139dc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	b086      	sub	sp, #24
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	4603      	mov	r3, r0
 80139e4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80139e6:	79fb      	ldrb	r3, [r7, #7]
 80139e8:	2b08      	cmp	r3, #8
 80139ea:	d009      	beq.n	8013a00 <tcp_kill_state+0x24>
 80139ec:	79fb      	ldrb	r3, [r7, #7]
 80139ee:	2b09      	cmp	r3, #9
 80139f0:	d006      	beq.n	8013a00 <tcp_kill_state+0x24>
 80139f2:	4b1a      	ldr	r3, [pc, #104]	; (8013a5c <tcp_kill_state+0x80>)
 80139f4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80139f8:	4919      	ldr	r1, [pc, #100]	; (8013a60 <tcp_kill_state+0x84>)
 80139fa:	481a      	ldr	r0, [pc, #104]	; (8013a64 <tcp_kill_state+0x88>)
 80139fc:	f007 ff02 	bl	801b804 <iprintf>

  inactivity = 0;
 8013a00:	2300      	movs	r3, #0
 8013a02:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013a04:	2300      	movs	r3, #0
 8013a06:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a08:	4b17      	ldr	r3, [pc, #92]	; (8013a68 <tcp_kill_state+0x8c>)
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	617b      	str	r3, [r7, #20]
 8013a0e:	e017      	b.n	8013a40 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8013a10:	697b      	ldr	r3, [r7, #20]
 8013a12:	7d1b      	ldrb	r3, [r3, #20]
 8013a14:	79fa      	ldrb	r2, [r7, #7]
 8013a16:	429a      	cmp	r2, r3
 8013a18:	d10f      	bne.n	8013a3a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013a1a:	4b14      	ldr	r3, [pc, #80]	; (8013a6c <tcp_kill_state+0x90>)
 8013a1c:	681a      	ldr	r2, [r3, #0]
 8013a1e:	697b      	ldr	r3, [r7, #20]
 8013a20:	6a1b      	ldr	r3, [r3, #32]
 8013a22:	1ad3      	subs	r3, r2, r3
 8013a24:	68fa      	ldr	r2, [r7, #12]
 8013a26:	429a      	cmp	r2, r3
 8013a28:	d807      	bhi.n	8013a3a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8013a2a:	4b10      	ldr	r3, [pc, #64]	; (8013a6c <tcp_kill_state+0x90>)
 8013a2c:	681a      	ldr	r2, [r3, #0]
 8013a2e:	697b      	ldr	r3, [r7, #20]
 8013a30:	6a1b      	ldr	r3, [r3, #32]
 8013a32:	1ad3      	subs	r3, r2, r3
 8013a34:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8013a36:	697b      	ldr	r3, [r7, #20]
 8013a38:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a3a:	697b      	ldr	r3, [r7, #20]
 8013a3c:	68db      	ldr	r3, [r3, #12]
 8013a3e:	617b      	str	r3, [r7, #20]
 8013a40:	697b      	ldr	r3, [r7, #20]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d1e4      	bne.n	8013a10 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8013a46:	693b      	ldr	r3, [r7, #16]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d003      	beq.n	8013a54 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8013a4c:	2100      	movs	r1, #0
 8013a4e:	6938      	ldr	r0, [r7, #16]
 8013a50:	f7ff f874 	bl	8012b3c <tcp_abandon>
  }
}
 8013a54:	bf00      	nop
 8013a56:	3718      	adds	r7, #24
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	bd80      	pop	{r7, pc}
 8013a5c:	0801e508 	.word	0x0801e508
 8013a60:	0801ea94 	.word	0x0801ea94
 8013a64:	0801e54c 	.word	0x0801e54c
 8013a68:	20011098 	.word	0x20011098
 8013a6c:	2001108c 	.word	0x2001108c

08013a70 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b084      	sub	sp, #16
 8013a74:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8013a76:	2300      	movs	r3, #0
 8013a78:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a7e:	4b12      	ldr	r3, [pc, #72]	; (8013ac8 <tcp_kill_timewait+0x58>)
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	60fb      	str	r3, [r7, #12]
 8013a84:	e012      	b.n	8013aac <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013a86:	4b11      	ldr	r3, [pc, #68]	; (8013acc <tcp_kill_timewait+0x5c>)
 8013a88:	681a      	ldr	r2, [r3, #0]
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	6a1b      	ldr	r3, [r3, #32]
 8013a8e:	1ad3      	subs	r3, r2, r3
 8013a90:	687a      	ldr	r2, [r7, #4]
 8013a92:	429a      	cmp	r2, r3
 8013a94:	d807      	bhi.n	8013aa6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8013a96:	4b0d      	ldr	r3, [pc, #52]	; (8013acc <tcp_kill_timewait+0x5c>)
 8013a98:	681a      	ldr	r2, [r3, #0]
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	6a1b      	ldr	r3, [r3, #32]
 8013a9e:	1ad3      	subs	r3, r2, r3
 8013aa0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	68db      	ldr	r3, [r3, #12]
 8013aaa:	60fb      	str	r3, [r7, #12]
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d1e9      	bne.n	8013a86 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8013ab2:	68bb      	ldr	r3, [r7, #8]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d002      	beq.n	8013abe <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013ab8:	68b8      	ldr	r0, [r7, #8]
 8013aba:	f7ff f8fd 	bl	8012cb8 <tcp_abort>
  }
}
 8013abe:	bf00      	nop
 8013ac0:	3710      	adds	r7, #16
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	bd80      	pop	{r7, pc}
 8013ac6:	bf00      	nop
 8013ac8:	2001109c 	.word	0x2001109c
 8013acc:	2001108c 	.word	0x2001108c

08013ad0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b082      	sub	sp, #8
 8013ad4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8013ad6:	4b10      	ldr	r3, [pc, #64]	; (8013b18 <tcp_handle_closepend+0x48>)
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013adc:	e014      	b.n	8013b08 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	68db      	ldr	r3, [r3, #12]
 8013ae2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	8b5b      	ldrh	r3, [r3, #26]
 8013ae8:	f003 0308 	and.w	r3, r3, #8
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d009      	beq.n	8013b04 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	8b5b      	ldrh	r3, [r3, #26]
 8013af4:	f023 0308 	bic.w	r3, r3, #8
 8013af8:	b29a      	uxth	r2, r3
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8013afe:	6878      	ldr	r0, [r7, #4]
 8013b00:	f7fe ff2a 	bl	8012958 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8013b04:	683b      	ldr	r3, [r7, #0]
 8013b06:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d1e7      	bne.n	8013ade <tcp_handle_closepend+0xe>
  }
}
 8013b0e:	bf00      	nop
 8013b10:	bf00      	nop
 8013b12:	3708      	adds	r7, #8
 8013b14:	46bd      	mov	sp, r7
 8013b16:	bd80      	pop	{r7, pc}
 8013b18:	20011098 	.word	0x20011098

08013b1c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	b084      	sub	sp, #16
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	4603      	mov	r3, r0
 8013b24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013b26:	2001      	movs	r0, #1
 8013b28:	f7fd fb8a 	bl	8011240 <memp_malloc>
 8013b2c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d126      	bne.n	8013b82 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8013b34:	f7ff ffcc 	bl	8013ad0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013b38:	f7ff ff9a 	bl	8013a70 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013b3c:	2001      	movs	r0, #1
 8013b3e:	f7fd fb7f 	bl	8011240 <memp_malloc>
 8013b42:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d11b      	bne.n	8013b82 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013b4a:	2009      	movs	r0, #9
 8013b4c:	f7ff ff46 	bl	80139dc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013b50:	2001      	movs	r0, #1
 8013b52:	f7fd fb75 	bl	8011240 <memp_malloc>
 8013b56:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d111      	bne.n	8013b82 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013b5e:	2008      	movs	r0, #8
 8013b60:	f7ff ff3c 	bl	80139dc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013b64:	2001      	movs	r0, #1
 8013b66:	f7fd fb6b 	bl	8011240 <memp_malloc>
 8013b6a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d107      	bne.n	8013b82 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8013b72:	79fb      	ldrb	r3, [r7, #7]
 8013b74:	4618      	mov	r0, r3
 8013b76:	f7ff fee3 	bl	8013940 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013b7a:	2001      	movs	r0, #1
 8013b7c:	f7fd fb60 	bl	8011240 <memp_malloc>
 8013b80:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d03f      	beq.n	8013c08 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013b88:	229c      	movs	r2, #156	; 0x9c
 8013b8a:	2100      	movs	r1, #0
 8013b8c:	68f8      	ldr	r0, [r7, #12]
 8013b8e:	f007 fe31 	bl	801b7f4 <memset>
    pcb->prio = prio;
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	79fa      	ldrb	r2, [r7, #7]
 8013b96:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013b9e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8013ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	22ff      	movs	r2, #255	; 0xff
 8013bb6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013bbe:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	2206      	movs	r2, #6
 8013bc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	2206      	movs	r2, #6
 8013bcc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013bd4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	2201      	movs	r2, #1
 8013bda:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8013bde:	4b0d      	ldr	r3, [pc, #52]	; (8013c14 <tcp_alloc+0xf8>)
 8013be0:	681a      	ldr	r2, [r3, #0]
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8013be6:	4b0c      	ldr	r3, [pc, #48]	; (8013c18 <tcp_alloc+0xfc>)
 8013be8:	781a      	ldrb	r2, [r3, #0]
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013bf4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	4a08      	ldr	r2, [pc, #32]	; (8013c1c <tcp_alloc+0x100>)
 8013bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	4a07      	ldr	r2, [pc, #28]	; (8013c20 <tcp_alloc+0x104>)
 8013c04:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8013c08:	68fb      	ldr	r3, [r7, #12]
}
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	3710      	adds	r7, #16
 8013c0e:	46bd      	mov	sp, r7
 8013c10:	bd80      	pop	{r7, pc}
 8013c12:	bf00      	nop
 8013c14:	2001108c 	.word	0x2001108c
 8013c18:	200110a2 	.word	0x200110a2
 8013c1c:	080138d5 	.word	0x080138d5
 8013c20:	006ddd00 	.word	0x006ddd00

08013c24 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b084      	sub	sp, #16
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	4603      	mov	r3, r0
 8013c2c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8013c2e:	2040      	movs	r0, #64	; 0x40
 8013c30:	f7ff ff74 	bl	8013b1c <tcp_alloc>
 8013c34:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8013c36:	68fb      	ldr	r3, [r7, #12]
}
 8013c38:	4618      	mov	r0, r3
 8013c3a:	3710      	adds	r7, #16
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	bd80      	pop	{r7, pc}

08013c40 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8013c40:	b480      	push	{r7}
 8013c42:	b083      	sub	sp, #12
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	6078      	str	r0, [r7, #4]
 8013c48:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d002      	beq.n	8013c56 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	683a      	ldr	r2, [r7, #0]
 8013c54:	611a      	str	r2, [r3, #16]
  }
}
 8013c56:	bf00      	nop
 8013c58:	370c      	adds	r7, #12
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c60:	4770      	bx	lr
	...

08013c64 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b082      	sub	sp, #8
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
 8013c6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d00e      	beq.n	8013c92 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	7d1b      	ldrb	r3, [r3, #20]
 8013c78:	2b01      	cmp	r3, #1
 8013c7a:	d106      	bne.n	8013c8a <tcp_recv+0x26>
 8013c7c:	4b07      	ldr	r3, [pc, #28]	; (8013c9c <tcp_recv+0x38>)
 8013c7e:	f240 72df 	movw	r2, #2015	; 0x7df
 8013c82:	4907      	ldr	r1, [pc, #28]	; (8013ca0 <tcp_recv+0x3c>)
 8013c84:	4807      	ldr	r0, [pc, #28]	; (8013ca4 <tcp_recv+0x40>)
 8013c86:	f007 fdbd 	bl	801b804 <iprintf>
    pcb->recv = recv;
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	683a      	ldr	r2, [r7, #0]
 8013c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8013c92:	bf00      	nop
 8013c94:	3708      	adds	r7, #8
 8013c96:	46bd      	mov	sp, r7
 8013c98:	bd80      	pop	{r7, pc}
 8013c9a:	bf00      	nop
 8013c9c:	0801e508 	.word	0x0801e508
 8013ca0:	0801eaa4 	.word	0x0801eaa4
 8013ca4:	0801e54c 	.word	0x0801e54c

08013ca8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b082      	sub	sp, #8
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
 8013cb0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d00e      	beq.n	8013cd6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	7d1b      	ldrb	r3, [r3, #20]
 8013cbc:	2b01      	cmp	r3, #1
 8013cbe:	d106      	bne.n	8013cce <tcp_sent+0x26>
 8013cc0:	4b07      	ldr	r3, [pc, #28]	; (8013ce0 <tcp_sent+0x38>)
 8013cc2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8013cc6:	4907      	ldr	r1, [pc, #28]	; (8013ce4 <tcp_sent+0x3c>)
 8013cc8:	4807      	ldr	r0, [pc, #28]	; (8013ce8 <tcp_sent+0x40>)
 8013cca:	f007 fd9b 	bl	801b804 <iprintf>
    pcb->sent = sent;
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	683a      	ldr	r2, [r7, #0]
 8013cd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8013cd6:	bf00      	nop
 8013cd8:	3708      	adds	r7, #8
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	bd80      	pop	{r7, pc}
 8013cde:	bf00      	nop
 8013ce0:	0801e508 	.word	0x0801e508
 8013ce4:	0801eacc 	.word	0x0801eacc
 8013ce8:	0801e54c 	.word	0x0801e54c

08013cec <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b082      	sub	sp, #8
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
 8013cf4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d00e      	beq.n	8013d1a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	7d1b      	ldrb	r3, [r3, #20]
 8013d00:	2b01      	cmp	r3, #1
 8013d02:	d106      	bne.n	8013d12 <tcp_err+0x26>
 8013d04:	4b07      	ldr	r3, [pc, #28]	; (8013d24 <tcp_err+0x38>)
 8013d06:	f640 020d 	movw	r2, #2061	; 0x80d
 8013d0a:	4907      	ldr	r1, [pc, #28]	; (8013d28 <tcp_err+0x3c>)
 8013d0c:	4807      	ldr	r0, [pc, #28]	; (8013d2c <tcp_err+0x40>)
 8013d0e:	f007 fd79 	bl	801b804 <iprintf>
    pcb->errf = err;
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	683a      	ldr	r2, [r7, #0]
 8013d16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8013d1a:	bf00      	nop
 8013d1c:	3708      	adds	r7, #8
 8013d1e:	46bd      	mov	sp, r7
 8013d20:	bd80      	pop	{r7, pc}
 8013d22:	bf00      	nop
 8013d24:	0801e508 	.word	0x0801e508
 8013d28:	0801eaf4 	.word	0x0801eaf4
 8013d2c:	0801e54c 	.word	0x0801e54c

08013d30 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8013d30:	b480      	push	{r7}
 8013d32:	b085      	sub	sp, #20
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	6078      	str	r0, [r7, #4]
 8013d38:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d008      	beq.n	8013d52 <tcp_accept+0x22>
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	7d1b      	ldrb	r3, [r3, #20]
 8013d44:	2b01      	cmp	r3, #1
 8013d46:	d104      	bne.n	8013d52 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	683a      	ldr	r2, [r7, #0]
 8013d50:	619a      	str	r2, [r3, #24]
  }
}
 8013d52:	bf00      	nop
 8013d54:	3714      	adds	r7, #20
 8013d56:	46bd      	mov	sp, r7
 8013d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d5c:	4770      	bx	lr
	...

08013d60 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b084      	sub	sp, #16
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	60f8      	str	r0, [r7, #12]
 8013d68:	60b9      	str	r1, [r7, #8]
 8013d6a:	4613      	mov	r3, r2
 8013d6c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d107      	bne.n	8013d84 <tcp_poll+0x24>
 8013d74:	4b0e      	ldr	r3, [pc, #56]	; (8013db0 <tcp_poll+0x50>)
 8013d76:	f640 023d 	movw	r2, #2109	; 0x83d
 8013d7a:	490e      	ldr	r1, [pc, #56]	; (8013db4 <tcp_poll+0x54>)
 8013d7c:	480e      	ldr	r0, [pc, #56]	; (8013db8 <tcp_poll+0x58>)
 8013d7e:	f007 fd41 	bl	801b804 <iprintf>
 8013d82:	e011      	b.n	8013da8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	7d1b      	ldrb	r3, [r3, #20]
 8013d88:	2b01      	cmp	r3, #1
 8013d8a:	d106      	bne.n	8013d9a <tcp_poll+0x3a>
 8013d8c:	4b08      	ldr	r3, [pc, #32]	; (8013db0 <tcp_poll+0x50>)
 8013d8e:	f640 023e 	movw	r2, #2110	; 0x83e
 8013d92:	490a      	ldr	r1, [pc, #40]	; (8013dbc <tcp_poll+0x5c>)
 8013d94:	4808      	ldr	r0, [pc, #32]	; (8013db8 <tcp_poll+0x58>)
 8013d96:	f007 fd35 	bl	801b804 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	68ba      	ldr	r2, [r7, #8]
 8013d9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	79fa      	ldrb	r2, [r7, #7]
 8013da6:	775a      	strb	r2, [r3, #29]
}
 8013da8:	3710      	adds	r7, #16
 8013daa:	46bd      	mov	sp, r7
 8013dac:	bd80      	pop	{r7, pc}
 8013dae:	bf00      	nop
 8013db0:	0801e508 	.word	0x0801e508
 8013db4:	0801eb1c 	.word	0x0801eb1c
 8013db8:	0801e54c 	.word	0x0801e54c
 8013dbc:	0801eb34 	.word	0x0801eb34

08013dc0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b082      	sub	sp, #8
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d107      	bne.n	8013dde <tcp_pcb_purge+0x1e>
 8013dce:	4b21      	ldr	r3, [pc, #132]	; (8013e54 <tcp_pcb_purge+0x94>)
 8013dd0:	f640 0251 	movw	r2, #2129	; 0x851
 8013dd4:	4920      	ldr	r1, [pc, #128]	; (8013e58 <tcp_pcb_purge+0x98>)
 8013dd6:	4821      	ldr	r0, [pc, #132]	; (8013e5c <tcp_pcb_purge+0x9c>)
 8013dd8:	f007 fd14 	bl	801b804 <iprintf>
 8013ddc:	e037      	b.n	8013e4e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	7d1b      	ldrb	r3, [r3, #20]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d033      	beq.n	8013e4e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013dea:	2b0a      	cmp	r3, #10
 8013dec:	d02f      	beq.n	8013e4e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8013df2:	2b01      	cmp	r3, #1
 8013df4:	d02b      	beq.n	8013e4e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d007      	beq.n	8013e0e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013e02:	4618      	mov	r0, r3
 8013e04:	f7fe f968 	bl	80120d8 <pbuf_free>
      pcb->refused_data = NULL;
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	2200      	movs	r2, #0
 8013e0c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d002      	beq.n	8013e1c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8013e16:	6878      	ldr	r0, [r7, #4]
 8013e18:	f000 f986 	bl	8014128 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013e22:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e28:	4618      	mov	r0, r3
 8013e2a:	f7ff fcf9 	bl	8013820 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e32:	4618      	mov	r0, r3
 8013e34:	f7ff fcf4 	bl	8013820 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	2200      	movs	r2, #0
 8013e3c:	66da      	str	r2, [r3, #108]	; 0x6c
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	2200      	movs	r2, #0
 8013e4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8013e4e:	3708      	adds	r7, #8
 8013e50:	46bd      	mov	sp, r7
 8013e52:	bd80      	pop	{r7, pc}
 8013e54:	0801e508 	.word	0x0801e508
 8013e58:	0801eb54 	.word	0x0801eb54
 8013e5c:	0801e54c 	.word	0x0801e54c

08013e60 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b084      	sub	sp, #16
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
 8013e68:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8013e6a:	683b      	ldr	r3, [r7, #0]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d106      	bne.n	8013e7e <tcp_pcb_remove+0x1e>
 8013e70:	4b3e      	ldr	r3, [pc, #248]	; (8013f6c <tcp_pcb_remove+0x10c>)
 8013e72:	f640 0283 	movw	r2, #2179	; 0x883
 8013e76:	493e      	ldr	r1, [pc, #248]	; (8013f70 <tcp_pcb_remove+0x110>)
 8013e78:	483e      	ldr	r0, [pc, #248]	; (8013f74 <tcp_pcb_remove+0x114>)
 8013e7a:	f007 fcc3 	bl	801b804 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d106      	bne.n	8013e92 <tcp_pcb_remove+0x32>
 8013e84:	4b39      	ldr	r3, [pc, #228]	; (8013f6c <tcp_pcb_remove+0x10c>)
 8013e86:	f640 0284 	movw	r2, #2180	; 0x884
 8013e8a:	493b      	ldr	r1, [pc, #236]	; (8013f78 <tcp_pcb_remove+0x118>)
 8013e8c:	4839      	ldr	r0, [pc, #228]	; (8013f74 <tcp_pcb_remove+0x114>)
 8013e8e:	f007 fcb9 	bl	801b804 <iprintf>

  TCP_RMV(pcblist, pcb);
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	683a      	ldr	r2, [r7, #0]
 8013e98:	429a      	cmp	r2, r3
 8013e9a:	d105      	bne.n	8013ea8 <tcp_pcb_remove+0x48>
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	68da      	ldr	r2, [r3, #12]
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	601a      	str	r2, [r3, #0]
 8013ea6:	e013      	b.n	8013ed0 <tcp_pcb_remove+0x70>
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	60fb      	str	r3, [r7, #12]
 8013eae:	e00c      	b.n	8013eca <tcp_pcb_remove+0x6a>
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	68db      	ldr	r3, [r3, #12]
 8013eb4:	683a      	ldr	r2, [r7, #0]
 8013eb6:	429a      	cmp	r2, r3
 8013eb8:	d104      	bne.n	8013ec4 <tcp_pcb_remove+0x64>
 8013eba:	683b      	ldr	r3, [r7, #0]
 8013ebc:	68da      	ldr	r2, [r3, #12]
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	60da      	str	r2, [r3, #12]
 8013ec2:	e005      	b.n	8013ed0 <tcp_pcb_remove+0x70>
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	68db      	ldr	r3, [r3, #12]
 8013ec8:	60fb      	str	r3, [r7, #12]
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d1ef      	bne.n	8013eb0 <tcp_pcb_remove+0x50>
 8013ed0:	683b      	ldr	r3, [r7, #0]
 8013ed2:	2200      	movs	r2, #0
 8013ed4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8013ed6:	6838      	ldr	r0, [r7, #0]
 8013ed8:	f7ff ff72 	bl	8013dc0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013edc:	683b      	ldr	r3, [r7, #0]
 8013ede:	7d1b      	ldrb	r3, [r3, #20]
 8013ee0:	2b0a      	cmp	r3, #10
 8013ee2:	d013      	beq.n	8013f0c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8013ee4:	683b      	ldr	r3, [r7, #0]
 8013ee6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013ee8:	2b01      	cmp	r3, #1
 8013eea:	d00f      	beq.n	8013f0c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013eec:	683b      	ldr	r3, [r7, #0]
 8013eee:	8b5b      	ldrh	r3, [r3, #26]
 8013ef0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d009      	beq.n	8013f0c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013ef8:	683b      	ldr	r3, [r7, #0]
 8013efa:	8b5b      	ldrh	r3, [r3, #26]
 8013efc:	f043 0302 	orr.w	r3, r3, #2
 8013f00:	b29a      	uxth	r2, r3
 8013f02:	683b      	ldr	r3, [r7, #0]
 8013f04:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013f06:	6838      	ldr	r0, [r7, #0]
 8013f08:	f003 fbc6 	bl	8017698 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013f0c:	683b      	ldr	r3, [r7, #0]
 8013f0e:	7d1b      	ldrb	r3, [r3, #20]
 8013f10:	2b01      	cmp	r3, #1
 8013f12:	d020      	beq.n	8013f56 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013f14:	683b      	ldr	r3, [r7, #0]
 8013f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d006      	beq.n	8013f2a <tcp_pcb_remove+0xca>
 8013f1c:	4b13      	ldr	r3, [pc, #76]	; (8013f6c <tcp_pcb_remove+0x10c>)
 8013f1e:	f640 0293 	movw	r2, #2195	; 0x893
 8013f22:	4916      	ldr	r1, [pc, #88]	; (8013f7c <tcp_pcb_remove+0x11c>)
 8013f24:	4813      	ldr	r0, [pc, #76]	; (8013f74 <tcp_pcb_remove+0x114>)
 8013f26:	f007 fc6d 	bl	801b804 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013f2a:	683b      	ldr	r3, [r7, #0]
 8013f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d006      	beq.n	8013f40 <tcp_pcb_remove+0xe0>
 8013f32:	4b0e      	ldr	r3, [pc, #56]	; (8013f6c <tcp_pcb_remove+0x10c>)
 8013f34:	f640 0294 	movw	r2, #2196	; 0x894
 8013f38:	4911      	ldr	r1, [pc, #68]	; (8013f80 <tcp_pcb_remove+0x120>)
 8013f3a:	480e      	ldr	r0, [pc, #56]	; (8013f74 <tcp_pcb_remove+0x114>)
 8013f3c:	f007 fc62 	bl	801b804 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013f40:	683b      	ldr	r3, [r7, #0]
 8013f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d006      	beq.n	8013f56 <tcp_pcb_remove+0xf6>
 8013f48:	4b08      	ldr	r3, [pc, #32]	; (8013f6c <tcp_pcb_remove+0x10c>)
 8013f4a:	f640 0296 	movw	r2, #2198	; 0x896
 8013f4e:	490d      	ldr	r1, [pc, #52]	; (8013f84 <tcp_pcb_remove+0x124>)
 8013f50:	4808      	ldr	r0, [pc, #32]	; (8013f74 <tcp_pcb_remove+0x114>)
 8013f52:	f007 fc57 	bl	801b804 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8013f56:	683b      	ldr	r3, [r7, #0]
 8013f58:	2200      	movs	r2, #0
 8013f5a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013f5c:	683b      	ldr	r3, [r7, #0]
 8013f5e:	2200      	movs	r2, #0
 8013f60:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8013f62:	bf00      	nop
 8013f64:	3710      	adds	r7, #16
 8013f66:	46bd      	mov	sp, r7
 8013f68:	bd80      	pop	{r7, pc}
 8013f6a:	bf00      	nop
 8013f6c:	0801e508 	.word	0x0801e508
 8013f70:	0801eb70 	.word	0x0801eb70
 8013f74:	0801e54c 	.word	0x0801e54c
 8013f78:	0801eb8c 	.word	0x0801eb8c
 8013f7c:	0801ebac 	.word	0x0801ebac
 8013f80:	0801ebc4 	.word	0x0801ebc4
 8013f84:	0801ebe0 	.word	0x0801ebe0

08013f88 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b082      	sub	sp, #8
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d106      	bne.n	8013fa4 <tcp_next_iss+0x1c>
 8013f96:	4b0a      	ldr	r3, [pc, #40]	; (8013fc0 <tcp_next_iss+0x38>)
 8013f98:	f640 02af 	movw	r2, #2223	; 0x8af
 8013f9c:	4909      	ldr	r1, [pc, #36]	; (8013fc4 <tcp_next_iss+0x3c>)
 8013f9e:	480a      	ldr	r0, [pc, #40]	; (8013fc8 <tcp_next_iss+0x40>)
 8013fa0:	f007 fc30 	bl	801b804 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013fa4:	4b09      	ldr	r3, [pc, #36]	; (8013fcc <tcp_next_iss+0x44>)
 8013fa6:	681a      	ldr	r2, [r3, #0]
 8013fa8:	4b09      	ldr	r3, [pc, #36]	; (8013fd0 <tcp_next_iss+0x48>)
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	4413      	add	r3, r2
 8013fae:	4a07      	ldr	r2, [pc, #28]	; (8013fcc <tcp_next_iss+0x44>)
 8013fb0:	6013      	str	r3, [r2, #0]
  return iss;
 8013fb2:	4b06      	ldr	r3, [pc, #24]	; (8013fcc <tcp_next_iss+0x44>)
 8013fb4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	3708      	adds	r7, #8
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	bd80      	pop	{r7, pc}
 8013fbe:	bf00      	nop
 8013fc0:	0801e508 	.word	0x0801e508
 8013fc4:	0801ebf8 	.word	0x0801ebf8
 8013fc8:	0801e54c 	.word	0x0801e54c
 8013fcc:	20000028 	.word	0x20000028
 8013fd0:	2001108c 	.word	0x2001108c

08013fd4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013fd4:	b580      	push	{r7, lr}
 8013fd6:	b086      	sub	sp, #24
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	4603      	mov	r3, r0
 8013fdc:	60b9      	str	r1, [r7, #8]
 8013fde:	607a      	str	r2, [r7, #4]
 8013fe0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d106      	bne.n	8013ff6 <tcp_eff_send_mss_netif+0x22>
 8013fe8:	4b14      	ldr	r3, [pc, #80]	; (801403c <tcp_eff_send_mss_netif+0x68>)
 8013fea:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8013fee:	4914      	ldr	r1, [pc, #80]	; (8014040 <tcp_eff_send_mss_netif+0x6c>)
 8013ff0:	4814      	ldr	r0, [pc, #80]	; (8014044 <tcp_eff_send_mss_netif+0x70>)
 8013ff2:	f007 fc07 	bl	801b804 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8013ff6:	68bb      	ldr	r3, [r7, #8]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d101      	bne.n	8014000 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013ffc:	89fb      	ldrh	r3, [r7, #14]
 8013ffe:	e019      	b.n	8014034 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8014000:	68bb      	ldr	r3, [r7, #8]
 8014002:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014004:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8014006:	8afb      	ldrh	r3, [r7, #22]
 8014008:	2b00      	cmp	r3, #0
 801400a:	d012      	beq.n	8014032 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801400c:	2328      	movs	r3, #40	; 0x28
 801400e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8014010:	8afa      	ldrh	r2, [r7, #22]
 8014012:	8abb      	ldrh	r3, [r7, #20]
 8014014:	429a      	cmp	r2, r3
 8014016:	d904      	bls.n	8014022 <tcp_eff_send_mss_netif+0x4e>
 8014018:	8afa      	ldrh	r2, [r7, #22]
 801401a:	8abb      	ldrh	r3, [r7, #20]
 801401c:	1ad3      	subs	r3, r2, r3
 801401e:	b29b      	uxth	r3, r3
 8014020:	e000      	b.n	8014024 <tcp_eff_send_mss_netif+0x50>
 8014022:	2300      	movs	r3, #0
 8014024:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8014026:	8a7a      	ldrh	r2, [r7, #18]
 8014028:	89fb      	ldrh	r3, [r7, #14]
 801402a:	4293      	cmp	r3, r2
 801402c:	bf28      	it	cs
 801402e:	4613      	movcs	r3, r2
 8014030:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8014032:	89fb      	ldrh	r3, [r7, #14]
}
 8014034:	4618      	mov	r0, r3
 8014036:	3718      	adds	r7, #24
 8014038:	46bd      	mov	sp, r7
 801403a:	bd80      	pop	{r7, pc}
 801403c:	0801e508 	.word	0x0801e508
 8014040:	0801ec14 	.word	0x0801ec14
 8014044:	0801e54c 	.word	0x0801e54c

08014048 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8014048:	b580      	push	{r7, lr}
 801404a:	b084      	sub	sp, #16
 801404c:	af00      	add	r7, sp, #0
 801404e:	6078      	str	r0, [r7, #4]
 8014050:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8014052:	683b      	ldr	r3, [r7, #0]
 8014054:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d119      	bne.n	8014090 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801405c:	4b10      	ldr	r3, [pc, #64]	; (80140a0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801405e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8014062:	4910      	ldr	r1, [pc, #64]	; (80140a4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8014064:	4810      	ldr	r0, [pc, #64]	; (80140a8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8014066:	f007 fbcd 	bl	801b804 <iprintf>

  while (pcb != NULL) {
 801406a:	e011      	b.n	8014090 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	681a      	ldr	r2, [r3, #0]
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	429a      	cmp	r2, r3
 8014076:	d108      	bne.n	801408a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	68db      	ldr	r3, [r3, #12]
 801407c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801407e:	68f8      	ldr	r0, [r7, #12]
 8014080:	f7fe fe1a 	bl	8012cb8 <tcp_abort>
      pcb = next;
 8014084:	68bb      	ldr	r3, [r7, #8]
 8014086:	60fb      	str	r3, [r7, #12]
 8014088:	e002      	b.n	8014090 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	68db      	ldr	r3, [r3, #12]
 801408e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d1ea      	bne.n	801406c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8014096:	bf00      	nop
 8014098:	bf00      	nop
 801409a:	3710      	adds	r7, #16
 801409c:	46bd      	mov	sp, r7
 801409e:	bd80      	pop	{r7, pc}
 80140a0:	0801e508 	.word	0x0801e508
 80140a4:	0801ec3c 	.word	0x0801ec3c
 80140a8:	0801e54c 	.word	0x0801e54c

080140ac <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80140ac:	b580      	push	{r7, lr}
 80140ae:	b084      	sub	sp, #16
 80140b0:	af00      	add	r7, sp, #0
 80140b2:	6078      	str	r0, [r7, #4]
 80140b4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d02a      	beq.n	8014112 <tcp_netif_ip_addr_changed+0x66>
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d026      	beq.n	8014112 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80140c4:	4b15      	ldr	r3, [pc, #84]	; (801411c <tcp_netif_ip_addr_changed+0x70>)
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	4619      	mov	r1, r3
 80140ca:	6878      	ldr	r0, [r7, #4]
 80140cc:	f7ff ffbc 	bl	8014048 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80140d0:	4b13      	ldr	r3, [pc, #76]	; (8014120 <tcp_netif_ip_addr_changed+0x74>)
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	4619      	mov	r1, r3
 80140d6:	6878      	ldr	r0, [r7, #4]
 80140d8:	f7ff ffb6 	bl	8014048 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80140dc:	683b      	ldr	r3, [r7, #0]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d017      	beq.n	8014112 <tcp_netif_ip_addr_changed+0x66>
 80140e2:	683b      	ldr	r3, [r7, #0]
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d013      	beq.n	8014112 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80140ea:	4b0e      	ldr	r3, [pc, #56]	; (8014124 <tcp_netif_ip_addr_changed+0x78>)
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	60fb      	str	r3, [r7, #12]
 80140f0:	e00c      	b.n	801410c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	681a      	ldr	r2, [r3, #0]
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	429a      	cmp	r2, r3
 80140fc:	d103      	bne.n	8014106 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80140fe:	683b      	ldr	r3, [r7, #0]
 8014100:	681a      	ldr	r2, [r3, #0]
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	68db      	ldr	r3, [r3, #12]
 801410a:	60fb      	str	r3, [r7, #12]
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d1ef      	bne.n	80140f2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8014112:	bf00      	nop
 8014114:	3710      	adds	r7, #16
 8014116:	46bd      	mov	sp, r7
 8014118:	bd80      	pop	{r7, pc}
 801411a:	bf00      	nop
 801411c:	20011098 	.word	0x20011098
 8014120:	20011090 	.word	0x20011090
 8014124:	20011094 	.word	0x20011094

08014128 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b082      	sub	sp, #8
 801412c:	af00      	add	r7, sp, #0
 801412e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014134:	2b00      	cmp	r3, #0
 8014136:	d007      	beq.n	8014148 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801413c:	4618      	mov	r0, r3
 801413e:	f7ff fb6f 	bl	8013820 <tcp_segs_free>
    pcb->ooseq = NULL;
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	2200      	movs	r2, #0
 8014146:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8014148:	bf00      	nop
 801414a:	3708      	adds	r7, #8
 801414c:	46bd      	mov	sp, r7
 801414e:	bd80      	pop	{r7, pc}

08014150 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8014150:	b590      	push	{r4, r7, lr}
 8014152:	b08d      	sub	sp, #52	; 0x34
 8014154:	af04      	add	r7, sp, #16
 8014156:	6078      	str	r0, [r7, #4]
 8014158:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d105      	bne.n	801416c <tcp_input+0x1c>
 8014160:	4b9b      	ldr	r3, [pc, #620]	; (80143d0 <tcp_input+0x280>)
 8014162:	2283      	movs	r2, #131	; 0x83
 8014164:	499b      	ldr	r1, [pc, #620]	; (80143d4 <tcp_input+0x284>)
 8014166:	489c      	ldr	r0, [pc, #624]	; (80143d8 <tcp_input+0x288>)
 8014168:	f007 fb4c 	bl	801b804 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	685b      	ldr	r3, [r3, #4]
 8014170:	4a9a      	ldr	r2, [pc, #616]	; (80143dc <tcp_input+0x28c>)
 8014172:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	895b      	ldrh	r3, [r3, #10]
 8014178:	2b13      	cmp	r3, #19
 801417a:	f240 83d1 	bls.w	8014920 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801417e:	4b98      	ldr	r3, [pc, #608]	; (80143e0 <tcp_input+0x290>)
 8014180:	695b      	ldr	r3, [r3, #20]
 8014182:	4a97      	ldr	r2, [pc, #604]	; (80143e0 <tcp_input+0x290>)
 8014184:	6812      	ldr	r2, [r2, #0]
 8014186:	4611      	mov	r1, r2
 8014188:	4618      	mov	r0, r3
 801418a:	f006 f9e5 	bl	801a558 <ip4_addr_isbroadcast_u32>
 801418e:	4603      	mov	r3, r0
 8014190:	2b00      	cmp	r3, #0
 8014192:	f040 83c7 	bne.w	8014924 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8014196:	4b92      	ldr	r3, [pc, #584]	; (80143e0 <tcp_input+0x290>)
 8014198:	695b      	ldr	r3, [r3, #20]
 801419a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801419e:	2be0      	cmp	r3, #224	; 0xe0
 80141a0:	f000 83c0 	beq.w	8014924 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80141a4:	4b8d      	ldr	r3, [pc, #564]	; (80143dc <tcp_input+0x28c>)
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	899b      	ldrh	r3, [r3, #12]
 80141aa:	b29b      	uxth	r3, r3
 80141ac:	4618      	mov	r0, r3
 80141ae:	f7fc fb6f 	bl	8010890 <lwip_htons>
 80141b2:	4603      	mov	r3, r0
 80141b4:	0b1b      	lsrs	r3, r3, #12
 80141b6:	b29b      	uxth	r3, r3
 80141b8:	b2db      	uxtb	r3, r3
 80141ba:	009b      	lsls	r3, r3, #2
 80141bc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80141be:	7cbb      	ldrb	r3, [r7, #18]
 80141c0:	2b13      	cmp	r3, #19
 80141c2:	f240 83b1 	bls.w	8014928 <tcp_input+0x7d8>
 80141c6:	7cbb      	ldrb	r3, [r7, #18]
 80141c8:	b29a      	uxth	r2, r3
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	891b      	ldrh	r3, [r3, #8]
 80141ce:	429a      	cmp	r2, r3
 80141d0:	f200 83aa 	bhi.w	8014928 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80141d4:	7cbb      	ldrb	r3, [r7, #18]
 80141d6:	b29b      	uxth	r3, r3
 80141d8:	3b14      	subs	r3, #20
 80141da:	b29a      	uxth	r2, r3
 80141dc:	4b81      	ldr	r3, [pc, #516]	; (80143e4 <tcp_input+0x294>)
 80141de:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80141e0:	4b81      	ldr	r3, [pc, #516]	; (80143e8 <tcp_input+0x298>)
 80141e2:	2200      	movs	r2, #0
 80141e4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	895a      	ldrh	r2, [r3, #10]
 80141ea:	7cbb      	ldrb	r3, [r7, #18]
 80141ec:	b29b      	uxth	r3, r3
 80141ee:	429a      	cmp	r2, r3
 80141f0:	d309      	bcc.n	8014206 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80141f2:	4b7c      	ldr	r3, [pc, #496]	; (80143e4 <tcp_input+0x294>)
 80141f4:	881a      	ldrh	r2, [r3, #0]
 80141f6:	4b7d      	ldr	r3, [pc, #500]	; (80143ec <tcp_input+0x29c>)
 80141f8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80141fa:	7cbb      	ldrb	r3, [r7, #18]
 80141fc:	4619      	mov	r1, r3
 80141fe:	6878      	ldr	r0, [r7, #4]
 8014200:	f7fd feb2 	bl	8011f68 <pbuf_remove_header>
 8014204:	e04e      	b.n	80142a4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d105      	bne.n	801421a <tcp_input+0xca>
 801420e:	4b70      	ldr	r3, [pc, #448]	; (80143d0 <tcp_input+0x280>)
 8014210:	22c2      	movs	r2, #194	; 0xc2
 8014212:	4977      	ldr	r1, [pc, #476]	; (80143f0 <tcp_input+0x2a0>)
 8014214:	4870      	ldr	r0, [pc, #448]	; (80143d8 <tcp_input+0x288>)
 8014216:	f007 faf5 	bl	801b804 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801421a:	2114      	movs	r1, #20
 801421c:	6878      	ldr	r0, [r7, #4]
 801421e:	f7fd fea3 	bl	8011f68 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	895a      	ldrh	r2, [r3, #10]
 8014226:	4b71      	ldr	r3, [pc, #452]	; (80143ec <tcp_input+0x29c>)
 8014228:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801422a:	4b6e      	ldr	r3, [pc, #440]	; (80143e4 <tcp_input+0x294>)
 801422c:	881a      	ldrh	r2, [r3, #0]
 801422e:	4b6f      	ldr	r3, [pc, #444]	; (80143ec <tcp_input+0x29c>)
 8014230:	881b      	ldrh	r3, [r3, #0]
 8014232:	1ad3      	subs	r3, r2, r3
 8014234:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8014236:	4b6d      	ldr	r3, [pc, #436]	; (80143ec <tcp_input+0x29c>)
 8014238:	881b      	ldrh	r3, [r3, #0]
 801423a:	4619      	mov	r1, r3
 801423c:	6878      	ldr	r0, [r7, #4]
 801423e:	f7fd fe93 	bl	8011f68 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	895b      	ldrh	r3, [r3, #10]
 8014248:	8a3a      	ldrh	r2, [r7, #16]
 801424a:	429a      	cmp	r2, r3
 801424c:	f200 836e 	bhi.w	801492c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	685b      	ldr	r3, [r3, #4]
 8014256:	4a64      	ldr	r2, [pc, #400]	; (80143e8 <tcp_input+0x298>)
 8014258:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	8a3a      	ldrh	r2, [r7, #16]
 8014260:	4611      	mov	r1, r2
 8014262:	4618      	mov	r0, r3
 8014264:	f7fd fe80 	bl	8011f68 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	891a      	ldrh	r2, [r3, #8]
 801426c:	8a3b      	ldrh	r3, [r7, #16]
 801426e:	1ad3      	subs	r3, r2, r3
 8014270:	b29a      	uxth	r2, r3
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	895b      	ldrh	r3, [r3, #10]
 801427a:	2b00      	cmp	r3, #0
 801427c:	d005      	beq.n	801428a <tcp_input+0x13a>
 801427e:	4b54      	ldr	r3, [pc, #336]	; (80143d0 <tcp_input+0x280>)
 8014280:	22df      	movs	r2, #223	; 0xdf
 8014282:	495c      	ldr	r1, [pc, #368]	; (80143f4 <tcp_input+0x2a4>)
 8014284:	4854      	ldr	r0, [pc, #336]	; (80143d8 <tcp_input+0x288>)
 8014286:	f007 fabd 	bl	801b804 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	891a      	ldrh	r2, [r3, #8]
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	891b      	ldrh	r3, [r3, #8]
 8014294:	429a      	cmp	r2, r3
 8014296:	d005      	beq.n	80142a4 <tcp_input+0x154>
 8014298:	4b4d      	ldr	r3, [pc, #308]	; (80143d0 <tcp_input+0x280>)
 801429a:	22e0      	movs	r2, #224	; 0xe0
 801429c:	4956      	ldr	r1, [pc, #344]	; (80143f8 <tcp_input+0x2a8>)
 801429e:	484e      	ldr	r0, [pc, #312]	; (80143d8 <tcp_input+0x288>)
 80142a0:	f007 fab0 	bl	801b804 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80142a4:	4b4d      	ldr	r3, [pc, #308]	; (80143dc <tcp_input+0x28c>)
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	881b      	ldrh	r3, [r3, #0]
 80142aa:	b29b      	uxth	r3, r3
 80142ac:	4a4b      	ldr	r2, [pc, #300]	; (80143dc <tcp_input+0x28c>)
 80142ae:	6814      	ldr	r4, [r2, #0]
 80142b0:	4618      	mov	r0, r3
 80142b2:	f7fc faed 	bl	8010890 <lwip_htons>
 80142b6:	4603      	mov	r3, r0
 80142b8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80142ba:	4b48      	ldr	r3, [pc, #288]	; (80143dc <tcp_input+0x28c>)
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	885b      	ldrh	r3, [r3, #2]
 80142c0:	b29b      	uxth	r3, r3
 80142c2:	4a46      	ldr	r2, [pc, #280]	; (80143dc <tcp_input+0x28c>)
 80142c4:	6814      	ldr	r4, [r2, #0]
 80142c6:	4618      	mov	r0, r3
 80142c8:	f7fc fae2 	bl	8010890 <lwip_htons>
 80142cc:	4603      	mov	r3, r0
 80142ce:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80142d0:	4b42      	ldr	r3, [pc, #264]	; (80143dc <tcp_input+0x28c>)
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	685b      	ldr	r3, [r3, #4]
 80142d6:	4a41      	ldr	r2, [pc, #260]	; (80143dc <tcp_input+0x28c>)
 80142d8:	6814      	ldr	r4, [r2, #0]
 80142da:	4618      	mov	r0, r3
 80142dc:	f7fc faed 	bl	80108ba <lwip_htonl>
 80142e0:	4603      	mov	r3, r0
 80142e2:	6063      	str	r3, [r4, #4]
 80142e4:	6863      	ldr	r3, [r4, #4]
 80142e6:	4a45      	ldr	r2, [pc, #276]	; (80143fc <tcp_input+0x2ac>)
 80142e8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80142ea:	4b3c      	ldr	r3, [pc, #240]	; (80143dc <tcp_input+0x28c>)
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	689b      	ldr	r3, [r3, #8]
 80142f0:	4a3a      	ldr	r2, [pc, #232]	; (80143dc <tcp_input+0x28c>)
 80142f2:	6814      	ldr	r4, [r2, #0]
 80142f4:	4618      	mov	r0, r3
 80142f6:	f7fc fae0 	bl	80108ba <lwip_htonl>
 80142fa:	4603      	mov	r3, r0
 80142fc:	60a3      	str	r3, [r4, #8]
 80142fe:	68a3      	ldr	r3, [r4, #8]
 8014300:	4a3f      	ldr	r2, [pc, #252]	; (8014400 <tcp_input+0x2b0>)
 8014302:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8014304:	4b35      	ldr	r3, [pc, #212]	; (80143dc <tcp_input+0x28c>)
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	89db      	ldrh	r3, [r3, #14]
 801430a:	b29b      	uxth	r3, r3
 801430c:	4a33      	ldr	r2, [pc, #204]	; (80143dc <tcp_input+0x28c>)
 801430e:	6814      	ldr	r4, [r2, #0]
 8014310:	4618      	mov	r0, r3
 8014312:	f7fc fabd 	bl	8010890 <lwip_htons>
 8014316:	4603      	mov	r3, r0
 8014318:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801431a:	4b30      	ldr	r3, [pc, #192]	; (80143dc <tcp_input+0x28c>)
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	899b      	ldrh	r3, [r3, #12]
 8014320:	b29b      	uxth	r3, r3
 8014322:	4618      	mov	r0, r3
 8014324:	f7fc fab4 	bl	8010890 <lwip_htons>
 8014328:	4603      	mov	r3, r0
 801432a:	b2db      	uxtb	r3, r3
 801432c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014330:	b2da      	uxtb	r2, r3
 8014332:	4b34      	ldr	r3, [pc, #208]	; (8014404 <tcp_input+0x2b4>)
 8014334:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	891a      	ldrh	r2, [r3, #8]
 801433a:	4b33      	ldr	r3, [pc, #204]	; (8014408 <tcp_input+0x2b8>)
 801433c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801433e:	4b31      	ldr	r3, [pc, #196]	; (8014404 <tcp_input+0x2b4>)
 8014340:	781b      	ldrb	r3, [r3, #0]
 8014342:	f003 0303 	and.w	r3, r3, #3
 8014346:	2b00      	cmp	r3, #0
 8014348:	d00c      	beq.n	8014364 <tcp_input+0x214>
    tcplen++;
 801434a:	4b2f      	ldr	r3, [pc, #188]	; (8014408 <tcp_input+0x2b8>)
 801434c:	881b      	ldrh	r3, [r3, #0]
 801434e:	3301      	adds	r3, #1
 8014350:	b29a      	uxth	r2, r3
 8014352:	4b2d      	ldr	r3, [pc, #180]	; (8014408 <tcp_input+0x2b8>)
 8014354:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	891a      	ldrh	r2, [r3, #8]
 801435a:	4b2b      	ldr	r3, [pc, #172]	; (8014408 <tcp_input+0x2b8>)
 801435c:	881b      	ldrh	r3, [r3, #0]
 801435e:	429a      	cmp	r2, r3
 8014360:	f200 82e6 	bhi.w	8014930 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8014364:	2300      	movs	r3, #0
 8014366:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014368:	4b28      	ldr	r3, [pc, #160]	; (801440c <tcp_input+0x2bc>)
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	61fb      	str	r3, [r7, #28]
 801436e:	e09d      	b.n	80144ac <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8014370:	69fb      	ldr	r3, [r7, #28]
 8014372:	7d1b      	ldrb	r3, [r3, #20]
 8014374:	2b00      	cmp	r3, #0
 8014376:	d105      	bne.n	8014384 <tcp_input+0x234>
 8014378:	4b15      	ldr	r3, [pc, #84]	; (80143d0 <tcp_input+0x280>)
 801437a:	22fb      	movs	r2, #251	; 0xfb
 801437c:	4924      	ldr	r1, [pc, #144]	; (8014410 <tcp_input+0x2c0>)
 801437e:	4816      	ldr	r0, [pc, #88]	; (80143d8 <tcp_input+0x288>)
 8014380:	f007 fa40 	bl	801b804 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8014384:	69fb      	ldr	r3, [r7, #28]
 8014386:	7d1b      	ldrb	r3, [r3, #20]
 8014388:	2b0a      	cmp	r3, #10
 801438a:	d105      	bne.n	8014398 <tcp_input+0x248>
 801438c:	4b10      	ldr	r3, [pc, #64]	; (80143d0 <tcp_input+0x280>)
 801438e:	22fc      	movs	r2, #252	; 0xfc
 8014390:	4920      	ldr	r1, [pc, #128]	; (8014414 <tcp_input+0x2c4>)
 8014392:	4811      	ldr	r0, [pc, #68]	; (80143d8 <tcp_input+0x288>)
 8014394:	f007 fa36 	bl	801b804 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8014398:	69fb      	ldr	r3, [r7, #28]
 801439a:	7d1b      	ldrb	r3, [r3, #20]
 801439c:	2b01      	cmp	r3, #1
 801439e:	d105      	bne.n	80143ac <tcp_input+0x25c>
 80143a0:	4b0b      	ldr	r3, [pc, #44]	; (80143d0 <tcp_input+0x280>)
 80143a2:	22fd      	movs	r2, #253	; 0xfd
 80143a4:	491c      	ldr	r1, [pc, #112]	; (8014418 <tcp_input+0x2c8>)
 80143a6:	480c      	ldr	r0, [pc, #48]	; (80143d8 <tcp_input+0x288>)
 80143a8:	f007 fa2c 	bl	801b804 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80143ac:	69fb      	ldr	r3, [r7, #28]
 80143ae:	7a1b      	ldrb	r3, [r3, #8]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d033      	beq.n	801441c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80143b4:	69fb      	ldr	r3, [r7, #28]
 80143b6:	7a1a      	ldrb	r2, [r3, #8]
 80143b8:	4b09      	ldr	r3, [pc, #36]	; (80143e0 <tcp_input+0x290>)
 80143ba:	685b      	ldr	r3, [r3, #4]
 80143bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80143c0:	3301      	adds	r3, #1
 80143c2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80143c4:	429a      	cmp	r2, r3
 80143c6:	d029      	beq.n	801441c <tcp_input+0x2cc>
      prev = pcb;
 80143c8:	69fb      	ldr	r3, [r7, #28]
 80143ca:	61bb      	str	r3, [r7, #24]
      continue;
 80143cc:	e06b      	b.n	80144a6 <tcp_input+0x356>
 80143ce:	bf00      	nop
 80143d0:	0801ec70 	.word	0x0801ec70
 80143d4:	0801eca4 	.word	0x0801eca4
 80143d8:	0801ecbc 	.word	0x0801ecbc
 80143dc:	200110b4 	.word	0x200110b4
 80143e0:	2000d938 	.word	0x2000d938
 80143e4:	200110b8 	.word	0x200110b8
 80143e8:	200110bc 	.word	0x200110bc
 80143ec:	200110ba 	.word	0x200110ba
 80143f0:	0801ece4 	.word	0x0801ece4
 80143f4:	0801ecf4 	.word	0x0801ecf4
 80143f8:	0801ed00 	.word	0x0801ed00
 80143fc:	200110c4 	.word	0x200110c4
 8014400:	200110c8 	.word	0x200110c8
 8014404:	200110d0 	.word	0x200110d0
 8014408:	200110ce 	.word	0x200110ce
 801440c:	20011098 	.word	0x20011098
 8014410:	0801ed20 	.word	0x0801ed20
 8014414:	0801ed48 	.word	0x0801ed48
 8014418:	0801ed74 	.word	0x0801ed74
    }

    if (pcb->remote_port == tcphdr->src &&
 801441c:	69fb      	ldr	r3, [r7, #28]
 801441e:	8b1a      	ldrh	r2, [r3, #24]
 8014420:	4b72      	ldr	r3, [pc, #456]	; (80145ec <tcp_input+0x49c>)
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	881b      	ldrh	r3, [r3, #0]
 8014426:	b29b      	uxth	r3, r3
 8014428:	429a      	cmp	r2, r3
 801442a:	d13a      	bne.n	80144a2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801442c:	69fb      	ldr	r3, [r7, #28]
 801442e:	8ada      	ldrh	r2, [r3, #22]
 8014430:	4b6e      	ldr	r3, [pc, #440]	; (80145ec <tcp_input+0x49c>)
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	885b      	ldrh	r3, [r3, #2]
 8014436:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8014438:	429a      	cmp	r2, r3
 801443a:	d132      	bne.n	80144a2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801443c:	69fb      	ldr	r3, [r7, #28]
 801443e:	685a      	ldr	r2, [r3, #4]
 8014440:	4b6b      	ldr	r3, [pc, #428]	; (80145f0 <tcp_input+0x4a0>)
 8014442:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8014444:	429a      	cmp	r2, r3
 8014446:	d12c      	bne.n	80144a2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014448:	69fb      	ldr	r3, [r7, #28]
 801444a:	681a      	ldr	r2, [r3, #0]
 801444c:	4b68      	ldr	r3, [pc, #416]	; (80145f0 <tcp_input+0x4a0>)
 801444e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014450:	429a      	cmp	r2, r3
 8014452:	d126      	bne.n	80144a2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8014454:	69fb      	ldr	r3, [r7, #28]
 8014456:	68db      	ldr	r3, [r3, #12]
 8014458:	69fa      	ldr	r2, [r7, #28]
 801445a:	429a      	cmp	r2, r3
 801445c:	d106      	bne.n	801446c <tcp_input+0x31c>
 801445e:	4b65      	ldr	r3, [pc, #404]	; (80145f4 <tcp_input+0x4a4>)
 8014460:	f240 120d 	movw	r2, #269	; 0x10d
 8014464:	4964      	ldr	r1, [pc, #400]	; (80145f8 <tcp_input+0x4a8>)
 8014466:	4865      	ldr	r0, [pc, #404]	; (80145fc <tcp_input+0x4ac>)
 8014468:	f007 f9cc 	bl	801b804 <iprintf>
      if (prev != NULL) {
 801446c:	69bb      	ldr	r3, [r7, #24]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d00a      	beq.n	8014488 <tcp_input+0x338>
        prev->next = pcb->next;
 8014472:	69fb      	ldr	r3, [r7, #28]
 8014474:	68da      	ldr	r2, [r3, #12]
 8014476:	69bb      	ldr	r3, [r7, #24]
 8014478:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801447a:	4b61      	ldr	r3, [pc, #388]	; (8014600 <tcp_input+0x4b0>)
 801447c:	681a      	ldr	r2, [r3, #0]
 801447e:	69fb      	ldr	r3, [r7, #28]
 8014480:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8014482:	4a5f      	ldr	r2, [pc, #380]	; (8014600 <tcp_input+0x4b0>)
 8014484:	69fb      	ldr	r3, [r7, #28]
 8014486:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8014488:	69fb      	ldr	r3, [r7, #28]
 801448a:	68db      	ldr	r3, [r3, #12]
 801448c:	69fa      	ldr	r2, [r7, #28]
 801448e:	429a      	cmp	r2, r3
 8014490:	d111      	bne.n	80144b6 <tcp_input+0x366>
 8014492:	4b58      	ldr	r3, [pc, #352]	; (80145f4 <tcp_input+0x4a4>)
 8014494:	f240 1215 	movw	r2, #277	; 0x115
 8014498:	495a      	ldr	r1, [pc, #360]	; (8014604 <tcp_input+0x4b4>)
 801449a:	4858      	ldr	r0, [pc, #352]	; (80145fc <tcp_input+0x4ac>)
 801449c:	f007 f9b2 	bl	801b804 <iprintf>
      break;
 80144a0:	e009      	b.n	80144b6 <tcp_input+0x366>
    }
    prev = pcb;
 80144a2:	69fb      	ldr	r3, [r7, #28]
 80144a4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80144a6:	69fb      	ldr	r3, [r7, #28]
 80144a8:	68db      	ldr	r3, [r3, #12]
 80144aa:	61fb      	str	r3, [r7, #28]
 80144ac:	69fb      	ldr	r3, [r7, #28]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	f47f af5e 	bne.w	8014370 <tcp_input+0x220>
 80144b4:	e000      	b.n	80144b8 <tcp_input+0x368>
      break;
 80144b6:	bf00      	nop
  }

  if (pcb == NULL) {
 80144b8:	69fb      	ldr	r3, [r7, #28]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	f040 80aa 	bne.w	8014614 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80144c0:	4b51      	ldr	r3, [pc, #324]	; (8014608 <tcp_input+0x4b8>)
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	61fb      	str	r3, [r7, #28]
 80144c6:	e03f      	b.n	8014548 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80144c8:	69fb      	ldr	r3, [r7, #28]
 80144ca:	7d1b      	ldrb	r3, [r3, #20]
 80144cc:	2b0a      	cmp	r3, #10
 80144ce:	d006      	beq.n	80144de <tcp_input+0x38e>
 80144d0:	4b48      	ldr	r3, [pc, #288]	; (80145f4 <tcp_input+0x4a4>)
 80144d2:	f240 121f 	movw	r2, #287	; 0x11f
 80144d6:	494d      	ldr	r1, [pc, #308]	; (801460c <tcp_input+0x4bc>)
 80144d8:	4848      	ldr	r0, [pc, #288]	; (80145fc <tcp_input+0x4ac>)
 80144da:	f007 f993 	bl	801b804 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80144de:	69fb      	ldr	r3, [r7, #28]
 80144e0:	7a1b      	ldrb	r3, [r3, #8]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d009      	beq.n	80144fa <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80144e6:	69fb      	ldr	r3, [r7, #28]
 80144e8:	7a1a      	ldrb	r2, [r3, #8]
 80144ea:	4b41      	ldr	r3, [pc, #260]	; (80145f0 <tcp_input+0x4a0>)
 80144ec:	685b      	ldr	r3, [r3, #4]
 80144ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80144f2:	3301      	adds	r3, #1
 80144f4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80144f6:	429a      	cmp	r2, r3
 80144f8:	d122      	bne.n	8014540 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80144fa:	69fb      	ldr	r3, [r7, #28]
 80144fc:	8b1a      	ldrh	r2, [r3, #24]
 80144fe:	4b3b      	ldr	r3, [pc, #236]	; (80145ec <tcp_input+0x49c>)
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	881b      	ldrh	r3, [r3, #0]
 8014504:	b29b      	uxth	r3, r3
 8014506:	429a      	cmp	r2, r3
 8014508:	d11b      	bne.n	8014542 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801450a:	69fb      	ldr	r3, [r7, #28]
 801450c:	8ada      	ldrh	r2, [r3, #22]
 801450e:	4b37      	ldr	r3, [pc, #220]	; (80145ec <tcp_input+0x49c>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	885b      	ldrh	r3, [r3, #2]
 8014514:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8014516:	429a      	cmp	r2, r3
 8014518:	d113      	bne.n	8014542 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801451a:	69fb      	ldr	r3, [r7, #28]
 801451c:	685a      	ldr	r2, [r3, #4]
 801451e:	4b34      	ldr	r3, [pc, #208]	; (80145f0 <tcp_input+0x4a0>)
 8014520:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8014522:	429a      	cmp	r2, r3
 8014524:	d10d      	bne.n	8014542 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014526:	69fb      	ldr	r3, [r7, #28]
 8014528:	681a      	ldr	r2, [r3, #0]
 801452a:	4b31      	ldr	r3, [pc, #196]	; (80145f0 <tcp_input+0x4a0>)
 801452c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801452e:	429a      	cmp	r2, r3
 8014530:	d107      	bne.n	8014542 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8014532:	69f8      	ldr	r0, [r7, #28]
 8014534:	f000 fb56 	bl	8014be4 <tcp_timewait_input>
        }
        pbuf_free(p);
 8014538:	6878      	ldr	r0, [r7, #4]
 801453a:	f7fd fdcd 	bl	80120d8 <pbuf_free>
        return;
 801453e:	e1fd      	b.n	801493c <tcp_input+0x7ec>
        continue;
 8014540:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014542:	69fb      	ldr	r3, [r7, #28]
 8014544:	68db      	ldr	r3, [r3, #12]
 8014546:	61fb      	str	r3, [r7, #28]
 8014548:	69fb      	ldr	r3, [r7, #28]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d1bc      	bne.n	80144c8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801454e:	2300      	movs	r3, #0
 8014550:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014552:	4b2f      	ldr	r3, [pc, #188]	; (8014610 <tcp_input+0x4c0>)
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	617b      	str	r3, [r7, #20]
 8014558:	e02a      	b.n	80145b0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801455a:	697b      	ldr	r3, [r7, #20]
 801455c:	7a1b      	ldrb	r3, [r3, #8]
 801455e:	2b00      	cmp	r3, #0
 8014560:	d00c      	beq.n	801457c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014562:	697b      	ldr	r3, [r7, #20]
 8014564:	7a1a      	ldrb	r2, [r3, #8]
 8014566:	4b22      	ldr	r3, [pc, #136]	; (80145f0 <tcp_input+0x4a0>)
 8014568:	685b      	ldr	r3, [r3, #4]
 801456a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801456e:	3301      	adds	r3, #1
 8014570:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8014572:	429a      	cmp	r2, r3
 8014574:	d002      	beq.n	801457c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8014576:	697b      	ldr	r3, [r7, #20]
 8014578:	61bb      	str	r3, [r7, #24]
        continue;
 801457a:	e016      	b.n	80145aa <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801457c:	697b      	ldr	r3, [r7, #20]
 801457e:	8ada      	ldrh	r2, [r3, #22]
 8014580:	4b1a      	ldr	r3, [pc, #104]	; (80145ec <tcp_input+0x49c>)
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	885b      	ldrh	r3, [r3, #2]
 8014586:	b29b      	uxth	r3, r3
 8014588:	429a      	cmp	r2, r3
 801458a:	d10c      	bne.n	80145a6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801458c:	697b      	ldr	r3, [r7, #20]
 801458e:	681a      	ldr	r2, [r3, #0]
 8014590:	4b17      	ldr	r3, [pc, #92]	; (80145f0 <tcp_input+0x4a0>)
 8014592:	695b      	ldr	r3, [r3, #20]
 8014594:	429a      	cmp	r2, r3
 8014596:	d00f      	beq.n	80145b8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8014598:	697b      	ldr	r3, [r7, #20]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d00d      	beq.n	80145ba <tcp_input+0x46a>
 801459e:	697b      	ldr	r3, [r7, #20]
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d009      	beq.n	80145ba <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80145a6:	697b      	ldr	r3, [r7, #20]
 80145a8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80145aa:	697b      	ldr	r3, [r7, #20]
 80145ac:	68db      	ldr	r3, [r3, #12]
 80145ae:	617b      	str	r3, [r7, #20]
 80145b0:	697b      	ldr	r3, [r7, #20]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d1d1      	bne.n	801455a <tcp_input+0x40a>
 80145b6:	e000      	b.n	80145ba <tcp_input+0x46a>
            break;
 80145b8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80145ba:	697b      	ldr	r3, [r7, #20]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d029      	beq.n	8014614 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80145c0:	69bb      	ldr	r3, [r7, #24]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d00a      	beq.n	80145dc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80145c6:	697b      	ldr	r3, [r7, #20]
 80145c8:	68da      	ldr	r2, [r3, #12]
 80145ca:	69bb      	ldr	r3, [r7, #24]
 80145cc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80145ce:	4b10      	ldr	r3, [pc, #64]	; (8014610 <tcp_input+0x4c0>)
 80145d0:	681a      	ldr	r2, [r3, #0]
 80145d2:	697b      	ldr	r3, [r7, #20]
 80145d4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80145d6:	4a0e      	ldr	r2, [pc, #56]	; (8014610 <tcp_input+0x4c0>)
 80145d8:	697b      	ldr	r3, [r7, #20]
 80145da:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80145dc:	6978      	ldr	r0, [r7, #20]
 80145de:	f000 fa03 	bl	80149e8 <tcp_listen_input>
      }
      pbuf_free(p);
 80145e2:	6878      	ldr	r0, [r7, #4]
 80145e4:	f7fd fd78 	bl	80120d8 <pbuf_free>
      return;
 80145e8:	e1a8      	b.n	801493c <tcp_input+0x7ec>
 80145ea:	bf00      	nop
 80145ec:	200110b4 	.word	0x200110b4
 80145f0:	2000d938 	.word	0x2000d938
 80145f4:	0801ec70 	.word	0x0801ec70
 80145f8:	0801ed9c 	.word	0x0801ed9c
 80145fc:	0801ecbc 	.word	0x0801ecbc
 8014600:	20011098 	.word	0x20011098
 8014604:	0801edc8 	.word	0x0801edc8
 8014608:	2001109c 	.word	0x2001109c
 801460c:	0801edf4 	.word	0x0801edf4
 8014610:	20011094 	.word	0x20011094
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8014614:	69fb      	ldr	r3, [r7, #28]
 8014616:	2b00      	cmp	r3, #0
 8014618:	f000 8158 	beq.w	80148cc <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801461c:	4b95      	ldr	r3, [pc, #596]	; (8014874 <tcp_input+0x724>)
 801461e:	2200      	movs	r2, #0
 8014620:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	891a      	ldrh	r2, [r3, #8]
 8014626:	4b93      	ldr	r3, [pc, #588]	; (8014874 <tcp_input+0x724>)
 8014628:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801462a:	4a92      	ldr	r2, [pc, #584]	; (8014874 <tcp_input+0x724>)
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8014630:	4b91      	ldr	r3, [pc, #580]	; (8014878 <tcp_input+0x728>)
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	4a8f      	ldr	r2, [pc, #572]	; (8014874 <tcp_input+0x724>)
 8014636:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8014638:	4b90      	ldr	r3, [pc, #576]	; (801487c <tcp_input+0x72c>)
 801463a:	2200      	movs	r2, #0
 801463c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801463e:	4b90      	ldr	r3, [pc, #576]	; (8014880 <tcp_input+0x730>)
 8014640:	2200      	movs	r2, #0
 8014642:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8014644:	4b8f      	ldr	r3, [pc, #572]	; (8014884 <tcp_input+0x734>)
 8014646:	2200      	movs	r2, #0
 8014648:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801464a:	4b8f      	ldr	r3, [pc, #572]	; (8014888 <tcp_input+0x738>)
 801464c:	781b      	ldrb	r3, [r3, #0]
 801464e:	f003 0308 	and.w	r3, r3, #8
 8014652:	2b00      	cmp	r3, #0
 8014654:	d006      	beq.n	8014664 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	7b5b      	ldrb	r3, [r3, #13]
 801465a:	f043 0301 	orr.w	r3, r3, #1
 801465e:	b2da      	uxtb	r2, r3
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8014664:	69fb      	ldr	r3, [r7, #28]
 8014666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014668:	2b00      	cmp	r3, #0
 801466a:	d017      	beq.n	801469c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801466c:	69f8      	ldr	r0, [r7, #28]
 801466e:	f7ff f85b 	bl	8013728 <tcp_process_refused_data>
 8014672:	4603      	mov	r3, r0
 8014674:	f113 0f0d 	cmn.w	r3, #13
 8014678:	d007      	beq.n	801468a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801467a:	69fb      	ldr	r3, [r7, #28]
 801467c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801467e:	2b00      	cmp	r3, #0
 8014680:	d00c      	beq.n	801469c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014682:	4b82      	ldr	r3, [pc, #520]	; (801488c <tcp_input+0x73c>)
 8014684:	881b      	ldrh	r3, [r3, #0]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d008      	beq.n	801469c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801468a:	69fb      	ldr	r3, [r7, #28]
 801468c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801468e:	2b00      	cmp	r3, #0
 8014690:	f040 80e3 	bne.w	801485a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8014694:	69f8      	ldr	r0, [r7, #28]
 8014696:	f003 fe05 	bl	80182a4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801469a:	e0de      	b.n	801485a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 801469c:	4a7c      	ldr	r2, [pc, #496]	; (8014890 <tcp_input+0x740>)
 801469e:	69fb      	ldr	r3, [r7, #28]
 80146a0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80146a2:	69f8      	ldr	r0, [r7, #28]
 80146a4:	f000 fb18 	bl	8014cd8 <tcp_process>
 80146a8:	4603      	mov	r3, r0
 80146aa:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80146ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80146b0:	f113 0f0d 	cmn.w	r3, #13
 80146b4:	f000 80d3 	beq.w	801485e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80146b8:	4b71      	ldr	r3, [pc, #452]	; (8014880 <tcp_input+0x730>)
 80146ba:	781b      	ldrb	r3, [r3, #0]
 80146bc:	f003 0308 	and.w	r3, r3, #8
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d015      	beq.n	80146f0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80146c4:	69fb      	ldr	r3, [r7, #28]
 80146c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d008      	beq.n	80146e0 <tcp_input+0x590>
 80146ce:	69fb      	ldr	r3, [r7, #28]
 80146d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80146d4:	69fa      	ldr	r2, [r7, #28]
 80146d6:	6912      	ldr	r2, [r2, #16]
 80146d8:	f06f 010d 	mvn.w	r1, #13
 80146dc:	4610      	mov	r0, r2
 80146de:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80146e0:	69f9      	ldr	r1, [r7, #28]
 80146e2:	486c      	ldr	r0, [pc, #432]	; (8014894 <tcp_input+0x744>)
 80146e4:	f7ff fbbc 	bl	8013e60 <tcp_pcb_remove>
        tcp_free(pcb);
 80146e8:	69f8      	ldr	r0, [r7, #28]
 80146ea:	f7fd ffa1 	bl	8012630 <tcp_free>
 80146ee:	e0da      	b.n	80148a6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80146f0:	2300      	movs	r3, #0
 80146f2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80146f4:	4b63      	ldr	r3, [pc, #396]	; (8014884 <tcp_input+0x734>)
 80146f6:	881b      	ldrh	r3, [r3, #0]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d01d      	beq.n	8014738 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80146fc:	4b61      	ldr	r3, [pc, #388]	; (8014884 <tcp_input+0x734>)
 80146fe:	881b      	ldrh	r3, [r3, #0]
 8014700:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8014702:	69fb      	ldr	r3, [r7, #28]
 8014704:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014708:	2b00      	cmp	r3, #0
 801470a:	d00a      	beq.n	8014722 <tcp_input+0x5d2>
 801470c:	69fb      	ldr	r3, [r7, #28]
 801470e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014712:	69fa      	ldr	r2, [r7, #28]
 8014714:	6910      	ldr	r0, [r2, #16]
 8014716:	89fa      	ldrh	r2, [r7, #14]
 8014718:	69f9      	ldr	r1, [r7, #28]
 801471a:	4798      	blx	r3
 801471c:	4603      	mov	r3, r0
 801471e:	74fb      	strb	r3, [r7, #19]
 8014720:	e001      	b.n	8014726 <tcp_input+0x5d6>
 8014722:	2300      	movs	r3, #0
 8014724:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8014726:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801472a:	f113 0f0d 	cmn.w	r3, #13
 801472e:	f000 8098 	beq.w	8014862 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8014732:	4b54      	ldr	r3, [pc, #336]	; (8014884 <tcp_input+0x734>)
 8014734:	2200      	movs	r2, #0
 8014736:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8014738:	69f8      	ldr	r0, [r7, #28]
 801473a:	f000 f915 	bl	8014968 <tcp_input_delayed_close>
 801473e:	4603      	mov	r3, r0
 8014740:	2b00      	cmp	r3, #0
 8014742:	f040 8090 	bne.w	8014866 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8014746:	4b4d      	ldr	r3, [pc, #308]	; (801487c <tcp_input+0x72c>)
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d041      	beq.n	80147d2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801474e:	69fb      	ldr	r3, [r7, #28]
 8014750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014752:	2b00      	cmp	r3, #0
 8014754:	d006      	beq.n	8014764 <tcp_input+0x614>
 8014756:	4b50      	ldr	r3, [pc, #320]	; (8014898 <tcp_input+0x748>)
 8014758:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801475c:	494f      	ldr	r1, [pc, #316]	; (801489c <tcp_input+0x74c>)
 801475e:	4850      	ldr	r0, [pc, #320]	; (80148a0 <tcp_input+0x750>)
 8014760:	f007 f850 	bl	801b804 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8014764:	69fb      	ldr	r3, [r7, #28]
 8014766:	8b5b      	ldrh	r3, [r3, #26]
 8014768:	f003 0310 	and.w	r3, r3, #16
 801476c:	2b00      	cmp	r3, #0
 801476e:	d008      	beq.n	8014782 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8014770:	4b42      	ldr	r3, [pc, #264]	; (801487c <tcp_input+0x72c>)
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	4618      	mov	r0, r3
 8014776:	f7fd fcaf 	bl	80120d8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801477a:	69f8      	ldr	r0, [r7, #28]
 801477c:	f7fe fa9c 	bl	8012cb8 <tcp_abort>
            goto aborted;
 8014780:	e091      	b.n	80148a6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8014782:	69fb      	ldr	r3, [r7, #28]
 8014784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014788:	2b00      	cmp	r3, #0
 801478a:	d00c      	beq.n	80147a6 <tcp_input+0x656>
 801478c:	69fb      	ldr	r3, [r7, #28]
 801478e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014792:	69fb      	ldr	r3, [r7, #28]
 8014794:	6918      	ldr	r0, [r3, #16]
 8014796:	4b39      	ldr	r3, [pc, #228]	; (801487c <tcp_input+0x72c>)
 8014798:	681a      	ldr	r2, [r3, #0]
 801479a:	2300      	movs	r3, #0
 801479c:	69f9      	ldr	r1, [r7, #28]
 801479e:	47a0      	blx	r4
 80147a0:	4603      	mov	r3, r0
 80147a2:	74fb      	strb	r3, [r7, #19]
 80147a4:	e008      	b.n	80147b8 <tcp_input+0x668>
 80147a6:	4b35      	ldr	r3, [pc, #212]	; (801487c <tcp_input+0x72c>)
 80147a8:	681a      	ldr	r2, [r3, #0]
 80147aa:	2300      	movs	r3, #0
 80147ac:	69f9      	ldr	r1, [r7, #28]
 80147ae:	2000      	movs	r0, #0
 80147b0:	f7ff f890 	bl	80138d4 <tcp_recv_null>
 80147b4:	4603      	mov	r3, r0
 80147b6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80147b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80147bc:	f113 0f0d 	cmn.w	r3, #13
 80147c0:	d053      	beq.n	801486a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80147c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d003      	beq.n	80147d2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80147ca:	4b2c      	ldr	r3, [pc, #176]	; (801487c <tcp_input+0x72c>)
 80147cc:	681a      	ldr	r2, [r3, #0]
 80147ce:	69fb      	ldr	r3, [r7, #28]
 80147d0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80147d2:	4b2b      	ldr	r3, [pc, #172]	; (8014880 <tcp_input+0x730>)
 80147d4:	781b      	ldrb	r3, [r3, #0]
 80147d6:	f003 0320 	and.w	r3, r3, #32
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d030      	beq.n	8014840 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80147de:	69fb      	ldr	r3, [r7, #28]
 80147e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d009      	beq.n	80147fa <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80147e6:	69fb      	ldr	r3, [r7, #28]
 80147e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80147ea:	7b5a      	ldrb	r2, [r3, #13]
 80147ec:	69fb      	ldr	r3, [r7, #28]
 80147ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80147f0:	f042 0220 	orr.w	r2, r2, #32
 80147f4:	b2d2      	uxtb	r2, r2
 80147f6:	735a      	strb	r2, [r3, #13]
 80147f8:	e022      	b.n	8014840 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80147fa:	69fb      	ldr	r3, [r7, #28]
 80147fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80147fe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8014802:	d005      	beq.n	8014810 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8014804:	69fb      	ldr	r3, [r7, #28]
 8014806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014808:	3301      	adds	r3, #1
 801480a:	b29a      	uxth	r2, r3
 801480c:	69fb      	ldr	r3, [r7, #28]
 801480e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8014810:	69fb      	ldr	r3, [r7, #28]
 8014812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014816:	2b00      	cmp	r3, #0
 8014818:	d00b      	beq.n	8014832 <tcp_input+0x6e2>
 801481a:	69fb      	ldr	r3, [r7, #28]
 801481c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014820:	69fb      	ldr	r3, [r7, #28]
 8014822:	6918      	ldr	r0, [r3, #16]
 8014824:	2300      	movs	r3, #0
 8014826:	2200      	movs	r2, #0
 8014828:	69f9      	ldr	r1, [r7, #28]
 801482a:	47a0      	blx	r4
 801482c:	4603      	mov	r3, r0
 801482e:	74fb      	strb	r3, [r7, #19]
 8014830:	e001      	b.n	8014836 <tcp_input+0x6e6>
 8014832:	2300      	movs	r3, #0
 8014834:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8014836:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801483a:	f113 0f0d 	cmn.w	r3, #13
 801483e:	d016      	beq.n	801486e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8014840:	4b13      	ldr	r3, [pc, #76]	; (8014890 <tcp_input+0x740>)
 8014842:	2200      	movs	r2, #0
 8014844:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8014846:	69f8      	ldr	r0, [r7, #28]
 8014848:	f000 f88e 	bl	8014968 <tcp_input_delayed_close>
 801484c:	4603      	mov	r3, r0
 801484e:	2b00      	cmp	r3, #0
 8014850:	d128      	bne.n	80148a4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8014852:	69f8      	ldr	r0, [r7, #28]
 8014854:	f002 ff20 	bl	8017698 <tcp_output>
 8014858:	e025      	b.n	80148a6 <tcp_input+0x756>
        goto aborted;
 801485a:	bf00      	nop
 801485c:	e023      	b.n	80148a6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801485e:	bf00      	nop
 8014860:	e021      	b.n	80148a6 <tcp_input+0x756>
              goto aborted;
 8014862:	bf00      	nop
 8014864:	e01f      	b.n	80148a6 <tcp_input+0x756>
          goto aborted;
 8014866:	bf00      	nop
 8014868:	e01d      	b.n	80148a6 <tcp_input+0x756>
            goto aborted;
 801486a:	bf00      	nop
 801486c:	e01b      	b.n	80148a6 <tcp_input+0x756>
              goto aborted;
 801486e:	bf00      	nop
 8014870:	e019      	b.n	80148a6 <tcp_input+0x756>
 8014872:	bf00      	nop
 8014874:	200110a4 	.word	0x200110a4
 8014878:	200110b4 	.word	0x200110b4
 801487c:	200110d4 	.word	0x200110d4
 8014880:	200110d1 	.word	0x200110d1
 8014884:	200110cc 	.word	0x200110cc
 8014888:	200110d0 	.word	0x200110d0
 801488c:	200110ce 	.word	0x200110ce
 8014890:	200110d8 	.word	0x200110d8
 8014894:	20011098 	.word	0x20011098
 8014898:	0801ec70 	.word	0x0801ec70
 801489c:	0801ee24 	.word	0x0801ee24
 80148a0:	0801ecbc 	.word	0x0801ecbc
          goto aborted;
 80148a4:	bf00      	nop
    tcp_input_pcb = NULL;
 80148a6:	4b27      	ldr	r3, [pc, #156]	; (8014944 <tcp_input+0x7f4>)
 80148a8:	2200      	movs	r2, #0
 80148aa:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80148ac:	4b26      	ldr	r3, [pc, #152]	; (8014948 <tcp_input+0x7f8>)
 80148ae:	2200      	movs	r2, #0
 80148b0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80148b2:	4b26      	ldr	r3, [pc, #152]	; (801494c <tcp_input+0x7fc>)
 80148b4:	685b      	ldr	r3, [r3, #4]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d03f      	beq.n	801493a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80148ba:	4b24      	ldr	r3, [pc, #144]	; (801494c <tcp_input+0x7fc>)
 80148bc:	685b      	ldr	r3, [r3, #4]
 80148be:	4618      	mov	r0, r3
 80148c0:	f7fd fc0a 	bl	80120d8 <pbuf_free>
      inseg.p = NULL;
 80148c4:	4b21      	ldr	r3, [pc, #132]	; (801494c <tcp_input+0x7fc>)
 80148c6:	2200      	movs	r2, #0
 80148c8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80148ca:	e036      	b.n	801493a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80148cc:	4b20      	ldr	r3, [pc, #128]	; (8014950 <tcp_input+0x800>)
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	899b      	ldrh	r3, [r3, #12]
 80148d2:	b29b      	uxth	r3, r3
 80148d4:	4618      	mov	r0, r3
 80148d6:	f7fb ffdb 	bl	8010890 <lwip_htons>
 80148da:	4603      	mov	r3, r0
 80148dc:	b2db      	uxtb	r3, r3
 80148de:	f003 0304 	and.w	r3, r3, #4
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d118      	bne.n	8014918 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80148e6:	4b1b      	ldr	r3, [pc, #108]	; (8014954 <tcp_input+0x804>)
 80148e8:	6819      	ldr	r1, [r3, #0]
 80148ea:	4b1b      	ldr	r3, [pc, #108]	; (8014958 <tcp_input+0x808>)
 80148ec:	881b      	ldrh	r3, [r3, #0]
 80148ee:	461a      	mov	r2, r3
 80148f0:	4b1a      	ldr	r3, [pc, #104]	; (801495c <tcp_input+0x80c>)
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80148f6:	4b16      	ldr	r3, [pc, #88]	; (8014950 <tcp_input+0x800>)
 80148f8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80148fa:	885b      	ldrh	r3, [r3, #2]
 80148fc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80148fe:	4a14      	ldr	r2, [pc, #80]	; (8014950 <tcp_input+0x800>)
 8014900:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014902:	8812      	ldrh	r2, [r2, #0]
 8014904:	b292      	uxth	r2, r2
 8014906:	9202      	str	r2, [sp, #8]
 8014908:	9301      	str	r3, [sp, #4]
 801490a:	4b15      	ldr	r3, [pc, #84]	; (8014960 <tcp_input+0x810>)
 801490c:	9300      	str	r3, [sp, #0]
 801490e:	4b15      	ldr	r3, [pc, #84]	; (8014964 <tcp_input+0x814>)
 8014910:	4602      	mov	r2, r0
 8014912:	2000      	movs	r0, #0
 8014914:	f003 fc74 	bl	8018200 <tcp_rst>
    pbuf_free(p);
 8014918:	6878      	ldr	r0, [r7, #4]
 801491a:	f7fd fbdd 	bl	80120d8 <pbuf_free>
  return;
 801491e:	e00c      	b.n	801493a <tcp_input+0x7ea>
    goto dropped;
 8014920:	bf00      	nop
 8014922:	e006      	b.n	8014932 <tcp_input+0x7e2>
    goto dropped;
 8014924:	bf00      	nop
 8014926:	e004      	b.n	8014932 <tcp_input+0x7e2>
    goto dropped;
 8014928:	bf00      	nop
 801492a:	e002      	b.n	8014932 <tcp_input+0x7e2>
      goto dropped;
 801492c:	bf00      	nop
 801492e:	e000      	b.n	8014932 <tcp_input+0x7e2>
      goto dropped;
 8014930:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8014932:	6878      	ldr	r0, [r7, #4]
 8014934:	f7fd fbd0 	bl	80120d8 <pbuf_free>
 8014938:	e000      	b.n	801493c <tcp_input+0x7ec>
  return;
 801493a:	bf00      	nop
}
 801493c:	3724      	adds	r7, #36	; 0x24
 801493e:	46bd      	mov	sp, r7
 8014940:	bd90      	pop	{r4, r7, pc}
 8014942:	bf00      	nop
 8014944:	200110d8 	.word	0x200110d8
 8014948:	200110d4 	.word	0x200110d4
 801494c:	200110a4 	.word	0x200110a4
 8014950:	200110b4 	.word	0x200110b4
 8014954:	200110c8 	.word	0x200110c8
 8014958:	200110ce 	.word	0x200110ce
 801495c:	200110c4 	.word	0x200110c4
 8014960:	2000d948 	.word	0x2000d948
 8014964:	2000d94c 	.word	0x2000d94c

08014968 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8014968:	b580      	push	{r7, lr}
 801496a:	b082      	sub	sp, #8
 801496c:	af00      	add	r7, sp, #0
 801496e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	2b00      	cmp	r3, #0
 8014974:	d106      	bne.n	8014984 <tcp_input_delayed_close+0x1c>
 8014976:	4b17      	ldr	r3, [pc, #92]	; (80149d4 <tcp_input_delayed_close+0x6c>)
 8014978:	f240 225a 	movw	r2, #602	; 0x25a
 801497c:	4916      	ldr	r1, [pc, #88]	; (80149d8 <tcp_input_delayed_close+0x70>)
 801497e:	4817      	ldr	r0, [pc, #92]	; (80149dc <tcp_input_delayed_close+0x74>)
 8014980:	f006 ff40 	bl	801b804 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8014984:	4b16      	ldr	r3, [pc, #88]	; (80149e0 <tcp_input_delayed_close+0x78>)
 8014986:	781b      	ldrb	r3, [r3, #0]
 8014988:	f003 0310 	and.w	r3, r3, #16
 801498c:	2b00      	cmp	r3, #0
 801498e:	d01c      	beq.n	80149ca <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	8b5b      	ldrh	r3, [r3, #26]
 8014994:	f003 0310 	and.w	r3, r3, #16
 8014998:	2b00      	cmp	r3, #0
 801499a:	d10d      	bne.n	80149b8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d008      	beq.n	80149b8 <tcp_input_delayed_close+0x50>
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80149ac:	687a      	ldr	r2, [r7, #4]
 80149ae:	6912      	ldr	r2, [r2, #16]
 80149b0:	f06f 010e 	mvn.w	r1, #14
 80149b4:	4610      	mov	r0, r2
 80149b6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80149b8:	6879      	ldr	r1, [r7, #4]
 80149ba:	480a      	ldr	r0, [pc, #40]	; (80149e4 <tcp_input_delayed_close+0x7c>)
 80149bc:	f7ff fa50 	bl	8013e60 <tcp_pcb_remove>
    tcp_free(pcb);
 80149c0:	6878      	ldr	r0, [r7, #4]
 80149c2:	f7fd fe35 	bl	8012630 <tcp_free>
    return 1;
 80149c6:	2301      	movs	r3, #1
 80149c8:	e000      	b.n	80149cc <tcp_input_delayed_close+0x64>
  }
  return 0;
 80149ca:	2300      	movs	r3, #0
}
 80149cc:	4618      	mov	r0, r3
 80149ce:	3708      	adds	r7, #8
 80149d0:	46bd      	mov	sp, r7
 80149d2:	bd80      	pop	{r7, pc}
 80149d4:	0801ec70 	.word	0x0801ec70
 80149d8:	0801ee40 	.word	0x0801ee40
 80149dc:	0801ecbc 	.word	0x0801ecbc
 80149e0:	200110d1 	.word	0x200110d1
 80149e4:	20011098 	.word	0x20011098

080149e8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80149e8:	b590      	push	{r4, r7, lr}
 80149ea:	b08b      	sub	sp, #44	; 0x2c
 80149ec:	af04      	add	r7, sp, #16
 80149ee:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80149f0:	4b6f      	ldr	r3, [pc, #444]	; (8014bb0 <tcp_listen_input+0x1c8>)
 80149f2:	781b      	ldrb	r3, [r3, #0]
 80149f4:	f003 0304 	and.w	r3, r3, #4
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	f040 80d2 	bne.w	8014ba2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d106      	bne.n	8014a12 <tcp_listen_input+0x2a>
 8014a04:	4b6b      	ldr	r3, [pc, #428]	; (8014bb4 <tcp_listen_input+0x1cc>)
 8014a06:	f240 2281 	movw	r2, #641	; 0x281
 8014a0a:	496b      	ldr	r1, [pc, #428]	; (8014bb8 <tcp_listen_input+0x1d0>)
 8014a0c:	486b      	ldr	r0, [pc, #428]	; (8014bbc <tcp_listen_input+0x1d4>)
 8014a0e:	f006 fef9 	bl	801b804 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8014a12:	4b67      	ldr	r3, [pc, #412]	; (8014bb0 <tcp_listen_input+0x1c8>)
 8014a14:	781b      	ldrb	r3, [r3, #0]
 8014a16:	f003 0310 	and.w	r3, r3, #16
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d019      	beq.n	8014a52 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014a1e:	4b68      	ldr	r3, [pc, #416]	; (8014bc0 <tcp_listen_input+0x1d8>)
 8014a20:	6819      	ldr	r1, [r3, #0]
 8014a22:	4b68      	ldr	r3, [pc, #416]	; (8014bc4 <tcp_listen_input+0x1dc>)
 8014a24:	881b      	ldrh	r3, [r3, #0]
 8014a26:	461a      	mov	r2, r3
 8014a28:	4b67      	ldr	r3, [pc, #412]	; (8014bc8 <tcp_listen_input+0x1e0>)
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014a2e:	4b67      	ldr	r3, [pc, #412]	; (8014bcc <tcp_listen_input+0x1e4>)
 8014a30:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014a32:	885b      	ldrh	r3, [r3, #2]
 8014a34:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014a36:	4a65      	ldr	r2, [pc, #404]	; (8014bcc <tcp_listen_input+0x1e4>)
 8014a38:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014a3a:	8812      	ldrh	r2, [r2, #0]
 8014a3c:	b292      	uxth	r2, r2
 8014a3e:	9202      	str	r2, [sp, #8]
 8014a40:	9301      	str	r3, [sp, #4]
 8014a42:	4b63      	ldr	r3, [pc, #396]	; (8014bd0 <tcp_listen_input+0x1e8>)
 8014a44:	9300      	str	r3, [sp, #0]
 8014a46:	4b63      	ldr	r3, [pc, #396]	; (8014bd4 <tcp_listen_input+0x1ec>)
 8014a48:	4602      	mov	r2, r0
 8014a4a:	6878      	ldr	r0, [r7, #4]
 8014a4c:	f003 fbd8 	bl	8018200 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8014a50:	e0a9      	b.n	8014ba6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8014a52:	4b57      	ldr	r3, [pc, #348]	; (8014bb0 <tcp_listen_input+0x1c8>)
 8014a54:	781b      	ldrb	r3, [r3, #0]
 8014a56:	f003 0302 	and.w	r3, r3, #2
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	f000 80a3 	beq.w	8014ba6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	7d5b      	ldrb	r3, [r3, #21]
 8014a64:	4618      	mov	r0, r3
 8014a66:	f7ff f859 	bl	8013b1c <tcp_alloc>
 8014a6a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8014a6c:	697b      	ldr	r3, [r7, #20]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d111      	bne.n	8014a96 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	699b      	ldr	r3, [r3, #24]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d00a      	beq.n	8014a90 <tcp_listen_input+0xa8>
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	699b      	ldr	r3, [r3, #24]
 8014a7e:	687a      	ldr	r2, [r7, #4]
 8014a80:	6910      	ldr	r0, [r2, #16]
 8014a82:	f04f 32ff 	mov.w	r2, #4294967295
 8014a86:	2100      	movs	r1, #0
 8014a88:	4798      	blx	r3
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	73bb      	strb	r3, [r7, #14]
      return;
 8014a8e:	e08b      	b.n	8014ba8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014a90:	23f0      	movs	r3, #240	; 0xf0
 8014a92:	73bb      	strb	r3, [r7, #14]
      return;
 8014a94:	e088      	b.n	8014ba8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8014a96:	4b50      	ldr	r3, [pc, #320]	; (8014bd8 <tcp_listen_input+0x1f0>)
 8014a98:	695a      	ldr	r2, [r3, #20]
 8014a9a:	697b      	ldr	r3, [r7, #20]
 8014a9c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8014a9e:	4b4e      	ldr	r3, [pc, #312]	; (8014bd8 <tcp_listen_input+0x1f0>)
 8014aa0:	691a      	ldr	r2, [r3, #16]
 8014aa2:	697b      	ldr	r3, [r7, #20]
 8014aa4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	8ada      	ldrh	r2, [r3, #22]
 8014aaa:	697b      	ldr	r3, [r7, #20]
 8014aac:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8014aae:	4b47      	ldr	r3, [pc, #284]	; (8014bcc <tcp_listen_input+0x1e4>)
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	881b      	ldrh	r3, [r3, #0]
 8014ab4:	b29a      	uxth	r2, r3
 8014ab6:	697b      	ldr	r3, [r7, #20]
 8014ab8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8014aba:	697b      	ldr	r3, [r7, #20]
 8014abc:	2203      	movs	r2, #3
 8014abe:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8014ac0:	4b41      	ldr	r3, [pc, #260]	; (8014bc8 <tcp_listen_input+0x1e0>)
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	1c5a      	adds	r2, r3, #1
 8014ac6:	697b      	ldr	r3, [r7, #20]
 8014ac8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8014aca:	697b      	ldr	r3, [r7, #20]
 8014acc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014ace:	697b      	ldr	r3, [r7, #20]
 8014ad0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8014ad2:	6978      	ldr	r0, [r7, #20]
 8014ad4:	f7ff fa58 	bl	8013f88 <tcp_next_iss>
 8014ad8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8014ada:	697b      	ldr	r3, [r7, #20]
 8014adc:	693a      	ldr	r2, [r7, #16]
 8014ade:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8014ae0:	697b      	ldr	r3, [r7, #20]
 8014ae2:	693a      	ldr	r2, [r7, #16]
 8014ae4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8014ae6:	697b      	ldr	r3, [r7, #20]
 8014ae8:	693a      	ldr	r2, [r7, #16]
 8014aea:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8014aec:	697b      	ldr	r3, [r7, #20]
 8014aee:	693a      	ldr	r2, [r7, #16]
 8014af0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8014af2:	4b35      	ldr	r3, [pc, #212]	; (8014bc8 <tcp_listen_input+0x1e0>)
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	1e5a      	subs	r2, r3, #1
 8014af8:	697b      	ldr	r3, [r7, #20]
 8014afa:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	691a      	ldr	r2, [r3, #16]
 8014b00:	697b      	ldr	r3, [r7, #20]
 8014b02:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014b04:	697b      	ldr	r3, [r7, #20]
 8014b06:	687a      	ldr	r2, [r7, #4]
 8014b08:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	7a5b      	ldrb	r3, [r3, #9]
 8014b0e:	f003 030c 	and.w	r3, r3, #12
 8014b12:	b2da      	uxtb	r2, r3
 8014b14:	697b      	ldr	r3, [r7, #20]
 8014b16:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	7a1a      	ldrb	r2, [r3, #8]
 8014b1c:	697b      	ldr	r3, [r7, #20]
 8014b1e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8014b20:	4b2e      	ldr	r3, [pc, #184]	; (8014bdc <tcp_listen_input+0x1f4>)
 8014b22:	681a      	ldr	r2, [r3, #0]
 8014b24:	697b      	ldr	r3, [r7, #20]
 8014b26:	60da      	str	r2, [r3, #12]
 8014b28:	4a2c      	ldr	r2, [pc, #176]	; (8014bdc <tcp_listen_input+0x1f4>)
 8014b2a:	697b      	ldr	r3, [r7, #20]
 8014b2c:	6013      	str	r3, [r2, #0]
 8014b2e:	f003 fd29 	bl	8018584 <tcp_timer_needed>
 8014b32:	4b2b      	ldr	r3, [pc, #172]	; (8014be0 <tcp_listen_input+0x1f8>)
 8014b34:	2201      	movs	r2, #1
 8014b36:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014b38:	6978      	ldr	r0, [r7, #20]
 8014b3a:	f001 fd8f 	bl	801665c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8014b3e:	4b23      	ldr	r3, [pc, #140]	; (8014bcc <tcp_listen_input+0x1e4>)
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	89db      	ldrh	r3, [r3, #14]
 8014b44:	b29a      	uxth	r2, r3
 8014b46:	697b      	ldr	r3, [r7, #20]
 8014b48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014b4c:	697b      	ldr	r3, [r7, #20]
 8014b4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014b52:	697b      	ldr	r3, [r7, #20]
 8014b54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014b58:	697b      	ldr	r3, [r7, #20]
 8014b5a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014b5c:	697b      	ldr	r3, [r7, #20]
 8014b5e:	3304      	adds	r3, #4
 8014b60:	4618      	mov	r0, r3
 8014b62:	f005 fa63 	bl	801a02c <ip4_route>
 8014b66:	4601      	mov	r1, r0
 8014b68:	697b      	ldr	r3, [r7, #20]
 8014b6a:	3304      	adds	r3, #4
 8014b6c:	461a      	mov	r2, r3
 8014b6e:	4620      	mov	r0, r4
 8014b70:	f7ff fa30 	bl	8013fd4 <tcp_eff_send_mss_netif>
 8014b74:	4603      	mov	r3, r0
 8014b76:	461a      	mov	r2, r3
 8014b78:	697b      	ldr	r3, [r7, #20]
 8014b7a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8014b7c:	2112      	movs	r1, #18
 8014b7e:	6978      	ldr	r0, [r7, #20]
 8014b80:	f002 fc9c 	bl	80174bc <tcp_enqueue_flags>
 8014b84:	4603      	mov	r3, r0
 8014b86:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8014b88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d004      	beq.n	8014b9a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014b90:	2100      	movs	r1, #0
 8014b92:	6978      	ldr	r0, [r7, #20]
 8014b94:	f7fd ffd2 	bl	8012b3c <tcp_abandon>
      return;
 8014b98:	e006      	b.n	8014ba8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8014b9a:	6978      	ldr	r0, [r7, #20]
 8014b9c:	f002 fd7c 	bl	8017698 <tcp_output>
  return;
 8014ba0:	e001      	b.n	8014ba6 <tcp_listen_input+0x1be>
    return;
 8014ba2:	bf00      	nop
 8014ba4:	e000      	b.n	8014ba8 <tcp_listen_input+0x1c0>
  return;
 8014ba6:	bf00      	nop
}
 8014ba8:	371c      	adds	r7, #28
 8014baa:	46bd      	mov	sp, r7
 8014bac:	bd90      	pop	{r4, r7, pc}
 8014bae:	bf00      	nop
 8014bb0:	200110d0 	.word	0x200110d0
 8014bb4:	0801ec70 	.word	0x0801ec70
 8014bb8:	0801ee68 	.word	0x0801ee68
 8014bbc:	0801ecbc 	.word	0x0801ecbc
 8014bc0:	200110c8 	.word	0x200110c8
 8014bc4:	200110ce 	.word	0x200110ce
 8014bc8:	200110c4 	.word	0x200110c4
 8014bcc:	200110b4 	.word	0x200110b4
 8014bd0:	2000d948 	.word	0x2000d948
 8014bd4:	2000d94c 	.word	0x2000d94c
 8014bd8:	2000d938 	.word	0x2000d938
 8014bdc:	20011098 	.word	0x20011098
 8014be0:	200110a0 	.word	0x200110a0

08014be4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b086      	sub	sp, #24
 8014be8:	af04      	add	r7, sp, #16
 8014bea:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014bec:	4b2f      	ldr	r3, [pc, #188]	; (8014cac <tcp_timewait_input+0xc8>)
 8014bee:	781b      	ldrb	r3, [r3, #0]
 8014bf0:	f003 0304 	and.w	r3, r3, #4
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d153      	bne.n	8014ca0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d106      	bne.n	8014c0c <tcp_timewait_input+0x28>
 8014bfe:	4b2c      	ldr	r3, [pc, #176]	; (8014cb0 <tcp_timewait_input+0xcc>)
 8014c00:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014c04:	492b      	ldr	r1, [pc, #172]	; (8014cb4 <tcp_timewait_input+0xd0>)
 8014c06:	482c      	ldr	r0, [pc, #176]	; (8014cb8 <tcp_timewait_input+0xd4>)
 8014c08:	f006 fdfc 	bl	801b804 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014c0c:	4b27      	ldr	r3, [pc, #156]	; (8014cac <tcp_timewait_input+0xc8>)
 8014c0e:	781b      	ldrb	r3, [r3, #0]
 8014c10:	f003 0302 	and.w	r3, r3, #2
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d02a      	beq.n	8014c6e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014c18:	4b28      	ldr	r3, [pc, #160]	; (8014cbc <tcp_timewait_input+0xd8>)
 8014c1a:	681a      	ldr	r2, [r3, #0]
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c20:	1ad3      	subs	r3, r2, r3
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	db2d      	blt.n	8014c82 <tcp_timewait_input+0x9e>
 8014c26:	4b25      	ldr	r3, [pc, #148]	; (8014cbc <tcp_timewait_input+0xd8>)
 8014c28:	681a      	ldr	r2, [r3, #0]
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c2e:	6879      	ldr	r1, [r7, #4]
 8014c30:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014c32:	440b      	add	r3, r1
 8014c34:	1ad3      	subs	r3, r2, r3
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	dc23      	bgt.n	8014c82 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014c3a:	4b21      	ldr	r3, [pc, #132]	; (8014cc0 <tcp_timewait_input+0xdc>)
 8014c3c:	6819      	ldr	r1, [r3, #0]
 8014c3e:	4b21      	ldr	r3, [pc, #132]	; (8014cc4 <tcp_timewait_input+0xe0>)
 8014c40:	881b      	ldrh	r3, [r3, #0]
 8014c42:	461a      	mov	r2, r3
 8014c44:	4b1d      	ldr	r3, [pc, #116]	; (8014cbc <tcp_timewait_input+0xd8>)
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014c4a:	4b1f      	ldr	r3, [pc, #124]	; (8014cc8 <tcp_timewait_input+0xe4>)
 8014c4c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014c4e:	885b      	ldrh	r3, [r3, #2]
 8014c50:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014c52:	4a1d      	ldr	r2, [pc, #116]	; (8014cc8 <tcp_timewait_input+0xe4>)
 8014c54:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014c56:	8812      	ldrh	r2, [r2, #0]
 8014c58:	b292      	uxth	r2, r2
 8014c5a:	9202      	str	r2, [sp, #8]
 8014c5c:	9301      	str	r3, [sp, #4]
 8014c5e:	4b1b      	ldr	r3, [pc, #108]	; (8014ccc <tcp_timewait_input+0xe8>)
 8014c60:	9300      	str	r3, [sp, #0]
 8014c62:	4b1b      	ldr	r3, [pc, #108]	; (8014cd0 <tcp_timewait_input+0xec>)
 8014c64:	4602      	mov	r2, r0
 8014c66:	6878      	ldr	r0, [r7, #4]
 8014c68:	f003 faca 	bl	8018200 <tcp_rst>
      return;
 8014c6c:	e01b      	b.n	8014ca6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8014c6e:	4b0f      	ldr	r3, [pc, #60]	; (8014cac <tcp_timewait_input+0xc8>)
 8014c70:	781b      	ldrb	r3, [r3, #0]
 8014c72:	f003 0301 	and.w	r3, r3, #1
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d003      	beq.n	8014c82 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8014c7a:	4b16      	ldr	r3, [pc, #88]	; (8014cd4 <tcp_timewait_input+0xf0>)
 8014c7c:	681a      	ldr	r2, [r3, #0]
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8014c82:	4b10      	ldr	r3, [pc, #64]	; (8014cc4 <tcp_timewait_input+0xe0>)
 8014c84:	881b      	ldrh	r3, [r3, #0]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d00c      	beq.n	8014ca4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	8b5b      	ldrh	r3, [r3, #26]
 8014c8e:	f043 0302 	orr.w	r3, r3, #2
 8014c92:	b29a      	uxth	r2, r3
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014c98:	6878      	ldr	r0, [r7, #4]
 8014c9a:	f002 fcfd 	bl	8017698 <tcp_output>
  }
  return;
 8014c9e:	e001      	b.n	8014ca4 <tcp_timewait_input+0xc0>
    return;
 8014ca0:	bf00      	nop
 8014ca2:	e000      	b.n	8014ca6 <tcp_timewait_input+0xc2>
  return;
 8014ca4:	bf00      	nop
}
 8014ca6:	3708      	adds	r7, #8
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	bd80      	pop	{r7, pc}
 8014cac:	200110d0 	.word	0x200110d0
 8014cb0:	0801ec70 	.word	0x0801ec70
 8014cb4:	0801ee88 	.word	0x0801ee88
 8014cb8:	0801ecbc 	.word	0x0801ecbc
 8014cbc:	200110c4 	.word	0x200110c4
 8014cc0:	200110c8 	.word	0x200110c8
 8014cc4:	200110ce 	.word	0x200110ce
 8014cc8:	200110b4 	.word	0x200110b4
 8014ccc:	2000d948 	.word	0x2000d948
 8014cd0:	2000d94c 	.word	0x2000d94c
 8014cd4:	2001108c 	.word	0x2001108c

08014cd8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014cd8:	b590      	push	{r4, r7, lr}
 8014cda:	b08d      	sub	sp, #52	; 0x34
 8014cdc:	af04      	add	r7, sp, #16
 8014cde:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014ce0:	2300      	movs	r3, #0
 8014ce2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d106      	bne.n	8014cfc <tcp_process+0x24>
 8014cee:	4b9d      	ldr	r3, [pc, #628]	; (8014f64 <tcp_process+0x28c>)
 8014cf0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8014cf4:	499c      	ldr	r1, [pc, #624]	; (8014f68 <tcp_process+0x290>)
 8014cf6:	489d      	ldr	r0, [pc, #628]	; (8014f6c <tcp_process+0x294>)
 8014cf8:	f006 fd84 	bl	801b804 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014cfc:	4b9c      	ldr	r3, [pc, #624]	; (8014f70 <tcp_process+0x298>)
 8014cfe:	781b      	ldrb	r3, [r3, #0]
 8014d00:	f003 0304 	and.w	r3, r3, #4
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d04e      	beq.n	8014da6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	7d1b      	ldrb	r3, [r3, #20]
 8014d0c:	2b02      	cmp	r3, #2
 8014d0e:	d108      	bne.n	8014d22 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014d14:	4b97      	ldr	r3, [pc, #604]	; (8014f74 <tcp_process+0x29c>)
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	429a      	cmp	r2, r3
 8014d1a:	d123      	bne.n	8014d64 <tcp_process+0x8c>
        acceptable = 1;
 8014d1c:	2301      	movs	r3, #1
 8014d1e:	76fb      	strb	r3, [r7, #27]
 8014d20:	e020      	b.n	8014d64 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014d26:	4b94      	ldr	r3, [pc, #592]	; (8014f78 <tcp_process+0x2a0>)
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	429a      	cmp	r2, r3
 8014d2c:	d102      	bne.n	8014d34 <tcp_process+0x5c>
        acceptable = 1;
 8014d2e:	2301      	movs	r3, #1
 8014d30:	76fb      	strb	r3, [r7, #27]
 8014d32:	e017      	b.n	8014d64 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014d34:	4b90      	ldr	r3, [pc, #576]	; (8014f78 <tcp_process+0x2a0>)
 8014d36:	681a      	ldr	r2, [r3, #0]
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d3c:	1ad3      	subs	r3, r2, r3
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	db10      	blt.n	8014d64 <tcp_process+0x8c>
 8014d42:	4b8d      	ldr	r3, [pc, #564]	; (8014f78 <tcp_process+0x2a0>)
 8014d44:	681a      	ldr	r2, [r3, #0]
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d4a:	6879      	ldr	r1, [r7, #4]
 8014d4c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014d4e:	440b      	add	r3, r1
 8014d50:	1ad3      	subs	r3, r2, r3
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	dc06      	bgt.n	8014d64 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	8b5b      	ldrh	r3, [r3, #26]
 8014d5a:	f043 0302 	orr.w	r3, r3, #2
 8014d5e:	b29a      	uxth	r2, r3
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8014d64:	7efb      	ldrb	r3, [r7, #27]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d01b      	beq.n	8014da2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	7d1b      	ldrb	r3, [r3, #20]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d106      	bne.n	8014d80 <tcp_process+0xa8>
 8014d72:	4b7c      	ldr	r3, [pc, #496]	; (8014f64 <tcp_process+0x28c>)
 8014d74:	f44f 724e 	mov.w	r2, #824	; 0x338
 8014d78:	4980      	ldr	r1, [pc, #512]	; (8014f7c <tcp_process+0x2a4>)
 8014d7a:	487c      	ldr	r0, [pc, #496]	; (8014f6c <tcp_process+0x294>)
 8014d7c:	f006 fd42 	bl	801b804 <iprintf>
      recv_flags |= TF_RESET;
 8014d80:	4b7f      	ldr	r3, [pc, #508]	; (8014f80 <tcp_process+0x2a8>)
 8014d82:	781b      	ldrb	r3, [r3, #0]
 8014d84:	f043 0308 	orr.w	r3, r3, #8
 8014d88:	b2da      	uxtb	r2, r3
 8014d8a:	4b7d      	ldr	r3, [pc, #500]	; (8014f80 <tcp_process+0x2a8>)
 8014d8c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	8b5b      	ldrh	r3, [r3, #26]
 8014d92:	f023 0301 	bic.w	r3, r3, #1
 8014d96:	b29a      	uxth	r2, r3
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014d9c:	f06f 030d 	mvn.w	r3, #13
 8014da0:	e37a      	b.n	8015498 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8014da2:	2300      	movs	r3, #0
 8014da4:	e378      	b.n	8015498 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8014da6:	4b72      	ldr	r3, [pc, #456]	; (8014f70 <tcp_process+0x298>)
 8014da8:	781b      	ldrb	r3, [r3, #0]
 8014daa:	f003 0302 	and.w	r3, r3, #2
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d010      	beq.n	8014dd4 <tcp_process+0xfc>
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	7d1b      	ldrb	r3, [r3, #20]
 8014db6:	2b02      	cmp	r3, #2
 8014db8:	d00c      	beq.n	8014dd4 <tcp_process+0xfc>
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	7d1b      	ldrb	r3, [r3, #20]
 8014dbe:	2b03      	cmp	r3, #3
 8014dc0:	d008      	beq.n	8014dd4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	8b5b      	ldrh	r3, [r3, #26]
 8014dc6:	f043 0302 	orr.w	r3, r3, #2
 8014dca:	b29a      	uxth	r2, r3
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	e361      	b.n	8015498 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	8b5b      	ldrh	r3, [r3, #26]
 8014dd8:	f003 0310 	and.w	r3, r3, #16
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d103      	bne.n	8014de8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014de0:	4b68      	ldr	r3, [pc, #416]	; (8014f84 <tcp_process+0x2ac>)
 8014de2:	681a      	ldr	r2, [r3, #0]
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	2200      	movs	r2, #0
 8014dec:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	2200      	movs	r2, #0
 8014df4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8014df8:	6878      	ldr	r0, [r7, #4]
 8014dfa:	f001 fc2f 	bl	801665c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	7d1b      	ldrb	r3, [r3, #20]
 8014e02:	3b02      	subs	r3, #2
 8014e04:	2b07      	cmp	r3, #7
 8014e06:	f200 8337 	bhi.w	8015478 <tcp_process+0x7a0>
 8014e0a:	a201      	add	r2, pc, #4	; (adr r2, 8014e10 <tcp_process+0x138>)
 8014e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e10:	08014e31 	.word	0x08014e31
 8014e14:	08015061 	.word	0x08015061
 8014e18:	080151d9 	.word	0x080151d9
 8014e1c:	08015203 	.word	0x08015203
 8014e20:	08015327 	.word	0x08015327
 8014e24:	080151d9 	.word	0x080151d9
 8014e28:	080153b3 	.word	0x080153b3
 8014e2c:	08015443 	.word	0x08015443
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014e30:	4b4f      	ldr	r3, [pc, #316]	; (8014f70 <tcp_process+0x298>)
 8014e32:	781b      	ldrb	r3, [r3, #0]
 8014e34:	f003 0310 	and.w	r3, r3, #16
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	f000 80e4 	beq.w	8015006 <tcp_process+0x32e>
 8014e3e:	4b4c      	ldr	r3, [pc, #304]	; (8014f70 <tcp_process+0x298>)
 8014e40:	781b      	ldrb	r3, [r3, #0]
 8014e42:	f003 0302 	and.w	r3, r3, #2
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	f000 80dd 	beq.w	8015006 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e50:	1c5a      	adds	r2, r3, #1
 8014e52:	4b48      	ldr	r3, [pc, #288]	; (8014f74 <tcp_process+0x29c>)
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	429a      	cmp	r2, r3
 8014e58:	f040 80d5 	bne.w	8015006 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014e5c:	4b46      	ldr	r3, [pc, #280]	; (8014f78 <tcp_process+0x2a0>)
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	1c5a      	adds	r2, r3, #1
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8014e6e:	4b41      	ldr	r3, [pc, #260]	; (8014f74 <tcp_process+0x29c>)
 8014e70:	681a      	ldr	r2, [r3, #0]
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8014e76:	4b44      	ldr	r3, [pc, #272]	; (8014f88 <tcp_process+0x2b0>)
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	89db      	ldrh	r3, [r3, #14]
 8014e7c:	b29a      	uxth	r2, r3
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014e90:	4b39      	ldr	r3, [pc, #228]	; (8014f78 <tcp_process+0x2a0>)
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	1e5a      	subs	r2, r3, #1
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	2204      	movs	r2, #4
 8014e9e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	3304      	adds	r3, #4
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	f005 f8bf 	bl	801a02c <ip4_route>
 8014eae:	4601      	mov	r1, r0
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	3304      	adds	r3, #4
 8014eb4:	461a      	mov	r2, r3
 8014eb6:	4620      	mov	r0, r4
 8014eb8:	f7ff f88c 	bl	8013fd4 <tcp_eff_send_mss_netif>
 8014ebc:	4603      	mov	r3, r0
 8014ebe:	461a      	mov	r2, r3
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014ec8:	009a      	lsls	r2, r3, #2
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014ece:	005b      	lsls	r3, r3, #1
 8014ed0:	f241 111c 	movw	r1, #4380	; 0x111c
 8014ed4:	428b      	cmp	r3, r1
 8014ed6:	bf38      	it	cc
 8014ed8:	460b      	movcc	r3, r1
 8014eda:	429a      	cmp	r2, r3
 8014edc:	d204      	bcs.n	8014ee8 <tcp_process+0x210>
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014ee2:	009b      	lsls	r3, r3, #2
 8014ee4:	b29b      	uxth	r3, r3
 8014ee6:	e00d      	b.n	8014f04 <tcp_process+0x22c>
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014eec:	005b      	lsls	r3, r3, #1
 8014eee:	f241 121c 	movw	r2, #4380	; 0x111c
 8014ef2:	4293      	cmp	r3, r2
 8014ef4:	d904      	bls.n	8014f00 <tcp_process+0x228>
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014efa:	005b      	lsls	r3, r3, #1
 8014efc:	b29b      	uxth	r3, r3
 8014efe:	e001      	b.n	8014f04 <tcp_process+0x22c>
 8014f00:	f241 131c 	movw	r3, #4380	; 0x111c
 8014f04:	687a      	ldr	r2, [r7, #4]
 8014f06:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d106      	bne.n	8014f22 <tcp_process+0x24a>
 8014f14:	4b13      	ldr	r3, [pc, #76]	; (8014f64 <tcp_process+0x28c>)
 8014f16:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8014f1a:	491c      	ldr	r1, [pc, #112]	; (8014f8c <tcp_process+0x2b4>)
 8014f1c:	4813      	ldr	r0, [pc, #76]	; (8014f6c <tcp_process+0x294>)
 8014f1e:	f006 fc71 	bl	801b804 <iprintf>
        --pcb->snd_queuelen;
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014f28:	3b01      	subs	r3, #1
 8014f2a:	b29a      	uxth	r2, r3
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f36:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8014f38:	69fb      	ldr	r3, [r7, #28]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d12a      	bne.n	8014f94 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f42:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8014f44:	69fb      	ldr	r3, [r7, #28]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d106      	bne.n	8014f58 <tcp_process+0x280>
 8014f4a:	4b06      	ldr	r3, [pc, #24]	; (8014f64 <tcp_process+0x28c>)
 8014f4c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8014f50:	490f      	ldr	r1, [pc, #60]	; (8014f90 <tcp_process+0x2b8>)
 8014f52:	4806      	ldr	r0, [pc, #24]	; (8014f6c <tcp_process+0x294>)
 8014f54:	f006 fc56 	bl	801b804 <iprintf>
          pcb->unsent = rseg->next;
 8014f58:	69fb      	ldr	r3, [r7, #28]
 8014f5a:	681a      	ldr	r2, [r3, #0]
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	66da      	str	r2, [r3, #108]	; 0x6c
 8014f60:	e01c      	b.n	8014f9c <tcp_process+0x2c4>
 8014f62:	bf00      	nop
 8014f64:	0801ec70 	.word	0x0801ec70
 8014f68:	0801eea8 	.word	0x0801eea8
 8014f6c:	0801ecbc 	.word	0x0801ecbc
 8014f70:	200110d0 	.word	0x200110d0
 8014f74:	200110c8 	.word	0x200110c8
 8014f78:	200110c4 	.word	0x200110c4
 8014f7c:	0801eec4 	.word	0x0801eec4
 8014f80:	200110d1 	.word	0x200110d1
 8014f84:	2001108c 	.word	0x2001108c
 8014f88:	200110b4 	.word	0x200110b4
 8014f8c:	0801eee4 	.word	0x0801eee4
 8014f90:	0801eefc 	.word	0x0801eefc
        } else {
          pcb->unacked = rseg->next;
 8014f94:	69fb      	ldr	r3, [r7, #28]
 8014f96:	681a      	ldr	r2, [r3, #0]
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8014f9c:	69f8      	ldr	r0, [r7, #28]
 8014f9e:	f7fe fc54 	bl	801384a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d104      	bne.n	8014fb4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014fb0:	861a      	strh	r2, [r3, #48]	; 0x30
 8014fb2:	e006      	b.n	8014fc2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	2200      	movs	r2, #0
 8014fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d00a      	beq.n	8014fe2 <tcp_process+0x30a>
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014fd2:	687a      	ldr	r2, [r7, #4]
 8014fd4:	6910      	ldr	r0, [r2, #16]
 8014fd6:	2200      	movs	r2, #0
 8014fd8:	6879      	ldr	r1, [r7, #4]
 8014fda:	4798      	blx	r3
 8014fdc:	4603      	mov	r3, r0
 8014fde:	76bb      	strb	r3, [r7, #26]
 8014fe0:	e001      	b.n	8014fe6 <tcp_process+0x30e>
 8014fe2:	2300      	movs	r3, #0
 8014fe4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8014fe6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014fea:	f113 0f0d 	cmn.w	r3, #13
 8014fee:	d102      	bne.n	8014ff6 <tcp_process+0x31e>
          return ERR_ABRT;
 8014ff0:	f06f 030c 	mvn.w	r3, #12
 8014ff4:	e250      	b.n	8015498 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	8b5b      	ldrh	r3, [r3, #26]
 8014ffa:	f043 0302 	orr.w	r3, r3, #2
 8014ffe:	b29a      	uxth	r2, r3
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8015004:	e23a      	b.n	801547c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8015006:	4b98      	ldr	r3, [pc, #608]	; (8015268 <tcp_process+0x590>)
 8015008:	781b      	ldrb	r3, [r3, #0]
 801500a:	f003 0310 	and.w	r3, r3, #16
 801500e:	2b00      	cmp	r3, #0
 8015010:	f000 8234 	beq.w	801547c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015014:	4b95      	ldr	r3, [pc, #596]	; (801526c <tcp_process+0x594>)
 8015016:	6819      	ldr	r1, [r3, #0]
 8015018:	4b95      	ldr	r3, [pc, #596]	; (8015270 <tcp_process+0x598>)
 801501a:	881b      	ldrh	r3, [r3, #0]
 801501c:	461a      	mov	r2, r3
 801501e:	4b95      	ldr	r3, [pc, #596]	; (8015274 <tcp_process+0x59c>)
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015024:	4b94      	ldr	r3, [pc, #592]	; (8015278 <tcp_process+0x5a0>)
 8015026:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015028:	885b      	ldrh	r3, [r3, #2]
 801502a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801502c:	4a92      	ldr	r2, [pc, #584]	; (8015278 <tcp_process+0x5a0>)
 801502e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015030:	8812      	ldrh	r2, [r2, #0]
 8015032:	b292      	uxth	r2, r2
 8015034:	9202      	str	r2, [sp, #8]
 8015036:	9301      	str	r3, [sp, #4]
 8015038:	4b90      	ldr	r3, [pc, #576]	; (801527c <tcp_process+0x5a4>)
 801503a:	9300      	str	r3, [sp, #0]
 801503c:	4b90      	ldr	r3, [pc, #576]	; (8015280 <tcp_process+0x5a8>)
 801503e:	4602      	mov	r2, r0
 8015040:	6878      	ldr	r0, [r7, #4]
 8015042:	f003 f8dd 	bl	8018200 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801504c:	2b05      	cmp	r3, #5
 801504e:	f200 8215 	bhi.w	801547c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	2200      	movs	r2, #0
 8015056:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8015058:	6878      	ldr	r0, [r7, #4]
 801505a:	f002 fea7 	bl	8017dac <tcp_rexmit_rto>
      break;
 801505e:	e20d      	b.n	801547c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8015060:	4b81      	ldr	r3, [pc, #516]	; (8015268 <tcp_process+0x590>)
 8015062:	781b      	ldrb	r3, [r3, #0]
 8015064:	f003 0310 	and.w	r3, r3, #16
 8015068:	2b00      	cmp	r3, #0
 801506a:	f000 80a1 	beq.w	80151b0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801506e:	4b7f      	ldr	r3, [pc, #508]	; (801526c <tcp_process+0x594>)
 8015070:	681a      	ldr	r2, [r3, #0]
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015076:	1ad3      	subs	r3, r2, r3
 8015078:	3b01      	subs	r3, #1
 801507a:	2b00      	cmp	r3, #0
 801507c:	db7e      	blt.n	801517c <tcp_process+0x4a4>
 801507e:	4b7b      	ldr	r3, [pc, #492]	; (801526c <tcp_process+0x594>)
 8015080:	681a      	ldr	r2, [r3, #0]
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015086:	1ad3      	subs	r3, r2, r3
 8015088:	2b00      	cmp	r3, #0
 801508a:	dc77      	bgt.n	801517c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	2204      	movs	r2, #4
 8015090:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015096:	2b00      	cmp	r3, #0
 8015098:	d102      	bne.n	80150a0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801509a:	23fa      	movs	r3, #250	; 0xfa
 801509c:	76bb      	strb	r3, [r7, #26]
 801509e:	e01d      	b.n	80150dc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80150a4:	699b      	ldr	r3, [r3, #24]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d106      	bne.n	80150b8 <tcp_process+0x3e0>
 80150aa:	4b76      	ldr	r3, [pc, #472]	; (8015284 <tcp_process+0x5ac>)
 80150ac:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80150b0:	4975      	ldr	r1, [pc, #468]	; (8015288 <tcp_process+0x5b0>)
 80150b2:	4876      	ldr	r0, [pc, #472]	; (801528c <tcp_process+0x5b4>)
 80150b4:	f006 fba6 	bl	801b804 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80150bc:	699b      	ldr	r3, [r3, #24]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d00a      	beq.n	80150d8 <tcp_process+0x400>
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80150c6:	699b      	ldr	r3, [r3, #24]
 80150c8:	687a      	ldr	r2, [r7, #4]
 80150ca:	6910      	ldr	r0, [r2, #16]
 80150cc:	2200      	movs	r2, #0
 80150ce:	6879      	ldr	r1, [r7, #4]
 80150d0:	4798      	blx	r3
 80150d2:	4603      	mov	r3, r0
 80150d4:	76bb      	strb	r3, [r7, #26]
 80150d6:	e001      	b.n	80150dc <tcp_process+0x404>
 80150d8:	23f0      	movs	r3, #240	; 0xf0
 80150da:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80150dc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d00a      	beq.n	80150fa <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80150e4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80150e8:	f113 0f0d 	cmn.w	r3, #13
 80150ec:	d002      	beq.n	80150f4 <tcp_process+0x41c>
              tcp_abort(pcb);
 80150ee:	6878      	ldr	r0, [r7, #4]
 80150f0:	f7fd fde2 	bl	8012cb8 <tcp_abort>
            }
            return ERR_ABRT;
 80150f4:	f06f 030c 	mvn.w	r3, #12
 80150f8:	e1ce      	b.n	8015498 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80150fa:	6878      	ldr	r0, [r7, #4]
 80150fc:	f000 fae0 	bl	80156c0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8015100:	4b63      	ldr	r3, [pc, #396]	; (8015290 <tcp_process+0x5b8>)
 8015102:	881b      	ldrh	r3, [r3, #0]
 8015104:	2b00      	cmp	r3, #0
 8015106:	d005      	beq.n	8015114 <tcp_process+0x43c>
            recv_acked--;
 8015108:	4b61      	ldr	r3, [pc, #388]	; (8015290 <tcp_process+0x5b8>)
 801510a:	881b      	ldrh	r3, [r3, #0]
 801510c:	3b01      	subs	r3, #1
 801510e:	b29a      	uxth	r2, r3
 8015110:	4b5f      	ldr	r3, [pc, #380]	; (8015290 <tcp_process+0x5b8>)
 8015112:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015118:	009a      	lsls	r2, r3, #2
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801511e:	005b      	lsls	r3, r3, #1
 8015120:	f241 111c 	movw	r1, #4380	; 0x111c
 8015124:	428b      	cmp	r3, r1
 8015126:	bf38      	it	cc
 8015128:	460b      	movcc	r3, r1
 801512a:	429a      	cmp	r2, r3
 801512c:	d204      	bcs.n	8015138 <tcp_process+0x460>
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015132:	009b      	lsls	r3, r3, #2
 8015134:	b29b      	uxth	r3, r3
 8015136:	e00d      	b.n	8015154 <tcp_process+0x47c>
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801513c:	005b      	lsls	r3, r3, #1
 801513e:	f241 121c 	movw	r2, #4380	; 0x111c
 8015142:	4293      	cmp	r3, r2
 8015144:	d904      	bls.n	8015150 <tcp_process+0x478>
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801514a:	005b      	lsls	r3, r3, #1
 801514c:	b29b      	uxth	r3, r3
 801514e:	e001      	b.n	8015154 <tcp_process+0x47c>
 8015150:	f241 131c 	movw	r3, #4380	; 0x111c
 8015154:	687a      	ldr	r2, [r7, #4]
 8015156:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801515a:	4b4e      	ldr	r3, [pc, #312]	; (8015294 <tcp_process+0x5bc>)
 801515c:	781b      	ldrb	r3, [r3, #0]
 801515e:	f003 0320 	and.w	r3, r3, #32
 8015162:	2b00      	cmp	r3, #0
 8015164:	d037      	beq.n	80151d6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	8b5b      	ldrh	r3, [r3, #26]
 801516a:	f043 0302 	orr.w	r3, r3, #2
 801516e:	b29a      	uxth	r2, r3
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	2207      	movs	r2, #7
 8015178:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801517a:	e02c      	b.n	80151d6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801517c:	4b3b      	ldr	r3, [pc, #236]	; (801526c <tcp_process+0x594>)
 801517e:	6819      	ldr	r1, [r3, #0]
 8015180:	4b3b      	ldr	r3, [pc, #236]	; (8015270 <tcp_process+0x598>)
 8015182:	881b      	ldrh	r3, [r3, #0]
 8015184:	461a      	mov	r2, r3
 8015186:	4b3b      	ldr	r3, [pc, #236]	; (8015274 <tcp_process+0x59c>)
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801518c:	4b3a      	ldr	r3, [pc, #232]	; (8015278 <tcp_process+0x5a0>)
 801518e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015190:	885b      	ldrh	r3, [r3, #2]
 8015192:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015194:	4a38      	ldr	r2, [pc, #224]	; (8015278 <tcp_process+0x5a0>)
 8015196:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015198:	8812      	ldrh	r2, [r2, #0]
 801519a:	b292      	uxth	r2, r2
 801519c:	9202      	str	r2, [sp, #8]
 801519e:	9301      	str	r3, [sp, #4]
 80151a0:	4b36      	ldr	r3, [pc, #216]	; (801527c <tcp_process+0x5a4>)
 80151a2:	9300      	str	r3, [sp, #0]
 80151a4:	4b36      	ldr	r3, [pc, #216]	; (8015280 <tcp_process+0x5a8>)
 80151a6:	4602      	mov	r2, r0
 80151a8:	6878      	ldr	r0, [r7, #4]
 80151aa:	f003 f829 	bl	8018200 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80151ae:	e167      	b.n	8015480 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80151b0:	4b2d      	ldr	r3, [pc, #180]	; (8015268 <tcp_process+0x590>)
 80151b2:	781b      	ldrb	r3, [r3, #0]
 80151b4:	f003 0302 	and.w	r3, r3, #2
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	f000 8161 	beq.w	8015480 <tcp_process+0x7a8>
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151c2:	1e5a      	subs	r2, r3, #1
 80151c4:	4b2b      	ldr	r3, [pc, #172]	; (8015274 <tcp_process+0x59c>)
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	429a      	cmp	r2, r3
 80151ca:	f040 8159 	bne.w	8015480 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80151ce:	6878      	ldr	r0, [r7, #4]
 80151d0:	f002 fe0e 	bl	8017df0 <tcp_rexmit>
      break;
 80151d4:	e154      	b.n	8015480 <tcp_process+0x7a8>
 80151d6:	e153      	b.n	8015480 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80151d8:	6878      	ldr	r0, [r7, #4]
 80151da:	f000 fa71 	bl	80156c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80151de:	4b2d      	ldr	r3, [pc, #180]	; (8015294 <tcp_process+0x5bc>)
 80151e0:	781b      	ldrb	r3, [r3, #0]
 80151e2:	f003 0320 	and.w	r3, r3, #32
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	f000 814c 	beq.w	8015484 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	8b5b      	ldrh	r3, [r3, #26]
 80151f0:	f043 0302 	orr.w	r3, r3, #2
 80151f4:	b29a      	uxth	r2, r3
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	2207      	movs	r2, #7
 80151fe:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015200:	e140      	b.n	8015484 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8015202:	6878      	ldr	r0, [r7, #4]
 8015204:	f000 fa5c 	bl	80156c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015208:	4b22      	ldr	r3, [pc, #136]	; (8015294 <tcp_process+0x5bc>)
 801520a:	781b      	ldrb	r3, [r3, #0]
 801520c:	f003 0320 	and.w	r3, r3, #32
 8015210:	2b00      	cmp	r3, #0
 8015212:	d071      	beq.n	80152f8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015214:	4b14      	ldr	r3, [pc, #80]	; (8015268 <tcp_process+0x590>)
 8015216:	781b      	ldrb	r3, [r3, #0]
 8015218:	f003 0310 	and.w	r3, r3, #16
 801521c:	2b00      	cmp	r3, #0
 801521e:	d060      	beq.n	80152e2 <tcp_process+0x60a>
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015224:	4b11      	ldr	r3, [pc, #68]	; (801526c <tcp_process+0x594>)
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	429a      	cmp	r2, r3
 801522a:	d15a      	bne.n	80152e2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015230:	2b00      	cmp	r3, #0
 8015232:	d156      	bne.n	80152e2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	8b5b      	ldrh	r3, [r3, #26]
 8015238:	f043 0302 	orr.w	r3, r3, #2
 801523c:	b29a      	uxth	r2, r3
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8015242:	6878      	ldr	r0, [r7, #4]
 8015244:	f7fe fdbc 	bl	8013dc0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8015248:	4b13      	ldr	r3, [pc, #76]	; (8015298 <tcp_process+0x5c0>)
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	687a      	ldr	r2, [r7, #4]
 801524e:	429a      	cmp	r2, r3
 8015250:	d105      	bne.n	801525e <tcp_process+0x586>
 8015252:	4b11      	ldr	r3, [pc, #68]	; (8015298 <tcp_process+0x5c0>)
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	68db      	ldr	r3, [r3, #12]
 8015258:	4a0f      	ldr	r2, [pc, #60]	; (8015298 <tcp_process+0x5c0>)
 801525a:	6013      	str	r3, [r2, #0]
 801525c:	e02e      	b.n	80152bc <tcp_process+0x5e4>
 801525e:	4b0e      	ldr	r3, [pc, #56]	; (8015298 <tcp_process+0x5c0>)
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	617b      	str	r3, [r7, #20]
 8015264:	e027      	b.n	80152b6 <tcp_process+0x5de>
 8015266:	bf00      	nop
 8015268:	200110d0 	.word	0x200110d0
 801526c:	200110c8 	.word	0x200110c8
 8015270:	200110ce 	.word	0x200110ce
 8015274:	200110c4 	.word	0x200110c4
 8015278:	200110b4 	.word	0x200110b4
 801527c:	2000d948 	.word	0x2000d948
 8015280:	2000d94c 	.word	0x2000d94c
 8015284:	0801ec70 	.word	0x0801ec70
 8015288:	0801ef10 	.word	0x0801ef10
 801528c:	0801ecbc 	.word	0x0801ecbc
 8015290:	200110cc 	.word	0x200110cc
 8015294:	200110d1 	.word	0x200110d1
 8015298:	20011098 	.word	0x20011098
 801529c:	697b      	ldr	r3, [r7, #20]
 801529e:	68db      	ldr	r3, [r3, #12]
 80152a0:	687a      	ldr	r2, [r7, #4]
 80152a2:	429a      	cmp	r2, r3
 80152a4:	d104      	bne.n	80152b0 <tcp_process+0x5d8>
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	68da      	ldr	r2, [r3, #12]
 80152aa:	697b      	ldr	r3, [r7, #20]
 80152ac:	60da      	str	r2, [r3, #12]
 80152ae:	e005      	b.n	80152bc <tcp_process+0x5e4>
 80152b0:	697b      	ldr	r3, [r7, #20]
 80152b2:	68db      	ldr	r3, [r3, #12]
 80152b4:	617b      	str	r3, [r7, #20]
 80152b6:	697b      	ldr	r3, [r7, #20]
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d1ef      	bne.n	801529c <tcp_process+0x5c4>
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	2200      	movs	r2, #0
 80152c0:	60da      	str	r2, [r3, #12]
 80152c2:	4b77      	ldr	r3, [pc, #476]	; (80154a0 <tcp_process+0x7c8>)
 80152c4:	2201      	movs	r2, #1
 80152c6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	220a      	movs	r2, #10
 80152cc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80152ce:	4b75      	ldr	r3, [pc, #468]	; (80154a4 <tcp_process+0x7cc>)
 80152d0:	681a      	ldr	r2, [r3, #0]
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	60da      	str	r2, [r3, #12]
 80152d6:	4a73      	ldr	r2, [pc, #460]	; (80154a4 <tcp_process+0x7cc>)
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	6013      	str	r3, [r2, #0]
 80152dc:	f003 f952 	bl	8018584 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80152e0:	e0d2      	b.n	8015488 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	8b5b      	ldrh	r3, [r3, #26]
 80152e6:	f043 0302 	orr.w	r3, r3, #2
 80152ea:	b29a      	uxth	r2, r3
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	2208      	movs	r2, #8
 80152f4:	751a      	strb	r2, [r3, #20]
      break;
 80152f6:	e0c7      	b.n	8015488 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80152f8:	4b6b      	ldr	r3, [pc, #428]	; (80154a8 <tcp_process+0x7d0>)
 80152fa:	781b      	ldrb	r3, [r3, #0]
 80152fc:	f003 0310 	and.w	r3, r3, #16
 8015300:	2b00      	cmp	r3, #0
 8015302:	f000 80c1 	beq.w	8015488 <tcp_process+0x7b0>
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801530a:	4b68      	ldr	r3, [pc, #416]	; (80154ac <tcp_process+0x7d4>)
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	429a      	cmp	r2, r3
 8015310:	f040 80ba 	bne.w	8015488 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015318:	2b00      	cmp	r3, #0
 801531a:	f040 80b5 	bne.w	8015488 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	2206      	movs	r2, #6
 8015322:	751a      	strb	r2, [r3, #20]
      break;
 8015324:	e0b0      	b.n	8015488 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8015326:	6878      	ldr	r0, [r7, #4]
 8015328:	f000 f9ca 	bl	80156c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801532c:	4b60      	ldr	r3, [pc, #384]	; (80154b0 <tcp_process+0x7d8>)
 801532e:	781b      	ldrb	r3, [r3, #0]
 8015330:	f003 0320 	and.w	r3, r3, #32
 8015334:	2b00      	cmp	r3, #0
 8015336:	f000 80a9 	beq.w	801548c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	8b5b      	ldrh	r3, [r3, #26]
 801533e:	f043 0302 	orr.w	r3, r3, #2
 8015342:	b29a      	uxth	r2, r3
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8015348:	6878      	ldr	r0, [r7, #4]
 801534a:	f7fe fd39 	bl	8013dc0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801534e:	4b59      	ldr	r3, [pc, #356]	; (80154b4 <tcp_process+0x7dc>)
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	687a      	ldr	r2, [r7, #4]
 8015354:	429a      	cmp	r2, r3
 8015356:	d105      	bne.n	8015364 <tcp_process+0x68c>
 8015358:	4b56      	ldr	r3, [pc, #344]	; (80154b4 <tcp_process+0x7dc>)
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	68db      	ldr	r3, [r3, #12]
 801535e:	4a55      	ldr	r2, [pc, #340]	; (80154b4 <tcp_process+0x7dc>)
 8015360:	6013      	str	r3, [r2, #0]
 8015362:	e013      	b.n	801538c <tcp_process+0x6b4>
 8015364:	4b53      	ldr	r3, [pc, #332]	; (80154b4 <tcp_process+0x7dc>)
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	613b      	str	r3, [r7, #16]
 801536a:	e00c      	b.n	8015386 <tcp_process+0x6ae>
 801536c:	693b      	ldr	r3, [r7, #16]
 801536e:	68db      	ldr	r3, [r3, #12]
 8015370:	687a      	ldr	r2, [r7, #4]
 8015372:	429a      	cmp	r2, r3
 8015374:	d104      	bne.n	8015380 <tcp_process+0x6a8>
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	68da      	ldr	r2, [r3, #12]
 801537a:	693b      	ldr	r3, [r7, #16]
 801537c:	60da      	str	r2, [r3, #12]
 801537e:	e005      	b.n	801538c <tcp_process+0x6b4>
 8015380:	693b      	ldr	r3, [r7, #16]
 8015382:	68db      	ldr	r3, [r3, #12]
 8015384:	613b      	str	r3, [r7, #16]
 8015386:	693b      	ldr	r3, [r7, #16]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d1ef      	bne.n	801536c <tcp_process+0x694>
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	2200      	movs	r2, #0
 8015390:	60da      	str	r2, [r3, #12]
 8015392:	4b43      	ldr	r3, [pc, #268]	; (80154a0 <tcp_process+0x7c8>)
 8015394:	2201      	movs	r2, #1
 8015396:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	220a      	movs	r2, #10
 801539c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801539e:	4b41      	ldr	r3, [pc, #260]	; (80154a4 <tcp_process+0x7cc>)
 80153a0:	681a      	ldr	r2, [r3, #0]
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	60da      	str	r2, [r3, #12]
 80153a6:	4a3f      	ldr	r2, [pc, #252]	; (80154a4 <tcp_process+0x7cc>)
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	6013      	str	r3, [r2, #0]
 80153ac:	f003 f8ea 	bl	8018584 <tcp_timer_needed>
      }
      break;
 80153b0:	e06c      	b.n	801548c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80153b2:	6878      	ldr	r0, [r7, #4]
 80153b4:	f000 f984 	bl	80156c0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80153b8:	4b3b      	ldr	r3, [pc, #236]	; (80154a8 <tcp_process+0x7d0>)
 80153ba:	781b      	ldrb	r3, [r3, #0]
 80153bc:	f003 0310 	and.w	r3, r3, #16
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d065      	beq.n	8015490 <tcp_process+0x7b8>
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80153c8:	4b38      	ldr	r3, [pc, #224]	; (80154ac <tcp_process+0x7d4>)
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	429a      	cmp	r2, r3
 80153ce:	d15f      	bne.n	8015490 <tcp_process+0x7b8>
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d15b      	bne.n	8015490 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80153d8:	6878      	ldr	r0, [r7, #4]
 80153da:	f7fe fcf1 	bl	8013dc0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80153de:	4b35      	ldr	r3, [pc, #212]	; (80154b4 <tcp_process+0x7dc>)
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	687a      	ldr	r2, [r7, #4]
 80153e4:	429a      	cmp	r2, r3
 80153e6:	d105      	bne.n	80153f4 <tcp_process+0x71c>
 80153e8:	4b32      	ldr	r3, [pc, #200]	; (80154b4 <tcp_process+0x7dc>)
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	68db      	ldr	r3, [r3, #12]
 80153ee:	4a31      	ldr	r2, [pc, #196]	; (80154b4 <tcp_process+0x7dc>)
 80153f0:	6013      	str	r3, [r2, #0]
 80153f2:	e013      	b.n	801541c <tcp_process+0x744>
 80153f4:	4b2f      	ldr	r3, [pc, #188]	; (80154b4 <tcp_process+0x7dc>)
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	60fb      	str	r3, [r7, #12]
 80153fa:	e00c      	b.n	8015416 <tcp_process+0x73e>
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	68db      	ldr	r3, [r3, #12]
 8015400:	687a      	ldr	r2, [r7, #4]
 8015402:	429a      	cmp	r2, r3
 8015404:	d104      	bne.n	8015410 <tcp_process+0x738>
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	68da      	ldr	r2, [r3, #12]
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	60da      	str	r2, [r3, #12]
 801540e:	e005      	b.n	801541c <tcp_process+0x744>
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	68db      	ldr	r3, [r3, #12]
 8015414:	60fb      	str	r3, [r7, #12]
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d1ef      	bne.n	80153fc <tcp_process+0x724>
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	2200      	movs	r2, #0
 8015420:	60da      	str	r2, [r3, #12]
 8015422:	4b1f      	ldr	r3, [pc, #124]	; (80154a0 <tcp_process+0x7c8>)
 8015424:	2201      	movs	r2, #1
 8015426:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	220a      	movs	r2, #10
 801542c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801542e:	4b1d      	ldr	r3, [pc, #116]	; (80154a4 <tcp_process+0x7cc>)
 8015430:	681a      	ldr	r2, [r3, #0]
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	60da      	str	r2, [r3, #12]
 8015436:	4a1b      	ldr	r2, [pc, #108]	; (80154a4 <tcp_process+0x7cc>)
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	6013      	str	r3, [r2, #0]
 801543c:	f003 f8a2 	bl	8018584 <tcp_timer_needed>
      }
      break;
 8015440:	e026      	b.n	8015490 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8015442:	6878      	ldr	r0, [r7, #4]
 8015444:	f000 f93c 	bl	80156c0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015448:	4b17      	ldr	r3, [pc, #92]	; (80154a8 <tcp_process+0x7d0>)
 801544a:	781b      	ldrb	r3, [r3, #0]
 801544c:	f003 0310 	and.w	r3, r3, #16
 8015450:	2b00      	cmp	r3, #0
 8015452:	d01f      	beq.n	8015494 <tcp_process+0x7bc>
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015458:	4b14      	ldr	r3, [pc, #80]	; (80154ac <tcp_process+0x7d4>)
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	429a      	cmp	r2, r3
 801545e:	d119      	bne.n	8015494 <tcp_process+0x7bc>
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015464:	2b00      	cmp	r3, #0
 8015466:	d115      	bne.n	8015494 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8015468:	4b11      	ldr	r3, [pc, #68]	; (80154b0 <tcp_process+0x7d8>)
 801546a:	781b      	ldrb	r3, [r3, #0]
 801546c:	f043 0310 	orr.w	r3, r3, #16
 8015470:	b2da      	uxtb	r2, r3
 8015472:	4b0f      	ldr	r3, [pc, #60]	; (80154b0 <tcp_process+0x7d8>)
 8015474:	701a      	strb	r2, [r3, #0]
      }
      break;
 8015476:	e00d      	b.n	8015494 <tcp_process+0x7bc>
    default:
      break;
 8015478:	bf00      	nop
 801547a:	e00c      	b.n	8015496 <tcp_process+0x7be>
      break;
 801547c:	bf00      	nop
 801547e:	e00a      	b.n	8015496 <tcp_process+0x7be>
      break;
 8015480:	bf00      	nop
 8015482:	e008      	b.n	8015496 <tcp_process+0x7be>
      break;
 8015484:	bf00      	nop
 8015486:	e006      	b.n	8015496 <tcp_process+0x7be>
      break;
 8015488:	bf00      	nop
 801548a:	e004      	b.n	8015496 <tcp_process+0x7be>
      break;
 801548c:	bf00      	nop
 801548e:	e002      	b.n	8015496 <tcp_process+0x7be>
      break;
 8015490:	bf00      	nop
 8015492:	e000      	b.n	8015496 <tcp_process+0x7be>
      break;
 8015494:	bf00      	nop
  }
  return ERR_OK;
 8015496:	2300      	movs	r3, #0
}
 8015498:	4618      	mov	r0, r3
 801549a:	3724      	adds	r7, #36	; 0x24
 801549c:	46bd      	mov	sp, r7
 801549e:	bd90      	pop	{r4, r7, pc}
 80154a0:	200110a0 	.word	0x200110a0
 80154a4:	2001109c 	.word	0x2001109c
 80154a8:	200110d0 	.word	0x200110d0
 80154ac:	200110c8 	.word	0x200110c8
 80154b0:	200110d1 	.word	0x200110d1
 80154b4:	20011098 	.word	0x20011098

080154b8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80154b8:	b590      	push	{r4, r7, lr}
 80154ba:	b085      	sub	sp, #20
 80154bc:	af00      	add	r7, sp, #0
 80154be:	6078      	str	r0, [r7, #4]
 80154c0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d106      	bne.n	80154d6 <tcp_oos_insert_segment+0x1e>
 80154c8:	4b3b      	ldr	r3, [pc, #236]	; (80155b8 <tcp_oos_insert_segment+0x100>)
 80154ca:	f240 421f 	movw	r2, #1055	; 0x41f
 80154ce:	493b      	ldr	r1, [pc, #236]	; (80155bc <tcp_oos_insert_segment+0x104>)
 80154d0:	483b      	ldr	r0, [pc, #236]	; (80155c0 <tcp_oos_insert_segment+0x108>)
 80154d2:	f006 f997 	bl	801b804 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	68db      	ldr	r3, [r3, #12]
 80154da:	899b      	ldrh	r3, [r3, #12]
 80154dc:	b29b      	uxth	r3, r3
 80154de:	4618      	mov	r0, r3
 80154e0:	f7fb f9d6 	bl	8010890 <lwip_htons>
 80154e4:	4603      	mov	r3, r0
 80154e6:	b2db      	uxtb	r3, r3
 80154e8:	f003 0301 	and.w	r3, r3, #1
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d028      	beq.n	8015542 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80154f0:	6838      	ldr	r0, [r7, #0]
 80154f2:	f7fe f995 	bl	8013820 <tcp_segs_free>
    next = NULL;
 80154f6:	2300      	movs	r3, #0
 80154f8:	603b      	str	r3, [r7, #0]
 80154fa:	e056      	b.n	80155aa <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80154fc:	683b      	ldr	r3, [r7, #0]
 80154fe:	68db      	ldr	r3, [r3, #12]
 8015500:	899b      	ldrh	r3, [r3, #12]
 8015502:	b29b      	uxth	r3, r3
 8015504:	4618      	mov	r0, r3
 8015506:	f7fb f9c3 	bl	8010890 <lwip_htons>
 801550a:	4603      	mov	r3, r0
 801550c:	b2db      	uxtb	r3, r3
 801550e:	f003 0301 	and.w	r3, r3, #1
 8015512:	2b00      	cmp	r3, #0
 8015514:	d00d      	beq.n	8015532 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	68db      	ldr	r3, [r3, #12]
 801551a:	899b      	ldrh	r3, [r3, #12]
 801551c:	b29c      	uxth	r4, r3
 801551e:	2001      	movs	r0, #1
 8015520:	f7fb f9b6 	bl	8010890 <lwip_htons>
 8015524:	4603      	mov	r3, r0
 8015526:	461a      	mov	r2, r3
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	68db      	ldr	r3, [r3, #12]
 801552c:	4322      	orrs	r2, r4
 801552e:	b292      	uxth	r2, r2
 8015530:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8015532:	683b      	ldr	r3, [r7, #0]
 8015534:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8015536:	683b      	ldr	r3, [r7, #0]
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801553c:	68f8      	ldr	r0, [r7, #12]
 801553e:	f7fe f984 	bl	801384a <tcp_seg_free>
    while (next &&
 8015542:	683b      	ldr	r3, [r7, #0]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d00e      	beq.n	8015566 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	891b      	ldrh	r3, [r3, #8]
 801554c:	461a      	mov	r2, r3
 801554e:	4b1d      	ldr	r3, [pc, #116]	; (80155c4 <tcp_oos_insert_segment+0x10c>)
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	441a      	add	r2, r3
 8015554:	683b      	ldr	r3, [r7, #0]
 8015556:	68db      	ldr	r3, [r3, #12]
 8015558:	685b      	ldr	r3, [r3, #4]
 801555a:	6839      	ldr	r1, [r7, #0]
 801555c:	8909      	ldrh	r1, [r1, #8]
 801555e:	440b      	add	r3, r1
 8015560:	1ad3      	subs	r3, r2, r3
    while (next &&
 8015562:	2b00      	cmp	r3, #0
 8015564:	daca      	bge.n	80154fc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8015566:	683b      	ldr	r3, [r7, #0]
 8015568:	2b00      	cmp	r3, #0
 801556a:	d01e      	beq.n	80155aa <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	891b      	ldrh	r3, [r3, #8]
 8015570:	461a      	mov	r2, r3
 8015572:	4b14      	ldr	r3, [pc, #80]	; (80155c4 <tcp_oos_insert_segment+0x10c>)
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	441a      	add	r2, r3
 8015578:	683b      	ldr	r3, [r7, #0]
 801557a:	68db      	ldr	r3, [r3, #12]
 801557c:	685b      	ldr	r3, [r3, #4]
 801557e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8015580:	2b00      	cmp	r3, #0
 8015582:	dd12      	ble.n	80155aa <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8015584:	683b      	ldr	r3, [r7, #0]
 8015586:	68db      	ldr	r3, [r3, #12]
 8015588:	685b      	ldr	r3, [r3, #4]
 801558a:	b29a      	uxth	r2, r3
 801558c:	4b0d      	ldr	r3, [pc, #52]	; (80155c4 <tcp_oos_insert_segment+0x10c>)
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	b29b      	uxth	r3, r3
 8015592:	1ad3      	subs	r3, r2, r3
 8015594:	b29a      	uxth	r2, r3
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	685a      	ldr	r2, [r3, #4]
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	891b      	ldrh	r3, [r3, #8]
 80155a2:	4619      	mov	r1, r3
 80155a4:	4610      	mov	r0, r2
 80155a6:	f7fc fbdf 	bl	8011d68 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	683a      	ldr	r2, [r7, #0]
 80155ae:	601a      	str	r2, [r3, #0]
}
 80155b0:	bf00      	nop
 80155b2:	3714      	adds	r7, #20
 80155b4:	46bd      	mov	sp, r7
 80155b6:	bd90      	pop	{r4, r7, pc}
 80155b8:	0801ec70 	.word	0x0801ec70
 80155bc:	0801ef30 	.word	0x0801ef30
 80155c0:	0801ecbc 	.word	0x0801ecbc
 80155c4:	200110c4 	.word	0x200110c4

080155c8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80155c8:	b5b0      	push	{r4, r5, r7, lr}
 80155ca:	b086      	sub	sp, #24
 80155cc:	af00      	add	r7, sp, #0
 80155ce:	60f8      	str	r0, [r7, #12]
 80155d0:	60b9      	str	r1, [r7, #8]
 80155d2:	607a      	str	r2, [r7, #4]
 80155d4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80155d6:	e03e      	b.n	8015656 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80155d8:	68bb      	ldr	r3, [r7, #8]
 80155da:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80155dc:	68bb      	ldr	r3, [r7, #8]
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80155e2:	697b      	ldr	r3, [r7, #20]
 80155e4:	685b      	ldr	r3, [r3, #4]
 80155e6:	4618      	mov	r0, r3
 80155e8:	f7fc fe04 	bl	80121f4 <pbuf_clen>
 80155ec:	4603      	mov	r3, r0
 80155ee:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80155f6:	8a7a      	ldrh	r2, [r7, #18]
 80155f8:	429a      	cmp	r2, r3
 80155fa:	d906      	bls.n	801560a <tcp_free_acked_segments+0x42>
 80155fc:	4b2a      	ldr	r3, [pc, #168]	; (80156a8 <tcp_free_acked_segments+0xe0>)
 80155fe:	f240 4257 	movw	r2, #1111	; 0x457
 8015602:	492a      	ldr	r1, [pc, #168]	; (80156ac <tcp_free_acked_segments+0xe4>)
 8015604:	482a      	ldr	r0, [pc, #168]	; (80156b0 <tcp_free_acked_segments+0xe8>)
 8015606:	f006 f8fd 	bl	801b804 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8015610:	8a7b      	ldrh	r3, [r7, #18]
 8015612:	1ad3      	subs	r3, r2, r3
 8015614:	b29a      	uxth	r2, r3
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801561c:	697b      	ldr	r3, [r7, #20]
 801561e:	891a      	ldrh	r2, [r3, #8]
 8015620:	4b24      	ldr	r3, [pc, #144]	; (80156b4 <tcp_free_acked_segments+0xec>)
 8015622:	881b      	ldrh	r3, [r3, #0]
 8015624:	4413      	add	r3, r2
 8015626:	b29a      	uxth	r2, r3
 8015628:	4b22      	ldr	r3, [pc, #136]	; (80156b4 <tcp_free_acked_segments+0xec>)
 801562a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801562c:	6978      	ldr	r0, [r7, #20]
 801562e:	f7fe f90c 	bl	801384a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8015632:	68fb      	ldr	r3, [r7, #12]
 8015634:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015638:	2b00      	cmp	r3, #0
 801563a:	d00c      	beq.n	8015656 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801563c:	68bb      	ldr	r3, [r7, #8]
 801563e:	2b00      	cmp	r3, #0
 8015640:	d109      	bne.n	8015656 <tcp_free_acked_segments+0x8e>
 8015642:	683b      	ldr	r3, [r7, #0]
 8015644:	2b00      	cmp	r3, #0
 8015646:	d106      	bne.n	8015656 <tcp_free_acked_segments+0x8e>
 8015648:	4b17      	ldr	r3, [pc, #92]	; (80156a8 <tcp_free_acked_segments+0xe0>)
 801564a:	f240 4261 	movw	r2, #1121	; 0x461
 801564e:	491a      	ldr	r1, [pc, #104]	; (80156b8 <tcp_free_acked_segments+0xf0>)
 8015650:	4817      	ldr	r0, [pc, #92]	; (80156b0 <tcp_free_acked_segments+0xe8>)
 8015652:	f006 f8d7 	bl	801b804 <iprintf>
  while (seg_list != NULL &&
 8015656:	68bb      	ldr	r3, [r7, #8]
 8015658:	2b00      	cmp	r3, #0
 801565a:	d020      	beq.n	801569e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801565c:	68bb      	ldr	r3, [r7, #8]
 801565e:	68db      	ldr	r3, [r3, #12]
 8015660:	685b      	ldr	r3, [r3, #4]
 8015662:	4618      	mov	r0, r3
 8015664:	f7fb f929 	bl	80108ba <lwip_htonl>
 8015668:	4604      	mov	r4, r0
 801566a:	68bb      	ldr	r3, [r7, #8]
 801566c:	891b      	ldrh	r3, [r3, #8]
 801566e:	461d      	mov	r5, r3
 8015670:	68bb      	ldr	r3, [r7, #8]
 8015672:	68db      	ldr	r3, [r3, #12]
 8015674:	899b      	ldrh	r3, [r3, #12]
 8015676:	b29b      	uxth	r3, r3
 8015678:	4618      	mov	r0, r3
 801567a:	f7fb f909 	bl	8010890 <lwip_htons>
 801567e:	4603      	mov	r3, r0
 8015680:	b2db      	uxtb	r3, r3
 8015682:	f003 0303 	and.w	r3, r3, #3
 8015686:	2b00      	cmp	r3, #0
 8015688:	d001      	beq.n	801568e <tcp_free_acked_segments+0xc6>
 801568a:	2301      	movs	r3, #1
 801568c:	e000      	b.n	8015690 <tcp_free_acked_segments+0xc8>
 801568e:	2300      	movs	r3, #0
 8015690:	442b      	add	r3, r5
 8015692:	18e2      	adds	r2, r4, r3
 8015694:	4b09      	ldr	r3, [pc, #36]	; (80156bc <tcp_free_acked_segments+0xf4>)
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801569a:	2b00      	cmp	r3, #0
 801569c:	dd9c      	ble.n	80155d8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801569e:	68bb      	ldr	r3, [r7, #8]
}
 80156a0:	4618      	mov	r0, r3
 80156a2:	3718      	adds	r7, #24
 80156a4:	46bd      	mov	sp, r7
 80156a6:	bdb0      	pop	{r4, r5, r7, pc}
 80156a8:	0801ec70 	.word	0x0801ec70
 80156ac:	0801ef58 	.word	0x0801ef58
 80156b0:	0801ecbc 	.word	0x0801ecbc
 80156b4:	200110cc 	.word	0x200110cc
 80156b8:	0801ef80 	.word	0x0801ef80
 80156bc:	200110c8 	.word	0x200110c8

080156c0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80156c0:	b5b0      	push	{r4, r5, r7, lr}
 80156c2:	b094      	sub	sp, #80	; 0x50
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80156c8:	2300      	movs	r3, #0
 80156ca:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d106      	bne.n	80156e0 <tcp_receive+0x20>
 80156d2:	4b91      	ldr	r3, [pc, #580]	; (8015918 <tcp_receive+0x258>)
 80156d4:	f240 427b 	movw	r2, #1147	; 0x47b
 80156d8:	4990      	ldr	r1, [pc, #576]	; (801591c <tcp_receive+0x25c>)
 80156da:	4891      	ldr	r0, [pc, #580]	; (8015920 <tcp_receive+0x260>)
 80156dc:	f006 f892 	bl	801b804 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	7d1b      	ldrb	r3, [r3, #20]
 80156e4:	2b03      	cmp	r3, #3
 80156e6:	d806      	bhi.n	80156f6 <tcp_receive+0x36>
 80156e8:	4b8b      	ldr	r3, [pc, #556]	; (8015918 <tcp_receive+0x258>)
 80156ea:	f240 427c 	movw	r2, #1148	; 0x47c
 80156ee:	498d      	ldr	r1, [pc, #564]	; (8015924 <tcp_receive+0x264>)
 80156f0:	488b      	ldr	r0, [pc, #556]	; (8015920 <tcp_receive+0x260>)
 80156f2:	f006 f887 	bl	801b804 <iprintf>

  if (flags & TCP_ACK) {
 80156f6:	4b8c      	ldr	r3, [pc, #560]	; (8015928 <tcp_receive+0x268>)
 80156f8:	781b      	ldrb	r3, [r3, #0]
 80156fa:	f003 0310 	and.w	r3, r3, #16
 80156fe:	2b00      	cmp	r3, #0
 8015700:	f000 8264 	beq.w	8015bcc <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801570a:	461a      	mov	r2, r3
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015710:	4413      	add	r3, r2
 8015712:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8015718:	4b84      	ldr	r3, [pc, #528]	; (801592c <tcp_receive+0x26c>)
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	1ad3      	subs	r3, r2, r3
 801571e:	2b00      	cmp	r3, #0
 8015720:	db1b      	blt.n	801575a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8015726:	4b81      	ldr	r3, [pc, #516]	; (801592c <tcp_receive+0x26c>)
 8015728:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801572a:	429a      	cmp	r2, r3
 801572c:	d106      	bne.n	801573c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015732:	4b7f      	ldr	r3, [pc, #508]	; (8015930 <tcp_receive+0x270>)
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	1ad3      	subs	r3, r2, r3
 8015738:	2b00      	cmp	r3, #0
 801573a:	db0e      	blt.n	801575a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015740:	4b7b      	ldr	r3, [pc, #492]	; (8015930 <tcp_receive+0x270>)
 8015742:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015744:	429a      	cmp	r2, r3
 8015746:	d125      	bne.n	8015794 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015748:	4b7a      	ldr	r3, [pc, #488]	; (8015934 <tcp_receive+0x274>)
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	89db      	ldrh	r3, [r3, #14]
 801574e:	b29a      	uxth	r2, r3
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015756:	429a      	cmp	r2, r3
 8015758:	d91c      	bls.n	8015794 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801575a:	4b76      	ldr	r3, [pc, #472]	; (8015934 <tcp_receive+0x274>)
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	89db      	ldrh	r3, [r3, #14]
 8015760:	b29a      	uxth	r2, r3
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015774:	429a      	cmp	r2, r3
 8015776:	d205      	bcs.n	8015784 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8015784:	4b69      	ldr	r3, [pc, #420]	; (801592c <tcp_receive+0x26c>)
 8015786:	681a      	ldr	r2, [r3, #0]
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801578c:	4b68      	ldr	r3, [pc, #416]	; (8015930 <tcp_receive+0x270>)
 801578e:	681a      	ldr	r2, [r3, #0]
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8015794:	4b66      	ldr	r3, [pc, #408]	; (8015930 <tcp_receive+0x270>)
 8015796:	681a      	ldr	r2, [r3, #0]
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801579c:	1ad3      	subs	r3, r2, r3
 801579e:	2b00      	cmp	r3, #0
 80157a0:	dc58      	bgt.n	8015854 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80157a2:	4b65      	ldr	r3, [pc, #404]	; (8015938 <tcp_receive+0x278>)
 80157a4:	881b      	ldrh	r3, [r3, #0]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d14b      	bne.n	8015842 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80157ae:	687a      	ldr	r2, [r7, #4]
 80157b0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80157b4:	4413      	add	r3, r2
 80157b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80157b8:	429a      	cmp	r2, r3
 80157ba:	d142      	bne.n	8015842 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	db3d      	blt.n	8015842 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80157ca:	4b59      	ldr	r3, [pc, #356]	; (8015930 <tcp_receive+0x270>)
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	429a      	cmp	r2, r3
 80157d0:	d137      	bne.n	8015842 <tcp_receive+0x182>
              found_dupack = 1;
 80157d2:	2301      	movs	r3, #1
 80157d4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80157dc:	2bff      	cmp	r3, #255	; 0xff
 80157de:	d007      	beq.n	80157f0 <tcp_receive+0x130>
                ++pcb->dupacks;
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80157e6:	3301      	adds	r3, #1
 80157e8:	b2da      	uxtb	r2, r3
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80157f6:	2b03      	cmp	r3, #3
 80157f8:	d91b      	bls.n	8015832 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015804:	4413      	add	r3, r2
 8015806:	b29a      	uxth	r2, r3
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801580e:	429a      	cmp	r2, r3
 8015810:	d30a      	bcc.n	8015828 <tcp_receive+0x168>
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801581c:	4413      	add	r3, r2
 801581e:	b29a      	uxth	r2, r3
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015826:	e004      	b.n	8015832 <tcp_receive+0x172>
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801582e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015838:	2b02      	cmp	r3, #2
 801583a:	d902      	bls.n	8015842 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801583c:	6878      	ldr	r0, [r7, #4]
 801583e:	f002 fb43 	bl	8017ec8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8015842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015844:	2b00      	cmp	r3, #0
 8015846:	f040 8161 	bne.w	8015b0c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	2200      	movs	r2, #0
 801584e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015852:	e15b      	b.n	8015b0c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015854:	4b36      	ldr	r3, [pc, #216]	; (8015930 <tcp_receive+0x270>)
 8015856:	681a      	ldr	r2, [r3, #0]
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801585c:	1ad3      	subs	r3, r2, r3
 801585e:	3b01      	subs	r3, #1
 8015860:	2b00      	cmp	r3, #0
 8015862:	f2c0 814e 	blt.w	8015b02 <tcp_receive+0x442>
 8015866:	4b32      	ldr	r3, [pc, #200]	; (8015930 <tcp_receive+0x270>)
 8015868:	681a      	ldr	r2, [r3, #0]
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801586e:	1ad3      	subs	r3, r2, r3
 8015870:	2b00      	cmp	r3, #0
 8015872:	f300 8146 	bgt.w	8015b02 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	8b5b      	ldrh	r3, [r3, #26]
 801587a:	f003 0304 	and.w	r3, r3, #4
 801587e:	2b00      	cmp	r3, #0
 8015880:	d010      	beq.n	80158a4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	8b5b      	ldrh	r3, [r3, #26]
 8015886:	f023 0304 	bic.w	r3, r3, #4
 801588a:	b29a      	uxth	r2, r3
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	2200      	movs	r2, #0
 80158a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	2200      	movs	r2, #0
 80158a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80158b2:	10db      	asrs	r3, r3, #3
 80158b4:	b21b      	sxth	r3, r3
 80158b6:	b29a      	uxth	r2, r3
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80158be:	b29b      	uxth	r3, r3
 80158c0:	4413      	add	r3, r2
 80158c2:	b29b      	uxth	r3, r3
 80158c4:	b21a      	sxth	r2, r3
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80158cc:	4b18      	ldr	r3, [pc, #96]	; (8015930 <tcp_receive+0x270>)
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	b29a      	uxth	r2, r3
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80158d6:	b29b      	uxth	r3, r3
 80158d8:	1ad3      	subs	r3, r2, r3
 80158da:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	2200      	movs	r2, #0
 80158e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80158e4:	4b12      	ldr	r3, [pc, #72]	; (8015930 <tcp_receive+0x270>)
 80158e6:	681a      	ldr	r2, [r3, #0]
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	7d1b      	ldrb	r3, [r3, #20]
 80158f0:	2b03      	cmp	r3, #3
 80158f2:	f240 8097 	bls.w	8015a24 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015902:	429a      	cmp	r2, r3
 8015904:	d245      	bcs.n	8015992 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	8b5b      	ldrh	r3, [r3, #26]
 801590a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801590e:	2b00      	cmp	r3, #0
 8015910:	d014      	beq.n	801593c <tcp_receive+0x27c>
 8015912:	2301      	movs	r3, #1
 8015914:	e013      	b.n	801593e <tcp_receive+0x27e>
 8015916:	bf00      	nop
 8015918:	0801ec70 	.word	0x0801ec70
 801591c:	0801efa0 	.word	0x0801efa0
 8015920:	0801ecbc 	.word	0x0801ecbc
 8015924:	0801efbc 	.word	0x0801efbc
 8015928:	200110d0 	.word	0x200110d0
 801592c:	200110c4 	.word	0x200110c4
 8015930:	200110c8 	.word	0x200110c8
 8015934:	200110b4 	.word	0x200110b4
 8015938:	200110ce 	.word	0x200110ce
 801593c:	2302      	movs	r3, #2
 801593e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8015942:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8015946:	b29a      	uxth	r2, r3
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801594c:	fb12 f303 	smulbb	r3, r2, r3
 8015950:	b29b      	uxth	r3, r3
 8015952:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015954:	4293      	cmp	r3, r2
 8015956:	bf28      	it	cs
 8015958:	4613      	movcs	r3, r2
 801595a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015962:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015964:	4413      	add	r3, r2
 8015966:	b29a      	uxth	r2, r3
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801596e:	429a      	cmp	r2, r3
 8015970:	d309      	bcc.n	8015986 <tcp_receive+0x2c6>
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015978:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801597a:	4413      	add	r3, r2
 801597c:	b29a      	uxth	r2, r3
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015984:	e04e      	b.n	8015a24 <tcp_receive+0x364>
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801598c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015990:	e048      	b.n	8015a24 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015998:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801599a:	4413      	add	r3, r2
 801599c:	b29a      	uxth	r2, r3
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80159a4:	429a      	cmp	r2, r3
 80159a6:	d309      	bcc.n	80159bc <tcp_receive+0x2fc>
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80159ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80159b0:	4413      	add	r3, r2
 80159b2:	b29a      	uxth	r2, r3
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80159ba:	e004      	b.n	80159c6 <tcp_receive+0x306>
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80159c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80159d2:	429a      	cmp	r2, r3
 80159d4:	d326      	bcc.n	8015a24 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80159e2:	1ad3      	subs	r3, r2, r3
 80159e4:	b29a      	uxth	r2, r3
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80159f6:	4413      	add	r3, r2
 80159f8:	b29a      	uxth	r2, r3
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015a00:	429a      	cmp	r2, r3
 8015a02:	d30a      	bcc.n	8015a1a <tcp_receive+0x35a>
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015a0e:	4413      	add	r3, r2
 8015a10:	b29a      	uxth	r2, r3
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015a18:	e004      	b.n	8015a24 <tcp_receive+0x364>
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015a20:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a2c:	4a98      	ldr	r2, [pc, #608]	; (8015c90 <tcp_receive+0x5d0>)
 8015a2e:	6878      	ldr	r0, [r7, #4]
 8015a30:	f7ff fdca 	bl	80155c8 <tcp_free_acked_segments>
 8015a34:	4602      	mov	r2, r0
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015a42:	4a94      	ldr	r2, [pc, #592]	; (8015c94 <tcp_receive+0x5d4>)
 8015a44:	6878      	ldr	r0, [r7, #4]
 8015a46:	f7ff fdbf 	bl	80155c8 <tcp_free_acked_segments>
 8015a4a:	4602      	mov	r2, r0
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d104      	bne.n	8015a62 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015a5e:	861a      	strh	r2, [r3, #48]	; 0x30
 8015a60:	e002      	b.n	8015a68 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	2200      	movs	r2, #0
 8015a66:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	2200      	movs	r2, #0
 8015a6c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d103      	bne.n	8015a7e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	2200      	movs	r2, #0
 8015a7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8015a84:	4b84      	ldr	r3, [pc, #528]	; (8015c98 <tcp_receive+0x5d8>)
 8015a86:	881b      	ldrh	r3, [r3, #0]
 8015a88:	4413      	add	r3, r2
 8015a8a:	b29a      	uxth	r2, r3
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	8b5b      	ldrh	r3, [r3, #26]
 8015a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d035      	beq.n	8015b0a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d118      	bne.n	8015ad8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d00c      	beq.n	8015ac8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ab6:	68db      	ldr	r3, [r3, #12]
 8015ab8:	685b      	ldr	r3, [r3, #4]
 8015aba:	4618      	mov	r0, r3
 8015abc:	f7fa fefd 	bl	80108ba <lwip_htonl>
 8015ac0:	4603      	mov	r3, r0
 8015ac2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	dc20      	bgt.n	8015b0a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	8b5b      	ldrh	r3, [r3, #26]
 8015acc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015ad0:	b29a      	uxth	r2, r3
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015ad6:	e018      	b.n	8015b0a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ae0:	68db      	ldr	r3, [r3, #12]
 8015ae2:	685b      	ldr	r3, [r3, #4]
 8015ae4:	4618      	mov	r0, r3
 8015ae6:	f7fa fee8 	bl	80108ba <lwip_htonl>
 8015aea:	4603      	mov	r3, r0
 8015aec:	1ae3      	subs	r3, r4, r3
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	dc0b      	bgt.n	8015b0a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	8b5b      	ldrh	r3, [r3, #26]
 8015af6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015afa:	b29a      	uxth	r2, r3
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015b00:	e003      	b.n	8015b0a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8015b02:	6878      	ldr	r0, [r7, #4]
 8015b04:	f002 fbce 	bl	80182a4 <tcp_send_empty_ack>
 8015b08:	e000      	b.n	8015b0c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015b0a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d05b      	beq.n	8015bcc <tcp_receive+0x50c>
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015b18:	4b60      	ldr	r3, [pc, #384]	; (8015c9c <tcp_receive+0x5dc>)
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	1ad3      	subs	r3, r2, r3
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	da54      	bge.n	8015bcc <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8015b22:	4b5f      	ldr	r3, [pc, #380]	; (8015ca0 <tcp_receive+0x5e0>)
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	b29a      	uxth	r2, r3
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015b2c:	b29b      	uxth	r3, r3
 8015b2e:	1ad3      	subs	r3, r2, r3
 8015b30:	b29b      	uxth	r3, r3
 8015b32:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8015b36:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015b40:	10db      	asrs	r3, r3, #3
 8015b42:	b21b      	sxth	r3, r3
 8015b44:	b29b      	uxth	r3, r3
 8015b46:	1ad3      	subs	r3, r2, r3
 8015b48:	b29b      	uxth	r3, r3
 8015b4a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015b54:	b29a      	uxth	r2, r3
 8015b56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015b5a:	4413      	add	r3, r2
 8015b5c:	b29b      	uxth	r3, r3
 8015b5e:	b21a      	sxth	r2, r3
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8015b64:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	da05      	bge.n	8015b78 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8015b6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015b70:	425b      	negs	r3, r3
 8015b72:	b29b      	uxth	r3, r3
 8015b74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8015b78:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015b82:	109b      	asrs	r3, r3, #2
 8015b84:	b21b      	sxth	r3, r3
 8015b86:	b29b      	uxth	r3, r3
 8015b88:	1ad3      	subs	r3, r2, r3
 8015b8a:	b29b      	uxth	r3, r3
 8015b8c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015b96:	b29a      	uxth	r2, r3
 8015b98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015b9c:	4413      	add	r3, r2
 8015b9e:	b29b      	uxth	r3, r3
 8015ba0:	b21a      	sxth	r2, r3
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015bac:	10db      	asrs	r3, r3, #3
 8015bae:	b21b      	sxth	r3, r3
 8015bb0:	b29a      	uxth	r2, r3
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015bb8:	b29b      	uxth	r3, r3
 8015bba:	4413      	add	r3, r2
 8015bbc:	b29b      	uxth	r3, r3
 8015bbe:	b21a      	sxth	r2, r3
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	2200      	movs	r2, #0
 8015bca:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8015bcc:	4b35      	ldr	r3, [pc, #212]	; (8015ca4 <tcp_receive+0x5e4>)
 8015bce:	881b      	ldrh	r3, [r3, #0]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	f000 84e2 	beq.w	801659a <tcp_receive+0xeda>
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	7d1b      	ldrb	r3, [r3, #20]
 8015bda:	2b06      	cmp	r3, #6
 8015bdc:	f200 84dd 	bhi.w	801659a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015be4:	4b30      	ldr	r3, [pc, #192]	; (8015ca8 <tcp_receive+0x5e8>)
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	1ad3      	subs	r3, r2, r3
 8015bea:	3b01      	subs	r3, #1
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	f2c0 808f 	blt.w	8015d10 <tcp_receive+0x650>
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015bf6:	4b2b      	ldr	r3, [pc, #172]	; (8015ca4 <tcp_receive+0x5e4>)
 8015bf8:	881b      	ldrh	r3, [r3, #0]
 8015bfa:	4619      	mov	r1, r3
 8015bfc:	4b2a      	ldr	r3, [pc, #168]	; (8015ca8 <tcp_receive+0x5e8>)
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	440b      	add	r3, r1
 8015c02:	1ad3      	subs	r3, r2, r3
 8015c04:	3301      	adds	r3, #1
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	f300 8082 	bgt.w	8015d10 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015c0c:	4b27      	ldr	r3, [pc, #156]	; (8015cac <tcp_receive+0x5ec>)
 8015c0e:	685b      	ldr	r3, [r3, #4]
 8015c10:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015c16:	4b24      	ldr	r3, [pc, #144]	; (8015ca8 <tcp_receive+0x5e8>)
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	1ad3      	subs	r3, r2, r3
 8015c1c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8015c1e:	4b23      	ldr	r3, [pc, #140]	; (8015cac <tcp_receive+0x5ec>)
 8015c20:	685b      	ldr	r3, [r3, #4]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d106      	bne.n	8015c34 <tcp_receive+0x574>
 8015c26:	4b22      	ldr	r3, [pc, #136]	; (8015cb0 <tcp_receive+0x5f0>)
 8015c28:	f240 5294 	movw	r2, #1428	; 0x594
 8015c2c:	4921      	ldr	r1, [pc, #132]	; (8015cb4 <tcp_receive+0x5f4>)
 8015c2e:	4822      	ldr	r0, [pc, #136]	; (8015cb8 <tcp_receive+0x5f8>)
 8015c30:	f005 fde8 	bl	801b804 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8015c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c36:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015c3a:	4293      	cmp	r3, r2
 8015c3c:	d906      	bls.n	8015c4c <tcp_receive+0x58c>
 8015c3e:	4b1c      	ldr	r3, [pc, #112]	; (8015cb0 <tcp_receive+0x5f0>)
 8015c40:	f240 5295 	movw	r2, #1429	; 0x595
 8015c44:	491d      	ldr	r1, [pc, #116]	; (8015cbc <tcp_receive+0x5fc>)
 8015c46:	481c      	ldr	r0, [pc, #112]	; (8015cb8 <tcp_receive+0x5f8>)
 8015c48:	f005 fddc 	bl	801b804 <iprintf>
      off = (u16_t)off32;
 8015c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c4e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8015c52:	4b16      	ldr	r3, [pc, #88]	; (8015cac <tcp_receive+0x5ec>)
 8015c54:	685b      	ldr	r3, [r3, #4]
 8015c56:	891b      	ldrh	r3, [r3, #8]
 8015c58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015c5c:	429a      	cmp	r2, r3
 8015c5e:	d906      	bls.n	8015c6e <tcp_receive+0x5ae>
 8015c60:	4b13      	ldr	r3, [pc, #76]	; (8015cb0 <tcp_receive+0x5f0>)
 8015c62:	f240 5297 	movw	r2, #1431	; 0x597
 8015c66:	4916      	ldr	r1, [pc, #88]	; (8015cc0 <tcp_receive+0x600>)
 8015c68:	4813      	ldr	r0, [pc, #76]	; (8015cb8 <tcp_receive+0x5f8>)
 8015c6a:	f005 fdcb 	bl	801b804 <iprintf>
      inseg.len -= off;
 8015c6e:	4b0f      	ldr	r3, [pc, #60]	; (8015cac <tcp_receive+0x5ec>)
 8015c70:	891a      	ldrh	r2, [r3, #8]
 8015c72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015c76:	1ad3      	subs	r3, r2, r3
 8015c78:	b29a      	uxth	r2, r3
 8015c7a:	4b0c      	ldr	r3, [pc, #48]	; (8015cac <tcp_receive+0x5ec>)
 8015c7c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8015c7e:	4b0b      	ldr	r3, [pc, #44]	; (8015cac <tcp_receive+0x5ec>)
 8015c80:	685b      	ldr	r3, [r3, #4]
 8015c82:	891a      	ldrh	r2, [r3, #8]
 8015c84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015c88:	1ad3      	subs	r3, r2, r3
 8015c8a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8015c8c:	e02a      	b.n	8015ce4 <tcp_receive+0x624>
 8015c8e:	bf00      	nop
 8015c90:	0801efd8 	.word	0x0801efd8
 8015c94:	0801efe0 	.word	0x0801efe0
 8015c98:	200110cc 	.word	0x200110cc
 8015c9c:	200110c8 	.word	0x200110c8
 8015ca0:	2001108c 	.word	0x2001108c
 8015ca4:	200110ce 	.word	0x200110ce
 8015ca8:	200110c4 	.word	0x200110c4
 8015cac:	200110a4 	.word	0x200110a4
 8015cb0:	0801ec70 	.word	0x0801ec70
 8015cb4:	0801efe8 	.word	0x0801efe8
 8015cb8:	0801ecbc 	.word	0x0801ecbc
 8015cbc:	0801eff8 	.word	0x0801eff8
 8015cc0:	0801f008 	.word	0x0801f008
        off -= p->len;
 8015cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015cc6:	895b      	ldrh	r3, [r3, #10]
 8015cc8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015ccc:	1ad3      	subs	r3, r2, r3
 8015cce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8015cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015cd4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015cd6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015cda:	2200      	movs	r2, #0
 8015cdc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8015cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ce0:	681b      	ldr	r3, [r3, #0]
 8015ce2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8015ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ce6:	895b      	ldrh	r3, [r3, #10]
 8015ce8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015cec:	429a      	cmp	r2, r3
 8015cee:	d8e9      	bhi.n	8015cc4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8015cf0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015cf4:	4619      	mov	r1, r3
 8015cf6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015cf8:	f7fc f936 	bl	8011f68 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d00:	4a91      	ldr	r2, [pc, #580]	; (8015f48 <tcp_receive+0x888>)
 8015d02:	6013      	str	r3, [r2, #0]
 8015d04:	4b91      	ldr	r3, [pc, #580]	; (8015f4c <tcp_receive+0x88c>)
 8015d06:	68db      	ldr	r3, [r3, #12]
 8015d08:	4a8f      	ldr	r2, [pc, #572]	; (8015f48 <tcp_receive+0x888>)
 8015d0a:	6812      	ldr	r2, [r2, #0]
 8015d0c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015d0e:	e00d      	b.n	8015d2c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015d10:	4b8d      	ldr	r3, [pc, #564]	; (8015f48 <tcp_receive+0x888>)
 8015d12:	681a      	ldr	r2, [r3, #0]
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d18:	1ad3      	subs	r3, r2, r3
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	da06      	bge.n	8015d2c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	8b5b      	ldrh	r3, [r3, #26]
 8015d22:	f043 0302 	orr.w	r3, r3, #2
 8015d26:	b29a      	uxth	r2, r3
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015d2c:	4b86      	ldr	r3, [pc, #536]	; (8015f48 <tcp_receive+0x888>)
 8015d2e:	681a      	ldr	r2, [r3, #0]
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d34:	1ad3      	subs	r3, r2, r3
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	f2c0 842a 	blt.w	8016590 <tcp_receive+0xed0>
 8015d3c:	4b82      	ldr	r3, [pc, #520]	; (8015f48 <tcp_receive+0x888>)
 8015d3e:	681a      	ldr	r2, [r3, #0]
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d44:	6879      	ldr	r1, [r7, #4]
 8015d46:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015d48:	440b      	add	r3, r1
 8015d4a:	1ad3      	subs	r3, r2, r3
 8015d4c:	3301      	adds	r3, #1
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	f300 841e 	bgt.w	8016590 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015d58:	4b7b      	ldr	r3, [pc, #492]	; (8015f48 <tcp_receive+0x888>)
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	429a      	cmp	r2, r3
 8015d5e:	f040 829a 	bne.w	8016296 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8015d62:	4b7a      	ldr	r3, [pc, #488]	; (8015f4c <tcp_receive+0x88c>)
 8015d64:	891c      	ldrh	r4, [r3, #8]
 8015d66:	4b79      	ldr	r3, [pc, #484]	; (8015f4c <tcp_receive+0x88c>)
 8015d68:	68db      	ldr	r3, [r3, #12]
 8015d6a:	899b      	ldrh	r3, [r3, #12]
 8015d6c:	b29b      	uxth	r3, r3
 8015d6e:	4618      	mov	r0, r3
 8015d70:	f7fa fd8e 	bl	8010890 <lwip_htons>
 8015d74:	4603      	mov	r3, r0
 8015d76:	b2db      	uxtb	r3, r3
 8015d78:	f003 0303 	and.w	r3, r3, #3
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d001      	beq.n	8015d84 <tcp_receive+0x6c4>
 8015d80:	2301      	movs	r3, #1
 8015d82:	e000      	b.n	8015d86 <tcp_receive+0x6c6>
 8015d84:	2300      	movs	r3, #0
 8015d86:	4423      	add	r3, r4
 8015d88:	b29a      	uxth	r2, r3
 8015d8a:	4b71      	ldr	r3, [pc, #452]	; (8015f50 <tcp_receive+0x890>)
 8015d8c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015d92:	4b6f      	ldr	r3, [pc, #444]	; (8015f50 <tcp_receive+0x890>)
 8015d94:	881b      	ldrh	r3, [r3, #0]
 8015d96:	429a      	cmp	r2, r3
 8015d98:	d275      	bcs.n	8015e86 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015d9a:	4b6c      	ldr	r3, [pc, #432]	; (8015f4c <tcp_receive+0x88c>)
 8015d9c:	68db      	ldr	r3, [r3, #12]
 8015d9e:	899b      	ldrh	r3, [r3, #12]
 8015da0:	b29b      	uxth	r3, r3
 8015da2:	4618      	mov	r0, r3
 8015da4:	f7fa fd74 	bl	8010890 <lwip_htons>
 8015da8:	4603      	mov	r3, r0
 8015daa:	b2db      	uxtb	r3, r3
 8015dac:	f003 0301 	and.w	r3, r3, #1
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d01f      	beq.n	8015df4 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015db4:	4b65      	ldr	r3, [pc, #404]	; (8015f4c <tcp_receive+0x88c>)
 8015db6:	68db      	ldr	r3, [r3, #12]
 8015db8:	899b      	ldrh	r3, [r3, #12]
 8015dba:	b29b      	uxth	r3, r3
 8015dbc:	b21b      	sxth	r3, r3
 8015dbe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015dc2:	b21c      	sxth	r4, r3
 8015dc4:	4b61      	ldr	r3, [pc, #388]	; (8015f4c <tcp_receive+0x88c>)
 8015dc6:	68db      	ldr	r3, [r3, #12]
 8015dc8:	899b      	ldrh	r3, [r3, #12]
 8015dca:	b29b      	uxth	r3, r3
 8015dcc:	4618      	mov	r0, r3
 8015dce:	f7fa fd5f 	bl	8010890 <lwip_htons>
 8015dd2:	4603      	mov	r3, r0
 8015dd4:	b2db      	uxtb	r3, r3
 8015dd6:	b29b      	uxth	r3, r3
 8015dd8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015ddc:	b29b      	uxth	r3, r3
 8015dde:	4618      	mov	r0, r3
 8015de0:	f7fa fd56 	bl	8010890 <lwip_htons>
 8015de4:	4603      	mov	r3, r0
 8015de6:	b21b      	sxth	r3, r3
 8015de8:	4323      	orrs	r3, r4
 8015dea:	b21a      	sxth	r2, r3
 8015dec:	4b57      	ldr	r3, [pc, #348]	; (8015f4c <tcp_receive+0x88c>)
 8015dee:	68db      	ldr	r3, [r3, #12]
 8015df0:	b292      	uxth	r2, r2
 8015df2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015df8:	4b54      	ldr	r3, [pc, #336]	; (8015f4c <tcp_receive+0x88c>)
 8015dfa:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015dfc:	4b53      	ldr	r3, [pc, #332]	; (8015f4c <tcp_receive+0x88c>)
 8015dfe:	68db      	ldr	r3, [r3, #12]
 8015e00:	899b      	ldrh	r3, [r3, #12]
 8015e02:	b29b      	uxth	r3, r3
 8015e04:	4618      	mov	r0, r3
 8015e06:	f7fa fd43 	bl	8010890 <lwip_htons>
 8015e0a:	4603      	mov	r3, r0
 8015e0c:	b2db      	uxtb	r3, r3
 8015e0e:	f003 0302 	and.w	r3, r3, #2
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d005      	beq.n	8015e22 <tcp_receive+0x762>
            inseg.len -= 1;
 8015e16:	4b4d      	ldr	r3, [pc, #308]	; (8015f4c <tcp_receive+0x88c>)
 8015e18:	891b      	ldrh	r3, [r3, #8]
 8015e1a:	3b01      	subs	r3, #1
 8015e1c:	b29a      	uxth	r2, r3
 8015e1e:	4b4b      	ldr	r3, [pc, #300]	; (8015f4c <tcp_receive+0x88c>)
 8015e20:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8015e22:	4b4a      	ldr	r3, [pc, #296]	; (8015f4c <tcp_receive+0x88c>)
 8015e24:	685b      	ldr	r3, [r3, #4]
 8015e26:	4a49      	ldr	r2, [pc, #292]	; (8015f4c <tcp_receive+0x88c>)
 8015e28:	8912      	ldrh	r2, [r2, #8]
 8015e2a:	4611      	mov	r1, r2
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	f7fb ff9b 	bl	8011d68 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8015e32:	4b46      	ldr	r3, [pc, #280]	; (8015f4c <tcp_receive+0x88c>)
 8015e34:	891c      	ldrh	r4, [r3, #8]
 8015e36:	4b45      	ldr	r3, [pc, #276]	; (8015f4c <tcp_receive+0x88c>)
 8015e38:	68db      	ldr	r3, [r3, #12]
 8015e3a:	899b      	ldrh	r3, [r3, #12]
 8015e3c:	b29b      	uxth	r3, r3
 8015e3e:	4618      	mov	r0, r3
 8015e40:	f7fa fd26 	bl	8010890 <lwip_htons>
 8015e44:	4603      	mov	r3, r0
 8015e46:	b2db      	uxtb	r3, r3
 8015e48:	f003 0303 	and.w	r3, r3, #3
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d001      	beq.n	8015e54 <tcp_receive+0x794>
 8015e50:	2301      	movs	r3, #1
 8015e52:	e000      	b.n	8015e56 <tcp_receive+0x796>
 8015e54:	2300      	movs	r3, #0
 8015e56:	4423      	add	r3, r4
 8015e58:	b29a      	uxth	r2, r3
 8015e5a:	4b3d      	ldr	r3, [pc, #244]	; (8015f50 <tcp_receive+0x890>)
 8015e5c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015e5e:	4b3c      	ldr	r3, [pc, #240]	; (8015f50 <tcp_receive+0x890>)
 8015e60:	881b      	ldrh	r3, [r3, #0]
 8015e62:	461a      	mov	r2, r3
 8015e64:	4b38      	ldr	r3, [pc, #224]	; (8015f48 <tcp_receive+0x888>)
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	441a      	add	r2, r3
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e6e:	6879      	ldr	r1, [r7, #4]
 8015e70:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015e72:	440b      	add	r3, r1
 8015e74:	429a      	cmp	r2, r3
 8015e76:	d006      	beq.n	8015e86 <tcp_receive+0x7c6>
 8015e78:	4b36      	ldr	r3, [pc, #216]	; (8015f54 <tcp_receive+0x894>)
 8015e7a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8015e7e:	4936      	ldr	r1, [pc, #216]	; (8015f58 <tcp_receive+0x898>)
 8015e80:	4836      	ldr	r0, [pc, #216]	; (8015f5c <tcp_receive+0x89c>)
 8015e82:	f005 fcbf 	bl	801b804 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	f000 80e7 	beq.w	801605e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015e90:	4b2e      	ldr	r3, [pc, #184]	; (8015f4c <tcp_receive+0x88c>)
 8015e92:	68db      	ldr	r3, [r3, #12]
 8015e94:	899b      	ldrh	r3, [r3, #12]
 8015e96:	b29b      	uxth	r3, r3
 8015e98:	4618      	mov	r0, r3
 8015e9a:	f7fa fcf9 	bl	8010890 <lwip_htons>
 8015e9e:	4603      	mov	r3, r0
 8015ea0:	b2db      	uxtb	r3, r3
 8015ea2:	f003 0301 	and.w	r3, r3, #1
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d010      	beq.n	8015ecc <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8015eaa:	e00a      	b.n	8015ec2 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015eb0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015eb6:	681a      	ldr	r2, [r3, #0]
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8015ebc:	68f8      	ldr	r0, [r7, #12]
 8015ebe:	f7fd fcc4 	bl	801384a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d1f0      	bne.n	8015eac <tcp_receive+0x7ec>
 8015eca:	e0c8      	b.n	801605e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8015ed2:	e052      	b.n	8015f7a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ed6:	68db      	ldr	r3, [r3, #12]
 8015ed8:	899b      	ldrh	r3, [r3, #12]
 8015eda:	b29b      	uxth	r3, r3
 8015edc:	4618      	mov	r0, r3
 8015ede:	f7fa fcd7 	bl	8010890 <lwip_htons>
 8015ee2:	4603      	mov	r3, r0
 8015ee4:	b2db      	uxtb	r3, r3
 8015ee6:	f003 0301 	and.w	r3, r3, #1
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d03d      	beq.n	8015f6a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8015eee:	4b17      	ldr	r3, [pc, #92]	; (8015f4c <tcp_receive+0x88c>)
 8015ef0:	68db      	ldr	r3, [r3, #12]
 8015ef2:	899b      	ldrh	r3, [r3, #12]
 8015ef4:	b29b      	uxth	r3, r3
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	f7fa fcca 	bl	8010890 <lwip_htons>
 8015efc:	4603      	mov	r3, r0
 8015efe:	b2db      	uxtb	r3, r3
 8015f00:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d130      	bne.n	8015f6a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8015f08:	4b10      	ldr	r3, [pc, #64]	; (8015f4c <tcp_receive+0x88c>)
 8015f0a:	68db      	ldr	r3, [r3, #12]
 8015f0c:	899b      	ldrh	r3, [r3, #12]
 8015f0e:	b29c      	uxth	r4, r3
 8015f10:	2001      	movs	r0, #1
 8015f12:	f7fa fcbd 	bl	8010890 <lwip_htons>
 8015f16:	4603      	mov	r3, r0
 8015f18:	461a      	mov	r2, r3
 8015f1a:	4b0c      	ldr	r3, [pc, #48]	; (8015f4c <tcp_receive+0x88c>)
 8015f1c:	68db      	ldr	r3, [r3, #12]
 8015f1e:	4322      	orrs	r2, r4
 8015f20:	b292      	uxth	r2, r2
 8015f22:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8015f24:	4b09      	ldr	r3, [pc, #36]	; (8015f4c <tcp_receive+0x88c>)
 8015f26:	891c      	ldrh	r4, [r3, #8]
 8015f28:	4b08      	ldr	r3, [pc, #32]	; (8015f4c <tcp_receive+0x88c>)
 8015f2a:	68db      	ldr	r3, [r3, #12]
 8015f2c:	899b      	ldrh	r3, [r3, #12]
 8015f2e:	b29b      	uxth	r3, r3
 8015f30:	4618      	mov	r0, r3
 8015f32:	f7fa fcad 	bl	8010890 <lwip_htons>
 8015f36:	4603      	mov	r3, r0
 8015f38:	b2db      	uxtb	r3, r3
 8015f3a:	f003 0303 	and.w	r3, r3, #3
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d00e      	beq.n	8015f60 <tcp_receive+0x8a0>
 8015f42:	2301      	movs	r3, #1
 8015f44:	e00d      	b.n	8015f62 <tcp_receive+0x8a2>
 8015f46:	bf00      	nop
 8015f48:	200110c4 	.word	0x200110c4
 8015f4c:	200110a4 	.word	0x200110a4
 8015f50:	200110ce 	.word	0x200110ce
 8015f54:	0801ec70 	.word	0x0801ec70
 8015f58:	0801f018 	.word	0x0801f018
 8015f5c:	0801ecbc 	.word	0x0801ecbc
 8015f60:	2300      	movs	r3, #0
 8015f62:	4423      	add	r3, r4
 8015f64:	b29a      	uxth	r2, r3
 8015f66:	4b98      	ldr	r3, [pc, #608]	; (80161c8 <tcp_receive+0xb08>)
 8015f68:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8015f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f6c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8015f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8015f74:	6938      	ldr	r0, [r7, #16]
 8015f76:	f7fd fc68 	bl	801384a <tcp_seg_free>
            while (next &&
 8015f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d00e      	beq.n	8015f9e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8015f80:	4b91      	ldr	r3, [pc, #580]	; (80161c8 <tcp_receive+0xb08>)
 8015f82:	881b      	ldrh	r3, [r3, #0]
 8015f84:	461a      	mov	r2, r3
 8015f86:	4b91      	ldr	r3, [pc, #580]	; (80161cc <tcp_receive+0xb0c>)
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	441a      	add	r2, r3
 8015f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f8e:	68db      	ldr	r3, [r3, #12]
 8015f90:	685b      	ldr	r3, [r3, #4]
 8015f92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015f94:	8909      	ldrh	r1, [r1, #8]
 8015f96:	440b      	add	r3, r1
 8015f98:	1ad3      	subs	r3, r2, r3
            while (next &&
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	da9a      	bge.n	8015ed4 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8015f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d059      	beq.n	8016058 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8015fa4:	4b88      	ldr	r3, [pc, #544]	; (80161c8 <tcp_receive+0xb08>)
 8015fa6:	881b      	ldrh	r3, [r3, #0]
 8015fa8:	461a      	mov	r2, r3
 8015faa:	4b88      	ldr	r3, [pc, #544]	; (80161cc <tcp_receive+0xb0c>)
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	441a      	add	r2, r3
 8015fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015fb2:	68db      	ldr	r3, [r3, #12]
 8015fb4:	685b      	ldr	r3, [r3, #4]
 8015fb6:	1ad3      	subs	r3, r2, r3
            if (next &&
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	dd4d      	ble.n	8016058 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015fbe:	68db      	ldr	r3, [r3, #12]
 8015fc0:	685b      	ldr	r3, [r3, #4]
 8015fc2:	b29a      	uxth	r2, r3
 8015fc4:	4b81      	ldr	r3, [pc, #516]	; (80161cc <tcp_receive+0xb0c>)
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	b29b      	uxth	r3, r3
 8015fca:	1ad3      	subs	r3, r2, r3
 8015fcc:	b29a      	uxth	r2, r3
 8015fce:	4b80      	ldr	r3, [pc, #512]	; (80161d0 <tcp_receive+0xb10>)
 8015fd0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015fd2:	4b7f      	ldr	r3, [pc, #508]	; (80161d0 <tcp_receive+0xb10>)
 8015fd4:	68db      	ldr	r3, [r3, #12]
 8015fd6:	899b      	ldrh	r3, [r3, #12]
 8015fd8:	b29b      	uxth	r3, r3
 8015fda:	4618      	mov	r0, r3
 8015fdc:	f7fa fc58 	bl	8010890 <lwip_htons>
 8015fe0:	4603      	mov	r3, r0
 8015fe2:	b2db      	uxtb	r3, r3
 8015fe4:	f003 0302 	and.w	r3, r3, #2
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d005      	beq.n	8015ff8 <tcp_receive+0x938>
                inseg.len -= 1;
 8015fec:	4b78      	ldr	r3, [pc, #480]	; (80161d0 <tcp_receive+0xb10>)
 8015fee:	891b      	ldrh	r3, [r3, #8]
 8015ff0:	3b01      	subs	r3, #1
 8015ff2:	b29a      	uxth	r2, r3
 8015ff4:	4b76      	ldr	r3, [pc, #472]	; (80161d0 <tcp_receive+0xb10>)
 8015ff6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8015ff8:	4b75      	ldr	r3, [pc, #468]	; (80161d0 <tcp_receive+0xb10>)
 8015ffa:	685b      	ldr	r3, [r3, #4]
 8015ffc:	4a74      	ldr	r2, [pc, #464]	; (80161d0 <tcp_receive+0xb10>)
 8015ffe:	8912      	ldrh	r2, [r2, #8]
 8016000:	4611      	mov	r1, r2
 8016002:	4618      	mov	r0, r3
 8016004:	f7fb feb0 	bl	8011d68 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8016008:	4b71      	ldr	r3, [pc, #452]	; (80161d0 <tcp_receive+0xb10>)
 801600a:	891c      	ldrh	r4, [r3, #8]
 801600c:	4b70      	ldr	r3, [pc, #448]	; (80161d0 <tcp_receive+0xb10>)
 801600e:	68db      	ldr	r3, [r3, #12]
 8016010:	899b      	ldrh	r3, [r3, #12]
 8016012:	b29b      	uxth	r3, r3
 8016014:	4618      	mov	r0, r3
 8016016:	f7fa fc3b 	bl	8010890 <lwip_htons>
 801601a:	4603      	mov	r3, r0
 801601c:	b2db      	uxtb	r3, r3
 801601e:	f003 0303 	and.w	r3, r3, #3
 8016022:	2b00      	cmp	r3, #0
 8016024:	d001      	beq.n	801602a <tcp_receive+0x96a>
 8016026:	2301      	movs	r3, #1
 8016028:	e000      	b.n	801602c <tcp_receive+0x96c>
 801602a:	2300      	movs	r3, #0
 801602c:	4423      	add	r3, r4
 801602e:	b29a      	uxth	r2, r3
 8016030:	4b65      	ldr	r3, [pc, #404]	; (80161c8 <tcp_receive+0xb08>)
 8016032:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8016034:	4b64      	ldr	r3, [pc, #400]	; (80161c8 <tcp_receive+0xb08>)
 8016036:	881b      	ldrh	r3, [r3, #0]
 8016038:	461a      	mov	r2, r3
 801603a:	4b64      	ldr	r3, [pc, #400]	; (80161cc <tcp_receive+0xb0c>)
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	441a      	add	r2, r3
 8016040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016042:	68db      	ldr	r3, [r3, #12]
 8016044:	685b      	ldr	r3, [r3, #4]
 8016046:	429a      	cmp	r2, r3
 8016048:	d006      	beq.n	8016058 <tcp_receive+0x998>
 801604a:	4b62      	ldr	r3, [pc, #392]	; (80161d4 <tcp_receive+0xb14>)
 801604c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8016050:	4961      	ldr	r1, [pc, #388]	; (80161d8 <tcp_receive+0xb18>)
 8016052:	4862      	ldr	r0, [pc, #392]	; (80161dc <tcp_receive+0xb1c>)
 8016054:	f005 fbd6 	bl	801b804 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801605c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801605e:	4b5a      	ldr	r3, [pc, #360]	; (80161c8 <tcp_receive+0xb08>)
 8016060:	881b      	ldrh	r3, [r3, #0]
 8016062:	461a      	mov	r2, r3
 8016064:	4b59      	ldr	r3, [pc, #356]	; (80161cc <tcp_receive+0xb0c>)
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	441a      	add	r2, r3
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016072:	4b55      	ldr	r3, [pc, #340]	; (80161c8 <tcp_receive+0xb08>)
 8016074:	881b      	ldrh	r3, [r3, #0]
 8016076:	429a      	cmp	r2, r3
 8016078:	d206      	bcs.n	8016088 <tcp_receive+0x9c8>
 801607a:	4b56      	ldr	r3, [pc, #344]	; (80161d4 <tcp_receive+0xb14>)
 801607c:	f240 6207 	movw	r2, #1543	; 0x607
 8016080:	4957      	ldr	r1, [pc, #348]	; (80161e0 <tcp_receive+0xb20>)
 8016082:	4856      	ldr	r0, [pc, #344]	; (80161dc <tcp_receive+0xb1c>)
 8016084:	f005 fbbe 	bl	801b804 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801608c:	4b4e      	ldr	r3, [pc, #312]	; (80161c8 <tcp_receive+0xb08>)
 801608e:	881b      	ldrh	r3, [r3, #0]
 8016090:	1ad3      	subs	r3, r2, r3
 8016092:	b29a      	uxth	r2, r3
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8016098:	6878      	ldr	r0, [r7, #4]
 801609a:	f7fc feb1 	bl	8012e00 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801609e:	4b4c      	ldr	r3, [pc, #304]	; (80161d0 <tcp_receive+0xb10>)
 80160a0:	685b      	ldr	r3, [r3, #4]
 80160a2:	891b      	ldrh	r3, [r3, #8]
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d006      	beq.n	80160b6 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80160a8:	4b49      	ldr	r3, [pc, #292]	; (80161d0 <tcp_receive+0xb10>)
 80160aa:	685b      	ldr	r3, [r3, #4]
 80160ac:	4a4d      	ldr	r2, [pc, #308]	; (80161e4 <tcp_receive+0xb24>)
 80160ae:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80160b0:	4b47      	ldr	r3, [pc, #284]	; (80161d0 <tcp_receive+0xb10>)
 80160b2:	2200      	movs	r2, #0
 80160b4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80160b6:	4b46      	ldr	r3, [pc, #280]	; (80161d0 <tcp_receive+0xb10>)
 80160b8:	68db      	ldr	r3, [r3, #12]
 80160ba:	899b      	ldrh	r3, [r3, #12]
 80160bc:	b29b      	uxth	r3, r3
 80160be:	4618      	mov	r0, r3
 80160c0:	f7fa fbe6 	bl	8010890 <lwip_htons>
 80160c4:	4603      	mov	r3, r0
 80160c6:	b2db      	uxtb	r3, r3
 80160c8:	f003 0301 	and.w	r3, r3, #1
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	f000 80b8 	beq.w	8016242 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80160d2:	4b45      	ldr	r3, [pc, #276]	; (80161e8 <tcp_receive+0xb28>)
 80160d4:	781b      	ldrb	r3, [r3, #0]
 80160d6:	f043 0320 	orr.w	r3, r3, #32
 80160da:	b2da      	uxtb	r2, r3
 80160dc:	4b42      	ldr	r3, [pc, #264]	; (80161e8 <tcp_receive+0xb28>)
 80160de:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80160e0:	e0af      	b.n	8016242 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80160e6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80160ec:	68db      	ldr	r3, [r3, #12]
 80160ee:	685b      	ldr	r3, [r3, #4]
 80160f0:	4a36      	ldr	r2, [pc, #216]	; (80161cc <tcp_receive+0xb0c>)
 80160f2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80160f4:	68bb      	ldr	r3, [r7, #8]
 80160f6:	891b      	ldrh	r3, [r3, #8]
 80160f8:	461c      	mov	r4, r3
 80160fa:	68bb      	ldr	r3, [r7, #8]
 80160fc:	68db      	ldr	r3, [r3, #12]
 80160fe:	899b      	ldrh	r3, [r3, #12]
 8016100:	b29b      	uxth	r3, r3
 8016102:	4618      	mov	r0, r3
 8016104:	f7fa fbc4 	bl	8010890 <lwip_htons>
 8016108:	4603      	mov	r3, r0
 801610a:	b2db      	uxtb	r3, r3
 801610c:	f003 0303 	and.w	r3, r3, #3
 8016110:	2b00      	cmp	r3, #0
 8016112:	d001      	beq.n	8016118 <tcp_receive+0xa58>
 8016114:	2301      	movs	r3, #1
 8016116:	e000      	b.n	801611a <tcp_receive+0xa5a>
 8016118:	2300      	movs	r3, #0
 801611a:	191a      	adds	r2, r3, r4
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016120:	441a      	add	r2, r3
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801612a:	461c      	mov	r4, r3
 801612c:	68bb      	ldr	r3, [r7, #8]
 801612e:	891b      	ldrh	r3, [r3, #8]
 8016130:	461d      	mov	r5, r3
 8016132:	68bb      	ldr	r3, [r7, #8]
 8016134:	68db      	ldr	r3, [r3, #12]
 8016136:	899b      	ldrh	r3, [r3, #12]
 8016138:	b29b      	uxth	r3, r3
 801613a:	4618      	mov	r0, r3
 801613c:	f7fa fba8 	bl	8010890 <lwip_htons>
 8016140:	4603      	mov	r3, r0
 8016142:	b2db      	uxtb	r3, r3
 8016144:	f003 0303 	and.w	r3, r3, #3
 8016148:	2b00      	cmp	r3, #0
 801614a:	d001      	beq.n	8016150 <tcp_receive+0xa90>
 801614c:	2301      	movs	r3, #1
 801614e:	e000      	b.n	8016152 <tcp_receive+0xa92>
 8016150:	2300      	movs	r3, #0
 8016152:	442b      	add	r3, r5
 8016154:	429c      	cmp	r4, r3
 8016156:	d206      	bcs.n	8016166 <tcp_receive+0xaa6>
 8016158:	4b1e      	ldr	r3, [pc, #120]	; (80161d4 <tcp_receive+0xb14>)
 801615a:	f240 622b 	movw	r2, #1579	; 0x62b
 801615e:	4923      	ldr	r1, [pc, #140]	; (80161ec <tcp_receive+0xb2c>)
 8016160:	481e      	ldr	r0, [pc, #120]	; (80161dc <tcp_receive+0xb1c>)
 8016162:	f005 fb4f 	bl	801b804 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8016166:	68bb      	ldr	r3, [r7, #8]
 8016168:	891b      	ldrh	r3, [r3, #8]
 801616a:	461c      	mov	r4, r3
 801616c:	68bb      	ldr	r3, [r7, #8]
 801616e:	68db      	ldr	r3, [r3, #12]
 8016170:	899b      	ldrh	r3, [r3, #12]
 8016172:	b29b      	uxth	r3, r3
 8016174:	4618      	mov	r0, r3
 8016176:	f7fa fb8b 	bl	8010890 <lwip_htons>
 801617a:	4603      	mov	r3, r0
 801617c:	b2db      	uxtb	r3, r3
 801617e:	f003 0303 	and.w	r3, r3, #3
 8016182:	2b00      	cmp	r3, #0
 8016184:	d001      	beq.n	801618a <tcp_receive+0xaca>
 8016186:	2301      	movs	r3, #1
 8016188:	e000      	b.n	801618c <tcp_receive+0xacc>
 801618a:	2300      	movs	r3, #0
 801618c:	1919      	adds	r1, r3, r4
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016192:	b28b      	uxth	r3, r1
 8016194:	1ad3      	subs	r3, r2, r3
 8016196:	b29a      	uxth	r2, r3
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801619c:	6878      	ldr	r0, [r7, #4]
 801619e:	f7fc fe2f 	bl	8012e00 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80161a2:	68bb      	ldr	r3, [r7, #8]
 80161a4:	685b      	ldr	r3, [r3, #4]
 80161a6:	891b      	ldrh	r3, [r3, #8]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d028      	beq.n	80161fe <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80161ac:	4b0d      	ldr	r3, [pc, #52]	; (80161e4 <tcp_receive+0xb24>)
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d01d      	beq.n	80161f0 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80161b4:	4b0b      	ldr	r3, [pc, #44]	; (80161e4 <tcp_receive+0xb24>)
 80161b6:	681a      	ldr	r2, [r3, #0]
 80161b8:	68bb      	ldr	r3, [r7, #8]
 80161ba:	685b      	ldr	r3, [r3, #4]
 80161bc:	4619      	mov	r1, r3
 80161be:	4610      	mov	r0, r2
 80161c0:	f7fc f858 	bl	8012274 <pbuf_cat>
 80161c4:	e018      	b.n	80161f8 <tcp_receive+0xb38>
 80161c6:	bf00      	nop
 80161c8:	200110ce 	.word	0x200110ce
 80161cc:	200110c4 	.word	0x200110c4
 80161d0:	200110a4 	.word	0x200110a4
 80161d4:	0801ec70 	.word	0x0801ec70
 80161d8:	0801f050 	.word	0x0801f050
 80161dc:	0801ecbc 	.word	0x0801ecbc
 80161e0:	0801f08c 	.word	0x0801f08c
 80161e4:	200110d4 	.word	0x200110d4
 80161e8:	200110d1 	.word	0x200110d1
 80161ec:	0801f0ac 	.word	0x0801f0ac
            } else {
              recv_data = cseg->p;
 80161f0:	68bb      	ldr	r3, [r7, #8]
 80161f2:	685b      	ldr	r3, [r3, #4]
 80161f4:	4a70      	ldr	r2, [pc, #448]	; (80163b8 <tcp_receive+0xcf8>)
 80161f6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80161f8:	68bb      	ldr	r3, [r7, #8]
 80161fa:	2200      	movs	r2, #0
 80161fc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80161fe:	68bb      	ldr	r3, [r7, #8]
 8016200:	68db      	ldr	r3, [r3, #12]
 8016202:	899b      	ldrh	r3, [r3, #12]
 8016204:	b29b      	uxth	r3, r3
 8016206:	4618      	mov	r0, r3
 8016208:	f7fa fb42 	bl	8010890 <lwip_htons>
 801620c:	4603      	mov	r3, r0
 801620e:	b2db      	uxtb	r3, r3
 8016210:	f003 0301 	and.w	r3, r3, #1
 8016214:	2b00      	cmp	r3, #0
 8016216:	d00d      	beq.n	8016234 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8016218:	4b68      	ldr	r3, [pc, #416]	; (80163bc <tcp_receive+0xcfc>)
 801621a:	781b      	ldrb	r3, [r3, #0]
 801621c:	f043 0320 	orr.w	r3, r3, #32
 8016220:	b2da      	uxtb	r2, r3
 8016222:	4b66      	ldr	r3, [pc, #408]	; (80163bc <tcp_receive+0xcfc>)
 8016224:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	7d1b      	ldrb	r3, [r3, #20]
 801622a:	2b04      	cmp	r3, #4
 801622c:	d102      	bne.n	8016234 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	2207      	movs	r2, #7
 8016232:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8016234:	68bb      	ldr	r3, [r7, #8]
 8016236:	681a      	ldr	r2, [r3, #0]
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801623c:	68b8      	ldr	r0, [r7, #8]
 801623e:	f7fd fb04 	bl	801384a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016246:	2b00      	cmp	r3, #0
 8016248:	d008      	beq.n	801625c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801624e:	68db      	ldr	r3, [r3, #12]
 8016250:	685a      	ldr	r2, [r3, #4]
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8016256:	429a      	cmp	r2, r3
 8016258:	f43f af43 	beq.w	80160e2 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	8b5b      	ldrh	r3, [r3, #26]
 8016260:	f003 0301 	and.w	r3, r3, #1
 8016264:	2b00      	cmp	r3, #0
 8016266:	d00e      	beq.n	8016286 <tcp_receive+0xbc6>
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	8b5b      	ldrh	r3, [r3, #26]
 801626c:	f023 0301 	bic.w	r3, r3, #1
 8016270:	b29a      	uxth	r2, r3
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	835a      	strh	r2, [r3, #26]
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	8b5b      	ldrh	r3, [r3, #26]
 801627a:	f043 0302 	orr.w	r3, r3, #2
 801627e:	b29a      	uxth	r2, r3
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016284:	e188      	b.n	8016598 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	8b5b      	ldrh	r3, [r3, #26]
 801628a:	f043 0301 	orr.w	r3, r3, #1
 801628e:	b29a      	uxth	r2, r3
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016294:	e180      	b.n	8016598 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801629a:	2b00      	cmp	r3, #0
 801629c:	d106      	bne.n	80162ac <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801629e:	4848      	ldr	r0, [pc, #288]	; (80163c0 <tcp_receive+0xd00>)
 80162a0:	f7fd faec 	bl	801387c <tcp_seg_copy>
 80162a4:	4602      	mov	r2, r0
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	675a      	str	r2, [r3, #116]	; 0x74
 80162aa:	e16d      	b.n	8016588 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80162ac:	2300      	movs	r3, #0
 80162ae:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80162b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80162b6:	e157      	b.n	8016568 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80162b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162ba:	68db      	ldr	r3, [r3, #12]
 80162bc:	685a      	ldr	r2, [r3, #4]
 80162be:	4b41      	ldr	r3, [pc, #260]	; (80163c4 <tcp_receive+0xd04>)
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	429a      	cmp	r2, r3
 80162c4:	d11d      	bne.n	8016302 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80162c6:	4b3e      	ldr	r3, [pc, #248]	; (80163c0 <tcp_receive+0xd00>)
 80162c8:	891a      	ldrh	r2, [r3, #8]
 80162ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162cc:	891b      	ldrh	r3, [r3, #8]
 80162ce:	429a      	cmp	r2, r3
 80162d0:	f240 814f 	bls.w	8016572 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80162d4:	483a      	ldr	r0, [pc, #232]	; (80163c0 <tcp_receive+0xd00>)
 80162d6:	f7fd fad1 	bl	801387c <tcp_seg_copy>
 80162da:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80162dc:	697b      	ldr	r3, [r7, #20]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	f000 8149 	beq.w	8016576 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80162e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d003      	beq.n	80162f2 <tcp_receive+0xc32>
                    prev->next = cseg;
 80162ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162ec:	697a      	ldr	r2, [r7, #20]
 80162ee:	601a      	str	r2, [r3, #0]
 80162f0:	e002      	b.n	80162f8 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	697a      	ldr	r2, [r7, #20]
 80162f6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80162f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80162fa:	6978      	ldr	r0, [r7, #20]
 80162fc:	f7ff f8dc 	bl	80154b8 <tcp_oos_insert_segment>
                }
                break;
 8016300:	e139      	b.n	8016576 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8016302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016304:	2b00      	cmp	r3, #0
 8016306:	d117      	bne.n	8016338 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8016308:	4b2e      	ldr	r3, [pc, #184]	; (80163c4 <tcp_receive+0xd04>)
 801630a:	681a      	ldr	r2, [r3, #0]
 801630c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801630e:	68db      	ldr	r3, [r3, #12]
 8016310:	685b      	ldr	r3, [r3, #4]
 8016312:	1ad3      	subs	r3, r2, r3
 8016314:	2b00      	cmp	r3, #0
 8016316:	da57      	bge.n	80163c8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016318:	4829      	ldr	r0, [pc, #164]	; (80163c0 <tcp_receive+0xd00>)
 801631a:	f7fd faaf 	bl	801387c <tcp_seg_copy>
 801631e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8016320:	69bb      	ldr	r3, [r7, #24]
 8016322:	2b00      	cmp	r3, #0
 8016324:	f000 8129 	beq.w	801657a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	69ba      	ldr	r2, [r7, #24]
 801632c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801632e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016330:	69b8      	ldr	r0, [r7, #24]
 8016332:	f7ff f8c1 	bl	80154b8 <tcp_oos_insert_segment>
                  }
                  break;
 8016336:	e120      	b.n	801657a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8016338:	4b22      	ldr	r3, [pc, #136]	; (80163c4 <tcp_receive+0xd04>)
 801633a:	681a      	ldr	r2, [r3, #0]
 801633c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801633e:	68db      	ldr	r3, [r3, #12]
 8016340:	685b      	ldr	r3, [r3, #4]
 8016342:	1ad3      	subs	r3, r2, r3
 8016344:	3b01      	subs	r3, #1
 8016346:	2b00      	cmp	r3, #0
 8016348:	db3e      	blt.n	80163c8 <tcp_receive+0xd08>
 801634a:	4b1e      	ldr	r3, [pc, #120]	; (80163c4 <tcp_receive+0xd04>)
 801634c:	681a      	ldr	r2, [r3, #0]
 801634e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016350:	68db      	ldr	r3, [r3, #12]
 8016352:	685b      	ldr	r3, [r3, #4]
 8016354:	1ad3      	subs	r3, r2, r3
 8016356:	3301      	adds	r3, #1
 8016358:	2b00      	cmp	r3, #0
 801635a:	dc35      	bgt.n	80163c8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801635c:	4818      	ldr	r0, [pc, #96]	; (80163c0 <tcp_receive+0xd00>)
 801635e:	f7fd fa8d 	bl	801387c <tcp_seg_copy>
 8016362:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8016364:	69fb      	ldr	r3, [r7, #28]
 8016366:	2b00      	cmp	r3, #0
 8016368:	f000 8109 	beq.w	801657e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801636c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801636e:	68db      	ldr	r3, [r3, #12]
 8016370:	685b      	ldr	r3, [r3, #4]
 8016372:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016374:	8912      	ldrh	r2, [r2, #8]
 8016376:	441a      	add	r2, r3
 8016378:	4b12      	ldr	r3, [pc, #72]	; (80163c4 <tcp_receive+0xd04>)
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	1ad3      	subs	r3, r2, r3
 801637e:	2b00      	cmp	r3, #0
 8016380:	dd12      	ble.n	80163a8 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8016382:	4b10      	ldr	r3, [pc, #64]	; (80163c4 <tcp_receive+0xd04>)
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	b29a      	uxth	r2, r3
 8016388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801638a:	68db      	ldr	r3, [r3, #12]
 801638c:	685b      	ldr	r3, [r3, #4]
 801638e:	b29b      	uxth	r3, r3
 8016390:	1ad3      	subs	r3, r2, r3
 8016392:	b29a      	uxth	r2, r3
 8016394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016396:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8016398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801639a:	685a      	ldr	r2, [r3, #4]
 801639c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801639e:	891b      	ldrh	r3, [r3, #8]
 80163a0:	4619      	mov	r1, r3
 80163a2:	4610      	mov	r0, r2
 80163a4:	f7fb fce0 	bl	8011d68 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80163a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163aa:	69fa      	ldr	r2, [r7, #28]
 80163ac:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80163ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80163b0:	69f8      	ldr	r0, [r7, #28]
 80163b2:	f7ff f881 	bl	80154b8 <tcp_oos_insert_segment>
                  }
                  break;
 80163b6:	e0e2      	b.n	801657e <tcp_receive+0xebe>
 80163b8:	200110d4 	.word	0x200110d4
 80163bc:	200110d1 	.word	0x200110d1
 80163c0:	200110a4 	.word	0x200110a4
 80163c4:	200110c4 	.word	0x200110c4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80163c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163ca:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80163cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	f040 80c6 	bne.w	8016562 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80163d6:	4b80      	ldr	r3, [pc, #512]	; (80165d8 <tcp_receive+0xf18>)
 80163d8:	681a      	ldr	r2, [r3, #0]
 80163da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163dc:	68db      	ldr	r3, [r3, #12]
 80163de:	685b      	ldr	r3, [r3, #4]
 80163e0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	f340 80bd 	ble.w	8016562 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80163e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163ea:	68db      	ldr	r3, [r3, #12]
 80163ec:	899b      	ldrh	r3, [r3, #12]
 80163ee:	b29b      	uxth	r3, r3
 80163f0:	4618      	mov	r0, r3
 80163f2:	f7fa fa4d 	bl	8010890 <lwip_htons>
 80163f6:	4603      	mov	r3, r0
 80163f8:	b2db      	uxtb	r3, r3
 80163fa:	f003 0301 	and.w	r3, r3, #1
 80163fe:	2b00      	cmp	r3, #0
 8016400:	f040 80bf 	bne.w	8016582 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8016404:	4875      	ldr	r0, [pc, #468]	; (80165dc <tcp_receive+0xf1c>)
 8016406:	f7fd fa39 	bl	801387c <tcp_seg_copy>
 801640a:	4602      	mov	r2, r0
 801640c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801640e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8016410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	2b00      	cmp	r3, #0
 8016416:	f000 80b6 	beq.w	8016586 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801641a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801641c:	68db      	ldr	r3, [r3, #12]
 801641e:	685b      	ldr	r3, [r3, #4]
 8016420:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016422:	8912      	ldrh	r2, [r2, #8]
 8016424:	441a      	add	r2, r3
 8016426:	4b6c      	ldr	r3, [pc, #432]	; (80165d8 <tcp_receive+0xf18>)
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	1ad3      	subs	r3, r2, r3
 801642c:	2b00      	cmp	r3, #0
 801642e:	dd12      	ble.n	8016456 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8016430:	4b69      	ldr	r3, [pc, #420]	; (80165d8 <tcp_receive+0xf18>)
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	b29a      	uxth	r2, r3
 8016436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016438:	68db      	ldr	r3, [r3, #12]
 801643a:	685b      	ldr	r3, [r3, #4]
 801643c:	b29b      	uxth	r3, r3
 801643e:	1ad3      	subs	r3, r2, r3
 8016440:	b29a      	uxth	r2, r3
 8016442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016444:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8016446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016448:	685a      	ldr	r2, [r3, #4]
 801644a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801644c:	891b      	ldrh	r3, [r3, #8]
 801644e:	4619      	mov	r1, r3
 8016450:	4610      	mov	r0, r2
 8016452:	f7fb fc89 	bl	8011d68 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8016456:	4b62      	ldr	r3, [pc, #392]	; (80165e0 <tcp_receive+0xf20>)
 8016458:	881b      	ldrh	r3, [r3, #0]
 801645a:	461a      	mov	r2, r3
 801645c:	4b5e      	ldr	r3, [pc, #376]	; (80165d8 <tcp_receive+0xf18>)
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	441a      	add	r2, r3
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016466:	6879      	ldr	r1, [r7, #4]
 8016468:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801646a:	440b      	add	r3, r1
 801646c:	1ad3      	subs	r3, r2, r3
 801646e:	2b00      	cmp	r3, #0
 8016470:	f340 8089 	ble.w	8016586 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8016474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	68db      	ldr	r3, [r3, #12]
 801647a:	899b      	ldrh	r3, [r3, #12]
 801647c:	b29b      	uxth	r3, r3
 801647e:	4618      	mov	r0, r3
 8016480:	f7fa fa06 	bl	8010890 <lwip_htons>
 8016484:	4603      	mov	r3, r0
 8016486:	b2db      	uxtb	r3, r3
 8016488:	f003 0301 	and.w	r3, r3, #1
 801648c:	2b00      	cmp	r3, #0
 801648e:	d022      	beq.n	80164d6 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8016490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	68db      	ldr	r3, [r3, #12]
 8016496:	899b      	ldrh	r3, [r3, #12]
 8016498:	b29b      	uxth	r3, r3
 801649a:	b21b      	sxth	r3, r3
 801649c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80164a0:	b21c      	sxth	r4, r3
 80164a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	68db      	ldr	r3, [r3, #12]
 80164a8:	899b      	ldrh	r3, [r3, #12]
 80164aa:	b29b      	uxth	r3, r3
 80164ac:	4618      	mov	r0, r3
 80164ae:	f7fa f9ef 	bl	8010890 <lwip_htons>
 80164b2:	4603      	mov	r3, r0
 80164b4:	b2db      	uxtb	r3, r3
 80164b6:	b29b      	uxth	r3, r3
 80164b8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80164bc:	b29b      	uxth	r3, r3
 80164be:	4618      	mov	r0, r3
 80164c0:	f7fa f9e6 	bl	8010890 <lwip_htons>
 80164c4:	4603      	mov	r3, r0
 80164c6:	b21b      	sxth	r3, r3
 80164c8:	4323      	orrs	r3, r4
 80164ca:	b21a      	sxth	r2, r3
 80164cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	68db      	ldr	r3, [r3, #12]
 80164d2:	b292      	uxth	r2, r2
 80164d4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164da:	b29a      	uxth	r2, r3
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80164e0:	4413      	add	r3, r2
 80164e2:	b299      	uxth	r1, r3
 80164e4:	4b3c      	ldr	r3, [pc, #240]	; (80165d8 <tcp_receive+0xf18>)
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	b29a      	uxth	r2, r3
 80164ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	1a8a      	subs	r2, r1, r2
 80164f0:	b292      	uxth	r2, r2
 80164f2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80164f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	685a      	ldr	r2, [r3, #4]
 80164fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164fc:	681b      	ldr	r3, [r3, #0]
 80164fe:	891b      	ldrh	r3, [r3, #8]
 8016500:	4619      	mov	r1, r3
 8016502:	4610      	mov	r0, r2
 8016504:	f7fb fc30 	bl	8011d68 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8016508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	891c      	ldrh	r4, [r3, #8]
 801650e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	68db      	ldr	r3, [r3, #12]
 8016514:	899b      	ldrh	r3, [r3, #12]
 8016516:	b29b      	uxth	r3, r3
 8016518:	4618      	mov	r0, r3
 801651a:	f7fa f9b9 	bl	8010890 <lwip_htons>
 801651e:	4603      	mov	r3, r0
 8016520:	b2db      	uxtb	r3, r3
 8016522:	f003 0303 	and.w	r3, r3, #3
 8016526:	2b00      	cmp	r3, #0
 8016528:	d001      	beq.n	801652e <tcp_receive+0xe6e>
 801652a:	2301      	movs	r3, #1
 801652c:	e000      	b.n	8016530 <tcp_receive+0xe70>
 801652e:	2300      	movs	r3, #0
 8016530:	4423      	add	r3, r4
 8016532:	b29a      	uxth	r2, r3
 8016534:	4b2a      	ldr	r3, [pc, #168]	; (80165e0 <tcp_receive+0xf20>)
 8016536:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016538:	4b29      	ldr	r3, [pc, #164]	; (80165e0 <tcp_receive+0xf20>)
 801653a:	881b      	ldrh	r3, [r3, #0]
 801653c:	461a      	mov	r2, r3
 801653e:	4b26      	ldr	r3, [pc, #152]	; (80165d8 <tcp_receive+0xf18>)
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	441a      	add	r2, r3
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016548:	6879      	ldr	r1, [r7, #4]
 801654a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801654c:	440b      	add	r3, r1
 801654e:	429a      	cmp	r2, r3
 8016550:	d019      	beq.n	8016586 <tcp_receive+0xec6>
 8016552:	4b24      	ldr	r3, [pc, #144]	; (80165e4 <tcp_receive+0xf24>)
 8016554:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8016558:	4923      	ldr	r1, [pc, #140]	; (80165e8 <tcp_receive+0xf28>)
 801655a:	4824      	ldr	r0, [pc, #144]	; (80165ec <tcp_receive+0xf2c>)
 801655c:	f005 f952 	bl	801b804 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8016560:	e011      	b.n	8016586 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	63bb      	str	r3, [r7, #56]	; 0x38
 8016568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801656a:	2b00      	cmp	r3, #0
 801656c:	f47f aea4 	bne.w	80162b8 <tcp_receive+0xbf8>
 8016570:	e00a      	b.n	8016588 <tcp_receive+0xec8>
                break;
 8016572:	bf00      	nop
 8016574:	e008      	b.n	8016588 <tcp_receive+0xec8>
                break;
 8016576:	bf00      	nop
 8016578:	e006      	b.n	8016588 <tcp_receive+0xec8>
                  break;
 801657a:	bf00      	nop
 801657c:	e004      	b.n	8016588 <tcp_receive+0xec8>
                  break;
 801657e:	bf00      	nop
 8016580:	e002      	b.n	8016588 <tcp_receive+0xec8>
                  break;
 8016582:	bf00      	nop
 8016584:	e000      	b.n	8016588 <tcp_receive+0xec8>
                break;
 8016586:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8016588:	6878      	ldr	r0, [r7, #4]
 801658a:	f001 fe8b 	bl	80182a4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801658e:	e003      	b.n	8016598 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8016590:	6878      	ldr	r0, [r7, #4]
 8016592:	f001 fe87 	bl	80182a4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016596:	e01a      	b.n	80165ce <tcp_receive+0xf0e>
 8016598:	e019      	b.n	80165ce <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801659a:	4b0f      	ldr	r3, [pc, #60]	; (80165d8 <tcp_receive+0xf18>)
 801659c:	681a      	ldr	r2, [r3, #0]
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165a2:	1ad3      	subs	r3, r2, r3
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	db0a      	blt.n	80165be <tcp_receive+0xefe>
 80165a8:	4b0b      	ldr	r3, [pc, #44]	; (80165d8 <tcp_receive+0xf18>)
 80165aa:	681a      	ldr	r2, [r3, #0]
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165b0:	6879      	ldr	r1, [r7, #4]
 80165b2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80165b4:	440b      	add	r3, r1
 80165b6:	1ad3      	subs	r3, r2, r3
 80165b8:	3301      	adds	r3, #1
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	dd07      	ble.n	80165ce <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	8b5b      	ldrh	r3, [r3, #26]
 80165c2:	f043 0302 	orr.w	r3, r3, #2
 80165c6:	b29a      	uxth	r2, r3
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80165cc:	e7ff      	b.n	80165ce <tcp_receive+0xf0e>
 80165ce:	bf00      	nop
 80165d0:	3750      	adds	r7, #80	; 0x50
 80165d2:	46bd      	mov	sp, r7
 80165d4:	bdb0      	pop	{r4, r5, r7, pc}
 80165d6:	bf00      	nop
 80165d8:	200110c4 	.word	0x200110c4
 80165dc:	200110a4 	.word	0x200110a4
 80165e0:	200110ce 	.word	0x200110ce
 80165e4:	0801ec70 	.word	0x0801ec70
 80165e8:	0801f018 	.word	0x0801f018
 80165ec:	0801ecbc 	.word	0x0801ecbc

080165f0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80165f0:	b480      	push	{r7}
 80165f2:	b083      	sub	sp, #12
 80165f4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80165f6:	4b15      	ldr	r3, [pc, #84]	; (801664c <tcp_get_next_optbyte+0x5c>)
 80165f8:	881b      	ldrh	r3, [r3, #0]
 80165fa:	1c5a      	adds	r2, r3, #1
 80165fc:	b291      	uxth	r1, r2
 80165fe:	4a13      	ldr	r2, [pc, #76]	; (801664c <tcp_get_next_optbyte+0x5c>)
 8016600:	8011      	strh	r1, [r2, #0]
 8016602:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8016604:	4b12      	ldr	r3, [pc, #72]	; (8016650 <tcp_get_next_optbyte+0x60>)
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d004      	beq.n	8016616 <tcp_get_next_optbyte+0x26>
 801660c:	4b11      	ldr	r3, [pc, #68]	; (8016654 <tcp_get_next_optbyte+0x64>)
 801660e:	881b      	ldrh	r3, [r3, #0]
 8016610:	88fa      	ldrh	r2, [r7, #6]
 8016612:	429a      	cmp	r2, r3
 8016614:	d208      	bcs.n	8016628 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8016616:	4b10      	ldr	r3, [pc, #64]	; (8016658 <tcp_get_next_optbyte+0x68>)
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	3314      	adds	r3, #20
 801661c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801661e:	88fb      	ldrh	r3, [r7, #6]
 8016620:	683a      	ldr	r2, [r7, #0]
 8016622:	4413      	add	r3, r2
 8016624:	781b      	ldrb	r3, [r3, #0]
 8016626:	e00b      	b.n	8016640 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8016628:	88fb      	ldrh	r3, [r7, #6]
 801662a:	b2da      	uxtb	r2, r3
 801662c:	4b09      	ldr	r3, [pc, #36]	; (8016654 <tcp_get_next_optbyte+0x64>)
 801662e:	881b      	ldrh	r3, [r3, #0]
 8016630:	b2db      	uxtb	r3, r3
 8016632:	1ad3      	subs	r3, r2, r3
 8016634:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8016636:	4b06      	ldr	r3, [pc, #24]	; (8016650 <tcp_get_next_optbyte+0x60>)
 8016638:	681a      	ldr	r2, [r3, #0]
 801663a:	797b      	ldrb	r3, [r7, #5]
 801663c:	4413      	add	r3, r2
 801663e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016640:	4618      	mov	r0, r3
 8016642:	370c      	adds	r7, #12
 8016644:	46bd      	mov	sp, r7
 8016646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801664a:	4770      	bx	lr
 801664c:	200110c0 	.word	0x200110c0
 8016650:	200110bc 	.word	0x200110bc
 8016654:	200110ba 	.word	0x200110ba
 8016658:	200110b4 	.word	0x200110b4

0801665c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801665c:	b580      	push	{r7, lr}
 801665e:	b084      	sub	sp, #16
 8016660:	af00      	add	r7, sp, #0
 8016662:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	2b00      	cmp	r3, #0
 8016668:	d106      	bne.n	8016678 <tcp_parseopt+0x1c>
 801666a:	4b32      	ldr	r3, [pc, #200]	; (8016734 <tcp_parseopt+0xd8>)
 801666c:	f240 727d 	movw	r2, #1917	; 0x77d
 8016670:	4931      	ldr	r1, [pc, #196]	; (8016738 <tcp_parseopt+0xdc>)
 8016672:	4832      	ldr	r0, [pc, #200]	; (801673c <tcp_parseopt+0xe0>)
 8016674:	f005 f8c6 	bl	801b804 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8016678:	4b31      	ldr	r3, [pc, #196]	; (8016740 <tcp_parseopt+0xe4>)
 801667a:	881b      	ldrh	r3, [r3, #0]
 801667c:	2b00      	cmp	r3, #0
 801667e:	d055      	beq.n	801672c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016680:	4b30      	ldr	r3, [pc, #192]	; (8016744 <tcp_parseopt+0xe8>)
 8016682:	2200      	movs	r2, #0
 8016684:	801a      	strh	r2, [r3, #0]
 8016686:	e045      	b.n	8016714 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8016688:	f7ff ffb2 	bl	80165f0 <tcp_get_next_optbyte>
 801668c:	4603      	mov	r3, r0
 801668e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8016690:	7bfb      	ldrb	r3, [r7, #15]
 8016692:	2b02      	cmp	r3, #2
 8016694:	d006      	beq.n	80166a4 <tcp_parseopt+0x48>
 8016696:	2b02      	cmp	r3, #2
 8016698:	dc2b      	bgt.n	80166f2 <tcp_parseopt+0x96>
 801669a:	2b00      	cmp	r3, #0
 801669c:	d041      	beq.n	8016722 <tcp_parseopt+0xc6>
 801669e:	2b01      	cmp	r3, #1
 80166a0:	d127      	bne.n	80166f2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80166a2:	e037      	b.n	8016714 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80166a4:	f7ff ffa4 	bl	80165f0 <tcp_get_next_optbyte>
 80166a8:	4603      	mov	r3, r0
 80166aa:	2b04      	cmp	r3, #4
 80166ac:	d13b      	bne.n	8016726 <tcp_parseopt+0xca>
 80166ae:	4b25      	ldr	r3, [pc, #148]	; (8016744 <tcp_parseopt+0xe8>)
 80166b0:	881b      	ldrh	r3, [r3, #0]
 80166b2:	3301      	adds	r3, #1
 80166b4:	4a22      	ldr	r2, [pc, #136]	; (8016740 <tcp_parseopt+0xe4>)
 80166b6:	8812      	ldrh	r2, [r2, #0]
 80166b8:	4293      	cmp	r3, r2
 80166ba:	da34      	bge.n	8016726 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80166bc:	f7ff ff98 	bl	80165f0 <tcp_get_next_optbyte>
 80166c0:	4603      	mov	r3, r0
 80166c2:	b29b      	uxth	r3, r3
 80166c4:	021b      	lsls	r3, r3, #8
 80166c6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80166c8:	f7ff ff92 	bl	80165f0 <tcp_get_next_optbyte>
 80166cc:	4603      	mov	r3, r0
 80166ce:	b29a      	uxth	r2, r3
 80166d0:	89bb      	ldrh	r3, [r7, #12]
 80166d2:	4313      	orrs	r3, r2
 80166d4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80166d6:	89bb      	ldrh	r3, [r7, #12]
 80166d8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80166dc:	d804      	bhi.n	80166e8 <tcp_parseopt+0x8c>
 80166de:	89bb      	ldrh	r3, [r7, #12]
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d001      	beq.n	80166e8 <tcp_parseopt+0x8c>
 80166e4:	89ba      	ldrh	r2, [r7, #12]
 80166e6:	e001      	b.n	80166ec <tcp_parseopt+0x90>
 80166e8:	f44f 7206 	mov.w	r2, #536	; 0x218
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80166f0:	e010      	b.n	8016714 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80166f2:	f7ff ff7d 	bl	80165f0 <tcp_get_next_optbyte>
 80166f6:	4603      	mov	r3, r0
 80166f8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80166fa:	7afb      	ldrb	r3, [r7, #11]
 80166fc:	2b01      	cmp	r3, #1
 80166fe:	d914      	bls.n	801672a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8016700:	7afb      	ldrb	r3, [r7, #11]
 8016702:	b29a      	uxth	r2, r3
 8016704:	4b0f      	ldr	r3, [pc, #60]	; (8016744 <tcp_parseopt+0xe8>)
 8016706:	881b      	ldrh	r3, [r3, #0]
 8016708:	4413      	add	r3, r2
 801670a:	b29b      	uxth	r3, r3
 801670c:	3b02      	subs	r3, #2
 801670e:	b29a      	uxth	r2, r3
 8016710:	4b0c      	ldr	r3, [pc, #48]	; (8016744 <tcp_parseopt+0xe8>)
 8016712:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016714:	4b0b      	ldr	r3, [pc, #44]	; (8016744 <tcp_parseopt+0xe8>)
 8016716:	881a      	ldrh	r2, [r3, #0]
 8016718:	4b09      	ldr	r3, [pc, #36]	; (8016740 <tcp_parseopt+0xe4>)
 801671a:	881b      	ldrh	r3, [r3, #0]
 801671c:	429a      	cmp	r2, r3
 801671e:	d3b3      	bcc.n	8016688 <tcp_parseopt+0x2c>
 8016720:	e004      	b.n	801672c <tcp_parseopt+0xd0>
          return;
 8016722:	bf00      	nop
 8016724:	e002      	b.n	801672c <tcp_parseopt+0xd0>
            return;
 8016726:	bf00      	nop
 8016728:	e000      	b.n	801672c <tcp_parseopt+0xd0>
            return;
 801672a:	bf00      	nop
      }
    }
  }
}
 801672c:	3710      	adds	r7, #16
 801672e:	46bd      	mov	sp, r7
 8016730:	bd80      	pop	{r7, pc}
 8016732:	bf00      	nop
 8016734:	0801ec70 	.word	0x0801ec70
 8016738:	0801f0d4 	.word	0x0801f0d4
 801673c:	0801ecbc 	.word	0x0801ecbc
 8016740:	200110b8 	.word	0x200110b8
 8016744:	200110c0 	.word	0x200110c0

08016748 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8016748:	b480      	push	{r7}
 801674a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801674c:	4b05      	ldr	r3, [pc, #20]	; (8016764 <tcp_trigger_input_pcb_close+0x1c>)
 801674e:	781b      	ldrb	r3, [r3, #0]
 8016750:	f043 0310 	orr.w	r3, r3, #16
 8016754:	b2da      	uxtb	r2, r3
 8016756:	4b03      	ldr	r3, [pc, #12]	; (8016764 <tcp_trigger_input_pcb_close+0x1c>)
 8016758:	701a      	strb	r2, [r3, #0]
}
 801675a:	bf00      	nop
 801675c:	46bd      	mov	sp, r7
 801675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016762:	4770      	bx	lr
 8016764:	200110d1 	.word	0x200110d1

08016768 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8016768:	b580      	push	{r7, lr}
 801676a:	b084      	sub	sp, #16
 801676c:	af00      	add	r7, sp, #0
 801676e:	60f8      	str	r0, [r7, #12]
 8016770:	60b9      	str	r1, [r7, #8]
 8016772:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	2b00      	cmp	r3, #0
 8016778:	d00a      	beq.n	8016790 <tcp_route+0x28>
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	7a1b      	ldrb	r3, [r3, #8]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d006      	beq.n	8016790 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	7a1b      	ldrb	r3, [r3, #8]
 8016786:	4618      	mov	r0, r3
 8016788:	f7fb f8e6 	bl	8011958 <netif_get_by_index>
 801678c:	4603      	mov	r3, r0
 801678e:	e003      	b.n	8016798 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8016790:	6878      	ldr	r0, [r7, #4]
 8016792:	f003 fc4b 	bl	801a02c <ip4_route>
 8016796:	4603      	mov	r3, r0
  }
}
 8016798:	4618      	mov	r0, r3
 801679a:	3710      	adds	r7, #16
 801679c:	46bd      	mov	sp, r7
 801679e:	bd80      	pop	{r7, pc}

080167a0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80167a0:	b590      	push	{r4, r7, lr}
 80167a2:	b087      	sub	sp, #28
 80167a4:	af00      	add	r7, sp, #0
 80167a6:	60f8      	str	r0, [r7, #12]
 80167a8:	60b9      	str	r1, [r7, #8]
 80167aa:	603b      	str	r3, [r7, #0]
 80167ac:	4613      	mov	r3, r2
 80167ae:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d105      	bne.n	80167c2 <tcp_create_segment+0x22>
 80167b6:	4b44      	ldr	r3, [pc, #272]	; (80168c8 <tcp_create_segment+0x128>)
 80167b8:	22a3      	movs	r2, #163	; 0xa3
 80167ba:	4944      	ldr	r1, [pc, #272]	; (80168cc <tcp_create_segment+0x12c>)
 80167bc:	4844      	ldr	r0, [pc, #272]	; (80168d0 <tcp_create_segment+0x130>)
 80167be:	f005 f821 	bl	801b804 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80167c2:	68bb      	ldr	r3, [r7, #8]
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d105      	bne.n	80167d4 <tcp_create_segment+0x34>
 80167c8:	4b3f      	ldr	r3, [pc, #252]	; (80168c8 <tcp_create_segment+0x128>)
 80167ca:	22a4      	movs	r2, #164	; 0xa4
 80167cc:	4941      	ldr	r1, [pc, #260]	; (80168d4 <tcp_create_segment+0x134>)
 80167ce:	4840      	ldr	r0, [pc, #256]	; (80168d0 <tcp_create_segment+0x130>)
 80167d0:	f005 f818 	bl	801b804 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80167d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80167d8:	009b      	lsls	r3, r3, #2
 80167da:	b2db      	uxtb	r3, r3
 80167dc:	f003 0304 	and.w	r3, r3, #4
 80167e0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80167e2:	2003      	movs	r0, #3
 80167e4:	f7fa fd2c 	bl	8011240 <memp_malloc>
 80167e8:	6138      	str	r0, [r7, #16]
 80167ea:	693b      	ldr	r3, [r7, #16]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d104      	bne.n	80167fa <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80167f0:	68b8      	ldr	r0, [r7, #8]
 80167f2:	f7fb fc71 	bl	80120d8 <pbuf_free>
    return NULL;
 80167f6:	2300      	movs	r3, #0
 80167f8:	e061      	b.n	80168be <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80167fa:	693b      	ldr	r3, [r7, #16]
 80167fc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016800:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8016802:	693b      	ldr	r3, [r7, #16]
 8016804:	2200      	movs	r2, #0
 8016806:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8016808:	693b      	ldr	r3, [r7, #16]
 801680a:	68ba      	ldr	r2, [r7, #8]
 801680c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801680e:	68bb      	ldr	r3, [r7, #8]
 8016810:	891a      	ldrh	r2, [r3, #8]
 8016812:	7dfb      	ldrb	r3, [r7, #23]
 8016814:	b29b      	uxth	r3, r3
 8016816:	429a      	cmp	r2, r3
 8016818:	d205      	bcs.n	8016826 <tcp_create_segment+0x86>
 801681a:	4b2b      	ldr	r3, [pc, #172]	; (80168c8 <tcp_create_segment+0x128>)
 801681c:	22b0      	movs	r2, #176	; 0xb0
 801681e:	492e      	ldr	r1, [pc, #184]	; (80168d8 <tcp_create_segment+0x138>)
 8016820:	482b      	ldr	r0, [pc, #172]	; (80168d0 <tcp_create_segment+0x130>)
 8016822:	f004 ffef 	bl	801b804 <iprintf>
  seg->len = p->tot_len - optlen;
 8016826:	68bb      	ldr	r3, [r7, #8]
 8016828:	891a      	ldrh	r2, [r3, #8]
 801682a:	7dfb      	ldrb	r3, [r7, #23]
 801682c:	b29b      	uxth	r3, r3
 801682e:	1ad3      	subs	r3, r2, r3
 8016830:	b29a      	uxth	r2, r3
 8016832:	693b      	ldr	r3, [r7, #16]
 8016834:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8016836:	2114      	movs	r1, #20
 8016838:	68b8      	ldr	r0, [r7, #8]
 801683a:	f7fb fb85 	bl	8011f48 <pbuf_add_header>
 801683e:	4603      	mov	r3, r0
 8016840:	2b00      	cmp	r3, #0
 8016842:	d004      	beq.n	801684e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8016844:	6938      	ldr	r0, [r7, #16]
 8016846:	f7fd f800 	bl	801384a <tcp_seg_free>
    return NULL;
 801684a:	2300      	movs	r3, #0
 801684c:	e037      	b.n	80168be <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801684e:	693b      	ldr	r3, [r7, #16]
 8016850:	685b      	ldr	r3, [r3, #4]
 8016852:	685a      	ldr	r2, [r3, #4]
 8016854:	693b      	ldr	r3, [r7, #16]
 8016856:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	8ada      	ldrh	r2, [r3, #22]
 801685c:	693b      	ldr	r3, [r7, #16]
 801685e:	68dc      	ldr	r4, [r3, #12]
 8016860:	4610      	mov	r0, r2
 8016862:	f7fa f815 	bl	8010890 <lwip_htons>
 8016866:	4603      	mov	r3, r0
 8016868:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	8b1a      	ldrh	r2, [r3, #24]
 801686e:	693b      	ldr	r3, [r7, #16]
 8016870:	68dc      	ldr	r4, [r3, #12]
 8016872:	4610      	mov	r0, r2
 8016874:	f7fa f80c 	bl	8010890 <lwip_htons>
 8016878:	4603      	mov	r3, r0
 801687a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801687c:	693b      	ldr	r3, [r7, #16]
 801687e:	68dc      	ldr	r4, [r3, #12]
 8016880:	6838      	ldr	r0, [r7, #0]
 8016882:	f7fa f81a 	bl	80108ba <lwip_htonl>
 8016886:	4603      	mov	r3, r0
 8016888:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801688a:	7dfb      	ldrb	r3, [r7, #23]
 801688c:	089b      	lsrs	r3, r3, #2
 801688e:	b2db      	uxtb	r3, r3
 8016890:	b29b      	uxth	r3, r3
 8016892:	3305      	adds	r3, #5
 8016894:	b29b      	uxth	r3, r3
 8016896:	031b      	lsls	r3, r3, #12
 8016898:	b29a      	uxth	r2, r3
 801689a:	79fb      	ldrb	r3, [r7, #7]
 801689c:	b29b      	uxth	r3, r3
 801689e:	4313      	orrs	r3, r2
 80168a0:	b29a      	uxth	r2, r3
 80168a2:	693b      	ldr	r3, [r7, #16]
 80168a4:	68dc      	ldr	r4, [r3, #12]
 80168a6:	4610      	mov	r0, r2
 80168a8:	f7f9 fff2 	bl	8010890 <lwip_htons>
 80168ac:	4603      	mov	r3, r0
 80168ae:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80168b0:	693b      	ldr	r3, [r7, #16]
 80168b2:	68db      	ldr	r3, [r3, #12]
 80168b4:	2200      	movs	r2, #0
 80168b6:	749a      	strb	r2, [r3, #18]
 80168b8:	2200      	movs	r2, #0
 80168ba:	74da      	strb	r2, [r3, #19]
  return seg;
 80168bc:	693b      	ldr	r3, [r7, #16]
}
 80168be:	4618      	mov	r0, r3
 80168c0:	371c      	adds	r7, #28
 80168c2:	46bd      	mov	sp, r7
 80168c4:	bd90      	pop	{r4, r7, pc}
 80168c6:	bf00      	nop
 80168c8:	0801f0f0 	.word	0x0801f0f0
 80168cc:	0801f124 	.word	0x0801f124
 80168d0:	0801f144 	.word	0x0801f144
 80168d4:	0801f16c 	.word	0x0801f16c
 80168d8:	0801f190 	.word	0x0801f190

080168dc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	b086      	sub	sp, #24
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	607b      	str	r3, [r7, #4]
 80168e4:	4603      	mov	r3, r0
 80168e6:	73fb      	strb	r3, [r7, #15]
 80168e8:	460b      	mov	r3, r1
 80168ea:	81bb      	strh	r3, [r7, #12]
 80168ec:	4613      	mov	r3, r2
 80168ee:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80168f0:	89bb      	ldrh	r3, [r7, #12]
 80168f2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d105      	bne.n	8016906 <tcp_pbuf_prealloc+0x2a>
 80168fa:	4b30      	ldr	r3, [pc, #192]	; (80169bc <tcp_pbuf_prealloc+0xe0>)
 80168fc:	22e8      	movs	r2, #232	; 0xe8
 80168fe:	4930      	ldr	r1, [pc, #192]	; (80169c0 <tcp_pbuf_prealloc+0xe4>)
 8016900:	4830      	ldr	r0, [pc, #192]	; (80169c4 <tcp_pbuf_prealloc+0xe8>)
 8016902:	f004 ff7f 	bl	801b804 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8016906:	6a3b      	ldr	r3, [r7, #32]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d105      	bne.n	8016918 <tcp_pbuf_prealloc+0x3c>
 801690c:	4b2b      	ldr	r3, [pc, #172]	; (80169bc <tcp_pbuf_prealloc+0xe0>)
 801690e:	22e9      	movs	r2, #233	; 0xe9
 8016910:	492d      	ldr	r1, [pc, #180]	; (80169c8 <tcp_pbuf_prealloc+0xec>)
 8016912:	482c      	ldr	r0, [pc, #176]	; (80169c4 <tcp_pbuf_prealloc+0xe8>)
 8016914:	f004 ff76 	bl	801b804 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8016918:	89ba      	ldrh	r2, [r7, #12]
 801691a:	897b      	ldrh	r3, [r7, #10]
 801691c:	429a      	cmp	r2, r3
 801691e:	d221      	bcs.n	8016964 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8016920:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016924:	f003 0302 	and.w	r3, r3, #2
 8016928:	2b00      	cmp	r3, #0
 801692a:	d111      	bne.n	8016950 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801692c:	6a3b      	ldr	r3, [r7, #32]
 801692e:	8b5b      	ldrh	r3, [r3, #26]
 8016930:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8016934:	2b00      	cmp	r3, #0
 8016936:	d115      	bne.n	8016964 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8016938:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801693c:	2b00      	cmp	r3, #0
 801693e:	d007      	beq.n	8016950 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8016940:	6a3b      	ldr	r3, [r7, #32]
 8016942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8016944:	2b00      	cmp	r3, #0
 8016946:	d103      	bne.n	8016950 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8016948:	6a3b      	ldr	r3, [r7, #32]
 801694a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801694c:	2b00      	cmp	r3, #0
 801694e:	d009      	beq.n	8016964 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8016950:	89bb      	ldrh	r3, [r7, #12]
 8016952:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8016956:	f023 0203 	bic.w	r2, r3, #3
 801695a:	897b      	ldrh	r3, [r7, #10]
 801695c:	4293      	cmp	r3, r2
 801695e:	bf28      	it	cs
 8016960:	4613      	movcs	r3, r2
 8016962:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8016964:	8af9      	ldrh	r1, [r7, #22]
 8016966:	7bfb      	ldrb	r3, [r7, #15]
 8016968:	f44f 7220 	mov.w	r2, #640	; 0x280
 801696c:	4618      	mov	r0, r3
 801696e:	f7fb f89d 	bl	8011aac <pbuf_alloc>
 8016972:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016974:	693b      	ldr	r3, [r7, #16]
 8016976:	2b00      	cmp	r3, #0
 8016978:	d101      	bne.n	801697e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801697a:	2300      	movs	r3, #0
 801697c:	e019      	b.n	80169b2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801697e:	693b      	ldr	r3, [r7, #16]
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	2b00      	cmp	r3, #0
 8016984:	d006      	beq.n	8016994 <tcp_pbuf_prealloc+0xb8>
 8016986:	4b0d      	ldr	r3, [pc, #52]	; (80169bc <tcp_pbuf_prealloc+0xe0>)
 8016988:	f240 120b 	movw	r2, #267	; 0x10b
 801698c:	490f      	ldr	r1, [pc, #60]	; (80169cc <tcp_pbuf_prealloc+0xf0>)
 801698e:	480d      	ldr	r0, [pc, #52]	; (80169c4 <tcp_pbuf_prealloc+0xe8>)
 8016990:	f004 ff38 	bl	801b804 <iprintf>
  *oversize = p->len - length;
 8016994:	693b      	ldr	r3, [r7, #16]
 8016996:	895a      	ldrh	r2, [r3, #10]
 8016998:	89bb      	ldrh	r3, [r7, #12]
 801699a:	1ad3      	subs	r3, r2, r3
 801699c:	b29a      	uxth	r2, r3
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80169a2:	693b      	ldr	r3, [r7, #16]
 80169a4:	89ba      	ldrh	r2, [r7, #12]
 80169a6:	811a      	strh	r2, [r3, #8]
 80169a8:	693b      	ldr	r3, [r7, #16]
 80169aa:	891a      	ldrh	r2, [r3, #8]
 80169ac:	693b      	ldr	r3, [r7, #16]
 80169ae:	815a      	strh	r2, [r3, #10]
  return p;
 80169b0:	693b      	ldr	r3, [r7, #16]
}
 80169b2:	4618      	mov	r0, r3
 80169b4:	3718      	adds	r7, #24
 80169b6:	46bd      	mov	sp, r7
 80169b8:	bd80      	pop	{r7, pc}
 80169ba:	bf00      	nop
 80169bc:	0801f0f0 	.word	0x0801f0f0
 80169c0:	0801f1a8 	.word	0x0801f1a8
 80169c4:	0801f144 	.word	0x0801f144
 80169c8:	0801f1cc 	.word	0x0801f1cc
 80169cc:	0801f1ec 	.word	0x0801f1ec

080169d0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80169d0:	b580      	push	{r7, lr}
 80169d2:	b082      	sub	sp, #8
 80169d4:	af00      	add	r7, sp, #0
 80169d6:	6078      	str	r0, [r7, #4]
 80169d8:	460b      	mov	r3, r1
 80169da:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d106      	bne.n	80169f0 <tcp_write_checks+0x20>
 80169e2:	4b33      	ldr	r3, [pc, #204]	; (8016ab0 <tcp_write_checks+0xe0>)
 80169e4:	f240 1233 	movw	r2, #307	; 0x133
 80169e8:	4932      	ldr	r1, [pc, #200]	; (8016ab4 <tcp_write_checks+0xe4>)
 80169ea:	4833      	ldr	r0, [pc, #204]	; (8016ab8 <tcp_write_checks+0xe8>)
 80169ec:	f004 ff0a 	bl	801b804 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	7d1b      	ldrb	r3, [r3, #20]
 80169f4:	2b04      	cmp	r3, #4
 80169f6:	d00e      	beq.n	8016a16 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80169fc:	2b07      	cmp	r3, #7
 80169fe:	d00a      	beq.n	8016a16 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8016a04:	2b02      	cmp	r3, #2
 8016a06:	d006      	beq.n	8016a16 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8016a0c:	2b03      	cmp	r3, #3
 8016a0e:	d002      	beq.n	8016a16 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8016a10:	f06f 030a 	mvn.w	r3, #10
 8016a14:	e048      	b.n	8016aa8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8016a16:	887b      	ldrh	r3, [r7, #2]
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d101      	bne.n	8016a20 <tcp_write_checks+0x50>
    return ERR_OK;
 8016a1c:	2300      	movs	r3, #0
 8016a1e:	e043      	b.n	8016aa8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016a26:	887a      	ldrh	r2, [r7, #2]
 8016a28:	429a      	cmp	r2, r3
 8016a2a:	d909      	bls.n	8016a40 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	8b5b      	ldrh	r3, [r3, #26]
 8016a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016a34:	b29a      	uxth	r2, r3
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8016a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8016a3e:	e033      	b.n	8016aa8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016a46:	2b08      	cmp	r3, #8
 8016a48:	d909      	bls.n	8016a5e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	8b5b      	ldrh	r3, [r3, #26]
 8016a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016a52:	b29a      	uxth	r2, r3
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8016a58:	f04f 33ff 	mov.w	r3, #4294967295
 8016a5c:	e024      	b.n	8016aa8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d00f      	beq.n	8016a88 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d11a      	bne.n	8016aa6 <tcp_write_checks+0xd6>
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d116      	bne.n	8016aa6 <tcp_write_checks+0xd6>
 8016a78:	4b0d      	ldr	r3, [pc, #52]	; (8016ab0 <tcp_write_checks+0xe0>)
 8016a7a:	f240 1255 	movw	r2, #341	; 0x155
 8016a7e:	490f      	ldr	r1, [pc, #60]	; (8016abc <tcp_write_checks+0xec>)
 8016a80:	480d      	ldr	r0, [pc, #52]	; (8016ab8 <tcp_write_checks+0xe8>)
 8016a82:	f004 febf 	bl	801b804 <iprintf>
 8016a86:	e00e      	b.n	8016aa6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d103      	bne.n	8016a98 <tcp_write_checks+0xc8>
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d006      	beq.n	8016aa6 <tcp_write_checks+0xd6>
 8016a98:	4b05      	ldr	r3, [pc, #20]	; (8016ab0 <tcp_write_checks+0xe0>)
 8016a9a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8016a9e:	4908      	ldr	r1, [pc, #32]	; (8016ac0 <tcp_write_checks+0xf0>)
 8016aa0:	4805      	ldr	r0, [pc, #20]	; (8016ab8 <tcp_write_checks+0xe8>)
 8016aa2:	f004 feaf 	bl	801b804 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8016aa6:	2300      	movs	r3, #0
}
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	3708      	adds	r7, #8
 8016aac:	46bd      	mov	sp, r7
 8016aae:	bd80      	pop	{r7, pc}
 8016ab0:	0801f0f0 	.word	0x0801f0f0
 8016ab4:	0801f200 	.word	0x0801f200
 8016ab8:	0801f144 	.word	0x0801f144
 8016abc:	0801f220 	.word	0x0801f220
 8016ac0:	0801f25c 	.word	0x0801f25c

08016ac4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8016ac4:	b590      	push	{r4, r7, lr}
 8016ac6:	b09b      	sub	sp, #108	; 0x6c
 8016ac8:	af04      	add	r7, sp, #16
 8016aca:	60f8      	str	r0, [r7, #12]
 8016acc:	60b9      	str	r1, [r7, #8]
 8016ace:	4611      	mov	r1, r2
 8016ad0:	461a      	mov	r2, r3
 8016ad2:	460b      	mov	r3, r1
 8016ad4:	80fb      	strh	r3, [r7, #6]
 8016ad6:	4613      	mov	r3, r2
 8016ad8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8016ada:	2300      	movs	r3, #0
 8016adc:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8016ade:	2300      	movs	r3, #0
 8016ae0:	653b      	str	r3, [r7, #80]	; 0x50
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016ae6:	2300      	movs	r3, #0
 8016ae8:	64bb      	str	r3, [r7, #72]	; 0x48
 8016aea:	2300      	movs	r3, #0
 8016aec:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8016aee:	2300      	movs	r3, #0
 8016af0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8016af4:	2300      	movs	r3, #0
 8016af6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8016afa:	2300      	movs	r3, #0
 8016afc:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8016afe:	2300      	movs	r3, #0
 8016b00:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8016b02:	2300      	movs	r3, #0
 8016b04:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d109      	bne.n	8016b20 <tcp_write+0x5c>
 8016b0c:	4ba4      	ldr	r3, [pc, #656]	; (8016da0 <tcp_write+0x2dc>)
 8016b0e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8016b12:	49a4      	ldr	r1, [pc, #656]	; (8016da4 <tcp_write+0x2e0>)
 8016b14:	48a4      	ldr	r0, [pc, #656]	; (8016da8 <tcp_write+0x2e4>)
 8016b16:	f004 fe75 	bl	801b804 <iprintf>
 8016b1a:	f06f 030f 	mvn.w	r3, #15
 8016b1e:	e32a      	b.n	8017176 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8016b26:	085b      	lsrs	r3, r3, #1
 8016b28:	b29a      	uxth	r2, r3
 8016b2a:	68fb      	ldr	r3, [r7, #12]
 8016b2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016b2e:	4293      	cmp	r3, r2
 8016b30:	bf28      	it	cs
 8016b32:	4613      	movcs	r3, r2
 8016b34:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8016b36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d102      	bne.n	8016b42 <tcp_write+0x7e>
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016b40:	e000      	b.n	8016b44 <tcp_write+0x80>
 8016b42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b44:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8016b46:	68bb      	ldr	r3, [r7, #8]
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d109      	bne.n	8016b60 <tcp_write+0x9c>
 8016b4c:	4b94      	ldr	r3, [pc, #592]	; (8016da0 <tcp_write+0x2dc>)
 8016b4e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8016b52:	4996      	ldr	r1, [pc, #600]	; (8016dac <tcp_write+0x2e8>)
 8016b54:	4894      	ldr	r0, [pc, #592]	; (8016da8 <tcp_write+0x2e4>)
 8016b56:	f004 fe55 	bl	801b804 <iprintf>
 8016b5a:	f06f 030f 	mvn.w	r3, #15
 8016b5e:	e30a      	b.n	8017176 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8016b60:	88fb      	ldrh	r3, [r7, #6]
 8016b62:	4619      	mov	r1, r3
 8016b64:	68f8      	ldr	r0, [r7, #12]
 8016b66:	f7ff ff33 	bl	80169d0 <tcp_write_checks>
 8016b6a:	4603      	mov	r3, r0
 8016b6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8016b70:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d002      	beq.n	8016b7e <tcp_write+0xba>
    return err;
 8016b78:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8016b7c:	e2fb      	b.n	8017176 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016b84:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016b88:	2300      	movs	r3, #0
 8016b8a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	f000 80f6 	beq.w	8016d84 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b9c:	653b      	str	r3, [r7, #80]	; 0x50
 8016b9e:	e002      	b.n	8016ba6 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8016ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016ba2:	681b      	ldr	r3, [r3, #0]
 8016ba4:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d1f8      	bne.n	8016ba0 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8016bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016bb0:	7a9b      	ldrb	r3, [r3, #10]
 8016bb2:	009b      	lsls	r3, r3, #2
 8016bb4:	b29b      	uxth	r3, r3
 8016bb6:	f003 0304 	and.w	r3, r3, #4
 8016bba:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8016bbc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016bc0:	891b      	ldrh	r3, [r3, #8]
 8016bc2:	4619      	mov	r1, r3
 8016bc4:	8c3b      	ldrh	r3, [r7, #32]
 8016bc6:	440b      	add	r3, r1
 8016bc8:	429a      	cmp	r2, r3
 8016bca:	da06      	bge.n	8016bda <tcp_write+0x116>
 8016bcc:	4b74      	ldr	r3, [pc, #464]	; (8016da0 <tcp_write+0x2dc>)
 8016bce:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8016bd2:	4977      	ldr	r1, [pc, #476]	; (8016db0 <tcp_write+0x2ec>)
 8016bd4:	4874      	ldr	r0, [pc, #464]	; (8016da8 <tcp_write+0x2e4>)
 8016bd6:	f004 fe15 	bl	801b804 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8016bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016bdc:	891a      	ldrh	r2, [r3, #8]
 8016bde:	8c3b      	ldrh	r3, [r7, #32]
 8016be0:	4413      	add	r3, r2
 8016be2:	b29b      	uxth	r3, r3
 8016be4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016be6:	1ad3      	subs	r3, r2, r3
 8016be8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016bf0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8016bf2:	8a7b      	ldrh	r3, [r7, #18]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d026      	beq.n	8016c46 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8016bf8:	8a7b      	ldrh	r3, [r7, #18]
 8016bfa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016bfc:	429a      	cmp	r2, r3
 8016bfe:	d206      	bcs.n	8016c0e <tcp_write+0x14a>
 8016c00:	4b67      	ldr	r3, [pc, #412]	; (8016da0 <tcp_write+0x2dc>)
 8016c02:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8016c06:	496b      	ldr	r1, [pc, #428]	; (8016db4 <tcp_write+0x2f0>)
 8016c08:	4867      	ldr	r0, [pc, #412]	; (8016da8 <tcp_write+0x2e4>)
 8016c0a:	f004 fdfb 	bl	801b804 <iprintf>
      seg = last_unsent;
 8016c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016c10:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8016c12:	8a7b      	ldrh	r3, [r7, #18]
 8016c14:	88fa      	ldrh	r2, [r7, #6]
 8016c16:	4293      	cmp	r3, r2
 8016c18:	bf28      	it	cs
 8016c1a:	4613      	movcs	r3, r2
 8016c1c:	b29b      	uxth	r3, r3
 8016c1e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016c20:	4293      	cmp	r3, r2
 8016c22:	bf28      	it	cs
 8016c24:	4613      	movcs	r3, r2
 8016c26:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8016c28:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016c2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016c2e:	4413      	add	r3, r2
 8016c30:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8016c34:	8a7a      	ldrh	r2, [r7, #18]
 8016c36:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016c38:	1ad3      	subs	r3, r2, r3
 8016c3a:	b29b      	uxth	r3, r3
 8016c3c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8016c3e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016c40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016c42:	1ad3      	subs	r3, r2, r3
 8016c44:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8016c46:	8a7b      	ldrh	r3, [r7, #18]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d00b      	beq.n	8016c64 <tcp_write+0x1a0>
 8016c4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016c50:	88fb      	ldrh	r3, [r7, #6]
 8016c52:	429a      	cmp	r2, r3
 8016c54:	d006      	beq.n	8016c64 <tcp_write+0x1a0>
 8016c56:	4b52      	ldr	r3, [pc, #328]	; (8016da0 <tcp_write+0x2dc>)
 8016c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016c5c:	4956      	ldr	r1, [pc, #344]	; (8016db8 <tcp_write+0x2f4>)
 8016c5e:	4852      	ldr	r0, [pc, #328]	; (8016da8 <tcp_write+0x2e4>)
 8016c60:	f004 fdd0 	bl	801b804 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8016c64:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016c68:	88fb      	ldrh	r3, [r7, #6]
 8016c6a:	429a      	cmp	r2, r3
 8016c6c:	f080 8167 	bcs.w	8016f3e <tcp_write+0x47a>
 8016c70:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	f000 8163 	beq.w	8016f3e <tcp_write+0x47a>
 8016c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016c7a:	891b      	ldrh	r3, [r3, #8]
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	f000 815e 	beq.w	8016f3e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8016c82:	88fa      	ldrh	r2, [r7, #6]
 8016c84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016c88:	1ad2      	subs	r2, r2, r3
 8016c8a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016c8c:	4293      	cmp	r3, r2
 8016c8e:	bfa8      	it	ge
 8016c90:	4613      	movge	r3, r2
 8016c92:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8016c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016c96:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016c98:	797b      	ldrb	r3, [r7, #5]
 8016c9a:	f003 0301 	and.w	r3, r3, #1
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d027      	beq.n	8016cf2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8016ca2:	f107 0012 	add.w	r0, r7, #18
 8016ca6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016ca8:	8bf9      	ldrh	r1, [r7, #30]
 8016caa:	2301      	movs	r3, #1
 8016cac:	9302      	str	r3, [sp, #8]
 8016cae:	797b      	ldrb	r3, [r7, #5]
 8016cb0:	9301      	str	r3, [sp, #4]
 8016cb2:	68fb      	ldr	r3, [r7, #12]
 8016cb4:	9300      	str	r3, [sp, #0]
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	2000      	movs	r0, #0
 8016cba:	f7ff fe0f 	bl	80168dc <tcp_pbuf_prealloc>
 8016cbe:	6578      	str	r0, [r7, #84]	; 0x54
 8016cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	f000 8225 	beq.w	8017112 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8016cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016cca:	6858      	ldr	r0, [r3, #4]
 8016ccc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016cd0:	68ba      	ldr	r2, [r7, #8]
 8016cd2:	4413      	add	r3, r2
 8016cd4:	8bfa      	ldrh	r2, [r7, #30]
 8016cd6:	4619      	mov	r1, r3
 8016cd8:	f004 fd7e 	bl	801b7d8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8016cdc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016cde:	f7fb fa89 	bl	80121f4 <pbuf_clen>
 8016ce2:	4603      	mov	r3, r0
 8016ce4:	461a      	mov	r2, r3
 8016ce6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016cea:	4413      	add	r3, r2
 8016cec:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8016cf0:	e041      	b.n	8016d76 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8016cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016cf4:	685b      	ldr	r3, [r3, #4]
 8016cf6:	637b      	str	r3, [r7, #52]	; 0x34
 8016cf8:	e002      	b.n	8016d00 <tcp_write+0x23c>
 8016cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8016d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d02:	681b      	ldr	r3, [r3, #0]
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d1f8      	bne.n	8016cfa <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d0a:	7b1b      	ldrb	r3, [r3, #12]
 8016d0c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d115      	bne.n	8016d40 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8016d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d16:	685b      	ldr	r3, [r3, #4]
 8016d18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016d1a:	8952      	ldrh	r2, [r2, #10]
 8016d1c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016d1e:	68ba      	ldr	r2, [r7, #8]
 8016d20:	429a      	cmp	r2, r3
 8016d22:	d10d      	bne.n	8016d40 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8016d24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d006      	beq.n	8016d3a <tcp_write+0x276>
 8016d2c:	4b1c      	ldr	r3, [pc, #112]	; (8016da0 <tcp_write+0x2dc>)
 8016d2e:	f240 2231 	movw	r2, #561	; 0x231
 8016d32:	4922      	ldr	r1, [pc, #136]	; (8016dbc <tcp_write+0x2f8>)
 8016d34:	481c      	ldr	r0, [pc, #112]	; (8016da8 <tcp_write+0x2e4>)
 8016d36:	f004 fd65 	bl	801b804 <iprintf>
          extendlen = seglen;
 8016d3a:	8bfb      	ldrh	r3, [r7, #30]
 8016d3c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8016d3e:	e01a      	b.n	8016d76 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8016d40:	8bfb      	ldrh	r3, [r7, #30]
 8016d42:	2201      	movs	r2, #1
 8016d44:	4619      	mov	r1, r3
 8016d46:	2000      	movs	r0, #0
 8016d48:	f7fa feb0 	bl	8011aac <pbuf_alloc>
 8016d4c:	6578      	str	r0, [r7, #84]	; 0x54
 8016d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	f000 81e0 	beq.w	8017116 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8016d56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016d5a:	68ba      	ldr	r2, [r7, #8]
 8016d5c:	441a      	add	r2, r3
 8016d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016d60:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8016d62:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016d64:	f7fb fa46 	bl	80121f4 <pbuf_clen>
 8016d68:	4603      	mov	r3, r0
 8016d6a:	461a      	mov	r2, r3
 8016d6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016d70:	4413      	add	r3, r2
 8016d72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8016d76:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016d7a:	8bfb      	ldrh	r3, [r7, #30]
 8016d7c:	4413      	add	r3, r2
 8016d7e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8016d82:	e0dc      	b.n	8016f3e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	f000 80d7 	beq.w	8016f3e <tcp_write+0x47a>
 8016d90:	4b03      	ldr	r3, [pc, #12]	; (8016da0 <tcp_write+0x2dc>)
 8016d92:	f240 224a 	movw	r2, #586	; 0x24a
 8016d96:	490a      	ldr	r1, [pc, #40]	; (8016dc0 <tcp_write+0x2fc>)
 8016d98:	4803      	ldr	r0, [pc, #12]	; (8016da8 <tcp_write+0x2e4>)
 8016d9a:	f004 fd33 	bl	801b804 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8016d9e:	e0ce      	b.n	8016f3e <tcp_write+0x47a>
 8016da0:	0801f0f0 	.word	0x0801f0f0
 8016da4:	0801f290 	.word	0x0801f290
 8016da8:	0801f144 	.word	0x0801f144
 8016dac:	0801f2a8 	.word	0x0801f2a8
 8016db0:	0801f2dc 	.word	0x0801f2dc
 8016db4:	0801f2f4 	.word	0x0801f2f4
 8016db8:	0801f314 	.word	0x0801f314
 8016dbc:	0801f334 	.word	0x0801f334
 8016dc0:	0801f360 	.word	0x0801f360
    struct pbuf *p;
    u16_t left = len - pos;
 8016dc4:	88fa      	ldrh	r2, [r7, #6]
 8016dc6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016dca:	1ad3      	subs	r3, r2, r3
 8016dcc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8016dce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016dd2:	b29b      	uxth	r3, r3
 8016dd4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016dd6:	1ad3      	subs	r3, r2, r3
 8016dd8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8016dda:	8b7a      	ldrh	r2, [r7, #26]
 8016ddc:	8bbb      	ldrh	r3, [r7, #28]
 8016dde:	4293      	cmp	r3, r2
 8016de0:	bf28      	it	cs
 8016de2:	4613      	movcs	r3, r2
 8016de4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016de6:	797b      	ldrb	r3, [r7, #5]
 8016de8:	f003 0301 	and.w	r3, r3, #1
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d036      	beq.n	8016e5e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8016df0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016df4:	b29a      	uxth	r2, r3
 8016df6:	8b3b      	ldrh	r3, [r7, #24]
 8016df8:	4413      	add	r3, r2
 8016dfa:	b299      	uxth	r1, r3
 8016dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	bf0c      	ite	eq
 8016e02:	2301      	moveq	r3, #1
 8016e04:	2300      	movne	r3, #0
 8016e06:	b2db      	uxtb	r3, r3
 8016e08:	f107 0012 	add.w	r0, r7, #18
 8016e0c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016e0e:	9302      	str	r3, [sp, #8]
 8016e10:	797b      	ldrb	r3, [r7, #5]
 8016e12:	9301      	str	r3, [sp, #4]
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	9300      	str	r3, [sp, #0]
 8016e18:	4603      	mov	r3, r0
 8016e1a:	2036      	movs	r0, #54	; 0x36
 8016e1c:	f7ff fd5e 	bl	80168dc <tcp_pbuf_prealloc>
 8016e20:	6338      	str	r0, [r7, #48]	; 0x30
 8016e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	f000 8178 	beq.w	801711a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8016e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e2c:	895b      	ldrh	r3, [r3, #10]
 8016e2e:	8b3a      	ldrh	r2, [r7, #24]
 8016e30:	429a      	cmp	r2, r3
 8016e32:	d906      	bls.n	8016e42 <tcp_write+0x37e>
 8016e34:	4b8c      	ldr	r3, [pc, #560]	; (8017068 <tcp_write+0x5a4>)
 8016e36:	f240 2266 	movw	r2, #614	; 0x266
 8016e3a:	498c      	ldr	r1, [pc, #560]	; (801706c <tcp_write+0x5a8>)
 8016e3c:	488c      	ldr	r0, [pc, #560]	; (8017070 <tcp_write+0x5ac>)
 8016e3e:	f004 fce1 	bl	801b804 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8016e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e44:	685a      	ldr	r2, [r3, #4]
 8016e46:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016e4a:	18d0      	adds	r0, r2, r3
 8016e4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016e50:	68ba      	ldr	r2, [r7, #8]
 8016e52:	4413      	add	r3, r2
 8016e54:	8b3a      	ldrh	r2, [r7, #24]
 8016e56:	4619      	mov	r1, r3
 8016e58:	f004 fcbe 	bl	801b7d8 <memcpy>
 8016e5c:	e02f      	b.n	8016ebe <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8016e5e:	8a7b      	ldrh	r3, [r7, #18]
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d006      	beq.n	8016e72 <tcp_write+0x3ae>
 8016e64:	4b80      	ldr	r3, [pc, #512]	; (8017068 <tcp_write+0x5a4>)
 8016e66:	f240 2271 	movw	r2, #625	; 0x271
 8016e6a:	4982      	ldr	r1, [pc, #520]	; (8017074 <tcp_write+0x5b0>)
 8016e6c:	4880      	ldr	r0, [pc, #512]	; (8017070 <tcp_write+0x5ac>)
 8016e6e:	f004 fcc9 	bl	801b804 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8016e72:	8b3b      	ldrh	r3, [r7, #24]
 8016e74:	2201      	movs	r2, #1
 8016e76:	4619      	mov	r1, r3
 8016e78:	2036      	movs	r0, #54	; 0x36
 8016e7a:	f7fa fe17 	bl	8011aac <pbuf_alloc>
 8016e7e:	6178      	str	r0, [r7, #20]
 8016e80:	697b      	ldr	r3, [r7, #20]
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	f000 814b 	beq.w	801711e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8016e88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016e8c:	68ba      	ldr	r2, [r7, #8]
 8016e8e:	441a      	add	r2, r3
 8016e90:	697b      	ldr	r3, [r7, #20]
 8016e92:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016e94:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016e98:	b29b      	uxth	r3, r3
 8016e9a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016e9e:	4619      	mov	r1, r3
 8016ea0:	2036      	movs	r0, #54	; 0x36
 8016ea2:	f7fa fe03 	bl	8011aac <pbuf_alloc>
 8016ea6:	6338      	str	r0, [r7, #48]	; 0x30
 8016ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d103      	bne.n	8016eb6 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8016eae:	6978      	ldr	r0, [r7, #20]
 8016eb0:	f7fb f912 	bl	80120d8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8016eb4:	e136      	b.n	8017124 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8016eb6:	6979      	ldr	r1, [r7, #20]
 8016eb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016eba:	f7fb f9db 	bl	8012274 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8016ebe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016ec0:	f7fb f998 	bl	80121f4 <pbuf_clen>
 8016ec4:	4603      	mov	r3, r0
 8016ec6:	461a      	mov	r2, r3
 8016ec8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016ecc:	4413      	add	r3, r2
 8016ece:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8016ed2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016ed6:	2b09      	cmp	r3, #9
 8016ed8:	d903      	bls.n	8016ee2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8016eda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016edc:	f7fb f8fc 	bl	80120d8 <pbuf_free>
      goto memerr;
 8016ee0:	e120      	b.n	8017124 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8016ee6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016eea:	441a      	add	r2, r3
 8016eec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ef0:	9300      	str	r3, [sp, #0]
 8016ef2:	4613      	mov	r3, r2
 8016ef4:	2200      	movs	r2, #0
 8016ef6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016ef8:	68f8      	ldr	r0, [r7, #12]
 8016efa:	f7ff fc51 	bl	80167a0 <tcp_create_segment>
 8016efe:	64f8      	str	r0, [r7, #76]	; 0x4c
 8016f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	f000 810d 	beq.w	8017122 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8016f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d102      	bne.n	8016f14 <tcp_write+0x450>
      queue = seg;
 8016f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f10:	647b      	str	r3, [r7, #68]	; 0x44
 8016f12:	e00c      	b.n	8016f2e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8016f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d106      	bne.n	8016f28 <tcp_write+0x464>
 8016f1a:	4b53      	ldr	r3, [pc, #332]	; (8017068 <tcp_write+0x5a4>)
 8016f1c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016f20:	4955      	ldr	r1, [pc, #340]	; (8017078 <tcp_write+0x5b4>)
 8016f22:	4853      	ldr	r0, [pc, #332]	; (8017070 <tcp_write+0x5ac>)
 8016f24:	f004 fc6e 	bl	801b804 <iprintf>
      prev_seg->next = seg;
 8016f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016f2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016f2c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8016f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f30:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8016f32:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016f36:	8b3b      	ldrh	r3, [r7, #24]
 8016f38:	4413      	add	r3, r2
 8016f3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8016f3e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016f42:	88fb      	ldrh	r3, [r7, #6]
 8016f44:	429a      	cmp	r2, r3
 8016f46:	f4ff af3d 	bcc.w	8016dc4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8016f4a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d02c      	beq.n	8016faa <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8016f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016f52:	685b      	ldr	r3, [r3, #4]
 8016f54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016f56:	e01e      	b.n	8016f96 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8016f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f5a:	891a      	ldrh	r2, [r3, #8]
 8016f5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016f5e:	4413      	add	r3, r2
 8016f60:	b29a      	uxth	r2, r3
 8016f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f64:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8016f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d110      	bne.n	8016f90 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8016f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f70:	685b      	ldr	r3, [r3, #4]
 8016f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f74:	8952      	ldrh	r2, [r2, #10]
 8016f76:	4413      	add	r3, r2
 8016f78:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016f7a:	68b9      	ldr	r1, [r7, #8]
 8016f7c:	4618      	mov	r0, r3
 8016f7e:	f004 fc2b 	bl	801b7d8 <memcpy>
        p->len += oversize_used;
 8016f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f84:	895a      	ldrh	r2, [r3, #10]
 8016f86:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016f88:	4413      	add	r3, r2
 8016f8a:	b29a      	uxth	r2, r3
 8016f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f8e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8016f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f92:	681b      	ldr	r3, [r3, #0]
 8016f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d1dd      	bne.n	8016f58 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8016f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016f9e:	891a      	ldrh	r2, [r3, #8]
 8016fa0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016fa2:	4413      	add	r3, r2
 8016fa4:	b29a      	uxth	r2, r3
 8016fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016fa8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8016faa:	8a7a      	ldrh	r2, [r7, #18]
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8016fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d018      	beq.n	8016fea <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8016fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d106      	bne.n	8016fcc <tcp_write+0x508>
 8016fbe:	4b2a      	ldr	r3, [pc, #168]	; (8017068 <tcp_write+0x5a4>)
 8016fc0:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8016fc4:	492d      	ldr	r1, [pc, #180]	; (801707c <tcp_write+0x5b8>)
 8016fc6:	482a      	ldr	r0, [pc, #168]	; (8017070 <tcp_write+0x5ac>)
 8016fc8:	f004 fc1c 	bl	801b804 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8016fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016fce:	685b      	ldr	r3, [r3, #4]
 8016fd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016fd2:	4618      	mov	r0, r3
 8016fd4:	f7fb f94e 	bl	8012274 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8016fd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016fda:	891a      	ldrh	r2, [r3, #8]
 8016fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016fde:	891b      	ldrh	r3, [r3, #8]
 8016fe0:	4413      	add	r3, r2
 8016fe2:	b29a      	uxth	r2, r3
 8016fe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016fe6:	811a      	strh	r2, [r3, #8]
 8016fe8:	e037      	b.n	801705a <tcp_write+0x596>
  } else if (extendlen > 0) {
 8016fea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d034      	beq.n	801705a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8016ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d003      	beq.n	8016ffe <tcp_write+0x53a>
 8016ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016ff8:	685b      	ldr	r3, [r3, #4]
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d106      	bne.n	801700c <tcp_write+0x548>
 8016ffe:	4b1a      	ldr	r3, [pc, #104]	; (8017068 <tcp_write+0x5a4>)
 8017000:	f240 22e6 	movw	r2, #742	; 0x2e6
 8017004:	491e      	ldr	r1, [pc, #120]	; (8017080 <tcp_write+0x5bc>)
 8017006:	481a      	ldr	r0, [pc, #104]	; (8017070 <tcp_write+0x5ac>)
 8017008:	f004 fbfc 	bl	801b804 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801700c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801700e:	685b      	ldr	r3, [r3, #4]
 8017010:	62bb      	str	r3, [r7, #40]	; 0x28
 8017012:	e009      	b.n	8017028 <tcp_write+0x564>
      p->tot_len += extendlen;
 8017014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017016:	891a      	ldrh	r2, [r3, #8]
 8017018:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801701a:	4413      	add	r3, r2
 801701c:	b29a      	uxth	r2, r3
 801701e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017020:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017024:	681b      	ldr	r3, [r3, #0]
 8017026:	62bb      	str	r3, [r7, #40]	; 0x28
 8017028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	2b00      	cmp	r3, #0
 801702e:	d1f1      	bne.n	8017014 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8017030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017032:	891a      	ldrh	r2, [r3, #8]
 8017034:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017036:	4413      	add	r3, r2
 8017038:	b29a      	uxth	r2, r3
 801703a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801703c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801703e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017040:	895a      	ldrh	r2, [r3, #10]
 8017042:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017044:	4413      	add	r3, r2
 8017046:	b29a      	uxth	r2, r3
 8017048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801704a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801704c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801704e:	891a      	ldrh	r2, [r3, #8]
 8017050:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017052:	4413      	add	r3, r2
 8017054:	b29a      	uxth	r2, r3
 8017056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017058:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801705a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801705c:	2b00      	cmp	r3, #0
 801705e:	d111      	bne.n	8017084 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017064:	66da      	str	r2, [r3, #108]	; 0x6c
 8017066:	e010      	b.n	801708a <tcp_write+0x5c6>
 8017068:	0801f0f0 	.word	0x0801f0f0
 801706c:	0801f390 	.word	0x0801f390
 8017070:	0801f144 	.word	0x0801f144
 8017074:	0801f3d0 	.word	0x0801f3d0
 8017078:	0801f3e0 	.word	0x0801f3e0
 801707c:	0801f3f4 	.word	0x0801f3f4
 8017080:	0801f42c 	.word	0x0801f42c
  } else {
    last_unsent->next = queue;
 8017084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017088:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801708e:	88fb      	ldrh	r3, [r7, #6]
 8017090:	441a      	add	r2, r3
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801709c:	88fb      	ldrh	r3, [r7, #6]
 801709e:	1ad3      	subs	r3, r2, r3
 80170a0:	b29a      	uxth	r2, r3
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80170a8:	68fb      	ldr	r3, [r7, #12]
 80170aa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80170ae:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d00e      	beq.n	80170da <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d10a      	bne.n	80170da <tcp_write+0x616>
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d106      	bne.n	80170da <tcp_write+0x616>
 80170cc:	4b2c      	ldr	r3, [pc, #176]	; (8017180 <tcp_write+0x6bc>)
 80170ce:	f240 3212 	movw	r2, #786	; 0x312
 80170d2:	492c      	ldr	r1, [pc, #176]	; (8017184 <tcp_write+0x6c0>)
 80170d4:	482c      	ldr	r0, [pc, #176]	; (8017188 <tcp_write+0x6c4>)
 80170d6:	f004 fb95 	bl	801b804 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80170da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d016      	beq.n	801710e <tcp_write+0x64a>
 80170e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80170e2:	68db      	ldr	r3, [r3, #12]
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d012      	beq.n	801710e <tcp_write+0x64a>
 80170e8:	797b      	ldrb	r3, [r7, #5]
 80170ea:	f003 0302 	and.w	r3, r3, #2
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d10d      	bne.n	801710e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80170f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80170f4:	68db      	ldr	r3, [r3, #12]
 80170f6:	899b      	ldrh	r3, [r3, #12]
 80170f8:	b29c      	uxth	r4, r3
 80170fa:	2008      	movs	r0, #8
 80170fc:	f7f9 fbc8 	bl	8010890 <lwip_htons>
 8017100:	4603      	mov	r3, r0
 8017102:	461a      	mov	r2, r3
 8017104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017106:	68db      	ldr	r3, [r3, #12]
 8017108:	4322      	orrs	r2, r4
 801710a:	b292      	uxth	r2, r2
 801710c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801710e:	2300      	movs	r3, #0
 8017110:	e031      	b.n	8017176 <tcp_write+0x6b2>
          goto memerr;
 8017112:	bf00      	nop
 8017114:	e006      	b.n	8017124 <tcp_write+0x660>
            goto memerr;
 8017116:	bf00      	nop
 8017118:	e004      	b.n	8017124 <tcp_write+0x660>
        goto memerr;
 801711a:	bf00      	nop
 801711c:	e002      	b.n	8017124 <tcp_write+0x660>
        goto memerr;
 801711e:	bf00      	nop
 8017120:	e000      	b.n	8017124 <tcp_write+0x660>
      goto memerr;
 8017122:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017124:	68fb      	ldr	r3, [r7, #12]
 8017126:	8b5b      	ldrh	r3, [r3, #26]
 8017128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801712c:	b29a      	uxth	r2, r3
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8017132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017134:	2b00      	cmp	r3, #0
 8017136:	d002      	beq.n	801713e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8017138:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801713a:	f7fa ffcd 	bl	80120d8 <pbuf_free>
  }
  if (queue != NULL) {
 801713e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017140:	2b00      	cmp	r3, #0
 8017142:	d002      	beq.n	801714a <tcp_write+0x686>
    tcp_segs_free(queue);
 8017144:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017146:	f7fc fb6b 	bl	8013820 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017150:	2b00      	cmp	r3, #0
 8017152:	d00e      	beq.n	8017172 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017158:	2b00      	cmp	r3, #0
 801715a:	d10a      	bne.n	8017172 <tcp_write+0x6ae>
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017160:	2b00      	cmp	r3, #0
 8017162:	d106      	bne.n	8017172 <tcp_write+0x6ae>
 8017164:	4b06      	ldr	r3, [pc, #24]	; (8017180 <tcp_write+0x6bc>)
 8017166:	f240 3227 	movw	r2, #807	; 0x327
 801716a:	4906      	ldr	r1, [pc, #24]	; (8017184 <tcp_write+0x6c0>)
 801716c:	4806      	ldr	r0, [pc, #24]	; (8017188 <tcp_write+0x6c4>)
 801716e:	f004 fb49 	bl	801b804 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8017172:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017176:	4618      	mov	r0, r3
 8017178:	375c      	adds	r7, #92	; 0x5c
 801717a:	46bd      	mov	sp, r7
 801717c:	bd90      	pop	{r4, r7, pc}
 801717e:	bf00      	nop
 8017180:	0801f0f0 	.word	0x0801f0f0
 8017184:	0801f464 	.word	0x0801f464
 8017188:	0801f144 	.word	0x0801f144

0801718c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801718c:	b590      	push	{r4, r7, lr}
 801718e:	b08b      	sub	sp, #44	; 0x2c
 8017190:	af02      	add	r7, sp, #8
 8017192:	6078      	str	r0, [r7, #4]
 8017194:	460b      	mov	r3, r1
 8017196:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8017198:	2300      	movs	r3, #0
 801719a:	61fb      	str	r3, [r7, #28]
 801719c:	2300      	movs	r3, #0
 801719e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80171a0:	2300      	movs	r3, #0
 80171a2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d106      	bne.n	80171b8 <tcp_split_unsent_seg+0x2c>
 80171aa:	4b95      	ldr	r3, [pc, #596]	; (8017400 <tcp_split_unsent_seg+0x274>)
 80171ac:	f240 324b 	movw	r2, #843	; 0x34b
 80171b0:	4994      	ldr	r1, [pc, #592]	; (8017404 <tcp_split_unsent_seg+0x278>)
 80171b2:	4895      	ldr	r0, [pc, #596]	; (8017408 <tcp_split_unsent_seg+0x27c>)
 80171b4:	f004 fb26 	bl	801b804 <iprintf>

  useg = pcb->unsent;
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80171bc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80171be:	697b      	ldr	r3, [r7, #20]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d102      	bne.n	80171ca <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80171c4:	f04f 33ff 	mov.w	r3, #4294967295
 80171c8:	e116      	b.n	80173f8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80171ca:	887b      	ldrh	r3, [r7, #2]
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d109      	bne.n	80171e4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80171d0:	4b8b      	ldr	r3, [pc, #556]	; (8017400 <tcp_split_unsent_seg+0x274>)
 80171d2:	f240 3253 	movw	r2, #851	; 0x353
 80171d6:	498d      	ldr	r1, [pc, #564]	; (801740c <tcp_split_unsent_seg+0x280>)
 80171d8:	488b      	ldr	r0, [pc, #556]	; (8017408 <tcp_split_unsent_seg+0x27c>)
 80171da:	f004 fb13 	bl	801b804 <iprintf>
    return ERR_VAL;
 80171de:	f06f 0305 	mvn.w	r3, #5
 80171e2:	e109      	b.n	80173f8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80171e4:	697b      	ldr	r3, [r7, #20]
 80171e6:	891b      	ldrh	r3, [r3, #8]
 80171e8:	887a      	ldrh	r2, [r7, #2]
 80171ea:	429a      	cmp	r2, r3
 80171ec:	d301      	bcc.n	80171f2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80171ee:	2300      	movs	r3, #0
 80171f0:	e102      	b.n	80173f8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80171f6:	887a      	ldrh	r2, [r7, #2]
 80171f8:	429a      	cmp	r2, r3
 80171fa:	d906      	bls.n	801720a <tcp_split_unsent_seg+0x7e>
 80171fc:	4b80      	ldr	r3, [pc, #512]	; (8017400 <tcp_split_unsent_seg+0x274>)
 80171fe:	f240 325b 	movw	r2, #859	; 0x35b
 8017202:	4983      	ldr	r1, [pc, #524]	; (8017410 <tcp_split_unsent_seg+0x284>)
 8017204:	4880      	ldr	r0, [pc, #512]	; (8017408 <tcp_split_unsent_seg+0x27c>)
 8017206:	f004 fafd 	bl	801b804 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801720a:	697b      	ldr	r3, [r7, #20]
 801720c:	891b      	ldrh	r3, [r3, #8]
 801720e:	2b00      	cmp	r3, #0
 8017210:	d106      	bne.n	8017220 <tcp_split_unsent_seg+0x94>
 8017212:	4b7b      	ldr	r3, [pc, #492]	; (8017400 <tcp_split_unsent_seg+0x274>)
 8017214:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8017218:	497e      	ldr	r1, [pc, #504]	; (8017414 <tcp_split_unsent_seg+0x288>)
 801721a:	487b      	ldr	r0, [pc, #492]	; (8017408 <tcp_split_unsent_seg+0x27c>)
 801721c:	f004 faf2 	bl	801b804 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8017220:	697b      	ldr	r3, [r7, #20]
 8017222:	7a9b      	ldrb	r3, [r3, #10]
 8017224:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8017226:	7bfb      	ldrb	r3, [r7, #15]
 8017228:	009b      	lsls	r3, r3, #2
 801722a:	b2db      	uxtb	r3, r3
 801722c:	f003 0304 	and.w	r3, r3, #4
 8017230:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8017232:	697b      	ldr	r3, [r7, #20]
 8017234:	891a      	ldrh	r2, [r3, #8]
 8017236:	887b      	ldrh	r3, [r7, #2]
 8017238:	1ad3      	subs	r3, r2, r3
 801723a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801723c:	7bbb      	ldrb	r3, [r7, #14]
 801723e:	b29a      	uxth	r2, r3
 8017240:	89bb      	ldrh	r3, [r7, #12]
 8017242:	4413      	add	r3, r2
 8017244:	b29b      	uxth	r3, r3
 8017246:	f44f 7220 	mov.w	r2, #640	; 0x280
 801724a:	4619      	mov	r1, r3
 801724c:	2036      	movs	r0, #54	; 0x36
 801724e:	f7fa fc2d 	bl	8011aac <pbuf_alloc>
 8017252:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017254:	693b      	ldr	r3, [r7, #16]
 8017256:	2b00      	cmp	r3, #0
 8017258:	f000 80b7 	beq.w	80173ca <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801725c:	697b      	ldr	r3, [r7, #20]
 801725e:	685b      	ldr	r3, [r3, #4]
 8017260:	891a      	ldrh	r2, [r3, #8]
 8017262:	697b      	ldr	r3, [r7, #20]
 8017264:	891b      	ldrh	r3, [r3, #8]
 8017266:	1ad3      	subs	r3, r2, r3
 8017268:	b29a      	uxth	r2, r3
 801726a:	887b      	ldrh	r3, [r7, #2]
 801726c:	4413      	add	r3, r2
 801726e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8017270:	697b      	ldr	r3, [r7, #20]
 8017272:	6858      	ldr	r0, [r3, #4]
 8017274:	693b      	ldr	r3, [r7, #16]
 8017276:	685a      	ldr	r2, [r3, #4]
 8017278:	7bbb      	ldrb	r3, [r7, #14]
 801727a:	18d1      	adds	r1, r2, r3
 801727c:	897b      	ldrh	r3, [r7, #10]
 801727e:	89ba      	ldrh	r2, [r7, #12]
 8017280:	f7fb f920 	bl	80124c4 <pbuf_copy_partial>
 8017284:	4603      	mov	r3, r0
 8017286:	461a      	mov	r2, r3
 8017288:	89bb      	ldrh	r3, [r7, #12]
 801728a:	4293      	cmp	r3, r2
 801728c:	f040 809f 	bne.w	80173ce <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8017290:	697b      	ldr	r3, [r7, #20]
 8017292:	68db      	ldr	r3, [r3, #12]
 8017294:	899b      	ldrh	r3, [r3, #12]
 8017296:	b29b      	uxth	r3, r3
 8017298:	4618      	mov	r0, r3
 801729a:	f7f9 faf9 	bl	8010890 <lwip_htons>
 801729e:	4603      	mov	r3, r0
 80172a0:	b2db      	uxtb	r3, r3
 80172a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80172a6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80172a8:	2300      	movs	r3, #0
 80172aa:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80172ac:	7efb      	ldrb	r3, [r7, #27]
 80172ae:	f003 0308 	and.w	r3, r3, #8
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d007      	beq.n	80172c6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80172b6:	7efb      	ldrb	r3, [r7, #27]
 80172b8:	f023 0308 	bic.w	r3, r3, #8
 80172bc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80172be:	7ebb      	ldrb	r3, [r7, #26]
 80172c0:	f043 0308 	orr.w	r3, r3, #8
 80172c4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80172c6:	7efb      	ldrb	r3, [r7, #27]
 80172c8:	f003 0301 	and.w	r3, r3, #1
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d007      	beq.n	80172e0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80172d0:	7efb      	ldrb	r3, [r7, #27]
 80172d2:	f023 0301 	bic.w	r3, r3, #1
 80172d6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80172d8:	7ebb      	ldrb	r3, [r7, #26]
 80172da:	f043 0301 	orr.w	r3, r3, #1
 80172de:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80172e0:	697b      	ldr	r3, [r7, #20]
 80172e2:	68db      	ldr	r3, [r3, #12]
 80172e4:	685b      	ldr	r3, [r3, #4]
 80172e6:	4618      	mov	r0, r3
 80172e8:	f7f9 fae7 	bl	80108ba <lwip_htonl>
 80172ec:	4602      	mov	r2, r0
 80172ee:	887b      	ldrh	r3, [r7, #2]
 80172f0:	18d1      	adds	r1, r2, r3
 80172f2:	7eba      	ldrb	r2, [r7, #26]
 80172f4:	7bfb      	ldrb	r3, [r7, #15]
 80172f6:	9300      	str	r3, [sp, #0]
 80172f8:	460b      	mov	r3, r1
 80172fa:	6939      	ldr	r1, [r7, #16]
 80172fc:	6878      	ldr	r0, [r7, #4]
 80172fe:	f7ff fa4f 	bl	80167a0 <tcp_create_segment>
 8017302:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8017304:	69fb      	ldr	r3, [r7, #28]
 8017306:	2b00      	cmp	r3, #0
 8017308:	d063      	beq.n	80173d2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801730a:	697b      	ldr	r3, [r7, #20]
 801730c:	685b      	ldr	r3, [r3, #4]
 801730e:	4618      	mov	r0, r3
 8017310:	f7fa ff70 	bl	80121f4 <pbuf_clen>
 8017314:	4603      	mov	r3, r0
 8017316:	461a      	mov	r2, r3
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801731e:	1a9b      	subs	r3, r3, r2
 8017320:	b29a      	uxth	r2, r3
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8017328:	697b      	ldr	r3, [r7, #20]
 801732a:	6858      	ldr	r0, [r3, #4]
 801732c:	697b      	ldr	r3, [r7, #20]
 801732e:	685b      	ldr	r3, [r3, #4]
 8017330:	891a      	ldrh	r2, [r3, #8]
 8017332:	89bb      	ldrh	r3, [r7, #12]
 8017334:	1ad3      	subs	r3, r2, r3
 8017336:	b29b      	uxth	r3, r3
 8017338:	4619      	mov	r1, r3
 801733a:	f7fa fd15 	bl	8011d68 <pbuf_realloc>
  useg->len -= remainder;
 801733e:	697b      	ldr	r3, [r7, #20]
 8017340:	891a      	ldrh	r2, [r3, #8]
 8017342:	89bb      	ldrh	r3, [r7, #12]
 8017344:	1ad3      	subs	r3, r2, r3
 8017346:	b29a      	uxth	r2, r3
 8017348:	697b      	ldr	r3, [r7, #20]
 801734a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801734c:	697b      	ldr	r3, [r7, #20]
 801734e:	68db      	ldr	r3, [r3, #12]
 8017350:	899b      	ldrh	r3, [r3, #12]
 8017352:	b29c      	uxth	r4, r3
 8017354:	7efb      	ldrb	r3, [r7, #27]
 8017356:	b29b      	uxth	r3, r3
 8017358:	4618      	mov	r0, r3
 801735a:	f7f9 fa99 	bl	8010890 <lwip_htons>
 801735e:	4603      	mov	r3, r0
 8017360:	461a      	mov	r2, r3
 8017362:	697b      	ldr	r3, [r7, #20]
 8017364:	68db      	ldr	r3, [r3, #12]
 8017366:	4322      	orrs	r2, r4
 8017368:	b292      	uxth	r2, r2
 801736a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801736c:	697b      	ldr	r3, [r7, #20]
 801736e:	685b      	ldr	r3, [r3, #4]
 8017370:	4618      	mov	r0, r3
 8017372:	f7fa ff3f 	bl	80121f4 <pbuf_clen>
 8017376:	4603      	mov	r3, r0
 8017378:	461a      	mov	r2, r3
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017380:	4413      	add	r3, r2
 8017382:	b29a      	uxth	r2, r3
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801738a:	69fb      	ldr	r3, [r7, #28]
 801738c:	685b      	ldr	r3, [r3, #4]
 801738e:	4618      	mov	r0, r3
 8017390:	f7fa ff30 	bl	80121f4 <pbuf_clen>
 8017394:	4603      	mov	r3, r0
 8017396:	461a      	mov	r2, r3
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801739e:	4413      	add	r3, r2
 80173a0:	b29a      	uxth	r2, r3
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80173a8:	697b      	ldr	r3, [r7, #20]
 80173aa:	681a      	ldr	r2, [r3, #0]
 80173ac:	69fb      	ldr	r3, [r7, #28]
 80173ae:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80173b0:	697b      	ldr	r3, [r7, #20]
 80173b2:	69fa      	ldr	r2, [r7, #28]
 80173b4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80173b6:	69fb      	ldr	r3, [r7, #28]
 80173b8:	681b      	ldr	r3, [r3, #0]
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d103      	bne.n	80173c6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	2200      	movs	r2, #0
 80173c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80173c6:	2300      	movs	r3, #0
 80173c8:	e016      	b.n	80173f8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80173ca:	bf00      	nop
 80173cc:	e002      	b.n	80173d4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80173ce:	bf00      	nop
 80173d0:	e000      	b.n	80173d4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80173d2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80173d4:	69fb      	ldr	r3, [r7, #28]
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d006      	beq.n	80173e8 <tcp_split_unsent_seg+0x25c>
 80173da:	4b09      	ldr	r3, [pc, #36]	; (8017400 <tcp_split_unsent_seg+0x274>)
 80173dc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80173e0:	490d      	ldr	r1, [pc, #52]	; (8017418 <tcp_split_unsent_seg+0x28c>)
 80173e2:	4809      	ldr	r0, [pc, #36]	; (8017408 <tcp_split_unsent_seg+0x27c>)
 80173e4:	f004 fa0e 	bl	801b804 <iprintf>
  if (p != NULL) {
 80173e8:	693b      	ldr	r3, [r7, #16]
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d002      	beq.n	80173f4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80173ee:	6938      	ldr	r0, [r7, #16]
 80173f0:	f7fa fe72 	bl	80120d8 <pbuf_free>
  }

  return ERR_MEM;
 80173f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80173f8:	4618      	mov	r0, r3
 80173fa:	3724      	adds	r7, #36	; 0x24
 80173fc:	46bd      	mov	sp, r7
 80173fe:	bd90      	pop	{r4, r7, pc}
 8017400:	0801f0f0 	.word	0x0801f0f0
 8017404:	0801f484 	.word	0x0801f484
 8017408:	0801f144 	.word	0x0801f144
 801740c:	0801f4a8 	.word	0x0801f4a8
 8017410:	0801f4cc 	.word	0x0801f4cc
 8017414:	0801f4dc 	.word	0x0801f4dc
 8017418:	0801f4ec 	.word	0x0801f4ec

0801741c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801741c:	b590      	push	{r4, r7, lr}
 801741e:	b085      	sub	sp, #20
 8017420:	af00      	add	r7, sp, #0
 8017422:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	2b00      	cmp	r3, #0
 8017428:	d106      	bne.n	8017438 <tcp_send_fin+0x1c>
 801742a:	4b21      	ldr	r3, [pc, #132]	; (80174b0 <tcp_send_fin+0x94>)
 801742c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8017430:	4920      	ldr	r1, [pc, #128]	; (80174b4 <tcp_send_fin+0x98>)
 8017432:	4821      	ldr	r0, [pc, #132]	; (80174b8 <tcp_send_fin+0x9c>)
 8017434:	f004 f9e6 	bl	801b804 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801743c:	2b00      	cmp	r3, #0
 801743e:	d02e      	beq.n	801749e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017444:	60fb      	str	r3, [r7, #12]
 8017446:	e002      	b.n	801744e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	681b      	ldr	r3, [r3, #0]
 8017452:	2b00      	cmp	r3, #0
 8017454:	d1f8      	bne.n	8017448 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	68db      	ldr	r3, [r3, #12]
 801745a:	899b      	ldrh	r3, [r3, #12]
 801745c:	b29b      	uxth	r3, r3
 801745e:	4618      	mov	r0, r3
 8017460:	f7f9 fa16 	bl	8010890 <lwip_htons>
 8017464:	4603      	mov	r3, r0
 8017466:	b2db      	uxtb	r3, r3
 8017468:	f003 0307 	and.w	r3, r3, #7
 801746c:	2b00      	cmp	r3, #0
 801746e:	d116      	bne.n	801749e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	68db      	ldr	r3, [r3, #12]
 8017474:	899b      	ldrh	r3, [r3, #12]
 8017476:	b29c      	uxth	r4, r3
 8017478:	2001      	movs	r0, #1
 801747a:	f7f9 fa09 	bl	8010890 <lwip_htons>
 801747e:	4603      	mov	r3, r0
 8017480:	461a      	mov	r2, r3
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	68db      	ldr	r3, [r3, #12]
 8017486:	4322      	orrs	r2, r4
 8017488:	b292      	uxth	r2, r2
 801748a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	8b5b      	ldrh	r3, [r3, #26]
 8017490:	f043 0320 	orr.w	r3, r3, #32
 8017494:	b29a      	uxth	r2, r3
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801749a:	2300      	movs	r3, #0
 801749c:	e004      	b.n	80174a8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801749e:	2101      	movs	r1, #1
 80174a0:	6878      	ldr	r0, [r7, #4]
 80174a2:	f000 f80b 	bl	80174bc <tcp_enqueue_flags>
 80174a6:	4603      	mov	r3, r0
}
 80174a8:	4618      	mov	r0, r3
 80174aa:	3714      	adds	r7, #20
 80174ac:	46bd      	mov	sp, r7
 80174ae:	bd90      	pop	{r4, r7, pc}
 80174b0:	0801f0f0 	.word	0x0801f0f0
 80174b4:	0801f4f8 	.word	0x0801f4f8
 80174b8:	0801f144 	.word	0x0801f144

080174bc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80174bc:	b580      	push	{r7, lr}
 80174be:	b08a      	sub	sp, #40	; 0x28
 80174c0:	af02      	add	r7, sp, #8
 80174c2:	6078      	str	r0, [r7, #4]
 80174c4:	460b      	mov	r3, r1
 80174c6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80174c8:	2300      	movs	r3, #0
 80174ca:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80174cc:	2300      	movs	r3, #0
 80174ce:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80174d0:	78fb      	ldrb	r3, [r7, #3]
 80174d2:	f003 0303 	and.w	r3, r3, #3
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d106      	bne.n	80174e8 <tcp_enqueue_flags+0x2c>
 80174da:	4b67      	ldr	r3, [pc, #412]	; (8017678 <tcp_enqueue_flags+0x1bc>)
 80174dc:	f240 4211 	movw	r2, #1041	; 0x411
 80174e0:	4966      	ldr	r1, [pc, #408]	; (801767c <tcp_enqueue_flags+0x1c0>)
 80174e2:	4867      	ldr	r0, [pc, #412]	; (8017680 <tcp_enqueue_flags+0x1c4>)
 80174e4:	f004 f98e 	bl	801b804 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d106      	bne.n	80174fc <tcp_enqueue_flags+0x40>
 80174ee:	4b62      	ldr	r3, [pc, #392]	; (8017678 <tcp_enqueue_flags+0x1bc>)
 80174f0:	f240 4213 	movw	r2, #1043	; 0x413
 80174f4:	4963      	ldr	r1, [pc, #396]	; (8017684 <tcp_enqueue_flags+0x1c8>)
 80174f6:	4862      	ldr	r0, [pc, #392]	; (8017680 <tcp_enqueue_flags+0x1c4>)
 80174f8:	f004 f984 	bl	801b804 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80174fc:	78fb      	ldrb	r3, [r7, #3]
 80174fe:	f003 0302 	and.w	r3, r3, #2
 8017502:	2b00      	cmp	r3, #0
 8017504:	d001      	beq.n	801750a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8017506:	2301      	movs	r3, #1
 8017508:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801750a:	7ffb      	ldrb	r3, [r7, #31]
 801750c:	009b      	lsls	r3, r3, #2
 801750e:	b2db      	uxtb	r3, r3
 8017510:	f003 0304 	and.w	r3, r3, #4
 8017514:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017516:	7dfb      	ldrb	r3, [r7, #23]
 8017518:	b29b      	uxth	r3, r3
 801751a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801751e:	4619      	mov	r1, r3
 8017520:	2036      	movs	r0, #54	; 0x36
 8017522:	f7fa fac3 	bl	8011aac <pbuf_alloc>
 8017526:	6138      	str	r0, [r7, #16]
 8017528:	693b      	ldr	r3, [r7, #16]
 801752a:	2b00      	cmp	r3, #0
 801752c:	d109      	bne.n	8017542 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	8b5b      	ldrh	r3, [r3, #26]
 8017532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017536:	b29a      	uxth	r2, r3
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801753c:	f04f 33ff 	mov.w	r3, #4294967295
 8017540:	e095      	b.n	801766e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8017542:	693b      	ldr	r3, [r7, #16]
 8017544:	895a      	ldrh	r2, [r3, #10]
 8017546:	7dfb      	ldrb	r3, [r7, #23]
 8017548:	b29b      	uxth	r3, r3
 801754a:	429a      	cmp	r2, r3
 801754c:	d206      	bcs.n	801755c <tcp_enqueue_flags+0xa0>
 801754e:	4b4a      	ldr	r3, [pc, #296]	; (8017678 <tcp_enqueue_flags+0x1bc>)
 8017550:	f240 4239 	movw	r2, #1081	; 0x439
 8017554:	494c      	ldr	r1, [pc, #304]	; (8017688 <tcp_enqueue_flags+0x1cc>)
 8017556:	484a      	ldr	r0, [pc, #296]	; (8017680 <tcp_enqueue_flags+0x1c4>)
 8017558:	f004 f954 	bl	801b804 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8017560:	78fa      	ldrb	r2, [r7, #3]
 8017562:	7ffb      	ldrb	r3, [r7, #31]
 8017564:	9300      	str	r3, [sp, #0]
 8017566:	460b      	mov	r3, r1
 8017568:	6939      	ldr	r1, [r7, #16]
 801756a:	6878      	ldr	r0, [r7, #4]
 801756c:	f7ff f918 	bl	80167a0 <tcp_create_segment>
 8017570:	60f8      	str	r0, [r7, #12]
 8017572:	68fb      	ldr	r3, [r7, #12]
 8017574:	2b00      	cmp	r3, #0
 8017576:	d109      	bne.n	801758c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	8b5b      	ldrh	r3, [r3, #26]
 801757c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017580:	b29a      	uxth	r2, r3
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8017586:	f04f 33ff 	mov.w	r3, #4294967295
 801758a:	e070      	b.n	801766e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801758c:	68fb      	ldr	r3, [r7, #12]
 801758e:	68db      	ldr	r3, [r3, #12]
 8017590:	f003 0303 	and.w	r3, r3, #3
 8017594:	2b00      	cmp	r3, #0
 8017596:	d006      	beq.n	80175a6 <tcp_enqueue_flags+0xea>
 8017598:	4b37      	ldr	r3, [pc, #220]	; (8017678 <tcp_enqueue_flags+0x1bc>)
 801759a:	f240 4242 	movw	r2, #1090	; 0x442
 801759e:	493b      	ldr	r1, [pc, #236]	; (801768c <tcp_enqueue_flags+0x1d0>)
 80175a0:	4837      	ldr	r0, [pc, #220]	; (8017680 <tcp_enqueue_flags+0x1c4>)
 80175a2:	f004 f92f 	bl	801b804 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80175a6:	68fb      	ldr	r3, [r7, #12]
 80175a8:	891b      	ldrh	r3, [r3, #8]
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d006      	beq.n	80175bc <tcp_enqueue_flags+0x100>
 80175ae:	4b32      	ldr	r3, [pc, #200]	; (8017678 <tcp_enqueue_flags+0x1bc>)
 80175b0:	f240 4243 	movw	r2, #1091	; 0x443
 80175b4:	4936      	ldr	r1, [pc, #216]	; (8017690 <tcp_enqueue_flags+0x1d4>)
 80175b6:	4832      	ldr	r0, [pc, #200]	; (8017680 <tcp_enqueue_flags+0x1c4>)
 80175b8:	f004 f924 	bl	801b804 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d103      	bne.n	80175cc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	68fa      	ldr	r2, [r7, #12]
 80175c8:	66da      	str	r2, [r3, #108]	; 0x6c
 80175ca:	e00d      	b.n	80175e8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80175d0:	61bb      	str	r3, [r7, #24]
 80175d2:	e002      	b.n	80175da <tcp_enqueue_flags+0x11e>
 80175d4:	69bb      	ldr	r3, [r7, #24]
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	61bb      	str	r3, [r7, #24]
 80175da:	69bb      	ldr	r3, [r7, #24]
 80175dc:	681b      	ldr	r3, [r3, #0]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d1f8      	bne.n	80175d4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80175e2:	69bb      	ldr	r3, [r7, #24]
 80175e4:	68fa      	ldr	r2, [r7, #12]
 80175e6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	2200      	movs	r2, #0
 80175ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80175f0:	78fb      	ldrb	r3, [r7, #3]
 80175f2:	f003 0302 	and.w	r3, r3, #2
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d104      	bne.n	8017604 <tcp_enqueue_flags+0x148>
 80175fa:	78fb      	ldrb	r3, [r7, #3]
 80175fc:	f003 0301 	and.w	r3, r3, #1
 8017600:	2b00      	cmp	r3, #0
 8017602:	d004      	beq.n	801760e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017608:	1c5a      	adds	r2, r3, #1
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801760e:	78fb      	ldrb	r3, [r7, #3]
 8017610:	f003 0301 	and.w	r3, r3, #1
 8017614:	2b00      	cmp	r3, #0
 8017616:	d006      	beq.n	8017626 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	8b5b      	ldrh	r3, [r3, #26]
 801761c:	f043 0320 	orr.w	r3, r3, #32
 8017620:	b29a      	uxth	r2, r3
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8017626:	68fb      	ldr	r3, [r7, #12]
 8017628:	685b      	ldr	r3, [r3, #4]
 801762a:	4618      	mov	r0, r3
 801762c:	f7fa fde2 	bl	80121f4 <pbuf_clen>
 8017630:	4603      	mov	r3, r0
 8017632:	461a      	mov	r2, r3
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801763a:	4413      	add	r3, r2
 801763c:	b29a      	uxth	r2, r3
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801764a:	2b00      	cmp	r3, #0
 801764c:	d00e      	beq.n	801766c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017652:	2b00      	cmp	r3, #0
 8017654:	d10a      	bne.n	801766c <tcp_enqueue_flags+0x1b0>
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801765a:	2b00      	cmp	r3, #0
 801765c:	d106      	bne.n	801766c <tcp_enqueue_flags+0x1b0>
 801765e:	4b06      	ldr	r3, [pc, #24]	; (8017678 <tcp_enqueue_flags+0x1bc>)
 8017660:	f240 4265 	movw	r2, #1125	; 0x465
 8017664:	490b      	ldr	r1, [pc, #44]	; (8017694 <tcp_enqueue_flags+0x1d8>)
 8017666:	4806      	ldr	r0, [pc, #24]	; (8017680 <tcp_enqueue_flags+0x1c4>)
 8017668:	f004 f8cc 	bl	801b804 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801766c:	2300      	movs	r3, #0
}
 801766e:	4618      	mov	r0, r3
 8017670:	3720      	adds	r7, #32
 8017672:	46bd      	mov	sp, r7
 8017674:	bd80      	pop	{r7, pc}
 8017676:	bf00      	nop
 8017678:	0801f0f0 	.word	0x0801f0f0
 801767c:	0801f514 	.word	0x0801f514
 8017680:	0801f144 	.word	0x0801f144
 8017684:	0801f56c 	.word	0x0801f56c
 8017688:	0801f58c 	.word	0x0801f58c
 801768c:	0801f5c8 	.word	0x0801f5c8
 8017690:	0801f5e0 	.word	0x0801f5e0
 8017694:	0801f60c 	.word	0x0801f60c

08017698 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8017698:	b5b0      	push	{r4, r5, r7, lr}
 801769a:	b08a      	sub	sp, #40	; 0x28
 801769c:	af00      	add	r7, sp, #0
 801769e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d106      	bne.n	80176b4 <tcp_output+0x1c>
 80176a6:	4b8a      	ldr	r3, [pc, #552]	; (80178d0 <tcp_output+0x238>)
 80176a8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80176ac:	4989      	ldr	r1, [pc, #548]	; (80178d4 <tcp_output+0x23c>)
 80176ae:	488a      	ldr	r0, [pc, #552]	; (80178d8 <tcp_output+0x240>)
 80176b0:	f004 f8a8 	bl	801b804 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	7d1b      	ldrb	r3, [r3, #20]
 80176b8:	2b01      	cmp	r3, #1
 80176ba:	d106      	bne.n	80176ca <tcp_output+0x32>
 80176bc:	4b84      	ldr	r3, [pc, #528]	; (80178d0 <tcp_output+0x238>)
 80176be:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80176c2:	4986      	ldr	r1, [pc, #536]	; (80178dc <tcp_output+0x244>)
 80176c4:	4884      	ldr	r0, [pc, #528]	; (80178d8 <tcp_output+0x240>)
 80176c6:	f004 f89d 	bl	801b804 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80176ca:	4b85      	ldr	r3, [pc, #532]	; (80178e0 <tcp_output+0x248>)
 80176cc:	681b      	ldr	r3, [r3, #0]
 80176ce:	687a      	ldr	r2, [r7, #4]
 80176d0:	429a      	cmp	r2, r3
 80176d2:	d101      	bne.n	80176d8 <tcp_output+0x40>
    return ERR_OK;
 80176d4:	2300      	movs	r3, #0
 80176d6:	e1ce      	b.n	8017a76 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80176e4:	4293      	cmp	r3, r2
 80176e6:	bf28      	it	cs
 80176e8:	4613      	movcs	r3, r2
 80176ea:	b29b      	uxth	r3, r3
 80176ec:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80176f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80176f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d10b      	bne.n	8017712 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	8b5b      	ldrh	r3, [r3, #26]
 80176fe:	f003 0302 	and.w	r3, r3, #2
 8017702:	2b00      	cmp	r3, #0
 8017704:	f000 81aa 	beq.w	8017a5c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8017708:	6878      	ldr	r0, [r7, #4]
 801770a:	f000 fdcb 	bl	80182a4 <tcp_send_empty_ack>
 801770e:	4603      	mov	r3, r0
 8017710:	e1b1      	b.n	8017a76 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8017712:	6879      	ldr	r1, [r7, #4]
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	3304      	adds	r3, #4
 8017718:	461a      	mov	r2, r3
 801771a:	6878      	ldr	r0, [r7, #4]
 801771c:	f7ff f824 	bl	8016768 <tcp_route>
 8017720:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8017722:	697b      	ldr	r3, [r7, #20]
 8017724:	2b00      	cmp	r3, #0
 8017726:	d102      	bne.n	801772e <tcp_output+0x96>
    return ERR_RTE;
 8017728:	f06f 0303 	mvn.w	r3, #3
 801772c:	e1a3      	b.n	8017a76 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	2b00      	cmp	r3, #0
 8017732:	d003      	beq.n	801773c <tcp_output+0xa4>
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	681b      	ldr	r3, [r3, #0]
 8017738:	2b00      	cmp	r3, #0
 801773a:	d111      	bne.n	8017760 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801773c:	697b      	ldr	r3, [r7, #20]
 801773e:	2b00      	cmp	r3, #0
 8017740:	d002      	beq.n	8017748 <tcp_output+0xb0>
 8017742:	697b      	ldr	r3, [r7, #20]
 8017744:	3304      	adds	r3, #4
 8017746:	e000      	b.n	801774a <tcp_output+0xb2>
 8017748:	2300      	movs	r3, #0
 801774a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801774c:	693b      	ldr	r3, [r7, #16]
 801774e:	2b00      	cmp	r3, #0
 8017750:	d102      	bne.n	8017758 <tcp_output+0xc0>
      return ERR_RTE;
 8017752:	f06f 0303 	mvn.w	r3, #3
 8017756:	e18e      	b.n	8017a76 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8017758:	693b      	ldr	r3, [r7, #16]
 801775a:	681a      	ldr	r2, [r3, #0]
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8017760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017762:	68db      	ldr	r3, [r3, #12]
 8017764:	685b      	ldr	r3, [r3, #4]
 8017766:	4618      	mov	r0, r3
 8017768:	f7f9 f8a7 	bl	80108ba <lwip_htonl>
 801776c:	4602      	mov	r2, r0
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017772:	1ad3      	subs	r3, r2, r3
 8017774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017776:	8912      	ldrh	r2, [r2, #8]
 8017778:	4413      	add	r3, r2
 801777a:	69ba      	ldr	r2, [r7, #24]
 801777c:	429a      	cmp	r2, r3
 801777e:	d227      	bcs.n	80177d0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017786:	461a      	mov	r2, r3
 8017788:	69bb      	ldr	r3, [r7, #24]
 801778a:	4293      	cmp	r3, r2
 801778c:	d114      	bne.n	80177b8 <tcp_output+0x120>
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017792:	2b00      	cmp	r3, #0
 8017794:	d110      	bne.n	80177b8 <tcp_output+0x120>
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801779c:	2b00      	cmp	r3, #0
 801779e:	d10b      	bne.n	80177b8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	2200      	movs	r2, #0
 80177a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	2201      	movs	r2, #1
 80177ac:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	2200      	movs	r2, #0
 80177b4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	8b5b      	ldrh	r3, [r3, #26]
 80177bc:	f003 0302 	and.w	r3, r3, #2
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	f000 814d 	beq.w	8017a60 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80177c6:	6878      	ldr	r0, [r7, #4]
 80177c8:	f000 fd6c 	bl	80182a4 <tcp_send_empty_ack>
 80177cc:	4603      	mov	r3, r0
 80177ce:	e152      	b.n	8017a76 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	2200      	movs	r2, #0
 80177d4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80177dc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80177de:	6a3b      	ldr	r3, [r7, #32]
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	f000 811c 	beq.w	8017a1e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80177e6:	e002      	b.n	80177ee <tcp_output+0x156>
 80177e8:	6a3b      	ldr	r3, [r7, #32]
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	623b      	str	r3, [r7, #32]
 80177ee:	6a3b      	ldr	r3, [r7, #32]
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d1f8      	bne.n	80177e8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80177f6:	e112      	b.n	8017a1e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80177f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177fa:	68db      	ldr	r3, [r3, #12]
 80177fc:	899b      	ldrh	r3, [r3, #12]
 80177fe:	b29b      	uxth	r3, r3
 8017800:	4618      	mov	r0, r3
 8017802:	f7f9 f845 	bl	8010890 <lwip_htons>
 8017806:	4603      	mov	r3, r0
 8017808:	b2db      	uxtb	r3, r3
 801780a:	f003 0304 	and.w	r3, r3, #4
 801780e:	2b00      	cmp	r3, #0
 8017810:	d006      	beq.n	8017820 <tcp_output+0x188>
 8017812:	4b2f      	ldr	r3, [pc, #188]	; (80178d0 <tcp_output+0x238>)
 8017814:	f240 5236 	movw	r2, #1334	; 0x536
 8017818:	4932      	ldr	r1, [pc, #200]	; (80178e4 <tcp_output+0x24c>)
 801781a:	482f      	ldr	r0, [pc, #188]	; (80178d8 <tcp_output+0x240>)
 801781c:	f003 fff2 	bl	801b804 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017824:	2b00      	cmp	r3, #0
 8017826:	d01f      	beq.n	8017868 <tcp_output+0x1d0>
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	8b5b      	ldrh	r3, [r3, #26]
 801782c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8017830:	2b00      	cmp	r3, #0
 8017832:	d119      	bne.n	8017868 <tcp_output+0x1d0>
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017838:	2b00      	cmp	r3, #0
 801783a:	d00b      	beq.n	8017854 <tcp_output+0x1bc>
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017840:	681b      	ldr	r3, [r3, #0]
 8017842:	2b00      	cmp	r3, #0
 8017844:	d110      	bne.n	8017868 <tcp_output+0x1d0>
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801784a:	891a      	ldrh	r2, [r3, #8]
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017850:	429a      	cmp	r2, r3
 8017852:	d209      	bcs.n	8017868 <tcp_output+0x1d0>
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801785a:	2b00      	cmp	r3, #0
 801785c:	d004      	beq.n	8017868 <tcp_output+0x1d0>
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017864:	2b08      	cmp	r3, #8
 8017866:	d901      	bls.n	801786c <tcp_output+0x1d4>
 8017868:	2301      	movs	r3, #1
 801786a:	e000      	b.n	801786e <tcp_output+0x1d6>
 801786c:	2300      	movs	r3, #0
 801786e:	2b00      	cmp	r3, #0
 8017870:	d106      	bne.n	8017880 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	8b5b      	ldrh	r3, [r3, #26]
 8017876:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801787a:	2b00      	cmp	r3, #0
 801787c:	f000 80e4 	beq.w	8017a48 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	7d1b      	ldrb	r3, [r3, #20]
 8017884:	2b02      	cmp	r3, #2
 8017886:	d00d      	beq.n	80178a4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8017888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801788a:	68db      	ldr	r3, [r3, #12]
 801788c:	899b      	ldrh	r3, [r3, #12]
 801788e:	b29c      	uxth	r4, r3
 8017890:	2010      	movs	r0, #16
 8017892:	f7f8 fffd 	bl	8010890 <lwip_htons>
 8017896:	4603      	mov	r3, r0
 8017898:	461a      	mov	r2, r3
 801789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801789c:	68db      	ldr	r3, [r3, #12]
 801789e:	4322      	orrs	r2, r4
 80178a0:	b292      	uxth	r2, r2
 80178a2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80178a4:	697a      	ldr	r2, [r7, #20]
 80178a6:	6879      	ldr	r1, [r7, #4]
 80178a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80178aa:	f000 f909 	bl	8017ac0 <tcp_output_segment>
 80178ae:	4603      	mov	r3, r0
 80178b0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80178b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d016      	beq.n	80178e8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	8b5b      	ldrh	r3, [r3, #26]
 80178be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80178c2:	b29a      	uxth	r2, r3
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	835a      	strh	r2, [r3, #26]
      return err;
 80178c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80178cc:	e0d3      	b.n	8017a76 <tcp_output+0x3de>
 80178ce:	bf00      	nop
 80178d0:	0801f0f0 	.word	0x0801f0f0
 80178d4:	0801f634 	.word	0x0801f634
 80178d8:	0801f144 	.word	0x0801f144
 80178dc:	0801f64c 	.word	0x0801f64c
 80178e0:	200110d8 	.word	0x200110d8
 80178e4:	0801f674 	.word	0x0801f674
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80178e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178ea:	681a      	ldr	r2, [r3, #0]
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	7d1b      	ldrb	r3, [r3, #20]
 80178f4:	2b02      	cmp	r3, #2
 80178f6:	d006      	beq.n	8017906 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	8b5b      	ldrh	r3, [r3, #26]
 80178fc:	f023 0303 	bic.w	r3, r3, #3
 8017900:	b29a      	uxth	r2, r3
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017908:	68db      	ldr	r3, [r3, #12]
 801790a:	685b      	ldr	r3, [r3, #4]
 801790c:	4618      	mov	r0, r3
 801790e:	f7f8 ffd4 	bl	80108ba <lwip_htonl>
 8017912:	4604      	mov	r4, r0
 8017914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017916:	891b      	ldrh	r3, [r3, #8]
 8017918:	461d      	mov	r5, r3
 801791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801791c:	68db      	ldr	r3, [r3, #12]
 801791e:	899b      	ldrh	r3, [r3, #12]
 8017920:	b29b      	uxth	r3, r3
 8017922:	4618      	mov	r0, r3
 8017924:	f7f8 ffb4 	bl	8010890 <lwip_htons>
 8017928:	4603      	mov	r3, r0
 801792a:	b2db      	uxtb	r3, r3
 801792c:	f003 0303 	and.w	r3, r3, #3
 8017930:	2b00      	cmp	r3, #0
 8017932:	d001      	beq.n	8017938 <tcp_output+0x2a0>
 8017934:	2301      	movs	r3, #1
 8017936:	e000      	b.n	801793a <tcp_output+0x2a2>
 8017938:	2300      	movs	r3, #0
 801793a:	442b      	add	r3, r5
 801793c:	4423      	add	r3, r4
 801793e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017944:	68bb      	ldr	r3, [r7, #8]
 8017946:	1ad3      	subs	r3, r2, r3
 8017948:	2b00      	cmp	r3, #0
 801794a:	da02      	bge.n	8017952 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	68ba      	ldr	r2, [r7, #8]
 8017950:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8017952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017954:	891b      	ldrh	r3, [r3, #8]
 8017956:	461c      	mov	r4, r3
 8017958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801795a:	68db      	ldr	r3, [r3, #12]
 801795c:	899b      	ldrh	r3, [r3, #12]
 801795e:	b29b      	uxth	r3, r3
 8017960:	4618      	mov	r0, r3
 8017962:	f7f8 ff95 	bl	8010890 <lwip_htons>
 8017966:	4603      	mov	r3, r0
 8017968:	b2db      	uxtb	r3, r3
 801796a:	f003 0303 	and.w	r3, r3, #3
 801796e:	2b00      	cmp	r3, #0
 8017970:	d001      	beq.n	8017976 <tcp_output+0x2de>
 8017972:	2301      	movs	r3, #1
 8017974:	e000      	b.n	8017978 <tcp_output+0x2e0>
 8017976:	2300      	movs	r3, #0
 8017978:	4423      	add	r3, r4
 801797a:	2b00      	cmp	r3, #0
 801797c:	d049      	beq.n	8017a12 <tcp_output+0x37a>
      seg->next = NULL;
 801797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017980:	2200      	movs	r2, #0
 8017982:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017988:	2b00      	cmp	r3, #0
 801798a:	d105      	bne.n	8017998 <tcp_output+0x300>
        pcb->unacked = seg;
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017990:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8017992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017994:	623b      	str	r3, [r7, #32]
 8017996:	e03f      	b.n	8017a18 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8017998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801799a:	68db      	ldr	r3, [r3, #12]
 801799c:	685b      	ldr	r3, [r3, #4]
 801799e:	4618      	mov	r0, r3
 80179a0:	f7f8 ff8b 	bl	80108ba <lwip_htonl>
 80179a4:	4604      	mov	r4, r0
 80179a6:	6a3b      	ldr	r3, [r7, #32]
 80179a8:	68db      	ldr	r3, [r3, #12]
 80179aa:	685b      	ldr	r3, [r3, #4]
 80179ac:	4618      	mov	r0, r3
 80179ae:	f7f8 ff84 	bl	80108ba <lwip_htonl>
 80179b2:	4603      	mov	r3, r0
 80179b4:	1ae3      	subs	r3, r4, r3
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	da24      	bge.n	8017a04 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	3370      	adds	r3, #112	; 0x70
 80179be:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80179c0:	e002      	b.n	80179c8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80179c2:	69fb      	ldr	r3, [r7, #28]
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80179c8:	69fb      	ldr	r3, [r7, #28]
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d011      	beq.n	80179f4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80179d0:	69fb      	ldr	r3, [r7, #28]
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	68db      	ldr	r3, [r3, #12]
 80179d6:	685b      	ldr	r3, [r3, #4]
 80179d8:	4618      	mov	r0, r3
 80179da:	f7f8 ff6e 	bl	80108ba <lwip_htonl>
 80179de:	4604      	mov	r4, r0
 80179e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179e2:	68db      	ldr	r3, [r3, #12]
 80179e4:	685b      	ldr	r3, [r3, #4]
 80179e6:	4618      	mov	r0, r3
 80179e8:	f7f8 ff67 	bl	80108ba <lwip_htonl>
 80179ec:	4603      	mov	r3, r0
 80179ee:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	dbe6      	blt.n	80179c2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80179f4:	69fb      	ldr	r3, [r7, #28]
 80179f6:	681a      	ldr	r2, [r3, #0]
 80179f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179fa:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80179fc:	69fb      	ldr	r3, [r7, #28]
 80179fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017a00:	601a      	str	r2, [r3, #0]
 8017a02:	e009      	b.n	8017a18 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8017a04:	6a3b      	ldr	r3, [r7, #32]
 8017a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017a08:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8017a0a:	6a3b      	ldr	r3, [r7, #32]
 8017a0c:	681b      	ldr	r3, [r3, #0]
 8017a0e:	623b      	str	r3, [r7, #32]
 8017a10:	e002      	b.n	8017a18 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8017a12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017a14:	f7fb ff19 	bl	801384a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a1c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8017a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d012      	beq.n	8017a4a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8017a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a26:	68db      	ldr	r3, [r3, #12]
 8017a28:	685b      	ldr	r3, [r3, #4]
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	f7f8 ff45 	bl	80108ba <lwip_htonl>
 8017a30:	4602      	mov	r2, r0
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017a36:	1ad3      	subs	r3, r2, r3
 8017a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017a3a:	8912      	ldrh	r2, [r2, #8]
 8017a3c:	4413      	add	r3, r2
  while (seg != NULL &&
 8017a3e:	69ba      	ldr	r2, [r7, #24]
 8017a40:	429a      	cmp	r2, r3
 8017a42:	f4bf aed9 	bcs.w	80177f8 <tcp_output+0x160>
 8017a46:	e000      	b.n	8017a4a <tcp_output+0x3b2>
      break;
 8017a48:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d108      	bne.n	8017a64 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	2200      	movs	r2, #0
 8017a56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8017a5a:	e004      	b.n	8017a66 <tcp_output+0x3ce>
    goto output_done;
 8017a5c:	bf00      	nop
 8017a5e:	e002      	b.n	8017a66 <tcp_output+0x3ce>
    goto output_done;
 8017a60:	bf00      	nop
 8017a62:	e000      	b.n	8017a66 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8017a64:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	8b5b      	ldrh	r3, [r3, #26]
 8017a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017a6e:	b29a      	uxth	r2, r3
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8017a74:	2300      	movs	r3, #0
}
 8017a76:	4618      	mov	r0, r3
 8017a78:	3728      	adds	r7, #40	; 0x28
 8017a7a:	46bd      	mov	sp, r7
 8017a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8017a7e:	bf00      	nop

08017a80 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8017a80:	b580      	push	{r7, lr}
 8017a82:	b082      	sub	sp, #8
 8017a84:	af00      	add	r7, sp, #0
 8017a86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d106      	bne.n	8017a9c <tcp_output_segment_busy+0x1c>
 8017a8e:	4b09      	ldr	r3, [pc, #36]	; (8017ab4 <tcp_output_segment_busy+0x34>)
 8017a90:	f240 529a 	movw	r2, #1434	; 0x59a
 8017a94:	4908      	ldr	r1, [pc, #32]	; (8017ab8 <tcp_output_segment_busy+0x38>)
 8017a96:	4809      	ldr	r0, [pc, #36]	; (8017abc <tcp_output_segment_busy+0x3c>)
 8017a98:	f003 feb4 	bl	801b804 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	685b      	ldr	r3, [r3, #4]
 8017aa0:	7b9b      	ldrb	r3, [r3, #14]
 8017aa2:	2b01      	cmp	r3, #1
 8017aa4:	d001      	beq.n	8017aaa <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8017aa6:	2301      	movs	r3, #1
 8017aa8:	e000      	b.n	8017aac <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8017aaa:	2300      	movs	r3, #0
}
 8017aac:	4618      	mov	r0, r3
 8017aae:	3708      	adds	r7, #8
 8017ab0:	46bd      	mov	sp, r7
 8017ab2:	bd80      	pop	{r7, pc}
 8017ab4:	0801f0f0 	.word	0x0801f0f0
 8017ab8:	0801f68c 	.word	0x0801f68c
 8017abc:	0801f144 	.word	0x0801f144

08017ac0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8017ac0:	b5b0      	push	{r4, r5, r7, lr}
 8017ac2:	b08c      	sub	sp, #48	; 0x30
 8017ac4:	af04      	add	r7, sp, #16
 8017ac6:	60f8      	str	r0, [r7, #12]
 8017ac8:	60b9      	str	r1, [r7, #8]
 8017aca:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8017acc:	68fb      	ldr	r3, [r7, #12]
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d106      	bne.n	8017ae0 <tcp_output_segment+0x20>
 8017ad2:	4b63      	ldr	r3, [pc, #396]	; (8017c60 <tcp_output_segment+0x1a0>)
 8017ad4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8017ad8:	4962      	ldr	r1, [pc, #392]	; (8017c64 <tcp_output_segment+0x1a4>)
 8017ada:	4863      	ldr	r0, [pc, #396]	; (8017c68 <tcp_output_segment+0x1a8>)
 8017adc:	f003 fe92 	bl	801b804 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8017ae0:	68bb      	ldr	r3, [r7, #8]
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d106      	bne.n	8017af4 <tcp_output_segment+0x34>
 8017ae6:	4b5e      	ldr	r3, [pc, #376]	; (8017c60 <tcp_output_segment+0x1a0>)
 8017ae8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8017aec:	495f      	ldr	r1, [pc, #380]	; (8017c6c <tcp_output_segment+0x1ac>)
 8017aee:	485e      	ldr	r0, [pc, #376]	; (8017c68 <tcp_output_segment+0x1a8>)
 8017af0:	f003 fe88 	bl	801b804 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	d106      	bne.n	8017b08 <tcp_output_segment+0x48>
 8017afa:	4b59      	ldr	r3, [pc, #356]	; (8017c60 <tcp_output_segment+0x1a0>)
 8017afc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8017b00:	495b      	ldr	r1, [pc, #364]	; (8017c70 <tcp_output_segment+0x1b0>)
 8017b02:	4859      	ldr	r0, [pc, #356]	; (8017c68 <tcp_output_segment+0x1a8>)
 8017b04:	f003 fe7e 	bl	801b804 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8017b08:	68f8      	ldr	r0, [r7, #12]
 8017b0a:	f7ff ffb9 	bl	8017a80 <tcp_output_segment_busy>
 8017b0e:	4603      	mov	r3, r0
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d001      	beq.n	8017b18 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8017b14:	2300      	movs	r3, #0
 8017b16:	e09f      	b.n	8017c58 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8017b18:	68bb      	ldr	r3, [r7, #8]
 8017b1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017b1c:	68fb      	ldr	r3, [r7, #12]
 8017b1e:	68dc      	ldr	r4, [r3, #12]
 8017b20:	4610      	mov	r0, r2
 8017b22:	f7f8 feca 	bl	80108ba <lwip_htonl>
 8017b26:	4603      	mov	r3, r0
 8017b28:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8017b2a:	68bb      	ldr	r3, [r7, #8]
 8017b2c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8017b2e:	68fb      	ldr	r3, [r7, #12]
 8017b30:	68dc      	ldr	r4, [r3, #12]
 8017b32:	4610      	mov	r0, r2
 8017b34:	f7f8 feac 	bl	8010890 <lwip_htons>
 8017b38:	4603      	mov	r3, r0
 8017b3a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017b3c:	68bb      	ldr	r3, [r7, #8]
 8017b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b40:	68ba      	ldr	r2, [r7, #8]
 8017b42:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8017b44:	441a      	add	r2, r3
 8017b46:	68bb      	ldr	r3, [r7, #8]
 8017b48:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8017b4a:	68fb      	ldr	r3, [r7, #12]
 8017b4c:	68db      	ldr	r3, [r3, #12]
 8017b4e:	3314      	adds	r3, #20
 8017b50:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	7a9b      	ldrb	r3, [r3, #10]
 8017b56:	f003 0301 	and.w	r3, r3, #1
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d015      	beq.n	8017b8a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8017b5e:	68bb      	ldr	r3, [r7, #8]
 8017b60:	3304      	adds	r3, #4
 8017b62:	461a      	mov	r2, r3
 8017b64:	6879      	ldr	r1, [r7, #4]
 8017b66:	f44f 7006 	mov.w	r0, #536	; 0x218
 8017b6a:	f7fc fa33 	bl	8013fd4 <tcp_eff_send_mss_netif>
 8017b6e:	4603      	mov	r3, r0
 8017b70:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8017b72:	8b7b      	ldrh	r3, [r7, #26]
 8017b74:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8017b78:	4618      	mov	r0, r3
 8017b7a:	f7f8 fe9e 	bl	80108ba <lwip_htonl>
 8017b7e:	4602      	mov	r2, r0
 8017b80:	69fb      	ldr	r3, [r7, #28]
 8017b82:	601a      	str	r2, [r3, #0]
    opts += 1;
 8017b84:	69fb      	ldr	r3, [r7, #28]
 8017b86:	3304      	adds	r3, #4
 8017b88:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8017b8a:	68bb      	ldr	r3, [r7, #8]
 8017b8c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	da02      	bge.n	8017b9a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8017b94:	68bb      	ldr	r3, [r7, #8]
 8017b96:	2200      	movs	r2, #0
 8017b98:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8017b9a:	68bb      	ldr	r3, [r7, #8]
 8017b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d10c      	bne.n	8017bbc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8017ba2:	4b34      	ldr	r3, [pc, #208]	; (8017c74 <tcp_output_segment+0x1b4>)
 8017ba4:	681a      	ldr	r2, [r3, #0]
 8017ba6:	68bb      	ldr	r3, [r7, #8]
 8017ba8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8017baa:	68fb      	ldr	r3, [r7, #12]
 8017bac:	68db      	ldr	r3, [r3, #12]
 8017bae:	685b      	ldr	r3, [r3, #4]
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	f7f8 fe82 	bl	80108ba <lwip_htonl>
 8017bb6:	4602      	mov	r2, r0
 8017bb8:	68bb      	ldr	r3, [r7, #8]
 8017bba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8017bbc:	68fb      	ldr	r3, [r7, #12]
 8017bbe:	68da      	ldr	r2, [r3, #12]
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	685b      	ldr	r3, [r3, #4]
 8017bc4:	685b      	ldr	r3, [r3, #4]
 8017bc6:	1ad3      	subs	r3, r2, r3
 8017bc8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	685b      	ldr	r3, [r3, #4]
 8017bce:	8959      	ldrh	r1, [r3, #10]
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	685b      	ldr	r3, [r3, #4]
 8017bd4:	8b3a      	ldrh	r2, [r7, #24]
 8017bd6:	1a8a      	subs	r2, r1, r2
 8017bd8:	b292      	uxth	r2, r2
 8017bda:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8017bdc:	68fb      	ldr	r3, [r7, #12]
 8017bde:	685b      	ldr	r3, [r3, #4]
 8017be0:	8919      	ldrh	r1, [r3, #8]
 8017be2:	68fb      	ldr	r3, [r7, #12]
 8017be4:	685b      	ldr	r3, [r3, #4]
 8017be6:	8b3a      	ldrh	r2, [r7, #24]
 8017be8:	1a8a      	subs	r2, r1, r2
 8017bea:	b292      	uxth	r2, r2
 8017bec:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8017bee:	68fb      	ldr	r3, [r7, #12]
 8017bf0:	685b      	ldr	r3, [r3, #4]
 8017bf2:	68fa      	ldr	r2, [r7, #12]
 8017bf4:	68d2      	ldr	r2, [r2, #12]
 8017bf6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8017bf8:	68fb      	ldr	r3, [r7, #12]
 8017bfa:	68db      	ldr	r3, [r3, #12]
 8017bfc:	2200      	movs	r2, #0
 8017bfe:	741a      	strb	r2, [r3, #16]
 8017c00:	2200      	movs	r2, #0
 8017c02:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	68db      	ldr	r3, [r3, #12]
 8017c08:	f103 0214 	add.w	r2, r3, #20
 8017c0c:	68fb      	ldr	r3, [r7, #12]
 8017c0e:	7a9b      	ldrb	r3, [r3, #10]
 8017c10:	009b      	lsls	r3, r3, #2
 8017c12:	f003 0304 	and.w	r3, r3, #4
 8017c16:	4413      	add	r3, r2
 8017c18:	69fa      	ldr	r2, [r7, #28]
 8017c1a:	429a      	cmp	r2, r3
 8017c1c:	d006      	beq.n	8017c2c <tcp_output_segment+0x16c>
 8017c1e:	4b10      	ldr	r3, [pc, #64]	; (8017c60 <tcp_output_segment+0x1a0>)
 8017c20:	f240 621c 	movw	r2, #1564	; 0x61c
 8017c24:	4914      	ldr	r1, [pc, #80]	; (8017c78 <tcp_output_segment+0x1b8>)
 8017c26:	4810      	ldr	r0, [pc, #64]	; (8017c68 <tcp_output_segment+0x1a8>)
 8017c28:	f003 fdec 	bl	801b804 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	6858      	ldr	r0, [r3, #4]
 8017c30:	68b9      	ldr	r1, [r7, #8]
 8017c32:	68bb      	ldr	r3, [r7, #8]
 8017c34:	1d1c      	adds	r4, r3, #4
 8017c36:	68bb      	ldr	r3, [r7, #8]
 8017c38:	7add      	ldrb	r5, [r3, #11]
 8017c3a:	68bb      	ldr	r3, [r7, #8]
 8017c3c:	7a9b      	ldrb	r3, [r3, #10]
 8017c3e:	687a      	ldr	r2, [r7, #4]
 8017c40:	9202      	str	r2, [sp, #8]
 8017c42:	2206      	movs	r2, #6
 8017c44:	9201      	str	r2, [sp, #4]
 8017c46:	9300      	str	r3, [sp, #0]
 8017c48:	462b      	mov	r3, r5
 8017c4a:	4622      	mov	r2, r4
 8017c4c:	f002 fbac 	bl	801a3a8 <ip4_output_if>
 8017c50:	4603      	mov	r3, r0
 8017c52:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8017c54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017c58:	4618      	mov	r0, r3
 8017c5a:	3720      	adds	r7, #32
 8017c5c:	46bd      	mov	sp, r7
 8017c5e:	bdb0      	pop	{r4, r5, r7, pc}
 8017c60:	0801f0f0 	.word	0x0801f0f0
 8017c64:	0801f6b4 	.word	0x0801f6b4
 8017c68:	0801f144 	.word	0x0801f144
 8017c6c:	0801f6d4 	.word	0x0801f6d4
 8017c70:	0801f6f4 	.word	0x0801f6f4
 8017c74:	2001108c 	.word	0x2001108c
 8017c78:	0801f718 	.word	0x0801f718

08017c7c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8017c7c:	b5b0      	push	{r4, r5, r7, lr}
 8017c7e:	b084      	sub	sp, #16
 8017c80:	af00      	add	r7, sp, #0
 8017c82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d106      	bne.n	8017c98 <tcp_rexmit_rto_prepare+0x1c>
 8017c8a:	4b31      	ldr	r3, [pc, #196]	; (8017d50 <tcp_rexmit_rto_prepare+0xd4>)
 8017c8c:	f240 6263 	movw	r2, #1635	; 0x663
 8017c90:	4930      	ldr	r1, [pc, #192]	; (8017d54 <tcp_rexmit_rto_prepare+0xd8>)
 8017c92:	4831      	ldr	r0, [pc, #196]	; (8017d58 <tcp_rexmit_rto_prepare+0xdc>)
 8017c94:	f003 fdb6 	bl	801b804 <iprintf>

  if (pcb->unacked == NULL) {
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d102      	bne.n	8017ca6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8017ca0:	f06f 0305 	mvn.w	r3, #5
 8017ca4:	e050      	b.n	8017d48 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017caa:	60fb      	str	r3, [r7, #12]
 8017cac:	e00b      	b.n	8017cc6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8017cae:	68f8      	ldr	r0, [r7, #12]
 8017cb0:	f7ff fee6 	bl	8017a80 <tcp_output_segment_busy>
 8017cb4:	4603      	mov	r3, r0
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d002      	beq.n	8017cc0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8017cba:	f06f 0305 	mvn.w	r3, #5
 8017cbe:	e043      	b.n	8017d48 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	681b      	ldr	r3, [r3, #0]
 8017cc4:	60fb      	str	r3, [r7, #12]
 8017cc6:	68fb      	ldr	r3, [r7, #12]
 8017cc8:	681b      	ldr	r3, [r3, #0]
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d1ef      	bne.n	8017cae <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8017cce:	68f8      	ldr	r0, [r7, #12]
 8017cd0:	f7ff fed6 	bl	8017a80 <tcp_output_segment_busy>
 8017cd4:	4603      	mov	r3, r0
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d002      	beq.n	8017ce0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8017cda:	f06f 0305 	mvn.w	r3, #5
 8017cde:	e033      	b.n	8017d48 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017ce4:	68fb      	ldr	r3, [r7, #12]
 8017ce6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	2200      	movs	r2, #0
 8017cf4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	8b5b      	ldrh	r3, [r3, #26]
 8017cfa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8017cfe:	b29a      	uxth	r2, r3
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	68db      	ldr	r3, [r3, #12]
 8017d08:	685b      	ldr	r3, [r3, #4]
 8017d0a:	4618      	mov	r0, r3
 8017d0c:	f7f8 fdd5 	bl	80108ba <lwip_htonl>
 8017d10:	4604      	mov	r4, r0
 8017d12:	68fb      	ldr	r3, [r7, #12]
 8017d14:	891b      	ldrh	r3, [r3, #8]
 8017d16:	461d      	mov	r5, r3
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	68db      	ldr	r3, [r3, #12]
 8017d1c:	899b      	ldrh	r3, [r3, #12]
 8017d1e:	b29b      	uxth	r3, r3
 8017d20:	4618      	mov	r0, r3
 8017d22:	f7f8 fdb5 	bl	8010890 <lwip_htons>
 8017d26:	4603      	mov	r3, r0
 8017d28:	b2db      	uxtb	r3, r3
 8017d2a:	f003 0303 	and.w	r3, r3, #3
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d001      	beq.n	8017d36 <tcp_rexmit_rto_prepare+0xba>
 8017d32:	2301      	movs	r3, #1
 8017d34:	e000      	b.n	8017d38 <tcp_rexmit_rto_prepare+0xbc>
 8017d36:	2300      	movs	r3, #0
 8017d38:	442b      	add	r3, r5
 8017d3a:	18e2      	adds	r2, r4, r3
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	2200      	movs	r2, #0
 8017d44:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8017d46:	2300      	movs	r3, #0
}
 8017d48:	4618      	mov	r0, r3
 8017d4a:	3710      	adds	r7, #16
 8017d4c:	46bd      	mov	sp, r7
 8017d4e:	bdb0      	pop	{r4, r5, r7, pc}
 8017d50:	0801f0f0 	.word	0x0801f0f0
 8017d54:	0801f72c 	.word	0x0801f72c
 8017d58:	0801f144 	.word	0x0801f144

08017d5c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8017d5c:	b580      	push	{r7, lr}
 8017d5e:	b082      	sub	sp, #8
 8017d60:	af00      	add	r7, sp, #0
 8017d62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d106      	bne.n	8017d78 <tcp_rexmit_rto_commit+0x1c>
 8017d6a:	4b0d      	ldr	r3, [pc, #52]	; (8017da0 <tcp_rexmit_rto_commit+0x44>)
 8017d6c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8017d70:	490c      	ldr	r1, [pc, #48]	; (8017da4 <tcp_rexmit_rto_commit+0x48>)
 8017d72:	480d      	ldr	r0, [pc, #52]	; (8017da8 <tcp_rexmit_rto_commit+0x4c>)
 8017d74:	f003 fd46 	bl	801b804 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017d7e:	2bff      	cmp	r3, #255	; 0xff
 8017d80:	d007      	beq.n	8017d92 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017d88:	3301      	adds	r3, #1
 8017d8a:	b2da      	uxtb	r2, r3
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8017d92:	6878      	ldr	r0, [r7, #4]
 8017d94:	f7ff fc80 	bl	8017698 <tcp_output>
}
 8017d98:	bf00      	nop
 8017d9a:	3708      	adds	r7, #8
 8017d9c:	46bd      	mov	sp, r7
 8017d9e:	bd80      	pop	{r7, pc}
 8017da0:	0801f0f0 	.word	0x0801f0f0
 8017da4:	0801f750 	.word	0x0801f750
 8017da8:	0801f144 	.word	0x0801f144

08017dac <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8017dac:	b580      	push	{r7, lr}
 8017dae:	b082      	sub	sp, #8
 8017db0:	af00      	add	r7, sp, #0
 8017db2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	d106      	bne.n	8017dc8 <tcp_rexmit_rto+0x1c>
 8017dba:	4b0a      	ldr	r3, [pc, #40]	; (8017de4 <tcp_rexmit_rto+0x38>)
 8017dbc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8017dc0:	4909      	ldr	r1, [pc, #36]	; (8017de8 <tcp_rexmit_rto+0x3c>)
 8017dc2:	480a      	ldr	r0, [pc, #40]	; (8017dec <tcp_rexmit_rto+0x40>)
 8017dc4:	f003 fd1e 	bl	801b804 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8017dc8:	6878      	ldr	r0, [r7, #4]
 8017dca:	f7ff ff57 	bl	8017c7c <tcp_rexmit_rto_prepare>
 8017dce:	4603      	mov	r3, r0
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d102      	bne.n	8017dda <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017dd4:	6878      	ldr	r0, [r7, #4]
 8017dd6:	f7ff ffc1 	bl	8017d5c <tcp_rexmit_rto_commit>
  }
}
 8017dda:	bf00      	nop
 8017ddc:	3708      	adds	r7, #8
 8017dde:	46bd      	mov	sp, r7
 8017de0:	bd80      	pop	{r7, pc}
 8017de2:	bf00      	nop
 8017de4:	0801f0f0 	.word	0x0801f0f0
 8017de8:	0801f774 	.word	0x0801f774
 8017dec:	0801f144 	.word	0x0801f144

08017df0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8017df0:	b590      	push	{r4, r7, lr}
 8017df2:	b085      	sub	sp, #20
 8017df4:	af00      	add	r7, sp, #0
 8017df6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	d106      	bne.n	8017e0c <tcp_rexmit+0x1c>
 8017dfe:	4b2f      	ldr	r3, [pc, #188]	; (8017ebc <tcp_rexmit+0xcc>)
 8017e00:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8017e04:	492e      	ldr	r1, [pc, #184]	; (8017ec0 <tcp_rexmit+0xd0>)
 8017e06:	482f      	ldr	r0, [pc, #188]	; (8017ec4 <tcp_rexmit+0xd4>)
 8017e08:	f003 fcfc 	bl	801b804 <iprintf>

  if (pcb->unacked == NULL) {
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d102      	bne.n	8017e1a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017e14:	f06f 0305 	mvn.w	r3, #5
 8017e18:	e04c      	b.n	8017eb4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017e1e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8017e20:	68b8      	ldr	r0, [r7, #8]
 8017e22:	f7ff fe2d 	bl	8017a80 <tcp_output_segment_busy>
 8017e26:	4603      	mov	r3, r0
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d002      	beq.n	8017e32 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8017e2c:	f06f 0305 	mvn.w	r3, #5
 8017e30:	e040      	b.n	8017eb4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8017e32:	68bb      	ldr	r3, [r7, #8]
 8017e34:	681a      	ldr	r2, [r3, #0]
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	336c      	adds	r3, #108	; 0x6c
 8017e3e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017e40:	e002      	b.n	8017e48 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8017e42:	68fb      	ldr	r3, [r7, #12]
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d011      	beq.n	8017e74 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017e50:	68fb      	ldr	r3, [r7, #12]
 8017e52:	681b      	ldr	r3, [r3, #0]
 8017e54:	68db      	ldr	r3, [r3, #12]
 8017e56:	685b      	ldr	r3, [r3, #4]
 8017e58:	4618      	mov	r0, r3
 8017e5a:	f7f8 fd2e 	bl	80108ba <lwip_htonl>
 8017e5e:	4604      	mov	r4, r0
 8017e60:	68bb      	ldr	r3, [r7, #8]
 8017e62:	68db      	ldr	r3, [r3, #12]
 8017e64:	685b      	ldr	r3, [r3, #4]
 8017e66:	4618      	mov	r0, r3
 8017e68:	f7f8 fd27 	bl	80108ba <lwip_htonl>
 8017e6c:	4603      	mov	r3, r0
 8017e6e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	dbe6      	blt.n	8017e42 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	681a      	ldr	r2, [r3, #0]
 8017e78:	68bb      	ldr	r3, [r7, #8]
 8017e7a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	68ba      	ldr	r2, [r7, #8]
 8017e80:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8017e82:	68bb      	ldr	r3, [r7, #8]
 8017e84:	681b      	ldr	r3, [r3, #0]
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	d103      	bne.n	8017e92 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	2200      	movs	r2, #0
 8017e8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017e98:	2bff      	cmp	r3, #255	; 0xff
 8017e9a:	d007      	beq.n	8017eac <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017ea2:	3301      	adds	r3, #1
 8017ea4:	b2da      	uxtb	r2, r3
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	2200      	movs	r2, #0
 8017eb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8017eb2:	2300      	movs	r3, #0
}
 8017eb4:	4618      	mov	r0, r3
 8017eb6:	3714      	adds	r7, #20
 8017eb8:	46bd      	mov	sp, r7
 8017eba:	bd90      	pop	{r4, r7, pc}
 8017ebc:	0801f0f0 	.word	0x0801f0f0
 8017ec0:	0801f790 	.word	0x0801f790
 8017ec4:	0801f144 	.word	0x0801f144

08017ec8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8017ec8:	b580      	push	{r7, lr}
 8017eca:	b082      	sub	sp, #8
 8017ecc:	af00      	add	r7, sp, #0
 8017ece:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d106      	bne.n	8017ee4 <tcp_rexmit_fast+0x1c>
 8017ed6:	4b2a      	ldr	r3, [pc, #168]	; (8017f80 <tcp_rexmit_fast+0xb8>)
 8017ed8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8017edc:	4929      	ldr	r1, [pc, #164]	; (8017f84 <tcp_rexmit_fast+0xbc>)
 8017ede:	482a      	ldr	r0, [pc, #168]	; (8017f88 <tcp_rexmit_fast+0xc0>)
 8017ee0:	f003 fc90 	bl	801b804 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d045      	beq.n	8017f78 <tcp_rexmit_fast+0xb0>
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	8b5b      	ldrh	r3, [r3, #26]
 8017ef0:	f003 0304 	and.w	r3, r3, #4
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d13f      	bne.n	8017f78 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8017ef8:	6878      	ldr	r0, [r7, #4]
 8017efa:	f7ff ff79 	bl	8017df0 <tcp_rexmit>
 8017efe:	4603      	mov	r3, r0
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d139      	bne.n	8017f78 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017f10:	4293      	cmp	r3, r2
 8017f12:	bf28      	it	cs
 8017f14:	4613      	movcs	r3, r2
 8017f16:	b29b      	uxth	r3, r3
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	da00      	bge.n	8017f1e <tcp_rexmit_fast+0x56>
 8017f1c:	3301      	adds	r3, #1
 8017f1e:	105b      	asrs	r3, r3, #1
 8017f20:	b29a      	uxth	r2, r3
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017f2e:	461a      	mov	r2, r3
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017f34:	005b      	lsls	r3, r3, #1
 8017f36:	429a      	cmp	r2, r3
 8017f38:	d206      	bcs.n	8017f48 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017f3e:	005b      	lsls	r3, r3, #1
 8017f40:	b29a      	uxth	r2, r3
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017f52:	4619      	mov	r1, r3
 8017f54:	0049      	lsls	r1, r1, #1
 8017f56:	440b      	add	r3, r1
 8017f58:	b29b      	uxth	r3, r3
 8017f5a:	4413      	add	r3, r2
 8017f5c:	b29a      	uxth	r2, r3
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	8b5b      	ldrh	r3, [r3, #26]
 8017f68:	f043 0304 	orr.w	r3, r3, #4
 8017f6c:	b29a      	uxth	r2, r3
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	2200      	movs	r2, #0
 8017f76:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8017f78:	bf00      	nop
 8017f7a:	3708      	adds	r7, #8
 8017f7c:	46bd      	mov	sp, r7
 8017f7e:	bd80      	pop	{r7, pc}
 8017f80:	0801f0f0 	.word	0x0801f0f0
 8017f84:	0801f7a8 	.word	0x0801f7a8
 8017f88:	0801f144 	.word	0x0801f144

08017f8c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8017f8c:	b580      	push	{r7, lr}
 8017f8e:	b086      	sub	sp, #24
 8017f90:	af00      	add	r7, sp, #0
 8017f92:	60f8      	str	r0, [r7, #12]
 8017f94:	607b      	str	r3, [r7, #4]
 8017f96:	460b      	mov	r3, r1
 8017f98:	817b      	strh	r3, [r7, #10]
 8017f9a:	4613      	mov	r3, r2
 8017f9c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8017f9e:	897a      	ldrh	r2, [r7, #10]
 8017fa0:	893b      	ldrh	r3, [r7, #8]
 8017fa2:	4413      	add	r3, r2
 8017fa4:	b29b      	uxth	r3, r3
 8017fa6:	3314      	adds	r3, #20
 8017fa8:	b29b      	uxth	r3, r3
 8017faa:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017fae:	4619      	mov	r1, r3
 8017fb0:	2022      	movs	r0, #34	; 0x22
 8017fb2:	f7f9 fd7b 	bl	8011aac <pbuf_alloc>
 8017fb6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8017fb8:	697b      	ldr	r3, [r7, #20]
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d04d      	beq.n	801805a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8017fbe:	897b      	ldrh	r3, [r7, #10]
 8017fc0:	3313      	adds	r3, #19
 8017fc2:	697a      	ldr	r2, [r7, #20]
 8017fc4:	8952      	ldrh	r2, [r2, #10]
 8017fc6:	4293      	cmp	r3, r2
 8017fc8:	db06      	blt.n	8017fd8 <tcp_output_alloc_header_common+0x4c>
 8017fca:	4b26      	ldr	r3, [pc, #152]	; (8018064 <tcp_output_alloc_header_common+0xd8>)
 8017fcc:	f240 7223 	movw	r2, #1827	; 0x723
 8017fd0:	4925      	ldr	r1, [pc, #148]	; (8018068 <tcp_output_alloc_header_common+0xdc>)
 8017fd2:	4826      	ldr	r0, [pc, #152]	; (801806c <tcp_output_alloc_header_common+0xe0>)
 8017fd4:	f003 fc16 	bl	801b804 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8017fd8:	697b      	ldr	r3, [r7, #20]
 8017fda:	685b      	ldr	r3, [r3, #4]
 8017fdc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8017fde:	8c3b      	ldrh	r3, [r7, #32]
 8017fe0:	4618      	mov	r0, r3
 8017fe2:	f7f8 fc55 	bl	8010890 <lwip_htons>
 8017fe6:	4603      	mov	r3, r0
 8017fe8:	461a      	mov	r2, r3
 8017fea:	693b      	ldr	r3, [r7, #16]
 8017fec:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8017fee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017ff0:	4618      	mov	r0, r3
 8017ff2:	f7f8 fc4d 	bl	8010890 <lwip_htons>
 8017ff6:	4603      	mov	r3, r0
 8017ff8:	461a      	mov	r2, r3
 8017ffa:	693b      	ldr	r3, [r7, #16]
 8017ffc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8017ffe:	693b      	ldr	r3, [r7, #16]
 8018000:	687a      	ldr	r2, [r7, #4]
 8018002:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8018004:	68f8      	ldr	r0, [r7, #12]
 8018006:	f7f8 fc58 	bl	80108ba <lwip_htonl>
 801800a:	4602      	mov	r2, r0
 801800c:	693b      	ldr	r3, [r7, #16]
 801800e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8018010:	897b      	ldrh	r3, [r7, #10]
 8018012:	089b      	lsrs	r3, r3, #2
 8018014:	b29b      	uxth	r3, r3
 8018016:	3305      	adds	r3, #5
 8018018:	b29b      	uxth	r3, r3
 801801a:	031b      	lsls	r3, r3, #12
 801801c:	b29a      	uxth	r2, r3
 801801e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018022:	b29b      	uxth	r3, r3
 8018024:	4313      	orrs	r3, r2
 8018026:	b29b      	uxth	r3, r3
 8018028:	4618      	mov	r0, r3
 801802a:	f7f8 fc31 	bl	8010890 <lwip_htons>
 801802e:	4603      	mov	r3, r0
 8018030:	461a      	mov	r2, r3
 8018032:	693b      	ldr	r3, [r7, #16]
 8018034:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8018036:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018038:	4618      	mov	r0, r3
 801803a:	f7f8 fc29 	bl	8010890 <lwip_htons>
 801803e:	4603      	mov	r3, r0
 8018040:	461a      	mov	r2, r3
 8018042:	693b      	ldr	r3, [r7, #16]
 8018044:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8018046:	693b      	ldr	r3, [r7, #16]
 8018048:	2200      	movs	r2, #0
 801804a:	741a      	strb	r2, [r3, #16]
 801804c:	2200      	movs	r2, #0
 801804e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8018050:	693b      	ldr	r3, [r7, #16]
 8018052:	2200      	movs	r2, #0
 8018054:	749a      	strb	r2, [r3, #18]
 8018056:	2200      	movs	r2, #0
 8018058:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801805a:	697b      	ldr	r3, [r7, #20]
}
 801805c:	4618      	mov	r0, r3
 801805e:	3718      	adds	r7, #24
 8018060:	46bd      	mov	sp, r7
 8018062:	bd80      	pop	{r7, pc}
 8018064:	0801f0f0 	.word	0x0801f0f0
 8018068:	0801f7c8 	.word	0x0801f7c8
 801806c:	0801f144 	.word	0x0801f144

08018070 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8018070:	b5b0      	push	{r4, r5, r7, lr}
 8018072:	b08a      	sub	sp, #40	; 0x28
 8018074:	af04      	add	r7, sp, #16
 8018076:	60f8      	str	r0, [r7, #12]
 8018078:	607b      	str	r3, [r7, #4]
 801807a:	460b      	mov	r3, r1
 801807c:	817b      	strh	r3, [r7, #10]
 801807e:	4613      	mov	r3, r2
 8018080:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8018082:	68fb      	ldr	r3, [r7, #12]
 8018084:	2b00      	cmp	r3, #0
 8018086:	d106      	bne.n	8018096 <tcp_output_alloc_header+0x26>
 8018088:	4b15      	ldr	r3, [pc, #84]	; (80180e0 <tcp_output_alloc_header+0x70>)
 801808a:	f240 7242 	movw	r2, #1858	; 0x742
 801808e:	4915      	ldr	r1, [pc, #84]	; (80180e4 <tcp_output_alloc_header+0x74>)
 8018090:	4815      	ldr	r0, [pc, #84]	; (80180e8 <tcp_output_alloc_header+0x78>)
 8018092:	f003 fbb7 	bl	801b804 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8018096:	68fb      	ldr	r3, [r7, #12]
 8018098:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801809a:	68fb      	ldr	r3, [r7, #12]
 801809c:	8adb      	ldrh	r3, [r3, #22]
 801809e:	68fa      	ldr	r2, [r7, #12]
 80180a0:	8b12      	ldrh	r2, [r2, #24]
 80180a2:	68f9      	ldr	r1, [r7, #12]
 80180a4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80180a6:	893d      	ldrh	r5, [r7, #8]
 80180a8:	897c      	ldrh	r4, [r7, #10]
 80180aa:	9103      	str	r1, [sp, #12]
 80180ac:	2110      	movs	r1, #16
 80180ae:	9102      	str	r1, [sp, #8]
 80180b0:	9201      	str	r2, [sp, #4]
 80180b2:	9300      	str	r3, [sp, #0]
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	462a      	mov	r2, r5
 80180b8:	4621      	mov	r1, r4
 80180ba:	f7ff ff67 	bl	8017f8c <tcp_output_alloc_header_common>
 80180be:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80180c0:	697b      	ldr	r3, [r7, #20]
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d006      	beq.n	80180d4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80180c6:	68fb      	ldr	r3, [r7, #12]
 80180c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180ca:	68fa      	ldr	r2, [r7, #12]
 80180cc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80180ce:	441a      	add	r2, r3
 80180d0:	68fb      	ldr	r3, [r7, #12]
 80180d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80180d4:	697b      	ldr	r3, [r7, #20]
}
 80180d6:	4618      	mov	r0, r3
 80180d8:	3718      	adds	r7, #24
 80180da:	46bd      	mov	sp, r7
 80180dc:	bdb0      	pop	{r4, r5, r7, pc}
 80180de:	bf00      	nop
 80180e0:	0801f0f0 	.word	0x0801f0f0
 80180e4:	0801f7f8 	.word	0x0801f7f8
 80180e8:	0801f144 	.word	0x0801f144

080180ec <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80180ec:	b580      	push	{r7, lr}
 80180ee:	b088      	sub	sp, #32
 80180f0:	af00      	add	r7, sp, #0
 80180f2:	60f8      	str	r0, [r7, #12]
 80180f4:	60b9      	str	r1, [r7, #8]
 80180f6:	4611      	mov	r1, r2
 80180f8:	461a      	mov	r2, r3
 80180fa:	460b      	mov	r3, r1
 80180fc:	71fb      	strb	r3, [r7, #7]
 80180fe:	4613      	mov	r3, r2
 8018100:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8018102:	2300      	movs	r3, #0
 8018104:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8018106:	68bb      	ldr	r3, [r7, #8]
 8018108:	2b00      	cmp	r3, #0
 801810a:	d106      	bne.n	801811a <tcp_output_fill_options+0x2e>
 801810c:	4b13      	ldr	r3, [pc, #76]	; (801815c <tcp_output_fill_options+0x70>)
 801810e:	f240 7256 	movw	r2, #1878	; 0x756
 8018112:	4913      	ldr	r1, [pc, #76]	; (8018160 <tcp_output_fill_options+0x74>)
 8018114:	4813      	ldr	r0, [pc, #76]	; (8018164 <tcp_output_fill_options+0x78>)
 8018116:	f003 fb75 	bl	801b804 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801811a:	68bb      	ldr	r3, [r7, #8]
 801811c:	685b      	ldr	r3, [r3, #4]
 801811e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8018120:	69bb      	ldr	r3, [r7, #24]
 8018122:	3314      	adds	r3, #20
 8018124:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8018126:	69bb      	ldr	r3, [r7, #24]
 8018128:	f103 0214 	add.w	r2, r3, #20
 801812c:	8bfb      	ldrh	r3, [r7, #30]
 801812e:	009b      	lsls	r3, r3, #2
 8018130:	4619      	mov	r1, r3
 8018132:	79fb      	ldrb	r3, [r7, #7]
 8018134:	009b      	lsls	r3, r3, #2
 8018136:	f003 0304 	and.w	r3, r3, #4
 801813a:	440b      	add	r3, r1
 801813c:	4413      	add	r3, r2
 801813e:	697a      	ldr	r2, [r7, #20]
 8018140:	429a      	cmp	r2, r3
 8018142:	d006      	beq.n	8018152 <tcp_output_fill_options+0x66>
 8018144:	4b05      	ldr	r3, [pc, #20]	; (801815c <tcp_output_fill_options+0x70>)
 8018146:	f240 7275 	movw	r2, #1909	; 0x775
 801814a:	4907      	ldr	r1, [pc, #28]	; (8018168 <tcp_output_fill_options+0x7c>)
 801814c:	4805      	ldr	r0, [pc, #20]	; (8018164 <tcp_output_fill_options+0x78>)
 801814e:	f003 fb59 	bl	801b804 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8018152:	bf00      	nop
 8018154:	3720      	adds	r7, #32
 8018156:	46bd      	mov	sp, r7
 8018158:	bd80      	pop	{r7, pc}
 801815a:	bf00      	nop
 801815c:	0801f0f0 	.word	0x0801f0f0
 8018160:	0801f820 	.word	0x0801f820
 8018164:	0801f144 	.word	0x0801f144
 8018168:	0801f718 	.word	0x0801f718

0801816c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801816c:	b580      	push	{r7, lr}
 801816e:	b08a      	sub	sp, #40	; 0x28
 8018170:	af04      	add	r7, sp, #16
 8018172:	60f8      	str	r0, [r7, #12]
 8018174:	60b9      	str	r1, [r7, #8]
 8018176:	607a      	str	r2, [r7, #4]
 8018178:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801817a:	68bb      	ldr	r3, [r7, #8]
 801817c:	2b00      	cmp	r3, #0
 801817e:	d106      	bne.n	801818e <tcp_output_control_segment+0x22>
 8018180:	4b1c      	ldr	r3, [pc, #112]	; (80181f4 <tcp_output_control_segment+0x88>)
 8018182:	f240 7287 	movw	r2, #1927	; 0x787
 8018186:	491c      	ldr	r1, [pc, #112]	; (80181f8 <tcp_output_control_segment+0x8c>)
 8018188:	481c      	ldr	r0, [pc, #112]	; (80181fc <tcp_output_control_segment+0x90>)
 801818a:	f003 fb3b 	bl	801b804 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801818e:	683a      	ldr	r2, [r7, #0]
 8018190:	6879      	ldr	r1, [r7, #4]
 8018192:	68f8      	ldr	r0, [r7, #12]
 8018194:	f7fe fae8 	bl	8016768 <tcp_route>
 8018198:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801819a:	693b      	ldr	r3, [r7, #16]
 801819c:	2b00      	cmp	r3, #0
 801819e:	d102      	bne.n	80181a6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80181a0:	23fc      	movs	r3, #252	; 0xfc
 80181a2:	75fb      	strb	r3, [r7, #23]
 80181a4:	e01c      	b.n	80181e0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80181a6:	68fb      	ldr	r3, [r7, #12]
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d006      	beq.n	80181ba <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80181ac:	68fb      	ldr	r3, [r7, #12]
 80181ae:	7adb      	ldrb	r3, [r3, #11]
 80181b0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80181b2:	68fb      	ldr	r3, [r7, #12]
 80181b4:	7a9b      	ldrb	r3, [r3, #10]
 80181b6:	757b      	strb	r3, [r7, #21]
 80181b8:	e003      	b.n	80181c2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80181ba:	23ff      	movs	r3, #255	; 0xff
 80181bc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80181be:	2300      	movs	r3, #0
 80181c0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80181c2:	7dba      	ldrb	r2, [r7, #22]
 80181c4:	693b      	ldr	r3, [r7, #16]
 80181c6:	9302      	str	r3, [sp, #8]
 80181c8:	2306      	movs	r3, #6
 80181ca:	9301      	str	r3, [sp, #4]
 80181cc:	7d7b      	ldrb	r3, [r7, #21]
 80181ce:	9300      	str	r3, [sp, #0]
 80181d0:	4613      	mov	r3, r2
 80181d2:	683a      	ldr	r2, [r7, #0]
 80181d4:	6879      	ldr	r1, [r7, #4]
 80181d6:	68b8      	ldr	r0, [r7, #8]
 80181d8:	f002 f8e6 	bl	801a3a8 <ip4_output_if>
 80181dc:	4603      	mov	r3, r0
 80181de:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80181e0:	68b8      	ldr	r0, [r7, #8]
 80181e2:	f7f9 ff79 	bl	80120d8 <pbuf_free>
  return err;
 80181e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80181ea:	4618      	mov	r0, r3
 80181ec:	3718      	adds	r7, #24
 80181ee:	46bd      	mov	sp, r7
 80181f0:	bd80      	pop	{r7, pc}
 80181f2:	bf00      	nop
 80181f4:	0801f0f0 	.word	0x0801f0f0
 80181f8:	0801f848 	.word	0x0801f848
 80181fc:	0801f144 	.word	0x0801f144

08018200 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8018200:	b590      	push	{r4, r7, lr}
 8018202:	b08b      	sub	sp, #44	; 0x2c
 8018204:	af04      	add	r7, sp, #16
 8018206:	60f8      	str	r0, [r7, #12]
 8018208:	60b9      	str	r1, [r7, #8]
 801820a:	607a      	str	r2, [r7, #4]
 801820c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801820e:	683b      	ldr	r3, [r7, #0]
 8018210:	2b00      	cmp	r3, #0
 8018212:	d106      	bne.n	8018222 <tcp_rst+0x22>
 8018214:	4b1f      	ldr	r3, [pc, #124]	; (8018294 <tcp_rst+0x94>)
 8018216:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801821a:	491f      	ldr	r1, [pc, #124]	; (8018298 <tcp_rst+0x98>)
 801821c:	481f      	ldr	r0, [pc, #124]	; (801829c <tcp_rst+0x9c>)
 801821e:	f003 faf1 	bl	801b804 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8018222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018224:	2b00      	cmp	r3, #0
 8018226:	d106      	bne.n	8018236 <tcp_rst+0x36>
 8018228:	4b1a      	ldr	r3, [pc, #104]	; (8018294 <tcp_rst+0x94>)
 801822a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801822e:	491c      	ldr	r1, [pc, #112]	; (80182a0 <tcp_rst+0xa0>)
 8018230:	481a      	ldr	r0, [pc, #104]	; (801829c <tcp_rst+0x9c>)
 8018232:	f003 fae7 	bl	801b804 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018236:	2300      	movs	r3, #0
 8018238:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801823a:	f246 0308 	movw	r3, #24584	; 0x6008
 801823e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8018240:	7dfb      	ldrb	r3, [r7, #23]
 8018242:	b29c      	uxth	r4, r3
 8018244:	68b8      	ldr	r0, [r7, #8]
 8018246:	f7f8 fb38 	bl	80108ba <lwip_htonl>
 801824a:	4602      	mov	r2, r0
 801824c:	8abb      	ldrh	r3, [r7, #20]
 801824e:	9303      	str	r3, [sp, #12]
 8018250:	2314      	movs	r3, #20
 8018252:	9302      	str	r3, [sp, #8]
 8018254:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8018256:	9301      	str	r3, [sp, #4]
 8018258:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801825a:	9300      	str	r3, [sp, #0]
 801825c:	4613      	mov	r3, r2
 801825e:	2200      	movs	r2, #0
 8018260:	4621      	mov	r1, r4
 8018262:	6878      	ldr	r0, [r7, #4]
 8018264:	f7ff fe92 	bl	8017f8c <tcp_output_alloc_header_common>
 8018268:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801826a:	693b      	ldr	r3, [r7, #16]
 801826c:	2b00      	cmp	r3, #0
 801826e:	d00c      	beq.n	801828a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018270:	7dfb      	ldrb	r3, [r7, #23]
 8018272:	2200      	movs	r2, #0
 8018274:	6939      	ldr	r1, [r7, #16]
 8018276:	68f8      	ldr	r0, [r7, #12]
 8018278:	f7ff ff38 	bl	80180ec <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801827c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801827e:	683a      	ldr	r2, [r7, #0]
 8018280:	6939      	ldr	r1, [r7, #16]
 8018282:	68f8      	ldr	r0, [r7, #12]
 8018284:	f7ff ff72 	bl	801816c <tcp_output_control_segment>
 8018288:	e000      	b.n	801828c <tcp_rst+0x8c>
    return;
 801828a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801828c:	371c      	adds	r7, #28
 801828e:	46bd      	mov	sp, r7
 8018290:	bd90      	pop	{r4, r7, pc}
 8018292:	bf00      	nop
 8018294:	0801f0f0 	.word	0x0801f0f0
 8018298:	0801f874 	.word	0x0801f874
 801829c:	0801f144 	.word	0x0801f144
 80182a0:	0801f890 	.word	0x0801f890

080182a4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80182a4:	b590      	push	{r4, r7, lr}
 80182a6:	b087      	sub	sp, #28
 80182a8:	af00      	add	r7, sp, #0
 80182aa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80182ac:	2300      	movs	r3, #0
 80182ae:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80182b0:	2300      	movs	r3, #0
 80182b2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d106      	bne.n	80182c8 <tcp_send_empty_ack+0x24>
 80182ba:	4b28      	ldr	r3, [pc, #160]	; (801835c <tcp_send_empty_ack+0xb8>)
 80182bc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80182c0:	4927      	ldr	r1, [pc, #156]	; (8018360 <tcp_send_empty_ack+0xbc>)
 80182c2:	4828      	ldr	r0, [pc, #160]	; (8018364 <tcp_send_empty_ack+0xc0>)
 80182c4:	f003 fa9e 	bl	801b804 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80182c8:	7dfb      	ldrb	r3, [r7, #23]
 80182ca:	009b      	lsls	r3, r3, #2
 80182cc:	b2db      	uxtb	r3, r3
 80182ce:	f003 0304 	and.w	r3, r3, #4
 80182d2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80182d4:	7d7b      	ldrb	r3, [r7, #21]
 80182d6:	b29c      	uxth	r4, r3
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80182dc:	4618      	mov	r0, r3
 80182de:	f7f8 faec 	bl	80108ba <lwip_htonl>
 80182e2:	4603      	mov	r3, r0
 80182e4:	2200      	movs	r2, #0
 80182e6:	4621      	mov	r1, r4
 80182e8:	6878      	ldr	r0, [r7, #4]
 80182ea:	f7ff fec1 	bl	8018070 <tcp_output_alloc_header>
 80182ee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80182f0:	693b      	ldr	r3, [r7, #16]
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d109      	bne.n	801830a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	8b5b      	ldrh	r3, [r3, #26]
 80182fa:	f043 0303 	orr.w	r3, r3, #3
 80182fe:	b29a      	uxth	r2, r3
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8018304:	f06f 0301 	mvn.w	r3, #1
 8018308:	e023      	b.n	8018352 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801830a:	7dbb      	ldrb	r3, [r7, #22]
 801830c:	7dfa      	ldrb	r2, [r7, #23]
 801830e:	6939      	ldr	r1, [r7, #16]
 8018310:	6878      	ldr	r0, [r7, #4]
 8018312:	f7ff feeb 	bl	80180ec <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018316:	687a      	ldr	r2, [r7, #4]
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	3304      	adds	r3, #4
 801831c:	6939      	ldr	r1, [r7, #16]
 801831e:	6878      	ldr	r0, [r7, #4]
 8018320:	f7ff ff24 	bl	801816c <tcp_output_control_segment>
 8018324:	4603      	mov	r3, r0
 8018326:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8018328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801832c:	2b00      	cmp	r3, #0
 801832e:	d007      	beq.n	8018340 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	8b5b      	ldrh	r3, [r3, #26]
 8018334:	f043 0303 	orr.w	r3, r3, #3
 8018338:	b29a      	uxth	r2, r3
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	835a      	strh	r2, [r3, #26]
 801833e:	e006      	b.n	801834e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	8b5b      	ldrh	r3, [r3, #26]
 8018344:	f023 0303 	bic.w	r3, r3, #3
 8018348:	b29a      	uxth	r2, r3
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801834e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018352:	4618      	mov	r0, r3
 8018354:	371c      	adds	r7, #28
 8018356:	46bd      	mov	sp, r7
 8018358:	bd90      	pop	{r4, r7, pc}
 801835a:	bf00      	nop
 801835c:	0801f0f0 	.word	0x0801f0f0
 8018360:	0801f8ac 	.word	0x0801f8ac
 8018364:	0801f144 	.word	0x0801f144

08018368 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8018368:	b590      	push	{r4, r7, lr}
 801836a:	b087      	sub	sp, #28
 801836c:	af00      	add	r7, sp, #0
 801836e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018370:	2300      	movs	r3, #0
 8018372:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	2b00      	cmp	r3, #0
 8018378:	d106      	bne.n	8018388 <tcp_keepalive+0x20>
 801837a:	4b18      	ldr	r3, [pc, #96]	; (80183dc <tcp_keepalive+0x74>)
 801837c:	f640 0224 	movw	r2, #2084	; 0x824
 8018380:	4917      	ldr	r1, [pc, #92]	; (80183e0 <tcp_keepalive+0x78>)
 8018382:	4818      	ldr	r0, [pc, #96]	; (80183e4 <tcp_keepalive+0x7c>)
 8018384:	f003 fa3e 	bl	801b804 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8018388:	7dfb      	ldrb	r3, [r7, #23]
 801838a:	b29c      	uxth	r4, r3
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018390:	3b01      	subs	r3, #1
 8018392:	4618      	mov	r0, r3
 8018394:	f7f8 fa91 	bl	80108ba <lwip_htonl>
 8018398:	4603      	mov	r3, r0
 801839a:	2200      	movs	r2, #0
 801839c:	4621      	mov	r1, r4
 801839e:	6878      	ldr	r0, [r7, #4]
 80183a0:	f7ff fe66 	bl	8018070 <tcp_output_alloc_header>
 80183a4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80183a6:	693b      	ldr	r3, [r7, #16]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d102      	bne.n	80183b2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80183ac:	f04f 33ff 	mov.w	r3, #4294967295
 80183b0:	e010      	b.n	80183d4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80183b2:	7dfb      	ldrb	r3, [r7, #23]
 80183b4:	2200      	movs	r2, #0
 80183b6:	6939      	ldr	r1, [r7, #16]
 80183b8:	6878      	ldr	r0, [r7, #4]
 80183ba:	f7ff fe97 	bl	80180ec <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80183be:	687a      	ldr	r2, [r7, #4]
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	3304      	adds	r3, #4
 80183c4:	6939      	ldr	r1, [r7, #16]
 80183c6:	6878      	ldr	r0, [r7, #4]
 80183c8:	f7ff fed0 	bl	801816c <tcp_output_control_segment>
 80183cc:	4603      	mov	r3, r0
 80183ce:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80183d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80183d4:	4618      	mov	r0, r3
 80183d6:	371c      	adds	r7, #28
 80183d8:	46bd      	mov	sp, r7
 80183da:	bd90      	pop	{r4, r7, pc}
 80183dc:	0801f0f0 	.word	0x0801f0f0
 80183e0:	0801f8cc 	.word	0x0801f8cc
 80183e4:	0801f144 	.word	0x0801f144

080183e8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80183e8:	b590      	push	{r4, r7, lr}
 80183ea:	b08b      	sub	sp, #44	; 0x2c
 80183ec:	af00      	add	r7, sp, #0
 80183ee:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80183f0:	2300      	movs	r3, #0
 80183f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d106      	bne.n	801840a <tcp_zero_window_probe+0x22>
 80183fc:	4b4c      	ldr	r3, [pc, #304]	; (8018530 <tcp_zero_window_probe+0x148>)
 80183fe:	f640 024f 	movw	r2, #2127	; 0x84f
 8018402:	494c      	ldr	r1, [pc, #304]	; (8018534 <tcp_zero_window_probe+0x14c>)
 8018404:	484c      	ldr	r0, [pc, #304]	; (8018538 <tcp_zero_window_probe+0x150>)
 8018406:	f003 f9fd 	bl	801b804 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801840e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8018410:	6a3b      	ldr	r3, [r7, #32]
 8018412:	2b00      	cmp	r3, #0
 8018414:	d101      	bne.n	801841a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8018416:	2300      	movs	r3, #0
 8018418:	e086      	b.n	8018528 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8018420:	2bff      	cmp	r3, #255	; 0xff
 8018422:	d007      	beq.n	8018434 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801842a:	3301      	adds	r3, #1
 801842c:	b2da      	uxtb	r2, r3
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8018434:	6a3b      	ldr	r3, [r7, #32]
 8018436:	68db      	ldr	r3, [r3, #12]
 8018438:	899b      	ldrh	r3, [r3, #12]
 801843a:	b29b      	uxth	r3, r3
 801843c:	4618      	mov	r0, r3
 801843e:	f7f8 fa27 	bl	8010890 <lwip_htons>
 8018442:	4603      	mov	r3, r0
 8018444:	b2db      	uxtb	r3, r3
 8018446:	f003 0301 	and.w	r3, r3, #1
 801844a:	2b00      	cmp	r3, #0
 801844c:	d005      	beq.n	801845a <tcp_zero_window_probe+0x72>
 801844e:	6a3b      	ldr	r3, [r7, #32]
 8018450:	891b      	ldrh	r3, [r3, #8]
 8018452:	2b00      	cmp	r3, #0
 8018454:	d101      	bne.n	801845a <tcp_zero_window_probe+0x72>
 8018456:	2301      	movs	r3, #1
 8018458:	e000      	b.n	801845c <tcp_zero_window_probe+0x74>
 801845a:	2300      	movs	r3, #0
 801845c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801845e:	7ffb      	ldrb	r3, [r7, #31]
 8018460:	2b00      	cmp	r3, #0
 8018462:	bf0c      	ite	eq
 8018464:	2301      	moveq	r3, #1
 8018466:	2300      	movne	r3, #0
 8018468:	b2db      	uxtb	r3, r3
 801846a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801846c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018470:	b299      	uxth	r1, r3
 8018472:	6a3b      	ldr	r3, [r7, #32]
 8018474:	68db      	ldr	r3, [r3, #12]
 8018476:	685b      	ldr	r3, [r3, #4]
 8018478:	8bba      	ldrh	r2, [r7, #28]
 801847a:	6878      	ldr	r0, [r7, #4]
 801847c:	f7ff fdf8 	bl	8018070 <tcp_output_alloc_header>
 8018480:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8018482:	69bb      	ldr	r3, [r7, #24]
 8018484:	2b00      	cmp	r3, #0
 8018486:	d102      	bne.n	801848e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8018488:	f04f 33ff 	mov.w	r3, #4294967295
 801848c:	e04c      	b.n	8018528 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801848e:	69bb      	ldr	r3, [r7, #24]
 8018490:	685b      	ldr	r3, [r3, #4]
 8018492:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8018494:	7ffb      	ldrb	r3, [r7, #31]
 8018496:	2b00      	cmp	r3, #0
 8018498:	d011      	beq.n	80184be <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801849a:	697b      	ldr	r3, [r7, #20]
 801849c:	899b      	ldrh	r3, [r3, #12]
 801849e:	b29b      	uxth	r3, r3
 80184a0:	b21b      	sxth	r3, r3
 80184a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80184a6:	b21c      	sxth	r4, r3
 80184a8:	2011      	movs	r0, #17
 80184aa:	f7f8 f9f1 	bl	8010890 <lwip_htons>
 80184ae:	4603      	mov	r3, r0
 80184b0:	b21b      	sxth	r3, r3
 80184b2:	4323      	orrs	r3, r4
 80184b4:	b21b      	sxth	r3, r3
 80184b6:	b29a      	uxth	r2, r3
 80184b8:	697b      	ldr	r3, [r7, #20]
 80184ba:	819a      	strh	r2, [r3, #12]
 80184bc:	e010      	b.n	80184e0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80184be:	69bb      	ldr	r3, [r7, #24]
 80184c0:	685b      	ldr	r3, [r3, #4]
 80184c2:	3314      	adds	r3, #20
 80184c4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80184c6:	6a3b      	ldr	r3, [r7, #32]
 80184c8:	6858      	ldr	r0, [r3, #4]
 80184ca:	6a3b      	ldr	r3, [r7, #32]
 80184cc:	685b      	ldr	r3, [r3, #4]
 80184ce:	891a      	ldrh	r2, [r3, #8]
 80184d0:	6a3b      	ldr	r3, [r7, #32]
 80184d2:	891b      	ldrh	r3, [r3, #8]
 80184d4:	1ad3      	subs	r3, r2, r3
 80184d6:	b29b      	uxth	r3, r3
 80184d8:	2201      	movs	r2, #1
 80184da:	6939      	ldr	r1, [r7, #16]
 80184dc:	f7f9 fff2 	bl	80124c4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80184e0:	6a3b      	ldr	r3, [r7, #32]
 80184e2:	68db      	ldr	r3, [r3, #12]
 80184e4:	685b      	ldr	r3, [r3, #4]
 80184e6:	4618      	mov	r0, r3
 80184e8:	f7f8 f9e7 	bl	80108ba <lwip_htonl>
 80184ec:	4603      	mov	r3, r0
 80184ee:	3301      	adds	r3, #1
 80184f0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80184f6:	68fb      	ldr	r3, [r7, #12]
 80184f8:	1ad3      	subs	r3, r2, r3
 80184fa:	2b00      	cmp	r3, #0
 80184fc:	da02      	bge.n	8018504 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	68fa      	ldr	r2, [r7, #12]
 8018502:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018508:	2200      	movs	r2, #0
 801850a:	69b9      	ldr	r1, [r7, #24]
 801850c:	6878      	ldr	r0, [r7, #4]
 801850e:	f7ff fded 	bl	80180ec <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018512:	687a      	ldr	r2, [r7, #4]
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	3304      	adds	r3, #4
 8018518:	69b9      	ldr	r1, [r7, #24]
 801851a:	6878      	ldr	r0, [r7, #4]
 801851c:	f7ff fe26 	bl	801816c <tcp_output_control_segment>
 8018520:	4603      	mov	r3, r0
 8018522:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018524:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8018528:	4618      	mov	r0, r3
 801852a:	372c      	adds	r7, #44	; 0x2c
 801852c:	46bd      	mov	sp, r7
 801852e:	bd90      	pop	{r4, r7, pc}
 8018530:	0801f0f0 	.word	0x0801f0f0
 8018534:	0801f8e8 	.word	0x0801f8e8
 8018538:	0801f144 	.word	0x0801f144

0801853c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801853c:	b580      	push	{r7, lr}
 801853e:	b082      	sub	sp, #8
 8018540:	af00      	add	r7, sp, #0
 8018542:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8018544:	f7fa f8ac 	bl	80126a0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8018548:	4b0a      	ldr	r3, [pc, #40]	; (8018574 <tcpip_tcp_timer+0x38>)
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	2b00      	cmp	r3, #0
 801854e:	d103      	bne.n	8018558 <tcpip_tcp_timer+0x1c>
 8018550:	4b09      	ldr	r3, [pc, #36]	; (8018578 <tcpip_tcp_timer+0x3c>)
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	2b00      	cmp	r3, #0
 8018556:	d005      	beq.n	8018564 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018558:	2200      	movs	r2, #0
 801855a:	4908      	ldr	r1, [pc, #32]	; (801857c <tcpip_tcp_timer+0x40>)
 801855c:	20fa      	movs	r0, #250	; 0xfa
 801855e:	f000 f8f3 	bl	8018748 <sys_timeout>
 8018562:	e003      	b.n	801856c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8018564:	4b06      	ldr	r3, [pc, #24]	; (8018580 <tcpip_tcp_timer+0x44>)
 8018566:	2200      	movs	r2, #0
 8018568:	601a      	str	r2, [r3, #0]
  }
}
 801856a:	bf00      	nop
 801856c:	bf00      	nop
 801856e:	3708      	adds	r7, #8
 8018570:	46bd      	mov	sp, r7
 8018572:	bd80      	pop	{r7, pc}
 8018574:	20011098 	.word	0x20011098
 8018578:	2001109c 	.word	0x2001109c
 801857c:	0801853d 	.word	0x0801853d
 8018580:	200110e4 	.word	0x200110e4

08018584 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8018584:	b580      	push	{r7, lr}
 8018586:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8018588:	4b0a      	ldr	r3, [pc, #40]	; (80185b4 <tcp_timer_needed+0x30>)
 801858a:	681b      	ldr	r3, [r3, #0]
 801858c:	2b00      	cmp	r3, #0
 801858e:	d10f      	bne.n	80185b0 <tcp_timer_needed+0x2c>
 8018590:	4b09      	ldr	r3, [pc, #36]	; (80185b8 <tcp_timer_needed+0x34>)
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	2b00      	cmp	r3, #0
 8018596:	d103      	bne.n	80185a0 <tcp_timer_needed+0x1c>
 8018598:	4b08      	ldr	r3, [pc, #32]	; (80185bc <tcp_timer_needed+0x38>)
 801859a:	681b      	ldr	r3, [r3, #0]
 801859c:	2b00      	cmp	r3, #0
 801859e:	d007      	beq.n	80185b0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80185a0:	4b04      	ldr	r3, [pc, #16]	; (80185b4 <tcp_timer_needed+0x30>)
 80185a2:	2201      	movs	r2, #1
 80185a4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80185a6:	2200      	movs	r2, #0
 80185a8:	4905      	ldr	r1, [pc, #20]	; (80185c0 <tcp_timer_needed+0x3c>)
 80185aa:	20fa      	movs	r0, #250	; 0xfa
 80185ac:	f000 f8cc 	bl	8018748 <sys_timeout>
  }
}
 80185b0:	bf00      	nop
 80185b2:	bd80      	pop	{r7, pc}
 80185b4:	200110e4 	.word	0x200110e4
 80185b8:	20011098 	.word	0x20011098
 80185bc:	2001109c 	.word	0x2001109c
 80185c0:	0801853d 	.word	0x0801853d

080185c4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80185c4:	b580      	push	{r7, lr}
 80185c6:	b086      	sub	sp, #24
 80185c8:	af00      	add	r7, sp, #0
 80185ca:	60f8      	str	r0, [r7, #12]
 80185cc:	60b9      	str	r1, [r7, #8]
 80185ce:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80185d0:	200a      	movs	r0, #10
 80185d2:	f7f8 fe35 	bl	8011240 <memp_malloc>
 80185d6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80185d8:	693b      	ldr	r3, [r7, #16]
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d109      	bne.n	80185f2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80185de:	693b      	ldr	r3, [r7, #16]
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d151      	bne.n	8018688 <sys_timeout_abs+0xc4>
 80185e4:	4b2a      	ldr	r3, [pc, #168]	; (8018690 <sys_timeout_abs+0xcc>)
 80185e6:	22be      	movs	r2, #190	; 0xbe
 80185e8:	492a      	ldr	r1, [pc, #168]	; (8018694 <sys_timeout_abs+0xd0>)
 80185ea:	482b      	ldr	r0, [pc, #172]	; (8018698 <sys_timeout_abs+0xd4>)
 80185ec:	f003 f90a 	bl	801b804 <iprintf>
    return;
 80185f0:	e04a      	b.n	8018688 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80185f2:	693b      	ldr	r3, [r7, #16]
 80185f4:	2200      	movs	r2, #0
 80185f6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80185f8:	693b      	ldr	r3, [r7, #16]
 80185fa:	68ba      	ldr	r2, [r7, #8]
 80185fc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80185fe:	693b      	ldr	r3, [r7, #16]
 8018600:	687a      	ldr	r2, [r7, #4]
 8018602:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8018604:	693b      	ldr	r3, [r7, #16]
 8018606:	68fa      	ldr	r2, [r7, #12]
 8018608:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801860a:	4b24      	ldr	r3, [pc, #144]	; (801869c <sys_timeout_abs+0xd8>)
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	2b00      	cmp	r3, #0
 8018610:	d103      	bne.n	801861a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8018612:	4a22      	ldr	r2, [pc, #136]	; (801869c <sys_timeout_abs+0xd8>)
 8018614:	693b      	ldr	r3, [r7, #16]
 8018616:	6013      	str	r3, [r2, #0]
    return;
 8018618:	e037      	b.n	801868a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801861a:	693b      	ldr	r3, [r7, #16]
 801861c:	685a      	ldr	r2, [r3, #4]
 801861e:	4b1f      	ldr	r3, [pc, #124]	; (801869c <sys_timeout_abs+0xd8>)
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	685b      	ldr	r3, [r3, #4]
 8018624:	1ad3      	subs	r3, r2, r3
 8018626:	0fdb      	lsrs	r3, r3, #31
 8018628:	f003 0301 	and.w	r3, r3, #1
 801862c:	b2db      	uxtb	r3, r3
 801862e:	2b00      	cmp	r3, #0
 8018630:	d007      	beq.n	8018642 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8018632:	4b1a      	ldr	r3, [pc, #104]	; (801869c <sys_timeout_abs+0xd8>)
 8018634:	681a      	ldr	r2, [r3, #0]
 8018636:	693b      	ldr	r3, [r7, #16]
 8018638:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801863a:	4a18      	ldr	r2, [pc, #96]	; (801869c <sys_timeout_abs+0xd8>)
 801863c:	693b      	ldr	r3, [r7, #16]
 801863e:	6013      	str	r3, [r2, #0]
 8018640:	e023      	b.n	801868a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8018642:	4b16      	ldr	r3, [pc, #88]	; (801869c <sys_timeout_abs+0xd8>)
 8018644:	681b      	ldr	r3, [r3, #0]
 8018646:	617b      	str	r3, [r7, #20]
 8018648:	e01a      	b.n	8018680 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801864a:	697b      	ldr	r3, [r7, #20]
 801864c:	681b      	ldr	r3, [r3, #0]
 801864e:	2b00      	cmp	r3, #0
 8018650:	d00b      	beq.n	801866a <sys_timeout_abs+0xa6>
 8018652:	693b      	ldr	r3, [r7, #16]
 8018654:	685a      	ldr	r2, [r3, #4]
 8018656:	697b      	ldr	r3, [r7, #20]
 8018658:	681b      	ldr	r3, [r3, #0]
 801865a:	685b      	ldr	r3, [r3, #4]
 801865c:	1ad3      	subs	r3, r2, r3
 801865e:	0fdb      	lsrs	r3, r3, #31
 8018660:	f003 0301 	and.w	r3, r3, #1
 8018664:	b2db      	uxtb	r3, r3
 8018666:	2b00      	cmp	r3, #0
 8018668:	d007      	beq.n	801867a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801866a:	697b      	ldr	r3, [r7, #20]
 801866c:	681a      	ldr	r2, [r3, #0]
 801866e:	693b      	ldr	r3, [r7, #16]
 8018670:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8018672:	697b      	ldr	r3, [r7, #20]
 8018674:	693a      	ldr	r2, [r7, #16]
 8018676:	601a      	str	r2, [r3, #0]
        break;
 8018678:	e007      	b.n	801868a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801867a:	697b      	ldr	r3, [r7, #20]
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	617b      	str	r3, [r7, #20]
 8018680:	697b      	ldr	r3, [r7, #20]
 8018682:	2b00      	cmp	r3, #0
 8018684:	d1e1      	bne.n	801864a <sys_timeout_abs+0x86>
 8018686:	e000      	b.n	801868a <sys_timeout_abs+0xc6>
    return;
 8018688:	bf00      	nop
      }
    }
  }
}
 801868a:	3718      	adds	r7, #24
 801868c:	46bd      	mov	sp, r7
 801868e:	bd80      	pop	{r7, pc}
 8018690:	0801f90c 	.word	0x0801f90c
 8018694:	0801f940 	.word	0x0801f940
 8018698:	0801f980 	.word	0x0801f980
 801869c:	200110dc 	.word	0x200110dc

080186a0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80186a0:	b580      	push	{r7, lr}
 80186a2:	b086      	sub	sp, #24
 80186a4:	af00      	add	r7, sp, #0
 80186a6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80186ac:	697b      	ldr	r3, [r7, #20]
 80186ae:	685b      	ldr	r3, [r3, #4]
 80186b0:	4798      	blx	r3

  now = sys_now();
 80186b2:	f7f0 fb89 	bl	8008dc8 <sys_now>
 80186b6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80186b8:	697b      	ldr	r3, [r7, #20]
 80186ba:	681a      	ldr	r2, [r3, #0]
 80186bc:	4b0f      	ldr	r3, [pc, #60]	; (80186fc <lwip_cyclic_timer+0x5c>)
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	4413      	add	r3, r2
 80186c2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80186c4:	68fa      	ldr	r2, [r7, #12]
 80186c6:	693b      	ldr	r3, [r7, #16]
 80186c8:	1ad3      	subs	r3, r2, r3
 80186ca:	0fdb      	lsrs	r3, r3, #31
 80186cc:	f003 0301 	and.w	r3, r3, #1
 80186d0:	b2db      	uxtb	r3, r3
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d009      	beq.n	80186ea <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80186d6:	697b      	ldr	r3, [r7, #20]
 80186d8:	681a      	ldr	r2, [r3, #0]
 80186da:	693b      	ldr	r3, [r7, #16]
 80186dc:	4413      	add	r3, r2
 80186de:	687a      	ldr	r2, [r7, #4]
 80186e0:	4907      	ldr	r1, [pc, #28]	; (8018700 <lwip_cyclic_timer+0x60>)
 80186e2:	4618      	mov	r0, r3
 80186e4:	f7ff ff6e 	bl	80185c4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80186e8:	e004      	b.n	80186f4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80186ea:	687a      	ldr	r2, [r7, #4]
 80186ec:	4904      	ldr	r1, [pc, #16]	; (8018700 <lwip_cyclic_timer+0x60>)
 80186ee:	68f8      	ldr	r0, [r7, #12]
 80186f0:	f7ff ff68 	bl	80185c4 <sys_timeout_abs>
}
 80186f4:	bf00      	nop
 80186f6:	3718      	adds	r7, #24
 80186f8:	46bd      	mov	sp, r7
 80186fa:	bd80      	pop	{r7, pc}
 80186fc:	200110e0 	.word	0x200110e0
 8018700:	080186a1 	.word	0x080186a1

08018704 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8018704:	b580      	push	{r7, lr}
 8018706:	b082      	sub	sp, #8
 8018708:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801870a:	2301      	movs	r3, #1
 801870c:	607b      	str	r3, [r7, #4]
 801870e:	e00e      	b.n	801872e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8018710:	4a0b      	ldr	r2, [pc, #44]	; (8018740 <sys_timeouts_init+0x3c>)
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	00db      	lsls	r3, r3, #3
 801871c:	4a08      	ldr	r2, [pc, #32]	; (8018740 <sys_timeouts_init+0x3c>)
 801871e:	4413      	add	r3, r2
 8018720:	461a      	mov	r2, r3
 8018722:	4908      	ldr	r1, [pc, #32]	; (8018744 <sys_timeouts_init+0x40>)
 8018724:	f000 f810 	bl	8018748 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	3301      	adds	r3, #1
 801872c:	607b      	str	r3, [r7, #4]
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	2b02      	cmp	r3, #2
 8018732:	d9ed      	bls.n	8018710 <sys_timeouts_init+0xc>
  }
}
 8018734:	bf00      	nop
 8018736:	bf00      	nop
 8018738:	3708      	adds	r7, #8
 801873a:	46bd      	mov	sp, r7
 801873c:	bd80      	pop	{r7, pc}
 801873e:	bf00      	nop
 8018740:	080205f4 	.word	0x080205f4
 8018744:	080186a1 	.word	0x080186a1

08018748 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8018748:	b580      	push	{r7, lr}
 801874a:	b086      	sub	sp, #24
 801874c:	af00      	add	r7, sp, #0
 801874e:	60f8      	str	r0, [r7, #12]
 8018750:	60b9      	str	r1, [r7, #8]
 8018752:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8018754:	68fb      	ldr	r3, [r7, #12]
 8018756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801875a:	d306      	bcc.n	801876a <sys_timeout+0x22>
 801875c:	4b0a      	ldr	r3, [pc, #40]	; (8018788 <sys_timeout+0x40>)
 801875e:	f240 1229 	movw	r2, #297	; 0x129
 8018762:	490a      	ldr	r1, [pc, #40]	; (801878c <sys_timeout+0x44>)
 8018764:	480a      	ldr	r0, [pc, #40]	; (8018790 <sys_timeout+0x48>)
 8018766:	f003 f84d 	bl	801b804 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801876a:	f7f0 fb2d 	bl	8008dc8 <sys_now>
 801876e:	4602      	mov	r2, r0
 8018770:	68fb      	ldr	r3, [r7, #12]
 8018772:	4413      	add	r3, r2
 8018774:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8018776:	687a      	ldr	r2, [r7, #4]
 8018778:	68b9      	ldr	r1, [r7, #8]
 801877a:	6978      	ldr	r0, [r7, #20]
 801877c:	f7ff ff22 	bl	80185c4 <sys_timeout_abs>
#endif
}
 8018780:	bf00      	nop
 8018782:	3718      	adds	r7, #24
 8018784:	46bd      	mov	sp, r7
 8018786:	bd80      	pop	{r7, pc}
 8018788:	0801f90c 	.word	0x0801f90c
 801878c:	0801f9a8 	.word	0x0801f9a8
 8018790:	0801f980 	.word	0x0801f980

08018794 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8018794:	b580      	push	{r7, lr}
 8018796:	b084      	sub	sp, #16
 8018798:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801879a:	f7f0 fb15 	bl	8008dc8 <sys_now>
 801879e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80187a0:	4b17      	ldr	r3, [pc, #92]	; (8018800 <sys_check_timeouts+0x6c>)
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80187a6:	68bb      	ldr	r3, [r7, #8]
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	d022      	beq.n	80187f2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80187ac:	68bb      	ldr	r3, [r7, #8]
 80187ae:	685b      	ldr	r3, [r3, #4]
 80187b0:	68fa      	ldr	r2, [r7, #12]
 80187b2:	1ad3      	subs	r3, r2, r3
 80187b4:	0fdb      	lsrs	r3, r3, #31
 80187b6:	f003 0301 	and.w	r3, r3, #1
 80187ba:	b2db      	uxtb	r3, r3
 80187bc:	2b00      	cmp	r3, #0
 80187be:	d11a      	bne.n	80187f6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80187c0:	68bb      	ldr	r3, [r7, #8]
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	4a0e      	ldr	r2, [pc, #56]	; (8018800 <sys_check_timeouts+0x6c>)
 80187c6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80187c8:	68bb      	ldr	r3, [r7, #8]
 80187ca:	689b      	ldr	r3, [r3, #8]
 80187cc:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80187ce:	68bb      	ldr	r3, [r7, #8]
 80187d0:	68db      	ldr	r3, [r3, #12]
 80187d2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80187d4:	68bb      	ldr	r3, [r7, #8]
 80187d6:	685b      	ldr	r3, [r3, #4]
 80187d8:	4a0a      	ldr	r2, [pc, #40]	; (8018804 <sys_check_timeouts+0x70>)
 80187da:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80187dc:	68b9      	ldr	r1, [r7, #8]
 80187de:	200a      	movs	r0, #10
 80187e0:	f7f8 fda4 	bl	801132c <memp_free>
    if (handler != NULL) {
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d0da      	beq.n	80187a0 <sys_check_timeouts+0xc>
      handler(arg);
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	6838      	ldr	r0, [r7, #0]
 80187ee:	4798      	blx	r3
  do {
 80187f0:	e7d6      	b.n	80187a0 <sys_check_timeouts+0xc>
      return;
 80187f2:	bf00      	nop
 80187f4:	e000      	b.n	80187f8 <sys_check_timeouts+0x64>
      return;
 80187f6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80187f8:	3710      	adds	r7, #16
 80187fa:	46bd      	mov	sp, r7
 80187fc:	bd80      	pop	{r7, pc}
 80187fe:	bf00      	nop
 8018800:	200110dc 	.word	0x200110dc
 8018804:	200110e0 	.word	0x200110e0

08018808 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8018808:	b580      	push	{r7, lr}
 801880a:	b082      	sub	sp, #8
 801880c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801880e:	4b16      	ldr	r3, [pc, #88]	; (8018868 <sys_timeouts_sleeptime+0x60>)
 8018810:	681b      	ldr	r3, [r3, #0]
 8018812:	2b00      	cmp	r3, #0
 8018814:	d102      	bne.n	801881c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8018816:	f04f 33ff 	mov.w	r3, #4294967295
 801881a:	e020      	b.n	801885e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801881c:	f7f0 fad4 	bl	8008dc8 <sys_now>
 8018820:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8018822:	4b11      	ldr	r3, [pc, #68]	; (8018868 <sys_timeouts_sleeptime+0x60>)
 8018824:	681b      	ldr	r3, [r3, #0]
 8018826:	685a      	ldr	r2, [r3, #4]
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	1ad3      	subs	r3, r2, r3
 801882c:	0fdb      	lsrs	r3, r3, #31
 801882e:	f003 0301 	and.w	r3, r3, #1
 8018832:	b2db      	uxtb	r3, r3
 8018834:	2b00      	cmp	r3, #0
 8018836:	d001      	beq.n	801883c <sys_timeouts_sleeptime+0x34>
    return 0;
 8018838:	2300      	movs	r3, #0
 801883a:	e010      	b.n	801885e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801883c:	4b0a      	ldr	r3, [pc, #40]	; (8018868 <sys_timeouts_sleeptime+0x60>)
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	685a      	ldr	r2, [r3, #4]
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	1ad3      	subs	r3, r2, r3
 8018846:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8018848:	683b      	ldr	r3, [r7, #0]
 801884a:	2b00      	cmp	r3, #0
 801884c:	da06      	bge.n	801885c <sys_timeouts_sleeptime+0x54>
 801884e:	4b07      	ldr	r3, [pc, #28]	; (801886c <sys_timeouts_sleeptime+0x64>)
 8018850:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8018854:	4906      	ldr	r1, [pc, #24]	; (8018870 <sys_timeouts_sleeptime+0x68>)
 8018856:	4807      	ldr	r0, [pc, #28]	; (8018874 <sys_timeouts_sleeptime+0x6c>)
 8018858:	f002 ffd4 	bl	801b804 <iprintf>
    return ret;
 801885c:	683b      	ldr	r3, [r7, #0]
  }
}
 801885e:	4618      	mov	r0, r3
 8018860:	3708      	adds	r7, #8
 8018862:	46bd      	mov	sp, r7
 8018864:	bd80      	pop	{r7, pc}
 8018866:	bf00      	nop
 8018868:	200110dc 	.word	0x200110dc
 801886c:	0801f90c 	.word	0x0801f90c
 8018870:	0801f9e0 	.word	0x0801f9e0
 8018874:	0801f980 	.word	0x0801f980

08018878 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8018878:	b580      	push	{r7, lr}
 801887a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801887c:	f003 f866 	bl	801b94c <rand>
 8018880:	4603      	mov	r3, r0
 8018882:	b29b      	uxth	r3, r3
 8018884:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8018888:	b29b      	uxth	r3, r3
 801888a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801888e:	b29a      	uxth	r2, r3
 8018890:	4b01      	ldr	r3, [pc, #4]	; (8018898 <udp_init+0x20>)
 8018892:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8018894:	bf00      	nop
 8018896:	bd80      	pop	{r7, pc}
 8018898:	2000002c 	.word	0x2000002c

0801889c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801889c:	b480      	push	{r7}
 801889e:	b083      	sub	sp, #12
 80188a0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80188a2:	2300      	movs	r3, #0
 80188a4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80188a6:	4b17      	ldr	r3, [pc, #92]	; (8018904 <udp_new_port+0x68>)
 80188a8:	881b      	ldrh	r3, [r3, #0]
 80188aa:	1c5a      	adds	r2, r3, #1
 80188ac:	b291      	uxth	r1, r2
 80188ae:	4a15      	ldr	r2, [pc, #84]	; (8018904 <udp_new_port+0x68>)
 80188b0:	8011      	strh	r1, [r2, #0]
 80188b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80188b6:	4293      	cmp	r3, r2
 80188b8:	d103      	bne.n	80188c2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80188ba:	4b12      	ldr	r3, [pc, #72]	; (8018904 <udp_new_port+0x68>)
 80188bc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80188c0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80188c2:	4b11      	ldr	r3, [pc, #68]	; (8018908 <udp_new_port+0x6c>)
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	603b      	str	r3, [r7, #0]
 80188c8:	e011      	b.n	80188ee <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80188ca:	683b      	ldr	r3, [r7, #0]
 80188cc:	8a5a      	ldrh	r2, [r3, #18]
 80188ce:	4b0d      	ldr	r3, [pc, #52]	; (8018904 <udp_new_port+0x68>)
 80188d0:	881b      	ldrh	r3, [r3, #0]
 80188d2:	429a      	cmp	r2, r3
 80188d4:	d108      	bne.n	80188e8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80188d6:	88fb      	ldrh	r3, [r7, #6]
 80188d8:	3301      	adds	r3, #1
 80188da:	80fb      	strh	r3, [r7, #6]
 80188dc:	88fb      	ldrh	r3, [r7, #6]
 80188de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80188e2:	d3e0      	bcc.n	80188a6 <udp_new_port+0xa>
        return 0;
 80188e4:	2300      	movs	r3, #0
 80188e6:	e007      	b.n	80188f8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80188e8:	683b      	ldr	r3, [r7, #0]
 80188ea:	68db      	ldr	r3, [r3, #12]
 80188ec:	603b      	str	r3, [r7, #0]
 80188ee:	683b      	ldr	r3, [r7, #0]
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d1ea      	bne.n	80188ca <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80188f4:	4b03      	ldr	r3, [pc, #12]	; (8018904 <udp_new_port+0x68>)
 80188f6:	881b      	ldrh	r3, [r3, #0]
}
 80188f8:	4618      	mov	r0, r3
 80188fa:	370c      	adds	r7, #12
 80188fc:	46bd      	mov	sp, r7
 80188fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018902:	4770      	bx	lr
 8018904:	2000002c 	.word	0x2000002c
 8018908:	200110e8 	.word	0x200110e8

0801890c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801890c:	b580      	push	{r7, lr}
 801890e:	b084      	sub	sp, #16
 8018910:	af00      	add	r7, sp, #0
 8018912:	60f8      	str	r0, [r7, #12]
 8018914:	60b9      	str	r1, [r7, #8]
 8018916:	4613      	mov	r3, r2
 8018918:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801891a:	68fb      	ldr	r3, [r7, #12]
 801891c:	2b00      	cmp	r3, #0
 801891e:	d105      	bne.n	801892c <udp_input_local_match+0x20>
 8018920:	4b27      	ldr	r3, [pc, #156]	; (80189c0 <udp_input_local_match+0xb4>)
 8018922:	2287      	movs	r2, #135	; 0x87
 8018924:	4927      	ldr	r1, [pc, #156]	; (80189c4 <udp_input_local_match+0xb8>)
 8018926:	4828      	ldr	r0, [pc, #160]	; (80189c8 <udp_input_local_match+0xbc>)
 8018928:	f002 ff6c 	bl	801b804 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801892c:	68bb      	ldr	r3, [r7, #8]
 801892e:	2b00      	cmp	r3, #0
 8018930:	d105      	bne.n	801893e <udp_input_local_match+0x32>
 8018932:	4b23      	ldr	r3, [pc, #140]	; (80189c0 <udp_input_local_match+0xb4>)
 8018934:	2288      	movs	r2, #136	; 0x88
 8018936:	4925      	ldr	r1, [pc, #148]	; (80189cc <udp_input_local_match+0xc0>)
 8018938:	4823      	ldr	r0, [pc, #140]	; (80189c8 <udp_input_local_match+0xbc>)
 801893a:	f002 ff63 	bl	801b804 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801893e:	68fb      	ldr	r3, [r7, #12]
 8018940:	7a1b      	ldrb	r3, [r3, #8]
 8018942:	2b00      	cmp	r3, #0
 8018944:	d00b      	beq.n	801895e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018946:	68fb      	ldr	r3, [r7, #12]
 8018948:	7a1a      	ldrb	r2, [r3, #8]
 801894a:	4b21      	ldr	r3, [pc, #132]	; (80189d0 <udp_input_local_match+0xc4>)
 801894c:	685b      	ldr	r3, [r3, #4]
 801894e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018952:	3301      	adds	r3, #1
 8018954:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018956:	429a      	cmp	r2, r3
 8018958:	d001      	beq.n	801895e <udp_input_local_match+0x52>
    return 0;
 801895a:	2300      	movs	r3, #0
 801895c:	e02b      	b.n	80189b6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801895e:	79fb      	ldrb	r3, [r7, #7]
 8018960:	2b00      	cmp	r3, #0
 8018962:	d018      	beq.n	8018996 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018964:	68fb      	ldr	r3, [r7, #12]
 8018966:	2b00      	cmp	r3, #0
 8018968:	d013      	beq.n	8018992 <udp_input_local_match+0x86>
 801896a:	68fb      	ldr	r3, [r7, #12]
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	2b00      	cmp	r3, #0
 8018970:	d00f      	beq.n	8018992 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018972:	4b17      	ldr	r3, [pc, #92]	; (80189d0 <udp_input_local_match+0xc4>)
 8018974:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018976:	f1b3 3fff 	cmp.w	r3, #4294967295
 801897a:	d00a      	beq.n	8018992 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801897c:	68fb      	ldr	r3, [r7, #12]
 801897e:	681a      	ldr	r2, [r3, #0]
 8018980:	4b13      	ldr	r3, [pc, #76]	; (80189d0 <udp_input_local_match+0xc4>)
 8018982:	695b      	ldr	r3, [r3, #20]
 8018984:	405a      	eors	r2, r3
 8018986:	68bb      	ldr	r3, [r7, #8]
 8018988:	3308      	adds	r3, #8
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801898e:	2b00      	cmp	r3, #0
 8018990:	d110      	bne.n	80189b4 <udp_input_local_match+0xa8>
          return 1;
 8018992:	2301      	movs	r3, #1
 8018994:	e00f      	b.n	80189b6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018996:	68fb      	ldr	r3, [r7, #12]
 8018998:	2b00      	cmp	r3, #0
 801899a:	d009      	beq.n	80189b0 <udp_input_local_match+0xa4>
 801899c:	68fb      	ldr	r3, [r7, #12]
 801899e:	681b      	ldr	r3, [r3, #0]
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d005      	beq.n	80189b0 <udp_input_local_match+0xa4>
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	681a      	ldr	r2, [r3, #0]
 80189a8:	4b09      	ldr	r3, [pc, #36]	; (80189d0 <udp_input_local_match+0xc4>)
 80189aa:	695b      	ldr	r3, [r3, #20]
 80189ac:	429a      	cmp	r2, r3
 80189ae:	d101      	bne.n	80189b4 <udp_input_local_match+0xa8>
        return 1;
 80189b0:	2301      	movs	r3, #1
 80189b2:	e000      	b.n	80189b6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80189b4:	2300      	movs	r3, #0
}
 80189b6:	4618      	mov	r0, r3
 80189b8:	3710      	adds	r7, #16
 80189ba:	46bd      	mov	sp, r7
 80189bc:	bd80      	pop	{r7, pc}
 80189be:	bf00      	nop
 80189c0:	0801f9f4 	.word	0x0801f9f4
 80189c4:	0801fa24 	.word	0x0801fa24
 80189c8:	0801fa48 	.word	0x0801fa48
 80189cc:	0801fa70 	.word	0x0801fa70
 80189d0:	2000d938 	.word	0x2000d938

080189d4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80189d4:	b590      	push	{r4, r7, lr}
 80189d6:	b08d      	sub	sp, #52	; 0x34
 80189d8:	af02      	add	r7, sp, #8
 80189da:	6078      	str	r0, [r7, #4]
 80189dc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80189de:	2300      	movs	r3, #0
 80189e0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d105      	bne.n	80189f4 <udp_input+0x20>
 80189e8:	4b7c      	ldr	r3, [pc, #496]	; (8018bdc <udp_input+0x208>)
 80189ea:	22cf      	movs	r2, #207	; 0xcf
 80189ec:	497c      	ldr	r1, [pc, #496]	; (8018be0 <udp_input+0x20c>)
 80189ee:	487d      	ldr	r0, [pc, #500]	; (8018be4 <udp_input+0x210>)
 80189f0:	f002 ff08 	bl	801b804 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80189f4:	683b      	ldr	r3, [r7, #0]
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d105      	bne.n	8018a06 <udp_input+0x32>
 80189fa:	4b78      	ldr	r3, [pc, #480]	; (8018bdc <udp_input+0x208>)
 80189fc:	22d0      	movs	r2, #208	; 0xd0
 80189fe:	497a      	ldr	r1, [pc, #488]	; (8018be8 <udp_input+0x214>)
 8018a00:	4878      	ldr	r0, [pc, #480]	; (8018be4 <udp_input+0x210>)
 8018a02:	f002 feff 	bl	801b804 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	895b      	ldrh	r3, [r3, #10]
 8018a0a:	2b07      	cmp	r3, #7
 8018a0c:	d803      	bhi.n	8018a16 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8018a0e:	6878      	ldr	r0, [r7, #4]
 8018a10:	f7f9 fb62 	bl	80120d8 <pbuf_free>
    goto end;
 8018a14:	e0de      	b.n	8018bd4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	685b      	ldr	r3, [r3, #4]
 8018a1a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8018a1c:	4b73      	ldr	r3, [pc, #460]	; (8018bec <udp_input+0x218>)
 8018a1e:	695b      	ldr	r3, [r3, #20]
 8018a20:	4a72      	ldr	r2, [pc, #456]	; (8018bec <udp_input+0x218>)
 8018a22:	6812      	ldr	r2, [r2, #0]
 8018a24:	4611      	mov	r1, r2
 8018a26:	4618      	mov	r0, r3
 8018a28:	f001 fd96 	bl	801a558 <ip4_addr_isbroadcast_u32>
 8018a2c:	4603      	mov	r3, r0
 8018a2e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8018a30:	697b      	ldr	r3, [r7, #20]
 8018a32:	881b      	ldrh	r3, [r3, #0]
 8018a34:	b29b      	uxth	r3, r3
 8018a36:	4618      	mov	r0, r3
 8018a38:	f7f7 ff2a 	bl	8010890 <lwip_htons>
 8018a3c:	4603      	mov	r3, r0
 8018a3e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8018a40:	697b      	ldr	r3, [r7, #20]
 8018a42:	885b      	ldrh	r3, [r3, #2]
 8018a44:	b29b      	uxth	r3, r3
 8018a46:	4618      	mov	r0, r3
 8018a48:	f7f7 ff22 	bl	8010890 <lwip_htons>
 8018a4c:	4603      	mov	r3, r0
 8018a4e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8018a50:	2300      	movs	r3, #0
 8018a52:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8018a54:	2300      	movs	r3, #0
 8018a56:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8018a58:	2300      	movs	r3, #0
 8018a5a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018a5c:	4b64      	ldr	r3, [pc, #400]	; (8018bf0 <udp_input+0x21c>)
 8018a5e:	681b      	ldr	r3, [r3, #0]
 8018a60:	627b      	str	r3, [r7, #36]	; 0x24
 8018a62:	e054      	b.n	8018b0e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8018a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a66:	8a5b      	ldrh	r3, [r3, #18]
 8018a68:	89fa      	ldrh	r2, [r7, #14]
 8018a6a:	429a      	cmp	r2, r3
 8018a6c:	d14a      	bne.n	8018b04 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8018a6e:	7cfb      	ldrb	r3, [r7, #19]
 8018a70:	461a      	mov	r2, r3
 8018a72:	6839      	ldr	r1, [r7, #0]
 8018a74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018a76:	f7ff ff49 	bl	801890c <udp_input_local_match>
 8018a7a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d041      	beq.n	8018b04 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8018a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a82:	7c1b      	ldrb	r3, [r3, #16]
 8018a84:	f003 0304 	and.w	r3, r3, #4
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	d11d      	bne.n	8018ac8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8018a8c:	69fb      	ldr	r3, [r7, #28]
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	d102      	bne.n	8018a98 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8018a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a94:	61fb      	str	r3, [r7, #28]
 8018a96:	e017      	b.n	8018ac8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8018a98:	7cfb      	ldrb	r3, [r7, #19]
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	d014      	beq.n	8018ac8 <udp_input+0xf4>
 8018a9e:	4b53      	ldr	r3, [pc, #332]	; (8018bec <udp_input+0x218>)
 8018aa0:	695b      	ldr	r3, [r3, #20]
 8018aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018aa6:	d10f      	bne.n	8018ac8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8018aa8:	69fb      	ldr	r3, [r7, #28]
 8018aaa:	681a      	ldr	r2, [r3, #0]
 8018aac:	683b      	ldr	r3, [r7, #0]
 8018aae:	3304      	adds	r3, #4
 8018ab0:	681b      	ldr	r3, [r3, #0]
 8018ab2:	429a      	cmp	r2, r3
 8018ab4:	d008      	beq.n	8018ac8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8018ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ab8:	681a      	ldr	r2, [r3, #0]
 8018aba:	683b      	ldr	r3, [r7, #0]
 8018abc:	3304      	adds	r3, #4
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	429a      	cmp	r2, r3
 8018ac2:	d101      	bne.n	8018ac8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8018ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ac6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8018ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018aca:	8a9b      	ldrh	r3, [r3, #20]
 8018acc:	8a3a      	ldrh	r2, [r7, #16]
 8018ace:	429a      	cmp	r2, r3
 8018ad0:	d118      	bne.n	8018b04 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8018ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ad4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	d005      	beq.n	8018ae6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8018ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018adc:	685a      	ldr	r2, [r3, #4]
 8018ade:	4b43      	ldr	r3, [pc, #268]	; (8018bec <udp_input+0x218>)
 8018ae0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8018ae2:	429a      	cmp	r2, r3
 8018ae4:	d10e      	bne.n	8018b04 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8018ae6:	6a3b      	ldr	r3, [r7, #32]
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d014      	beq.n	8018b16 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8018aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018aee:	68da      	ldr	r2, [r3, #12]
 8018af0:	6a3b      	ldr	r3, [r7, #32]
 8018af2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8018af4:	4b3e      	ldr	r3, [pc, #248]	; (8018bf0 <udp_input+0x21c>)
 8018af6:	681a      	ldr	r2, [r3, #0]
 8018af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018afa:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8018afc:	4a3c      	ldr	r2, [pc, #240]	; (8018bf0 <udp_input+0x21c>)
 8018afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b00:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8018b02:	e008      	b.n	8018b16 <udp_input+0x142>
      }
    }

    prev = pcb;
 8018b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b06:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b0a:	68db      	ldr	r3, [r3, #12]
 8018b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8018b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	d1a7      	bne.n	8018a64 <udp_input+0x90>
 8018b14:	e000      	b.n	8018b18 <udp_input+0x144>
        break;
 8018b16:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8018b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	d101      	bne.n	8018b22 <udp_input+0x14e>
    pcb = uncon_pcb;
 8018b1e:	69fb      	ldr	r3, [r7, #28]
 8018b20:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8018b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d002      	beq.n	8018b2e <udp_input+0x15a>
    for_us = 1;
 8018b28:	2301      	movs	r3, #1
 8018b2a:	76fb      	strb	r3, [r7, #27]
 8018b2c:	e00a      	b.n	8018b44 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8018b2e:	683b      	ldr	r3, [r7, #0]
 8018b30:	3304      	adds	r3, #4
 8018b32:	681a      	ldr	r2, [r3, #0]
 8018b34:	4b2d      	ldr	r3, [pc, #180]	; (8018bec <udp_input+0x218>)
 8018b36:	695b      	ldr	r3, [r3, #20]
 8018b38:	429a      	cmp	r2, r3
 8018b3a:	bf0c      	ite	eq
 8018b3c:	2301      	moveq	r3, #1
 8018b3e:	2300      	movne	r3, #0
 8018b40:	b2db      	uxtb	r3, r3
 8018b42:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8018b44:	7efb      	ldrb	r3, [r7, #27]
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d041      	beq.n	8018bce <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8018b4a:	2108      	movs	r1, #8
 8018b4c:	6878      	ldr	r0, [r7, #4]
 8018b4e:	f7f9 fa0b 	bl	8011f68 <pbuf_remove_header>
 8018b52:	4603      	mov	r3, r0
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d00a      	beq.n	8018b6e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8018b58:	4b20      	ldr	r3, [pc, #128]	; (8018bdc <udp_input+0x208>)
 8018b5a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8018b5e:	4925      	ldr	r1, [pc, #148]	; (8018bf4 <udp_input+0x220>)
 8018b60:	4820      	ldr	r0, [pc, #128]	; (8018be4 <udp_input+0x210>)
 8018b62:	f002 fe4f 	bl	801b804 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8018b66:	6878      	ldr	r0, [r7, #4]
 8018b68:	f7f9 fab6 	bl	80120d8 <pbuf_free>
      goto end;
 8018b6c:	e032      	b.n	8018bd4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8018b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d012      	beq.n	8018b9a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8018b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b76:	699b      	ldr	r3, [r3, #24]
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	d00a      	beq.n	8018b92 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8018b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b7e:	699c      	ldr	r4, [r3, #24]
 8018b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b82:	69d8      	ldr	r0, [r3, #28]
 8018b84:	8a3b      	ldrh	r3, [r7, #16]
 8018b86:	9300      	str	r3, [sp, #0]
 8018b88:	4b1b      	ldr	r3, [pc, #108]	; (8018bf8 <udp_input+0x224>)
 8018b8a:	687a      	ldr	r2, [r7, #4]
 8018b8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018b8e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8018b90:	e021      	b.n	8018bd6 <udp_input+0x202>
        pbuf_free(p);
 8018b92:	6878      	ldr	r0, [r7, #4]
 8018b94:	f7f9 faa0 	bl	80120d8 <pbuf_free>
        goto end;
 8018b98:	e01c      	b.n	8018bd4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8018b9a:	7cfb      	ldrb	r3, [r7, #19]
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	d112      	bne.n	8018bc6 <udp_input+0x1f2>
 8018ba0:	4b12      	ldr	r3, [pc, #72]	; (8018bec <udp_input+0x218>)
 8018ba2:	695b      	ldr	r3, [r3, #20]
 8018ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018ba8:	2be0      	cmp	r3, #224	; 0xe0
 8018baa:	d00c      	beq.n	8018bc6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8018bac:	4b0f      	ldr	r3, [pc, #60]	; (8018bec <udp_input+0x218>)
 8018bae:	899b      	ldrh	r3, [r3, #12]
 8018bb0:	3308      	adds	r3, #8
 8018bb2:	b29b      	uxth	r3, r3
 8018bb4:	b21b      	sxth	r3, r3
 8018bb6:	4619      	mov	r1, r3
 8018bb8:	6878      	ldr	r0, [r7, #4]
 8018bba:	f7f9 fa48 	bl	801204e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8018bbe:	2103      	movs	r1, #3
 8018bc0:	6878      	ldr	r0, [r7, #4]
 8018bc2:	f001 f9a9 	bl	8019f18 <icmp_dest_unreach>
      pbuf_free(p);
 8018bc6:	6878      	ldr	r0, [r7, #4]
 8018bc8:	f7f9 fa86 	bl	80120d8 <pbuf_free>
  return;
 8018bcc:	e003      	b.n	8018bd6 <udp_input+0x202>
    pbuf_free(p);
 8018bce:	6878      	ldr	r0, [r7, #4]
 8018bd0:	f7f9 fa82 	bl	80120d8 <pbuf_free>
  return;
 8018bd4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8018bd6:	372c      	adds	r7, #44	; 0x2c
 8018bd8:	46bd      	mov	sp, r7
 8018bda:	bd90      	pop	{r4, r7, pc}
 8018bdc:	0801f9f4 	.word	0x0801f9f4
 8018be0:	0801fa98 	.word	0x0801fa98
 8018be4:	0801fa48 	.word	0x0801fa48
 8018be8:	0801fab0 	.word	0x0801fab0
 8018bec:	2000d938 	.word	0x2000d938
 8018bf0:	200110e8 	.word	0x200110e8
 8018bf4:	0801facc 	.word	0x0801facc
 8018bf8:	2000d948 	.word	0x2000d948

08018bfc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018bfc:	b580      	push	{r7, lr}
 8018bfe:	b086      	sub	sp, #24
 8018c00:	af00      	add	r7, sp, #0
 8018c02:	60f8      	str	r0, [r7, #12]
 8018c04:	60b9      	str	r1, [r7, #8]
 8018c06:	4613      	mov	r3, r2
 8018c08:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8018c0a:	68bb      	ldr	r3, [r7, #8]
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d101      	bne.n	8018c14 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8018c10:	4b39      	ldr	r3, [pc, #228]	; (8018cf8 <udp_bind+0xfc>)
 8018c12:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8018c14:	68fb      	ldr	r3, [r7, #12]
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	d109      	bne.n	8018c2e <udp_bind+0x32>
 8018c1a:	4b38      	ldr	r3, [pc, #224]	; (8018cfc <udp_bind+0x100>)
 8018c1c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8018c20:	4937      	ldr	r1, [pc, #220]	; (8018d00 <udp_bind+0x104>)
 8018c22:	4838      	ldr	r0, [pc, #224]	; (8018d04 <udp_bind+0x108>)
 8018c24:	f002 fdee 	bl	801b804 <iprintf>
 8018c28:	f06f 030f 	mvn.w	r3, #15
 8018c2c:	e060      	b.n	8018cf0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8018c2e:	2300      	movs	r3, #0
 8018c30:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018c32:	4b35      	ldr	r3, [pc, #212]	; (8018d08 <udp_bind+0x10c>)
 8018c34:	681b      	ldr	r3, [r3, #0]
 8018c36:	617b      	str	r3, [r7, #20]
 8018c38:	e009      	b.n	8018c4e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8018c3a:	68fa      	ldr	r2, [r7, #12]
 8018c3c:	697b      	ldr	r3, [r7, #20]
 8018c3e:	429a      	cmp	r2, r3
 8018c40:	d102      	bne.n	8018c48 <udp_bind+0x4c>
      rebind = 1;
 8018c42:	2301      	movs	r3, #1
 8018c44:	74fb      	strb	r3, [r7, #19]
      break;
 8018c46:	e005      	b.n	8018c54 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018c48:	697b      	ldr	r3, [r7, #20]
 8018c4a:	68db      	ldr	r3, [r3, #12]
 8018c4c:	617b      	str	r3, [r7, #20]
 8018c4e:	697b      	ldr	r3, [r7, #20]
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d1f2      	bne.n	8018c3a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8018c54:	88fb      	ldrh	r3, [r7, #6]
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	d109      	bne.n	8018c6e <udp_bind+0x72>
    port = udp_new_port();
 8018c5a:	f7ff fe1f 	bl	801889c <udp_new_port>
 8018c5e:	4603      	mov	r3, r0
 8018c60:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8018c62:	88fb      	ldrh	r3, [r7, #6]
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d12c      	bne.n	8018cc2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8018c68:	f06f 0307 	mvn.w	r3, #7
 8018c6c:	e040      	b.n	8018cf0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018c6e:	4b26      	ldr	r3, [pc, #152]	; (8018d08 <udp_bind+0x10c>)
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	617b      	str	r3, [r7, #20]
 8018c74:	e022      	b.n	8018cbc <udp_bind+0xc0>
      if (pcb != ipcb) {
 8018c76:	68fa      	ldr	r2, [r7, #12]
 8018c78:	697b      	ldr	r3, [r7, #20]
 8018c7a:	429a      	cmp	r2, r3
 8018c7c:	d01b      	beq.n	8018cb6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8018c7e:	697b      	ldr	r3, [r7, #20]
 8018c80:	8a5b      	ldrh	r3, [r3, #18]
 8018c82:	88fa      	ldrh	r2, [r7, #6]
 8018c84:	429a      	cmp	r2, r3
 8018c86:	d116      	bne.n	8018cb6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018c88:	697b      	ldr	r3, [r7, #20]
 8018c8a:	681a      	ldr	r2, [r3, #0]
 8018c8c:	68bb      	ldr	r3, [r7, #8]
 8018c8e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8018c90:	429a      	cmp	r2, r3
 8018c92:	d00d      	beq.n	8018cb0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018c94:	68bb      	ldr	r3, [r7, #8]
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d00a      	beq.n	8018cb0 <udp_bind+0xb4>
 8018c9a:	68bb      	ldr	r3, [r7, #8]
 8018c9c:	681b      	ldr	r3, [r3, #0]
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d006      	beq.n	8018cb0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018ca2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	d003      	beq.n	8018cb0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018ca8:	697b      	ldr	r3, [r7, #20]
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d102      	bne.n	8018cb6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8018cb0:	f06f 0307 	mvn.w	r3, #7
 8018cb4:	e01c      	b.n	8018cf0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018cb6:	697b      	ldr	r3, [r7, #20]
 8018cb8:	68db      	ldr	r3, [r3, #12]
 8018cba:	617b      	str	r3, [r7, #20]
 8018cbc:	697b      	ldr	r3, [r7, #20]
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d1d9      	bne.n	8018c76 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8018cc2:	68bb      	ldr	r3, [r7, #8]
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d002      	beq.n	8018cce <udp_bind+0xd2>
 8018cc8:	68bb      	ldr	r3, [r7, #8]
 8018cca:	681b      	ldr	r3, [r3, #0]
 8018ccc:	e000      	b.n	8018cd0 <udp_bind+0xd4>
 8018cce:	2300      	movs	r3, #0
 8018cd0:	68fa      	ldr	r2, [r7, #12]
 8018cd2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8018cd4:	68fb      	ldr	r3, [r7, #12]
 8018cd6:	88fa      	ldrh	r2, [r7, #6]
 8018cd8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8018cda:	7cfb      	ldrb	r3, [r7, #19]
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	d106      	bne.n	8018cee <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8018ce0:	4b09      	ldr	r3, [pc, #36]	; (8018d08 <udp_bind+0x10c>)
 8018ce2:	681a      	ldr	r2, [r3, #0]
 8018ce4:	68fb      	ldr	r3, [r7, #12]
 8018ce6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8018ce8:	4a07      	ldr	r2, [pc, #28]	; (8018d08 <udp_bind+0x10c>)
 8018cea:	68fb      	ldr	r3, [r7, #12]
 8018cec:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8018cee:	2300      	movs	r3, #0
}
 8018cf0:	4618      	mov	r0, r3
 8018cf2:	3718      	adds	r7, #24
 8018cf4:	46bd      	mov	sp, r7
 8018cf6:	bd80      	pop	{r7, pc}
 8018cf8:	0802060c 	.word	0x0802060c
 8018cfc:	0801f9f4 	.word	0x0801f9f4
 8018d00:	0801fcbc 	.word	0x0801fcbc
 8018d04:	0801fa48 	.word	0x0801fa48
 8018d08:	200110e8 	.word	0x200110e8

08018d0c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8018d0c:	b580      	push	{r7, lr}
 8018d0e:	b084      	sub	sp, #16
 8018d10:	af00      	add	r7, sp, #0
 8018d12:	60f8      	str	r0, [r7, #12]
 8018d14:	60b9      	str	r1, [r7, #8]
 8018d16:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8018d18:	68fb      	ldr	r3, [r7, #12]
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d107      	bne.n	8018d2e <udp_recv+0x22>
 8018d1e:	4b08      	ldr	r3, [pc, #32]	; (8018d40 <udp_recv+0x34>)
 8018d20:	f240 428a 	movw	r2, #1162	; 0x48a
 8018d24:	4907      	ldr	r1, [pc, #28]	; (8018d44 <udp_recv+0x38>)
 8018d26:	4808      	ldr	r0, [pc, #32]	; (8018d48 <udp_recv+0x3c>)
 8018d28:	f002 fd6c 	bl	801b804 <iprintf>
 8018d2c:	e005      	b.n	8018d3a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8018d2e:	68fb      	ldr	r3, [r7, #12]
 8018d30:	68ba      	ldr	r2, [r7, #8]
 8018d32:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8018d34:	68fb      	ldr	r3, [r7, #12]
 8018d36:	687a      	ldr	r2, [r7, #4]
 8018d38:	61da      	str	r2, [r3, #28]
}
 8018d3a:	3710      	adds	r7, #16
 8018d3c:	46bd      	mov	sp, r7
 8018d3e:	bd80      	pop	{r7, pc}
 8018d40:	0801f9f4 	.word	0x0801f9f4
 8018d44:	0801fd28 	.word	0x0801fd28
 8018d48:	0801fa48 	.word	0x0801fa48

08018d4c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8018d4c:	b580      	push	{r7, lr}
 8018d4e:	b084      	sub	sp, #16
 8018d50:	af00      	add	r7, sp, #0
 8018d52:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	2b00      	cmp	r3, #0
 8018d58:	d107      	bne.n	8018d6a <udp_remove+0x1e>
 8018d5a:	4b19      	ldr	r3, [pc, #100]	; (8018dc0 <udp_remove+0x74>)
 8018d5c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8018d60:	4918      	ldr	r1, [pc, #96]	; (8018dc4 <udp_remove+0x78>)
 8018d62:	4819      	ldr	r0, [pc, #100]	; (8018dc8 <udp_remove+0x7c>)
 8018d64:	f002 fd4e 	bl	801b804 <iprintf>
 8018d68:	e026      	b.n	8018db8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8018d6a:	4b18      	ldr	r3, [pc, #96]	; (8018dcc <udp_remove+0x80>)
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	687a      	ldr	r2, [r7, #4]
 8018d70:	429a      	cmp	r2, r3
 8018d72:	d105      	bne.n	8018d80 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8018d74:	4b15      	ldr	r3, [pc, #84]	; (8018dcc <udp_remove+0x80>)
 8018d76:	681b      	ldr	r3, [r3, #0]
 8018d78:	68db      	ldr	r3, [r3, #12]
 8018d7a:	4a14      	ldr	r2, [pc, #80]	; (8018dcc <udp_remove+0x80>)
 8018d7c:	6013      	str	r3, [r2, #0]
 8018d7e:	e017      	b.n	8018db0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018d80:	4b12      	ldr	r3, [pc, #72]	; (8018dcc <udp_remove+0x80>)
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	60fb      	str	r3, [r7, #12]
 8018d86:	e010      	b.n	8018daa <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8018d88:	68fb      	ldr	r3, [r7, #12]
 8018d8a:	68db      	ldr	r3, [r3, #12]
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	d009      	beq.n	8018da4 <udp_remove+0x58>
 8018d90:	68fb      	ldr	r3, [r7, #12]
 8018d92:	68db      	ldr	r3, [r3, #12]
 8018d94:	687a      	ldr	r2, [r7, #4]
 8018d96:	429a      	cmp	r2, r3
 8018d98:	d104      	bne.n	8018da4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	68da      	ldr	r2, [r3, #12]
 8018d9e:	68fb      	ldr	r3, [r7, #12]
 8018da0:	60da      	str	r2, [r3, #12]
        break;
 8018da2:	e005      	b.n	8018db0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018da4:	68fb      	ldr	r3, [r7, #12]
 8018da6:	68db      	ldr	r3, [r3, #12]
 8018da8:	60fb      	str	r3, [r7, #12]
 8018daa:	68fb      	ldr	r3, [r7, #12]
 8018dac:	2b00      	cmp	r3, #0
 8018dae:	d1eb      	bne.n	8018d88 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8018db0:	6879      	ldr	r1, [r7, #4]
 8018db2:	2000      	movs	r0, #0
 8018db4:	f7f8 faba 	bl	801132c <memp_free>
}
 8018db8:	3710      	adds	r7, #16
 8018dba:	46bd      	mov	sp, r7
 8018dbc:	bd80      	pop	{r7, pc}
 8018dbe:	bf00      	nop
 8018dc0:	0801f9f4 	.word	0x0801f9f4
 8018dc4:	0801fd40 	.word	0x0801fd40
 8018dc8:	0801fa48 	.word	0x0801fa48
 8018dcc:	200110e8 	.word	0x200110e8

08018dd0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8018dd0:	b580      	push	{r7, lr}
 8018dd2:	b082      	sub	sp, #8
 8018dd4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8018dd6:	2000      	movs	r0, #0
 8018dd8:	f7f8 fa32 	bl	8011240 <memp_malloc>
 8018ddc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	d007      	beq.n	8018df4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8018de4:	2220      	movs	r2, #32
 8018de6:	2100      	movs	r1, #0
 8018de8:	6878      	ldr	r0, [r7, #4]
 8018dea:	f002 fd03 	bl	801b7f4 <memset>
    pcb->ttl = UDP_TTL;
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	22ff      	movs	r2, #255	; 0xff
 8018df2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8018df4:	687b      	ldr	r3, [r7, #4]
}
 8018df6:	4618      	mov	r0, r3
 8018df8:	3708      	adds	r7, #8
 8018dfa:	46bd      	mov	sp, r7
 8018dfc:	bd80      	pop	{r7, pc}

08018dfe <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8018dfe:	b580      	push	{r7, lr}
 8018e00:	b084      	sub	sp, #16
 8018e02:	af00      	add	r7, sp, #0
 8018e04:	4603      	mov	r3, r0
 8018e06:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8018e08:	f7ff ffe2 	bl	8018dd0 <udp_new>
 8018e0c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8018e0e:	68fb      	ldr	r3, [r7, #12]
}
 8018e10:	4618      	mov	r0, r3
 8018e12:	3710      	adds	r7, #16
 8018e14:	46bd      	mov	sp, r7
 8018e16:	bd80      	pop	{r7, pc}

08018e18 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018e18:	b480      	push	{r7}
 8018e1a:	b085      	sub	sp, #20
 8018e1c:	af00      	add	r7, sp, #0
 8018e1e:	6078      	str	r0, [r7, #4]
 8018e20:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	d01e      	beq.n	8018e66 <udp_netif_ip_addr_changed+0x4e>
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	d01a      	beq.n	8018e66 <udp_netif_ip_addr_changed+0x4e>
 8018e30:	683b      	ldr	r3, [r7, #0]
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d017      	beq.n	8018e66 <udp_netif_ip_addr_changed+0x4e>
 8018e36:	683b      	ldr	r3, [r7, #0]
 8018e38:	681b      	ldr	r3, [r3, #0]
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d013      	beq.n	8018e66 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018e3e:	4b0d      	ldr	r3, [pc, #52]	; (8018e74 <udp_netif_ip_addr_changed+0x5c>)
 8018e40:	681b      	ldr	r3, [r3, #0]
 8018e42:	60fb      	str	r3, [r7, #12]
 8018e44:	e00c      	b.n	8018e60 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018e46:	68fb      	ldr	r3, [r7, #12]
 8018e48:	681a      	ldr	r2, [r3, #0]
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	681b      	ldr	r3, [r3, #0]
 8018e4e:	429a      	cmp	r2, r3
 8018e50:	d103      	bne.n	8018e5a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8018e52:	683b      	ldr	r3, [r7, #0]
 8018e54:	681a      	ldr	r2, [r3, #0]
 8018e56:	68fb      	ldr	r3, [r7, #12]
 8018e58:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018e5a:	68fb      	ldr	r3, [r7, #12]
 8018e5c:	68db      	ldr	r3, [r3, #12]
 8018e5e:	60fb      	str	r3, [r7, #12]
 8018e60:	68fb      	ldr	r3, [r7, #12]
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	d1ef      	bne.n	8018e46 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8018e66:	bf00      	nop
 8018e68:	3714      	adds	r7, #20
 8018e6a:	46bd      	mov	sp, r7
 8018e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e70:	4770      	bx	lr
 8018e72:	bf00      	nop
 8018e74:	200110e8 	.word	0x200110e8

08018e78 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8018e78:	b580      	push	{r7, lr}
 8018e7a:	b082      	sub	sp, #8
 8018e7c:	af00      	add	r7, sp, #0
 8018e7e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8018e80:	4915      	ldr	r1, [pc, #84]	; (8018ed8 <etharp_free_entry+0x60>)
 8018e82:	687a      	ldr	r2, [r7, #4]
 8018e84:	4613      	mov	r3, r2
 8018e86:	005b      	lsls	r3, r3, #1
 8018e88:	4413      	add	r3, r2
 8018e8a:	00db      	lsls	r3, r3, #3
 8018e8c:	440b      	add	r3, r1
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d013      	beq.n	8018ebc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8018e94:	4910      	ldr	r1, [pc, #64]	; (8018ed8 <etharp_free_entry+0x60>)
 8018e96:	687a      	ldr	r2, [r7, #4]
 8018e98:	4613      	mov	r3, r2
 8018e9a:	005b      	lsls	r3, r3, #1
 8018e9c:	4413      	add	r3, r2
 8018e9e:	00db      	lsls	r3, r3, #3
 8018ea0:	440b      	add	r3, r1
 8018ea2:	681b      	ldr	r3, [r3, #0]
 8018ea4:	4618      	mov	r0, r3
 8018ea6:	f7f9 f917 	bl	80120d8 <pbuf_free>
    arp_table[i].q = NULL;
 8018eaa:	490b      	ldr	r1, [pc, #44]	; (8018ed8 <etharp_free_entry+0x60>)
 8018eac:	687a      	ldr	r2, [r7, #4]
 8018eae:	4613      	mov	r3, r2
 8018eb0:	005b      	lsls	r3, r3, #1
 8018eb2:	4413      	add	r3, r2
 8018eb4:	00db      	lsls	r3, r3, #3
 8018eb6:	440b      	add	r3, r1
 8018eb8:	2200      	movs	r2, #0
 8018eba:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8018ebc:	4906      	ldr	r1, [pc, #24]	; (8018ed8 <etharp_free_entry+0x60>)
 8018ebe:	687a      	ldr	r2, [r7, #4]
 8018ec0:	4613      	mov	r3, r2
 8018ec2:	005b      	lsls	r3, r3, #1
 8018ec4:	4413      	add	r3, r2
 8018ec6:	00db      	lsls	r3, r3, #3
 8018ec8:	440b      	add	r3, r1
 8018eca:	3314      	adds	r3, #20
 8018ecc:	2200      	movs	r2, #0
 8018ece:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8018ed0:	bf00      	nop
 8018ed2:	3708      	adds	r7, #8
 8018ed4:	46bd      	mov	sp, r7
 8018ed6:	bd80      	pop	{r7, pc}
 8018ed8:	200110ec 	.word	0x200110ec

08018edc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018edc:	b580      	push	{r7, lr}
 8018ede:	b082      	sub	sp, #8
 8018ee0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018ee2:	2300      	movs	r3, #0
 8018ee4:	607b      	str	r3, [r7, #4]
 8018ee6:	e096      	b.n	8019016 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8018ee8:	494f      	ldr	r1, [pc, #316]	; (8019028 <etharp_tmr+0x14c>)
 8018eea:	687a      	ldr	r2, [r7, #4]
 8018eec:	4613      	mov	r3, r2
 8018eee:	005b      	lsls	r3, r3, #1
 8018ef0:	4413      	add	r3, r2
 8018ef2:	00db      	lsls	r3, r3, #3
 8018ef4:	440b      	add	r3, r1
 8018ef6:	3314      	adds	r3, #20
 8018ef8:	781b      	ldrb	r3, [r3, #0]
 8018efa:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8018efc:	78fb      	ldrb	r3, [r7, #3]
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	f000 8086 	beq.w	8019010 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8018f04:	4948      	ldr	r1, [pc, #288]	; (8019028 <etharp_tmr+0x14c>)
 8018f06:	687a      	ldr	r2, [r7, #4]
 8018f08:	4613      	mov	r3, r2
 8018f0a:	005b      	lsls	r3, r3, #1
 8018f0c:	4413      	add	r3, r2
 8018f0e:	00db      	lsls	r3, r3, #3
 8018f10:	440b      	add	r3, r1
 8018f12:	3312      	adds	r3, #18
 8018f14:	881b      	ldrh	r3, [r3, #0]
 8018f16:	3301      	adds	r3, #1
 8018f18:	b298      	uxth	r0, r3
 8018f1a:	4943      	ldr	r1, [pc, #268]	; (8019028 <etharp_tmr+0x14c>)
 8018f1c:	687a      	ldr	r2, [r7, #4]
 8018f1e:	4613      	mov	r3, r2
 8018f20:	005b      	lsls	r3, r3, #1
 8018f22:	4413      	add	r3, r2
 8018f24:	00db      	lsls	r3, r3, #3
 8018f26:	440b      	add	r3, r1
 8018f28:	3312      	adds	r3, #18
 8018f2a:	4602      	mov	r2, r0
 8018f2c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018f2e:	493e      	ldr	r1, [pc, #248]	; (8019028 <etharp_tmr+0x14c>)
 8018f30:	687a      	ldr	r2, [r7, #4]
 8018f32:	4613      	mov	r3, r2
 8018f34:	005b      	lsls	r3, r3, #1
 8018f36:	4413      	add	r3, r2
 8018f38:	00db      	lsls	r3, r3, #3
 8018f3a:	440b      	add	r3, r1
 8018f3c:	3312      	adds	r3, #18
 8018f3e:	881b      	ldrh	r3, [r3, #0]
 8018f40:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8018f44:	d215      	bcs.n	8018f72 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018f46:	4938      	ldr	r1, [pc, #224]	; (8019028 <etharp_tmr+0x14c>)
 8018f48:	687a      	ldr	r2, [r7, #4]
 8018f4a:	4613      	mov	r3, r2
 8018f4c:	005b      	lsls	r3, r3, #1
 8018f4e:	4413      	add	r3, r2
 8018f50:	00db      	lsls	r3, r3, #3
 8018f52:	440b      	add	r3, r1
 8018f54:	3314      	adds	r3, #20
 8018f56:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018f58:	2b01      	cmp	r3, #1
 8018f5a:	d10e      	bne.n	8018f7a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8018f5c:	4932      	ldr	r1, [pc, #200]	; (8019028 <etharp_tmr+0x14c>)
 8018f5e:	687a      	ldr	r2, [r7, #4]
 8018f60:	4613      	mov	r3, r2
 8018f62:	005b      	lsls	r3, r3, #1
 8018f64:	4413      	add	r3, r2
 8018f66:	00db      	lsls	r3, r3, #3
 8018f68:	440b      	add	r3, r1
 8018f6a:	3312      	adds	r3, #18
 8018f6c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018f6e:	2b04      	cmp	r3, #4
 8018f70:	d903      	bls.n	8018f7a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8018f72:	6878      	ldr	r0, [r7, #4]
 8018f74:	f7ff ff80 	bl	8018e78 <etharp_free_entry>
 8018f78:	e04a      	b.n	8019010 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8018f7a:	492b      	ldr	r1, [pc, #172]	; (8019028 <etharp_tmr+0x14c>)
 8018f7c:	687a      	ldr	r2, [r7, #4]
 8018f7e:	4613      	mov	r3, r2
 8018f80:	005b      	lsls	r3, r3, #1
 8018f82:	4413      	add	r3, r2
 8018f84:	00db      	lsls	r3, r3, #3
 8018f86:	440b      	add	r3, r1
 8018f88:	3314      	adds	r3, #20
 8018f8a:	781b      	ldrb	r3, [r3, #0]
 8018f8c:	2b03      	cmp	r3, #3
 8018f8e:	d10a      	bne.n	8018fa6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018f90:	4925      	ldr	r1, [pc, #148]	; (8019028 <etharp_tmr+0x14c>)
 8018f92:	687a      	ldr	r2, [r7, #4]
 8018f94:	4613      	mov	r3, r2
 8018f96:	005b      	lsls	r3, r3, #1
 8018f98:	4413      	add	r3, r2
 8018f9a:	00db      	lsls	r3, r3, #3
 8018f9c:	440b      	add	r3, r1
 8018f9e:	3314      	adds	r3, #20
 8018fa0:	2204      	movs	r2, #4
 8018fa2:	701a      	strb	r2, [r3, #0]
 8018fa4:	e034      	b.n	8019010 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8018fa6:	4920      	ldr	r1, [pc, #128]	; (8019028 <etharp_tmr+0x14c>)
 8018fa8:	687a      	ldr	r2, [r7, #4]
 8018faa:	4613      	mov	r3, r2
 8018fac:	005b      	lsls	r3, r3, #1
 8018fae:	4413      	add	r3, r2
 8018fb0:	00db      	lsls	r3, r3, #3
 8018fb2:	440b      	add	r3, r1
 8018fb4:	3314      	adds	r3, #20
 8018fb6:	781b      	ldrb	r3, [r3, #0]
 8018fb8:	2b04      	cmp	r3, #4
 8018fba:	d10a      	bne.n	8018fd2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8018fbc:	491a      	ldr	r1, [pc, #104]	; (8019028 <etharp_tmr+0x14c>)
 8018fbe:	687a      	ldr	r2, [r7, #4]
 8018fc0:	4613      	mov	r3, r2
 8018fc2:	005b      	lsls	r3, r3, #1
 8018fc4:	4413      	add	r3, r2
 8018fc6:	00db      	lsls	r3, r3, #3
 8018fc8:	440b      	add	r3, r1
 8018fca:	3314      	adds	r3, #20
 8018fcc:	2202      	movs	r2, #2
 8018fce:	701a      	strb	r2, [r3, #0]
 8018fd0:	e01e      	b.n	8019010 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018fd2:	4915      	ldr	r1, [pc, #84]	; (8019028 <etharp_tmr+0x14c>)
 8018fd4:	687a      	ldr	r2, [r7, #4]
 8018fd6:	4613      	mov	r3, r2
 8018fd8:	005b      	lsls	r3, r3, #1
 8018fda:	4413      	add	r3, r2
 8018fdc:	00db      	lsls	r3, r3, #3
 8018fde:	440b      	add	r3, r1
 8018fe0:	3314      	adds	r3, #20
 8018fe2:	781b      	ldrb	r3, [r3, #0]
 8018fe4:	2b01      	cmp	r3, #1
 8018fe6:	d113      	bne.n	8019010 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8018fe8:	490f      	ldr	r1, [pc, #60]	; (8019028 <etharp_tmr+0x14c>)
 8018fea:	687a      	ldr	r2, [r7, #4]
 8018fec:	4613      	mov	r3, r2
 8018fee:	005b      	lsls	r3, r3, #1
 8018ff0:	4413      	add	r3, r2
 8018ff2:	00db      	lsls	r3, r3, #3
 8018ff4:	440b      	add	r3, r1
 8018ff6:	3308      	adds	r3, #8
 8018ff8:	6818      	ldr	r0, [r3, #0]
 8018ffa:	687a      	ldr	r2, [r7, #4]
 8018ffc:	4613      	mov	r3, r2
 8018ffe:	005b      	lsls	r3, r3, #1
 8019000:	4413      	add	r3, r2
 8019002:	00db      	lsls	r3, r3, #3
 8019004:	4a08      	ldr	r2, [pc, #32]	; (8019028 <etharp_tmr+0x14c>)
 8019006:	4413      	add	r3, r2
 8019008:	3304      	adds	r3, #4
 801900a:	4619      	mov	r1, r3
 801900c:	f000 fe6e 	bl	8019cec <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	3301      	adds	r3, #1
 8019014:	607b      	str	r3, [r7, #4]
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	2b09      	cmp	r3, #9
 801901a:	f77f af65 	ble.w	8018ee8 <etharp_tmr+0xc>
      }
    }
  }
}
 801901e:	bf00      	nop
 8019020:	bf00      	nop
 8019022:	3708      	adds	r7, #8
 8019024:	46bd      	mov	sp, r7
 8019026:	bd80      	pop	{r7, pc}
 8019028:	200110ec 	.word	0x200110ec

0801902c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801902c:	b580      	push	{r7, lr}
 801902e:	b08a      	sub	sp, #40	; 0x28
 8019030:	af00      	add	r7, sp, #0
 8019032:	60f8      	str	r0, [r7, #12]
 8019034:	460b      	mov	r3, r1
 8019036:	607a      	str	r2, [r7, #4]
 8019038:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801903a:	230a      	movs	r3, #10
 801903c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801903e:	230a      	movs	r3, #10
 8019040:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8019042:	230a      	movs	r3, #10
 8019044:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8019046:	2300      	movs	r3, #0
 8019048:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801904a:	230a      	movs	r3, #10
 801904c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801904e:	2300      	movs	r3, #0
 8019050:	83bb      	strh	r3, [r7, #28]
 8019052:	2300      	movs	r3, #0
 8019054:	837b      	strh	r3, [r7, #26]
 8019056:	2300      	movs	r3, #0
 8019058:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801905a:	2300      	movs	r3, #0
 801905c:	843b      	strh	r3, [r7, #32]
 801905e:	e0ae      	b.n	80191be <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8019060:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019064:	49a6      	ldr	r1, [pc, #664]	; (8019300 <etharp_find_entry+0x2d4>)
 8019066:	4613      	mov	r3, r2
 8019068:	005b      	lsls	r3, r3, #1
 801906a:	4413      	add	r3, r2
 801906c:	00db      	lsls	r3, r3, #3
 801906e:	440b      	add	r3, r1
 8019070:	3314      	adds	r3, #20
 8019072:	781b      	ldrb	r3, [r3, #0]
 8019074:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8019076:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801907a:	2b0a      	cmp	r3, #10
 801907c:	d105      	bne.n	801908a <etharp_find_entry+0x5e>
 801907e:	7dfb      	ldrb	r3, [r7, #23]
 8019080:	2b00      	cmp	r3, #0
 8019082:	d102      	bne.n	801908a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8019084:	8c3b      	ldrh	r3, [r7, #32]
 8019086:	847b      	strh	r3, [r7, #34]	; 0x22
 8019088:	e095      	b.n	80191b6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801908a:	7dfb      	ldrb	r3, [r7, #23]
 801908c:	2b00      	cmp	r3, #0
 801908e:	f000 8092 	beq.w	80191b6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8019092:	7dfb      	ldrb	r3, [r7, #23]
 8019094:	2b01      	cmp	r3, #1
 8019096:	d009      	beq.n	80190ac <etharp_find_entry+0x80>
 8019098:	7dfb      	ldrb	r3, [r7, #23]
 801909a:	2b01      	cmp	r3, #1
 801909c:	d806      	bhi.n	80190ac <etharp_find_entry+0x80>
 801909e:	4b99      	ldr	r3, [pc, #612]	; (8019304 <etharp_find_entry+0x2d8>)
 80190a0:	f240 1223 	movw	r2, #291	; 0x123
 80190a4:	4998      	ldr	r1, [pc, #608]	; (8019308 <etharp_find_entry+0x2dc>)
 80190a6:	4899      	ldr	r0, [pc, #612]	; (801930c <etharp_find_entry+0x2e0>)
 80190a8:	f002 fbac 	bl	801b804 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80190ac:	68fb      	ldr	r3, [r7, #12]
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	d020      	beq.n	80190f4 <etharp_find_entry+0xc8>
 80190b2:	68fb      	ldr	r3, [r7, #12]
 80190b4:	6819      	ldr	r1, [r3, #0]
 80190b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80190ba:	4891      	ldr	r0, [pc, #580]	; (8019300 <etharp_find_entry+0x2d4>)
 80190bc:	4613      	mov	r3, r2
 80190be:	005b      	lsls	r3, r3, #1
 80190c0:	4413      	add	r3, r2
 80190c2:	00db      	lsls	r3, r3, #3
 80190c4:	4403      	add	r3, r0
 80190c6:	3304      	adds	r3, #4
 80190c8:	681b      	ldr	r3, [r3, #0]
 80190ca:	4299      	cmp	r1, r3
 80190cc:	d112      	bne.n	80190f4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d00c      	beq.n	80190ee <etharp_find_entry+0xc2>
 80190d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80190d8:	4989      	ldr	r1, [pc, #548]	; (8019300 <etharp_find_entry+0x2d4>)
 80190da:	4613      	mov	r3, r2
 80190dc:	005b      	lsls	r3, r3, #1
 80190de:	4413      	add	r3, r2
 80190e0:	00db      	lsls	r3, r3, #3
 80190e2:	440b      	add	r3, r1
 80190e4:	3308      	adds	r3, #8
 80190e6:	681b      	ldr	r3, [r3, #0]
 80190e8:	687a      	ldr	r2, [r7, #4]
 80190ea:	429a      	cmp	r2, r3
 80190ec:	d102      	bne.n	80190f4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80190ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80190f2:	e100      	b.n	80192f6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80190f4:	7dfb      	ldrb	r3, [r7, #23]
 80190f6:	2b01      	cmp	r3, #1
 80190f8:	d140      	bne.n	801917c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80190fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80190fe:	4980      	ldr	r1, [pc, #512]	; (8019300 <etharp_find_entry+0x2d4>)
 8019100:	4613      	mov	r3, r2
 8019102:	005b      	lsls	r3, r3, #1
 8019104:	4413      	add	r3, r2
 8019106:	00db      	lsls	r3, r3, #3
 8019108:	440b      	add	r3, r1
 801910a:	681b      	ldr	r3, [r3, #0]
 801910c:	2b00      	cmp	r3, #0
 801910e:	d01a      	beq.n	8019146 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8019110:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019114:	497a      	ldr	r1, [pc, #488]	; (8019300 <etharp_find_entry+0x2d4>)
 8019116:	4613      	mov	r3, r2
 8019118:	005b      	lsls	r3, r3, #1
 801911a:	4413      	add	r3, r2
 801911c:	00db      	lsls	r3, r3, #3
 801911e:	440b      	add	r3, r1
 8019120:	3312      	adds	r3, #18
 8019122:	881b      	ldrh	r3, [r3, #0]
 8019124:	8bba      	ldrh	r2, [r7, #28]
 8019126:	429a      	cmp	r2, r3
 8019128:	d845      	bhi.n	80191b6 <etharp_find_entry+0x18a>
            old_queue = i;
 801912a:	8c3b      	ldrh	r3, [r7, #32]
 801912c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801912e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019132:	4973      	ldr	r1, [pc, #460]	; (8019300 <etharp_find_entry+0x2d4>)
 8019134:	4613      	mov	r3, r2
 8019136:	005b      	lsls	r3, r3, #1
 8019138:	4413      	add	r3, r2
 801913a:	00db      	lsls	r3, r3, #3
 801913c:	440b      	add	r3, r1
 801913e:	3312      	adds	r3, #18
 8019140:	881b      	ldrh	r3, [r3, #0]
 8019142:	83bb      	strh	r3, [r7, #28]
 8019144:	e037      	b.n	80191b6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8019146:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801914a:	496d      	ldr	r1, [pc, #436]	; (8019300 <etharp_find_entry+0x2d4>)
 801914c:	4613      	mov	r3, r2
 801914e:	005b      	lsls	r3, r3, #1
 8019150:	4413      	add	r3, r2
 8019152:	00db      	lsls	r3, r3, #3
 8019154:	440b      	add	r3, r1
 8019156:	3312      	adds	r3, #18
 8019158:	881b      	ldrh	r3, [r3, #0]
 801915a:	8b7a      	ldrh	r2, [r7, #26]
 801915c:	429a      	cmp	r2, r3
 801915e:	d82a      	bhi.n	80191b6 <etharp_find_entry+0x18a>
            old_pending = i;
 8019160:	8c3b      	ldrh	r3, [r7, #32]
 8019162:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8019164:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019168:	4965      	ldr	r1, [pc, #404]	; (8019300 <etharp_find_entry+0x2d4>)
 801916a:	4613      	mov	r3, r2
 801916c:	005b      	lsls	r3, r3, #1
 801916e:	4413      	add	r3, r2
 8019170:	00db      	lsls	r3, r3, #3
 8019172:	440b      	add	r3, r1
 8019174:	3312      	adds	r3, #18
 8019176:	881b      	ldrh	r3, [r3, #0]
 8019178:	837b      	strh	r3, [r7, #26]
 801917a:	e01c      	b.n	80191b6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801917c:	7dfb      	ldrb	r3, [r7, #23]
 801917e:	2b01      	cmp	r3, #1
 8019180:	d919      	bls.n	80191b6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8019182:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019186:	495e      	ldr	r1, [pc, #376]	; (8019300 <etharp_find_entry+0x2d4>)
 8019188:	4613      	mov	r3, r2
 801918a:	005b      	lsls	r3, r3, #1
 801918c:	4413      	add	r3, r2
 801918e:	00db      	lsls	r3, r3, #3
 8019190:	440b      	add	r3, r1
 8019192:	3312      	adds	r3, #18
 8019194:	881b      	ldrh	r3, [r3, #0]
 8019196:	8b3a      	ldrh	r2, [r7, #24]
 8019198:	429a      	cmp	r2, r3
 801919a:	d80c      	bhi.n	80191b6 <etharp_find_entry+0x18a>
            old_stable = i;
 801919c:	8c3b      	ldrh	r3, [r7, #32]
 801919e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80191a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80191a4:	4956      	ldr	r1, [pc, #344]	; (8019300 <etharp_find_entry+0x2d4>)
 80191a6:	4613      	mov	r3, r2
 80191a8:	005b      	lsls	r3, r3, #1
 80191aa:	4413      	add	r3, r2
 80191ac:	00db      	lsls	r3, r3, #3
 80191ae:	440b      	add	r3, r1
 80191b0:	3312      	adds	r3, #18
 80191b2:	881b      	ldrh	r3, [r3, #0]
 80191b4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80191b6:	8c3b      	ldrh	r3, [r7, #32]
 80191b8:	3301      	adds	r3, #1
 80191ba:	b29b      	uxth	r3, r3
 80191bc:	843b      	strh	r3, [r7, #32]
 80191be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80191c2:	2b09      	cmp	r3, #9
 80191c4:	f77f af4c 	ble.w	8019060 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80191c8:	7afb      	ldrb	r3, [r7, #11]
 80191ca:	f003 0302 	and.w	r3, r3, #2
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	d108      	bne.n	80191e4 <etharp_find_entry+0x1b8>
 80191d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80191d6:	2b0a      	cmp	r3, #10
 80191d8:	d107      	bne.n	80191ea <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80191da:	7afb      	ldrb	r3, [r7, #11]
 80191dc:	f003 0301 	and.w	r3, r3, #1
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	d102      	bne.n	80191ea <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80191e4:	f04f 33ff 	mov.w	r3, #4294967295
 80191e8:	e085      	b.n	80192f6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80191ea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80191ee:	2b09      	cmp	r3, #9
 80191f0:	dc02      	bgt.n	80191f8 <etharp_find_entry+0x1cc>
    i = empty;
 80191f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80191f4:	843b      	strh	r3, [r7, #32]
 80191f6:	e039      	b.n	801926c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80191f8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80191fc:	2b09      	cmp	r3, #9
 80191fe:	dc14      	bgt.n	801922a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8019200:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019202:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8019204:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019208:	493d      	ldr	r1, [pc, #244]	; (8019300 <etharp_find_entry+0x2d4>)
 801920a:	4613      	mov	r3, r2
 801920c:	005b      	lsls	r3, r3, #1
 801920e:	4413      	add	r3, r2
 8019210:	00db      	lsls	r3, r3, #3
 8019212:	440b      	add	r3, r1
 8019214:	681b      	ldr	r3, [r3, #0]
 8019216:	2b00      	cmp	r3, #0
 8019218:	d018      	beq.n	801924c <etharp_find_entry+0x220>
 801921a:	4b3a      	ldr	r3, [pc, #232]	; (8019304 <etharp_find_entry+0x2d8>)
 801921c:	f240 126d 	movw	r2, #365	; 0x16d
 8019220:	493b      	ldr	r1, [pc, #236]	; (8019310 <etharp_find_entry+0x2e4>)
 8019222:	483a      	ldr	r0, [pc, #232]	; (801930c <etharp_find_entry+0x2e0>)
 8019224:	f002 faee 	bl	801b804 <iprintf>
 8019228:	e010      	b.n	801924c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801922a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801922e:	2b09      	cmp	r3, #9
 8019230:	dc02      	bgt.n	8019238 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8019232:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019234:	843b      	strh	r3, [r7, #32]
 8019236:	e009      	b.n	801924c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8019238:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801923c:	2b09      	cmp	r3, #9
 801923e:	dc02      	bgt.n	8019246 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8019240:	8bfb      	ldrh	r3, [r7, #30]
 8019242:	843b      	strh	r3, [r7, #32]
 8019244:	e002      	b.n	801924c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8019246:	f04f 33ff 	mov.w	r3, #4294967295
 801924a:	e054      	b.n	80192f6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801924c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019250:	2b09      	cmp	r3, #9
 8019252:	dd06      	ble.n	8019262 <etharp_find_entry+0x236>
 8019254:	4b2b      	ldr	r3, [pc, #172]	; (8019304 <etharp_find_entry+0x2d8>)
 8019256:	f240 127f 	movw	r2, #383	; 0x17f
 801925a:	492e      	ldr	r1, [pc, #184]	; (8019314 <etharp_find_entry+0x2e8>)
 801925c:	482b      	ldr	r0, [pc, #172]	; (801930c <etharp_find_entry+0x2e0>)
 801925e:	f002 fad1 	bl	801b804 <iprintf>
    etharp_free_entry(i);
 8019262:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019266:	4618      	mov	r0, r3
 8019268:	f7ff fe06 	bl	8018e78 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801926c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019270:	2b09      	cmp	r3, #9
 8019272:	dd06      	ble.n	8019282 <etharp_find_entry+0x256>
 8019274:	4b23      	ldr	r3, [pc, #140]	; (8019304 <etharp_find_entry+0x2d8>)
 8019276:	f240 1283 	movw	r2, #387	; 0x183
 801927a:	4926      	ldr	r1, [pc, #152]	; (8019314 <etharp_find_entry+0x2e8>)
 801927c:	4823      	ldr	r0, [pc, #140]	; (801930c <etharp_find_entry+0x2e0>)
 801927e:	f002 fac1 	bl	801b804 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8019282:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019286:	491e      	ldr	r1, [pc, #120]	; (8019300 <etharp_find_entry+0x2d4>)
 8019288:	4613      	mov	r3, r2
 801928a:	005b      	lsls	r3, r3, #1
 801928c:	4413      	add	r3, r2
 801928e:	00db      	lsls	r3, r3, #3
 8019290:	440b      	add	r3, r1
 8019292:	3314      	adds	r3, #20
 8019294:	781b      	ldrb	r3, [r3, #0]
 8019296:	2b00      	cmp	r3, #0
 8019298:	d006      	beq.n	80192a8 <etharp_find_entry+0x27c>
 801929a:	4b1a      	ldr	r3, [pc, #104]	; (8019304 <etharp_find_entry+0x2d8>)
 801929c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80192a0:	491d      	ldr	r1, [pc, #116]	; (8019318 <etharp_find_entry+0x2ec>)
 80192a2:	481a      	ldr	r0, [pc, #104]	; (801930c <etharp_find_entry+0x2e0>)
 80192a4:	f002 faae 	bl	801b804 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80192a8:	68fb      	ldr	r3, [r7, #12]
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	d00b      	beq.n	80192c6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80192ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80192b2:	68fb      	ldr	r3, [r7, #12]
 80192b4:	6819      	ldr	r1, [r3, #0]
 80192b6:	4812      	ldr	r0, [pc, #72]	; (8019300 <etharp_find_entry+0x2d4>)
 80192b8:	4613      	mov	r3, r2
 80192ba:	005b      	lsls	r3, r3, #1
 80192bc:	4413      	add	r3, r2
 80192be:	00db      	lsls	r3, r3, #3
 80192c0:	4403      	add	r3, r0
 80192c2:	3304      	adds	r3, #4
 80192c4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80192c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80192ca:	490d      	ldr	r1, [pc, #52]	; (8019300 <etharp_find_entry+0x2d4>)
 80192cc:	4613      	mov	r3, r2
 80192ce:	005b      	lsls	r3, r3, #1
 80192d0:	4413      	add	r3, r2
 80192d2:	00db      	lsls	r3, r3, #3
 80192d4:	440b      	add	r3, r1
 80192d6:	3312      	adds	r3, #18
 80192d8:	2200      	movs	r2, #0
 80192da:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80192dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80192e0:	4907      	ldr	r1, [pc, #28]	; (8019300 <etharp_find_entry+0x2d4>)
 80192e2:	4613      	mov	r3, r2
 80192e4:	005b      	lsls	r3, r3, #1
 80192e6:	4413      	add	r3, r2
 80192e8:	00db      	lsls	r3, r3, #3
 80192ea:	440b      	add	r3, r1
 80192ec:	3308      	adds	r3, #8
 80192ee:	687a      	ldr	r2, [r7, #4]
 80192f0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80192f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80192f6:	4618      	mov	r0, r3
 80192f8:	3728      	adds	r7, #40	; 0x28
 80192fa:	46bd      	mov	sp, r7
 80192fc:	bd80      	pop	{r7, pc}
 80192fe:	bf00      	nop
 8019300:	200110ec 	.word	0x200110ec
 8019304:	0801fd58 	.word	0x0801fd58
 8019308:	0801fd90 	.word	0x0801fd90
 801930c:	0801fdd0 	.word	0x0801fdd0
 8019310:	0801fdf8 	.word	0x0801fdf8
 8019314:	0801fe10 	.word	0x0801fe10
 8019318:	0801fe24 	.word	0x0801fe24

0801931c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801931c:	b580      	push	{r7, lr}
 801931e:	b088      	sub	sp, #32
 8019320:	af02      	add	r7, sp, #8
 8019322:	60f8      	str	r0, [r7, #12]
 8019324:	60b9      	str	r1, [r7, #8]
 8019326:	607a      	str	r2, [r7, #4]
 8019328:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801932a:	68fb      	ldr	r3, [r7, #12]
 801932c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019330:	2b06      	cmp	r3, #6
 8019332:	d006      	beq.n	8019342 <etharp_update_arp_entry+0x26>
 8019334:	4b48      	ldr	r3, [pc, #288]	; (8019458 <etharp_update_arp_entry+0x13c>)
 8019336:	f240 12a9 	movw	r2, #425	; 0x1a9
 801933a:	4948      	ldr	r1, [pc, #288]	; (801945c <etharp_update_arp_entry+0x140>)
 801933c:	4848      	ldr	r0, [pc, #288]	; (8019460 <etharp_update_arp_entry+0x144>)
 801933e:	f002 fa61 	bl	801b804 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8019342:	68bb      	ldr	r3, [r7, #8]
 8019344:	2b00      	cmp	r3, #0
 8019346:	d012      	beq.n	801936e <etharp_update_arp_entry+0x52>
 8019348:	68bb      	ldr	r3, [r7, #8]
 801934a:	681b      	ldr	r3, [r3, #0]
 801934c:	2b00      	cmp	r3, #0
 801934e:	d00e      	beq.n	801936e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8019350:	68bb      	ldr	r3, [r7, #8]
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	68f9      	ldr	r1, [r7, #12]
 8019356:	4618      	mov	r0, r3
 8019358:	f001 f8fe 	bl	801a558 <ip4_addr_isbroadcast_u32>
 801935c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801935e:	2b00      	cmp	r3, #0
 8019360:	d105      	bne.n	801936e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8019362:	68bb      	ldr	r3, [r7, #8]
 8019364:	681b      	ldr	r3, [r3, #0]
 8019366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801936a:	2be0      	cmp	r3, #224	; 0xe0
 801936c:	d102      	bne.n	8019374 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801936e:	f06f 030f 	mvn.w	r3, #15
 8019372:	e06c      	b.n	801944e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8019374:	78fb      	ldrb	r3, [r7, #3]
 8019376:	68fa      	ldr	r2, [r7, #12]
 8019378:	4619      	mov	r1, r3
 801937a:	68b8      	ldr	r0, [r7, #8]
 801937c:	f7ff fe56 	bl	801902c <etharp_find_entry>
 8019380:	4603      	mov	r3, r0
 8019382:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8019384:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8019388:	2b00      	cmp	r3, #0
 801938a:	da02      	bge.n	8019392 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801938c:	8afb      	ldrh	r3, [r7, #22]
 801938e:	b25b      	sxtb	r3, r3
 8019390:	e05d      	b.n	801944e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8019392:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019396:	4933      	ldr	r1, [pc, #204]	; (8019464 <etharp_update_arp_entry+0x148>)
 8019398:	4613      	mov	r3, r2
 801939a:	005b      	lsls	r3, r3, #1
 801939c:	4413      	add	r3, r2
 801939e:	00db      	lsls	r3, r3, #3
 80193a0:	440b      	add	r3, r1
 80193a2:	3314      	adds	r3, #20
 80193a4:	2202      	movs	r2, #2
 80193a6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80193a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80193ac:	492d      	ldr	r1, [pc, #180]	; (8019464 <etharp_update_arp_entry+0x148>)
 80193ae:	4613      	mov	r3, r2
 80193b0:	005b      	lsls	r3, r3, #1
 80193b2:	4413      	add	r3, r2
 80193b4:	00db      	lsls	r3, r3, #3
 80193b6:	440b      	add	r3, r1
 80193b8:	3308      	adds	r3, #8
 80193ba:	68fa      	ldr	r2, [r7, #12]
 80193bc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80193be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80193c2:	4613      	mov	r3, r2
 80193c4:	005b      	lsls	r3, r3, #1
 80193c6:	4413      	add	r3, r2
 80193c8:	00db      	lsls	r3, r3, #3
 80193ca:	3308      	adds	r3, #8
 80193cc:	4a25      	ldr	r2, [pc, #148]	; (8019464 <etharp_update_arp_entry+0x148>)
 80193ce:	4413      	add	r3, r2
 80193d0:	3304      	adds	r3, #4
 80193d2:	2206      	movs	r2, #6
 80193d4:	6879      	ldr	r1, [r7, #4]
 80193d6:	4618      	mov	r0, r3
 80193d8:	f002 f9fe 	bl	801b7d8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80193dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80193e0:	4920      	ldr	r1, [pc, #128]	; (8019464 <etharp_update_arp_entry+0x148>)
 80193e2:	4613      	mov	r3, r2
 80193e4:	005b      	lsls	r3, r3, #1
 80193e6:	4413      	add	r3, r2
 80193e8:	00db      	lsls	r3, r3, #3
 80193ea:	440b      	add	r3, r1
 80193ec:	3312      	adds	r3, #18
 80193ee:	2200      	movs	r2, #0
 80193f0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80193f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80193f6:	491b      	ldr	r1, [pc, #108]	; (8019464 <etharp_update_arp_entry+0x148>)
 80193f8:	4613      	mov	r3, r2
 80193fa:	005b      	lsls	r3, r3, #1
 80193fc:	4413      	add	r3, r2
 80193fe:	00db      	lsls	r3, r3, #3
 8019400:	440b      	add	r3, r1
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	2b00      	cmp	r3, #0
 8019406:	d021      	beq.n	801944c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8019408:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801940c:	4915      	ldr	r1, [pc, #84]	; (8019464 <etharp_update_arp_entry+0x148>)
 801940e:	4613      	mov	r3, r2
 8019410:	005b      	lsls	r3, r3, #1
 8019412:	4413      	add	r3, r2
 8019414:	00db      	lsls	r3, r3, #3
 8019416:	440b      	add	r3, r1
 8019418:	681b      	ldr	r3, [r3, #0]
 801941a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801941c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019420:	4910      	ldr	r1, [pc, #64]	; (8019464 <etharp_update_arp_entry+0x148>)
 8019422:	4613      	mov	r3, r2
 8019424:	005b      	lsls	r3, r3, #1
 8019426:	4413      	add	r3, r2
 8019428:	00db      	lsls	r3, r3, #3
 801942a:	440b      	add	r3, r1
 801942c:	2200      	movs	r2, #0
 801942e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8019436:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801943a:	9300      	str	r3, [sp, #0]
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	6939      	ldr	r1, [r7, #16]
 8019440:	68f8      	ldr	r0, [r7, #12]
 8019442:	f001 ff97 	bl	801b374 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8019446:	6938      	ldr	r0, [r7, #16]
 8019448:	f7f8 fe46 	bl	80120d8 <pbuf_free>
  }
  return ERR_OK;
 801944c:	2300      	movs	r3, #0
}
 801944e:	4618      	mov	r0, r3
 8019450:	3718      	adds	r7, #24
 8019452:	46bd      	mov	sp, r7
 8019454:	bd80      	pop	{r7, pc}
 8019456:	bf00      	nop
 8019458:	0801fd58 	.word	0x0801fd58
 801945c:	0801fe50 	.word	0x0801fe50
 8019460:	0801fdd0 	.word	0x0801fdd0
 8019464:	200110ec 	.word	0x200110ec

08019468 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8019468:	b580      	push	{r7, lr}
 801946a:	b084      	sub	sp, #16
 801946c:	af00      	add	r7, sp, #0
 801946e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019470:	2300      	movs	r3, #0
 8019472:	60fb      	str	r3, [r7, #12]
 8019474:	e01e      	b.n	80194b4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8019476:	4913      	ldr	r1, [pc, #76]	; (80194c4 <etharp_cleanup_netif+0x5c>)
 8019478:	68fa      	ldr	r2, [r7, #12]
 801947a:	4613      	mov	r3, r2
 801947c:	005b      	lsls	r3, r3, #1
 801947e:	4413      	add	r3, r2
 8019480:	00db      	lsls	r3, r3, #3
 8019482:	440b      	add	r3, r1
 8019484:	3314      	adds	r3, #20
 8019486:	781b      	ldrb	r3, [r3, #0]
 8019488:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801948a:	7afb      	ldrb	r3, [r7, #11]
 801948c:	2b00      	cmp	r3, #0
 801948e:	d00e      	beq.n	80194ae <etharp_cleanup_netif+0x46>
 8019490:	490c      	ldr	r1, [pc, #48]	; (80194c4 <etharp_cleanup_netif+0x5c>)
 8019492:	68fa      	ldr	r2, [r7, #12]
 8019494:	4613      	mov	r3, r2
 8019496:	005b      	lsls	r3, r3, #1
 8019498:	4413      	add	r3, r2
 801949a:	00db      	lsls	r3, r3, #3
 801949c:	440b      	add	r3, r1
 801949e:	3308      	adds	r3, #8
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	687a      	ldr	r2, [r7, #4]
 80194a4:	429a      	cmp	r2, r3
 80194a6:	d102      	bne.n	80194ae <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80194a8:	68f8      	ldr	r0, [r7, #12]
 80194aa:	f7ff fce5 	bl	8018e78 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80194ae:	68fb      	ldr	r3, [r7, #12]
 80194b0:	3301      	adds	r3, #1
 80194b2:	60fb      	str	r3, [r7, #12]
 80194b4:	68fb      	ldr	r3, [r7, #12]
 80194b6:	2b09      	cmp	r3, #9
 80194b8:	dddd      	ble.n	8019476 <etharp_cleanup_netif+0xe>
    }
  }
}
 80194ba:	bf00      	nop
 80194bc:	bf00      	nop
 80194be:	3710      	adds	r7, #16
 80194c0:	46bd      	mov	sp, r7
 80194c2:	bd80      	pop	{r7, pc}
 80194c4:	200110ec 	.word	0x200110ec

080194c8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80194c8:	b5b0      	push	{r4, r5, r7, lr}
 80194ca:	b08a      	sub	sp, #40	; 0x28
 80194cc:	af04      	add	r7, sp, #16
 80194ce:	6078      	str	r0, [r7, #4]
 80194d0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80194d2:	683b      	ldr	r3, [r7, #0]
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d107      	bne.n	80194e8 <etharp_input+0x20>
 80194d8:	4b3d      	ldr	r3, [pc, #244]	; (80195d0 <etharp_input+0x108>)
 80194da:	f240 228a 	movw	r2, #650	; 0x28a
 80194de:	493d      	ldr	r1, [pc, #244]	; (80195d4 <etharp_input+0x10c>)
 80194e0:	483d      	ldr	r0, [pc, #244]	; (80195d8 <etharp_input+0x110>)
 80194e2:	f002 f98f 	bl	801b804 <iprintf>
 80194e6:	e06f      	b.n	80195c8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	685b      	ldr	r3, [r3, #4]
 80194ec:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80194ee:	693b      	ldr	r3, [r7, #16]
 80194f0:	881b      	ldrh	r3, [r3, #0]
 80194f2:	b29b      	uxth	r3, r3
 80194f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80194f8:	d10c      	bne.n	8019514 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80194fa:	693b      	ldr	r3, [r7, #16]
 80194fc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80194fe:	2b06      	cmp	r3, #6
 8019500:	d108      	bne.n	8019514 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8019502:	693b      	ldr	r3, [r7, #16]
 8019504:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8019506:	2b04      	cmp	r3, #4
 8019508:	d104      	bne.n	8019514 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801950a:	693b      	ldr	r3, [r7, #16]
 801950c:	885b      	ldrh	r3, [r3, #2]
 801950e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8019510:	2b08      	cmp	r3, #8
 8019512:	d003      	beq.n	801951c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8019514:	6878      	ldr	r0, [r7, #4]
 8019516:	f7f8 fddf 	bl	80120d8 <pbuf_free>
    return;
 801951a:	e055      	b.n	80195c8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801951c:	693b      	ldr	r3, [r7, #16]
 801951e:	330e      	adds	r3, #14
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8019524:	693b      	ldr	r3, [r7, #16]
 8019526:	3318      	adds	r3, #24
 8019528:	681b      	ldr	r3, [r3, #0]
 801952a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801952c:	683b      	ldr	r3, [r7, #0]
 801952e:	3304      	adds	r3, #4
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	2b00      	cmp	r3, #0
 8019534:	d102      	bne.n	801953c <etharp_input+0x74>
    for_us = 0;
 8019536:	2300      	movs	r3, #0
 8019538:	75fb      	strb	r3, [r7, #23]
 801953a:	e009      	b.n	8019550 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801953c:	68ba      	ldr	r2, [r7, #8]
 801953e:	683b      	ldr	r3, [r7, #0]
 8019540:	3304      	adds	r3, #4
 8019542:	681b      	ldr	r3, [r3, #0]
 8019544:	429a      	cmp	r2, r3
 8019546:	bf0c      	ite	eq
 8019548:	2301      	moveq	r3, #1
 801954a:	2300      	movne	r3, #0
 801954c:	b2db      	uxtb	r3, r3
 801954e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8019550:	693b      	ldr	r3, [r7, #16]
 8019552:	f103 0208 	add.w	r2, r3, #8
 8019556:	7dfb      	ldrb	r3, [r7, #23]
 8019558:	2b00      	cmp	r3, #0
 801955a:	d001      	beq.n	8019560 <etharp_input+0x98>
 801955c:	2301      	movs	r3, #1
 801955e:	e000      	b.n	8019562 <etharp_input+0x9a>
 8019560:	2302      	movs	r3, #2
 8019562:	f107 010c 	add.w	r1, r7, #12
 8019566:	6838      	ldr	r0, [r7, #0]
 8019568:	f7ff fed8 	bl	801931c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801956c:	693b      	ldr	r3, [r7, #16]
 801956e:	88db      	ldrh	r3, [r3, #6]
 8019570:	b29b      	uxth	r3, r3
 8019572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019576:	d003      	beq.n	8019580 <etharp_input+0xb8>
 8019578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801957c:	d01e      	beq.n	80195bc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801957e:	e020      	b.n	80195c2 <etharp_input+0xfa>
      if (for_us) {
 8019580:	7dfb      	ldrb	r3, [r7, #23]
 8019582:	2b00      	cmp	r3, #0
 8019584:	d01c      	beq.n	80195c0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8019586:	683b      	ldr	r3, [r7, #0]
 8019588:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801958c:	693b      	ldr	r3, [r7, #16]
 801958e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8019592:	683b      	ldr	r3, [r7, #0]
 8019594:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8019598:	683b      	ldr	r3, [r7, #0]
 801959a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801959c:	693a      	ldr	r2, [r7, #16]
 801959e:	3208      	adds	r2, #8
        etharp_raw(netif,
 80195a0:	2102      	movs	r1, #2
 80195a2:	9103      	str	r1, [sp, #12]
 80195a4:	f107 010c 	add.w	r1, r7, #12
 80195a8:	9102      	str	r1, [sp, #8]
 80195aa:	9201      	str	r2, [sp, #4]
 80195ac:	9300      	str	r3, [sp, #0]
 80195ae:	462b      	mov	r3, r5
 80195b0:	4622      	mov	r2, r4
 80195b2:	4601      	mov	r1, r0
 80195b4:	6838      	ldr	r0, [r7, #0]
 80195b6:	f000 faeb 	bl	8019b90 <etharp_raw>
      break;
 80195ba:	e001      	b.n	80195c0 <etharp_input+0xf8>
      break;
 80195bc:	bf00      	nop
 80195be:	e000      	b.n	80195c2 <etharp_input+0xfa>
      break;
 80195c0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80195c2:	6878      	ldr	r0, [r7, #4]
 80195c4:	f7f8 fd88 	bl	80120d8 <pbuf_free>
}
 80195c8:	3718      	adds	r7, #24
 80195ca:	46bd      	mov	sp, r7
 80195cc:	bdb0      	pop	{r4, r5, r7, pc}
 80195ce:	bf00      	nop
 80195d0:	0801fd58 	.word	0x0801fd58
 80195d4:	0801fea8 	.word	0x0801fea8
 80195d8:	0801fdd0 	.word	0x0801fdd0

080195dc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80195dc:	b580      	push	{r7, lr}
 80195de:	b086      	sub	sp, #24
 80195e0:	af02      	add	r7, sp, #8
 80195e2:	60f8      	str	r0, [r7, #12]
 80195e4:	60b9      	str	r1, [r7, #8]
 80195e6:	4613      	mov	r3, r2
 80195e8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80195ea:	79fa      	ldrb	r2, [r7, #7]
 80195ec:	4944      	ldr	r1, [pc, #272]	; (8019700 <etharp_output_to_arp_index+0x124>)
 80195ee:	4613      	mov	r3, r2
 80195f0:	005b      	lsls	r3, r3, #1
 80195f2:	4413      	add	r3, r2
 80195f4:	00db      	lsls	r3, r3, #3
 80195f6:	440b      	add	r3, r1
 80195f8:	3314      	adds	r3, #20
 80195fa:	781b      	ldrb	r3, [r3, #0]
 80195fc:	2b01      	cmp	r3, #1
 80195fe:	d806      	bhi.n	801960e <etharp_output_to_arp_index+0x32>
 8019600:	4b40      	ldr	r3, [pc, #256]	; (8019704 <etharp_output_to_arp_index+0x128>)
 8019602:	f240 22ee 	movw	r2, #750	; 0x2ee
 8019606:	4940      	ldr	r1, [pc, #256]	; (8019708 <etharp_output_to_arp_index+0x12c>)
 8019608:	4840      	ldr	r0, [pc, #256]	; (801970c <etharp_output_to_arp_index+0x130>)
 801960a:	f002 f8fb 	bl	801b804 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801960e:	79fa      	ldrb	r2, [r7, #7]
 8019610:	493b      	ldr	r1, [pc, #236]	; (8019700 <etharp_output_to_arp_index+0x124>)
 8019612:	4613      	mov	r3, r2
 8019614:	005b      	lsls	r3, r3, #1
 8019616:	4413      	add	r3, r2
 8019618:	00db      	lsls	r3, r3, #3
 801961a:	440b      	add	r3, r1
 801961c:	3314      	adds	r3, #20
 801961e:	781b      	ldrb	r3, [r3, #0]
 8019620:	2b02      	cmp	r3, #2
 8019622:	d153      	bne.n	80196cc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8019624:	79fa      	ldrb	r2, [r7, #7]
 8019626:	4936      	ldr	r1, [pc, #216]	; (8019700 <etharp_output_to_arp_index+0x124>)
 8019628:	4613      	mov	r3, r2
 801962a:	005b      	lsls	r3, r3, #1
 801962c:	4413      	add	r3, r2
 801962e:	00db      	lsls	r3, r3, #3
 8019630:	440b      	add	r3, r1
 8019632:	3312      	adds	r3, #18
 8019634:	881b      	ldrh	r3, [r3, #0]
 8019636:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801963a:	d919      	bls.n	8019670 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801963c:	79fa      	ldrb	r2, [r7, #7]
 801963e:	4613      	mov	r3, r2
 8019640:	005b      	lsls	r3, r3, #1
 8019642:	4413      	add	r3, r2
 8019644:	00db      	lsls	r3, r3, #3
 8019646:	4a2e      	ldr	r2, [pc, #184]	; (8019700 <etharp_output_to_arp_index+0x124>)
 8019648:	4413      	add	r3, r2
 801964a:	3304      	adds	r3, #4
 801964c:	4619      	mov	r1, r3
 801964e:	68f8      	ldr	r0, [r7, #12]
 8019650:	f000 fb4c 	bl	8019cec <etharp_request>
 8019654:	4603      	mov	r3, r0
 8019656:	2b00      	cmp	r3, #0
 8019658:	d138      	bne.n	80196cc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801965a:	79fa      	ldrb	r2, [r7, #7]
 801965c:	4928      	ldr	r1, [pc, #160]	; (8019700 <etharp_output_to_arp_index+0x124>)
 801965e:	4613      	mov	r3, r2
 8019660:	005b      	lsls	r3, r3, #1
 8019662:	4413      	add	r3, r2
 8019664:	00db      	lsls	r3, r3, #3
 8019666:	440b      	add	r3, r1
 8019668:	3314      	adds	r3, #20
 801966a:	2203      	movs	r2, #3
 801966c:	701a      	strb	r2, [r3, #0]
 801966e:	e02d      	b.n	80196cc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8019670:	79fa      	ldrb	r2, [r7, #7]
 8019672:	4923      	ldr	r1, [pc, #140]	; (8019700 <etharp_output_to_arp_index+0x124>)
 8019674:	4613      	mov	r3, r2
 8019676:	005b      	lsls	r3, r3, #1
 8019678:	4413      	add	r3, r2
 801967a:	00db      	lsls	r3, r3, #3
 801967c:	440b      	add	r3, r1
 801967e:	3312      	adds	r3, #18
 8019680:	881b      	ldrh	r3, [r3, #0]
 8019682:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8019686:	d321      	bcc.n	80196cc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8019688:	79fa      	ldrb	r2, [r7, #7]
 801968a:	4613      	mov	r3, r2
 801968c:	005b      	lsls	r3, r3, #1
 801968e:	4413      	add	r3, r2
 8019690:	00db      	lsls	r3, r3, #3
 8019692:	4a1b      	ldr	r2, [pc, #108]	; (8019700 <etharp_output_to_arp_index+0x124>)
 8019694:	4413      	add	r3, r2
 8019696:	1d19      	adds	r1, r3, #4
 8019698:	79fa      	ldrb	r2, [r7, #7]
 801969a:	4613      	mov	r3, r2
 801969c:	005b      	lsls	r3, r3, #1
 801969e:	4413      	add	r3, r2
 80196a0:	00db      	lsls	r3, r3, #3
 80196a2:	3308      	adds	r3, #8
 80196a4:	4a16      	ldr	r2, [pc, #88]	; (8019700 <etharp_output_to_arp_index+0x124>)
 80196a6:	4413      	add	r3, r2
 80196a8:	3304      	adds	r3, #4
 80196aa:	461a      	mov	r2, r3
 80196ac:	68f8      	ldr	r0, [r7, #12]
 80196ae:	f000 fafb 	bl	8019ca8 <etharp_request_dst>
 80196b2:	4603      	mov	r3, r0
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d109      	bne.n	80196cc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80196b8:	79fa      	ldrb	r2, [r7, #7]
 80196ba:	4911      	ldr	r1, [pc, #68]	; (8019700 <etharp_output_to_arp_index+0x124>)
 80196bc:	4613      	mov	r3, r2
 80196be:	005b      	lsls	r3, r3, #1
 80196c0:	4413      	add	r3, r2
 80196c2:	00db      	lsls	r3, r3, #3
 80196c4:	440b      	add	r3, r1
 80196c6:	3314      	adds	r3, #20
 80196c8:	2203      	movs	r2, #3
 80196ca:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80196cc:	68fb      	ldr	r3, [r7, #12]
 80196ce:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80196d2:	79fa      	ldrb	r2, [r7, #7]
 80196d4:	4613      	mov	r3, r2
 80196d6:	005b      	lsls	r3, r3, #1
 80196d8:	4413      	add	r3, r2
 80196da:	00db      	lsls	r3, r3, #3
 80196dc:	3308      	adds	r3, #8
 80196de:	4a08      	ldr	r2, [pc, #32]	; (8019700 <etharp_output_to_arp_index+0x124>)
 80196e0:	4413      	add	r3, r2
 80196e2:	3304      	adds	r3, #4
 80196e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80196e8:	9200      	str	r2, [sp, #0]
 80196ea:	460a      	mov	r2, r1
 80196ec:	68b9      	ldr	r1, [r7, #8]
 80196ee:	68f8      	ldr	r0, [r7, #12]
 80196f0:	f001 fe40 	bl	801b374 <ethernet_output>
 80196f4:	4603      	mov	r3, r0
}
 80196f6:	4618      	mov	r0, r3
 80196f8:	3710      	adds	r7, #16
 80196fa:	46bd      	mov	sp, r7
 80196fc:	bd80      	pop	{r7, pc}
 80196fe:	bf00      	nop
 8019700:	200110ec 	.word	0x200110ec
 8019704:	0801fd58 	.word	0x0801fd58
 8019708:	0801fec8 	.word	0x0801fec8
 801970c:	0801fdd0 	.word	0x0801fdd0

08019710 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8019710:	b580      	push	{r7, lr}
 8019712:	b08a      	sub	sp, #40	; 0x28
 8019714:	af02      	add	r7, sp, #8
 8019716:	60f8      	str	r0, [r7, #12]
 8019718:	60b9      	str	r1, [r7, #8]
 801971a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019720:	68fb      	ldr	r3, [r7, #12]
 8019722:	2b00      	cmp	r3, #0
 8019724:	d106      	bne.n	8019734 <etharp_output+0x24>
 8019726:	4b73      	ldr	r3, [pc, #460]	; (80198f4 <etharp_output+0x1e4>)
 8019728:	f240 321e 	movw	r2, #798	; 0x31e
 801972c:	4972      	ldr	r1, [pc, #456]	; (80198f8 <etharp_output+0x1e8>)
 801972e:	4873      	ldr	r0, [pc, #460]	; (80198fc <etharp_output+0x1ec>)
 8019730:	f002 f868 	bl	801b804 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8019734:	68bb      	ldr	r3, [r7, #8]
 8019736:	2b00      	cmp	r3, #0
 8019738:	d106      	bne.n	8019748 <etharp_output+0x38>
 801973a:	4b6e      	ldr	r3, [pc, #440]	; (80198f4 <etharp_output+0x1e4>)
 801973c:	f240 321f 	movw	r2, #799	; 0x31f
 8019740:	496f      	ldr	r1, [pc, #444]	; (8019900 <etharp_output+0x1f0>)
 8019742:	486e      	ldr	r0, [pc, #440]	; (80198fc <etharp_output+0x1ec>)
 8019744:	f002 f85e 	bl	801b804 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	2b00      	cmp	r3, #0
 801974c:	d106      	bne.n	801975c <etharp_output+0x4c>
 801974e:	4b69      	ldr	r3, [pc, #420]	; (80198f4 <etharp_output+0x1e4>)
 8019750:	f44f 7248 	mov.w	r2, #800	; 0x320
 8019754:	496b      	ldr	r1, [pc, #428]	; (8019904 <etharp_output+0x1f4>)
 8019756:	4869      	ldr	r0, [pc, #420]	; (80198fc <etharp_output+0x1ec>)
 8019758:	f002 f854 	bl	801b804 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	68f9      	ldr	r1, [r7, #12]
 8019762:	4618      	mov	r0, r3
 8019764:	f000 fef8 	bl	801a558 <ip4_addr_isbroadcast_u32>
 8019768:	4603      	mov	r3, r0
 801976a:	2b00      	cmp	r3, #0
 801976c:	d002      	beq.n	8019774 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801976e:	4b66      	ldr	r3, [pc, #408]	; (8019908 <etharp_output+0x1f8>)
 8019770:	61fb      	str	r3, [r7, #28]
 8019772:	e0af      	b.n	80198d4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	681b      	ldr	r3, [r3, #0]
 8019778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801977c:	2be0      	cmp	r3, #224	; 0xe0
 801977e:	d118      	bne.n	80197b2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8019780:	2301      	movs	r3, #1
 8019782:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8019784:	2300      	movs	r3, #0
 8019786:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8019788:	235e      	movs	r3, #94	; 0x5e
 801978a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	3301      	adds	r3, #1
 8019790:	781b      	ldrb	r3, [r3, #0]
 8019792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019796:	b2db      	uxtb	r3, r3
 8019798:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	3302      	adds	r3, #2
 801979e:	781b      	ldrb	r3, [r3, #0]
 80197a0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	3303      	adds	r3, #3
 80197a6:	781b      	ldrb	r3, [r3, #0]
 80197a8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80197aa:	f107 0310 	add.w	r3, r7, #16
 80197ae:	61fb      	str	r3, [r7, #28]
 80197b0:	e090      	b.n	80198d4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	681a      	ldr	r2, [r3, #0]
 80197b6:	68fb      	ldr	r3, [r7, #12]
 80197b8:	3304      	adds	r3, #4
 80197ba:	681b      	ldr	r3, [r3, #0]
 80197bc:	405a      	eors	r2, r3
 80197be:	68fb      	ldr	r3, [r7, #12]
 80197c0:	3308      	adds	r3, #8
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	4013      	ands	r3, r2
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d012      	beq.n	80197f0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	681b      	ldr	r3, [r3, #0]
 80197ce:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80197d0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80197d4:	4293      	cmp	r3, r2
 80197d6:	d00b      	beq.n	80197f0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80197d8:	68fb      	ldr	r3, [r7, #12]
 80197da:	330c      	adds	r3, #12
 80197dc:	681b      	ldr	r3, [r3, #0]
 80197de:	2b00      	cmp	r3, #0
 80197e0:	d003      	beq.n	80197ea <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80197e2:	68fb      	ldr	r3, [r7, #12]
 80197e4:	330c      	adds	r3, #12
 80197e6:	61bb      	str	r3, [r7, #24]
 80197e8:	e002      	b.n	80197f0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80197ea:	f06f 0303 	mvn.w	r3, #3
 80197ee:	e07d      	b.n	80198ec <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80197f0:	4b46      	ldr	r3, [pc, #280]	; (801990c <etharp_output+0x1fc>)
 80197f2:	781b      	ldrb	r3, [r3, #0]
 80197f4:	4619      	mov	r1, r3
 80197f6:	4a46      	ldr	r2, [pc, #280]	; (8019910 <etharp_output+0x200>)
 80197f8:	460b      	mov	r3, r1
 80197fa:	005b      	lsls	r3, r3, #1
 80197fc:	440b      	add	r3, r1
 80197fe:	00db      	lsls	r3, r3, #3
 8019800:	4413      	add	r3, r2
 8019802:	3314      	adds	r3, #20
 8019804:	781b      	ldrb	r3, [r3, #0]
 8019806:	2b01      	cmp	r3, #1
 8019808:	d925      	bls.n	8019856 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801980a:	4b40      	ldr	r3, [pc, #256]	; (801990c <etharp_output+0x1fc>)
 801980c:	781b      	ldrb	r3, [r3, #0]
 801980e:	4619      	mov	r1, r3
 8019810:	4a3f      	ldr	r2, [pc, #252]	; (8019910 <etharp_output+0x200>)
 8019812:	460b      	mov	r3, r1
 8019814:	005b      	lsls	r3, r3, #1
 8019816:	440b      	add	r3, r1
 8019818:	00db      	lsls	r3, r3, #3
 801981a:	4413      	add	r3, r2
 801981c:	3308      	adds	r3, #8
 801981e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019820:	68fa      	ldr	r2, [r7, #12]
 8019822:	429a      	cmp	r2, r3
 8019824:	d117      	bne.n	8019856 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8019826:	69bb      	ldr	r3, [r7, #24]
 8019828:	681a      	ldr	r2, [r3, #0]
 801982a:	4b38      	ldr	r3, [pc, #224]	; (801990c <etharp_output+0x1fc>)
 801982c:	781b      	ldrb	r3, [r3, #0]
 801982e:	4618      	mov	r0, r3
 8019830:	4937      	ldr	r1, [pc, #220]	; (8019910 <etharp_output+0x200>)
 8019832:	4603      	mov	r3, r0
 8019834:	005b      	lsls	r3, r3, #1
 8019836:	4403      	add	r3, r0
 8019838:	00db      	lsls	r3, r3, #3
 801983a:	440b      	add	r3, r1
 801983c:	3304      	adds	r3, #4
 801983e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8019840:	429a      	cmp	r2, r3
 8019842:	d108      	bne.n	8019856 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8019844:	4b31      	ldr	r3, [pc, #196]	; (801990c <etharp_output+0x1fc>)
 8019846:	781b      	ldrb	r3, [r3, #0]
 8019848:	461a      	mov	r2, r3
 801984a:	68b9      	ldr	r1, [r7, #8]
 801984c:	68f8      	ldr	r0, [r7, #12]
 801984e:	f7ff fec5 	bl	80195dc <etharp_output_to_arp_index>
 8019852:	4603      	mov	r3, r0
 8019854:	e04a      	b.n	80198ec <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019856:	2300      	movs	r3, #0
 8019858:	75fb      	strb	r3, [r7, #23]
 801985a:	e031      	b.n	80198c0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801985c:	7dfa      	ldrb	r2, [r7, #23]
 801985e:	492c      	ldr	r1, [pc, #176]	; (8019910 <etharp_output+0x200>)
 8019860:	4613      	mov	r3, r2
 8019862:	005b      	lsls	r3, r3, #1
 8019864:	4413      	add	r3, r2
 8019866:	00db      	lsls	r3, r3, #3
 8019868:	440b      	add	r3, r1
 801986a:	3314      	adds	r3, #20
 801986c:	781b      	ldrb	r3, [r3, #0]
 801986e:	2b01      	cmp	r3, #1
 8019870:	d923      	bls.n	80198ba <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8019872:	7dfa      	ldrb	r2, [r7, #23]
 8019874:	4926      	ldr	r1, [pc, #152]	; (8019910 <etharp_output+0x200>)
 8019876:	4613      	mov	r3, r2
 8019878:	005b      	lsls	r3, r3, #1
 801987a:	4413      	add	r3, r2
 801987c:	00db      	lsls	r3, r3, #3
 801987e:	440b      	add	r3, r1
 8019880:	3308      	adds	r3, #8
 8019882:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019884:	68fa      	ldr	r2, [r7, #12]
 8019886:	429a      	cmp	r2, r3
 8019888:	d117      	bne.n	80198ba <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801988a:	69bb      	ldr	r3, [r7, #24]
 801988c:	6819      	ldr	r1, [r3, #0]
 801988e:	7dfa      	ldrb	r2, [r7, #23]
 8019890:	481f      	ldr	r0, [pc, #124]	; (8019910 <etharp_output+0x200>)
 8019892:	4613      	mov	r3, r2
 8019894:	005b      	lsls	r3, r3, #1
 8019896:	4413      	add	r3, r2
 8019898:	00db      	lsls	r3, r3, #3
 801989a:	4403      	add	r3, r0
 801989c:	3304      	adds	r3, #4
 801989e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80198a0:	4299      	cmp	r1, r3
 80198a2:	d10a      	bne.n	80198ba <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80198a4:	4a19      	ldr	r2, [pc, #100]	; (801990c <etharp_output+0x1fc>)
 80198a6:	7dfb      	ldrb	r3, [r7, #23]
 80198a8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80198aa:	7dfb      	ldrb	r3, [r7, #23]
 80198ac:	461a      	mov	r2, r3
 80198ae:	68b9      	ldr	r1, [r7, #8]
 80198b0:	68f8      	ldr	r0, [r7, #12]
 80198b2:	f7ff fe93 	bl	80195dc <etharp_output_to_arp_index>
 80198b6:	4603      	mov	r3, r0
 80198b8:	e018      	b.n	80198ec <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80198ba:	7dfb      	ldrb	r3, [r7, #23]
 80198bc:	3301      	adds	r3, #1
 80198be:	75fb      	strb	r3, [r7, #23]
 80198c0:	7dfb      	ldrb	r3, [r7, #23]
 80198c2:	2b09      	cmp	r3, #9
 80198c4:	d9ca      	bls.n	801985c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80198c6:	68ba      	ldr	r2, [r7, #8]
 80198c8:	69b9      	ldr	r1, [r7, #24]
 80198ca:	68f8      	ldr	r0, [r7, #12]
 80198cc:	f000 f822 	bl	8019914 <etharp_query>
 80198d0:	4603      	mov	r3, r0
 80198d2:	e00b      	b.n	80198ec <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80198d4:	68fb      	ldr	r3, [r7, #12]
 80198d6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80198da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80198de:	9300      	str	r3, [sp, #0]
 80198e0:	69fb      	ldr	r3, [r7, #28]
 80198e2:	68b9      	ldr	r1, [r7, #8]
 80198e4:	68f8      	ldr	r0, [r7, #12]
 80198e6:	f001 fd45 	bl	801b374 <ethernet_output>
 80198ea:	4603      	mov	r3, r0
}
 80198ec:	4618      	mov	r0, r3
 80198ee:	3720      	adds	r7, #32
 80198f0:	46bd      	mov	sp, r7
 80198f2:	bd80      	pop	{r7, pc}
 80198f4:	0801fd58 	.word	0x0801fd58
 80198f8:	0801fea8 	.word	0x0801fea8
 80198fc:	0801fdd0 	.word	0x0801fdd0
 8019900:	0801fef8 	.word	0x0801fef8
 8019904:	0801fe98 	.word	0x0801fe98
 8019908:	08020610 	.word	0x08020610
 801990c:	200111dc 	.word	0x200111dc
 8019910:	200110ec 	.word	0x200110ec

08019914 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8019914:	b580      	push	{r7, lr}
 8019916:	b08c      	sub	sp, #48	; 0x30
 8019918:	af02      	add	r7, sp, #8
 801991a:	60f8      	str	r0, [r7, #12]
 801991c:	60b9      	str	r1, [r7, #8]
 801991e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8019920:	68fb      	ldr	r3, [r7, #12]
 8019922:	3326      	adds	r3, #38	; 0x26
 8019924:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8019926:	23ff      	movs	r3, #255	; 0xff
 8019928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801992c:	2300      	movs	r3, #0
 801992e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019930:	68bb      	ldr	r3, [r7, #8]
 8019932:	681b      	ldr	r3, [r3, #0]
 8019934:	68f9      	ldr	r1, [r7, #12]
 8019936:	4618      	mov	r0, r3
 8019938:	f000 fe0e 	bl	801a558 <ip4_addr_isbroadcast_u32>
 801993c:	4603      	mov	r3, r0
 801993e:	2b00      	cmp	r3, #0
 8019940:	d10c      	bne.n	801995c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019942:	68bb      	ldr	r3, [r7, #8]
 8019944:	681b      	ldr	r3, [r3, #0]
 8019946:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801994a:	2be0      	cmp	r3, #224	; 0xe0
 801994c:	d006      	beq.n	801995c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801994e:	68bb      	ldr	r3, [r7, #8]
 8019950:	2b00      	cmp	r3, #0
 8019952:	d003      	beq.n	801995c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8019954:	68bb      	ldr	r3, [r7, #8]
 8019956:	681b      	ldr	r3, [r3, #0]
 8019958:	2b00      	cmp	r3, #0
 801995a:	d102      	bne.n	8019962 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801995c:	f06f 030f 	mvn.w	r3, #15
 8019960:	e101      	b.n	8019b66 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8019962:	68fa      	ldr	r2, [r7, #12]
 8019964:	2101      	movs	r1, #1
 8019966:	68b8      	ldr	r0, [r7, #8]
 8019968:	f7ff fb60 	bl	801902c <etharp_find_entry>
 801996c:	4603      	mov	r3, r0
 801996e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8019970:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8019974:	2b00      	cmp	r3, #0
 8019976:	da02      	bge.n	801997e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8019978:	8a7b      	ldrh	r3, [r7, #18]
 801997a:	b25b      	sxtb	r3, r3
 801997c:	e0f3      	b.n	8019b66 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801997e:	8a7b      	ldrh	r3, [r7, #18]
 8019980:	2b7e      	cmp	r3, #126	; 0x7e
 8019982:	d906      	bls.n	8019992 <etharp_query+0x7e>
 8019984:	4b7a      	ldr	r3, [pc, #488]	; (8019b70 <etharp_query+0x25c>)
 8019986:	f240 32c1 	movw	r2, #961	; 0x3c1
 801998a:	497a      	ldr	r1, [pc, #488]	; (8019b74 <etharp_query+0x260>)
 801998c:	487a      	ldr	r0, [pc, #488]	; (8019b78 <etharp_query+0x264>)
 801998e:	f001 ff39 	bl	801b804 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8019992:	8a7b      	ldrh	r3, [r7, #18]
 8019994:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8019996:	7c7a      	ldrb	r2, [r7, #17]
 8019998:	4978      	ldr	r1, [pc, #480]	; (8019b7c <etharp_query+0x268>)
 801999a:	4613      	mov	r3, r2
 801999c:	005b      	lsls	r3, r3, #1
 801999e:	4413      	add	r3, r2
 80199a0:	00db      	lsls	r3, r3, #3
 80199a2:	440b      	add	r3, r1
 80199a4:	3314      	adds	r3, #20
 80199a6:	781b      	ldrb	r3, [r3, #0]
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	d115      	bne.n	80199d8 <etharp_query+0xc4>
    is_new_entry = 1;
 80199ac:	2301      	movs	r3, #1
 80199ae:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80199b0:	7c7a      	ldrb	r2, [r7, #17]
 80199b2:	4972      	ldr	r1, [pc, #456]	; (8019b7c <etharp_query+0x268>)
 80199b4:	4613      	mov	r3, r2
 80199b6:	005b      	lsls	r3, r3, #1
 80199b8:	4413      	add	r3, r2
 80199ba:	00db      	lsls	r3, r3, #3
 80199bc:	440b      	add	r3, r1
 80199be:	3314      	adds	r3, #20
 80199c0:	2201      	movs	r2, #1
 80199c2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80199c4:	7c7a      	ldrb	r2, [r7, #17]
 80199c6:	496d      	ldr	r1, [pc, #436]	; (8019b7c <etharp_query+0x268>)
 80199c8:	4613      	mov	r3, r2
 80199ca:	005b      	lsls	r3, r3, #1
 80199cc:	4413      	add	r3, r2
 80199ce:	00db      	lsls	r3, r3, #3
 80199d0:	440b      	add	r3, r1
 80199d2:	3308      	adds	r3, #8
 80199d4:	68fa      	ldr	r2, [r7, #12]
 80199d6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80199d8:	7c7a      	ldrb	r2, [r7, #17]
 80199da:	4968      	ldr	r1, [pc, #416]	; (8019b7c <etharp_query+0x268>)
 80199dc:	4613      	mov	r3, r2
 80199de:	005b      	lsls	r3, r3, #1
 80199e0:	4413      	add	r3, r2
 80199e2:	00db      	lsls	r3, r3, #3
 80199e4:	440b      	add	r3, r1
 80199e6:	3314      	adds	r3, #20
 80199e8:	781b      	ldrb	r3, [r3, #0]
 80199ea:	2b01      	cmp	r3, #1
 80199ec:	d011      	beq.n	8019a12 <etharp_query+0xfe>
 80199ee:	7c7a      	ldrb	r2, [r7, #17]
 80199f0:	4962      	ldr	r1, [pc, #392]	; (8019b7c <etharp_query+0x268>)
 80199f2:	4613      	mov	r3, r2
 80199f4:	005b      	lsls	r3, r3, #1
 80199f6:	4413      	add	r3, r2
 80199f8:	00db      	lsls	r3, r3, #3
 80199fa:	440b      	add	r3, r1
 80199fc:	3314      	adds	r3, #20
 80199fe:	781b      	ldrb	r3, [r3, #0]
 8019a00:	2b01      	cmp	r3, #1
 8019a02:	d806      	bhi.n	8019a12 <etharp_query+0xfe>
 8019a04:	4b5a      	ldr	r3, [pc, #360]	; (8019b70 <etharp_query+0x25c>)
 8019a06:	f240 32cd 	movw	r2, #973	; 0x3cd
 8019a0a:	495d      	ldr	r1, [pc, #372]	; (8019b80 <etharp_query+0x26c>)
 8019a0c:	485a      	ldr	r0, [pc, #360]	; (8019b78 <etharp_query+0x264>)
 8019a0e:	f001 fef9 	bl	801b804 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8019a12:	6a3b      	ldr	r3, [r7, #32]
 8019a14:	2b00      	cmp	r3, #0
 8019a16:	d102      	bne.n	8019a1e <etharp_query+0x10a>
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	d10c      	bne.n	8019a38 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8019a1e:	68b9      	ldr	r1, [r7, #8]
 8019a20:	68f8      	ldr	r0, [r7, #12]
 8019a22:	f000 f963 	bl	8019cec <etharp_request>
 8019a26:	4603      	mov	r3, r0
 8019a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d102      	bne.n	8019a38 <etharp_query+0x124>
      return result;
 8019a32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019a36:	e096      	b.n	8019b66 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	2b00      	cmp	r3, #0
 8019a3c:	d106      	bne.n	8019a4c <etharp_query+0x138>
 8019a3e:	4b4c      	ldr	r3, [pc, #304]	; (8019b70 <etharp_query+0x25c>)
 8019a40:	f240 32e1 	movw	r2, #993	; 0x3e1
 8019a44:	494f      	ldr	r1, [pc, #316]	; (8019b84 <etharp_query+0x270>)
 8019a46:	484c      	ldr	r0, [pc, #304]	; (8019b78 <etharp_query+0x264>)
 8019a48:	f001 fedc 	bl	801b804 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8019a4c:	7c7a      	ldrb	r2, [r7, #17]
 8019a4e:	494b      	ldr	r1, [pc, #300]	; (8019b7c <etharp_query+0x268>)
 8019a50:	4613      	mov	r3, r2
 8019a52:	005b      	lsls	r3, r3, #1
 8019a54:	4413      	add	r3, r2
 8019a56:	00db      	lsls	r3, r3, #3
 8019a58:	440b      	add	r3, r1
 8019a5a:	3314      	adds	r3, #20
 8019a5c:	781b      	ldrb	r3, [r3, #0]
 8019a5e:	2b01      	cmp	r3, #1
 8019a60:	d917      	bls.n	8019a92 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8019a62:	4a49      	ldr	r2, [pc, #292]	; (8019b88 <etharp_query+0x274>)
 8019a64:	7c7b      	ldrb	r3, [r7, #17]
 8019a66:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8019a68:	7c7a      	ldrb	r2, [r7, #17]
 8019a6a:	4613      	mov	r3, r2
 8019a6c:	005b      	lsls	r3, r3, #1
 8019a6e:	4413      	add	r3, r2
 8019a70:	00db      	lsls	r3, r3, #3
 8019a72:	3308      	adds	r3, #8
 8019a74:	4a41      	ldr	r2, [pc, #260]	; (8019b7c <etharp_query+0x268>)
 8019a76:	4413      	add	r3, r2
 8019a78:	3304      	adds	r3, #4
 8019a7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019a7e:	9200      	str	r2, [sp, #0]
 8019a80:	697a      	ldr	r2, [r7, #20]
 8019a82:	6879      	ldr	r1, [r7, #4]
 8019a84:	68f8      	ldr	r0, [r7, #12]
 8019a86:	f001 fc75 	bl	801b374 <ethernet_output>
 8019a8a:	4603      	mov	r3, r0
 8019a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019a90:	e067      	b.n	8019b62 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019a92:	7c7a      	ldrb	r2, [r7, #17]
 8019a94:	4939      	ldr	r1, [pc, #228]	; (8019b7c <etharp_query+0x268>)
 8019a96:	4613      	mov	r3, r2
 8019a98:	005b      	lsls	r3, r3, #1
 8019a9a:	4413      	add	r3, r2
 8019a9c:	00db      	lsls	r3, r3, #3
 8019a9e:	440b      	add	r3, r1
 8019aa0:	3314      	adds	r3, #20
 8019aa2:	781b      	ldrb	r3, [r3, #0]
 8019aa4:	2b01      	cmp	r3, #1
 8019aa6:	d15c      	bne.n	8019b62 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8019aa8:	2300      	movs	r3, #0
 8019aaa:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019ab0:	e01c      	b.n	8019aec <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8019ab2:	69fb      	ldr	r3, [r7, #28]
 8019ab4:	895a      	ldrh	r2, [r3, #10]
 8019ab6:	69fb      	ldr	r3, [r7, #28]
 8019ab8:	891b      	ldrh	r3, [r3, #8]
 8019aba:	429a      	cmp	r2, r3
 8019abc:	d10a      	bne.n	8019ad4 <etharp_query+0x1c0>
 8019abe:	69fb      	ldr	r3, [r7, #28]
 8019ac0:	681b      	ldr	r3, [r3, #0]
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d006      	beq.n	8019ad4 <etharp_query+0x1c0>
 8019ac6:	4b2a      	ldr	r3, [pc, #168]	; (8019b70 <etharp_query+0x25c>)
 8019ac8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8019acc:	492f      	ldr	r1, [pc, #188]	; (8019b8c <etharp_query+0x278>)
 8019ace:	482a      	ldr	r0, [pc, #168]	; (8019b78 <etharp_query+0x264>)
 8019ad0:	f001 fe98 	bl	801b804 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8019ad4:	69fb      	ldr	r3, [r7, #28]
 8019ad6:	7b1b      	ldrb	r3, [r3, #12]
 8019ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	d002      	beq.n	8019ae6 <etharp_query+0x1d2>
        copy_needed = 1;
 8019ae0:	2301      	movs	r3, #1
 8019ae2:	61bb      	str	r3, [r7, #24]
        break;
 8019ae4:	e005      	b.n	8019af2 <etharp_query+0x1de>
      }
      p = p->next;
 8019ae6:	69fb      	ldr	r3, [r7, #28]
 8019ae8:	681b      	ldr	r3, [r3, #0]
 8019aea:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019aec:	69fb      	ldr	r3, [r7, #28]
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	d1df      	bne.n	8019ab2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8019af2:	69bb      	ldr	r3, [r7, #24]
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	d007      	beq.n	8019b08 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8019af8:	687a      	ldr	r2, [r7, #4]
 8019afa:	f44f 7120 	mov.w	r1, #640	; 0x280
 8019afe:	200e      	movs	r0, #14
 8019b00:	f7f8 fd52 	bl	80125a8 <pbuf_clone>
 8019b04:	61f8      	str	r0, [r7, #28]
 8019b06:	e004      	b.n	8019b12 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8019b0c:	69f8      	ldr	r0, [r7, #28]
 8019b0e:	f7f8 fb89 	bl	8012224 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8019b12:	69fb      	ldr	r3, [r7, #28]
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d021      	beq.n	8019b5c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8019b18:	7c7a      	ldrb	r2, [r7, #17]
 8019b1a:	4918      	ldr	r1, [pc, #96]	; (8019b7c <etharp_query+0x268>)
 8019b1c:	4613      	mov	r3, r2
 8019b1e:	005b      	lsls	r3, r3, #1
 8019b20:	4413      	add	r3, r2
 8019b22:	00db      	lsls	r3, r3, #3
 8019b24:	440b      	add	r3, r1
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	2b00      	cmp	r3, #0
 8019b2a:	d00a      	beq.n	8019b42 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8019b2c:	7c7a      	ldrb	r2, [r7, #17]
 8019b2e:	4913      	ldr	r1, [pc, #76]	; (8019b7c <etharp_query+0x268>)
 8019b30:	4613      	mov	r3, r2
 8019b32:	005b      	lsls	r3, r3, #1
 8019b34:	4413      	add	r3, r2
 8019b36:	00db      	lsls	r3, r3, #3
 8019b38:	440b      	add	r3, r1
 8019b3a:	681b      	ldr	r3, [r3, #0]
 8019b3c:	4618      	mov	r0, r3
 8019b3e:	f7f8 facb 	bl	80120d8 <pbuf_free>
      }
      arp_table[i].q = p;
 8019b42:	7c7a      	ldrb	r2, [r7, #17]
 8019b44:	490d      	ldr	r1, [pc, #52]	; (8019b7c <etharp_query+0x268>)
 8019b46:	4613      	mov	r3, r2
 8019b48:	005b      	lsls	r3, r3, #1
 8019b4a:	4413      	add	r3, r2
 8019b4c:	00db      	lsls	r3, r3, #3
 8019b4e:	440b      	add	r3, r1
 8019b50:	69fa      	ldr	r2, [r7, #28]
 8019b52:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8019b54:	2300      	movs	r3, #0
 8019b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019b5a:	e002      	b.n	8019b62 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8019b5c:	23ff      	movs	r3, #255	; 0xff
 8019b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8019b62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8019b66:	4618      	mov	r0, r3
 8019b68:	3728      	adds	r7, #40	; 0x28
 8019b6a:	46bd      	mov	sp, r7
 8019b6c:	bd80      	pop	{r7, pc}
 8019b6e:	bf00      	nop
 8019b70:	0801fd58 	.word	0x0801fd58
 8019b74:	0801ff04 	.word	0x0801ff04
 8019b78:	0801fdd0 	.word	0x0801fdd0
 8019b7c:	200110ec 	.word	0x200110ec
 8019b80:	0801ff14 	.word	0x0801ff14
 8019b84:	0801fef8 	.word	0x0801fef8
 8019b88:	200111dc 	.word	0x200111dc
 8019b8c:	0801ff3c 	.word	0x0801ff3c

08019b90 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8019b90:	b580      	push	{r7, lr}
 8019b92:	b08a      	sub	sp, #40	; 0x28
 8019b94:	af02      	add	r7, sp, #8
 8019b96:	60f8      	str	r0, [r7, #12]
 8019b98:	60b9      	str	r1, [r7, #8]
 8019b9a:	607a      	str	r2, [r7, #4]
 8019b9c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8019b9e:	2300      	movs	r3, #0
 8019ba0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019ba2:	68fb      	ldr	r3, [r7, #12]
 8019ba4:	2b00      	cmp	r3, #0
 8019ba6:	d106      	bne.n	8019bb6 <etharp_raw+0x26>
 8019ba8:	4b3a      	ldr	r3, [pc, #232]	; (8019c94 <etharp_raw+0x104>)
 8019baa:	f240 4257 	movw	r2, #1111	; 0x457
 8019bae:	493a      	ldr	r1, [pc, #232]	; (8019c98 <etharp_raw+0x108>)
 8019bb0:	483a      	ldr	r0, [pc, #232]	; (8019c9c <etharp_raw+0x10c>)
 8019bb2:	f001 fe27 	bl	801b804 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8019bb6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019bba:	211c      	movs	r1, #28
 8019bbc:	200e      	movs	r0, #14
 8019bbe:	f7f7 ff75 	bl	8011aac <pbuf_alloc>
 8019bc2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8019bc4:	69bb      	ldr	r3, [r7, #24]
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	d102      	bne.n	8019bd0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8019bca:	f04f 33ff 	mov.w	r3, #4294967295
 8019bce:	e05d      	b.n	8019c8c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8019bd0:	69bb      	ldr	r3, [r7, #24]
 8019bd2:	895b      	ldrh	r3, [r3, #10]
 8019bd4:	2b1b      	cmp	r3, #27
 8019bd6:	d806      	bhi.n	8019be6 <etharp_raw+0x56>
 8019bd8:	4b2e      	ldr	r3, [pc, #184]	; (8019c94 <etharp_raw+0x104>)
 8019bda:	f240 4262 	movw	r2, #1122	; 0x462
 8019bde:	4930      	ldr	r1, [pc, #192]	; (8019ca0 <etharp_raw+0x110>)
 8019be0:	482e      	ldr	r0, [pc, #184]	; (8019c9c <etharp_raw+0x10c>)
 8019be2:	f001 fe0f 	bl	801b804 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8019be6:	69bb      	ldr	r3, [r7, #24]
 8019be8:	685b      	ldr	r3, [r3, #4]
 8019bea:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8019bec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019bee:	4618      	mov	r0, r3
 8019bf0:	f7f6 fe4e 	bl	8010890 <lwip_htons>
 8019bf4:	4603      	mov	r3, r0
 8019bf6:	461a      	mov	r2, r3
 8019bf8:	697b      	ldr	r3, [r7, #20]
 8019bfa:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8019bfc:	68fb      	ldr	r3, [r7, #12]
 8019bfe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019c02:	2b06      	cmp	r3, #6
 8019c04:	d006      	beq.n	8019c14 <etharp_raw+0x84>
 8019c06:	4b23      	ldr	r3, [pc, #140]	; (8019c94 <etharp_raw+0x104>)
 8019c08:	f240 4269 	movw	r2, #1129	; 0x469
 8019c0c:	4925      	ldr	r1, [pc, #148]	; (8019ca4 <etharp_raw+0x114>)
 8019c0e:	4823      	ldr	r0, [pc, #140]	; (8019c9c <etharp_raw+0x10c>)
 8019c10:	f001 fdf8 	bl	801b804 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8019c14:	697b      	ldr	r3, [r7, #20]
 8019c16:	3308      	adds	r3, #8
 8019c18:	2206      	movs	r2, #6
 8019c1a:	6839      	ldr	r1, [r7, #0]
 8019c1c:	4618      	mov	r0, r3
 8019c1e:	f001 fddb 	bl	801b7d8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8019c22:	697b      	ldr	r3, [r7, #20]
 8019c24:	3312      	adds	r3, #18
 8019c26:	2206      	movs	r2, #6
 8019c28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019c2a:	4618      	mov	r0, r3
 8019c2c:	f001 fdd4 	bl	801b7d8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8019c30:	697b      	ldr	r3, [r7, #20]
 8019c32:	330e      	adds	r3, #14
 8019c34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019c36:	6812      	ldr	r2, [r2, #0]
 8019c38:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8019c3a:	697b      	ldr	r3, [r7, #20]
 8019c3c:	3318      	adds	r3, #24
 8019c3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019c40:	6812      	ldr	r2, [r2, #0]
 8019c42:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8019c44:	697b      	ldr	r3, [r7, #20]
 8019c46:	2200      	movs	r2, #0
 8019c48:	701a      	strb	r2, [r3, #0]
 8019c4a:	2200      	movs	r2, #0
 8019c4c:	f042 0201 	orr.w	r2, r2, #1
 8019c50:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8019c52:	697b      	ldr	r3, [r7, #20]
 8019c54:	2200      	movs	r2, #0
 8019c56:	f042 0208 	orr.w	r2, r2, #8
 8019c5a:	709a      	strb	r2, [r3, #2]
 8019c5c:	2200      	movs	r2, #0
 8019c5e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8019c60:	697b      	ldr	r3, [r7, #20]
 8019c62:	2206      	movs	r2, #6
 8019c64:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8019c66:	697b      	ldr	r3, [r7, #20]
 8019c68:	2204      	movs	r2, #4
 8019c6a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8019c6c:	f640 0306 	movw	r3, #2054	; 0x806
 8019c70:	9300      	str	r3, [sp, #0]
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	68ba      	ldr	r2, [r7, #8]
 8019c76:	69b9      	ldr	r1, [r7, #24]
 8019c78:	68f8      	ldr	r0, [r7, #12]
 8019c7a:	f001 fb7b 	bl	801b374 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8019c7e:	69b8      	ldr	r0, [r7, #24]
 8019c80:	f7f8 fa2a 	bl	80120d8 <pbuf_free>
  p = NULL;
 8019c84:	2300      	movs	r3, #0
 8019c86:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8019c88:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019c8c:	4618      	mov	r0, r3
 8019c8e:	3720      	adds	r7, #32
 8019c90:	46bd      	mov	sp, r7
 8019c92:	bd80      	pop	{r7, pc}
 8019c94:	0801fd58 	.word	0x0801fd58
 8019c98:	0801fea8 	.word	0x0801fea8
 8019c9c:	0801fdd0 	.word	0x0801fdd0
 8019ca0:	0801ff58 	.word	0x0801ff58
 8019ca4:	0801ff8c 	.word	0x0801ff8c

08019ca8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8019ca8:	b580      	push	{r7, lr}
 8019caa:	b088      	sub	sp, #32
 8019cac:	af04      	add	r7, sp, #16
 8019cae:	60f8      	str	r0, [r7, #12]
 8019cb0:	60b9      	str	r1, [r7, #8]
 8019cb2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019cb4:	68fb      	ldr	r3, [r7, #12]
 8019cb6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8019cba:	68fb      	ldr	r3, [r7, #12]
 8019cbc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8019cc0:	68fb      	ldr	r3, [r7, #12]
 8019cc2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019cc4:	2201      	movs	r2, #1
 8019cc6:	9203      	str	r2, [sp, #12]
 8019cc8:	68ba      	ldr	r2, [r7, #8]
 8019cca:	9202      	str	r2, [sp, #8]
 8019ccc:	4a06      	ldr	r2, [pc, #24]	; (8019ce8 <etharp_request_dst+0x40>)
 8019cce:	9201      	str	r2, [sp, #4]
 8019cd0:	9300      	str	r3, [sp, #0]
 8019cd2:	4603      	mov	r3, r0
 8019cd4:	687a      	ldr	r2, [r7, #4]
 8019cd6:	68f8      	ldr	r0, [r7, #12]
 8019cd8:	f7ff ff5a 	bl	8019b90 <etharp_raw>
 8019cdc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8019cde:	4618      	mov	r0, r3
 8019ce0:	3710      	adds	r7, #16
 8019ce2:	46bd      	mov	sp, r7
 8019ce4:	bd80      	pop	{r7, pc}
 8019ce6:	bf00      	nop
 8019ce8:	08020618 	.word	0x08020618

08019cec <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8019cec:	b580      	push	{r7, lr}
 8019cee:	b082      	sub	sp, #8
 8019cf0:	af00      	add	r7, sp, #0
 8019cf2:	6078      	str	r0, [r7, #4]
 8019cf4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8019cf6:	4a05      	ldr	r2, [pc, #20]	; (8019d0c <etharp_request+0x20>)
 8019cf8:	6839      	ldr	r1, [r7, #0]
 8019cfa:	6878      	ldr	r0, [r7, #4]
 8019cfc:	f7ff ffd4 	bl	8019ca8 <etharp_request_dst>
 8019d00:	4603      	mov	r3, r0
}
 8019d02:	4618      	mov	r0, r3
 8019d04:	3708      	adds	r7, #8
 8019d06:	46bd      	mov	sp, r7
 8019d08:	bd80      	pop	{r7, pc}
 8019d0a:	bf00      	nop
 8019d0c:	08020610 	.word	0x08020610

08019d10 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8019d10:	b580      	push	{r7, lr}
 8019d12:	b08e      	sub	sp, #56	; 0x38
 8019d14:	af04      	add	r7, sp, #16
 8019d16:	6078      	str	r0, [r7, #4]
 8019d18:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8019d1a:	4b79      	ldr	r3, [pc, #484]	; (8019f00 <icmp_input+0x1f0>)
 8019d1c:	689b      	ldr	r3, [r3, #8]
 8019d1e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8019d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d22:	781b      	ldrb	r3, [r3, #0]
 8019d24:	f003 030f 	and.w	r3, r3, #15
 8019d28:	b2db      	uxtb	r3, r3
 8019d2a:	009b      	lsls	r3, r3, #2
 8019d2c:	b2db      	uxtb	r3, r3
 8019d2e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8019d30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019d32:	2b13      	cmp	r3, #19
 8019d34:	f240 80cd 	bls.w	8019ed2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	895b      	ldrh	r3, [r3, #10]
 8019d3c:	2b03      	cmp	r3, #3
 8019d3e:	f240 80ca 	bls.w	8019ed6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	685b      	ldr	r3, [r3, #4]
 8019d46:	781b      	ldrb	r3, [r3, #0]
 8019d48:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8019d4c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	f000 80b7 	beq.w	8019ec4 <icmp_input+0x1b4>
 8019d56:	2b08      	cmp	r3, #8
 8019d58:	f040 80b7 	bne.w	8019eca <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8019d5c:	4b69      	ldr	r3, [pc, #420]	; (8019f04 <icmp_input+0x1f4>)
 8019d5e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019d60:	4b67      	ldr	r3, [pc, #412]	; (8019f00 <icmp_input+0x1f0>)
 8019d62:	695b      	ldr	r3, [r3, #20]
 8019d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019d68:	2be0      	cmp	r3, #224	; 0xe0
 8019d6a:	f000 80bb 	beq.w	8019ee4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8019d6e:	4b64      	ldr	r3, [pc, #400]	; (8019f00 <icmp_input+0x1f0>)
 8019d70:	695b      	ldr	r3, [r3, #20]
 8019d72:	4a63      	ldr	r2, [pc, #396]	; (8019f00 <icmp_input+0x1f0>)
 8019d74:	6812      	ldr	r2, [r2, #0]
 8019d76:	4611      	mov	r1, r2
 8019d78:	4618      	mov	r0, r3
 8019d7a:	f000 fbed 	bl	801a558 <ip4_addr_isbroadcast_u32>
 8019d7e:	4603      	mov	r3, r0
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	f040 80b1 	bne.w	8019ee8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	891b      	ldrh	r3, [r3, #8]
 8019d8a:	2b07      	cmp	r3, #7
 8019d8c:	f240 80a5 	bls.w	8019eda <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019d90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019d92:	330e      	adds	r3, #14
 8019d94:	4619      	mov	r1, r3
 8019d96:	6878      	ldr	r0, [r7, #4]
 8019d98:	f7f8 f8d6 	bl	8011f48 <pbuf_add_header>
 8019d9c:	4603      	mov	r3, r0
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d04b      	beq.n	8019e3a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8019da2:	687b      	ldr	r3, [r7, #4]
 8019da4:	891a      	ldrh	r2, [r3, #8]
 8019da6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019da8:	4413      	add	r3, r2
 8019daa:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8019dac:	687b      	ldr	r3, [r7, #4]
 8019dae:	891b      	ldrh	r3, [r3, #8]
 8019db0:	8b7a      	ldrh	r2, [r7, #26]
 8019db2:	429a      	cmp	r2, r3
 8019db4:	f0c0 809a 	bcc.w	8019eec <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8019db8:	8b7b      	ldrh	r3, [r7, #26]
 8019dba:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019dbe:	4619      	mov	r1, r3
 8019dc0:	200e      	movs	r0, #14
 8019dc2:	f7f7 fe73 	bl	8011aac <pbuf_alloc>
 8019dc6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8019dc8:	697b      	ldr	r3, [r7, #20]
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	f000 8090 	beq.w	8019ef0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8019dd0:	697b      	ldr	r3, [r7, #20]
 8019dd2:	895b      	ldrh	r3, [r3, #10]
 8019dd4:	461a      	mov	r2, r3
 8019dd6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019dd8:	3308      	adds	r3, #8
 8019dda:	429a      	cmp	r2, r3
 8019ddc:	d203      	bcs.n	8019de6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8019dde:	6978      	ldr	r0, [r7, #20]
 8019de0:	f7f8 f97a 	bl	80120d8 <pbuf_free>
          goto icmperr;
 8019de4:	e085      	b.n	8019ef2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8019de6:	697b      	ldr	r3, [r7, #20]
 8019de8:	685b      	ldr	r3, [r3, #4]
 8019dea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019dec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019dee:	4618      	mov	r0, r3
 8019df0:	f001 fcf2 	bl	801b7d8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019df4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019df6:	4619      	mov	r1, r3
 8019df8:	6978      	ldr	r0, [r7, #20]
 8019dfa:	f7f8 f8b5 	bl	8011f68 <pbuf_remove_header>
 8019dfe:	4603      	mov	r3, r0
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	d009      	beq.n	8019e18 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019e04:	4b40      	ldr	r3, [pc, #256]	; (8019f08 <icmp_input+0x1f8>)
 8019e06:	22b6      	movs	r2, #182	; 0xb6
 8019e08:	4940      	ldr	r1, [pc, #256]	; (8019f0c <icmp_input+0x1fc>)
 8019e0a:	4841      	ldr	r0, [pc, #260]	; (8019f10 <icmp_input+0x200>)
 8019e0c:	f001 fcfa 	bl	801b804 <iprintf>
          pbuf_free(r);
 8019e10:	6978      	ldr	r0, [r7, #20]
 8019e12:	f7f8 f961 	bl	80120d8 <pbuf_free>
          goto icmperr;
 8019e16:	e06c      	b.n	8019ef2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019e18:	6879      	ldr	r1, [r7, #4]
 8019e1a:	6978      	ldr	r0, [r7, #20]
 8019e1c:	f7f8 fa80 	bl	8012320 <pbuf_copy>
 8019e20:	4603      	mov	r3, r0
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	d003      	beq.n	8019e2e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8019e26:	6978      	ldr	r0, [r7, #20]
 8019e28:	f7f8 f956 	bl	80120d8 <pbuf_free>
          goto icmperr;
 8019e2c:	e061      	b.n	8019ef2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8019e2e:	6878      	ldr	r0, [r7, #4]
 8019e30:	f7f8 f952 	bl	80120d8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019e34:	697b      	ldr	r3, [r7, #20]
 8019e36:	607b      	str	r3, [r7, #4]
 8019e38:	e00f      	b.n	8019e5a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019e3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019e3c:	330e      	adds	r3, #14
 8019e3e:	4619      	mov	r1, r3
 8019e40:	6878      	ldr	r0, [r7, #4]
 8019e42:	f7f8 f891 	bl	8011f68 <pbuf_remove_header>
 8019e46:	4603      	mov	r3, r0
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	d006      	beq.n	8019e5a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8019e4c:	4b2e      	ldr	r3, [pc, #184]	; (8019f08 <icmp_input+0x1f8>)
 8019e4e:	22c7      	movs	r2, #199	; 0xc7
 8019e50:	4930      	ldr	r1, [pc, #192]	; (8019f14 <icmp_input+0x204>)
 8019e52:	482f      	ldr	r0, [pc, #188]	; (8019f10 <icmp_input+0x200>)
 8019e54:	f001 fcd6 	bl	801b804 <iprintf>
          goto icmperr;
 8019e58:	e04b      	b.n	8019ef2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	685b      	ldr	r3, [r3, #4]
 8019e5e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8019e60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019e62:	4619      	mov	r1, r3
 8019e64:	6878      	ldr	r0, [r7, #4]
 8019e66:	f7f8 f86f 	bl	8011f48 <pbuf_add_header>
 8019e6a:	4603      	mov	r3, r0
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	d12b      	bne.n	8019ec8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	685b      	ldr	r3, [r3, #4]
 8019e74:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8019e76:	69fb      	ldr	r3, [r7, #28]
 8019e78:	681a      	ldr	r2, [r3, #0]
 8019e7a:	68fb      	ldr	r3, [r7, #12]
 8019e7c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8019e7e:	4b20      	ldr	r3, [pc, #128]	; (8019f00 <icmp_input+0x1f0>)
 8019e80:	691a      	ldr	r2, [r3, #16]
 8019e82:	68fb      	ldr	r3, [r7, #12]
 8019e84:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8019e86:	693b      	ldr	r3, [r7, #16]
 8019e88:	2200      	movs	r2, #0
 8019e8a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8019e8c:	693b      	ldr	r3, [r7, #16]
 8019e8e:	2200      	movs	r2, #0
 8019e90:	709a      	strb	r2, [r3, #2]
 8019e92:	2200      	movs	r2, #0
 8019e94:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8019e96:	68fb      	ldr	r3, [r7, #12]
 8019e98:	22ff      	movs	r2, #255	; 0xff
 8019e9a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8019e9c:	68fb      	ldr	r3, [r7, #12]
 8019e9e:	2200      	movs	r2, #0
 8019ea0:	729a      	strb	r2, [r3, #10]
 8019ea2:	2200      	movs	r2, #0
 8019ea4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019ea6:	683b      	ldr	r3, [r7, #0]
 8019ea8:	9302      	str	r3, [sp, #8]
 8019eaa:	2301      	movs	r3, #1
 8019eac:	9301      	str	r3, [sp, #4]
 8019eae:	2300      	movs	r3, #0
 8019eb0:	9300      	str	r3, [sp, #0]
 8019eb2:	23ff      	movs	r3, #255	; 0xff
 8019eb4:	2200      	movs	r2, #0
 8019eb6:	69f9      	ldr	r1, [r7, #28]
 8019eb8:	6878      	ldr	r0, [r7, #4]
 8019eba:	f000 fa75 	bl	801a3a8 <ip4_output_if>
 8019ebe:	4603      	mov	r3, r0
 8019ec0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8019ec2:	e001      	b.n	8019ec8 <icmp_input+0x1b8>
      break;
 8019ec4:	bf00      	nop
 8019ec6:	e000      	b.n	8019eca <icmp_input+0x1ba>
      break;
 8019ec8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8019eca:	6878      	ldr	r0, [r7, #4]
 8019ecc:	f7f8 f904 	bl	80120d8 <pbuf_free>
  return;
 8019ed0:	e013      	b.n	8019efa <icmp_input+0x1ea>
    goto lenerr;
 8019ed2:	bf00      	nop
 8019ed4:	e002      	b.n	8019edc <icmp_input+0x1cc>
    goto lenerr;
 8019ed6:	bf00      	nop
 8019ed8:	e000      	b.n	8019edc <icmp_input+0x1cc>
        goto lenerr;
 8019eda:	bf00      	nop
lenerr:
  pbuf_free(p);
 8019edc:	6878      	ldr	r0, [r7, #4]
 8019ede:	f7f8 f8fb 	bl	80120d8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019ee2:	e00a      	b.n	8019efa <icmp_input+0x1ea>
        goto icmperr;
 8019ee4:	bf00      	nop
 8019ee6:	e004      	b.n	8019ef2 <icmp_input+0x1e2>
        goto icmperr;
 8019ee8:	bf00      	nop
 8019eea:	e002      	b.n	8019ef2 <icmp_input+0x1e2>
          goto icmperr;
 8019eec:	bf00      	nop
 8019eee:	e000      	b.n	8019ef2 <icmp_input+0x1e2>
          goto icmperr;
 8019ef0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8019ef2:	6878      	ldr	r0, [r7, #4]
 8019ef4:	f7f8 f8f0 	bl	80120d8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019ef8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8019efa:	3728      	adds	r7, #40	; 0x28
 8019efc:	46bd      	mov	sp, r7
 8019efe:	bd80      	pop	{r7, pc}
 8019f00:	2000d938 	.word	0x2000d938
 8019f04:	2000d94c 	.word	0x2000d94c
 8019f08:	0801ffd0 	.word	0x0801ffd0
 8019f0c:	08020008 	.word	0x08020008
 8019f10:	08020040 	.word	0x08020040
 8019f14:	08020068 	.word	0x08020068

08019f18 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019f18:	b580      	push	{r7, lr}
 8019f1a:	b082      	sub	sp, #8
 8019f1c:	af00      	add	r7, sp, #0
 8019f1e:	6078      	str	r0, [r7, #4]
 8019f20:	460b      	mov	r3, r1
 8019f22:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8019f24:	78fb      	ldrb	r3, [r7, #3]
 8019f26:	461a      	mov	r2, r3
 8019f28:	2103      	movs	r1, #3
 8019f2a:	6878      	ldr	r0, [r7, #4]
 8019f2c:	f000 f814 	bl	8019f58 <icmp_send_response>
}
 8019f30:	bf00      	nop
 8019f32:	3708      	adds	r7, #8
 8019f34:	46bd      	mov	sp, r7
 8019f36:	bd80      	pop	{r7, pc}

08019f38 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019f38:	b580      	push	{r7, lr}
 8019f3a:	b082      	sub	sp, #8
 8019f3c:	af00      	add	r7, sp, #0
 8019f3e:	6078      	str	r0, [r7, #4]
 8019f40:	460b      	mov	r3, r1
 8019f42:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8019f44:	78fb      	ldrb	r3, [r7, #3]
 8019f46:	461a      	mov	r2, r3
 8019f48:	210b      	movs	r1, #11
 8019f4a:	6878      	ldr	r0, [r7, #4]
 8019f4c:	f000 f804 	bl	8019f58 <icmp_send_response>
}
 8019f50:	bf00      	nop
 8019f52:	3708      	adds	r7, #8
 8019f54:	46bd      	mov	sp, r7
 8019f56:	bd80      	pop	{r7, pc}

08019f58 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8019f58:	b580      	push	{r7, lr}
 8019f5a:	b08c      	sub	sp, #48	; 0x30
 8019f5c:	af04      	add	r7, sp, #16
 8019f5e:	6078      	str	r0, [r7, #4]
 8019f60:	460b      	mov	r3, r1
 8019f62:	70fb      	strb	r3, [r7, #3]
 8019f64:	4613      	mov	r3, r2
 8019f66:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019f68:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019f6c:	2124      	movs	r1, #36	; 0x24
 8019f6e:	2022      	movs	r0, #34	; 0x22
 8019f70:	f7f7 fd9c 	bl	8011aac <pbuf_alloc>
 8019f74:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8019f76:	69fb      	ldr	r3, [r7, #28]
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d04c      	beq.n	801a016 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8019f7c:	69fb      	ldr	r3, [r7, #28]
 8019f7e:	895b      	ldrh	r3, [r3, #10]
 8019f80:	2b23      	cmp	r3, #35	; 0x23
 8019f82:	d806      	bhi.n	8019f92 <icmp_send_response+0x3a>
 8019f84:	4b26      	ldr	r3, [pc, #152]	; (801a020 <icmp_send_response+0xc8>)
 8019f86:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8019f8a:	4926      	ldr	r1, [pc, #152]	; (801a024 <icmp_send_response+0xcc>)
 8019f8c:	4826      	ldr	r0, [pc, #152]	; (801a028 <icmp_send_response+0xd0>)
 8019f8e:	f001 fc39 	bl	801b804 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	685b      	ldr	r3, [r3, #4]
 8019f96:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019f98:	69fb      	ldr	r3, [r7, #28]
 8019f9a:	685b      	ldr	r3, [r3, #4]
 8019f9c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8019f9e:	697b      	ldr	r3, [r7, #20]
 8019fa0:	78fa      	ldrb	r2, [r7, #3]
 8019fa2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8019fa4:	697b      	ldr	r3, [r7, #20]
 8019fa6:	78ba      	ldrb	r2, [r7, #2]
 8019fa8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8019faa:	697b      	ldr	r3, [r7, #20]
 8019fac:	2200      	movs	r2, #0
 8019fae:	711a      	strb	r2, [r3, #4]
 8019fb0:	2200      	movs	r2, #0
 8019fb2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8019fb4:	697b      	ldr	r3, [r7, #20]
 8019fb6:	2200      	movs	r2, #0
 8019fb8:	719a      	strb	r2, [r3, #6]
 8019fba:	2200      	movs	r2, #0
 8019fbc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8019fbe:	69fb      	ldr	r3, [r7, #28]
 8019fc0:	685b      	ldr	r3, [r3, #4]
 8019fc2:	f103 0008 	add.w	r0, r3, #8
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	685b      	ldr	r3, [r3, #4]
 8019fca:	221c      	movs	r2, #28
 8019fcc:	4619      	mov	r1, r3
 8019fce:	f001 fc03 	bl	801b7d8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8019fd2:	69bb      	ldr	r3, [r7, #24]
 8019fd4:	68db      	ldr	r3, [r3, #12]
 8019fd6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8019fd8:	f107 030c 	add.w	r3, r7, #12
 8019fdc:	4618      	mov	r0, r3
 8019fde:	f000 f825 	bl	801a02c <ip4_route>
 8019fe2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8019fe4:	693b      	ldr	r3, [r7, #16]
 8019fe6:	2b00      	cmp	r3, #0
 8019fe8:	d011      	beq.n	801a00e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8019fea:	697b      	ldr	r3, [r7, #20]
 8019fec:	2200      	movs	r2, #0
 8019fee:	709a      	strb	r2, [r3, #2]
 8019ff0:	2200      	movs	r2, #0
 8019ff2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8019ff4:	f107 020c 	add.w	r2, r7, #12
 8019ff8:	693b      	ldr	r3, [r7, #16]
 8019ffa:	9302      	str	r3, [sp, #8]
 8019ffc:	2301      	movs	r3, #1
 8019ffe:	9301      	str	r3, [sp, #4]
 801a000:	2300      	movs	r3, #0
 801a002:	9300      	str	r3, [sp, #0]
 801a004:	23ff      	movs	r3, #255	; 0xff
 801a006:	2100      	movs	r1, #0
 801a008:	69f8      	ldr	r0, [r7, #28]
 801a00a:	f000 f9cd 	bl	801a3a8 <ip4_output_if>
  }
  pbuf_free(q);
 801a00e:	69f8      	ldr	r0, [r7, #28]
 801a010:	f7f8 f862 	bl	80120d8 <pbuf_free>
 801a014:	e000      	b.n	801a018 <icmp_send_response+0xc0>
    return;
 801a016:	bf00      	nop
}
 801a018:	3720      	adds	r7, #32
 801a01a:	46bd      	mov	sp, r7
 801a01c:	bd80      	pop	{r7, pc}
 801a01e:	bf00      	nop
 801a020:	0801ffd0 	.word	0x0801ffd0
 801a024:	0802009c 	.word	0x0802009c
 801a028:	08020040 	.word	0x08020040

0801a02c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801a02c:	b480      	push	{r7}
 801a02e:	b085      	sub	sp, #20
 801a030:	af00      	add	r7, sp, #0
 801a032:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801a034:	4b33      	ldr	r3, [pc, #204]	; (801a104 <ip4_route+0xd8>)
 801a036:	681b      	ldr	r3, [r3, #0]
 801a038:	60fb      	str	r3, [r7, #12]
 801a03a:	e036      	b.n	801a0aa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a03c:	68fb      	ldr	r3, [r7, #12]
 801a03e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a042:	f003 0301 	and.w	r3, r3, #1
 801a046:	b2db      	uxtb	r3, r3
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d02b      	beq.n	801a0a4 <ip4_route+0x78>
 801a04c:	68fb      	ldr	r3, [r7, #12]
 801a04e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a052:	089b      	lsrs	r3, r3, #2
 801a054:	f003 0301 	and.w	r3, r3, #1
 801a058:	b2db      	uxtb	r3, r3
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	d022      	beq.n	801a0a4 <ip4_route+0x78>
 801a05e:	68fb      	ldr	r3, [r7, #12]
 801a060:	3304      	adds	r3, #4
 801a062:	681b      	ldr	r3, [r3, #0]
 801a064:	2b00      	cmp	r3, #0
 801a066:	d01d      	beq.n	801a0a4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	681a      	ldr	r2, [r3, #0]
 801a06c:	68fb      	ldr	r3, [r7, #12]
 801a06e:	3304      	adds	r3, #4
 801a070:	681b      	ldr	r3, [r3, #0]
 801a072:	405a      	eors	r2, r3
 801a074:	68fb      	ldr	r3, [r7, #12]
 801a076:	3308      	adds	r3, #8
 801a078:	681b      	ldr	r3, [r3, #0]
 801a07a:	4013      	ands	r3, r2
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	d101      	bne.n	801a084 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801a080:	68fb      	ldr	r3, [r7, #12]
 801a082:	e038      	b.n	801a0f6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801a084:	68fb      	ldr	r3, [r7, #12]
 801a086:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a08a:	f003 0302 	and.w	r3, r3, #2
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d108      	bne.n	801a0a4 <ip4_route+0x78>
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	681a      	ldr	r2, [r3, #0]
 801a096:	68fb      	ldr	r3, [r7, #12]
 801a098:	330c      	adds	r3, #12
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	429a      	cmp	r2, r3
 801a09e:	d101      	bne.n	801a0a4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801a0a0:	68fb      	ldr	r3, [r7, #12]
 801a0a2:	e028      	b.n	801a0f6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801a0a4:	68fb      	ldr	r3, [r7, #12]
 801a0a6:	681b      	ldr	r3, [r3, #0]
 801a0a8:	60fb      	str	r3, [r7, #12]
 801a0aa:	68fb      	ldr	r3, [r7, #12]
 801a0ac:	2b00      	cmp	r3, #0
 801a0ae:	d1c5      	bne.n	801a03c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a0b0:	4b15      	ldr	r3, [pc, #84]	; (801a108 <ip4_route+0xdc>)
 801a0b2:	681b      	ldr	r3, [r3, #0]
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d01a      	beq.n	801a0ee <ip4_route+0xc2>
 801a0b8:	4b13      	ldr	r3, [pc, #76]	; (801a108 <ip4_route+0xdc>)
 801a0ba:	681b      	ldr	r3, [r3, #0]
 801a0bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a0c0:	f003 0301 	and.w	r3, r3, #1
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	d012      	beq.n	801a0ee <ip4_route+0xc2>
 801a0c8:	4b0f      	ldr	r3, [pc, #60]	; (801a108 <ip4_route+0xdc>)
 801a0ca:	681b      	ldr	r3, [r3, #0]
 801a0cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a0d0:	f003 0304 	and.w	r3, r3, #4
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	d00a      	beq.n	801a0ee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801a0d8:	4b0b      	ldr	r3, [pc, #44]	; (801a108 <ip4_route+0xdc>)
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	3304      	adds	r3, #4
 801a0de:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	d004      	beq.n	801a0ee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	681b      	ldr	r3, [r3, #0]
 801a0e8:	b2db      	uxtb	r3, r3
 801a0ea:	2b7f      	cmp	r3, #127	; 0x7f
 801a0ec:	d101      	bne.n	801a0f2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801a0ee:	2300      	movs	r3, #0
 801a0f0:	e001      	b.n	801a0f6 <ip4_route+0xca>
  }

  return netif_default;
 801a0f2:	4b05      	ldr	r3, [pc, #20]	; (801a108 <ip4_route+0xdc>)
 801a0f4:	681b      	ldr	r3, [r3, #0]
}
 801a0f6:	4618      	mov	r0, r3
 801a0f8:	3714      	adds	r7, #20
 801a0fa:	46bd      	mov	sp, r7
 801a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a100:	4770      	bx	lr
 801a102:	bf00      	nop
 801a104:	20011080 	.word	0x20011080
 801a108:	20011084 	.word	0x20011084

0801a10c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801a10c:	b580      	push	{r7, lr}
 801a10e:	b082      	sub	sp, #8
 801a110:	af00      	add	r7, sp, #0
 801a112:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a11a:	f003 0301 	and.w	r3, r3, #1
 801a11e:	b2db      	uxtb	r3, r3
 801a120:	2b00      	cmp	r3, #0
 801a122:	d016      	beq.n	801a152 <ip4_input_accept+0x46>
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	3304      	adds	r3, #4
 801a128:	681b      	ldr	r3, [r3, #0]
 801a12a:	2b00      	cmp	r3, #0
 801a12c:	d011      	beq.n	801a152 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a12e:	4b0b      	ldr	r3, [pc, #44]	; (801a15c <ip4_input_accept+0x50>)
 801a130:	695a      	ldr	r2, [r3, #20]
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	3304      	adds	r3, #4
 801a136:	681b      	ldr	r3, [r3, #0]
 801a138:	429a      	cmp	r2, r3
 801a13a:	d008      	beq.n	801a14e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801a13c:	4b07      	ldr	r3, [pc, #28]	; (801a15c <ip4_input_accept+0x50>)
 801a13e:	695b      	ldr	r3, [r3, #20]
 801a140:	6879      	ldr	r1, [r7, #4]
 801a142:	4618      	mov	r0, r3
 801a144:	f000 fa08 	bl	801a558 <ip4_addr_isbroadcast_u32>
 801a148:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a14a:	2b00      	cmp	r3, #0
 801a14c:	d001      	beq.n	801a152 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801a14e:	2301      	movs	r3, #1
 801a150:	e000      	b.n	801a154 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801a152:	2300      	movs	r3, #0
}
 801a154:	4618      	mov	r0, r3
 801a156:	3708      	adds	r7, #8
 801a158:	46bd      	mov	sp, r7
 801a15a:	bd80      	pop	{r7, pc}
 801a15c:	2000d938 	.word	0x2000d938

0801a160 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801a160:	b580      	push	{r7, lr}
 801a162:	b086      	sub	sp, #24
 801a164:	af00      	add	r7, sp, #0
 801a166:	6078      	str	r0, [r7, #4]
 801a168:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	685b      	ldr	r3, [r3, #4]
 801a16e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801a170:	697b      	ldr	r3, [r7, #20]
 801a172:	781b      	ldrb	r3, [r3, #0]
 801a174:	091b      	lsrs	r3, r3, #4
 801a176:	b2db      	uxtb	r3, r3
 801a178:	2b04      	cmp	r3, #4
 801a17a:	d004      	beq.n	801a186 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801a17c:	6878      	ldr	r0, [r7, #4]
 801a17e:	f7f7 ffab 	bl	80120d8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801a182:	2300      	movs	r3, #0
 801a184:	e107      	b.n	801a396 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801a186:	697b      	ldr	r3, [r7, #20]
 801a188:	781b      	ldrb	r3, [r3, #0]
 801a18a:	f003 030f 	and.w	r3, r3, #15
 801a18e:	b2db      	uxtb	r3, r3
 801a190:	009b      	lsls	r3, r3, #2
 801a192:	b2db      	uxtb	r3, r3
 801a194:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801a196:	697b      	ldr	r3, [r7, #20]
 801a198:	885b      	ldrh	r3, [r3, #2]
 801a19a:	b29b      	uxth	r3, r3
 801a19c:	4618      	mov	r0, r3
 801a19e:	f7f6 fb77 	bl	8010890 <lwip_htons>
 801a1a2:	4603      	mov	r3, r0
 801a1a4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	891b      	ldrh	r3, [r3, #8]
 801a1aa:	89ba      	ldrh	r2, [r7, #12]
 801a1ac:	429a      	cmp	r2, r3
 801a1ae:	d204      	bcs.n	801a1ba <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801a1b0:	89bb      	ldrh	r3, [r7, #12]
 801a1b2:	4619      	mov	r1, r3
 801a1b4:	6878      	ldr	r0, [r7, #4]
 801a1b6:	f7f7 fdd7 	bl	8011d68 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801a1ba:	687b      	ldr	r3, [r7, #4]
 801a1bc:	895b      	ldrh	r3, [r3, #10]
 801a1be:	89fa      	ldrh	r2, [r7, #14]
 801a1c0:	429a      	cmp	r2, r3
 801a1c2:	d807      	bhi.n	801a1d4 <ip4_input+0x74>
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	891b      	ldrh	r3, [r3, #8]
 801a1c8:	89ba      	ldrh	r2, [r7, #12]
 801a1ca:	429a      	cmp	r2, r3
 801a1cc:	d802      	bhi.n	801a1d4 <ip4_input+0x74>
 801a1ce:	89fb      	ldrh	r3, [r7, #14]
 801a1d0:	2b13      	cmp	r3, #19
 801a1d2:	d804      	bhi.n	801a1de <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801a1d4:	6878      	ldr	r0, [r7, #4]
 801a1d6:	f7f7 ff7f 	bl	80120d8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801a1da:	2300      	movs	r3, #0
 801a1dc:	e0db      	b.n	801a396 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801a1de:	697b      	ldr	r3, [r7, #20]
 801a1e0:	691b      	ldr	r3, [r3, #16]
 801a1e2:	4a6f      	ldr	r2, [pc, #444]	; (801a3a0 <ip4_input+0x240>)
 801a1e4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801a1e6:	697b      	ldr	r3, [r7, #20]
 801a1e8:	68db      	ldr	r3, [r3, #12]
 801a1ea:	4a6d      	ldr	r2, [pc, #436]	; (801a3a0 <ip4_input+0x240>)
 801a1ec:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a1ee:	4b6c      	ldr	r3, [pc, #432]	; (801a3a0 <ip4_input+0x240>)
 801a1f0:	695b      	ldr	r3, [r3, #20]
 801a1f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a1f6:	2be0      	cmp	r3, #224	; 0xe0
 801a1f8:	d112      	bne.n	801a220 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801a1fa:	683b      	ldr	r3, [r7, #0]
 801a1fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a200:	f003 0301 	and.w	r3, r3, #1
 801a204:	b2db      	uxtb	r3, r3
 801a206:	2b00      	cmp	r3, #0
 801a208:	d007      	beq.n	801a21a <ip4_input+0xba>
 801a20a:	683b      	ldr	r3, [r7, #0]
 801a20c:	3304      	adds	r3, #4
 801a20e:	681b      	ldr	r3, [r3, #0]
 801a210:	2b00      	cmp	r3, #0
 801a212:	d002      	beq.n	801a21a <ip4_input+0xba>
      netif = inp;
 801a214:	683b      	ldr	r3, [r7, #0]
 801a216:	613b      	str	r3, [r7, #16]
 801a218:	e02a      	b.n	801a270 <ip4_input+0x110>
    } else {
      netif = NULL;
 801a21a:	2300      	movs	r3, #0
 801a21c:	613b      	str	r3, [r7, #16]
 801a21e:	e027      	b.n	801a270 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801a220:	6838      	ldr	r0, [r7, #0]
 801a222:	f7ff ff73 	bl	801a10c <ip4_input_accept>
 801a226:	4603      	mov	r3, r0
 801a228:	2b00      	cmp	r3, #0
 801a22a:	d002      	beq.n	801a232 <ip4_input+0xd2>
      netif = inp;
 801a22c:	683b      	ldr	r3, [r7, #0]
 801a22e:	613b      	str	r3, [r7, #16]
 801a230:	e01e      	b.n	801a270 <ip4_input+0x110>
    } else {
      netif = NULL;
 801a232:	2300      	movs	r3, #0
 801a234:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801a236:	4b5a      	ldr	r3, [pc, #360]	; (801a3a0 <ip4_input+0x240>)
 801a238:	695b      	ldr	r3, [r3, #20]
 801a23a:	b2db      	uxtb	r3, r3
 801a23c:	2b7f      	cmp	r3, #127	; 0x7f
 801a23e:	d017      	beq.n	801a270 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801a240:	4b58      	ldr	r3, [pc, #352]	; (801a3a4 <ip4_input+0x244>)
 801a242:	681b      	ldr	r3, [r3, #0]
 801a244:	613b      	str	r3, [r7, #16]
 801a246:	e00e      	b.n	801a266 <ip4_input+0x106>
          if (netif == inp) {
 801a248:	693a      	ldr	r2, [r7, #16]
 801a24a:	683b      	ldr	r3, [r7, #0]
 801a24c:	429a      	cmp	r2, r3
 801a24e:	d006      	beq.n	801a25e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801a250:	6938      	ldr	r0, [r7, #16]
 801a252:	f7ff ff5b 	bl	801a10c <ip4_input_accept>
 801a256:	4603      	mov	r3, r0
 801a258:	2b00      	cmp	r3, #0
 801a25a:	d108      	bne.n	801a26e <ip4_input+0x10e>
 801a25c:	e000      	b.n	801a260 <ip4_input+0x100>
            continue;
 801a25e:	bf00      	nop
        NETIF_FOREACH(netif) {
 801a260:	693b      	ldr	r3, [r7, #16]
 801a262:	681b      	ldr	r3, [r3, #0]
 801a264:	613b      	str	r3, [r7, #16]
 801a266:	693b      	ldr	r3, [r7, #16]
 801a268:	2b00      	cmp	r3, #0
 801a26a:	d1ed      	bne.n	801a248 <ip4_input+0xe8>
 801a26c:	e000      	b.n	801a270 <ip4_input+0x110>
            break;
 801a26e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a270:	4b4b      	ldr	r3, [pc, #300]	; (801a3a0 <ip4_input+0x240>)
 801a272:	691b      	ldr	r3, [r3, #16]
 801a274:	6839      	ldr	r1, [r7, #0]
 801a276:	4618      	mov	r0, r3
 801a278:	f000 f96e 	bl	801a558 <ip4_addr_isbroadcast_u32>
 801a27c:	4603      	mov	r3, r0
 801a27e:	2b00      	cmp	r3, #0
 801a280:	d105      	bne.n	801a28e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801a282:	4b47      	ldr	r3, [pc, #284]	; (801a3a0 <ip4_input+0x240>)
 801a284:	691b      	ldr	r3, [r3, #16]
 801a286:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a28a:	2be0      	cmp	r3, #224	; 0xe0
 801a28c:	d104      	bne.n	801a298 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801a28e:	6878      	ldr	r0, [r7, #4]
 801a290:	f7f7 ff22 	bl	80120d8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801a294:	2300      	movs	r3, #0
 801a296:	e07e      	b.n	801a396 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801a298:	693b      	ldr	r3, [r7, #16]
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d104      	bne.n	801a2a8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801a29e:	6878      	ldr	r0, [r7, #4]
 801a2a0:	f7f7 ff1a 	bl	80120d8 <pbuf_free>
    return ERR_OK;
 801a2a4:	2300      	movs	r3, #0
 801a2a6:	e076      	b.n	801a396 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801a2a8:	697b      	ldr	r3, [r7, #20]
 801a2aa:	88db      	ldrh	r3, [r3, #6]
 801a2ac:	b29b      	uxth	r3, r3
 801a2ae:	461a      	mov	r2, r3
 801a2b0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801a2b4:	4013      	ands	r3, r2
 801a2b6:	2b00      	cmp	r3, #0
 801a2b8:	d00b      	beq.n	801a2d2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801a2ba:	6878      	ldr	r0, [r7, #4]
 801a2bc:	f000 fc92 	bl	801abe4 <ip4_reass>
 801a2c0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801a2c2:	687b      	ldr	r3, [r7, #4]
 801a2c4:	2b00      	cmp	r3, #0
 801a2c6:	d101      	bne.n	801a2cc <ip4_input+0x16c>
      return ERR_OK;
 801a2c8:	2300      	movs	r3, #0
 801a2ca:	e064      	b.n	801a396 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	685b      	ldr	r3, [r3, #4]
 801a2d0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801a2d2:	4a33      	ldr	r2, [pc, #204]	; (801a3a0 <ip4_input+0x240>)
 801a2d4:	693b      	ldr	r3, [r7, #16]
 801a2d6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801a2d8:	4a31      	ldr	r2, [pc, #196]	; (801a3a0 <ip4_input+0x240>)
 801a2da:	683b      	ldr	r3, [r7, #0]
 801a2dc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801a2de:	4a30      	ldr	r2, [pc, #192]	; (801a3a0 <ip4_input+0x240>)
 801a2e0:	697b      	ldr	r3, [r7, #20]
 801a2e2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801a2e4:	697b      	ldr	r3, [r7, #20]
 801a2e6:	781b      	ldrb	r3, [r3, #0]
 801a2e8:	f003 030f 	and.w	r3, r3, #15
 801a2ec:	b2db      	uxtb	r3, r3
 801a2ee:	009b      	lsls	r3, r3, #2
 801a2f0:	b2db      	uxtb	r3, r3
 801a2f2:	b29a      	uxth	r2, r3
 801a2f4:	4b2a      	ldr	r3, [pc, #168]	; (801a3a0 <ip4_input+0x240>)
 801a2f6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801a2f8:	89fb      	ldrh	r3, [r7, #14]
 801a2fa:	4619      	mov	r1, r3
 801a2fc:	6878      	ldr	r0, [r7, #4]
 801a2fe:	f7f7 fe33 	bl	8011f68 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801a302:	697b      	ldr	r3, [r7, #20]
 801a304:	7a5b      	ldrb	r3, [r3, #9]
 801a306:	2b11      	cmp	r3, #17
 801a308:	d006      	beq.n	801a318 <ip4_input+0x1b8>
 801a30a:	2b11      	cmp	r3, #17
 801a30c:	dc13      	bgt.n	801a336 <ip4_input+0x1d6>
 801a30e:	2b01      	cmp	r3, #1
 801a310:	d00c      	beq.n	801a32c <ip4_input+0x1cc>
 801a312:	2b06      	cmp	r3, #6
 801a314:	d005      	beq.n	801a322 <ip4_input+0x1c2>
 801a316:	e00e      	b.n	801a336 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801a318:	6839      	ldr	r1, [r7, #0]
 801a31a:	6878      	ldr	r0, [r7, #4]
 801a31c:	f7fe fb5a 	bl	80189d4 <udp_input>
        break;
 801a320:	e026      	b.n	801a370 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801a322:	6839      	ldr	r1, [r7, #0]
 801a324:	6878      	ldr	r0, [r7, #4]
 801a326:	f7f9 ff13 	bl	8014150 <tcp_input>
        break;
 801a32a:	e021      	b.n	801a370 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801a32c:	6839      	ldr	r1, [r7, #0]
 801a32e:	6878      	ldr	r0, [r7, #4]
 801a330:	f7ff fcee 	bl	8019d10 <icmp_input>
        break;
 801a334:	e01c      	b.n	801a370 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a336:	4b1a      	ldr	r3, [pc, #104]	; (801a3a0 <ip4_input+0x240>)
 801a338:	695b      	ldr	r3, [r3, #20]
 801a33a:	6939      	ldr	r1, [r7, #16]
 801a33c:	4618      	mov	r0, r3
 801a33e:	f000 f90b 	bl	801a558 <ip4_addr_isbroadcast_u32>
 801a342:	4603      	mov	r3, r0
 801a344:	2b00      	cmp	r3, #0
 801a346:	d10f      	bne.n	801a368 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a348:	4b15      	ldr	r3, [pc, #84]	; (801a3a0 <ip4_input+0x240>)
 801a34a:	695b      	ldr	r3, [r3, #20]
 801a34c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a350:	2be0      	cmp	r3, #224	; 0xe0
 801a352:	d009      	beq.n	801a368 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801a354:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a358:	4619      	mov	r1, r3
 801a35a:	6878      	ldr	r0, [r7, #4]
 801a35c:	f7f7 fe77 	bl	801204e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801a360:	2102      	movs	r1, #2
 801a362:	6878      	ldr	r0, [r7, #4]
 801a364:	f7ff fdd8 	bl	8019f18 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801a368:	6878      	ldr	r0, [r7, #4]
 801a36a:	f7f7 feb5 	bl	80120d8 <pbuf_free>
        break;
 801a36e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801a370:	4b0b      	ldr	r3, [pc, #44]	; (801a3a0 <ip4_input+0x240>)
 801a372:	2200      	movs	r2, #0
 801a374:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801a376:	4b0a      	ldr	r3, [pc, #40]	; (801a3a0 <ip4_input+0x240>)
 801a378:	2200      	movs	r2, #0
 801a37a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801a37c:	4b08      	ldr	r3, [pc, #32]	; (801a3a0 <ip4_input+0x240>)
 801a37e:	2200      	movs	r2, #0
 801a380:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801a382:	4b07      	ldr	r3, [pc, #28]	; (801a3a0 <ip4_input+0x240>)
 801a384:	2200      	movs	r2, #0
 801a386:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801a388:	4b05      	ldr	r3, [pc, #20]	; (801a3a0 <ip4_input+0x240>)
 801a38a:	2200      	movs	r2, #0
 801a38c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801a38e:	4b04      	ldr	r3, [pc, #16]	; (801a3a0 <ip4_input+0x240>)
 801a390:	2200      	movs	r2, #0
 801a392:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801a394:	2300      	movs	r3, #0
}
 801a396:	4618      	mov	r0, r3
 801a398:	3718      	adds	r7, #24
 801a39a:	46bd      	mov	sp, r7
 801a39c:	bd80      	pop	{r7, pc}
 801a39e:	bf00      	nop
 801a3a0:	2000d938 	.word	0x2000d938
 801a3a4:	20011080 	.word	0x20011080

0801a3a8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801a3a8:	b580      	push	{r7, lr}
 801a3aa:	b08a      	sub	sp, #40	; 0x28
 801a3ac:	af04      	add	r7, sp, #16
 801a3ae:	60f8      	str	r0, [r7, #12]
 801a3b0:	60b9      	str	r1, [r7, #8]
 801a3b2:	607a      	str	r2, [r7, #4]
 801a3b4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801a3b6:	68bb      	ldr	r3, [r7, #8]
 801a3b8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	d009      	beq.n	801a3d4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801a3c0:	68bb      	ldr	r3, [r7, #8]
 801a3c2:	2b00      	cmp	r3, #0
 801a3c4:	d003      	beq.n	801a3ce <ip4_output_if+0x26>
 801a3c6:	68bb      	ldr	r3, [r7, #8]
 801a3c8:	681b      	ldr	r3, [r3, #0]
 801a3ca:	2b00      	cmp	r3, #0
 801a3cc:	d102      	bne.n	801a3d4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801a3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3d0:	3304      	adds	r3, #4
 801a3d2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801a3d4:	78fa      	ldrb	r2, [r7, #3]
 801a3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3d8:	9302      	str	r3, [sp, #8]
 801a3da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a3de:	9301      	str	r3, [sp, #4]
 801a3e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a3e4:	9300      	str	r3, [sp, #0]
 801a3e6:	4613      	mov	r3, r2
 801a3e8:	687a      	ldr	r2, [r7, #4]
 801a3ea:	6979      	ldr	r1, [r7, #20]
 801a3ec:	68f8      	ldr	r0, [r7, #12]
 801a3ee:	f000 f805 	bl	801a3fc <ip4_output_if_src>
 801a3f2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801a3f4:	4618      	mov	r0, r3
 801a3f6:	3718      	adds	r7, #24
 801a3f8:	46bd      	mov	sp, r7
 801a3fa:	bd80      	pop	{r7, pc}

0801a3fc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801a3fc:	b580      	push	{r7, lr}
 801a3fe:	b088      	sub	sp, #32
 801a400:	af00      	add	r7, sp, #0
 801a402:	60f8      	str	r0, [r7, #12]
 801a404:	60b9      	str	r1, [r7, #8]
 801a406:	607a      	str	r2, [r7, #4]
 801a408:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801a40a:	68fb      	ldr	r3, [r7, #12]
 801a40c:	7b9b      	ldrb	r3, [r3, #14]
 801a40e:	2b01      	cmp	r3, #1
 801a410:	d006      	beq.n	801a420 <ip4_output_if_src+0x24>
 801a412:	4b4b      	ldr	r3, [pc, #300]	; (801a540 <ip4_output_if_src+0x144>)
 801a414:	f44f 7255 	mov.w	r2, #852	; 0x354
 801a418:	494a      	ldr	r1, [pc, #296]	; (801a544 <ip4_output_if_src+0x148>)
 801a41a:	484b      	ldr	r0, [pc, #300]	; (801a548 <ip4_output_if_src+0x14c>)
 801a41c:	f001 f9f2 	bl	801b804 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	2b00      	cmp	r3, #0
 801a424:	d060      	beq.n	801a4e8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801a426:	2314      	movs	r3, #20
 801a428:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801a42a:	2114      	movs	r1, #20
 801a42c:	68f8      	ldr	r0, [r7, #12]
 801a42e:	f7f7 fd8b 	bl	8011f48 <pbuf_add_header>
 801a432:	4603      	mov	r3, r0
 801a434:	2b00      	cmp	r3, #0
 801a436:	d002      	beq.n	801a43e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a438:	f06f 0301 	mvn.w	r3, #1
 801a43c:	e07c      	b.n	801a538 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801a43e:	68fb      	ldr	r3, [r7, #12]
 801a440:	685b      	ldr	r3, [r3, #4]
 801a442:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801a444:	68fb      	ldr	r3, [r7, #12]
 801a446:	895b      	ldrh	r3, [r3, #10]
 801a448:	2b13      	cmp	r3, #19
 801a44a:	d806      	bhi.n	801a45a <ip4_output_if_src+0x5e>
 801a44c:	4b3c      	ldr	r3, [pc, #240]	; (801a540 <ip4_output_if_src+0x144>)
 801a44e:	f44f 7262 	mov.w	r2, #904	; 0x388
 801a452:	493e      	ldr	r1, [pc, #248]	; (801a54c <ip4_output_if_src+0x150>)
 801a454:	483c      	ldr	r0, [pc, #240]	; (801a548 <ip4_output_if_src+0x14c>)
 801a456:	f001 f9d5 	bl	801b804 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801a45a:	69fb      	ldr	r3, [r7, #28]
 801a45c:	78fa      	ldrb	r2, [r7, #3]
 801a45e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801a460:	69fb      	ldr	r3, [r7, #28]
 801a462:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a466:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	681a      	ldr	r2, [r3, #0]
 801a46c:	69fb      	ldr	r3, [r7, #28]
 801a46e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801a470:	8b7b      	ldrh	r3, [r7, #26]
 801a472:	089b      	lsrs	r3, r3, #2
 801a474:	b29b      	uxth	r3, r3
 801a476:	b2db      	uxtb	r3, r3
 801a478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a47c:	b2da      	uxtb	r2, r3
 801a47e:	69fb      	ldr	r3, [r7, #28]
 801a480:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801a482:	69fb      	ldr	r3, [r7, #28]
 801a484:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a488:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801a48a:	68fb      	ldr	r3, [r7, #12]
 801a48c:	891b      	ldrh	r3, [r3, #8]
 801a48e:	4618      	mov	r0, r3
 801a490:	f7f6 f9fe 	bl	8010890 <lwip_htons>
 801a494:	4603      	mov	r3, r0
 801a496:	461a      	mov	r2, r3
 801a498:	69fb      	ldr	r3, [r7, #28]
 801a49a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801a49c:	69fb      	ldr	r3, [r7, #28]
 801a49e:	2200      	movs	r2, #0
 801a4a0:	719a      	strb	r2, [r3, #6]
 801a4a2:	2200      	movs	r2, #0
 801a4a4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801a4a6:	4b2a      	ldr	r3, [pc, #168]	; (801a550 <ip4_output_if_src+0x154>)
 801a4a8:	881b      	ldrh	r3, [r3, #0]
 801a4aa:	4618      	mov	r0, r3
 801a4ac:	f7f6 f9f0 	bl	8010890 <lwip_htons>
 801a4b0:	4603      	mov	r3, r0
 801a4b2:	461a      	mov	r2, r3
 801a4b4:	69fb      	ldr	r3, [r7, #28]
 801a4b6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801a4b8:	4b25      	ldr	r3, [pc, #148]	; (801a550 <ip4_output_if_src+0x154>)
 801a4ba:	881b      	ldrh	r3, [r3, #0]
 801a4bc:	3301      	adds	r3, #1
 801a4be:	b29a      	uxth	r2, r3
 801a4c0:	4b23      	ldr	r3, [pc, #140]	; (801a550 <ip4_output_if_src+0x154>)
 801a4c2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801a4c4:	68bb      	ldr	r3, [r7, #8]
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d104      	bne.n	801a4d4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801a4ca:	4b22      	ldr	r3, [pc, #136]	; (801a554 <ip4_output_if_src+0x158>)
 801a4cc:	681a      	ldr	r2, [r3, #0]
 801a4ce:	69fb      	ldr	r3, [r7, #28]
 801a4d0:	60da      	str	r2, [r3, #12]
 801a4d2:	e003      	b.n	801a4dc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801a4d4:	68bb      	ldr	r3, [r7, #8]
 801a4d6:	681a      	ldr	r2, [r3, #0]
 801a4d8:	69fb      	ldr	r3, [r7, #28]
 801a4da:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801a4dc:	69fb      	ldr	r3, [r7, #28]
 801a4de:	2200      	movs	r2, #0
 801a4e0:	729a      	strb	r2, [r3, #10]
 801a4e2:	2200      	movs	r2, #0
 801a4e4:	72da      	strb	r2, [r3, #11]
 801a4e6:	e00f      	b.n	801a508 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801a4e8:	68fb      	ldr	r3, [r7, #12]
 801a4ea:	895b      	ldrh	r3, [r3, #10]
 801a4ec:	2b13      	cmp	r3, #19
 801a4ee:	d802      	bhi.n	801a4f6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a4f0:	f06f 0301 	mvn.w	r3, #1
 801a4f4:	e020      	b.n	801a538 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801a4f6:	68fb      	ldr	r3, [r7, #12]
 801a4f8:	685b      	ldr	r3, [r3, #4]
 801a4fa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801a4fc:	69fb      	ldr	r3, [r7, #28]
 801a4fe:	691b      	ldr	r3, [r3, #16]
 801a500:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801a502:	f107 0314 	add.w	r3, r7, #20
 801a506:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801a508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a50a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	d00c      	beq.n	801a52a <ip4_output_if_src+0x12e>
 801a510:	68fb      	ldr	r3, [r7, #12]
 801a512:	891a      	ldrh	r2, [r3, #8]
 801a514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a516:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a518:	429a      	cmp	r2, r3
 801a51a:	d906      	bls.n	801a52a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801a51c:	687a      	ldr	r2, [r7, #4]
 801a51e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a520:	68f8      	ldr	r0, [r7, #12]
 801a522:	f000 fd53 	bl	801afcc <ip4_frag>
 801a526:	4603      	mov	r3, r0
 801a528:	e006      	b.n	801a538 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801a52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a52c:	695b      	ldr	r3, [r3, #20]
 801a52e:	687a      	ldr	r2, [r7, #4]
 801a530:	68f9      	ldr	r1, [r7, #12]
 801a532:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a534:	4798      	blx	r3
 801a536:	4603      	mov	r3, r0
}
 801a538:	4618      	mov	r0, r3
 801a53a:	3720      	adds	r7, #32
 801a53c:	46bd      	mov	sp, r7
 801a53e:	bd80      	pop	{r7, pc}
 801a540:	080200c8 	.word	0x080200c8
 801a544:	080200fc 	.word	0x080200fc
 801a548:	08020108 	.word	0x08020108
 801a54c:	08020130 	.word	0x08020130
 801a550:	200111de 	.word	0x200111de
 801a554:	0802060c 	.word	0x0802060c

0801a558 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801a558:	b480      	push	{r7}
 801a55a:	b085      	sub	sp, #20
 801a55c:	af00      	add	r7, sp, #0
 801a55e:	6078      	str	r0, [r7, #4]
 801a560:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801a566:	687b      	ldr	r3, [r7, #4]
 801a568:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a56c:	d002      	beq.n	801a574 <ip4_addr_isbroadcast_u32+0x1c>
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	2b00      	cmp	r3, #0
 801a572:	d101      	bne.n	801a578 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801a574:	2301      	movs	r3, #1
 801a576:	e02a      	b.n	801a5ce <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801a578:	683b      	ldr	r3, [r7, #0]
 801a57a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a57e:	f003 0302 	and.w	r3, r3, #2
 801a582:	2b00      	cmp	r3, #0
 801a584:	d101      	bne.n	801a58a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801a586:	2300      	movs	r3, #0
 801a588:	e021      	b.n	801a5ce <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801a58a:	683b      	ldr	r3, [r7, #0]
 801a58c:	3304      	adds	r3, #4
 801a58e:	681b      	ldr	r3, [r3, #0]
 801a590:	687a      	ldr	r2, [r7, #4]
 801a592:	429a      	cmp	r2, r3
 801a594:	d101      	bne.n	801a59a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801a596:	2300      	movs	r3, #0
 801a598:	e019      	b.n	801a5ce <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801a59a:	68fa      	ldr	r2, [r7, #12]
 801a59c:	683b      	ldr	r3, [r7, #0]
 801a59e:	3304      	adds	r3, #4
 801a5a0:	681b      	ldr	r3, [r3, #0]
 801a5a2:	405a      	eors	r2, r3
 801a5a4:	683b      	ldr	r3, [r7, #0]
 801a5a6:	3308      	adds	r3, #8
 801a5a8:	681b      	ldr	r3, [r3, #0]
 801a5aa:	4013      	ands	r3, r2
 801a5ac:	2b00      	cmp	r3, #0
 801a5ae:	d10d      	bne.n	801a5cc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a5b0:	683b      	ldr	r3, [r7, #0]
 801a5b2:	3308      	adds	r3, #8
 801a5b4:	681b      	ldr	r3, [r3, #0]
 801a5b6:	43da      	mvns	r2, r3
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801a5bc:	683b      	ldr	r3, [r7, #0]
 801a5be:	3308      	adds	r3, #8
 801a5c0:	681b      	ldr	r3, [r3, #0]
 801a5c2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a5c4:	429a      	cmp	r2, r3
 801a5c6:	d101      	bne.n	801a5cc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801a5c8:	2301      	movs	r3, #1
 801a5ca:	e000      	b.n	801a5ce <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801a5cc:	2300      	movs	r3, #0
  }
}
 801a5ce:	4618      	mov	r0, r3
 801a5d0:	3714      	adds	r7, #20
 801a5d2:	46bd      	mov	sp, r7
 801a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5d8:	4770      	bx	lr
	...

0801a5dc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801a5dc:	b580      	push	{r7, lr}
 801a5de:	b084      	sub	sp, #16
 801a5e0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801a5e2:	2300      	movs	r3, #0
 801a5e4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801a5e6:	4b12      	ldr	r3, [pc, #72]	; (801a630 <ip_reass_tmr+0x54>)
 801a5e8:	681b      	ldr	r3, [r3, #0]
 801a5ea:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801a5ec:	e018      	b.n	801a620 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801a5ee:	68fb      	ldr	r3, [r7, #12]
 801a5f0:	7fdb      	ldrb	r3, [r3, #31]
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d00b      	beq.n	801a60e <ip_reass_tmr+0x32>
      r->timer--;
 801a5f6:	68fb      	ldr	r3, [r7, #12]
 801a5f8:	7fdb      	ldrb	r3, [r3, #31]
 801a5fa:	3b01      	subs	r3, #1
 801a5fc:	b2da      	uxtb	r2, r3
 801a5fe:	68fb      	ldr	r3, [r7, #12]
 801a600:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801a602:	68fb      	ldr	r3, [r7, #12]
 801a604:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801a606:	68fb      	ldr	r3, [r7, #12]
 801a608:	681b      	ldr	r3, [r3, #0]
 801a60a:	60fb      	str	r3, [r7, #12]
 801a60c:	e008      	b.n	801a620 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801a60e:	68fb      	ldr	r3, [r7, #12]
 801a610:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801a612:	68fb      	ldr	r3, [r7, #12]
 801a614:	681b      	ldr	r3, [r3, #0]
 801a616:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801a618:	68b9      	ldr	r1, [r7, #8]
 801a61a:	6878      	ldr	r0, [r7, #4]
 801a61c:	f000 f80a 	bl	801a634 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801a620:	68fb      	ldr	r3, [r7, #12]
 801a622:	2b00      	cmp	r3, #0
 801a624:	d1e3      	bne.n	801a5ee <ip_reass_tmr+0x12>
    }
  }
}
 801a626:	bf00      	nop
 801a628:	bf00      	nop
 801a62a:	3710      	adds	r7, #16
 801a62c:	46bd      	mov	sp, r7
 801a62e:	bd80      	pop	{r7, pc}
 801a630:	200111e0 	.word	0x200111e0

0801a634 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a634:	b580      	push	{r7, lr}
 801a636:	b088      	sub	sp, #32
 801a638:	af00      	add	r7, sp, #0
 801a63a:	6078      	str	r0, [r7, #4]
 801a63c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801a63e:	2300      	movs	r3, #0
 801a640:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801a642:	683a      	ldr	r2, [r7, #0]
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	429a      	cmp	r2, r3
 801a648:	d105      	bne.n	801a656 <ip_reass_free_complete_datagram+0x22>
 801a64a:	4b45      	ldr	r3, [pc, #276]	; (801a760 <ip_reass_free_complete_datagram+0x12c>)
 801a64c:	22ab      	movs	r2, #171	; 0xab
 801a64e:	4945      	ldr	r1, [pc, #276]	; (801a764 <ip_reass_free_complete_datagram+0x130>)
 801a650:	4845      	ldr	r0, [pc, #276]	; (801a768 <ip_reass_free_complete_datagram+0x134>)
 801a652:	f001 f8d7 	bl	801b804 <iprintf>
  if (prev != NULL) {
 801a656:	683b      	ldr	r3, [r7, #0]
 801a658:	2b00      	cmp	r3, #0
 801a65a:	d00a      	beq.n	801a672 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801a65c:	683b      	ldr	r3, [r7, #0]
 801a65e:	681b      	ldr	r3, [r3, #0]
 801a660:	687a      	ldr	r2, [r7, #4]
 801a662:	429a      	cmp	r2, r3
 801a664:	d005      	beq.n	801a672 <ip_reass_free_complete_datagram+0x3e>
 801a666:	4b3e      	ldr	r3, [pc, #248]	; (801a760 <ip_reass_free_complete_datagram+0x12c>)
 801a668:	22ad      	movs	r2, #173	; 0xad
 801a66a:	4940      	ldr	r1, [pc, #256]	; (801a76c <ip_reass_free_complete_datagram+0x138>)
 801a66c:	483e      	ldr	r0, [pc, #248]	; (801a768 <ip_reass_free_complete_datagram+0x134>)
 801a66e:	f001 f8c9 	bl	801b804 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	685b      	ldr	r3, [r3, #4]
 801a676:	685b      	ldr	r3, [r3, #4]
 801a678:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801a67a:	697b      	ldr	r3, [r7, #20]
 801a67c:	889b      	ldrh	r3, [r3, #4]
 801a67e:	b29b      	uxth	r3, r3
 801a680:	2b00      	cmp	r3, #0
 801a682:	d12a      	bne.n	801a6da <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	685b      	ldr	r3, [r3, #4]
 801a688:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801a68a:	697b      	ldr	r3, [r7, #20]
 801a68c:	681a      	ldr	r2, [r3, #0]
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801a692:	69bb      	ldr	r3, [r7, #24]
 801a694:	6858      	ldr	r0, [r3, #4]
 801a696:	687b      	ldr	r3, [r7, #4]
 801a698:	3308      	adds	r3, #8
 801a69a:	2214      	movs	r2, #20
 801a69c:	4619      	mov	r1, r3
 801a69e:	f001 f89b 	bl	801b7d8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801a6a2:	2101      	movs	r1, #1
 801a6a4:	69b8      	ldr	r0, [r7, #24]
 801a6a6:	f7ff fc47 	bl	8019f38 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801a6aa:	69b8      	ldr	r0, [r7, #24]
 801a6ac:	f7f7 fda2 	bl	80121f4 <pbuf_clen>
 801a6b0:	4603      	mov	r3, r0
 801a6b2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a6b4:	8bfa      	ldrh	r2, [r7, #30]
 801a6b6:	8a7b      	ldrh	r3, [r7, #18]
 801a6b8:	4413      	add	r3, r2
 801a6ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a6be:	db05      	blt.n	801a6cc <ip_reass_free_complete_datagram+0x98>
 801a6c0:	4b27      	ldr	r3, [pc, #156]	; (801a760 <ip_reass_free_complete_datagram+0x12c>)
 801a6c2:	22bc      	movs	r2, #188	; 0xbc
 801a6c4:	492a      	ldr	r1, [pc, #168]	; (801a770 <ip_reass_free_complete_datagram+0x13c>)
 801a6c6:	4828      	ldr	r0, [pc, #160]	; (801a768 <ip_reass_free_complete_datagram+0x134>)
 801a6c8:	f001 f89c 	bl	801b804 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a6cc:	8bfa      	ldrh	r2, [r7, #30]
 801a6ce:	8a7b      	ldrh	r3, [r7, #18]
 801a6d0:	4413      	add	r3, r2
 801a6d2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801a6d4:	69b8      	ldr	r0, [r7, #24]
 801a6d6:	f7f7 fcff 	bl	80120d8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801a6da:	687b      	ldr	r3, [r7, #4]
 801a6dc:	685b      	ldr	r3, [r3, #4]
 801a6de:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801a6e0:	e01f      	b.n	801a722 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801a6e2:	69bb      	ldr	r3, [r7, #24]
 801a6e4:	685b      	ldr	r3, [r3, #4]
 801a6e6:	617b      	str	r3, [r7, #20]
    pcur = p;
 801a6e8:	69bb      	ldr	r3, [r7, #24]
 801a6ea:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801a6ec:	697b      	ldr	r3, [r7, #20]
 801a6ee:	681b      	ldr	r3, [r3, #0]
 801a6f0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801a6f2:	68f8      	ldr	r0, [r7, #12]
 801a6f4:	f7f7 fd7e 	bl	80121f4 <pbuf_clen>
 801a6f8:	4603      	mov	r3, r0
 801a6fa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a6fc:	8bfa      	ldrh	r2, [r7, #30]
 801a6fe:	8a7b      	ldrh	r3, [r7, #18]
 801a700:	4413      	add	r3, r2
 801a702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a706:	db05      	blt.n	801a714 <ip_reass_free_complete_datagram+0xe0>
 801a708:	4b15      	ldr	r3, [pc, #84]	; (801a760 <ip_reass_free_complete_datagram+0x12c>)
 801a70a:	22cc      	movs	r2, #204	; 0xcc
 801a70c:	4918      	ldr	r1, [pc, #96]	; (801a770 <ip_reass_free_complete_datagram+0x13c>)
 801a70e:	4816      	ldr	r0, [pc, #88]	; (801a768 <ip_reass_free_complete_datagram+0x134>)
 801a710:	f001 f878 	bl	801b804 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a714:	8bfa      	ldrh	r2, [r7, #30]
 801a716:	8a7b      	ldrh	r3, [r7, #18]
 801a718:	4413      	add	r3, r2
 801a71a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801a71c:	68f8      	ldr	r0, [r7, #12]
 801a71e:	f7f7 fcdb 	bl	80120d8 <pbuf_free>
  while (p != NULL) {
 801a722:	69bb      	ldr	r3, [r7, #24]
 801a724:	2b00      	cmp	r3, #0
 801a726:	d1dc      	bne.n	801a6e2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801a728:	6839      	ldr	r1, [r7, #0]
 801a72a:	6878      	ldr	r0, [r7, #4]
 801a72c:	f000 f8c2 	bl	801a8b4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801a730:	4b10      	ldr	r3, [pc, #64]	; (801a774 <ip_reass_free_complete_datagram+0x140>)
 801a732:	881b      	ldrh	r3, [r3, #0]
 801a734:	8bfa      	ldrh	r2, [r7, #30]
 801a736:	429a      	cmp	r2, r3
 801a738:	d905      	bls.n	801a746 <ip_reass_free_complete_datagram+0x112>
 801a73a:	4b09      	ldr	r3, [pc, #36]	; (801a760 <ip_reass_free_complete_datagram+0x12c>)
 801a73c:	22d2      	movs	r2, #210	; 0xd2
 801a73e:	490e      	ldr	r1, [pc, #56]	; (801a778 <ip_reass_free_complete_datagram+0x144>)
 801a740:	4809      	ldr	r0, [pc, #36]	; (801a768 <ip_reass_free_complete_datagram+0x134>)
 801a742:	f001 f85f 	bl	801b804 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801a746:	4b0b      	ldr	r3, [pc, #44]	; (801a774 <ip_reass_free_complete_datagram+0x140>)
 801a748:	881a      	ldrh	r2, [r3, #0]
 801a74a:	8bfb      	ldrh	r3, [r7, #30]
 801a74c:	1ad3      	subs	r3, r2, r3
 801a74e:	b29a      	uxth	r2, r3
 801a750:	4b08      	ldr	r3, [pc, #32]	; (801a774 <ip_reass_free_complete_datagram+0x140>)
 801a752:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801a754:	8bfb      	ldrh	r3, [r7, #30]
}
 801a756:	4618      	mov	r0, r3
 801a758:	3720      	adds	r7, #32
 801a75a:	46bd      	mov	sp, r7
 801a75c:	bd80      	pop	{r7, pc}
 801a75e:	bf00      	nop
 801a760:	08020160 	.word	0x08020160
 801a764:	0802019c 	.word	0x0802019c
 801a768:	080201a8 	.word	0x080201a8
 801a76c:	080201d0 	.word	0x080201d0
 801a770:	080201e4 	.word	0x080201e4
 801a774:	200111e4 	.word	0x200111e4
 801a778:	08020204 	.word	0x08020204

0801a77c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801a77c:	b580      	push	{r7, lr}
 801a77e:	b08a      	sub	sp, #40	; 0x28
 801a780:	af00      	add	r7, sp, #0
 801a782:	6078      	str	r0, [r7, #4]
 801a784:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801a786:	2300      	movs	r3, #0
 801a788:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801a78a:	2300      	movs	r3, #0
 801a78c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801a78e:	2300      	movs	r3, #0
 801a790:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801a792:	2300      	movs	r3, #0
 801a794:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801a796:	2300      	movs	r3, #0
 801a798:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801a79a:	4b28      	ldr	r3, [pc, #160]	; (801a83c <ip_reass_remove_oldest_datagram+0xc0>)
 801a79c:	681b      	ldr	r3, [r3, #0]
 801a79e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a7a0:	e030      	b.n	801a804 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801a7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7a4:	695a      	ldr	r2, [r3, #20]
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	68db      	ldr	r3, [r3, #12]
 801a7aa:	429a      	cmp	r2, r3
 801a7ac:	d10c      	bne.n	801a7c8 <ip_reass_remove_oldest_datagram+0x4c>
 801a7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7b0:	699a      	ldr	r2, [r3, #24]
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	691b      	ldr	r3, [r3, #16]
 801a7b6:	429a      	cmp	r2, r3
 801a7b8:	d106      	bne.n	801a7c8 <ip_reass_remove_oldest_datagram+0x4c>
 801a7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7bc:	899a      	ldrh	r2, [r3, #12]
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	889b      	ldrh	r3, [r3, #4]
 801a7c2:	b29b      	uxth	r3, r3
 801a7c4:	429a      	cmp	r2, r3
 801a7c6:	d014      	beq.n	801a7f2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801a7c8:	693b      	ldr	r3, [r7, #16]
 801a7ca:	3301      	adds	r3, #1
 801a7cc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801a7ce:	6a3b      	ldr	r3, [r7, #32]
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	d104      	bne.n	801a7de <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801a7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7d6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a7d8:	69fb      	ldr	r3, [r7, #28]
 801a7da:	61bb      	str	r3, [r7, #24]
 801a7dc:	e009      	b.n	801a7f2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801a7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7e0:	7fda      	ldrb	r2, [r3, #31]
 801a7e2:	6a3b      	ldr	r3, [r7, #32]
 801a7e4:	7fdb      	ldrb	r3, [r3, #31]
 801a7e6:	429a      	cmp	r2, r3
 801a7e8:	d803      	bhi.n	801a7f2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801a7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7ec:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a7ee:	69fb      	ldr	r3, [r7, #28]
 801a7f0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801a7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7f4:	681b      	ldr	r3, [r3, #0]
 801a7f6:	2b00      	cmp	r3, #0
 801a7f8:	d001      	beq.n	801a7fe <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801a7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7fc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801a7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a800:	681b      	ldr	r3, [r3, #0]
 801a802:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a806:	2b00      	cmp	r3, #0
 801a808:	d1cb      	bne.n	801a7a2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801a80a:	6a3b      	ldr	r3, [r7, #32]
 801a80c:	2b00      	cmp	r3, #0
 801a80e:	d008      	beq.n	801a822 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801a810:	69b9      	ldr	r1, [r7, #24]
 801a812:	6a38      	ldr	r0, [r7, #32]
 801a814:	f7ff ff0e 	bl	801a634 <ip_reass_free_complete_datagram>
 801a818:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801a81a:	697a      	ldr	r2, [r7, #20]
 801a81c:	68fb      	ldr	r3, [r7, #12]
 801a81e:	4413      	add	r3, r2
 801a820:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801a822:	697a      	ldr	r2, [r7, #20]
 801a824:	683b      	ldr	r3, [r7, #0]
 801a826:	429a      	cmp	r2, r3
 801a828:	da02      	bge.n	801a830 <ip_reass_remove_oldest_datagram+0xb4>
 801a82a:	693b      	ldr	r3, [r7, #16]
 801a82c:	2b01      	cmp	r3, #1
 801a82e:	dcac      	bgt.n	801a78a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801a830:	697b      	ldr	r3, [r7, #20]
}
 801a832:	4618      	mov	r0, r3
 801a834:	3728      	adds	r7, #40	; 0x28
 801a836:	46bd      	mov	sp, r7
 801a838:	bd80      	pop	{r7, pc}
 801a83a:	bf00      	nop
 801a83c:	200111e0 	.word	0x200111e0

0801a840 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801a840:	b580      	push	{r7, lr}
 801a842:	b084      	sub	sp, #16
 801a844:	af00      	add	r7, sp, #0
 801a846:	6078      	str	r0, [r7, #4]
 801a848:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a84a:	2004      	movs	r0, #4
 801a84c:	f7f6 fcf8 	bl	8011240 <memp_malloc>
 801a850:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801a852:	68fb      	ldr	r3, [r7, #12]
 801a854:	2b00      	cmp	r3, #0
 801a856:	d110      	bne.n	801a87a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801a858:	6839      	ldr	r1, [r7, #0]
 801a85a:	6878      	ldr	r0, [r7, #4]
 801a85c:	f7ff ff8e 	bl	801a77c <ip_reass_remove_oldest_datagram>
 801a860:	4602      	mov	r2, r0
 801a862:	683b      	ldr	r3, [r7, #0]
 801a864:	4293      	cmp	r3, r2
 801a866:	dc03      	bgt.n	801a870 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a868:	2004      	movs	r0, #4
 801a86a:	f7f6 fce9 	bl	8011240 <memp_malloc>
 801a86e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801a870:	68fb      	ldr	r3, [r7, #12]
 801a872:	2b00      	cmp	r3, #0
 801a874:	d101      	bne.n	801a87a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801a876:	2300      	movs	r3, #0
 801a878:	e016      	b.n	801a8a8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801a87a:	2220      	movs	r2, #32
 801a87c:	2100      	movs	r1, #0
 801a87e:	68f8      	ldr	r0, [r7, #12]
 801a880:	f000 ffb8 	bl	801b7f4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801a884:	68fb      	ldr	r3, [r7, #12]
 801a886:	220f      	movs	r2, #15
 801a888:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801a88a:	4b09      	ldr	r3, [pc, #36]	; (801a8b0 <ip_reass_enqueue_new_datagram+0x70>)
 801a88c:	681a      	ldr	r2, [r3, #0]
 801a88e:	68fb      	ldr	r3, [r7, #12]
 801a890:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801a892:	4a07      	ldr	r2, [pc, #28]	; (801a8b0 <ip_reass_enqueue_new_datagram+0x70>)
 801a894:	68fb      	ldr	r3, [r7, #12]
 801a896:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801a898:	68fb      	ldr	r3, [r7, #12]
 801a89a:	3308      	adds	r3, #8
 801a89c:	2214      	movs	r2, #20
 801a89e:	6879      	ldr	r1, [r7, #4]
 801a8a0:	4618      	mov	r0, r3
 801a8a2:	f000 ff99 	bl	801b7d8 <memcpy>
  return ipr;
 801a8a6:	68fb      	ldr	r3, [r7, #12]
}
 801a8a8:	4618      	mov	r0, r3
 801a8aa:	3710      	adds	r7, #16
 801a8ac:	46bd      	mov	sp, r7
 801a8ae:	bd80      	pop	{r7, pc}
 801a8b0:	200111e0 	.word	0x200111e0

0801a8b4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a8b4:	b580      	push	{r7, lr}
 801a8b6:	b082      	sub	sp, #8
 801a8b8:	af00      	add	r7, sp, #0
 801a8ba:	6078      	str	r0, [r7, #4]
 801a8bc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801a8be:	4b10      	ldr	r3, [pc, #64]	; (801a900 <ip_reass_dequeue_datagram+0x4c>)
 801a8c0:	681b      	ldr	r3, [r3, #0]
 801a8c2:	687a      	ldr	r2, [r7, #4]
 801a8c4:	429a      	cmp	r2, r3
 801a8c6:	d104      	bne.n	801a8d2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	681b      	ldr	r3, [r3, #0]
 801a8cc:	4a0c      	ldr	r2, [pc, #48]	; (801a900 <ip_reass_dequeue_datagram+0x4c>)
 801a8ce:	6013      	str	r3, [r2, #0]
 801a8d0:	e00d      	b.n	801a8ee <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801a8d2:	683b      	ldr	r3, [r7, #0]
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	d106      	bne.n	801a8e6 <ip_reass_dequeue_datagram+0x32>
 801a8d8:	4b0a      	ldr	r3, [pc, #40]	; (801a904 <ip_reass_dequeue_datagram+0x50>)
 801a8da:	f240 1245 	movw	r2, #325	; 0x145
 801a8de:	490a      	ldr	r1, [pc, #40]	; (801a908 <ip_reass_dequeue_datagram+0x54>)
 801a8e0:	480a      	ldr	r0, [pc, #40]	; (801a90c <ip_reass_dequeue_datagram+0x58>)
 801a8e2:	f000 ff8f 	bl	801b804 <iprintf>
    prev->next = ipr->next;
 801a8e6:	687b      	ldr	r3, [r7, #4]
 801a8e8:	681a      	ldr	r2, [r3, #0]
 801a8ea:	683b      	ldr	r3, [r7, #0]
 801a8ec:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801a8ee:	6879      	ldr	r1, [r7, #4]
 801a8f0:	2004      	movs	r0, #4
 801a8f2:	f7f6 fd1b 	bl	801132c <memp_free>
}
 801a8f6:	bf00      	nop
 801a8f8:	3708      	adds	r7, #8
 801a8fa:	46bd      	mov	sp, r7
 801a8fc:	bd80      	pop	{r7, pc}
 801a8fe:	bf00      	nop
 801a900:	200111e0 	.word	0x200111e0
 801a904:	08020160 	.word	0x08020160
 801a908:	08020228 	.word	0x08020228
 801a90c:	080201a8 	.word	0x080201a8

0801a910 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801a910:	b580      	push	{r7, lr}
 801a912:	b08c      	sub	sp, #48	; 0x30
 801a914:	af00      	add	r7, sp, #0
 801a916:	60f8      	str	r0, [r7, #12]
 801a918:	60b9      	str	r1, [r7, #8]
 801a91a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801a91c:	2300      	movs	r3, #0
 801a91e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801a920:	2301      	movs	r3, #1
 801a922:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801a924:	68bb      	ldr	r3, [r7, #8]
 801a926:	685b      	ldr	r3, [r3, #4]
 801a928:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a92a:	69fb      	ldr	r3, [r7, #28]
 801a92c:	885b      	ldrh	r3, [r3, #2]
 801a92e:	b29b      	uxth	r3, r3
 801a930:	4618      	mov	r0, r3
 801a932:	f7f5 ffad 	bl	8010890 <lwip_htons>
 801a936:	4603      	mov	r3, r0
 801a938:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801a93a:	69fb      	ldr	r3, [r7, #28]
 801a93c:	781b      	ldrb	r3, [r3, #0]
 801a93e:	f003 030f 	and.w	r3, r3, #15
 801a942:	b2db      	uxtb	r3, r3
 801a944:	009b      	lsls	r3, r3, #2
 801a946:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801a948:	7e7b      	ldrb	r3, [r7, #25]
 801a94a:	b29b      	uxth	r3, r3
 801a94c:	8b7a      	ldrh	r2, [r7, #26]
 801a94e:	429a      	cmp	r2, r3
 801a950:	d202      	bcs.n	801a958 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a952:	f04f 33ff 	mov.w	r3, #4294967295
 801a956:	e135      	b.n	801abc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801a958:	7e7b      	ldrb	r3, [r7, #25]
 801a95a:	b29b      	uxth	r3, r3
 801a95c:	8b7a      	ldrh	r2, [r7, #26]
 801a95e:	1ad3      	subs	r3, r2, r3
 801a960:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801a962:	69fb      	ldr	r3, [r7, #28]
 801a964:	88db      	ldrh	r3, [r3, #6]
 801a966:	b29b      	uxth	r3, r3
 801a968:	4618      	mov	r0, r3
 801a96a:	f7f5 ff91 	bl	8010890 <lwip_htons>
 801a96e:	4603      	mov	r3, r0
 801a970:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a974:	b29b      	uxth	r3, r3
 801a976:	00db      	lsls	r3, r3, #3
 801a978:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801a97a:	68bb      	ldr	r3, [r7, #8]
 801a97c:	685b      	ldr	r3, [r3, #4]
 801a97e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801a980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a982:	2200      	movs	r2, #0
 801a984:	701a      	strb	r2, [r3, #0]
 801a986:	2200      	movs	r2, #0
 801a988:	705a      	strb	r2, [r3, #1]
 801a98a:	2200      	movs	r2, #0
 801a98c:	709a      	strb	r2, [r3, #2]
 801a98e:	2200      	movs	r2, #0
 801a990:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801a992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a994:	8afa      	ldrh	r2, [r7, #22]
 801a996:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801a998:	8afa      	ldrh	r2, [r7, #22]
 801a99a:	8b7b      	ldrh	r3, [r7, #26]
 801a99c:	4413      	add	r3, r2
 801a99e:	b29a      	uxth	r2, r3
 801a9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9a2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801a9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9a6:	88db      	ldrh	r3, [r3, #6]
 801a9a8:	b29b      	uxth	r3, r3
 801a9aa:	8afa      	ldrh	r2, [r7, #22]
 801a9ac:	429a      	cmp	r2, r3
 801a9ae:	d902      	bls.n	801a9b6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a9b0:	f04f 33ff 	mov.w	r3, #4294967295
 801a9b4:	e106      	b.n	801abc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801a9b6:	68fb      	ldr	r3, [r7, #12]
 801a9b8:	685b      	ldr	r3, [r3, #4]
 801a9ba:	627b      	str	r3, [r7, #36]	; 0x24
 801a9bc:	e068      	b.n	801aa90 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801a9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9c0:	685b      	ldr	r3, [r3, #4]
 801a9c2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801a9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9c6:	889b      	ldrh	r3, [r3, #4]
 801a9c8:	b29a      	uxth	r2, r3
 801a9ca:	693b      	ldr	r3, [r7, #16]
 801a9cc:	889b      	ldrh	r3, [r3, #4]
 801a9ce:	b29b      	uxth	r3, r3
 801a9d0:	429a      	cmp	r2, r3
 801a9d2:	d235      	bcs.n	801aa40 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801a9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a9d8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801a9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	d020      	beq.n	801aa22 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801a9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9e2:	889b      	ldrh	r3, [r3, #4]
 801a9e4:	b29a      	uxth	r2, r3
 801a9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9e8:	88db      	ldrh	r3, [r3, #6]
 801a9ea:	b29b      	uxth	r3, r3
 801a9ec:	429a      	cmp	r2, r3
 801a9ee:	d307      	bcc.n	801aa00 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801a9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9f2:	88db      	ldrh	r3, [r3, #6]
 801a9f4:	b29a      	uxth	r2, r3
 801a9f6:	693b      	ldr	r3, [r7, #16]
 801a9f8:	889b      	ldrh	r3, [r3, #4]
 801a9fa:	b29b      	uxth	r3, r3
 801a9fc:	429a      	cmp	r2, r3
 801a9fe:	d902      	bls.n	801aa06 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801aa00:	f04f 33ff 	mov.w	r3, #4294967295
 801aa04:	e0de      	b.n	801abc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801aa06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa08:	68ba      	ldr	r2, [r7, #8]
 801aa0a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801aa0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa0e:	88db      	ldrh	r3, [r3, #6]
 801aa10:	b29a      	uxth	r2, r3
 801aa12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa14:	889b      	ldrh	r3, [r3, #4]
 801aa16:	b29b      	uxth	r3, r3
 801aa18:	429a      	cmp	r2, r3
 801aa1a:	d03d      	beq.n	801aa98 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801aa1c:	2300      	movs	r3, #0
 801aa1e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801aa20:	e03a      	b.n	801aa98 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801aa22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa24:	88db      	ldrh	r3, [r3, #6]
 801aa26:	b29a      	uxth	r2, r3
 801aa28:	693b      	ldr	r3, [r7, #16]
 801aa2a:	889b      	ldrh	r3, [r3, #4]
 801aa2c:	b29b      	uxth	r3, r3
 801aa2e:	429a      	cmp	r2, r3
 801aa30:	d902      	bls.n	801aa38 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801aa32:	f04f 33ff 	mov.w	r3, #4294967295
 801aa36:	e0c5      	b.n	801abc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801aa38:	68fb      	ldr	r3, [r7, #12]
 801aa3a:	68ba      	ldr	r2, [r7, #8]
 801aa3c:	605a      	str	r2, [r3, #4]
      break;
 801aa3e:	e02b      	b.n	801aa98 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801aa40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa42:	889b      	ldrh	r3, [r3, #4]
 801aa44:	b29a      	uxth	r2, r3
 801aa46:	693b      	ldr	r3, [r7, #16]
 801aa48:	889b      	ldrh	r3, [r3, #4]
 801aa4a:	b29b      	uxth	r3, r3
 801aa4c:	429a      	cmp	r2, r3
 801aa4e:	d102      	bne.n	801aa56 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801aa50:	f04f 33ff 	mov.w	r3, #4294967295
 801aa54:	e0b6      	b.n	801abc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801aa56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa58:	889b      	ldrh	r3, [r3, #4]
 801aa5a:	b29a      	uxth	r2, r3
 801aa5c:	693b      	ldr	r3, [r7, #16]
 801aa5e:	88db      	ldrh	r3, [r3, #6]
 801aa60:	b29b      	uxth	r3, r3
 801aa62:	429a      	cmp	r2, r3
 801aa64:	d202      	bcs.n	801aa6c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801aa66:	f04f 33ff 	mov.w	r3, #4294967295
 801aa6a:	e0ab      	b.n	801abc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801aa6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	d009      	beq.n	801aa86 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801aa72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa74:	88db      	ldrh	r3, [r3, #6]
 801aa76:	b29a      	uxth	r2, r3
 801aa78:	693b      	ldr	r3, [r7, #16]
 801aa7a:	889b      	ldrh	r3, [r3, #4]
 801aa7c:	b29b      	uxth	r3, r3
 801aa7e:	429a      	cmp	r2, r3
 801aa80:	d001      	beq.n	801aa86 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801aa82:	2300      	movs	r3, #0
 801aa84:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801aa86:	693b      	ldr	r3, [r7, #16]
 801aa88:	681b      	ldr	r3, [r3, #0]
 801aa8a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801aa8c:	693b      	ldr	r3, [r7, #16]
 801aa8e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801aa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	d193      	bne.n	801a9be <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801aa96:	e000      	b.n	801aa9a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801aa98:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801aa9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa9c:	2b00      	cmp	r3, #0
 801aa9e:	d12d      	bne.n	801aafc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801aaa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aaa2:	2b00      	cmp	r3, #0
 801aaa4:	d01c      	beq.n	801aae0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801aaa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aaa8:	88db      	ldrh	r3, [r3, #6]
 801aaaa:	b29a      	uxth	r2, r3
 801aaac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aaae:	889b      	ldrh	r3, [r3, #4]
 801aab0:	b29b      	uxth	r3, r3
 801aab2:	429a      	cmp	r2, r3
 801aab4:	d906      	bls.n	801aac4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801aab6:	4b45      	ldr	r3, [pc, #276]	; (801abcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801aab8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801aabc:	4944      	ldr	r1, [pc, #272]	; (801abd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801aabe:	4845      	ldr	r0, [pc, #276]	; (801abd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801aac0:	f000 fea0 	bl	801b804 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801aac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aac6:	68ba      	ldr	r2, [r7, #8]
 801aac8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801aaca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aacc:	88db      	ldrh	r3, [r3, #6]
 801aace:	b29a      	uxth	r2, r3
 801aad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aad2:	889b      	ldrh	r3, [r3, #4]
 801aad4:	b29b      	uxth	r3, r3
 801aad6:	429a      	cmp	r2, r3
 801aad8:	d010      	beq.n	801aafc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801aada:	2300      	movs	r3, #0
 801aadc:	623b      	str	r3, [r7, #32]
 801aade:	e00d      	b.n	801aafc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801aae0:	68fb      	ldr	r3, [r7, #12]
 801aae2:	685b      	ldr	r3, [r3, #4]
 801aae4:	2b00      	cmp	r3, #0
 801aae6:	d006      	beq.n	801aaf6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801aae8:	4b38      	ldr	r3, [pc, #224]	; (801abcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801aaea:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801aaee:	493a      	ldr	r1, [pc, #232]	; (801abd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801aaf0:	4838      	ldr	r0, [pc, #224]	; (801abd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801aaf2:	f000 fe87 	bl	801b804 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801aaf6:	68fb      	ldr	r3, [r7, #12]
 801aaf8:	68ba      	ldr	r2, [r7, #8]
 801aafa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801aafc:	687b      	ldr	r3, [r7, #4]
 801aafe:	2b00      	cmp	r3, #0
 801ab00:	d105      	bne.n	801ab0e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801ab02:	68fb      	ldr	r3, [r7, #12]
 801ab04:	7f9b      	ldrb	r3, [r3, #30]
 801ab06:	f003 0301 	and.w	r3, r3, #1
 801ab0a:	2b00      	cmp	r3, #0
 801ab0c:	d059      	beq.n	801abc2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801ab0e:	6a3b      	ldr	r3, [r7, #32]
 801ab10:	2b00      	cmp	r3, #0
 801ab12:	d04f      	beq.n	801abb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801ab14:	68fb      	ldr	r3, [r7, #12]
 801ab16:	685b      	ldr	r3, [r3, #4]
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	d006      	beq.n	801ab2a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801ab1c:	68fb      	ldr	r3, [r7, #12]
 801ab1e:	685b      	ldr	r3, [r3, #4]
 801ab20:	685b      	ldr	r3, [r3, #4]
 801ab22:	889b      	ldrh	r3, [r3, #4]
 801ab24:	b29b      	uxth	r3, r3
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	d002      	beq.n	801ab30 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801ab2a:	2300      	movs	r3, #0
 801ab2c:	623b      	str	r3, [r7, #32]
 801ab2e:	e041      	b.n	801abb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801ab30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab32:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801ab34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801ab3a:	e012      	b.n	801ab62 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801ab3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab3e:	685b      	ldr	r3, [r3, #4]
 801ab40:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801ab42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab44:	88db      	ldrh	r3, [r3, #6]
 801ab46:	b29a      	uxth	r2, r3
 801ab48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab4a:	889b      	ldrh	r3, [r3, #4]
 801ab4c:	b29b      	uxth	r3, r3
 801ab4e:	429a      	cmp	r2, r3
 801ab50:	d002      	beq.n	801ab58 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801ab52:	2300      	movs	r3, #0
 801ab54:	623b      	str	r3, [r7, #32]
            break;
 801ab56:	e007      	b.n	801ab68 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801ab58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab5a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801ab5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab5e:	681b      	ldr	r3, [r3, #0]
 801ab60:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801ab62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	d1e9      	bne.n	801ab3c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801ab68:	6a3b      	ldr	r3, [r7, #32]
 801ab6a:	2b00      	cmp	r3, #0
 801ab6c:	d022      	beq.n	801abb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801ab6e:	68fb      	ldr	r3, [r7, #12]
 801ab70:	685b      	ldr	r3, [r3, #4]
 801ab72:	2b00      	cmp	r3, #0
 801ab74:	d106      	bne.n	801ab84 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801ab76:	4b15      	ldr	r3, [pc, #84]	; (801abcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ab78:	f240 12df 	movw	r2, #479	; 0x1df
 801ab7c:	4917      	ldr	r1, [pc, #92]	; (801abdc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ab7e:	4815      	ldr	r0, [pc, #84]	; (801abd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ab80:	f000 fe40 	bl	801b804 <iprintf>
          LWIP_ASSERT("sanity check",
 801ab84:	68fb      	ldr	r3, [r7, #12]
 801ab86:	685b      	ldr	r3, [r3, #4]
 801ab88:	685b      	ldr	r3, [r3, #4]
 801ab8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ab8c:	429a      	cmp	r2, r3
 801ab8e:	d106      	bne.n	801ab9e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801ab90:	4b0e      	ldr	r3, [pc, #56]	; (801abcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ab92:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801ab96:	4911      	ldr	r1, [pc, #68]	; (801abdc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ab98:	480e      	ldr	r0, [pc, #56]	; (801abd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ab9a:	f000 fe33 	bl	801b804 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801ab9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aba0:	681b      	ldr	r3, [r3, #0]
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	d006      	beq.n	801abb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801aba6:	4b09      	ldr	r3, [pc, #36]	; (801abcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801aba8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801abac:	490c      	ldr	r1, [pc, #48]	; (801abe0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801abae:	4809      	ldr	r0, [pc, #36]	; (801abd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801abb0:	f000 fe28 	bl	801b804 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801abb4:	6a3b      	ldr	r3, [r7, #32]
 801abb6:	2b00      	cmp	r3, #0
 801abb8:	bf14      	ite	ne
 801abba:	2301      	movne	r3, #1
 801abbc:	2300      	moveq	r3, #0
 801abbe:	b2db      	uxtb	r3, r3
 801abc0:	e000      	b.n	801abc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801abc2:	2300      	movs	r3, #0
}
 801abc4:	4618      	mov	r0, r3
 801abc6:	3730      	adds	r7, #48	; 0x30
 801abc8:	46bd      	mov	sp, r7
 801abca:	bd80      	pop	{r7, pc}
 801abcc:	08020160 	.word	0x08020160
 801abd0:	08020244 	.word	0x08020244
 801abd4:	080201a8 	.word	0x080201a8
 801abd8:	08020264 	.word	0x08020264
 801abdc:	0802029c 	.word	0x0802029c
 801abe0:	080202ac 	.word	0x080202ac

0801abe4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801abe4:	b580      	push	{r7, lr}
 801abe6:	b08e      	sub	sp, #56	; 0x38
 801abe8:	af00      	add	r7, sp, #0
 801abea:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	685b      	ldr	r3, [r3, #4]
 801abf0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801abf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abf4:	781b      	ldrb	r3, [r3, #0]
 801abf6:	f003 030f 	and.w	r3, r3, #15
 801abfa:	b2db      	uxtb	r3, r3
 801abfc:	009b      	lsls	r3, r3, #2
 801abfe:	b2db      	uxtb	r3, r3
 801ac00:	2b14      	cmp	r3, #20
 801ac02:	f040 8171 	bne.w	801aee8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801ac06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac08:	88db      	ldrh	r3, [r3, #6]
 801ac0a:	b29b      	uxth	r3, r3
 801ac0c:	4618      	mov	r0, r3
 801ac0e:	f7f5 fe3f 	bl	8010890 <lwip_htons>
 801ac12:	4603      	mov	r3, r0
 801ac14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ac18:	b29b      	uxth	r3, r3
 801ac1a:	00db      	lsls	r3, r3, #3
 801ac1c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801ac1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac20:	885b      	ldrh	r3, [r3, #2]
 801ac22:	b29b      	uxth	r3, r3
 801ac24:	4618      	mov	r0, r3
 801ac26:	f7f5 fe33 	bl	8010890 <lwip_htons>
 801ac2a:	4603      	mov	r3, r0
 801ac2c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801ac2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac30:	781b      	ldrb	r3, [r3, #0]
 801ac32:	f003 030f 	and.w	r3, r3, #15
 801ac36:	b2db      	uxtb	r3, r3
 801ac38:	009b      	lsls	r3, r3, #2
 801ac3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801ac3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ac42:	b29b      	uxth	r3, r3
 801ac44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ac46:	429a      	cmp	r2, r3
 801ac48:	f0c0 8150 	bcc.w	801aeec <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801ac4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ac50:	b29b      	uxth	r3, r3
 801ac52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ac54:	1ad3      	subs	r3, r2, r3
 801ac56:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801ac58:	6878      	ldr	r0, [r7, #4]
 801ac5a:	f7f7 facb 	bl	80121f4 <pbuf_clen>
 801ac5e:	4603      	mov	r3, r0
 801ac60:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801ac62:	4b8c      	ldr	r3, [pc, #560]	; (801ae94 <ip4_reass+0x2b0>)
 801ac64:	881b      	ldrh	r3, [r3, #0]
 801ac66:	461a      	mov	r2, r3
 801ac68:	8c3b      	ldrh	r3, [r7, #32]
 801ac6a:	4413      	add	r3, r2
 801ac6c:	2b0a      	cmp	r3, #10
 801ac6e:	dd10      	ble.n	801ac92 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801ac70:	8c3b      	ldrh	r3, [r7, #32]
 801ac72:	4619      	mov	r1, r3
 801ac74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ac76:	f7ff fd81 	bl	801a77c <ip_reass_remove_oldest_datagram>
 801ac7a:	4603      	mov	r3, r0
 801ac7c:	2b00      	cmp	r3, #0
 801ac7e:	f000 8137 	beq.w	801aef0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801ac82:	4b84      	ldr	r3, [pc, #528]	; (801ae94 <ip4_reass+0x2b0>)
 801ac84:	881b      	ldrh	r3, [r3, #0]
 801ac86:	461a      	mov	r2, r3
 801ac88:	8c3b      	ldrh	r3, [r7, #32]
 801ac8a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801ac8c:	2b0a      	cmp	r3, #10
 801ac8e:	f300 812f 	bgt.w	801aef0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801ac92:	4b81      	ldr	r3, [pc, #516]	; (801ae98 <ip4_reass+0x2b4>)
 801ac94:	681b      	ldr	r3, [r3, #0]
 801ac96:	633b      	str	r3, [r7, #48]	; 0x30
 801ac98:	e015      	b.n	801acc6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801ac9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac9c:	695a      	ldr	r2, [r3, #20]
 801ac9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aca0:	68db      	ldr	r3, [r3, #12]
 801aca2:	429a      	cmp	r2, r3
 801aca4:	d10c      	bne.n	801acc0 <ip4_reass+0xdc>
 801aca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aca8:	699a      	ldr	r2, [r3, #24]
 801acaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acac:	691b      	ldr	r3, [r3, #16]
 801acae:	429a      	cmp	r2, r3
 801acb0:	d106      	bne.n	801acc0 <ip4_reass+0xdc>
 801acb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acb4:	899a      	ldrh	r2, [r3, #12]
 801acb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acb8:	889b      	ldrh	r3, [r3, #4]
 801acba:	b29b      	uxth	r3, r3
 801acbc:	429a      	cmp	r2, r3
 801acbe:	d006      	beq.n	801acce <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801acc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acc2:	681b      	ldr	r3, [r3, #0]
 801acc4:	633b      	str	r3, [r7, #48]	; 0x30
 801acc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acc8:	2b00      	cmp	r3, #0
 801acca:	d1e6      	bne.n	801ac9a <ip4_reass+0xb6>
 801accc:	e000      	b.n	801acd0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801acce:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801acd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	d109      	bne.n	801acea <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801acd6:	8c3b      	ldrh	r3, [r7, #32]
 801acd8:	4619      	mov	r1, r3
 801acda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801acdc:	f7ff fdb0 	bl	801a840 <ip_reass_enqueue_new_datagram>
 801ace0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801ace2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ace4:	2b00      	cmp	r3, #0
 801ace6:	d11c      	bne.n	801ad22 <ip4_reass+0x13e>
      goto nullreturn;
 801ace8:	e105      	b.n	801aef6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801acea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acec:	88db      	ldrh	r3, [r3, #6]
 801acee:	b29b      	uxth	r3, r3
 801acf0:	4618      	mov	r0, r3
 801acf2:	f7f5 fdcd 	bl	8010890 <lwip_htons>
 801acf6:	4603      	mov	r3, r0
 801acf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	d110      	bne.n	801ad22 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801ad00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad02:	89db      	ldrh	r3, [r3, #14]
 801ad04:	4618      	mov	r0, r3
 801ad06:	f7f5 fdc3 	bl	8010890 <lwip_htons>
 801ad0a:	4603      	mov	r3, r0
 801ad0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	d006      	beq.n	801ad22 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801ad14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad16:	3308      	adds	r3, #8
 801ad18:	2214      	movs	r2, #20
 801ad1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801ad1c:	4618      	mov	r0, r3
 801ad1e:	f000 fd5b 	bl	801b7d8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801ad22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad24:	88db      	ldrh	r3, [r3, #6]
 801ad26:	b29b      	uxth	r3, r3
 801ad28:	f003 0320 	and.w	r3, r3, #32
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	bf0c      	ite	eq
 801ad30:	2301      	moveq	r3, #1
 801ad32:	2300      	movne	r3, #0
 801ad34:	b2db      	uxtb	r3, r3
 801ad36:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801ad38:	69fb      	ldr	r3, [r7, #28]
 801ad3a:	2b00      	cmp	r3, #0
 801ad3c:	d00e      	beq.n	801ad5c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801ad3e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801ad40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ad42:	4413      	add	r3, r2
 801ad44:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801ad46:	8b7a      	ldrh	r2, [r7, #26]
 801ad48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801ad4a:	429a      	cmp	r2, r3
 801ad4c:	f0c0 80a0 	bcc.w	801ae90 <ip4_reass+0x2ac>
 801ad50:	8b7b      	ldrh	r3, [r7, #26]
 801ad52:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801ad56:	4293      	cmp	r3, r2
 801ad58:	f200 809a 	bhi.w	801ae90 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801ad5c:	69fa      	ldr	r2, [r7, #28]
 801ad5e:	6879      	ldr	r1, [r7, #4]
 801ad60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ad62:	f7ff fdd5 	bl	801a910 <ip_reass_chain_frag_into_datagram_and_validate>
 801ad66:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801ad68:	697b      	ldr	r3, [r7, #20]
 801ad6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad6e:	f000 809b 	beq.w	801aea8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801ad72:	4b48      	ldr	r3, [pc, #288]	; (801ae94 <ip4_reass+0x2b0>)
 801ad74:	881a      	ldrh	r2, [r3, #0]
 801ad76:	8c3b      	ldrh	r3, [r7, #32]
 801ad78:	4413      	add	r3, r2
 801ad7a:	b29a      	uxth	r2, r3
 801ad7c:	4b45      	ldr	r3, [pc, #276]	; (801ae94 <ip4_reass+0x2b0>)
 801ad7e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801ad80:	69fb      	ldr	r3, [r7, #28]
 801ad82:	2b00      	cmp	r3, #0
 801ad84:	d00d      	beq.n	801ada2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801ad86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801ad88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ad8a:	4413      	add	r3, r2
 801ad8c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801ad8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad90:	8a7a      	ldrh	r2, [r7, #18]
 801ad92:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801ad94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad96:	7f9b      	ldrb	r3, [r3, #30]
 801ad98:	f043 0301 	orr.w	r3, r3, #1
 801ad9c:	b2da      	uxtb	r2, r3
 801ad9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ada0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801ada2:	697b      	ldr	r3, [r7, #20]
 801ada4:	2b01      	cmp	r3, #1
 801ada6:	d171      	bne.n	801ae8c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801ada8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adaa:	8b9b      	ldrh	r3, [r3, #28]
 801adac:	3314      	adds	r3, #20
 801adae:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801adb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adb2:	685b      	ldr	r3, [r3, #4]
 801adb4:	685b      	ldr	r3, [r3, #4]
 801adb6:	681b      	ldr	r3, [r3, #0]
 801adb8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801adba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adbc:	685b      	ldr	r3, [r3, #4]
 801adbe:	685b      	ldr	r3, [r3, #4]
 801adc0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801adc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adc4:	3308      	adds	r3, #8
 801adc6:	2214      	movs	r2, #20
 801adc8:	4619      	mov	r1, r3
 801adca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801adcc:	f000 fd04 	bl	801b7d8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801add0:	8a3b      	ldrh	r3, [r7, #16]
 801add2:	4618      	mov	r0, r3
 801add4:	f7f5 fd5c 	bl	8010890 <lwip_htons>
 801add8:	4603      	mov	r3, r0
 801adda:	461a      	mov	r2, r3
 801addc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adde:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801ade0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ade2:	2200      	movs	r2, #0
 801ade4:	719a      	strb	r2, [r3, #6]
 801ade6:	2200      	movs	r2, #0
 801ade8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801adea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adec:	2200      	movs	r2, #0
 801adee:	729a      	strb	r2, [r3, #10]
 801adf0:	2200      	movs	r2, #0
 801adf2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801adf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adf6:	685b      	ldr	r3, [r3, #4]
 801adf8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801adfa:	e00d      	b.n	801ae18 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801adfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801adfe:	685b      	ldr	r3, [r3, #4]
 801ae00:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801ae02:	2114      	movs	r1, #20
 801ae04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801ae06:	f7f7 f8af 	bl	8011f68 <pbuf_remove_header>
      pbuf_cat(p, r);
 801ae0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ae0c:	6878      	ldr	r0, [r7, #4]
 801ae0e:	f7f7 fa31 	bl	8012274 <pbuf_cat>
      r = iprh->next_pbuf;
 801ae12:	68fb      	ldr	r3, [r7, #12]
 801ae14:	681b      	ldr	r3, [r3, #0]
 801ae16:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801ae18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ae1a:	2b00      	cmp	r3, #0
 801ae1c:	d1ee      	bne.n	801adfc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801ae1e:	4b1e      	ldr	r3, [pc, #120]	; (801ae98 <ip4_reass+0x2b4>)
 801ae20:	681b      	ldr	r3, [r3, #0]
 801ae22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ae24:	429a      	cmp	r2, r3
 801ae26:	d102      	bne.n	801ae2e <ip4_reass+0x24a>
      ipr_prev = NULL;
 801ae28:	2300      	movs	r3, #0
 801ae2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ae2c:	e010      	b.n	801ae50 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801ae2e:	4b1a      	ldr	r3, [pc, #104]	; (801ae98 <ip4_reass+0x2b4>)
 801ae30:	681b      	ldr	r3, [r3, #0]
 801ae32:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ae34:	e007      	b.n	801ae46 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801ae36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae38:	681b      	ldr	r3, [r3, #0]
 801ae3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ae3c:	429a      	cmp	r2, r3
 801ae3e:	d006      	beq.n	801ae4e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801ae40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae42:	681b      	ldr	r3, [r3, #0]
 801ae44:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ae46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae48:	2b00      	cmp	r3, #0
 801ae4a:	d1f4      	bne.n	801ae36 <ip4_reass+0x252>
 801ae4c:	e000      	b.n	801ae50 <ip4_reass+0x26c>
          break;
 801ae4e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801ae50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ae52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ae54:	f7ff fd2e 	bl	801a8b4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801ae58:	6878      	ldr	r0, [r7, #4]
 801ae5a:	f7f7 f9cb 	bl	80121f4 <pbuf_clen>
 801ae5e:	4603      	mov	r3, r0
 801ae60:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801ae62:	4b0c      	ldr	r3, [pc, #48]	; (801ae94 <ip4_reass+0x2b0>)
 801ae64:	881b      	ldrh	r3, [r3, #0]
 801ae66:	8c3a      	ldrh	r2, [r7, #32]
 801ae68:	429a      	cmp	r2, r3
 801ae6a:	d906      	bls.n	801ae7a <ip4_reass+0x296>
 801ae6c:	4b0b      	ldr	r3, [pc, #44]	; (801ae9c <ip4_reass+0x2b8>)
 801ae6e:	f240 229b 	movw	r2, #667	; 0x29b
 801ae72:	490b      	ldr	r1, [pc, #44]	; (801aea0 <ip4_reass+0x2bc>)
 801ae74:	480b      	ldr	r0, [pc, #44]	; (801aea4 <ip4_reass+0x2c0>)
 801ae76:	f000 fcc5 	bl	801b804 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801ae7a:	4b06      	ldr	r3, [pc, #24]	; (801ae94 <ip4_reass+0x2b0>)
 801ae7c:	881a      	ldrh	r2, [r3, #0]
 801ae7e:	8c3b      	ldrh	r3, [r7, #32]
 801ae80:	1ad3      	subs	r3, r2, r3
 801ae82:	b29a      	uxth	r2, r3
 801ae84:	4b03      	ldr	r3, [pc, #12]	; (801ae94 <ip4_reass+0x2b0>)
 801ae86:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801ae88:	687b      	ldr	r3, [r7, #4]
 801ae8a:	e038      	b.n	801aefe <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801ae8c:	2300      	movs	r3, #0
 801ae8e:	e036      	b.n	801aefe <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801ae90:	bf00      	nop
 801ae92:	e00a      	b.n	801aeaa <ip4_reass+0x2c6>
 801ae94:	200111e4 	.word	0x200111e4
 801ae98:	200111e0 	.word	0x200111e0
 801ae9c:	08020160 	.word	0x08020160
 801aea0:	080202d0 	.word	0x080202d0
 801aea4:	080201a8 	.word	0x080201a8
    goto nullreturn_ipr;
 801aea8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801aeaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	d106      	bne.n	801aebe <ip4_reass+0x2da>
 801aeb0:	4b15      	ldr	r3, [pc, #84]	; (801af08 <ip4_reass+0x324>)
 801aeb2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801aeb6:	4915      	ldr	r1, [pc, #84]	; (801af0c <ip4_reass+0x328>)
 801aeb8:	4815      	ldr	r0, [pc, #84]	; (801af10 <ip4_reass+0x32c>)
 801aeba:	f000 fca3 	bl	801b804 <iprintf>
  if (ipr->p == NULL) {
 801aebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aec0:	685b      	ldr	r3, [r3, #4]
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	d116      	bne.n	801aef4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801aec6:	4b13      	ldr	r3, [pc, #76]	; (801af14 <ip4_reass+0x330>)
 801aec8:	681b      	ldr	r3, [r3, #0]
 801aeca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aecc:	429a      	cmp	r2, r3
 801aece:	d006      	beq.n	801aede <ip4_reass+0x2fa>
 801aed0:	4b0d      	ldr	r3, [pc, #52]	; (801af08 <ip4_reass+0x324>)
 801aed2:	f240 22ab 	movw	r2, #683	; 0x2ab
 801aed6:	4910      	ldr	r1, [pc, #64]	; (801af18 <ip4_reass+0x334>)
 801aed8:	480d      	ldr	r0, [pc, #52]	; (801af10 <ip4_reass+0x32c>)
 801aeda:	f000 fc93 	bl	801b804 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801aede:	2100      	movs	r1, #0
 801aee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801aee2:	f7ff fce7 	bl	801a8b4 <ip_reass_dequeue_datagram>
 801aee6:	e006      	b.n	801aef6 <ip4_reass+0x312>
    goto nullreturn;
 801aee8:	bf00      	nop
 801aeea:	e004      	b.n	801aef6 <ip4_reass+0x312>
    goto nullreturn;
 801aeec:	bf00      	nop
 801aeee:	e002      	b.n	801aef6 <ip4_reass+0x312>
      goto nullreturn;
 801aef0:	bf00      	nop
 801aef2:	e000      	b.n	801aef6 <ip4_reass+0x312>
  }

nullreturn:
 801aef4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801aef6:	6878      	ldr	r0, [r7, #4]
 801aef8:	f7f7 f8ee 	bl	80120d8 <pbuf_free>
  return NULL;
 801aefc:	2300      	movs	r3, #0
}
 801aefe:	4618      	mov	r0, r3
 801af00:	3738      	adds	r7, #56	; 0x38
 801af02:	46bd      	mov	sp, r7
 801af04:	bd80      	pop	{r7, pc}
 801af06:	bf00      	nop
 801af08:	08020160 	.word	0x08020160
 801af0c:	080202ec 	.word	0x080202ec
 801af10:	080201a8 	.word	0x080201a8
 801af14:	200111e0 	.word	0x200111e0
 801af18:	080202f8 	.word	0x080202f8

0801af1c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801af1c:	b580      	push	{r7, lr}
 801af1e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801af20:	2005      	movs	r0, #5
 801af22:	f7f6 f98d 	bl	8011240 <memp_malloc>
 801af26:	4603      	mov	r3, r0
}
 801af28:	4618      	mov	r0, r3
 801af2a:	bd80      	pop	{r7, pc}

0801af2c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801af2c:	b580      	push	{r7, lr}
 801af2e:	b082      	sub	sp, #8
 801af30:	af00      	add	r7, sp, #0
 801af32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	2b00      	cmp	r3, #0
 801af38:	d106      	bne.n	801af48 <ip_frag_free_pbuf_custom_ref+0x1c>
 801af3a:	4b07      	ldr	r3, [pc, #28]	; (801af58 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801af3c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801af40:	4906      	ldr	r1, [pc, #24]	; (801af5c <ip_frag_free_pbuf_custom_ref+0x30>)
 801af42:	4807      	ldr	r0, [pc, #28]	; (801af60 <ip_frag_free_pbuf_custom_ref+0x34>)
 801af44:	f000 fc5e 	bl	801b804 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801af48:	6879      	ldr	r1, [r7, #4]
 801af4a:	2005      	movs	r0, #5
 801af4c:	f7f6 f9ee 	bl	801132c <memp_free>
}
 801af50:	bf00      	nop
 801af52:	3708      	adds	r7, #8
 801af54:	46bd      	mov	sp, r7
 801af56:	bd80      	pop	{r7, pc}
 801af58:	08020160 	.word	0x08020160
 801af5c:	08020318 	.word	0x08020318
 801af60:	080201a8 	.word	0x080201a8

0801af64 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801af64:	b580      	push	{r7, lr}
 801af66:	b084      	sub	sp, #16
 801af68:	af00      	add	r7, sp, #0
 801af6a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801af6c:	687b      	ldr	r3, [r7, #4]
 801af6e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801af70:	68fb      	ldr	r3, [r7, #12]
 801af72:	2b00      	cmp	r3, #0
 801af74:	d106      	bne.n	801af84 <ipfrag_free_pbuf_custom+0x20>
 801af76:	4b11      	ldr	r3, [pc, #68]	; (801afbc <ipfrag_free_pbuf_custom+0x58>)
 801af78:	f240 22ce 	movw	r2, #718	; 0x2ce
 801af7c:	4910      	ldr	r1, [pc, #64]	; (801afc0 <ipfrag_free_pbuf_custom+0x5c>)
 801af7e:	4811      	ldr	r0, [pc, #68]	; (801afc4 <ipfrag_free_pbuf_custom+0x60>)
 801af80:	f000 fc40 	bl	801b804 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801af84:	68fa      	ldr	r2, [r7, #12]
 801af86:	687b      	ldr	r3, [r7, #4]
 801af88:	429a      	cmp	r2, r3
 801af8a:	d006      	beq.n	801af9a <ipfrag_free_pbuf_custom+0x36>
 801af8c:	4b0b      	ldr	r3, [pc, #44]	; (801afbc <ipfrag_free_pbuf_custom+0x58>)
 801af8e:	f240 22cf 	movw	r2, #719	; 0x2cf
 801af92:	490d      	ldr	r1, [pc, #52]	; (801afc8 <ipfrag_free_pbuf_custom+0x64>)
 801af94:	480b      	ldr	r0, [pc, #44]	; (801afc4 <ipfrag_free_pbuf_custom+0x60>)
 801af96:	f000 fc35 	bl	801b804 <iprintf>
  if (pcr->original != NULL) {
 801af9a:	68fb      	ldr	r3, [r7, #12]
 801af9c:	695b      	ldr	r3, [r3, #20]
 801af9e:	2b00      	cmp	r3, #0
 801afa0:	d004      	beq.n	801afac <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801afa2:	68fb      	ldr	r3, [r7, #12]
 801afa4:	695b      	ldr	r3, [r3, #20]
 801afa6:	4618      	mov	r0, r3
 801afa8:	f7f7 f896 	bl	80120d8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801afac:	68f8      	ldr	r0, [r7, #12]
 801afae:	f7ff ffbd 	bl	801af2c <ip_frag_free_pbuf_custom_ref>
}
 801afb2:	bf00      	nop
 801afb4:	3710      	adds	r7, #16
 801afb6:	46bd      	mov	sp, r7
 801afb8:	bd80      	pop	{r7, pc}
 801afba:	bf00      	nop
 801afbc:	08020160 	.word	0x08020160
 801afc0:	08020324 	.word	0x08020324
 801afc4:	080201a8 	.word	0x080201a8
 801afc8:	08020330 	.word	0x08020330

0801afcc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801afcc:	b580      	push	{r7, lr}
 801afce:	b094      	sub	sp, #80	; 0x50
 801afd0:	af02      	add	r7, sp, #8
 801afd2:	60f8      	str	r0, [r7, #12]
 801afd4:	60b9      	str	r1, [r7, #8]
 801afd6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801afd8:	2300      	movs	r3, #0
 801afda:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801afde:	68bb      	ldr	r3, [r7, #8]
 801afe0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801afe2:	3b14      	subs	r3, #20
 801afe4:	2b00      	cmp	r3, #0
 801afe6:	da00      	bge.n	801afea <ip4_frag+0x1e>
 801afe8:	3307      	adds	r3, #7
 801afea:	10db      	asrs	r3, r3, #3
 801afec:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801afee:	2314      	movs	r3, #20
 801aff0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801aff2:	68fb      	ldr	r3, [r7, #12]
 801aff4:	685b      	ldr	r3, [r3, #4]
 801aff6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801aff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801affa:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801affc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801affe:	781b      	ldrb	r3, [r3, #0]
 801b000:	f003 030f 	and.w	r3, r3, #15
 801b004:	b2db      	uxtb	r3, r3
 801b006:	009b      	lsls	r3, r3, #2
 801b008:	b2db      	uxtb	r3, r3
 801b00a:	2b14      	cmp	r3, #20
 801b00c:	d002      	beq.n	801b014 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801b00e:	f06f 0305 	mvn.w	r3, #5
 801b012:	e110      	b.n	801b236 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801b014:	68fb      	ldr	r3, [r7, #12]
 801b016:	895b      	ldrh	r3, [r3, #10]
 801b018:	2b13      	cmp	r3, #19
 801b01a:	d809      	bhi.n	801b030 <ip4_frag+0x64>
 801b01c:	4b88      	ldr	r3, [pc, #544]	; (801b240 <ip4_frag+0x274>)
 801b01e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801b022:	4988      	ldr	r1, [pc, #544]	; (801b244 <ip4_frag+0x278>)
 801b024:	4888      	ldr	r0, [pc, #544]	; (801b248 <ip4_frag+0x27c>)
 801b026:	f000 fbed 	bl	801b804 <iprintf>
 801b02a:	f06f 0305 	mvn.w	r3, #5
 801b02e:	e102      	b.n	801b236 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801b030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b032:	88db      	ldrh	r3, [r3, #6]
 801b034:	b29b      	uxth	r3, r3
 801b036:	4618      	mov	r0, r3
 801b038:	f7f5 fc2a 	bl	8010890 <lwip_htons>
 801b03c:	4603      	mov	r3, r0
 801b03e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801b040:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b042:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b046:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801b04a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b04c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b050:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801b052:	68fb      	ldr	r3, [r7, #12]
 801b054:	891b      	ldrh	r3, [r3, #8]
 801b056:	3b14      	subs	r3, #20
 801b058:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801b05c:	e0e1      	b.n	801b222 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801b05e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b060:	00db      	lsls	r3, r3, #3
 801b062:	b29b      	uxth	r3, r3
 801b064:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b068:	4293      	cmp	r3, r2
 801b06a:	bf28      	it	cs
 801b06c:	4613      	movcs	r3, r2
 801b06e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801b070:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b074:	2114      	movs	r1, #20
 801b076:	200e      	movs	r0, #14
 801b078:	f7f6 fd18 	bl	8011aac <pbuf_alloc>
 801b07c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801b07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b080:	2b00      	cmp	r3, #0
 801b082:	f000 80d5 	beq.w	801b230 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801b086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b088:	895b      	ldrh	r3, [r3, #10]
 801b08a:	2b13      	cmp	r3, #19
 801b08c:	d806      	bhi.n	801b09c <ip4_frag+0xd0>
 801b08e:	4b6c      	ldr	r3, [pc, #432]	; (801b240 <ip4_frag+0x274>)
 801b090:	f44f 7249 	mov.w	r2, #804	; 0x324
 801b094:	496d      	ldr	r1, [pc, #436]	; (801b24c <ip4_frag+0x280>)
 801b096:	486c      	ldr	r0, [pc, #432]	; (801b248 <ip4_frag+0x27c>)
 801b098:	f000 fbb4 	bl	801b804 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801b09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b09e:	685b      	ldr	r3, [r3, #4]
 801b0a0:	2214      	movs	r2, #20
 801b0a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b0a4:	4618      	mov	r0, r3
 801b0a6:	f000 fb97 	bl	801b7d8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801b0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0ac:	685b      	ldr	r3, [r3, #4]
 801b0ae:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801b0b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b0b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801b0b6:	e064      	b.n	801b182 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801b0b8:	68fb      	ldr	r3, [r7, #12]
 801b0ba:	895a      	ldrh	r2, [r3, #10]
 801b0bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b0be:	1ad3      	subs	r3, r2, r3
 801b0c0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801b0c2:	68fb      	ldr	r3, [r7, #12]
 801b0c4:	895b      	ldrh	r3, [r3, #10]
 801b0c6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b0c8:	429a      	cmp	r2, r3
 801b0ca:	d906      	bls.n	801b0da <ip4_frag+0x10e>
 801b0cc:	4b5c      	ldr	r3, [pc, #368]	; (801b240 <ip4_frag+0x274>)
 801b0ce:	f240 322d 	movw	r2, #813	; 0x32d
 801b0d2:	495f      	ldr	r1, [pc, #380]	; (801b250 <ip4_frag+0x284>)
 801b0d4:	485c      	ldr	r0, [pc, #368]	; (801b248 <ip4_frag+0x27c>)
 801b0d6:	f000 fb95 	bl	801b804 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801b0da:	8bfa      	ldrh	r2, [r7, #30]
 801b0dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b0e0:	4293      	cmp	r3, r2
 801b0e2:	bf28      	it	cs
 801b0e4:	4613      	movcs	r3, r2
 801b0e6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801b0ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b0ee:	2b00      	cmp	r3, #0
 801b0f0:	d105      	bne.n	801b0fe <ip4_frag+0x132>
        poff = 0;
 801b0f2:	2300      	movs	r3, #0
 801b0f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801b0f6:	68fb      	ldr	r3, [r7, #12]
 801b0f8:	681b      	ldr	r3, [r3, #0]
 801b0fa:	60fb      	str	r3, [r7, #12]
        continue;
 801b0fc:	e041      	b.n	801b182 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801b0fe:	f7ff ff0d 	bl	801af1c <ip_frag_alloc_pbuf_custom_ref>
 801b102:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801b104:	69bb      	ldr	r3, [r7, #24]
 801b106:	2b00      	cmp	r3, #0
 801b108:	d103      	bne.n	801b112 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801b10a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b10c:	f7f6 ffe4 	bl	80120d8 <pbuf_free>
        goto memerr;
 801b110:	e08f      	b.n	801b232 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b112:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801b114:	68fb      	ldr	r3, [r7, #12]
 801b116:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b118:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b11a:	4413      	add	r3, r2
 801b11c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801b120:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801b124:	9201      	str	r2, [sp, #4]
 801b126:	9300      	str	r3, [sp, #0]
 801b128:	4603      	mov	r3, r0
 801b12a:	2241      	movs	r2, #65	; 0x41
 801b12c:	2000      	movs	r0, #0
 801b12e:	f7f6 fde7 	bl	8011d00 <pbuf_alloced_custom>
 801b132:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801b134:	697b      	ldr	r3, [r7, #20]
 801b136:	2b00      	cmp	r3, #0
 801b138:	d106      	bne.n	801b148 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801b13a:	69b8      	ldr	r0, [r7, #24]
 801b13c:	f7ff fef6 	bl	801af2c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801b140:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b142:	f7f6 ffc9 	bl	80120d8 <pbuf_free>
        goto memerr;
 801b146:	e074      	b.n	801b232 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801b148:	68f8      	ldr	r0, [r7, #12]
 801b14a:	f7f7 f86b 	bl	8012224 <pbuf_ref>
      pcr->original = p;
 801b14e:	69bb      	ldr	r3, [r7, #24]
 801b150:	68fa      	ldr	r2, [r7, #12]
 801b152:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801b154:	69bb      	ldr	r3, [r7, #24]
 801b156:	4a3f      	ldr	r2, [pc, #252]	; (801b254 <ip4_frag+0x288>)
 801b158:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801b15a:	6979      	ldr	r1, [r7, #20]
 801b15c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b15e:	f7f7 f889 	bl	8012274 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801b162:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801b166:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b16a:	1ad3      	subs	r3, r2, r3
 801b16c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801b170:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b174:	2b00      	cmp	r3, #0
 801b176:	d004      	beq.n	801b182 <ip4_frag+0x1b6>
        poff = 0;
 801b178:	2300      	movs	r3, #0
 801b17a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801b17c:	68fb      	ldr	r3, [r7, #12]
 801b17e:	681b      	ldr	r3, [r3, #0]
 801b180:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801b182:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b186:	2b00      	cmp	r3, #0
 801b188:	d196      	bne.n	801b0b8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801b18a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b18c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b190:	4413      	add	r3, r2
 801b192:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801b194:	68bb      	ldr	r3, [r7, #8]
 801b196:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b198:	f1a3 0213 	sub.w	r2, r3, #19
 801b19c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b1a0:	429a      	cmp	r2, r3
 801b1a2:	bfcc      	ite	gt
 801b1a4:	2301      	movgt	r3, #1
 801b1a6:	2300      	movle	r3, #0
 801b1a8:	b2db      	uxtb	r3, r3
 801b1aa:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801b1ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801b1b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b1b4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801b1b6:	6a3b      	ldr	r3, [r7, #32]
 801b1b8:	2b00      	cmp	r3, #0
 801b1ba:	d002      	beq.n	801b1c2 <ip4_frag+0x1f6>
 801b1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b1be:	2b00      	cmp	r3, #0
 801b1c0:	d003      	beq.n	801b1ca <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801b1c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b1c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801b1c8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801b1ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b1cc:	4618      	mov	r0, r3
 801b1ce:	f7f5 fb5f 	bl	8010890 <lwip_htons>
 801b1d2:	4603      	mov	r3, r0
 801b1d4:	461a      	mov	r2, r3
 801b1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b1d8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801b1da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b1dc:	3314      	adds	r3, #20
 801b1de:	b29b      	uxth	r3, r3
 801b1e0:	4618      	mov	r0, r3
 801b1e2:	f7f5 fb55 	bl	8010890 <lwip_htons>
 801b1e6:	4603      	mov	r3, r0
 801b1e8:	461a      	mov	r2, r3
 801b1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b1ec:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801b1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b1f0:	2200      	movs	r2, #0
 801b1f2:	729a      	strb	r2, [r3, #10]
 801b1f4:	2200      	movs	r2, #0
 801b1f6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801b1f8:	68bb      	ldr	r3, [r7, #8]
 801b1fa:	695b      	ldr	r3, [r3, #20]
 801b1fc:	687a      	ldr	r2, [r7, #4]
 801b1fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b200:	68b8      	ldr	r0, [r7, #8]
 801b202:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801b204:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b206:	f7f6 ff67 	bl	80120d8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801b20a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b20e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b210:	1ad3      	subs	r3, r2, r3
 801b212:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801b216:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801b21a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b21c:	4413      	add	r3, r2
 801b21e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801b222:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b226:	2b00      	cmp	r3, #0
 801b228:	f47f af19 	bne.w	801b05e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801b22c:	2300      	movs	r3, #0
 801b22e:	e002      	b.n	801b236 <ip4_frag+0x26a>
      goto memerr;
 801b230:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801b232:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b236:	4618      	mov	r0, r3
 801b238:	3748      	adds	r7, #72	; 0x48
 801b23a:	46bd      	mov	sp, r7
 801b23c:	bd80      	pop	{r7, pc}
 801b23e:	bf00      	nop
 801b240:	08020160 	.word	0x08020160
 801b244:	0802033c 	.word	0x0802033c
 801b248:	080201a8 	.word	0x080201a8
 801b24c:	08020358 	.word	0x08020358
 801b250:	08020378 	.word	0x08020378
 801b254:	0801af65 	.word	0x0801af65

0801b258 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801b258:	b580      	push	{r7, lr}
 801b25a:	b086      	sub	sp, #24
 801b25c:	af00      	add	r7, sp, #0
 801b25e:	6078      	str	r0, [r7, #4]
 801b260:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801b262:	230e      	movs	r3, #14
 801b264:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	895b      	ldrh	r3, [r3, #10]
 801b26a:	2b0e      	cmp	r3, #14
 801b26c:	d96e      	bls.n	801b34c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	7bdb      	ldrb	r3, [r3, #15]
 801b272:	2b00      	cmp	r3, #0
 801b274:	d106      	bne.n	801b284 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801b276:	683b      	ldr	r3, [r7, #0]
 801b278:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b27c:	3301      	adds	r3, #1
 801b27e:	b2da      	uxtb	r2, r3
 801b280:	687b      	ldr	r3, [r7, #4]
 801b282:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	685b      	ldr	r3, [r3, #4]
 801b288:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801b28a:	693b      	ldr	r3, [r7, #16]
 801b28c:	7b1a      	ldrb	r2, [r3, #12]
 801b28e:	7b5b      	ldrb	r3, [r3, #13]
 801b290:	021b      	lsls	r3, r3, #8
 801b292:	4313      	orrs	r3, r2
 801b294:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801b296:	693b      	ldr	r3, [r7, #16]
 801b298:	781b      	ldrb	r3, [r3, #0]
 801b29a:	f003 0301 	and.w	r3, r3, #1
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	d023      	beq.n	801b2ea <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801b2a2:	693b      	ldr	r3, [r7, #16]
 801b2a4:	781b      	ldrb	r3, [r3, #0]
 801b2a6:	2b01      	cmp	r3, #1
 801b2a8:	d10f      	bne.n	801b2ca <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b2aa:	693b      	ldr	r3, [r7, #16]
 801b2ac:	785b      	ldrb	r3, [r3, #1]
 801b2ae:	2b00      	cmp	r3, #0
 801b2b0:	d11b      	bne.n	801b2ea <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801b2b2:	693b      	ldr	r3, [r7, #16]
 801b2b4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b2b6:	2b5e      	cmp	r3, #94	; 0x5e
 801b2b8:	d117      	bne.n	801b2ea <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801b2ba:	687b      	ldr	r3, [r7, #4]
 801b2bc:	7b5b      	ldrb	r3, [r3, #13]
 801b2be:	f043 0310 	orr.w	r3, r3, #16
 801b2c2:	b2da      	uxtb	r2, r3
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	735a      	strb	r2, [r3, #13]
 801b2c8:	e00f      	b.n	801b2ea <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801b2ca:	693b      	ldr	r3, [r7, #16]
 801b2cc:	2206      	movs	r2, #6
 801b2ce:	4928      	ldr	r1, [pc, #160]	; (801b370 <ethernet_input+0x118>)
 801b2d0:	4618      	mov	r0, r3
 801b2d2:	f000 fa71 	bl	801b7b8 <memcmp>
 801b2d6:	4603      	mov	r3, r0
 801b2d8:	2b00      	cmp	r3, #0
 801b2da:	d106      	bne.n	801b2ea <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	7b5b      	ldrb	r3, [r3, #13]
 801b2e0:	f043 0308 	orr.w	r3, r3, #8
 801b2e4:	b2da      	uxtb	r2, r3
 801b2e6:	687b      	ldr	r3, [r7, #4]
 801b2e8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801b2ea:	89fb      	ldrh	r3, [r7, #14]
 801b2ec:	2b08      	cmp	r3, #8
 801b2ee:	d003      	beq.n	801b2f8 <ethernet_input+0xa0>
 801b2f0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801b2f4:	d014      	beq.n	801b320 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801b2f6:	e032      	b.n	801b35e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b2f8:	683b      	ldr	r3, [r7, #0]
 801b2fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b2fe:	f003 0308 	and.w	r3, r3, #8
 801b302:	2b00      	cmp	r3, #0
 801b304:	d024      	beq.n	801b350 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b306:	8afb      	ldrh	r3, [r7, #22]
 801b308:	4619      	mov	r1, r3
 801b30a:	6878      	ldr	r0, [r7, #4]
 801b30c:	f7f6 fe2c 	bl	8011f68 <pbuf_remove_header>
 801b310:	4603      	mov	r3, r0
 801b312:	2b00      	cmp	r3, #0
 801b314:	d11e      	bne.n	801b354 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801b316:	6839      	ldr	r1, [r7, #0]
 801b318:	6878      	ldr	r0, [r7, #4]
 801b31a:	f7fe ff21 	bl	801a160 <ip4_input>
      break;
 801b31e:	e013      	b.n	801b348 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b320:	683b      	ldr	r3, [r7, #0]
 801b322:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b326:	f003 0308 	and.w	r3, r3, #8
 801b32a:	2b00      	cmp	r3, #0
 801b32c:	d014      	beq.n	801b358 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b32e:	8afb      	ldrh	r3, [r7, #22]
 801b330:	4619      	mov	r1, r3
 801b332:	6878      	ldr	r0, [r7, #4]
 801b334:	f7f6 fe18 	bl	8011f68 <pbuf_remove_header>
 801b338:	4603      	mov	r3, r0
 801b33a:	2b00      	cmp	r3, #0
 801b33c:	d10e      	bne.n	801b35c <ethernet_input+0x104>
        etharp_input(p, netif);
 801b33e:	6839      	ldr	r1, [r7, #0]
 801b340:	6878      	ldr	r0, [r7, #4]
 801b342:	f7fe f8c1 	bl	80194c8 <etharp_input>
      break;
 801b346:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801b348:	2300      	movs	r3, #0
 801b34a:	e00c      	b.n	801b366 <ethernet_input+0x10e>
    goto free_and_return;
 801b34c:	bf00      	nop
 801b34e:	e006      	b.n	801b35e <ethernet_input+0x106>
        goto free_and_return;
 801b350:	bf00      	nop
 801b352:	e004      	b.n	801b35e <ethernet_input+0x106>
        goto free_and_return;
 801b354:	bf00      	nop
 801b356:	e002      	b.n	801b35e <ethernet_input+0x106>
        goto free_and_return;
 801b358:	bf00      	nop
 801b35a:	e000      	b.n	801b35e <ethernet_input+0x106>
        goto free_and_return;
 801b35c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801b35e:	6878      	ldr	r0, [r7, #4]
 801b360:	f7f6 feba 	bl	80120d8 <pbuf_free>
  return ERR_OK;
 801b364:	2300      	movs	r3, #0
}
 801b366:	4618      	mov	r0, r3
 801b368:	3718      	adds	r7, #24
 801b36a:	46bd      	mov	sp, r7
 801b36c:	bd80      	pop	{r7, pc}
 801b36e:	bf00      	nop
 801b370:	08020610 	.word	0x08020610

0801b374 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801b374:	b580      	push	{r7, lr}
 801b376:	b086      	sub	sp, #24
 801b378:	af00      	add	r7, sp, #0
 801b37a:	60f8      	str	r0, [r7, #12]
 801b37c:	60b9      	str	r1, [r7, #8]
 801b37e:	607a      	str	r2, [r7, #4]
 801b380:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801b382:	8c3b      	ldrh	r3, [r7, #32]
 801b384:	4618      	mov	r0, r3
 801b386:	f7f5 fa83 	bl	8010890 <lwip_htons>
 801b38a:	4603      	mov	r3, r0
 801b38c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801b38e:	210e      	movs	r1, #14
 801b390:	68b8      	ldr	r0, [r7, #8]
 801b392:	f7f6 fdd9 	bl	8011f48 <pbuf_add_header>
 801b396:	4603      	mov	r3, r0
 801b398:	2b00      	cmp	r3, #0
 801b39a:	d125      	bne.n	801b3e8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801b39c:	68bb      	ldr	r3, [r7, #8]
 801b39e:	685b      	ldr	r3, [r3, #4]
 801b3a0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801b3a2:	693b      	ldr	r3, [r7, #16]
 801b3a4:	8afa      	ldrh	r2, [r7, #22]
 801b3a6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801b3a8:	693b      	ldr	r3, [r7, #16]
 801b3aa:	2206      	movs	r2, #6
 801b3ac:	6839      	ldr	r1, [r7, #0]
 801b3ae:	4618      	mov	r0, r3
 801b3b0:	f000 fa12 	bl	801b7d8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801b3b4:	693b      	ldr	r3, [r7, #16]
 801b3b6:	3306      	adds	r3, #6
 801b3b8:	2206      	movs	r2, #6
 801b3ba:	6879      	ldr	r1, [r7, #4]
 801b3bc:	4618      	mov	r0, r3
 801b3be:	f000 fa0b 	bl	801b7d8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801b3c2:	68fb      	ldr	r3, [r7, #12]
 801b3c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b3c8:	2b06      	cmp	r3, #6
 801b3ca:	d006      	beq.n	801b3da <ethernet_output+0x66>
 801b3cc:	4b0a      	ldr	r3, [pc, #40]	; (801b3f8 <ethernet_output+0x84>)
 801b3ce:	f44f 7299 	mov.w	r2, #306	; 0x132
 801b3d2:	490a      	ldr	r1, [pc, #40]	; (801b3fc <ethernet_output+0x88>)
 801b3d4:	480a      	ldr	r0, [pc, #40]	; (801b400 <ethernet_output+0x8c>)
 801b3d6:	f000 fa15 	bl	801b804 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801b3da:	68fb      	ldr	r3, [r7, #12]
 801b3dc:	699b      	ldr	r3, [r3, #24]
 801b3de:	68b9      	ldr	r1, [r7, #8]
 801b3e0:	68f8      	ldr	r0, [r7, #12]
 801b3e2:	4798      	blx	r3
 801b3e4:	4603      	mov	r3, r0
 801b3e6:	e002      	b.n	801b3ee <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801b3e8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801b3ea:	f06f 0301 	mvn.w	r3, #1
}
 801b3ee:	4618      	mov	r0, r3
 801b3f0:	3718      	adds	r7, #24
 801b3f2:	46bd      	mov	sp, r7
 801b3f4:	bd80      	pop	{r7, pc}
 801b3f6:	bf00      	nop
 801b3f8:	08020388 	.word	0x08020388
 801b3fc:	080203c0 	.word	0x080203c0
 801b400:	080203f4 	.word	0x080203f4

0801b404 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801b404:	b580      	push	{r7, lr}
 801b406:	b082      	sub	sp, #8
 801b408:	af00      	add	r7, sp, #0
 801b40a:	6078      	str	r0, [r7, #4]
 801b40c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801b40e:	683b      	ldr	r3, [r7, #0]
 801b410:	2200      	movs	r2, #0
 801b412:	2104      	movs	r1, #4
 801b414:	4618      	mov	r0, r3
 801b416:	f7ee fb3d 	bl	8009a94 <osMessageQueueNew>
 801b41a:	4602      	mov	r2, r0
 801b41c:	687b      	ldr	r3, [r7, #4]
 801b41e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	681b      	ldr	r3, [r3, #0]
 801b424:	2b00      	cmp	r3, #0
 801b426:	d102      	bne.n	801b42e <sys_mbox_new+0x2a>
    return ERR_MEM;
 801b428:	f04f 33ff 	mov.w	r3, #4294967295
 801b42c:	e000      	b.n	801b430 <sys_mbox_new+0x2c>

  return ERR_OK;
 801b42e:	2300      	movs	r3, #0
}
 801b430:	4618      	mov	r0, r3
 801b432:	3708      	adds	r7, #8
 801b434:	46bd      	mov	sp, r7
 801b436:	bd80      	pop	{r7, pc}

0801b438 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801b438:	b580      	push	{r7, lr}
 801b43a:	b082      	sub	sp, #8
 801b43c:	af00      	add	r7, sp, #0
 801b43e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	681b      	ldr	r3, [r3, #0]
 801b444:	4618      	mov	r0, r3
 801b446:	f7ee fc91 	bl	8009d6c <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	681b      	ldr	r3, [r3, #0]
 801b44e:	4618      	mov	r0, r3
 801b450:	f7ee fcbe 	bl	8009dd0 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801b454:	bf00      	nop
 801b456:	3708      	adds	r7, #8
 801b458:	46bd      	mov	sp, r7
 801b45a:	bd80      	pop	{r7, pc}

0801b45c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801b45c:	b580      	push	{r7, lr}
 801b45e:	b084      	sub	sp, #16
 801b460:	af00      	add	r7, sp, #0
 801b462:	6078      	str	r0, [r7, #4]
 801b464:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801b466:	687b      	ldr	r3, [r7, #4]
 801b468:	6818      	ldr	r0, [r3, #0]
 801b46a:	4639      	mov	r1, r7
 801b46c:	2300      	movs	r3, #0
 801b46e:	2200      	movs	r2, #0
 801b470:	f7ee fb96 	bl	8009ba0 <osMessageQueuePut>
 801b474:	4603      	mov	r3, r0
 801b476:	2b00      	cmp	r3, #0
 801b478:	d102      	bne.n	801b480 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801b47a:	2300      	movs	r3, #0
 801b47c:	73fb      	strb	r3, [r7, #15]
 801b47e:	e001      	b.n	801b484 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801b480:	23ff      	movs	r3, #255	; 0xff
 801b482:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801b484:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b488:	4618      	mov	r0, r3
 801b48a:	3710      	adds	r7, #16
 801b48c:	46bd      	mov	sp, r7
 801b48e:	bd80      	pop	{r7, pc}

0801b490 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801b490:	b580      	push	{r7, lr}
 801b492:	b086      	sub	sp, #24
 801b494:	af00      	add	r7, sp, #0
 801b496:	60f8      	str	r0, [r7, #12]
 801b498:	60b9      	str	r1, [r7, #8]
 801b49a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801b49c:	f7ed ff26 	bl	80092ec <osKernelGetTickCount>
 801b4a0:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	2b00      	cmp	r3, #0
 801b4a6:	d013      	beq.n	801b4d0 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801b4a8:	68fb      	ldr	r3, [r7, #12]
 801b4aa:	6818      	ldr	r0, [r3, #0]
 801b4ac:	687b      	ldr	r3, [r7, #4]
 801b4ae:	2200      	movs	r2, #0
 801b4b0:	68b9      	ldr	r1, [r7, #8]
 801b4b2:	f7ee fbe9 	bl	8009c88 <osMessageQueueGet>
 801b4b6:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801b4b8:	693b      	ldr	r3, [r7, #16]
 801b4ba:	2b00      	cmp	r3, #0
 801b4bc:	d105      	bne.n	801b4ca <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801b4be:	f7ed ff15 	bl	80092ec <osKernelGetTickCount>
 801b4c2:	4602      	mov	r2, r0
 801b4c4:	697b      	ldr	r3, [r7, #20]
 801b4c6:	1ad3      	subs	r3, r2, r3
 801b4c8:	e00f      	b.n	801b4ea <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801b4ca:	f04f 33ff 	mov.w	r3, #4294967295
 801b4ce:	e00c      	b.n	801b4ea <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801b4d0:	68fb      	ldr	r3, [r7, #12]
 801b4d2:	6818      	ldr	r0, [r3, #0]
 801b4d4:	f04f 33ff 	mov.w	r3, #4294967295
 801b4d8:	2200      	movs	r2, #0
 801b4da:	68b9      	ldr	r1, [r7, #8]
 801b4dc:	f7ee fbd4 	bl	8009c88 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801b4e0:	f7ed ff04 	bl	80092ec <osKernelGetTickCount>
 801b4e4:	4602      	mov	r2, r0
 801b4e6:	697b      	ldr	r3, [r7, #20]
 801b4e8:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801b4ea:	4618      	mov	r0, r3
 801b4ec:	3718      	adds	r7, #24
 801b4ee:	46bd      	mov	sp, r7
 801b4f0:	bd80      	pop	{r7, pc}

0801b4f2 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801b4f2:	b580      	push	{r7, lr}
 801b4f4:	b082      	sub	sp, #8
 801b4f6:	af00      	add	r7, sp, #0
 801b4f8:	6078      	str	r0, [r7, #4]
 801b4fa:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	6818      	ldr	r0, [r3, #0]
 801b500:	2300      	movs	r3, #0
 801b502:	2200      	movs	r2, #0
 801b504:	6839      	ldr	r1, [r7, #0]
 801b506:	f7ee fbbf 	bl	8009c88 <osMessageQueueGet>
 801b50a:	4603      	mov	r3, r0
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d101      	bne.n	801b514 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801b510:	2300      	movs	r3, #0
 801b512:	e001      	b.n	801b518 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801b514:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801b518:	4618      	mov	r0, r3
 801b51a:	3708      	adds	r7, #8
 801b51c:	46bd      	mov	sp, r7
 801b51e:	bd80      	pop	{r7, pc}

0801b520 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801b520:	b480      	push	{r7}
 801b522:	b083      	sub	sp, #12
 801b524:	af00      	add	r7, sp, #0
 801b526:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	681b      	ldr	r3, [r3, #0]
 801b52c:	2b00      	cmp	r3, #0
 801b52e:	d101      	bne.n	801b534 <sys_mbox_valid+0x14>
    return 0;
 801b530:	2300      	movs	r3, #0
 801b532:	e000      	b.n	801b536 <sys_mbox_valid+0x16>
  else
    return 1;
 801b534:	2301      	movs	r3, #1
}
 801b536:	4618      	mov	r0, r3
 801b538:	370c      	adds	r7, #12
 801b53a:	46bd      	mov	sp, r7
 801b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b540:	4770      	bx	lr

0801b542 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801b542:	b480      	push	{r7}
 801b544:	b083      	sub	sp, #12
 801b546:	af00      	add	r7, sp, #0
 801b548:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801b54a:	687b      	ldr	r3, [r7, #4]
 801b54c:	2200      	movs	r2, #0
 801b54e:	601a      	str	r2, [r3, #0]
}
 801b550:	bf00      	nop
 801b552:	370c      	adds	r7, #12
 801b554:	46bd      	mov	sp, r7
 801b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b55a:	4770      	bx	lr

0801b55c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801b55c:	b580      	push	{r7, lr}
 801b55e:	b082      	sub	sp, #8
 801b560:	af00      	add	r7, sp, #0
 801b562:	6078      	str	r0, [r7, #4]
 801b564:	460b      	mov	r3, r1
 801b566:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801b568:	78fb      	ldrb	r3, [r7, #3]
 801b56a:	2200      	movs	r2, #0
 801b56c:	4619      	mov	r1, r3
 801b56e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b572:	f7ee f8ff 	bl	8009774 <osSemaphoreNew>
 801b576:	4602      	mov	r2, r0
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	681b      	ldr	r3, [r3, #0]
 801b580:	2b00      	cmp	r3, #0
 801b582:	d102      	bne.n	801b58a <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801b584:	f04f 33ff 	mov.w	r3, #4294967295
 801b588:	e009      	b.n	801b59e <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801b58a:	78fb      	ldrb	r3, [r7, #3]
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d105      	bne.n	801b59c <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801b590:	687b      	ldr	r3, [r7, #4]
 801b592:	681b      	ldr	r3, [r3, #0]
 801b594:	2100      	movs	r1, #0
 801b596:	4618      	mov	r0, r3
 801b598:	f7ee f988 	bl	80098ac <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801b59c:	2300      	movs	r3, #0
}
 801b59e:	4618      	mov	r0, r3
 801b5a0:	3708      	adds	r7, #8
 801b5a2:	46bd      	mov	sp, r7
 801b5a4:	bd80      	pop	{r7, pc}

0801b5a6 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801b5a6:	b580      	push	{r7, lr}
 801b5a8:	b084      	sub	sp, #16
 801b5aa:	af00      	add	r7, sp, #0
 801b5ac:	6078      	str	r0, [r7, #4]
 801b5ae:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801b5b0:	f7ed fe9c 	bl	80092ec <osKernelGetTickCount>
 801b5b4:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801b5b6:	683b      	ldr	r3, [r7, #0]
 801b5b8:	2b00      	cmp	r3, #0
 801b5ba:	d011      	beq.n	801b5e0 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	681b      	ldr	r3, [r3, #0]
 801b5c0:	6839      	ldr	r1, [r7, #0]
 801b5c2:	4618      	mov	r0, r3
 801b5c4:	f7ee f972 	bl	80098ac <osSemaphoreAcquire>
 801b5c8:	4603      	mov	r3, r0
 801b5ca:	2b00      	cmp	r3, #0
 801b5cc:	d105      	bne.n	801b5da <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801b5ce:	f7ed fe8d 	bl	80092ec <osKernelGetTickCount>
 801b5d2:	4602      	mov	r2, r0
 801b5d4:	68fb      	ldr	r3, [r7, #12]
 801b5d6:	1ad3      	subs	r3, r2, r3
 801b5d8:	e012      	b.n	801b600 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801b5da:	f04f 33ff 	mov.w	r3, #4294967295
 801b5de:	e00f      	b.n	801b600 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801b5e0:	bf00      	nop
 801b5e2:	687b      	ldr	r3, [r7, #4]
 801b5e4:	681b      	ldr	r3, [r3, #0]
 801b5e6:	f04f 31ff 	mov.w	r1, #4294967295
 801b5ea:	4618      	mov	r0, r3
 801b5ec:	f7ee f95e 	bl	80098ac <osSemaphoreAcquire>
 801b5f0:	4603      	mov	r3, r0
 801b5f2:	2b00      	cmp	r3, #0
 801b5f4:	d1f5      	bne.n	801b5e2 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801b5f6:	f7ed fe79 	bl	80092ec <osKernelGetTickCount>
 801b5fa:	4602      	mov	r2, r0
 801b5fc:	68fb      	ldr	r3, [r7, #12]
 801b5fe:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801b600:	4618      	mov	r0, r3
 801b602:	3710      	adds	r7, #16
 801b604:	46bd      	mov	sp, r7
 801b606:	bd80      	pop	{r7, pc}

0801b608 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801b608:	b580      	push	{r7, lr}
 801b60a:	b082      	sub	sp, #8
 801b60c:	af00      	add	r7, sp, #0
 801b60e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	681b      	ldr	r3, [r3, #0]
 801b614:	4618      	mov	r0, r3
 801b616:	f7ee f9af 	bl	8009978 <osSemaphoreRelease>
}
 801b61a:	bf00      	nop
 801b61c:	3708      	adds	r7, #8
 801b61e:	46bd      	mov	sp, r7
 801b620:	bd80      	pop	{r7, pc}

0801b622 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801b622:	b580      	push	{r7, lr}
 801b624:	b082      	sub	sp, #8
 801b626:	af00      	add	r7, sp, #0
 801b628:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	681b      	ldr	r3, [r3, #0]
 801b62e:	4618      	mov	r0, r3
 801b630:	f7ee f9fa 	bl	8009a28 <osSemaphoreDelete>
}
 801b634:	bf00      	nop
 801b636:	3708      	adds	r7, #8
 801b638:	46bd      	mov	sp, r7
 801b63a:	bd80      	pop	{r7, pc}

0801b63c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801b63c:	b480      	push	{r7}
 801b63e:	b083      	sub	sp, #12
 801b640:	af00      	add	r7, sp, #0
 801b642:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801b644:	687b      	ldr	r3, [r7, #4]
 801b646:	681b      	ldr	r3, [r3, #0]
 801b648:	2b00      	cmp	r3, #0
 801b64a:	d101      	bne.n	801b650 <sys_sem_valid+0x14>
    return 0;
 801b64c:	2300      	movs	r3, #0
 801b64e:	e000      	b.n	801b652 <sys_sem_valid+0x16>
  else
    return 1;
 801b650:	2301      	movs	r3, #1
}
 801b652:	4618      	mov	r0, r3
 801b654:	370c      	adds	r7, #12
 801b656:	46bd      	mov	sp, r7
 801b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b65c:	4770      	bx	lr

0801b65e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801b65e:	b480      	push	{r7}
 801b660:	b083      	sub	sp, #12
 801b662:	af00      	add	r7, sp, #0
 801b664:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801b666:	687b      	ldr	r3, [r7, #4]
 801b668:	2200      	movs	r2, #0
 801b66a:	601a      	str	r2, [r3, #0]
}
 801b66c:	bf00      	nop
 801b66e:	370c      	adds	r7, #12
 801b670:	46bd      	mov	sp, r7
 801b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b676:	4770      	bx	lr

0801b678 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801b678:	b580      	push	{r7, lr}
 801b67a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801b67c:	2000      	movs	r0, #0
 801b67e:	f7ed ff31 	bl	80094e4 <osMutexNew>
 801b682:	4603      	mov	r3, r0
 801b684:	4a01      	ldr	r2, [pc, #4]	; (801b68c <sys_init+0x14>)
 801b686:	6013      	str	r3, [r2, #0]
#endif
}
 801b688:	bf00      	nop
 801b68a:	bd80      	pop	{r7, pc}
 801b68c:	200111ec 	.word	0x200111ec

0801b690 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801b690:	b580      	push	{r7, lr}
 801b692:	b082      	sub	sp, #8
 801b694:	af00      	add	r7, sp, #0
 801b696:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801b698:	2000      	movs	r0, #0
 801b69a:	f7ed ff23 	bl	80094e4 <osMutexNew>
 801b69e:	4602      	mov	r2, r0
 801b6a0:	687b      	ldr	r3, [r7, #4]
 801b6a2:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	681b      	ldr	r3, [r3, #0]
 801b6a8:	2b00      	cmp	r3, #0
 801b6aa:	d102      	bne.n	801b6b2 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801b6ac:	f04f 33ff 	mov.w	r3, #4294967295
 801b6b0:	e000      	b.n	801b6b4 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801b6b2:	2300      	movs	r3, #0
}
 801b6b4:	4618      	mov	r0, r3
 801b6b6:	3708      	adds	r7, #8
 801b6b8:	46bd      	mov	sp, r7
 801b6ba:	bd80      	pop	{r7, pc}

0801b6bc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801b6bc:	b580      	push	{r7, lr}
 801b6be:	b082      	sub	sp, #8
 801b6c0:	af00      	add	r7, sp, #0
 801b6c2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	681b      	ldr	r3, [r3, #0]
 801b6c8:	f04f 31ff 	mov.w	r1, #4294967295
 801b6cc:	4618      	mov	r0, r3
 801b6ce:	f7ed ffa3 	bl	8009618 <osMutexAcquire>
#endif
}
 801b6d2:	bf00      	nop
 801b6d4:	3708      	adds	r7, #8
 801b6d6:	46bd      	mov	sp, r7
 801b6d8:	bd80      	pop	{r7, pc}

0801b6da <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801b6da:	b580      	push	{r7, lr}
 801b6dc:	b082      	sub	sp, #8
 801b6de:	af00      	add	r7, sp, #0
 801b6e0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801b6e2:	687b      	ldr	r3, [r7, #4]
 801b6e4:	681b      	ldr	r3, [r3, #0]
 801b6e6:	4618      	mov	r0, r3
 801b6e8:	f7ed fff4 	bl	80096d4 <osMutexRelease>
}
 801b6ec:	bf00      	nop
 801b6ee:	3708      	adds	r7, #8
 801b6f0:	46bd      	mov	sp, r7
 801b6f2:	bd80      	pop	{r7, pc}

0801b6f4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801b6f4:	b580      	push	{r7, lr}
 801b6f6:	b08e      	sub	sp, #56	; 0x38
 801b6f8:	af00      	add	r7, sp, #0
 801b6fa:	60f8      	str	r0, [r7, #12]
 801b6fc:	60b9      	str	r1, [r7, #8]
 801b6fe:	607a      	str	r2, [r7, #4]
 801b700:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801b702:	f107 0314 	add.w	r3, r7, #20
 801b706:	2224      	movs	r2, #36	; 0x24
 801b708:	2100      	movs	r1, #0
 801b70a:	4618      	mov	r0, r3
 801b70c:	f000 f872 	bl	801b7f4 <memset>
 801b710:	68fb      	ldr	r3, [r7, #12]
 801b712:	617b      	str	r3, [r7, #20]
 801b714:	683b      	ldr	r3, [r7, #0]
 801b716:	62bb      	str	r3, [r7, #40]	; 0x28
 801b718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b71a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801b71c:	f107 0314 	add.w	r3, r7, #20
 801b720:	461a      	mov	r2, r3
 801b722:	6879      	ldr	r1, [r7, #4]
 801b724:	68b8      	ldr	r0, [r7, #8]
 801b726:	f7ed fe09 	bl	800933c <osThreadNew>
 801b72a:	4603      	mov	r3, r0
#endif
}
 801b72c:	4618      	mov	r0, r3
 801b72e:	3738      	adds	r7, #56	; 0x38
 801b730:	46bd      	mov	sp, r7
 801b732:	bd80      	pop	{r7, pc}

0801b734 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801b734:	b580      	push	{r7, lr}
 801b736:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801b738:	4b04      	ldr	r3, [pc, #16]	; (801b74c <sys_arch_protect+0x18>)
 801b73a:	681b      	ldr	r3, [r3, #0]
 801b73c:	f04f 31ff 	mov.w	r1, #4294967295
 801b740:	4618      	mov	r0, r3
 801b742:	f7ed ff69 	bl	8009618 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801b746:	2301      	movs	r3, #1
}
 801b748:	4618      	mov	r0, r3
 801b74a:	bd80      	pop	{r7, pc}
 801b74c:	200111ec 	.word	0x200111ec

0801b750 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801b750:	b580      	push	{r7, lr}
 801b752:	b082      	sub	sp, #8
 801b754:	af00      	add	r7, sp, #0
 801b756:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801b758:	4b04      	ldr	r3, [pc, #16]	; (801b76c <sys_arch_unprotect+0x1c>)
 801b75a:	681b      	ldr	r3, [r3, #0]
 801b75c:	4618      	mov	r0, r3
 801b75e:	f7ed ffb9 	bl	80096d4 <osMutexRelease>
}
 801b762:	bf00      	nop
 801b764:	3708      	adds	r7, #8
 801b766:	46bd      	mov	sp, r7
 801b768:	bd80      	pop	{r7, pc}
 801b76a:	bf00      	nop
 801b76c:	200111ec 	.word	0x200111ec

0801b770 <__libc_init_array>:
 801b770:	b570      	push	{r4, r5, r6, lr}
 801b772:	4d0d      	ldr	r5, [pc, #52]	; (801b7a8 <__libc_init_array+0x38>)
 801b774:	4c0d      	ldr	r4, [pc, #52]	; (801b7ac <__libc_init_array+0x3c>)
 801b776:	1b64      	subs	r4, r4, r5
 801b778:	10a4      	asrs	r4, r4, #2
 801b77a:	2600      	movs	r6, #0
 801b77c:	42a6      	cmp	r6, r4
 801b77e:	d109      	bne.n	801b794 <__libc_init_array+0x24>
 801b780:	4d0b      	ldr	r5, [pc, #44]	; (801b7b0 <__libc_init_array+0x40>)
 801b782:	4c0c      	ldr	r4, [pc, #48]	; (801b7b4 <__libc_init_array+0x44>)
 801b784:	f001 f962 	bl	801ca4c <_init>
 801b788:	1b64      	subs	r4, r4, r5
 801b78a:	10a4      	asrs	r4, r4, #2
 801b78c:	2600      	movs	r6, #0
 801b78e:	42a6      	cmp	r6, r4
 801b790:	d105      	bne.n	801b79e <__libc_init_array+0x2e>
 801b792:	bd70      	pop	{r4, r5, r6, pc}
 801b794:	f855 3b04 	ldr.w	r3, [r5], #4
 801b798:	4798      	blx	r3
 801b79a:	3601      	adds	r6, #1
 801b79c:	e7ee      	b.n	801b77c <__libc_init_array+0xc>
 801b79e:	f855 3b04 	ldr.w	r3, [r5], #4
 801b7a2:	4798      	blx	r3
 801b7a4:	3601      	adds	r6, #1
 801b7a6:	e7f2      	b.n	801b78e <__libc_init_array+0x1e>
 801b7a8:	08020770 	.word	0x08020770
 801b7ac:	08020770 	.word	0x08020770
 801b7b0:	08020770 	.word	0x08020770
 801b7b4:	08020774 	.word	0x08020774

0801b7b8 <memcmp>:
 801b7b8:	b510      	push	{r4, lr}
 801b7ba:	3901      	subs	r1, #1
 801b7bc:	4402      	add	r2, r0
 801b7be:	4290      	cmp	r0, r2
 801b7c0:	d101      	bne.n	801b7c6 <memcmp+0xe>
 801b7c2:	2000      	movs	r0, #0
 801b7c4:	e005      	b.n	801b7d2 <memcmp+0x1a>
 801b7c6:	7803      	ldrb	r3, [r0, #0]
 801b7c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b7cc:	42a3      	cmp	r3, r4
 801b7ce:	d001      	beq.n	801b7d4 <memcmp+0x1c>
 801b7d0:	1b18      	subs	r0, r3, r4
 801b7d2:	bd10      	pop	{r4, pc}
 801b7d4:	3001      	adds	r0, #1
 801b7d6:	e7f2      	b.n	801b7be <memcmp+0x6>

0801b7d8 <memcpy>:
 801b7d8:	440a      	add	r2, r1
 801b7da:	4291      	cmp	r1, r2
 801b7dc:	f100 33ff 	add.w	r3, r0, #4294967295
 801b7e0:	d100      	bne.n	801b7e4 <memcpy+0xc>
 801b7e2:	4770      	bx	lr
 801b7e4:	b510      	push	{r4, lr}
 801b7e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b7ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b7ee:	4291      	cmp	r1, r2
 801b7f0:	d1f9      	bne.n	801b7e6 <memcpy+0xe>
 801b7f2:	bd10      	pop	{r4, pc}

0801b7f4 <memset>:
 801b7f4:	4402      	add	r2, r0
 801b7f6:	4603      	mov	r3, r0
 801b7f8:	4293      	cmp	r3, r2
 801b7fa:	d100      	bne.n	801b7fe <memset+0xa>
 801b7fc:	4770      	bx	lr
 801b7fe:	f803 1b01 	strb.w	r1, [r3], #1
 801b802:	e7f9      	b.n	801b7f8 <memset+0x4>

0801b804 <iprintf>:
 801b804:	b40f      	push	{r0, r1, r2, r3}
 801b806:	4b0a      	ldr	r3, [pc, #40]	; (801b830 <iprintf+0x2c>)
 801b808:	b513      	push	{r0, r1, r4, lr}
 801b80a:	681c      	ldr	r4, [r3, #0]
 801b80c:	b124      	cbz	r4, 801b818 <iprintf+0x14>
 801b80e:	69a3      	ldr	r3, [r4, #24]
 801b810:	b913      	cbnz	r3, 801b818 <iprintf+0x14>
 801b812:	4620      	mov	r0, r4
 801b814:	f000 fad0 	bl	801bdb8 <__sinit>
 801b818:	ab05      	add	r3, sp, #20
 801b81a:	9a04      	ldr	r2, [sp, #16]
 801b81c:	68a1      	ldr	r1, [r4, #8]
 801b81e:	9301      	str	r3, [sp, #4]
 801b820:	4620      	mov	r0, r4
 801b822:	f000 fcf3 	bl	801c20c <_vfiprintf_r>
 801b826:	b002      	add	sp, #8
 801b828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b82c:	b004      	add	sp, #16
 801b82e:	4770      	bx	lr
 801b830:	20000030 	.word	0x20000030

0801b834 <putchar>:
 801b834:	4b09      	ldr	r3, [pc, #36]	; (801b85c <putchar+0x28>)
 801b836:	b513      	push	{r0, r1, r4, lr}
 801b838:	681c      	ldr	r4, [r3, #0]
 801b83a:	4601      	mov	r1, r0
 801b83c:	b134      	cbz	r4, 801b84c <putchar+0x18>
 801b83e:	69a3      	ldr	r3, [r4, #24]
 801b840:	b923      	cbnz	r3, 801b84c <putchar+0x18>
 801b842:	9001      	str	r0, [sp, #4]
 801b844:	4620      	mov	r0, r4
 801b846:	f000 fab7 	bl	801bdb8 <__sinit>
 801b84a:	9901      	ldr	r1, [sp, #4]
 801b84c:	68a2      	ldr	r2, [r4, #8]
 801b84e:	4620      	mov	r0, r4
 801b850:	b002      	add	sp, #8
 801b852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b856:	f000 bf9d 	b.w	801c794 <_putc_r>
 801b85a:	bf00      	nop
 801b85c:	20000030 	.word	0x20000030

0801b860 <_puts_r>:
 801b860:	b570      	push	{r4, r5, r6, lr}
 801b862:	460e      	mov	r6, r1
 801b864:	4605      	mov	r5, r0
 801b866:	b118      	cbz	r0, 801b870 <_puts_r+0x10>
 801b868:	6983      	ldr	r3, [r0, #24]
 801b86a:	b90b      	cbnz	r3, 801b870 <_puts_r+0x10>
 801b86c:	f000 faa4 	bl	801bdb8 <__sinit>
 801b870:	69ab      	ldr	r3, [r5, #24]
 801b872:	68ac      	ldr	r4, [r5, #8]
 801b874:	b913      	cbnz	r3, 801b87c <_puts_r+0x1c>
 801b876:	4628      	mov	r0, r5
 801b878:	f000 fa9e 	bl	801bdb8 <__sinit>
 801b87c:	4b2c      	ldr	r3, [pc, #176]	; (801b930 <_puts_r+0xd0>)
 801b87e:	429c      	cmp	r4, r3
 801b880:	d120      	bne.n	801b8c4 <_puts_r+0x64>
 801b882:	686c      	ldr	r4, [r5, #4]
 801b884:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b886:	07db      	lsls	r3, r3, #31
 801b888:	d405      	bmi.n	801b896 <_puts_r+0x36>
 801b88a:	89a3      	ldrh	r3, [r4, #12]
 801b88c:	0598      	lsls	r0, r3, #22
 801b88e:	d402      	bmi.n	801b896 <_puts_r+0x36>
 801b890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b892:	f000 fb41 	bl	801bf18 <__retarget_lock_acquire_recursive>
 801b896:	89a3      	ldrh	r3, [r4, #12]
 801b898:	0719      	lsls	r1, r3, #28
 801b89a:	d51d      	bpl.n	801b8d8 <_puts_r+0x78>
 801b89c:	6923      	ldr	r3, [r4, #16]
 801b89e:	b1db      	cbz	r3, 801b8d8 <_puts_r+0x78>
 801b8a0:	3e01      	subs	r6, #1
 801b8a2:	68a3      	ldr	r3, [r4, #8]
 801b8a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b8a8:	3b01      	subs	r3, #1
 801b8aa:	60a3      	str	r3, [r4, #8]
 801b8ac:	bb39      	cbnz	r1, 801b8fe <_puts_r+0x9e>
 801b8ae:	2b00      	cmp	r3, #0
 801b8b0:	da38      	bge.n	801b924 <_puts_r+0xc4>
 801b8b2:	4622      	mov	r2, r4
 801b8b4:	210a      	movs	r1, #10
 801b8b6:	4628      	mov	r0, r5
 801b8b8:	f000 f886 	bl	801b9c8 <__swbuf_r>
 801b8bc:	3001      	adds	r0, #1
 801b8be:	d011      	beq.n	801b8e4 <_puts_r+0x84>
 801b8c0:	250a      	movs	r5, #10
 801b8c2:	e011      	b.n	801b8e8 <_puts_r+0x88>
 801b8c4:	4b1b      	ldr	r3, [pc, #108]	; (801b934 <_puts_r+0xd4>)
 801b8c6:	429c      	cmp	r4, r3
 801b8c8:	d101      	bne.n	801b8ce <_puts_r+0x6e>
 801b8ca:	68ac      	ldr	r4, [r5, #8]
 801b8cc:	e7da      	b.n	801b884 <_puts_r+0x24>
 801b8ce:	4b1a      	ldr	r3, [pc, #104]	; (801b938 <_puts_r+0xd8>)
 801b8d0:	429c      	cmp	r4, r3
 801b8d2:	bf08      	it	eq
 801b8d4:	68ec      	ldreq	r4, [r5, #12]
 801b8d6:	e7d5      	b.n	801b884 <_puts_r+0x24>
 801b8d8:	4621      	mov	r1, r4
 801b8da:	4628      	mov	r0, r5
 801b8dc:	f000 f8c6 	bl	801ba6c <__swsetup_r>
 801b8e0:	2800      	cmp	r0, #0
 801b8e2:	d0dd      	beq.n	801b8a0 <_puts_r+0x40>
 801b8e4:	f04f 35ff 	mov.w	r5, #4294967295
 801b8e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b8ea:	07da      	lsls	r2, r3, #31
 801b8ec:	d405      	bmi.n	801b8fa <_puts_r+0x9a>
 801b8ee:	89a3      	ldrh	r3, [r4, #12]
 801b8f0:	059b      	lsls	r3, r3, #22
 801b8f2:	d402      	bmi.n	801b8fa <_puts_r+0x9a>
 801b8f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b8f6:	f000 fb10 	bl	801bf1a <__retarget_lock_release_recursive>
 801b8fa:	4628      	mov	r0, r5
 801b8fc:	bd70      	pop	{r4, r5, r6, pc}
 801b8fe:	2b00      	cmp	r3, #0
 801b900:	da04      	bge.n	801b90c <_puts_r+0xac>
 801b902:	69a2      	ldr	r2, [r4, #24]
 801b904:	429a      	cmp	r2, r3
 801b906:	dc06      	bgt.n	801b916 <_puts_r+0xb6>
 801b908:	290a      	cmp	r1, #10
 801b90a:	d004      	beq.n	801b916 <_puts_r+0xb6>
 801b90c:	6823      	ldr	r3, [r4, #0]
 801b90e:	1c5a      	adds	r2, r3, #1
 801b910:	6022      	str	r2, [r4, #0]
 801b912:	7019      	strb	r1, [r3, #0]
 801b914:	e7c5      	b.n	801b8a2 <_puts_r+0x42>
 801b916:	4622      	mov	r2, r4
 801b918:	4628      	mov	r0, r5
 801b91a:	f000 f855 	bl	801b9c8 <__swbuf_r>
 801b91e:	3001      	adds	r0, #1
 801b920:	d1bf      	bne.n	801b8a2 <_puts_r+0x42>
 801b922:	e7df      	b.n	801b8e4 <_puts_r+0x84>
 801b924:	6823      	ldr	r3, [r4, #0]
 801b926:	250a      	movs	r5, #10
 801b928:	1c5a      	adds	r2, r3, #1
 801b92a:	6022      	str	r2, [r4, #0]
 801b92c:	701d      	strb	r5, [r3, #0]
 801b92e:	e7db      	b.n	801b8e8 <_puts_r+0x88>
 801b930:	080206f4 	.word	0x080206f4
 801b934:	08020714 	.word	0x08020714
 801b938:	080206d4 	.word	0x080206d4

0801b93c <puts>:
 801b93c:	4b02      	ldr	r3, [pc, #8]	; (801b948 <puts+0xc>)
 801b93e:	4601      	mov	r1, r0
 801b940:	6818      	ldr	r0, [r3, #0]
 801b942:	f7ff bf8d 	b.w	801b860 <_puts_r>
 801b946:	bf00      	nop
 801b948:	20000030 	.word	0x20000030

0801b94c <rand>:
 801b94c:	4b16      	ldr	r3, [pc, #88]	; (801b9a8 <rand+0x5c>)
 801b94e:	b510      	push	{r4, lr}
 801b950:	681c      	ldr	r4, [r3, #0]
 801b952:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b954:	b9b3      	cbnz	r3, 801b984 <rand+0x38>
 801b956:	2018      	movs	r0, #24
 801b958:	f000 fb46 	bl	801bfe8 <malloc>
 801b95c:	63a0      	str	r0, [r4, #56]	; 0x38
 801b95e:	b928      	cbnz	r0, 801b96c <rand+0x20>
 801b960:	4602      	mov	r2, r0
 801b962:	4b12      	ldr	r3, [pc, #72]	; (801b9ac <rand+0x60>)
 801b964:	4812      	ldr	r0, [pc, #72]	; (801b9b0 <rand+0x64>)
 801b966:	214e      	movs	r1, #78	; 0x4e
 801b968:	f000 f8ee 	bl	801bb48 <__assert_func>
 801b96c:	4a11      	ldr	r2, [pc, #68]	; (801b9b4 <rand+0x68>)
 801b96e:	4b12      	ldr	r3, [pc, #72]	; (801b9b8 <rand+0x6c>)
 801b970:	e9c0 2300 	strd	r2, r3, [r0]
 801b974:	4b11      	ldr	r3, [pc, #68]	; (801b9bc <rand+0x70>)
 801b976:	6083      	str	r3, [r0, #8]
 801b978:	230b      	movs	r3, #11
 801b97a:	8183      	strh	r3, [r0, #12]
 801b97c:	2201      	movs	r2, #1
 801b97e:	2300      	movs	r3, #0
 801b980:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801b984:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801b986:	4a0e      	ldr	r2, [pc, #56]	; (801b9c0 <rand+0x74>)
 801b988:	6920      	ldr	r0, [r4, #16]
 801b98a:	6963      	ldr	r3, [r4, #20]
 801b98c:	490d      	ldr	r1, [pc, #52]	; (801b9c4 <rand+0x78>)
 801b98e:	4342      	muls	r2, r0
 801b990:	fb01 2203 	mla	r2, r1, r3, r2
 801b994:	fba0 0101 	umull	r0, r1, r0, r1
 801b998:	1c43      	adds	r3, r0, #1
 801b99a:	eb42 0001 	adc.w	r0, r2, r1
 801b99e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801b9a2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801b9a6:	bd10      	pop	{r4, pc}
 801b9a8:	20000030 	.word	0x20000030
 801b9ac:	08020624 	.word	0x08020624
 801b9b0:	0802063b 	.word	0x0802063b
 801b9b4:	abcd330e 	.word	0xabcd330e
 801b9b8:	e66d1234 	.word	0xe66d1234
 801b9bc:	0005deec 	.word	0x0005deec
 801b9c0:	5851f42d 	.word	0x5851f42d
 801b9c4:	4c957f2d 	.word	0x4c957f2d

0801b9c8 <__swbuf_r>:
 801b9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b9ca:	460e      	mov	r6, r1
 801b9cc:	4614      	mov	r4, r2
 801b9ce:	4605      	mov	r5, r0
 801b9d0:	b118      	cbz	r0, 801b9da <__swbuf_r+0x12>
 801b9d2:	6983      	ldr	r3, [r0, #24]
 801b9d4:	b90b      	cbnz	r3, 801b9da <__swbuf_r+0x12>
 801b9d6:	f000 f9ef 	bl	801bdb8 <__sinit>
 801b9da:	4b21      	ldr	r3, [pc, #132]	; (801ba60 <__swbuf_r+0x98>)
 801b9dc:	429c      	cmp	r4, r3
 801b9de:	d12b      	bne.n	801ba38 <__swbuf_r+0x70>
 801b9e0:	686c      	ldr	r4, [r5, #4]
 801b9e2:	69a3      	ldr	r3, [r4, #24]
 801b9e4:	60a3      	str	r3, [r4, #8]
 801b9e6:	89a3      	ldrh	r3, [r4, #12]
 801b9e8:	071a      	lsls	r2, r3, #28
 801b9ea:	d52f      	bpl.n	801ba4c <__swbuf_r+0x84>
 801b9ec:	6923      	ldr	r3, [r4, #16]
 801b9ee:	b36b      	cbz	r3, 801ba4c <__swbuf_r+0x84>
 801b9f0:	6923      	ldr	r3, [r4, #16]
 801b9f2:	6820      	ldr	r0, [r4, #0]
 801b9f4:	1ac0      	subs	r0, r0, r3
 801b9f6:	6963      	ldr	r3, [r4, #20]
 801b9f8:	b2f6      	uxtb	r6, r6
 801b9fa:	4283      	cmp	r3, r0
 801b9fc:	4637      	mov	r7, r6
 801b9fe:	dc04      	bgt.n	801ba0a <__swbuf_r+0x42>
 801ba00:	4621      	mov	r1, r4
 801ba02:	4628      	mov	r0, r5
 801ba04:	f000 f944 	bl	801bc90 <_fflush_r>
 801ba08:	bb30      	cbnz	r0, 801ba58 <__swbuf_r+0x90>
 801ba0a:	68a3      	ldr	r3, [r4, #8]
 801ba0c:	3b01      	subs	r3, #1
 801ba0e:	60a3      	str	r3, [r4, #8]
 801ba10:	6823      	ldr	r3, [r4, #0]
 801ba12:	1c5a      	adds	r2, r3, #1
 801ba14:	6022      	str	r2, [r4, #0]
 801ba16:	701e      	strb	r6, [r3, #0]
 801ba18:	6963      	ldr	r3, [r4, #20]
 801ba1a:	3001      	adds	r0, #1
 801ba1c:	4283      	cmp	r3, r0
 801ba1e:	d004      	beq.n	801ba2a <__swbuf_r+0x62>
 801ba20:	89a3      	ldrh	r3, [r4, #12]
 801ba22:	07db      	lsls	r3, r3, #31
 801ba24:	d506      	bpl.n	801ba34 <__swbuf_r+0x6c>
 801ba26:	2e0a      	cmp	r6, #10
 801ba28:	d104      	bne.n	801ba34 <__swbuf_r+0x6c>
 801ba2a:	4621      	mov	r1, r4
 801ba2c:	4628      	mov	r0, r5
 801ba2e:	f000 f92f 	bl	801bc90 <_fflush_r>
 801ba32:	b988      	cbnz	r0, 801ba58 <__swbuf_r+0x90>
 801ba34:	4638      	mov	r0, r7
 801ba36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ba38:	4b0a      	ldr	r3, [pc, #40]	; (801ba64 <__swbuf_r+0x9c>)
 801ba3a:	429c      	cmp	r4, r3
 801ba3c:	d101      	bne.n	801ba42 <__swbuf_r+0x7a>
 801ba3e:	68ac      	ldr	r4, [r5, #8]
 801ba40:	e7cf      	b.n	801b9e2 <__swbuf_r+0x1a>
 801ba42:	4b09      	ldr	r3, [pc, #36]	; (801ba68 <__swbuf_r+0xa0>)
 801ba44:	429c      	cmp	r4, r3
 801ba46:	bf08      	it	eq
 801ba48:	68ec      	ldreq	r4, [r5, #12]
 801ba4a:	e7ca      	b.n	801b9e2 <__swbuf_r+0x1a>
 801ba4c:	4621      	mov	r1, r4
 801ba4e:	4628      	mov	r0, r5
 801ba50:	f000 f80c 	bl	801ba6c <__swsetup_r>
 801ba54:	2800      	cmp	r0, #0
 801ba56:	d0cb      	beq.n	801b9f0 <__swbuf_r+0x28>
 801ba58:	f04f 37ff 	mov.w	r7, #4294967295
 801ba5c:	e7ea      	b.n	801ba34 <__swbuf_r+0x6c>
 801ba5e:	bf00      	nop
 801ba60:	080206f4 	.word	0x080206f4
 801ba64:	08020714 	.word	0x08020714
 801ba68:	080206d4 	.word	0x080206d4

0801ba6c <__swsetup_r>:
 801ba6c:	4b32      	ldr	r3, [pc, #200]	; (801bb38 <__swsetup_r+0xcc>)
 801ba6e:	b570      	push	{r4, r5, r6, lr}
 801ba70:	681d      	ldr	r5, [r3, #0]
 801ba72:	4606      	mov	r6, r0
 801ba74:	460c      	mov	r4, r1
 801ba76:	b125      	cbz	r5, 801ba82 <__swsetup_r+0x16>
 801ba78:	69ab      	ldr	r3, [r5, #24]
 801ba7a:	b913      	cbnz	r3, 801ba82 <__swsetup_r+0x16>
 801ba7c:	4628      	mov	r0, r5
 801ba7e:	f000 f99b 	bl	801bdb8 <__sinit>
 801ba82:	4b2e      	ldr	r3, [pc, #184]	; (801bb3c <__swsetup_r+0xd0>)
 801ba84:	429c      	cmp	r4, r3
 801ba86:	d10f      	bne.n	801baa8 <__swsetup_r+0x3c>
 801ba88:	686c      	ldr	r4, [r5, #4]
 801ba8a:	89a3      	ldrh	r3, [r4, #12]
 801ba8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ba90:	0719      	lsls	r1, r3, #28
 801ba92:	d42c      	bmi.n	801baee <__swsetup_r+0x82>
 801ba94:	06dd      	lsls	r5, r3, #27
 801ba96:	d411      	bmi.n	801babc <__swsetup_r+0x50>
 801ba98:	2309      	movs	r3, #9
 801ba9a:	6033      	str	r3, [r6, #0]
 801ba9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801baa0:	81a3      	strh	r3, [r4, #12]
 801baa2:	f04f 30ff 	mov.w	r0, #4294967295
 801baa6:	e03e      	b.n	801bb26 <__swsetup_r+0xba>
 801baa8:	4b25      	ldr	r3, [pc, #148]	; (801bb40 <__swsetup_r+0xd4>)
 801baaa:	429c      	cmp	r4, r3
 801baac:	d101      	bne.n	801bab2 <__swsetup_r+0x46>
 801baae:	68ac      	ldr	r4, [r5, #8]
 801bab0:	e7eb      	b.n	801ba8a <__swsetup_r+0x1e>
 801bab2:	4b24      	ldr	r3, [pc, #144]	; (801bb44 <__swsetup_r+0xd8>)
 801bab4:	429c      	cmp	r4, r3
 801bab6:	bf08      	it	eq
 801bab8:	68ec      	ldreq	r4, [r5, #12]
 801baba:	e7e6      	b.n	801ba8a <__swsetup_r+0x1e>
 801babc:	0758      	lsls	r0, r3, #29
 801babe:	d512      	bpl.n	801bae6 <__swsetup_r+0x7a>
 801bac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bac2:	b141      	cbz	r1, 801bad6 <__swsetup_r+0x6a>
 801bac4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bac8:	4299      	cmp	r1, r3
 801baca:	d002      	beq.n	801bad2 <__swsetup_r+0x66>
 801bacc:	4630      	mov	r0, r6
 801bace:	f000 fa93 	bl	801bff8 <_free_r>
 801bad2:	2300      	movs	r3, #0
 801bad4:	6363      	str	r3, [r4, #52]	; 0x34
 801bad6:	89a3      	ldrh	r3, [r4, #12]
 801bad8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801badc:	81a3      	strh	r3, [r4, #12]
 801bade:	2300      	movs	r3, #0
 801bae0:	6063      	str	r3, [r4, #4]
 801bae2:	6923      	ldr	r3, [r4, #16]
 801bae4:	6023      	str	r3, [r4, #0]
 801bae6:	89a3      	ldrh	r3, [r4, #12]
 801bae8:	f043 0308 	orr.w	r3, r3, #8
 801baec:	81a3      	strh	r3, [r4, #12]
 801baee:	6923      	ldr	r3, [r4, #16]
 801baf0:	b94b      	cbnz	r3, 801bb06 <__swsetup_r+0x9a>
 801baf2:	89a3      	ldrh	r3, [r4, #12]
 801baf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801baf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bafc:	d003      	beq.n	801bb06 <__swsetup_r+0x9a>
 801bafe:	4621      	mov	r1, r4
 801bb00:	4630      	mov	r0, r6
 801bb02:	f000 fa31 	bl	801bf68 <__smakebuf_r>
 801bb06:	89a0      	ldrh	r0, [r4, #12]
 801bb08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bb0c:	f010 0301 	ands.w	r3, r0, #1
 801bb10:	d00a      	beq.n	801bb28 <__swsetup_r+0xbc>
 801bb12:	2300      	movs	r3, #0
 801bb14:	60a3      	str	r3, [r4, #8]
 801bb16:	6963      	ldr	r3, [r4, #20]
 801bb18:	425b      	negs	r3, r3
 801bb1a:	61a3      	str	r3, [r4, #24]
 801bb1c:	6923      	ldr	r3, [r4, #16]
 801bb1e:	b943      	cbnz	r3, 801bb32 <__swsetup_r+0xc6>
 801bb20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801bb24:	d1ba      	bne.n	801ba9c <__swsetup_r+0x30>
 801bb26:	bd70      	pop	{r4, r5, r6, pc}
 801bb28:	0781      	lsls	r1, r0, #30
 801bb2a:	bf58      	it	pl
 801bb2c:	6963      	ldrpl	r3, [r4, #20]
 801bb2e:	60a3      	str	r3, [r4, #8]
 801bb30:	e7f4      	b.n	801bb1c <__swsetup_r+0xb0>
 801bb32:	2000      	movs	r0, #0
 801bb34:	e7f7      	b.n	801bb26 <__swsetup_r+0xba>
 801bb36:	bf00      	nop
 801bb38:	20000030 	.word	0x20000030
 801bb3c:	080206f4 	.word	0x080206f4
 801bb40:	08020714 	.word	0x08020714
 801bb44:	080206d4 	.word	0x080206d4

0801bb48 <__assert_func>:
 801bb48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bb4a:	4614      	mov	r4, r2
 801bb4c:	461a      	mov	r2, r3
 801bb4e:	4b09      	ldr	r3, [pc, #36]	; (801bb74 <__assert_func+0x2c>)
 801bb50:	681b      	ldr	r3, [r3, #0]
 801bb52:	4605      	mov	r5, r0
 801bb54:	68d8      	ldr	r0, [r3, #12]
 801bb56:	b14c      	cbz	r4, 801bb6c <__assert_func+0x24>
 801bb58:	4b07      	ldr	r3, [pc, #28]	; (801bb78 <__assert_func+0x30>)
 801bb5a:	9100      	str	r1, [sp, #0]
 801bb5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801bb60:	4906      	ldr	r1, [pc, #24]	; (801bb7c <__assert_func+0x34>)
 801bb62:	462b      	mov	r3, r5
 801bb64:	f000 f9a6 	bl	801beb4 <fiprintf>
 801bb68:	f000 fec2 	bl	801c8f0 <abort>
 801bb6c:	4b04      	ldr	r3, [pc, #16]	; (801bb80 <__assert_func+0x38>)
 801bb6e:	461c      	mov	r4, r3
 801bb70:	e7f3      	b.n	801bb5a <__assert_func+0x12>
 801bb72:	bf00      	nop
 801bb74:	20000030 	.word	0x20000030
 801bb78:	08020696 	.word	0x08020696
 801bb7c:	080206a3 	.word	0x080206a3
 801bb80:	080206d1 	.word	0x080206d1

0801bb84 <__sflush_r>:
 801bb84:	898a      	ldrh	r2, [r1, #12]
 801bb86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb8a:	4605      	mov	r5, r0
 801bb8c:	0710      	lsls	r0, r2, #28
 801bb8e:	460c      	mov	r4, r1
 801bb90:	d458      	bmi.n	801bc44 <__sflush_r+0xc0>
 801bb92:	684b      	ldr	r3, [r1, #4]
 801bb94:	2b00      	cmp	r3, #0
 801bb96:	dc05      	bgt.n	801bba4 <__sflush_r+0x20>
 801bb98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bb9a:	2b00      	cmp	r3, #0
 801bb9c:	dc02      	bgt.n	801bba4 <__sflush_r+0x20>
 801bb9e:	2000      	movs	r0, #0
 801bba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bba4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bba6:	2e00      	cmp	r6, #0
 801bba8:	d0f9      	beq.n	801bb9e <__sflush_r+0x1a>
 801bbaa:	2300      	movs	r3, #0
 801bbac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bbb0:	682f      	ldr	r7, [r5, #0]
 801bbb2:	602b      	str	r3, [r5, #0]
 801bbb4:	d032      	beq.n	801bc1c <__sflush_r+0x98>
 801bbb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bbb8:	89a3      	ldrh	r3, [r4, #12]
 801bbba:	075a      	lsls	r2, r3, #29
 801bbbc:	d505      	bpl.n	801bbca <__sflush_r+0x46>
 801bbbe:	6863      	ldr	r3, [r4, #4]
 801bbc0:	1ac0      	subs	r0, r0, r3
 801bbc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bbc4:	b10b      	cbz	r3, 801bbca <__sflush_r+0x46>
 801bbc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bbc8:	1ac0      	subs	r0, r0, r3
 801bbca:	2300      	movs	r3, #0
 801bbcc:	4602      	mov	r2, r0
 801bbce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bbd0:	6a21      	ldr	r1, [r4, #32]
 801bbd2:	4628      	mov	r0, r5
 801bbd4:	47b0      	blx	r6
 801bbd6:	1c43      	adds	r3, r0, #1
 801bbd8:	89a3      	ldrh	r3, [r4, #12]
 801bbda:	d106      	bne.n	801bbea <__sflush_r+0x66>
 801bbdc:	6829      	ldr	r1, [r5, #0]
 801bbde:	291d      	cmp	r1, #29
 801bbe0:	d82c      	bhi.n	801bc3c <__sflush_r+0xb8>
 801bbe2:	4a2a      	ldr	r2, [pc, #168]	; (801bc8c <__sflush_r+0x108>)
 801bbe4:	40ca      	lsrs	r2, r1
 801bbe6:	07d6      	lsls	r6, r2, #31
 801bbe8:	d528      	bpl.n	801bc3c <__sflush_r+0xb8>
 801bbea:	2200      	movs	r2, #0
 801bbec:	6062      	str	r2, [r4, #4]
 801bbee:	04d9      	lsls	r1, r3, #19
 801bbf0:	6922      	ldr	r2, [r4, #16]
 801bbf2:	6022      	str	r2, [r4, #0]
 801bbf4:	d504      	bpl.n	801bc00 <__sflush_r+0x7c>
 801bbf6:	1c42      	adds	r2, r0, #1
 801bbf8:	d101      	bne.n	801bbfe <__sflush_r+0x7a>
 801bbfa:	682b      	ldr	r3, [r5, #0]
 801bbfc:	b903      	cbnz	r3, 801bc00 <__sflush_r+0x7c>
 801bbfe:	6560      	str	r0, [r4, #84]	; 0x54
 801bc00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bc02:	602f      	str	r7, [r5, #0]
 801bc04:	2900      	cmp	r1, #0
 801bc06:	d0ca      	beq.n	801bb9e <__sflush_r+0x1a>
 801bc08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bc0c:	4299      	cmp	r1, r3
 801bc0e:	d002      	beq.n	801bc16 <__sflush_r+0x92>
 801bc10:	4628      	mov	r0, r5
 801bc12:	f000 f9f1 	bl	801bff8 <_free_r>
 801bc16:	2000      	movs	r0, #0
 801bc18:	6360      	str	r0, [r4, #52]	; 0x34
 801bc1a:	e7c1      	b.n	801bba0 <__sflush_r+0x1c>
 801bc1c:	6a21      	ldr	r1, [r4, #32]
 801bc1e:	2301      	movs	r3, #1
 801bc20:	4628      	mov	r0, r5
 801bc22:	47b0      	blx	r6
 801bc24:	1c41      	adds	r1, r0, #1
 801bc26:	d1c7      	bne.n	801bbb8 <__sflush_r+0x34>
 801bc28:	682b      	ldr	r3, [r5, #0]
 801bc2a:	2b00      	cmp	r3, #0
 801bc2c:	d0c4      	beq.n	801bbb8 <__sflush_r+0x34>
 801bc2e:	2b1d      	cmp	r3, #29
 801bc30:	d001      	beq.n	801bc36 <__sflush_r+0xb2>
 801bc32:	2b16      	cmp	r3, #22
 801bc34:	d101      	bne.n	801bc3a <__sflush_r+0xb6>
 801bc36:	602f      	str	r7, [r5, #0]
 801bc38:	e7b1      	b.n	801bb9e <__sflush_r+0x1a>
 801bc3a:	89a3      	ldrh	r3, [r4, #12]
 801bc3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bc40:	81a3      	strh	r3, [r4, #12]
 801bc42:	e7ad      	b.n	801bba0 <__sflush_r+0x1c>
 801bc44:	690f      	ldr	r7, [r1, #16]
 801bc46:	2f00      	cmp	r7, #0
 801bc48:	d0a9      	beq.n	801bb9e <__sflush_r+0x1a>
 801bc4a:	0793      	lsls	r3, r2, #30
 801bc4c:	680e      	ldr	r6, [r1, #0]
 801bc4e:	bf08      	it	eq
 801bc50:	694b      	ldreq	r3, [r1, #20]
 801bc52:	600f      	str	r7, [r1, #0]
 801bc54:	bf18      	it	ne
 801bc56:	2300      	movne	r3, #0
 801bc58:	eba6 0807 	sub.w	r8, r6, r7
 801bc5c:	608b      	str	r3, [r1, #8]
 801bc5e:	f1b8 0f00 	cmp.w	r8, #0
 801bc62:	dd9c      	ble.n	801bb9e <__sflush_r+0x1a>
 801bc64:	6a21      	ldr	r1, [r4, #32]
 801bc66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bc68:	4643      	mov	r3, r8
 801bc6a:	463a      	mov	r2, r7
 801bc6c:	4628      	mov	r0, r5
 801bc6e:	47b0      	blx	r6
 801bc70:	2800      	cmp	r0, #0
 801bc72:	dc06      	bgt.n	801bc82 <__sflush_r+0xfe>
 801bc74:	89a3      	ldrh	r3, [r4, #12]
 801bc76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bc7a:	81a3      	strh	r3, [r4, #12]
 801bc7c:	f04f 30ff 	mov.w	r0, #4294967295
 801bc80:	e78e      	b.n	801bba0 <__sflush_r+0x1c>
 801bc82:	4407      	add	r7, r0
 801bc84:	eba8 0800 	sub.w	r8, r8, r0
 801bc88:	e7e9      	b.n	801bc5e <__sflush_r+0xda>
 801bc8a:	bf00      	nop
 801bc8c:	20400001 	.word	0x20400001

0801bc90 <_fflush_r>:
 801bc90:	b538      	push	{r3, r4, r5, lr}
 801bc92:	690b      	ldr	r3, [r1, #16]
 801bc94:	4605      	mov	r5, r0
 801bc96:	460c      	mov	r4, r1
 801bc98:	b913      	cbnz	r3, 801bca0 <_fflush_r+0x10>
 801bc9a:	2500      	movs	r5, #0
 801bc9c:	4628      	mov	r0, r5
 801bc9e:	bd38      	pop	{r3, r4, r5, pc}
 801bca0:	b118      	cbz	r0, 801bcaa <_fflush_r+0x1a>
 801bca2:	6983      	ldr	r3, [r0, #24]
 801bca4:	b90b      	cbnz	r3, 801bcaa <_fflush_r+0x1a>
 801bca6:	f000 f887 	bl	801bdb8 <__sinit>
 801bcaa:	4b14      	ldr	r3, [pc, #80]	; (801bcfc <_fflush_r+0x6c>)
 801bcac:	429c      	cmp	r4, r3
 801bcae:	d11b      	bne.n	801bce8 <_fflush_r+0x58>
 801bcb0:	686c      	ldr	r4, [r5, #4]
 801bcb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bcb6:	2b00      	cmp	r3, #0
 801bcb8:	d0ef      	beq.n	801bc9a <_fflush_r+0xa>
 801bcba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bcbc:	07d0      	lsls	r0, r2, #31
 801bcbe:	d404      	bmi.n	801bcca <_fflush_r+0x3a>
 801bcc0:	0599      	lsls	r1, r3, #22
 801bcc2:	d402      	bmi.n	801bcca <_fflush_r+0x3a>
 801bcc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bcc6:	f000 f927 	bl	801bf18 <__retarget_lock_acquire_recursive>
 801bcca:	4628      	mov	r0, r5
 801bccc:	4621      	mov	r1, r4
 801bcce:	f7ff ff59 	bl	801bb84 <__sflush_r>
 801bcd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bcd4:	07da      	lsls	r2, r3, #31
 801bcd6:	4605      	mov	r5, r0
 801bcd8:	d4e0      	bmi.n	801bc9c <_fflush_r+0xc>
 801bcda:	89a3      	ldrh	r3, [r4, #12]
 801bcdc:	059b      	lsls	r3, r3, #22
 801bcde:	d4dd      	bmi.n	801bc9c <_fflush_r+0xc>
 801bce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bce2:	f000 f91a 	bl	801bf1a <__retarget_lock_release_recursive>
 801bce6:	e7d9      	b.n	801bc9c <_fflush_r+0xc>
 801bce8:	4b05      	ldr	r3, [pc, #20]	; (801bd00 <_fflush_r+0x70>)
 801bcea:	429c      	cmp	r4, r3
 801bcec:	d101      	bne.n	801bcf2 <_fflush_r+0x62>
 801bcee:	68ac      	ldr	r4, [r5, #8]
 801bcf0:	e7df      	b.n	801bcb2 <_fflush_r+0x22>
 801bcf2:	4b04      	ldr	r3, [pc, #16]	; (801bd04 <_fflush_r+0x74>)
 801bcf4:	429c      	cmp	r4, r3
 801bcf6:	bf08      	it	eq
 801bcf8:	68ec      	ldreq	r4, [r5, #12]
 801bcfa:	e7da      	b.n	801bcb2 <_fflush_r+0x22>
 801bcfc:	080206f4 	.word	0x080206f4
 801bd00:	08020714 	.word	0x08020714
 801bd04:	080206d4 	.word	0x080206d4

0801bd08 <std>:
 801bd08:	2300      	movs	r3, #0
 801bd0a:	b510      	push	{r4, lr}
 801bd0c:	4604      	mov	r4, r0
 801bd0e:	e9c0 3300 	strd	r3, r3, [r0]
 801bd12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bd16:	6083      	str	r3, [r0, #8]
 801bd18:	8181      	strh	r1, [r0, #12]
 801bd1a:	6643      	str	r3, [r0, #100]	; 0x64
 801bd1c:	81c2      	strh	r2, [r0, #14]
 801bd1e:	6183      	str	r3, [r0, #24]
 801bd20:	4619      	mov	r1, r3
 801bd22:	2208      	movs	r2, #8
 801bd24:	305c      	adds	r0, #92	; 0x5c
 801bd26:	f7ff fd65 	bl	801b7f4 <memset>
 801bd2a:	4b05      	ldr	r3, [pc, #20]	; (801bd40 <std+0x38>)
 801bd2c:	6263      	str	r3, [r4, #36]	; 0x24
 801bd2e:	4b05      	ldr	r3, [pc, #20]	; (801bd44 <std+0x3c>)
 801bd30:	62a3      	str	r3, [r4, #40]	; 0x28
 801bd32:	4b05      	ldr	r3, [pc, #20]	; (801bd48 <std+0x40>)
 801bd34:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bd36:	4b05      	ldr	r3, [pc, #20]	; (801bd4c <std+0x44>)
 801bd38:	6224      	str	r4, [r4, #32]
 801bd3a:	6323      	str	r3, [r4, #48]	; 0x30
 801bd3c:	bd10      	pop	{r4, pc}
 801bd3e:	bf00      	nop
 801bd40:	0801c845 	.word	0x0801c845
 801bd44:	0801c867 	.word	0x0801c867
 801bd48:	0801c89f 	.word	0x0801c89f
 801bd4c:	0801c8c3 	.word	0x0801c8c3

0801bd50 <_cleanup_r>:
 801bd50:	4901      	ldr	r1, [pc, #4]	; (801bd58 <_cleanup_r+0x8>)
 801bd52:	f000 b8c1 	b.w	801bed8 <_fwalk_reent>
 801bd56:	bf00      	nop
 801bd58:	0801bc91 	.word	0x0801bc91

0801bd5c <__sfmoreglue>:
 801bd5c:	b570      	push	{r4, r5, r6, lr}
 801bd5e:	2268      	movs	r2, #104	; 0x68
 801bd60:	1e4d      	subs	r5, r1, #1
 801bd62:	4355      	muls	r5, r2
 801bd64:	460e      	mov	r6, r1
 801bd66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801bd6a:	f000 f9b1 	bl	801c0d0 <_malloc_r>
 801bd6e:	4604      	mov	r4, r0
 801bd70:	b140      	cbz	r0, 801bd84 <__sfmoreglue+0x28>
 801bd72:	2100      	movs	r1, #0
 801bd74:	e9c0 1600 	strd	r1, r6, [r0]
 801bd78:	300c      	adds	r0, #12
 801bd7a:	60a0      	str	r0, [r4, #8]
 801bd7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801bd80:	f7ff fd38 	bl	801b7f4 <memset>
 801bd84:	4620      	mov	r0, r4
 801bd86:	bd70      	pop	{r4, r5, r6, pc}

0801bd88 <__sfp_lock_acquire>:
 801bd88:	4801      	ldr	r0, [pc, #4]	; (801bd90 <__sfp_lock_acquire+0x8>)
 801bd8a:	f000 b8c5 	b.w	801bf18 <__retarget_lock_acquire_recursive>
 801bd8e:	bf00      	nop
 801bd90:	200111f1 	.word	0x200111f1

0801bd94 <__sfp_lock_release>:
 801bd94:	4801      	ldr	r0, [pc, #4]	; (801bd9c <__sfp_lock_release+0x8>)
 801bd96:	f000 b8c0 	b.w	801bf1a <__retarget_lock_release_recursive>
 801bd9a:	bf00      	nop
 801bd9c:	200111f1 	.word	0x200111f1

0801bda0 <__sinit_lock_acquire>:
 801bda0:	4801      	ldr	r0, [pc, #4]	; (801bda8 <__sinit_lock_acquire+0x8>)
 801bda2:	f000 b8b9 	b.w	801bf18 <__retarget_lock_acquire_recursive>
 801bda6:	bf00      	nop
 801bda8:	200111f2 	.word	0x200111f2

0801bdac <__sinit_lock_release>:
 801bdac:	4801      	ldr	r0, [pc, #4]	; (801bdb4 <__sinit_lock_release+0x8>)
 801bdae:	f000 b8b4 	b.w	801bf1a <__retarget_lock_release_recursive>
 801bdb2:	bf00      	nop
 801bdb4:	200111f2 	.word	0x200111f2

0801bdb8 <__sinit>:
 801bdb8:	b510      	push	{r4, lr}
 801bdba:	4604      	mov	r4, r0
 801bdbc:	f7ff fff0 	bl	801bda0 <__sinit_lock_acquire>
 801bdc0:	69a3      	ldr	r3, [r4, #24]
 801bdc2:	b11b      	cbz	r3, 801bdcc <__sinit+0x14>
 801bdc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bdc8:	f7ff bff0 	b.w	801bdac <__sinit_lock_release>
 801bdcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801bdd0:	6523      	str	r3, [r4, #80]	; 0x50
 801bdd2:	4b13      	ldr	r3, [pc, #76]	; (801be20 <__sinit+0x68>)
 801bdd4:	4a13      	ldr	r2, [pc, #76]	; (801be24 <__sinit+0x6c>)
 801bdd6:	681b      	ldr	r3, [r3, #0]
 801bdd8:	62a2      	str	r2, [r4, #40]	; 0x28
 801bdda:	42a3      	cmp	r3, r4
 801bddc:	bf04      	itt	eq
 801bdde:	2301      	moveq	r3, #1
 801bde0:	61a3      	streq	r3, [r4, #24]
 801bde2:	4620      	mov	r0, r4
 801bde4:	f000 f820 	bl	801be28 <__sfp>
 801bde8:	6060      	str	r0, [r4, #4]
 801bdea:	4620      	mov	r0, r4
 801bdec:	f000 f81c 	bl	801be28 <__sfp>
 801bdf0:	60a0      	str	r0, [r4, #8]
 801bdf2:	4620      	mov	r0, r4
 801bdf4:	f000 f818 	bl	801be28 <__sfp>
 801bdf8:	2200      	movs	r2, #0
 801bdfa:	60e0      	str	r0, [r4, #12]
 801bdfc:	2104      	movs	r1, #4
 801bdfe:	6860      	ldr	r0, [r4, #4]
 801be00:	f7ff ff82 	bl	801bd08 <std>
 801be04:	68a0      	ldr	r0, [r4, #8]
 801be06:	2201      	movs	r2, #1
 801be08:	2109      	movs	r1, #9
 801be0a:	f7ff ff7d 	bl	801bd08 <std>
 801be0e:	68e0      	ldr	r0, [r4, #12]
 801be10:	2202      	movs	r2, #2
 801be12:	2112      	movs	r1, #18
 801be14:	f7ff ff78 	bl	801bd08 <std>
 801be18:	2301      	movs	r3, #1
 801be1a:	61a3      	str	r3, [r4, #24]
 801be1c:	e7d2      	b.n	801bdc4 <__sinit+0xc>
 801be1e:	bf00      	nop
 801be20:	08020620 	.word	0x08020620
 801be24:	0801bd51 	.word	0x0801bd51

0801be28 <__sfp>:
 801be28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be2a:	4607      	mov	r7, r0
 801be2c:	f7ff ffac 	bl	801bd88 <__sfp_lock_acquire>
 801be30:	4b1e      	ldr	r3, [pc, #120]	; (801beac <__sfp+0x84>)
 801be32:	681e      	ldr	r6, [r3, #0]
 801be34:	69b3      	ldr	r3, [r6, #24]
 801be36:	b913      	cbnz	r3, 801be3e <__sfp+0x16>
 801be38:	4630      	mov	r0, r6
 801be3a:	f7ff ffbd 	bl	801bdb8 <__sinit>
 801be3e:	3648      	adds	r6, #72	; 0x48
 801be40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801be44:	3b01      	subs	r3, #1
 801be46:	d503      	bpl.n	801be50 <__sfp+0x28>
 801be48:	6833      	ldr	r3, [r6, #0]
 801be4a:	b30b      	cbz	r3, 801be90 <__sfp+0x68>
 801be4c:	6836      	ldr	r6, [r6, #0]
 801be4e:	e7f7      	b.n	801be40 <__sfp+0x18>
 801be50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801be54:	b9d5      	cbnz	r5, 801be8c <__sfp+0x64>
 801be56:	4b16      	ldr	r3, [pc, #88]	; (801beb0 <__sfp+0x88>)
 801be58:	60e3      	str	r3, [r4, #12]
 801be5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801be5e:	6665      	str	r5, [r4, #100]	; 0x64
 801be60:	f000 f859 	bl	801bf16 <__retarget_lock_init_recursive>
 801be64:	f7ff ff96 	bl	801bd94 <__sfp_lock_release>
 801be68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801be6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801be70:	6025      	str	r5, [r4, #0]
 801be72:	61a5      	str	r5, [r4, #24]
 801be74:	2208      	movs	r2, #8
 801be76:	4629      	mov	r1, r5
 801be78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801be7c:	f7ff fcba 	bl	801b7f4 <memset>
 801be80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801be84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801be88:	4620      	mov	r0, r4
 801be8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801be8c:	3468      	adds	r4, #104	; 0x68
 801be8e:	e7d9      	b.n	801be44 <__sfp+0x1c>
 801be90:	2104      	movs	r1, #4
 801be92:	4638      	mov	r0, r7
 801be94:	f7ff ff62 	bl	801bd5c <__sfmoreglue>
 801be98:	4604      	mov	r4, r0
 801be9a:	6030      	str	r0, [r6, #0]
 801be9c:	2800      	cmp	r0, #0
 801be9e:	d1d5      	bne.n	801be4c <__sfp+0x24>
 801bea0:	f7ff ff78 	bl	801bd94 <__sfp_lock_release>
 801bea4:	230c      	movs	r3, #12
 801bea6:	603b      	str	r3, [r7, #0]
 801bea8:	e7ee      	b.n	801be88 <__sfp+0x60>
 801beaa:	bf00      	nop
 801beac:	08020620 	.word	0x08020620
 801beb0:	ffff0001 	.word	0xffff0001

0801beb4 <fiprintf>:
 801beb4:	b40e      	push	{r1, r2, r3}
 801beb6:	b503      	push	{r0, r1, lr}
 801beb8:	4601      	mov	r1, r0
 801beba:	ab03      	add	r3, sp, #12
 801bebc:	4805      	ldr	r0, [pc, #20]	; (801bed4 <fiprintf+0x20>)
 801bebe:	f853 2b04 	ldr.w	r2, [r3], #4
 801bec2:	6800      	ldr	r0, [r0, #0]
 801bec4:	9301      	str	r3, [sp, #4]
 801bec6:	f000 f9a1 	bl	801c20c <_vfiprintf_r>
 801beca:	b002      	add	sp, #8
 801becc:	f85d eb04 	ldr.w	lr, [sp], #4
 801bed0:	b003      	add	sp, #12
 801bed2:	4770      	bx	lr
 801bed4:	20000030 	.word	0x20000030

0801bed8 <_fwalk_reent>:
 801bed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bedc:	4606      	mov	r6, r0
 801bede:	4688      	mov	r8, r1
 801bee0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801bee4:	2700      	movs	r7, #0
 801bee6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801beea:	f1b9 0901 	subs.w	r9, r9, #1
 801beee:	d505      	bpl.n	801befc <_fwalk_reent+0x24>
 801bef0:	6824      	ldr	r4, [r4, #0]
 801bef2:	2c00      	cmp	r4, #0
 801bef4:	d1f7      	bne.n	801bee6 <_fwalk_reent+0xe>
 801bef6:	4638      	mov	r0, r7
 801bef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801befc:	89ab      	ldrh	r3, [r5, #12]
 801befe:	2b01      	cmp	r3, #1
 801bf00:	d907      	bls.n	801bf12 <_fwalk_reent+0x3a>
 801bf02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bf06:	3301      	adds	r3, #1
 801bf08:	d003      	beq.n	801bf12 <_fwalk_reent+0x3a>
 801bf0a:	4629      	mov	r1, r5
 801bf0c:	4630      	mov	r0, r6
 801bf0e:	47c0      	blx	r8
 801bf10:	4307      	orrs	r7, r0
 801bf12:	3568      	adds	r5, #104	; 0x68
 801bf14:	e7e9      	b.n	801beea <_fwalk_reent+0x12>

0801bf16 <__retarget_lock_init_recursive>:
 801bf16:	4770      	bx	lr

0801bf18 <__retarget_lock_acquire_recursive>:
 801bf18:	4770      	bx	lr

0801bf1a <__retarget_lock_release_recursive>:
 801bf1a:	4770      	bx	lr

0801bf1c <__swhatbuf_r>:
 801bf1c:	b570      	push	{r4, r5, r6, lr}
 801bf1e:	460e      	mov	r6, r1
 801bf20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf24:	2900      	cmp	r1, #0
 801bf26:	b096      	sub	sp, #88	; 0x58
 801bf28:	4614      	mov	r4, r2
 801bf2a:	461d      	mov	r5, r3
 801bf2c:	da08      	bge.n	801bf40 <__swhatbuf_r+0x24>
 801bf2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801bf32:	2200      	movs	r2, #0
 801bf34:	602a      	str	r2, [r5, #0]
 801bf36:	061a      	lsls	r2, r3, #24
 801bf38:	d410      	bmi.n	801bf5c <__swhatbuf_r+0x40>
 801bf3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bf3e:	e00e      	b.n	801bf5e <__swhatbuf_r+0x42>
 801bf40:	466a      	mov	r2, sp
 801bf42:	f000 fced 	bl	801c920 <_fstat_r>
 801bf46:	2800      	cmp	r0, #0
 801bf48:	dbf1      	blt.n	801bf2e <__swhatbuf_r+0x12>
 801bf4a:	9a01      	ldr	r2, [sp, #4]
 801bf4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801bf50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801bf54:	425a      	negs	r2, r3
 801bf56:	415a      	adcs	r2, r3
 801bf58:	602a      	str	r2, [r5, #0]
 801bf5a:	e7ee      	b.n	801bf3a <__swhatbuf_r+0x1e>
 801bf5c:	2340      	movs	r3, #64	; 0x40
 801bf5e:	2000      	movs	r0, #0
 801bf60:	6023      	str	r3, [r4, #0]
 801bf62:	b016      	add	sp, #88	; 0x58
 801bf64:	bd70      	pop	{r4, r5, r6, pc}
	...

0801bf68 <__smakebuf_r>:
 801bf68:	898b      	ldrh	r3, [r1, #12]
 801bf6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bf6c:	079d      	lsls	r5, r3, #30
 801bf6e:	4606      	mov	r6, r0
 801bf70:	460c      	mov	r4, r1
 801bf72:	d507      	bpl.n	801bf84 <__smakebuf_r+0x1c>
 801bf74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bf78:	6023      	str	r3, [r4, #0]
 801bf7a:	6123      	str	r3, [r4, #16]
 801bf7c:	2301      	movs	r3, #1
 801bf7e:	6163      	str	r3, [r4, #20]
 801bf80:	b002      	add	sp, #8
 801bf82:	bd70      	pop	{r4, r5, r6, pc}
 801bf84:	ab01      	add	r3, sp, #4
 801bf86:	466a      	mov	r2, sp
 801bf88:	f7ff ffc8 	bl	801bf1c <__swhatbuf_r>
 801bf8c:	9900      	ldr	r1, [sp, #0]
 801bf8e:	4605      	mov	r5, r0
 801bf90:	4630      	mov	r0, r6
 801bf92:	f000 f89d 	bl	801c0d0 <_malloc_r>
 801bf96:	b948      	cbnz	r0, 801bfac <__smakebuf_r+0x44>
 801bf98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bf9c:	059a      	lsls	r2, r3, #22
 801bf9e:	d4ef      	bmi.n	801bf80 <__smakebuf_r+0x18>
 801bfa0:	f023 0303 	bic.w	r3, r3, #3
 801bfa4:	f043 0302 	orr.w	r3, r3, #2
 801bfa8:	81a3      	strh	r3, [r4, #12]
 801bfaa:	e7e3      	b.n	801bf74 <__smakebuf_r+0xc>
 801bfac:	4b0d      	ldr	r3, [pc, #52]	; (801bfe4 <__smakebuf_r+0x7c>)
 801bfae:	62b3      	str	r3, [r6, #40]	; 0x28
 801bfb0:	89a3      	ldrh	r3, [r4, #12]
 801bfb2:	6020      	str	r0, [r4, #0]
 801bfb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bfb8:	81a3      	strh	r3, [r4, #12]
 801bfba:	9b00      	ldr	r3, [sp, #0]
 801bfbc:	6163      	str	r3, [r4, #20]
 801bfbe:	9b01      	ldr	r3, [sp, #4]
 801bfc0:	6120      	str	r0, [r4, #16]
 801bfc2:	b15b      	cbz	r3, 801bfdc <__smakebuf_r+0x74>
 801bfc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bfc8:	4630      	mov	r0, r6
 801bfca:	f000 fcbb 	bl	801c944 <_isatty_r>
 801bfce:	b128      	cbz	r0, 801bfdc <__smakebuf_r+0x74>
 801bfd0:	89a3      	ldrh	r3, [r4, #12]
 801bfd2:	f023 0303 	bic.w	r3, r3, #3
 801bfd6:	f043 0301 	orr.w	r3, r3, #1
 801bfda:	81a3      	strh	r3, [r4, #12]
 801bfdc:	89a0      	ldrh	r0, [r4, #12]
 801bfde:	4305      	orrs	r5, r0
 801bfe0:	81a5      	strh	r5, [r4, #12]
 801bfe2:	e7cd      	b.n	801bf80 <__smakebuf_r+0x18>
 801bfe4:	0801bd51 	.word	0x0801bd51

0801bfe8 <malloc>:
 801bfe8:	4b02      	ldr	r3, [pc, #8]	; (801bff4 <malloc+0xc>)
 801bfea:	4601      	mov	r1, r0
 801bfec:	6818      	ldr	r0, [r3, #0]
 801bfee:	f000 b86f 	b.w	801c0d0 <_malloc_r>
 801bff2:	bf00      	nop
 801bff4:	20000030 	.word	0x20000030

0801bff8 <_free_r>:
 801bff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bffa:	2900      	cmp	r1, #0
 801bffc:	d044      	beq.n	801c088 <_free_r+0x90>
 801bffe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c002:	9001      	str	r0, [sp, #4]
 801c004:	2b00      	cmp	r3, #0
 801c006:	f1a1 0404 	sub.w	r4, r1, #4
 801c00a:	bfb8      	it	lt
 801c00c:	18e4      	addlt	r4, r4, r3
 801c00e:	f000 fcbb 	bl	801c988 <__malloc_lock>
 801c012:	4a1e      	ldr	r2, [pc, #120]	; (801c08c <_free_r+0x94>)
 801c014:	9801      	ldr	r0, [sp, #4]
 801c016:	6813      	ldr	r3, [r2, #0]
 801c018:	b933      	cbnz	r3, 801c028 <_free_r+0x30>
 801c01a:	6063      	str	r3, [r4, #4]
 801c01c:	6014      	str	r4, [r2, #0]
 801c01e:	b003      	add	sp, #12
 801c020:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c024:	f000 bcb6 	b.w	801c994 <__malloc_unlock>
 801c028:	42a3      	cmp	r3, r4
 801c02a:	d908      	bls.n	801c03e <_free_r+0x46>
 801c02c:	6825      	ldr	r5, [r4, #0]
 801c02e:	1961      	adds	r1, r4, r5
 801c030:	428b      	cmp	r3, r1
 801c032:	bf01      	itttt	eq
 801c034:	6819      	ldreq	r1, [r3, #0]
 801c036:	685b      	ldreq	r3, [r3, #4]
 801c038:	1949      	addeq	r1, r1, r5
 801c03a:	6021      	streq	r1, [r4, #0]
 801c03c:	e7ed      	b.n	801c01a <_free_r+0x22>
 801c03e:	461a      	mov	r2, r3
 801c040:	685b      	ldr	r3, [r3, #4]
 801c042:	b10b      	cbz	r3, 801c048 <_free_r+0x50>
 801c044:	42a3      	cmp	r3, r4
 801c046:	d9fa      	bls.n	801c03e <_free_r+0x46>
 801c048:	6811      	ldr	r1, [r2, #0]
 801c04a:	1855      	adds	r5, r2, r1
 801c04c:	42a5      	cmp	r5, r4
 801c04e:	d10b      	bne.n	801c068 <_free_r+0x70>
 801c050:	6824      	ldr	r4, [r4, #0]
 801c052:	4421      	add	r1, r4
 801c054:	1854      	adds	r4, r2, r1
 801c056:	42a3      	cmp	r3, r4
 801c058:	6011      	str	r1, [r2, #0]
 801c05a:	d1e0      	bne.n	801c01e <_free_r+0x26>
 801c05c:	681c      	ldr	r4, [r3, #0]
 801c05e:	685b      	ldr	r3, [r3, #4]
 801c060:	6053      	str	r3, [r2, #4]
 801c062:	4421      	add	r1, r4
 801c064:	6011      	str	r1, [r2, #0]
 801c066:	e7da      	b.n	801c01e <_free_r+0x26>
 801c068:	d902      	bls.n	801c070 <_free_r+0x78>
 801c06a:	230c      	movs	r3, #12
 801c06c:	6003      	str	r3, [r0, #0]
 801c06e:	e7d6      	b.n	801c01e <_free_r+0x26>
 801c070:	6825      	ldr	r5, [r4, #0]
 801c072:	1961      	adds	r1, r4, r5
 801c074:	428b      	cmp	r3, r1
 801c076:	bf04      	itt	eq
 801c078:	6819      	ldreq	r1, [r3, #0]
 801c07a:	685b      	ldreq	r3, [r3, #4]
 801c07c:	6063      	str	r3, [r4, #4]
 801c07e:	bf04      	itt	eq
 801c080:	1949      	addeq	r1, r1, r5
 801c082:	6021      	streq	r1, [r4, #0]
 801c084:	6054      	str	r4, [r2, #4]
 801c086:	e7ca      	b.n	801c01e <_free_r+0x26>
 801c088:	b003      	add	sp, #12
 801c08a:	bd30      	pop	{r4, r5, pc}
 801c08c:	200111f4 	.word	0x200111f4

0801c090 <sbrk_aligned>:
 801c090:	b570      	push	{r4, r5, r6, lr}
 801c092:	4e0e      	ldr	r6, [pc, #56]	; (801c0cc <sbrk_aligned+0x3c>)
 801c094:	460c      	mov	r4, r1
 801c096:	6831      	ldr	r1, [r6, #0]
 801c098:	4605      	mov	r5, r0
 801c09a:	b911      	cbnz	r1, 801c0a2 <sbrk_aligned+0x12>
 801c09c:	f000 fbc2 	bl	801c824 <_sbrk_r>
 801c0a0:	6030      	str	r0, [r6, #0]
 801c0a2:	4621      	mov	r1, r4
 801c0a4:	4628      	mov	r0, r5
 801c0a6:	f000 fbbd 	bl	801c824 <_sbrk_r>
 801c0aa:	1c43      	adds	r3, r0, #1
 801c0ac:	d00a      	beq.n	801c0c4 <sbrk_aligned+0x34>
 801c0ae:	1cc4      	adds	r4, r0, #3
 801c0b0:	f024 0403 	bic.w	r4, r4, #3
 801c0b4:	42a0      	cmp	r0, r4
 801c0b6:	d007      	beq.n	801c0c8 <sbrk_aligned+0x38>
 801c0b8:	1a21      	subs	r1, r4, r0
 801c0ba:	4628      	mov	r0, r5
 801c0bc:	f000 fbb2 	bl	801c824 <_sbrk_r>
 801c0c0:	3001      	adds	r0, #1
 801c0c2:	d101      	bne.n	801c0c8 <sbrk_aligned+0x38>
 801c0c4:	f04f 34ff 	mov.w	r4, #4294967295
 801c0c8:	4620      	mov	r0, r4
 801c0ca:	bd70      	pop	{r4, r5, r6, pc}
 801c0cc:	200111f8 	.word	0x200111f8

0801c0d0 <_malloc_r>:
 801c0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c0d4:	1ccd      	adds	r5, r1, #3
 801c0d6:	f025 0503 	bic.w	r5, r5, #3
 801c0da:	3508      	adds	r5, #8
 801c0dc:	2d0c      	cmp	r5, #12
 801c0de:	bf38      	it	cc
 801c0e0:	250c      	movcc	r5, #12
 801c0e2:	2d00      	cmp	r5, #0
 801c0e4:	4607      	mov	r7, r0
 801c0e6:	db01      	blt.n	801c0ec <_malloc_r+0x1c>
 801c0e8:	42a9      	cmp	r1, r5
 801c0ea:	d905      	bls.n	801c0f8 <_malloc_r+0x28>
 801c0ec:	230c      	movs	r3, #12
 801c0ee:	603b      	str	r3, [r7, #0]
 801c0f0:	2600      	movs	r6, #0
 801c0f2:	4630      	mov	r0, r6
 801c0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c0f8:	4e2e      	ldr	r6, [pc, #184]	; (801c1b4 <_malloc_r+0xe4>)
 801c0fa:	f000 fc45 	bl	801c988 <__malloc_lock>
 801c0fe:	6833      	ldr	r3, [r6, #0]
 801c100:	461c      	mov	r4, r3
 801c102:	bb34      	cbnz	r4, 801c152 <_malloc_r+0x82>
 801c104:	4629      	mov	r1, r5
 801c106:	4638      	mov	r0, r7
 801c108:	f7ff ffc2 	bl	801c090 <sbrk_aligned>
 801c10c:	1c43      	adds	r3, r0, #1
 801c10e:	4604      	mov	r4, r0
 801c110:	d14d      	bne.n	801c1ae <_malloc_r+0xde>
 801c112:	6834      	ldr	r4, [r6, #0]
 801c114:	4626      	mov	r6, r4
 801c116:	2e00      	cmp	r6, #0
 801c118:	d140      	bne.n	801c19c <_malloc_r+0xcc>
 801c11a:	6823      	ldr	r3, [r4, #0]
 801c11c:	4631      	mov	r1, r6
 801c11e:	4638      	mov	r0, r7
 801c120:	eb04 0803 	add.w	r8, r4, r3
 801c124:	f000 fb7e 	bl	801c824 <_sbrk_r>
 801c128:	4580      	cmp	r8, r0
 801c12a:	d13a      	bne.n	801c1a2 <_malloc_r+0xd2>
 801c12c:	6821      	ldr	r1, [r4, #0]
 801c12e:	3503      	adds	r5, #3
 801c130:	1a6d      	subs	r5, r5, r1
 801c132:	f025 0503 	bic.w	r5, r5, #3
 801c136:	3508      	adds	r5, #8
 801c138:	2d0c      	cmp	r5, #12
 801c13a:	bf38      	it	cc
 801c13c:	250c      	movcc	r5, #12
 801c13e:	4629      	mov	r1, r5
 801c140:	4638      	mov	r0, r7
 801c142:	f7ff ffa5 	bl	801c090 <sbrk_aligned>
 801c146:	3001      	adds	r0, #1
 801c148:	d02b      	beq.n	801c1a2 <_malloc_r+0xd2>
 801c14a:	6823      	ldr	r3, [r4, #0]
 801c14c:	442b      	add	r3, r5
 801c14e:	6023      	str	r3, [r4, #0]
 801c150:	e00e      	b.n	801c170 <_malloc_r+0xa0>
 801c152:	6822      	ldr	r2, [r4, #0]
 801c154:	1b52      	subs	r2, r2, r5
 801c156:	d41e      	bmi.n	801c196 <_malloc_r+0xc6>
 801c158:	2a0b      	cmp	r2, #11
 801c15a:	d916      	bls.n	801c18a <_malloc_r+0xba>
 801c15c:	1961      	adds	r1, r4, r5
 801c15e:	42a3      	cmp	r3, r4
 801c160:	6025      	str	r5, [r4, #0]
 801c162:	bf18      	it	ne
 801c164:	6059      	strne	r1, [r3, #4]
 801c166:	6863      	ldr	r3, [r4, #4]
 801c168:	bf08      	it	eq
 801c16a:	6031      	streq	r1, [r6, #0]
 801c16c:	5162      	str	r2, [r4, r5]
 801c16e:	604b      	str	r3, [r1, #4]
 801c170:	4638      	mov	r0, r7
 801c172:	f104 060b 	add.w	r6, r4, #11
 801c176:	f000 fc0d 	bl	801c994 <__malloc_unlock>
 801c17a:	f026 0607 	bic.w	r6, r6, #7
 801c17e:	1d23      	adds	r3, r4, #4
 801c180:	1af2      	subs	r2, r6, r3
 801c182:	d0b6      	beq.n	801c0f2 <_malloc_r+0x22>
 801c184:	1b9b      	subs	r3, r3, r6
 801c186:	50a3      	str	r3, [r4, r2]
 801c188:	e7b3      	b.n	801c0f2 <_malloc_r+0x22>
 801c18a:	6862      	ldr	r2, [r4, #4]
 801c18c:	42a3      	cmp	r3, r4
 801c18e:	bf0c      	ite	eq
 801c190:	6032      	streq	r2, [r6, #0]
 801c192:	605a      	strne	r2, [r3, #4]
 801c194:	e7ec      	b.n	801c170 <_malloc_r+0xa0>
 801c196:	4623      	mov	r3, r4
 801c198:	6864      	ldr	r4, [r4, #4]
 801c19a:	e7b2      	b.n	801c102 <_malloc_r+0x32>
 801c19c:	4634      	mov	r4, r6
 801c19e:	6876      	ldr	r6, [r6, #4]
 801c1a0:	e7b9      	b.n	801c116 <_malloc_r+0x46>
 801c1a2:	230c      	movs	r3, #12
 801c1a4:	603b      	str	r3, [r7, #0]
 801c1a6:	4638      	mov	r0, r7
 801c1a8:	f000 fbf4 	bl	801c994 <__malloc_unlock>
 801c1ac:	e7a1      	b.n	801c0f2 <_malloc_r+0x22>
 801c1ae:	6025      	str	r5, [r4, #0]
 801c1b0:	e7de      	b.n	801c170 <_malloc_r+0xa0>
 801c1b2:	bf00      	nop
 801c1b4:	200111f4 	.word	0x200111f4

0801c1b8 <__sfputc_r>:
 801c1b8:	6893      	ldr	r3, [r2, #8]
 801c1ba:	3b01      	subs	r3, #1
 801c1bc:	2b00      	cmp	r3, #0
 801c1be:	b410      	push	{r4}
 801c1c0:	6093      	str	r3, [r2, #8]
 801c1c2:	da08      	bge.n	801c1d6 <__sfputc_r+0x1e>
 801c1c4:	6994      	ldr	r4, [r2, #24]
 801c1c6:	42a3      	cmp	r3, r4
 801c1c8:	db01      	blt.n	801c1ce <__sfputc_r+0x16>
 801c1ca:	290a      	cmp	r1, #10
 801c1cc:	d103      	bne.n	801c1d6 <__sfputc_r+0x1e>
 801c1ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c1d2:	f7ff bbf9 	b.w	801b9c8 <__swbuf_r>
 801c1d6:	6813      	ldr	r3, [r2, #0]
 801c1d8:	1c58      	adds	r0, r3, #1
 801c1da:	6010      	str	r0, [r2, #0]
 801c1dc:	7019      	strb	r1, [r3, #0]
 801c1de:	4608      	mov	r0, r1
 801c1e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c1e4:	4770      	bx	lr

0801c1e6 <__sfputs_r>:
 801c1e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c1e8:	4606      	mov	r6, r0
 801c1ea:	460f      	mov	r7, r1
 801c1ec:	4614      	mov	r4, r2
 801c1ee:	18d5      	adds	r5, r2, r3
 801c1f0:	42ac      	cmp	r4, r5
 801c1f2:	d101      	bne.n	801c1f8 <__sfputs_r+0x12>
 801c1f4:	2000      	movs	r0, #0
 801c1f6:	e007      	b.n	801c208 <__sfputs_r+0x22>
 801c1f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c1fc:	463a      	mov	r2, r7
 801c1fe:	4630      	mov	r0, r6
 801c200:	f7ff ffda 	bl	801c1b8 <__sfputc_r>
 801c204:	1c43      	adds	r3, r0, #1
 801c206:	d1f3      	bne.n	801c1f0 <__sfputs_r+0xa>
 801c208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c20c <_vfiprintf_r>:
 801c20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c210:	460d      	mov	r5, r1
 801c212:	b09d      	sub	sp, #116	; 0x74
 801c214:	4614      	mov	r4, r2
 801c216:	4698      	mov	r8, r3
 801c218:	4606      	mov	r6, r0
 801c21a:	b118      	cbz	r0, 801c224 <_vfiprintf_r+0x18>
 801c21c:	6983      	ldr	r3, [r0, #24]
 801c21e:	b90b      	cbnz	r3, 801c224 <_vfiprintf_r+0x18>
 801c220:	f7ff fdca 	bl	801bdb8 <__sinit>
 801c224:	4b89      	ldr	r3, [pc, #548]	; (801c44c <_vfiprintf_r+0x240>)
 801c226:	429d      	cmp	r5, r3
 801c228:	d11b      	bne.n	801c262 <_vfiprintf_r+0x56>
 801c22a:	6875      	ldr	r5, [r6, #4]
 801c22c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c22e:	07d9      	lsls	r1, r3, #31
 801c230:	d405      	bmi.n	801c23e <_vfiprintf_r+0x32>
 801c232:	89ab      	ldrh	r3, [r5, #12]
 801c234:	059a      	lsls	r2, r3, #22
 801c236:	d402      	bmi.n	801c23e <_vfiprintf_r+0x32>
 801c238:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c23a:	f7ff fe6d 	bl	801bf18 <__retarget_lock_acquire_recursive>
 801c23e:	89ab      	ldrh	r3, [r5, #12]
 801c240:	071b      	lsls	r3, r3, #28
 801c242:	d501      	bpl.n	801c248 <_vfiprintf_r+0x3c>
 801c244:	692b      	ldr	r3, [r5, #16]
 801c246:	b9eb      	cbnz	r3, 801c284 <_vfiprintf_r+0x78>
 801c248:	4629      	mov	r1, r5
 801c24a:	4630      	mov	r0, r6
 801c24c:	f7ff fc0e 	bl	801ba6c <__swsetup_r>
 801c250:	b1c0      	cbz	r0, 801c284 <_vfiprintf_r+0x78>
 801c252:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c254:	07dc      	lsls	r4, r3, #31
 801c256:	d50e      	bpl.n	801c276 <_vfiprintf_r+0x6a>
 801c258:	f04f 30ff 	mov.w	r0, #4294967295
 801c25c:	b01d      	add	sp, #116	; 0x74
 801c25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c262:	4b7b      	ldr	r3, [pc, #492]	; (801c450 <_vfiprintf_r+0x244>)
 801c264:	429d      	cmp	r5, r3
 801c266:	d101      	bne.n	801c26c <_vfiprintf_r+0x60>
 801c268:	68b5      	ldr	r5, [r6, #8]
 801c26a:	e7df      	b.n	801c22c <_vfiprintf_r+0x20>
 801c26c:	4b79      	ldr	r3, [pc, #484]	; (801c454 <_vfiprintf_r+0x248>)
 801c26e:	429d      	cmp	r5, r3
 801c270:	bf08      	it	eq
 801c272:	68f5      	ldreq	r5, [r6, #12]
 801c274:	e7da      	b.n	801c22c <_vfiprintf_r+0x20>
 801c276:	89ab      	ldrh	r3, [r5, #12]
 801c278:	0598      	lsls	r0, r3, #22
 801c27a:	d4ed      	bmi.n	801c258 <_vfiprintf_r+0x4c>
 801c27c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c27e:	f7ff fe4c 	bl	801bf1a <__retarget_lock_release_recursive>
 801c282:	e7e9      	b.n	801c258 <_vfiprintf_r+0x4c>
 801c284:	2300      	movs	r3, #0
 801c286:	9309      	str	r3, [sp, #36]	; 0x24
 801c288:	2320      	movs	r3, #32
 801c28a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c28e:	f8cd 800c 	str.w	r8, [sp, #12]
 801c292:	2330      	movs	r3, #48	; 0x30
 801c294:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c458 <_vfiprintf_r+0x24c>
 801c298:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c29c:	f04f 0901 	mov.w	r9, #1
 801c2a0:	4623      	mov	r3, r4
 801c2a2:	469a      	mov	sl, r3
 801c2a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c2a8:	b10a      	cbz	r2, 801c2ae <_vfiprintf_r+0xa2>
 801c2aa:	2a25      	cmp	r2, #37	; 0x25
 801c2ac:	d1f9      	bne.n	801c2a2 <_vfiprintf_r+0x96>
 801c2ae:	ebba 0b04 	subs.w	fp, sl, r4
 801c2b2:	d00b      	beq.n	801c2cc <_vfiprintf_r+0xc0>
 801c2b4:	465b      	mov	r3, fp
 801c2b6:	4622      	mov	r2, r4
 801c2b8:	4629      	mov	r1, r5
 801c2ba:	4630      	mov	r0, r6
 801c2bc:	f7ff ff93 	bl	801c1e6 <__sfputs_r>
 801c2c0:	3001      	adds	r0, #1
 801c2c2:	f000 80aa 	beq.w	801c41a <_vfiprintf_r+0x20e>
 801c2c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c2c8:	445a      	add	r2, fp
 801c2ca:	9209      	str	r2, [sp, #36]	; 0x24
 801c2cc:	f89a 3000 	ldrb.w	r3, [sl]
 801c2d0:	2b00      	cmp	r3, #0
 801c2d2:	f000 80a2 	beq.w	801c41a <_vfiprintf_r+0x20e>
 801c2d6:	2300      	movs	r3, #0
 801c2d8:	f04f 32ff 	mov.w	r2, #4294967295
 801c2dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c2e0:	f10a 0a01 	add.w	sl, sl, #1
 801c2e4:	9304      	str	r3, [sp, #16]
 801c2e6:	9307      	str	r3, [sp, #28]
 801c2e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c2ec:	931a      	str	r3, [sp, #104]	; 0x68
 801c2ee:	4654      	mov	r4, sl
 801c2f0:	2205      	movs	r2, #5
 801c2f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c2f6:	4858      	ldr	r0, [pc, #352]	; (801c458 <_vfiprintf_r+0x24c>)
 801c2f8:	f7e3 ffa2 	bl	8000240 <memchr>
 801c2fc:	9a04      	ldr	r2, [sp, #16]
 801c2fe:	b9d8      	cbnz	r0, 801c338 <_vfiprintf_r+0x12c>
 801c300:	06d1      	lsls	r1, r2, #27
 801c302:	bf44      	itt	mi
 801c304:	2320      	movmi	r3, #32
 801c306:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c30a:	0713      	lsls	r3, r2, #28
 801c30c:	bf44      	itt	mi
 801c30e:	232b      	movmi	r3, #43	; 0x2b
 801c310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c314:	f89a 3000 	ldrb.w	r3, [sl]
 801c318:	2b2a      	cmp	r3, #42	; 0x2a
 801c31a:	d015      	beq.n	801c348 <_vfiprintf_r+0x13c>
 801c31c:	9a07      	ldr	r2, [sp, #28]
 801c31e:	4654      	mov	r4, sl
 801c320:	2000      	movs	r0, #0
 801c322:	f04f 0c0a 	mov.w	ip, #10
 801c326:	4621      	mov	r1, r4
 801c328:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c32c:	3b30      	subs	r3, #48	; 0x30
 801c32e:	2b09      	cmp	r3, #9
 801c330:	d94e      	bls.n	801c3d0 <_vfiprintf_r+0x1c4>
 801c332:	b1b0      	cbz	r0, 801c362 <_vfiprintf_r+0x156>
 801c334:	9207      	str	r2, [sp, #28]
 801c336:	e014      	b.n	801c362 <_vfiprintf_r+0x156>
 801c338:	eba0 0308 	sub.w	r3, r0, r8
 801c33c:	fa09 f303 	lsl.w	r3, r9, r3
 801c340:	4313      	orrs	r3, r2
 801c342:	9304      	str	r3, [sp, #16]
 801c344:	46a2      	mov	sl, r4
 801c346:	e7d2      	b.n	801c2ee <_vfiprintf_r+0xe2>
 801c348:	9b03      	ldr	r3, [sp, #12]
 801c34a:	1d19      	adds	r1, r3, #4
 801c34c:	681b      	ldr	r3, [r3, #0]
 801c34e:	9103      	str	r1, [sp, #12]
 801c350:	2b00      	cmp	r3, #0
 801c352:	bfbb      	ittet	lt
 801c354:	425b      	neglt	r3, r3
 801c356:	f042 0202 	orrlt.w	r2, r2, #2
 801c35a:	9307      	strge	r3, [sp, #28]
 801c35c:	9307      	strlt	r3, [sp, #28]
 801c35e:	bfb8      	it	lt
 801c360:	9204      	strlt	r2, [sp, #16]
 801c362:	7823      	ldrb	r3, [r4, #0]
 801c364:	2b2e      	cmp	r3, #46	; 0x2e
 801c366:	d10c      	bne.n	801c382 <_vfiprintf_r+0x176>
 801c368:	7863      	ldrb	r3, [r4, #1]
 801c36a:	2b2a      	cmp	r3, #42	; 0x2a
 801c36c:	d135      	bne.n	801c3da <_vfiprintf_r+0x1ce>
 801c36e:	9b03      	ldr	r3, [sp, #12]
 801c370:	1d1a      	adds	r2, r3, #4
 801c372:	681b      	ldr	r3, [r3, #0]
 801c374:	9203      	str	r2, [sp, #12]
 801c376:	2b00      	cmp	r3, #0
 801c378:	bfb8      	it	lt
 801c37a:	f04f 33ff 	movlt.w	r3, #4294967295
 801c37e:	3402      	adds	r4, #2
 801c380:	9305      	str	r3, [sp, #20]
 801c382:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c468 <_vfiprintf_r+0x25c>
 801c386:	7821      	ldrb	r1, [r4, #0]
 801c388:	2203      	movs	r2, #3
 801c38a:	4650      	mov	r0, sl
 801c38c:	f7e3 ff58 	bl	8000240 <memchr>
 801c390:	b140      	cbz	r0, 801c3a4 <_vfiprintf_r+0x198>
 801c392:	2340      	movs	r3, #64	; 0x40
 801c394:	eba0 000a 	sub.w	r0, r0, sl
 801c398:	fa03 f000 	lsl.w	r0, r3, r0
 801c39c:	9b04      	ldr	r3, [sp, #16]
 801c39e:	4303      	orrs	r3, r0
 801c3a0:	3401      	adds	r4, #1
 801c3a2:	9304      	str	r3, [sp, #16]
 801c3a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c3a8:	482c      	ldr	r0, [pc, #176]	; (801c45c <_vfiprintf_r+0x250>)
 801c3aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c3ae:	2206      	movs	r2, #6
 801c3b0:	f7e3 ff46 	bl	8000240 <memchr>
 801c3b4:	2800      	cmp	r0, #0
 801c3b6:	d03f      	beq.n	801c438 <_vfiprintf_r+0x22c>
 801c3b8:	4b29      	ldr	r3, [pc, #164]	; (801c460 <_vfiprintf_r+0x254>)
 801c3ba:	bb1b      	cbnz	r3, 801c404 <_vfiprintf_r+0x1f8>
 801c3bc:	9b03      	ldr	r3, [sp, #12]
 801c3be:	3307      	adds	r3, #7
 801c3c0:	f023 0307 	bic.w	r3, r3, #7
 801c3c4:	3308      	adds	r3, #8
 801c3c6:	9303      	str	r3, [sp, #12]
 801c3c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c3ca:	443b      	add	r3, r7
 801c3cc:	9309      	str	r3, [sp, #36]	; 0x24
 801c3ce:	e767      	b.n	801c2a0 <_vfiprintf_r+0x94>
 801c3d0:	fb0c 3202 	mla	r2, ip, r2, r3
 801c3d4:	460c      	mov	r4, r1
 801c3d6:	2001      	movs	r0, #1
 801c3d8:	e7a5      	b.n	801c326 <_vfiprintf_r+0x11a>
 801c3da:	2300      	movs	r3, #0
 801c3dc:	3401      	adds	r4, #1
 801c3de:	9305      	str	r3, [sp, #20]
 801c3e0:	4619      	mov	r1, r3
 801c3e2:	f04f 0c0a 	mov.w	ip, #10
 801c3e6:	4620      	mov	r0, r4
 801c3e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c3ec:	3a30      	subs	r2, #48	; 0x30
 801c3ee:	2a09      	cmp	r2, #9
 801c3f0:	d903      	bls.n	801c3fa <_vfiprintf_r+0x1ee>
 801c3f2:	2b00      	cmp	r3, #0
 801c3f4:	d0c5      	beq.n	801c382 <_vfiprintf_r+0x176>
 801c3f6:	9105      	str	r1, [sp, #20]
 801c3f8:	e7c3      	b.n	801c382 <_vfiprintf_r+0x176>
 801c3fa:	fb0c 2101 	mla	r1, ip, r1, r2
 801c3fe:	4604      	mov	r4, r0
 801c400:	2301      	movs	r3, #1
 801c402:	e7f0      	b.n	801c3e6 <_vfiprintf_r+0x1da>
 801c404:	ab03      	add	r3, sp, #12
 801c406:	9300      	str	r3, [sp, #0]
 801c408:	462a      	mov	r2, r5
 801c40a:	4b16      	ldr	r3, [pc, #88]	; (801c464 <_vfiprintf_r+0x258>)
 801c40c:	a904      	add	r1, sp, #16
 801c40e:	4630      	mov	r0, r6
 801c410:	f3af 8000 	nop.w
 801c414:	4607      	mov	r7, r0
 801c416:	1c78      	adds	r0, r7, #1
 801c418:	d1d6      	bne.n	801c3c8 <_vfiprintf_r+0x1bc>
 801c41a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c41c:	07d9      	lsls	r1, r3, #31
 801c41e:	d405      	bmi.n	801c42c <_vfiprintf_r+0x220>
 801c420:	89ab      	ldrh	r3, [r5, #12]
 801c422:	059a      	lsls	r2, r3, #22
 801c424:	d402      	bmi.n	801c42c <_vfiprintf_r+0x220>
 801c426:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c428:	f7ff fd77 	bl	801bf1a <__retarget_lock_release_recursive>
 801c42c:	89ab      	ldrh	r3, [r5, #12]
 801c42e:	065b      	lsls	r3, r3, #25
 801c430:	f53f af12 	bmi.w	801c258 <_vfiprintf_r+0x4c>
 801c434:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c436:	e711      	b.n	801c25c <_vfiprintf_r+0x50>
 801c438:	ab03      	add	r3, sp, #12
 801c43a:	9300      	str	r3, [sp, #0]
 801c43c:	462a      	mov	r2, r5
 801c43e:	4b09      	ldr	r3, [pc, #36]	; (801c464 <_vfiprintf_r+0x258>)
 801c440:	a904      	add	r1, sp, #16
 801c442:	4630      	mov	r0, r6
 801c444:	f000 f880 	bl	801c548 <_printf_i>
 801c448:	e7e4      	b.n	801c414 <_vfiprintf_r+0x208>
 801c44a:	bf00      	nop
 801c44c:	080206f4 	.word	0x080206f4
 801c450:	08020714 	.word	0x08020714
 801c454:	080206d4 	.word	0x080206d4
 801c458:	08020734 	.word	0x08020734
 801c45c:	0802073e 	.word	0x0802073e
 801c460:	00000000 	.word	0x00000000
 801c464:	0801c1e7 	.word	0x0801c1e7
 801c468:	0802073a 	.word	0x0802073a

0801c46c <_printf_common>:
 801c46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c470:	4616      	mov	r6, r2
 801c472:	4699      	mov	r9, r3
 801c474:	688a      	ldr	r2, [r1, #8]
 801c476:	690b      	ldr	r3, [r1, #16]
 801c478:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c47c:	4293      	cmp	r3, r2
 801c47e:	bfb8      	it	lt
 801c480:	4613      	movlt	r3, r2
 801c482:	6033      	str	r3, [r6, #0]
 801c484:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c488:	4607      	mov	r7, r0
 801c48a:	460c      	mov	r4, r1
 801c48c:	b10a      	cbz	r2, 801c492 <_printf_common+0x26>
 801c48e:	3301      	adds	r3, #1
 801c490:	6033      	str	r3, [r6, #0]
 801c492:	6823      	ldr	r3, [r4, #0]
 801c494:	0699      	lsls	r1, r3, #26
 801c496:	bf42      	ittt	mi
 801c498:	6833      	ldrmi	r3, [r6, #0]
 801c49a:	3302      	addmi	r3, #2
 801c49c:	6033      	strmi	r3, [r6, #0]
 801c49e:	6825      	ldr	r5, [r4, #0]
 801c4a0:	f015 0506 	ands.w	r5, r5, #6
 801c4a4:	d106      	bne.n	801c4b4 <_printf_common+0x48>
 801c4a6:	f104 0a19 	add.w	sl, r4, #25
 801c4aa:	68e3      	ldr	r3, [r4, #12]
 801c4ac:	6832      	ldr	r2, [r6, #0]
 801c4ae:	1a9b      	subs	r3, r3, r2
 801c4b0:	42ab      	cmp	r3, r5
 801c4b2:	dc26      	bgt.n	801c502 <_printf_common+0x96>
 801c4b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c4b8:	1e13      	subs	r3, r2, #0
 801c4ba:	6822      	ldr	r2, [r4, #0]
 801c4bc:	bf18      	it	ne
 801c4be:	2301      	movne	r3, #1
 801c4c0:	0692      	lsls	r2, r2, #26
 801c4c2:	d42b      	bmi.n	801c51c <_printf_common+0xb0>
 801c4c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c4c8:	4649      	mov	r1, r9
 801c4ca:	4638      	mov	r0, r7
 801c4cc:	47c0      	blx	r8
 801c4ce:	3001      	adds	r0, #1
 801c4d0:	d01e      	beq.n	801c510 <_printf_common+0xa4>
 801c4d2:	6823      	ldr	r3, [r4, #0]
 801c4d4:	68e5      	ldr	r5, [r4, #12]
 801c4d6:	6832      	ldr	r2, [r6, #0]
 801c4d8:	f003 0306 	and.w	r3, r3, #6
 801c4dc:	2b04      	cmp	r3, #4
 801c4de:	bf08      	it	eq
 801c4e0:	1aad      	subeq	r5, r5, r2
 801c4e2:	68a3      	ldr	r3, [r4, #8]
 801c4e4:	6922      	ldr	r2, [r4, #16]
 801c4e6:	bf0c      	ite	eq
 801c4e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c4ec:	2500      	movne	r5, #0
 801c4ee:	4293      	cmp	r3, r2
 801c4f0:	bfc4      	itt	gt
 801c4f2:	1a9b      	subgt	r3, r3, r2
 801c4f4:	18ed      	addgt	r5, r5, r3
 801c4f6:	2600      	movs	r6, #0
 801c4f8:	341a      	adds	r4, #26
 801c4fa:	42b5      	cmp	r5, r6
 801c4fc:	d11a      	bne.n	801c534 <_printf_common+0xc8>
 801c4fe:	2000      	movs	r0, #0
 801c500:	e008      	b.n	801c514 <_printf_common+0xa8>
 801c502:	2301      	movs	r3, #1
 801c504:	4652      	mov	r2, sl
 801c506:	4649      	mov	r1, r9
 801c508:	4638      	mov	r0, r7
 801c50a:	47c0      	blx	r8
 801c50c:	3001      	adds	r0, #1
 801c50e:	d103      	bne.n	801c518 <_printf_common+0xac>
 801c510:	f04f 30ff 	mov.w	r0, #4294967295
 801c514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c518:	3501      	adds	r5, #1
 801c51a:	e7c6      	b.n	801c4aa <_printf_common+0x3e>
 801c51c:	18e1      	adds	r1, r4, r3
 801c51e:	1c5a      	adds	r2, r3, #1
 801c520:	2030      	movs	r0, #48	; 0x30
 801c522:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c526:	4422      	add	r2, r4
 801c528:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c52c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c530:	3302      	adds	r3, #2
 801c532:	e7c7      	b.n	801c4c4 <_printf_common+0x58>
 801c534:	2301      	movs	r3, #1
 801c536:	4622      	mov	r2, r4
 801c538:	4649      	mov	r1, r9
 801c53a:	4638      	mov	r0, r7
 801c53c:	47c0      	blx	r8
 801c53e:	3001      	adds	r0, #1
 801c540:	d0e6      	beq.n	801c510 <_printf_common+0xa4>
 801c542:	3601      	adds	r6, #1
 801c544:	e7d9      	b.n	801c4fa <_printf_common+0x8e>
	...

0801c548 <_printf_i>:
 801c548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c54c:	7e0f      	ldrb	r7, [r1, #24]
 801c54e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c550:	2f78      	cmp	r7, #120	; 0x78
 801c552:	4691      	mov	r9, r2
 801c554:	4680      	mov	r8, r0
 801c556:	460c      	mov	r4, r1
 801c558:	469a      	mov	sl, r3
 801c55a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801c55e:	d807      	bhi.n	801c570 <_printf_i+0x28>
 801c560:	2f62      	cmp	r7, #98	; 0x62
 801c562:	d80a      	bhi.n	801c57a <_printf_i+0x32>
 801c564:	2f00      	cmp	r7, #0
 801c566:	f000 80d8 	beq.w	801c71a <_printf_i+0x1d2>
 801c56a:	2f58      	cmp	r7, #88	; 0x58
 801c56c:	f000 80a3 	beq.w	801c6b6 <_printf_i+0x16e>
 801c570:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c574:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c578:	e03a      	b.n	801c5f0 <_printf_i+0xa8>
 801c57a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c57e:	2b15      	cmp	r3, #21
 801c580:	d8f6      	bhi.n	801c570 <_printf_i+0x28>
 801c582:	a101      	add	r1, pc, #4	; (adr r1, 801c588 <_printf_i+0x40>)
 801c584:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c588:	0801c5e1 	.word	0x0801c5e1
 801c58c:	0801c5f5 	.word	0x0801c5f5
 801c590:	0801c571 	.word	0x0801c571
 801c594:	0801c571 	.word	0x0801c571
 801c598:	0801c571 	.word	0x0801c571
 801c59c:	0801c571 	.word	0x0801c571
 801c5a0:	0801c5f5 	.word	0x0801c5f5
 801c5a4:	0801c571 	.word	0x0801c571
 801c5a8:	0801c571 	.word	0x0801c571
 801c5ac:	0801c571 	.word	0x0801c571
 801c5b0:	0801c571 	.word	0x0801c571
 801c5b4:	0801c701 	.word	0x0801c701
 801c5b8:	0801c625 	.word	0x0801c625
 801c5bc:	0801c6e3 	.word	0x0801c6e3
 801c5c0:	0801c571 	.word	0x0801c571
 801c5c4:	0801c571 	.word	0x0801c571
 801c5c8:	0801c723 	.word	0x0801c723
 801c5cc:	0801c571 	.word	0x0801c571
 801c5d0:	0801c625 	.word	0x0801c625
 801c5d4:	0801c571 	.word	0x0801c571
 801c5d8:	0801c571 	.word	0x0801c571
 801c5dc:	0801c6eb 	.word	0x0801c6eb
 801c5e0:	682b      	ldr	r3, [r5, #0]
 801c5e2:	1d1a      	adds	r2, r3, #4
 801c5e4:	681b      	ldr	r3, [r3, #0]
 801c5e6:	602a      	str	r2, [r5, #0]
 801c5e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c5ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c5f0:	2301      	movs	r3, #1
 801c5f2:	e0a3      	b.n	801c73c <_printf_i+0x1f4>
 801c5f4:	6820      	ldr	r0, [r4, #0]
 801c5f6:	6829      	ldr	r1, [r5, #0]
 801c5f8:	0606      	lsls	r6, r0, #24
 801c5fa:	f101 0304 	add.w	r3, r1, #4
 801c5fe:	d50a      	bpl.n	801c616 <_printf_i+0xce>
 801c600:	680e      	ldr	r6, [r1, #0]
 801c602:	602b      	str	r3, [r5, #0]
 801c604:	2e00      	cmp	r6, #0
 801c606:	da03      	bge.n	801c610 <_printf_i+0xc8>
 801c608:	232d      	movs	r3, #45	; 0x2d
 801c60a:	4276      	negs	r6, r6
 801c60c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c610:	485e      	ldr	r0, [pc, #376]	; (801c78c <_printf_i+0x244>)
 801c612:	230a      	movs	r3, #10
 801c614:	e019      	b.n	801c64a <_printf_i+0x102>
 801c616:	680e      	ldr	r6, [r1, #0]
 801c618:	602b      	str	r3, [r5, #0]
 801c61a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801c61e:	bf18      	it	ne
 801c620:	b236      	sxthne	r6, r6
 801c622:	e7ef      	b.n	801c604 <_printf_i+0xbc>
 801c624:	682b      	ldr	r3, [r5, #0]
 801c626:	6820      	ldr	r0, [r4, #0]
 801c628:	1d19      	adds	r1, r3, #4
 801c62a:	6029      	str	r1, [r5, #0]
 801c62c:	0601      	lsls	r1, r0, #24
 801c62e:	d501      	bpl.n	801c634 <_printf_i+0xec>
 801c630:	681e      	ldr	r6, [r3, #0]
 801c632:	e002      	b.n	801c63a <_printf_i+0xf2>
 801c634:	0646      	lsls	r6, r0, #25
 801c636:	d5fb      	bpl.n	801c630 <_printf_i+0xe8>
 801c638:	881e      	ldrh	r6, [r3, #0]
 801c63a:	4854      	ldr	r0, [pc, #336]	; (801c78c <_printf_i+0x244>)
 801c63c:	2f6f      	cmp	r7, #111	; 0x6f
 801c63e:	bf0c      	ite	eq
 801c640:	2308      	moveq	r3, #8
 801c642:	230a      	movne	r3, #10
 801c644:	2100      	movs	r1, #0
 801c646:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c64a:	6865      	ldr	r5, [r4, #4]
 801c64c:	60a5      	str	r5, [r4, #8]
 801c64e:	2d00      	cmp	r5, #0
 801c650:	bfa2      	ittt	ge
 801c652:	6821      	ldrge	r1, [r4, #0]
 801c654:	f021 0104 	bicge.w	r1, r1, #4
 801c658:	6021      	strge	r1, [r4, #0]
 801c65a:	b90e      	cbnz	r6, 801c660 <_printf_i+0x118>
 801c65c:	2d00      	cmp	r5, #0
 801c65e:	d04d      	beq.n	801c6fc <_printf_i+0x1b4>
 801c660:	4615      	mov	r5, r2
 801c662:	fbb6 f1f3 	udiv	r1, r6, r3
 801c666:	fb03 6711 	mls	r7, r3, r1, r6
 801c66a:	5dc7      	ldrb	r7, [r0, r7]
 801c66c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c670:	4637      	mov	r7, r6
 801c672:	42bb      	cmp	r3, r7
 801c674:	460e      	mov	r6, r1
 801c676:	d9f4      	bls.n	801c662 <_printf_i+0x11a>
 801c678:	2b08      	cmp	r3, #8
 801c67a:	d10b      	bne.n	801c694 <_printf_i+0x14c>
 801c67c:	6823      	ldr	r3, [r4, #0]
 801c67e:	07de      	lsls	r6, r3, #31
 801c680:	d508      	bpl.n	801c694 <_printf_i+0x14c>
 801c682:	6923      	ldr	r3, [r4, #16]
 801c684:	6861      	ldr	r1, [r4, #4]
 801c686:	4299      	cmp	r1, r3
 801c688:	bfde      	ittt	le
 801c68a:	2330      	movle	r3, #48	; 0x30
 801c68c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c690:	f105 35ff 	addle.w	r5, r5, #4294967295
 801c694:	1b52      	subs	r2, r2, r5
 801c696:	6122      	str	r2, [r4, #16]
 801c698:	f8cd a000 	str.w	sl, [sp]
 801c69c:	464b      	mov	r3, r9
 801c69e:	aa03      	add	r2, sp, #12
 801c6a0:	4621      	mov	r1, r4
 801c6a2:	4640      	mov	r0, r8
 801c6a4:	f7ff fee2 	bl	801c46c <_printf_common>
 801c6a8:	3001      	adds	r0, #1
 801c6aa:	d14c      	bne.n	801c746 <_printf_i+0x1fe>
 801c6ac:	f04f 30ff 	mov.w	r0, #4294967295
 801c6b0:	b004      	add	sp, #16
 801c6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c6b6:	4835      	ldr	r0, [pc, #212]	; (801c78c <_printf_i+0x244>)
 801c6b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801c6bc:	6829      	ldr	r1, [r5, #0]
 801c6be:	6823      	ldr	r3, [r4, #0]
 801c6c0:	f851 6b04 	ldr.w	r6, [r1], #4
 801c6c4:	6029      	str	r1, [r5, #0]
 801c6c6:	061d      	lsls	r5, r3, #24
 801c6c8:	d514      	bpl.n	801c6f4 <_printf_i+0x1ac>
 801c6ca:	07df      	lsls	r7, r3, #31
 801c6cc:	bf44      	itt	mi
 801c6ce:	f043 0320 	orrmi.w	r3, r3, #32
 801c6d2:	6023      	strmi	r3, [r4, #0]
 801c6d4:	b91e      	cbnz	r6, 801c6de <_printf_i+0x196>
 801c6d6:	6823      	ldr	r3, [r4, #0]
 801c6d8:	f023 0320 	bic.w	r3, r3, #32
 801c6dc:	6023      	str	r3, [r4, #0]
 801c6de:	2310      	movs	r3, #16
 801c6e0:	e7b0      	b.n	801c644 <_printf_i+0xfc>
 801c6e2:	6823      	ldr	r3, [r4, #0]
 801c6e4:	f043 0320 	orr.w	r3, r3, #32
 801c6e8:	6023      	str	r3, [r4, #0]
 801c6ea:	2378      	movs	r3, #120	; 0x78
 801c6ec:	4828      	ldr	r0, [pc, #160]	; (801c790 <_printf_i+0x248>)
 801c6ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c6f2:	e7e3      	b.n	801c6bc <_printf_i+0x174>
 801c6f4:	0659      	lsls	r1, r3, #25
 801c6f6:	bf48      	it	mi
 801c6f8:	b2b6      	uxthmi	r6, r6
 801c6fa:	e7e6      	b.n	801c6ca <_printf_i+0x182>
 801c6fc:	4615      	mov	r5, r2
 801c6fe:	e7bb      	b.n	801c678 <_printf_i+0x130>
 801c700:	682b      	ldr	r3, [r5, #0]
 801c702:	6826      	ldr	r6, [r4, #0]
 801c704:	6961      	ldr	r1, [r4, #20]
 801c706:	1d18      	adds	r0, r3, #4
 801c708:	6028      	str	r0, [r5, #0]
 801c70a:	0635      	lsls	r5, r6, #24
 801c70c:	681b      	ldr	r3, [r3, #0]
 801c70e:	d501      	bpl.n	801c714 <_printf_i+0x1cc>
 801c710:	6019      	str	r1, [r3, #0]
 801c712:	e002      	b.n	801c71a <_printf_i+0x1d2>
 801c714:	0670      	lsls	r0, r6, #25
 801c716:	d5fb      	bpl.n	801c710 <_printf_i+0x1c8>
 801c718:	8019      	strh	r1, [r3, #0]
 801c71a:	2300      	movs	r3, #0
 801c71c:	6123      	str	r3, [r4, #16]
 801c71e:	4615      	mov	r5, r2
 801c720:	e7ba      	b.n	801c698 <_printf_i+0x150>
 801c722:	682b      	ldr	r3, [r5, #0]
 801c724:	1d1a      	adds	r2, r3, #4
 801c726:	602a      	str	r2, [r5, #0]
 801c728:	681d      	ldr	r5, [r3, #0]
 801c72a:	6862      	ldr	r2, [r4, #4]
 801c72c:	2100      	movs	r1, #0
 801c72e:	4628      	mov	r0, r5
 801c730:	f7e3 fd86 	bl	8000240 <memchr>
 801c734:	b108      	cbz	r0, 801c73a <_printf_i+0x1f2>
 801c736:	1b40      	subs	r0, r0, r5
 801c738:	6060      	str	r0, [r4, #4]
 801c73a:	6863      	ldr	r3, [r4, #4]
 801c73c:	6123      	str	r3, [r4, #16]
 801c73e:	2300      	movs	r3, #0
 801c740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c744:	e7a8      	b.n	801c698 <_printf_i+0x150>
 801c746:	6923      	ldr	r3, [r4, #16]
 801c748:	462a      	mov	r2, r5
 801c74a:	4649      	mov	r1, r9
 801c74c:	4640      	mov	r0, r8
 801c74e:	47d0      	blx	sl
 801c750:	3001      	adds	r0, #1
 801c752:	d0ab      	beq.n	801c6ac <_printf_i+0x164>
 801c754:	6823      	ldr	r3, [r4, #0]
 801c756:	079b      	lsls	r3, r3, #30
 801c758:	d413      	bmi.n	801c782 <_printf_i+0x23a>
 801c75a:	68e0      	ldr	r0, [r4, #12]
 801c75c:	9b03      	ldr	r3, [sp, #12]
 801c75e:	4298      	cmp	r0, r3
 801c760:	bfb8      	it	lt
 801c762:	4618      	movlt	r0, r3
 801c764:	e7a4      	b.n	801c6b0 <_printf_i+0x168>
 801c766:	2301      	movs	r3, #1
 801c768:	4632      	mov	r2, r6
 801c76a:	4649      	mov	r1, r9
 801c76c:	4640      	mov	r0, r8
 801c76e:	47d0      	blx	sl
 801c770:	3001      	adds	r0, #1
 801c772:	d09b      	beq.n	801c6ac <_printf_i+0x164>
 801c774:	3501      	adds	r5, #1
 801c776:	68e3      	ldr	r3, [r4, #12]
 801c778:	9903      	ldr	r1, [sp, #12]
 801c77a:	1a5b      	subs	r3, r3, r1
 801c77c:	42ab      	cmp	r3, r5
 801c77e:	dcf2      	bgt.n	801c766 <_printf_i+0x21e>
 801c780:	e7eb      	b.n	801c75a <_printf_i+0x212>
 801c782:	2500      	movs	r5, #0
 801c784:	f104 0619 	add.w	r6, r4, #25
 801c788:	e7f5      	b.n	801c776 <_printf_i+0x22e>
 801c78a:	bf00      	nop
 801c78c:	08020745 	.word	0x08020745
 801c790:	08020756 	.word	0x08020756

0801c794 <_putc_r>:
 801c794:	b570      	push	{r4, r5, r6, lr}
 801c796:	460d      	mov	r5, r1
 801c798:	4614      	mov	r4, r2
 801c79a:	4606      	mov	r6, r0
 801c79c:	b118      	cbz	r0, 801c7a6 <_putc_r+0x12>
 801c79e:	6983      	ldr	r3, [r0, #24]
 801c7a0:	b90b      	cbnz	r3, 801c7a6 <_putc_r+0x12>
 801c7a2:	f7ff fb09 	bl	801bdb8 <__sinit>
 801c7a6:	4b1c      	ldr	r3, [pc, #112]	; (801c818 <_putc_r+0x84>)
 801c7a8:	429c      	cmp	r4, r3
 801c7aa:	d124      	bne.n	801c7f6 <_putc_r+0x62>
 801c7ac:	6874      	ldr	r4, [r6, #4]
 801c7ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c7b0:	07d8      	lsls	r0, r3, #31
 801c7b2:	d405      	bmi.n	801c7c0 <_putc_r+0x2c>
 801c7b4:	89a3      	ldrh	r3, [r4, #12]
 801c7b6:	0599      	lsls	r1, r3, #22
 801c7b8:	d402      	bmi.n	801c7c0 <_putc_r+0x2c>
 801c7ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c7bc:	f7ff fbac 	bl	801bf18 <__retarget_lock_acquire_recursive>
 801c7c0:	68a3      	ldr	r3, [r4, #8]
 801c7c2:	3b01      	subs	r3, #1
 801c7c4:	2b00      	cmp	r3, #0
 801c7c6:	60a3      	str	r3, [r4, #8]
 801c7c8:	da05      	bge.n	801c7d6 <_putc_r+0x42>
 801c7ca:	69a2      	ldr	r2, [r4, #24]
 801c7cc:	4293      	cmp	r3, r2
 801c7ce:	db1c      	blt.n	801c80a <_putc_r+0x76>
 801c7d0:	b2eb      	uxtb	r3, r5
 801c7d2:	2b0a      	cmp	r3, #10
 801c7d4:	d019      	beq.n	801c80a <_putc_r+0x76>
 801c7d6:	6823      	ldr	r3, [r4, #0]
 801c7d8:	1c5a      	adds	r2, r3, #1
 801c7da:	6022      	str	r2, [r4, #0]
 801c7dc:	701d      	strb	r5, [r3, #0]
 801c7de:	b2ed      	uxtb	r5, r5
 801c7e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c7e2:	07da      	lsls	r2, r3, #31
 801c7e4:	d405      	bmi.n	801c7f2 <_putc_r+0x5e>
 801c7e6:	89a3      	ldrh	r3, [r4, #12]
 801c7e8:	059b      	lsls	r3, r3, #22
 801c7ea:	d402      	bmi.n	801c7f2 <_putc_r+0x5e>
 801c7ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c7ee:	f7ff fb94 	bl	801bf1a <__retarget_lock_release_recursive>
 801c7f2:	4628      	mov	r0, r5
 801c7f4:	bd70      	pop	{r4, r5, r6, pc}
 801c7f6:	4b09      	ldr	r3, [pc, #36]	; (801c81c <_putc_r+0x88>)
 801c7f8:	429c      	cmp	r4, r3
 801c7fa:	d101      	bne.n	801c800 <_putc_r+0x6c>
 801c7fc:	68b4      	ldr	r4, [r6, #8]
 801c7fe:	e7d6      	b.n	801c7ae <_putc_r+0x1a>
 801c800:	4b07      	ldr	r3, [pc, #28]	; (801c820 <_putc_r+0x8c>)
 801c802:	429c      	cmp	r4, r3
 801c804:	bf08      	it	eq
 801c806:	68f4      	ldreq	r4, [r6, #12]
 801c808:	e7d1      	b.n	801c7ae <_putc_r+0x1a>
 801c80a:	4629      	mov	r1, r5
 801c80c:	4622      	mov	r2, r4
 801c80e:	4630      	mov	r0, r6
 801c810:	f7ff f8da 	bl	801b9c8 <__swbuf_r>
 801c814:	4605      	mov	r5, r0
 801c816:	e7e3      	b.n	801c7e0 <_putc_r+0x4c>
 801c818:	080206f4 	.word	0x080206f4
 801c81c:	08020714 	.word	0x08020714
 801c820:	080206d4 	.word	0x080206d4

0801c824 <_sbrk_r>:
 801c824:	b538      	push	{r3, r4, r5, lr}
 801c826:	4d06      	ldr	r5, [pc, #24]	; (801c840 <_sbrk_r+0x1c>)
 801c828:	2300      	movs	r3, #0
 801c82a:	4604      	mov	r4, r0
 801c82c:	4608      	mov	r0, r1
 801c82e:	602b      	str	r3, [r5, #0]
 801c830:	f7e5 fc56 	bl	80020e0 <_sbrk>
 801c834:	1c43      	adds	r3, r0, #1
 801c836:	d102      	bne.n	801c83e <_sbrk_r+0x1a>
 801c838:	682b      	ldr	r3, [r5, #0]
 801c83a:	b103      	cbz	r3, 801c83e <_sbrk_r+0x1a>
 801c83c:	6023      	str	r3, [r4, #0]
 801c83e:	bd38      	pop	{r3, r4, r5, pc}
 801c840:	200111e8 	.word	0x200111e8

0801c844 <__sread>:
 801c844:	b510      	push	{r4, lr}
 801c846:	460c      	mov	r4, r1
 801c848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c84c:	f000 f8a8 	bl	801c9a0 <_read_r>
 801c850:	2800      	cmp	r0, #0
 801c852:	bfab      	itete	ge
 801c854:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c856:	89a3      	ldrhlt	r3, [r4, #12]
 801c858:	181b      	addge	r3, r3, r0
 801c85a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c85e:	bfac      	ite	ge
 801c860:	6563      	strge	r3, [r4, #84]	; 0x54
 801c862:	81a3      	strhlt	r3, [r4, #12]
 801c864:	bd10      	pop	{r4, pc}

0801c866 <__swrite>:
 801c866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c86a:	461f      	mov	r7, r3
 801c86c:	898b      	ldrh	r3, [r1, #12]
 801c86e:	05db      	lsls	r3, r3, #23
 801c870:	4605      	mov	r5, r0
 801c872:	460c      	mov	r4, r1
 801c874:	4616      	mov	r6, r2
 801c876:	d505      	bpl.n	801c884 <__swrite+0x1e>
 801c878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c87c:	2302      	movs	r3, #2
 801c87e:	2200      	movs	r2, #0
 801c880:	f000 f870 	bl	801c964 <_lseek_r>
 801c884:	89a3      	ldrh	r3, [r4, #12]
 801c886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c88a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c88e:	81a3      	strh	r3, [r4, #12]
 801c890:	4632      	mov	r2, r6
 801c892:	463b      	mov	r3, r7
 801c894:	4628      	mov	r0, r5
 801c896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c89a:	f000 b817 	b.w	801c8cc <_write_r>

0801c89e <__sseek>:
 801c89e:	b510      	push	{r4, lr}
 801c8a0:	460c      	mov	r4, r1
 801c8a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c8a6:	f000 f85d 	bl	801c964 <_lseek_r>
 801c8aa:	1c43      	adds	r3, r0, #1
 801c8ac:	89a3      	ldrh	r3, [r4, #12]
 801c8ae:	bf15      	itete	ne
 801c8b0:	6560      	strne	r0, [r4, #84]	; 0x54
 801c8b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c8b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c8ba:	81a3      	strheq	r3, [r4, #12]
 801c8bc:	bf18      	it	ne
 801c8be:	81a3      	strhne	r3, [r4, #12]
 801c8c0:	bd10      	pop	{r4, pc}

0801c8c2 <__sclose>:
 801c8c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c8c6:	f000 b81b 	b.w	801c900 <_close_r>
	...

0801c8cc <_write_r>:
 801c8cc:	b538      	push	{r3, r4, r5, lr}
 801c8ce:	4d07      	ldr	r5, [pc, #28]	; (801c8ec <_write_r+0x20>)
 801c8d0:	4604      	mov	r4, r0
 801c8d2:	4608      	mov	r0, r1
 801c8d4:	4611      	mov	r1, r2
 801c8d6:	2200      	movs	r2, #0
 801c8d8:	602a      	str	r2, [r5, #0]
 801c8da:	461a      	mov	r2, r3
 801c8dc:	f7e5 fbaf 	bl	800203e <_write>
 801c8e0:	1c43      	adds	r3, r0, #1
 801c8e2:	d102      	bne.n	801c8ea <_write_r+0x1e>
 801c8e4:	682b      	ldr	r3, [r5, #0]
 801c8e6:	b103      	cbz	r3, 801c8ea <_write_r+0x1e>
 801c8e8:	6023      	str	r3, [r4, #0]
 801c8ea:	bd38      	pop	{r3, r4, r5, pc}
 801c8ec:	200111e8 	.word	0x200111e8

0801c8f0 <abort>:
 801c8f0:	b508      	push	{r3, lr}
 801c8f2:	2006      	movs	r0, #6
 801c8f4:	f000 f88e 	bl	801ca14 <raise>
 801c8f8:	2001      	movs	r0, #1
 801c8fa:	f7e5 fb79 	bl	8001ff0 <_exit>
	...

0801c900 <_close_r>:
 801c900:	b538      	push	{r3, r4, r5, lr}
 801c902:	4d06      	ldr	r5, [pc, #24]	; (801c91c <_close_r+0x1c>)
 801c904:	2300      	movs	r3, #0
 801c906:	4604      	mov	r4, r0
 801c908:	4608      	mov	r0, r1
 801c90a:	602b      	str	r3, [r5, #0]
 801c90c:	f7e5 fbb3 	bl	8002076 <_close>
 801c910:	1c43      	adds	r3, r0, #1
 801c912:	d102      	bne.n	801c91a <_close_r+0x1a>
 801c914:	682b      	ldr	r3, [r5, #0]
 801c916:	b103      	cbz	r3, 801c91a <_close_r+0x1a>
 801c918:	6023      	str	r3, [r4, #0]
 801c91a:	bd38      	pop	{r3, r4, r5, pc}
 801c91c:	200111e8 	.word	0x200111e8

0801c920 <_fstat_r>:
 801c920:	b538      	push	{r3, r4, r5, lr}
 801c922:	4d07      	ldr	r5, [pc, #28]	; (801c940 <_fstat_r+0x20>)
 801c924:	2300      	movs	r3, #0
 801c926:	4604      	mov	r4, r0
 801c928:	4608      	mov	r0, r1
 801c92a:	4611      	mov	r1, r2
 801c92c:	602b      	str	r3, [r5, #0]
 801c92e:	f7e5 fbae 	bl	800208e <_fstat>
 801c932:	1c43      	adds	r3, r0, #1
 801c934:	d102      	bne.n	801c93c <_fstat_r+0x1c>
 801c936:	682b      	ldr	r3, [r5, #0]
 801c938:	b103      	cbz	r3, 801c93c <_fstat_r+0x1c>
 801c93a:	6023      	str	r3, [r4, #0]
 801c93c:	bd38      	pop	{r3, r4, r5, pc}
 801c93e:	bf00      	nop
 801c940:	200111e8 	.word	0x200111e8

0801c944 <_isatty_r>:
 801c944:	b538      	push	{r3, r4, r5, lr}
 801c946:	4d06      	ldr	r5, [pc, #24]	; (801c960 <_isatty_r+0x1c>)
 801c948:	2300      	movs	r3, #0
 801c94a:	4604      	mov	r4, r0
 801c94c:	4608      	mov	r0, r1
 801c94e:	602b      	str	r3, [r5, #0]
 801c950:	f7e5 fbad 	bl	80020ae <_isatty>
 801c954:	1c43      	adds	r3, r0, #1
 801c956:	d102      	bne.n	801c95e <_isatty_r+0x1a>
 801c958:	682b      	ldr	r3, [r5, #0]
 801c95a:	b103      	cbz	r3, 801c95e <_isatty_r+0x1a>
 801c95c:	6023      	str	r3, [r4, #0]
 801c95e:	bd38      	pop	{r3, r4, r5, pc}
 801c960:	200111e8 	.word	0x200111e8

0801c964 <_lseek_r>:
 801c964:	b538      	push	{r3, r4, r5, lr}
 801c966:	4d07      	ldr	r5, [pc, #28]	; (801c984 <_lseek_r+0x20>)
 801c968:	4604      	mov	r4, r0
 801c96a:	4608      	mov	r0, r1
 801c96c:	4611      	mov	r1, r2
 801c96e:	2200      	movs	r2, #0
 801c970:	602a      	str	r2, [r5, #0]
 801c972:	461a      	mov	r2, r3
 801c974:	f7e5 fba6 	bl	80020c4 <_lseek>
 801c978:	1c43      	adds	r3, r0, #1
 801c97a:	d102      	bne.n	801c982 <_lseek_r+0x1e>
 801c97c:	682b      	ldr	r3, [r5, #0]
 801c97e:	b103      	cbz	r3, 801c982 <_lseek_r+0x1e>
 801c980:	6023      	str	r3, [r4, #0]
 801c982:	bd38      	pop	{r3, r4, r5, pc}
 801c984:	200111e8 	.word	0x200111e8

0801c988 <__malloc_lock>:
 801c988:	4801      	ldr	r0, [pc, #4]	; (801c990 <__malloc_lock+0x8>)
 801c98a:	f7ff bac5 	b.w	801bf18 <__retarget_lock_acquire_recursive>
 801c98e:	bf00      	nop
 801c990:	200111f0 	.word	0x200111f0

0801c994 <__malloc_unlock>:
 801c994:	4801      	ldr	r0, [pc, #4]	; (801c99c <__malloc_unlock+0x8>)
 801c996:	f7ff bac0 	b.w	801bf1a <__retarget_lock_release_recursive>
 801c99a:	bf00      	nop
 801c99c:	200111f0 	.word	0x200111f0

0801c9a0 <_read_r>:
 801c9a0:	b538      	push	{r3, r4, r5, lr}
 801c9a2:	4d07      	ldr	r5, [pc, #28]	; (801c9c0 <_read_r+0x20>)
 801c9a4:	4604      	mov	r4, r0
 801c9a6:	4608      	mov	r0, r1
 801c9a8:	4611      	mov	r1, r2
 801c9aa:	2200      	movs	r2, #0
 801c9ac:	602a      	str	r2, [r5, #0]
 801c9ae:	461a      	mov	r2, r3
 801c9b0:	f7e5 fb28 	bl	8002004 <_read>
 801c9b4:	1c43      	adds	r3, r0, #1
 801c9b6:	d102      	bne.n	801c9be <_read_r+0x1e>
 801c9b8:	682b      	ldr	r3, [r5, #0]
 801c9ba:	b103      	cbz	r3, 801c9be <_read_r+0x1e>
 801c9bc:	6023      	str	r3, [r4, #0]
 801c9be:	bd38      	pop	{r3, r4, r5, pc}
 801c9c0:	200111e8 	.word	0x200111e8

0801c9c4 <_raise_r>:
 801c9c4:	291f      	cmp	r1, #31
 801c9c6:	b538      	push	{r3, r4, r5, lr}
 801c9c8:	4604      	mov	r4, r0
 801c9ca:	460d      	mov	r5, r1
 801c9cc:	d904      	bls.n	801c9d8 <_raise_r+0x14>
 801c9ce:	2316      	movs	r3, #22
 801c9d0:	6003      	str	r3, [r0, #0]
 801c9d2:	f04f 30ff 	mov.w	r0, #4294967295
 801c9d6:	bd38      	pop	{r3, r4, r5, pc}
 801c9d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801c9da:	b112      	cbz	r2, 801c9e2 <_raise_r+0x1e>
 801c9dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c9e0:	b94b      	cbnz	r3, 801c9f6 <_raise_r+0x32>
 801c9e2:	4620      	mov	r0, r4
 801c9e4:	f000 f830 	bl	801ca48 <_getpid_r>
 801c9e8:	462a      	mov	r2, r5
 801c9ea:	4601      	mov	r1, r0
 801c9ec:	4620      	mov	r0, r4
 801c9ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c9f2:	f000 b817 	b.w	801ca24 <_kill_r>
 801c9f6:	2b01      	cmp	r3, #1
 801c9f8:	d00a      	beq.n	801ca10 <_raise_r+0x4c>
 801c9fa:	1c59      	adds	r1, r3, #1
 801c9fc:	d103      	bne.n	801ca06 <_raise_r+0x42>
 801c9fe:	2316      	movs	r3, #22
 801ca00:	6003      	str	r3, [r0, #0]
 801ca02:	2001      	movs	r0, #1
 801ca04:	e7e7      	b.n	801c9d6 <_raise_r+0x12>
 801ca06:	2400      	movs	r4, #0
 801ca08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ca0c:	4628      	mov	r0, r5
 801ca0e:	4798      	blx	r3
 801ca10:	2000      	movs	r0, #0
 801ca12:	e7e0      	b.n	801c9d6 <_raise_r+0x12>

0801ca14 <raise>:
 801ca14:	4b02      	ldr	r3, [pc, #8]	; (801ca20 <raise+0xc>)
 801ca16:	4601      	mov	r1, r0
 801ca18:	6818      	ldr	r0, [r3, #0]
 801ca1a:	f7ff bfd3 	b.w	801c9c4 <_raise_r>
 801ca1e:	bf00      	nop
 801ca20:	20000030 	.word	0x20000030

0801ca24 <_kill_r>:
 801ca24:	b538      	push	{r3, r4, r5, lr}
 801ca26:	4d07      	ldr	r5, [pc, #28]	; (801ca44 <_kill_r+0x20>)
 801ca28:	2300      	movs	r3, #0
 801ca2a:	4604      	mov	r4, r0
 801ca2c:	4608      	mov	r0, r1
 801ca2e:	4611      	mov	r1, r2
 801ca30:	602b      	str	r3, [r5, #0]
 801ca32:	f7e5 facb 	bl	8001fcc <_kill>
 801ca36:	1c43      	adds	r3, r0, #1
 801ca38:	d102      	bne.n	801ca40 <_kill_r+0x1c>
 801ca3a:	682b      	ldr	r3, [r5, #0]
 801ca3c:	b103      	cbz	r3, 801ca40 <_kill_r+0x1c>
 801ca3e:	6023      	str	r3, [r4, #0]
 801ca40:	bd38      	pop	{r3, r4, r5, pc}
 801ca42:	bf00      	nop
 801ca44:	200111e8 	.word	0x200111e8

0801ca48 <_getpid_r>:
 801ca48:	f7e5 bab8 	b.w	8001fbc <_getpid>

0801ca4c <_init>:
 801ca4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca4e:	bf00      	nop
 801ca50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ca52:	bc08      	pop	{r3}
 801ca54:	469e      	mov	lr, r3
 801ca56:	4770      	bx	lr

0801ca58 <_fini>:
 801ca58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca5a:	bf00      	nop
 801ca5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ca5e:	bc08      	pop	{r3}
 801ca60:	469e      	mov	lr, r3
 801ca62:	4770      	bx	lr
