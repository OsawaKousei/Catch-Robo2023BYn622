
Catch-Robo2023BYn622.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2cc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  0800b4cc  0800b4cc  0001b4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b798  0800b798  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b798  0800b798  0001b798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7a0  0800b7a0  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7a0  0800b7a0  0001b7a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b7a4  0800b7a4  0001b7a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800b7a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000074  0800b81c  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000114  0800b8bc  00020114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008d20  200001b4  0800b95c  000201b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20008ed4  0800b95c  00028ed4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00028112  00000000  00000000  000201e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004af4  00000000  00000000  000482f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e40  00000000  00000000  0004cde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001c80  00000000  00000000  0004ec28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002cf50  00000000  00000000  000508a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000242df  00000000  00000000  0007d7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00113788  00000000  00000000  000a1ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001b525f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008888  00000000  00000000  001b52b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b4 	.word	0x200001b4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b4b4 	.word	0x0800b4b4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b8 	.word	0x200001b8
 800023c:	0800b4b4 	.word	0x0800b4b4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <PushTx8Bytes>:
CANTxBuf buffer[CAN_TXBUFFER_SIZE];
uint32_t readpoint = 0;
uint32_t writepoint = 0;
uint8_t isfull = 0;

HAL_StatusTypeDef PushTx8Bytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){
 80005e4:	b480      	push	{r7}
 80005e6:	b087      	sub	sp, #28
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
	buffer[writepoint].DLC = size;
 80005f0:	4b24      	ldr	r3, [pc, #144]	; (8000684 <PushTx8Bytes+0xa0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a24      	ldr	r2, [pc, #144]	; (8000688 <PushTx8Bytes+0xa4>)
 80005f6:	011b      	lsls	r3, r3, #4
 80005f8:	4413      	add	r3, r2
 80005fa:	3304      	adds	r3, #4
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	601a      	str	r2, [r3, #0]
	buffer[writepoint].ExtId = ExtId;
 8000600:	4b20      	ldr	r3, [pc, #128]	; (8000684 <PushTx8Bytes+0xa0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a20      	ldr	r2, [pc, #128]	; (8000688 <PushTx8Bytes+0xa4>)
 8000606:	011b      	lsls	r3, r3, #4
 8000608:	4413      	add	r3, r2
 800060a:	68fa      	ldr	r2, [r7, #12]
 800060c:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++)buffer[writepoint].bytes[i] = bytes[i];
 800060e:	2300      	movs	r3, #0
 8000610:	75fb      	strb	r3, [r7, #23]
 8000612:	e010      	b.n	8000636 <PushTx8Bytes+0x52>
 8000614:	7dfb      	ldrb	r3, [r7, #23]
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	18d1      	adds	r1, r2, r3
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <PushTx8Bytes+0xa0>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	7dfb      	ldrb	r3, [r7, #23]
 8000620:	7808      	ldrb	r0, [r1, #0]
 8000622:	4919      	ldr	r1, [pc, #100]	; (8000688 <PushTx8Bytes+0xa4>)
 8000624:	0112      	lsls	r2, r2, #4
 8000626:	440a      	add	r2, r1
 8000628:	4413      	add	r3, r2
 800062a:	3308      	adds	r3, #8
 800062c:	4602      	mov	r2, r0
 800062e:	701a      	strb	r2, [r3, #0]
 8000630:	7dfb      	ldrb	r3, [r7, #23]
 8000632:	3301      	adds	r3, #1
 8000634:	75fb      	strb	r3, [r7, #23]
 8000636:	7dfb      	ldrb	r3, [r7, #23]
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	429a      	cmp	r2, r3
 800063c:	d8ea      	bhi.n	8000614 <PushTx8Bytes+0x30>

	if (isfull == 1)readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <PushTx8Bytes+0xa8>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d106      	bne.n	8000654 <PushTx8Bytes+0x70>
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <PushTx8Bytes+0xac>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	3301      	adds	r3, #1
 800064c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000650:	4a0f      	ldr	r2, [pc, #60]	; (8000690 <PushTx8Bytes+0xac>)
 8000652:	6013      	str	r3, [r2, #0]
	writepoint = (writepoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000654:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <PushTx8Bytes+0xa0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	3301      	adds	r3, #1
 800065a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800065e:	4a09      	ldr	r2, [pc, #36]	; (8000684 <PushTx8Bytes+0xa0>)
 8000660:	6013      	str	r3, [r2, #0]

	if (writepoint == readpoint){
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <PushTx8Bytes+0xa0>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <PushTx8Bytes+0xac>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	429a      	cmp	r2, r3
 800066c:	d102      	bne.n	8000674 <PushTx8Bytes+0x90>
		isfull = 1;
 800066e:	4b07      	ldr	r3, [pc, #28]	; (800068c <PushTx8Bytes+0xa8>)
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]
	}

	return HAL_OK;
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	371c      	adds	r7, #28
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	200024a8 	.word	0x200024a8
 8000688:	200004a4 	.word	0x200004a4
 800068c:	200024ac 	.word	0x200024ac
 8000690:	200024a4 	.word	0x200024a4

08000694 <PopSendTx8Bytes>:

HAL_StatusTypeDef PopSendTx8Bytes(){
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;

	txHeader.RTR = CAN_RTR_DATA; // Data frame
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
	txHeader.IDE = CAN_ID_EXT;	 // CAN Extend ID
 800069e:	2304      	movs	r3, #4
 80006a0:	60fb      	str	r3, [r7, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	763b      	strb	r3, [r7, #24]

	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 80006a6:	e035      	b.n	8000714 <PopSendTx8Bytes+0x80>
		if (isfull == 0 && readpoint == writepoint)break;
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <PopSendTx8Bytes+0xa0>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d105      	bne.n	80006bc <PopSendTx8Bytes+0x28>
 80006b0:	4b21      	ldr	r3, [pc, #132]	; (8000738 <PopSendTx8Bytes+0xa4>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b21      	ldr	r3, [pc, #132]	; (800073c <PopSendTx8Bytes+0xa8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d034      	beq.n	8000726 <PopSendTx8Bytes+0x92>

		txHeader.DLC = buffer[readpoint].DLC;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <PopSendTx8Bytes+0xa4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a1f      	ldr	r2, [pc, #124]	; (8000740 <PopSendTx8Bytes+0xac>)
 80006c2:	011b      	lsls	r3, r3, #4
 80006c4:	4413      	add	r3, r2
 80006c6:	3304      	adds	r3, #4
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	617b      	str	r3, [r7, #20]
		txHeader.ExtId = buffer[readpoint].ExtId;
 80006cc:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <PopSendTx8Bytes+0xa4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a1b      	ldr	r2, [pc, #108]	; (8000740 <PopSendTx8Bytes+0xac>)
 80006d2:	011b      	lsls	r3, r3, #4
 80006d4:	4413      	add	r3, r2
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	60bb      	str	r3, [r7, #8]

		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, buffer[readpoint].bytes, &txMailbox);
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <PopSendTx8Bytes+0xb0>)
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	4b16      	ldr	r3, [pc, #88]	; (8000738 <PopSendTx8Bytes+0xa4>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	011b      	lsls	r3, r3, #4
 80006e4:	3308      	adds	r3, #8
 80006e6:	4a16      	ldr	r2, [pc, #88]	; (8000740 <PopSendTx8Bytes+0xac>)
 80006e8:	441a      	add	r2, r3
 80006ea:	463b      	mov	r3, r7
 80006ec:	1d39      	adds	r1, r7, #4
 80006ee:	f002 f8f5 	bl	80028dc <HAL_CAN_AddTxMessage>
 80006f2:	4603      	mov	r3, r0
 80006f4:	77fb      	strb	r3, [r7, #31]
		if (ret != HAL_OK)return ret;
 80006f6:	7ffb      	ldrb	r3, [r7, #31]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <PopSendTx8Bytes+0x6c>
 80006fc:	7ffb      	ldrb	r3, [r7, #31]
 80006fe:	e014      	b.n	800072a <PopSendTx8Bytes+0x96>

		readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000700:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <PopSendTx8Bytes+0xa4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	3301      	adds	r3, #1
 8000706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800070a:	4a0b      	ldr	r2, [pc, #44]	; (8000738 <PopSendTx8Bytes+0xa4>)
 800070c:	6013      	str	r3, [r2, #0]
		isfull = 0;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <PopSendTx8Bytes+0xa0>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <PopSendTx8Bytes+0xb0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f002 f9af 	bl	8002a7c <HAL_CAN_GetTxMailboxesFreeLevel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d1c1      	bne.n	80006a8 <PopSendTx8Bytes+0x14>
 8000724:	e000      	b.n	8000728 <PopSendTx8Bytes+0x94>
		if (isfull == 0 && readpoint == writepoint)break;
 8000726:	bf00      	nop
	}

	return HAL_OK;
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	3720      	adds	r7, #32
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200024ac 	.word	0x200024ac
 8000738:	200024a4 	.word	0x200024a4
 800073c:	200024a8 	.word	0x200024a8
 8000740:	200004a4 	.word	0x200004a4
 8000744:	200001d0 	.word	0x200001d0

08000748 <WhenTxMailbox0_1_2CompleteCallbackCalled>:

void WhenTxMailbox0_1_2CompleteCallbackCalled(){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 800074c:	f7ff ffa2 	bl	8000694 <PopSendTx8Bytes>
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}

08000754 <WhenTxMailbox0_1_2AbortCallbackCalled>:

void WhenTxMailbox0_1_2AbortCallbackCalled(){
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 8000758:	f7ff ff9c 	bl	8000694 <PopSendTx8Bytes>
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <WhenCANRxFifo0MsgPending>:

void WhenCANRxFifo0MsgPending(CAN_HandleTypeDef *phcan, NUM_OF_DEVICES *num_of){ // Fifo0MsgPendingで呼び出すこと. CAN受信時に呼び出される関数
 8000760:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000764:	b08e      	sub	sp, #56	; 0x38
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
 800076a:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_CAN_GetRxMessage(phcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK){
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	f107 0218 	add.w	r2, r7, #24
 8000774:	2100      	movs	r1, #0
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f002 f9b5 	bl	8002ae6 <HAL_CAN_GetRxMessage>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d004      	beq.n	800078c <WhenCANRxFifo0MsgPending+0x2c>
		// Reception Error
		printf("GetRxMessage error\n\r");
 8000782:	486e      	ldr	r0, [pc, #440]	; (800093c <WhenCANRxFifo0MsgPending+0x1dc>)
 8000784:	f009 fe92 	bl	800a4ac <iprintf>
		Error_Handler();
 8000788:	f001 fa18 	bl	8001bbc <Error_Handler>
	}
	// awakeコマンドを受信した場合
	CAN_Device can_device = Extract_CAN_Device(rxHeader.ExtId);
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	2200      	movs	r2, #0
 8000790:	4698      	mov	r8, r3
 8000792:	4691      	mov	r9, r2
 8000794:	4640      	mov	r0, r8
 8000796:	4649      	mov	r1, r9
 8000798:	f000 fe04 	bl	80013a4 <Extract_CAN_Device>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	733a      	strb	r2, [r7, #12]
 80007a2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80007a6:	737a      	strb	r2, [r7, #13]
 80007a8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80007ac:	73bb      	strb	r3, [r7, #14]
	uint8_t extracted_cmd = Extract_CAN_CMD(rxHeader.ExtId);
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	2200      	movs	r2, #0
 80007b2:	461c      	mov	r4, r3
 80007b4:	4615      	mov	r5, r2
 80007b6:	4620      	mov	r0, r4
 80007b8:	4629      	mov	r1, r5
 80007ba:	f000 fe3f 	bl	800143c <Extract_CAN_CMD>
 80007be:	4603      	mov	r3, r0
 80007c0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(extracted_cmd == AWAKE_CMD){
 80007c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d139      	bne.n	8000840 <WhenCANRxFifo0MsgPending+0xe0>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 80007cc:	2300      	movs	r3, #0
 80007ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80007d2:	e013      	b.n	80007fc <WhenCANRxFifo0MsgPending+0x9c>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 80007d4:	7b3b      	ldrb	r3, [r7, #12]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80007dc:	4958      	ldr	r1, [pc, #352]	; (8000940 <WhenCANRxFifo0MsgPending+0x1e0>)
 80007de:	4603      	mov	r3, r0
 80007e0:	00db      	lsls	r3, r3, #3
 80007e2:	1a1b      	subs	r3, r3, r0
 80007e4:	440b      	add	r3, r1
 80007e6:	4413      	add	r3, r2
 80007e8:	781a      	ldrb	r2, [r3, #0]
 80007ea:	7c3b      	ldrb	r3, [r7, #16]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	f000 80a0 	beq.w	8000932 <WhenCANRxFifo0MsgPending+0x1d2>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 80007f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007f6:	3301      	adds	r3, #1
 80007f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80007fc:	7b3b      	ldrb	r3, [r7, #12]
 80007fe:	461a      	mov	r2, r3
 8000800:	4b50      	ldr	r3, [pc, #320]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000802:	5c9b      	ldrb	r3, [r3, r2]
 8000804:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000808:	429a      	cmp	r2, r3
 800080a:	d3e3      	bcc.n	80007d4 <WhenCANRxFifo0MsgPending+0x74>
		}
		node_id_list[can_device.node_type][num_detected[can_device.node_type]] = rxData[0];
 800080c:	7b3b      	ldrb	r3, [r7, #12]
 800080e:	4619      	mov	r1, r3
 8000810:	7b3b      	ldrb	r3, [r7, #12]
 8000812:	461a      	mov	r2, r3
 8000814:	4b4b      	ldr	r3, [pc, #300]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000816:	5c9b      	ldrb	r3, [r3, r2]
 8000818:	461c      	mov	r4, r3
 800081a:	7c38      	ldrb	r0, [r7, #16]
 800081c:	4a48      	ldr	r2, [pc, #288]	; (8000940 <WhenCANRxFifo0MsgPending+0x1e0>)
 800081e:	460b      	mov	r3, r1
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	1a5b      	subs	r3, r3, r1
 8000824:	4413      	add	r3, r2
 8000826:	4423      	add	r3, r4
 8000828:	4602      	mov	r2, r0
 800082a:	701a      	strb	r2, [r3, #0]
		num_detected[can_device.node_type] += 1;
 800082c:	7b3b      	ldrb	r3, [r7, #12]
 800082e:	461a      	mov	r2, r3
 8000830:	4b44      	ldr	r3, [pc, #272]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000832:	5c9b      	ldrb	r3, [r3, r2]
 8000834:	7b3a      	ldrb	r2, [r7, #12]
 8000836:	3301      	adds	r3, #1
 8000838:	b2d9      	uxtb	r1, r3
 800083a:	4b42      	ldr	r3, [pc, #264]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 800083c:	5499      	strb	r1, [r3, r2]
 800083e:	e04a      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
	}else if(extracted_cmd == FB_CMD){
 8000840:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000844:	2b01      	cmp	r3, #1
 8000846:	d146      	bne.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
		if (can_device.node_type == NODE_MCMD1){
 8000848:	7b3b      	ldrb	r3, [r7, #12]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d10d      	bne.n	800086a <WhenCANRxFifo0MsgPending+0x10a>
			memcpy(&(_feedback_table_mcmd1[can_device.node_id].feedback_motor[can_device.device_num]),
 800084e:	7b7b      	ldrb	r3, [r7, #13]
 8000850:	7bba      	ldrb	r2, [r7, #14]
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	4413      	add	r3, r2
 8000856:	00db      	lsls	r3, r3, #3
 8000858:	4a3b      	ldr	r2, [pc, #236]	; (8000948 <WhenCANRxFifo0MsgPending+0x1e8>)
 800085a:	4413      	add	r3, r2
 800085c:	461a      	mov	r2, r3
 800085e:	f107 0310 	add.w	r3, r7, #16
 8000862:	cb03      	ldmia	r3!, {r0, r1}
 8000864:	6010      	str	r0, [r2, #0]
 8000866:	6051      	str	r1, [r2, #4]
 8000868:	e035      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
                   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD2){
 800086a:	7b3b      	ldrb	r3, [r7, #12]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d10d      	bne.n	800088c <WhenCANRxFifo0MsgPending+0x12c>
			memcpy(&(_feedback_table_mcmd2[can_device.node_id].feedback_motor[can_device.device_num]),
 8000870:	7b7b      	ldrb	r3, [r7, #13]
 8000872:	7bba      	ldrb	r2, [r7, #14]
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	4413      	add	r3, r2
 8000878:	00db      	lsls	r3, r3, #3
 800087a:	4a34      	ldr	r2, [pc, #208]	; (800094c <WhenCANRxFifo0MsgPending+0x1ec>)
 800087c:	4413      	add	r3, r2
 800087e:	461a      	mov	r2, r3
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	cb03      	ldmia	r3!, {r0, r1}
 8000886:	6010      	str	r0, [r2, #0]
 8000888:	6051      	str	r1, [r2, #4]
 800088a:	e024      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD3){
 800088c:	7b3b      	ldrb	r3, [r7, #12]
 800088e:	2b03      	cmp	r3, #3
 8000890:	d10d      	bne.n	80008ae <WhenCANRxFifo0MsgPending+0x14e>
			memcpy(&(_feedback_table_mcmd3[can_device.node_id].feedback_motor[can_device.device_num]),
 8000892:	7b7b      	ldrb	r3, [r7, #13]
 8000894:	7bba      	ldrb	r2, [r7, #14]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	4413      	add	r3, r2
 800089a:	00db      	lsls	r3, r3, #3
 800089c:	4a2c      	ldr	r2, [pc, #176]	; (8000950 <WhenCANRxFifo0MsgPending+0x1f0>)
 800089e:	4413      	add	r3, r2
 80008a0:	461a      	mov	r2, r3
 80008a2:	f107 0310 	add.w	r3, r7, #16
 80008a6:	cb03      	ldmia	r3!, {r0, r1}
 80008a8:	6010      	str	r0, [r2, #0]
 80008aa:	6051      	str	r1, [r2, #4]
 80008ac:	e013      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD4){
 80008ae:	7b3b      	ldrb	r3, [r7, #12]
 80008b0:	2b06      	cmp	r3, #6
 80008b2:	d10d      	bne.n	80008d0 <WhenCANRxFifo0MsgPending+0x170>
			memcpy(&(_feedback_table_mcmd4[can_device.node_id].feedback_motor[can_device.device_num]),
 80008b4:	7b7b      	ldrb	r3, [r7, #13]
 80008b6:	7bba      	ldrb	r2, [r7, #14]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	4413      	add	r3, r2
 80008bc:	00db      	lsls	r3, r3, #3
 80008be:	4a25      	ldr	r2, [pc, #148]	; (8000954 <WhenCANRxFifo0MsgPending+0x1f4>)
 80008c0:	4413      	add	r3, r2
 80008c2:	461a      	mov	r2, r3
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	cb03      	ldmia	r3!, {r0, r1}
 80008ca:	6010      	str	r0, [r2, #0]
 80008cc:	6051      	str	r1, [r2, #4]
 80008ce:	e002      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else{
			printf("Error\n\r");
 80008d0:	4821      	ldr	r0, [pc, #132]	; (8000958 <WhenCANRxFifo0MsgPending+0x1f8>)
 80008d2:	f009 fdeb 	bl	800a4ac <iprintf>
		}
	}else{

    }
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 80008d6:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 80008d8:	785a      	ldrb	r2, [r3, #1]
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	429a      	cmp	r2, r3
 80008e0:	d128      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 80008e4:	789a      	ldrb	r2, [r3, #2]
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	785b      	ldrb	r3, [r3, #1]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d122      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 80008f0:	78da      	ldrb	r2, [r3, #3]
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	789b      	ldrb	r3, [r3, #2]
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d11c      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 80008fc:	791a      	ldrb	r2, [r3, #4]
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	78db      	ldrb	r3, [r3, #3]
 8000902:	429a      	cmp	r2, r3
 8000904:	d116      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000908:	795a      	ldrb	r2, [r3, #5]
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	791b      	ldrb	r3, [r3, #4]
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 800090e:	429a      	cmp	r2, r3
 8000910:	d110      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000914:	799a      	ldrb	r2, [r3, #6]
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	795b      	ldrb	r3, [r3, #5]
 800091a:	429a      	cmp	r2, r3
 800091c:	d10a      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000920:	7a1a      	ldrb	r2, [r3, #8]
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	799b      	ldrb	r3, [r3, #6]
 8000926:	429a      	cmp	r2, r3
 8000928:	d104      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		all_node_detected = 1;
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <WhenCANRxFifo0MsgPending+0x1fc>)
 800092c:	2201      	movs	r2, #1
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	e000      	b.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000932:	bf00      	nop
	}
}
 8000934:	3738      	adds	r7, #56	; 0x38
 8000936:	46bd      	mov	sp, r7
 8000938:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800093c:	0800b4cc 	.word	0x0800b4cc
 8000940:	200001e4 	.word	0x200001e4
 8000944:	200001d8 	.word	0x200001d8
 8000948:	20000224 	.word	0x20000224
 800094c:	200002c4 	.word	0x200002c4
 8000950:	20000364 	.word	0x20000364
 8000954:	20000404 	.word	0x20000404
 8000958:	0800b4e4 	.word	0x0800b4e4
 800095c:	200001d4 	.word	0x200001d4

08000960 <SendBytes>:

HAL_StatusTypeDef SendBytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){ // 命令を送信する関数
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
	uint32_t quotient = size / 8;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	08db      	lsrs	r3, r3, #3
 8000970:	61bb      	str	r3, [r7, #24]
	uint32_t remainder = size - (8 * quotient);
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef ret;

	for (uint8_t i = 0; i < quotient; i++){
 800097c:	2300      	movs	r3, #0
 800097e:	77fb      	strb	r3, [r7, #31]
 8000980:	e015      	b.n	80009ae <SendBytes+0x4e>
		ret = PushTx8Bytes(ExtId, bytes + i * 8, 8);
 8000982:	7ffb      	ldrb	r3, [r7, #31]
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	461a      	mov	r2, r3
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	4413      	add	r3, r2
 800098c:	2208      	movs	r2, #8
 800098e:	4619      	mov	r1, r3
 8000990:	68f8      	ldr	r0, [r7, #12]
 8000992:	f7ff fe27 	bl	80005e4 <PushTx8Bytes>
 8000996:	4603      	mov	r3, r0
 8000998:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 800099a:	7cfb      	ldrb	r3, [r7, #19]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d003      	beq.n	80009a8 <SendBytes+0x48>
			Error_Handler();
 80009a0:	f001 f90c 	bl	8001bbc <Error_Handler>
			return ret;
 80009a4:	7cfb      	ldrb	r3, [r7, #19]
 80009a6:	e027      	b.n	80009f8 <SendBytes+0x98>
	for (uint8_t i = 0; i < quotient; i++){
 80009a8:	7ffb      	ldrb	r3, [r7, #31]
 80009aa:	3301      	adds	r3, #1
 80009ac:	77fb      	strb	r3, [r7, #31]
 80009ae:	7ffb      	ldrb	r3, [r7, #31]
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d8e5      	bhi.n	8000982 <SendBytes+0x22>
		}
	}

	if(remainder != 0){
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d011      	beq.n	80009e0 <SendBytes+0x80>
		ret = PushTx8Bytes(ExtId, bytes + quotient * 8, remainder);
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	00db      	lsls	r3, r3, #3
 80009c0:	68ba      	ldr	r2, [r7, #8]
 80009c2:	4413      	add	r3, r2
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	4619      	mov	r1, r3
 80009c8:	68f8      	ldr	r0, [r7, #12]
 80009ca:	f7ff fe0b 	bl	80005e4 <PushTx8Bytes>
 80009ce:	4603      	mov	r3, r0
 80009d0:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 80009d2:	7cfb      	ldrb	r3, [r7, #19]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d003      	beq.n	80009e0 <SendBytes+0x80>
			Error_Handler();
 80009d8:	f001 f8f0 	bl	8001bbc <Error_Handler>
			return ret;
 80009dc:	7cfb      	ldrb	r3, [r7, #19]
 80009de:	e00b      	b.n	80009f8 <SendBytes+0x98>
		}
	}

	ret = PopSendTx8Bytes();
 80009e0:	f7ff fe58 	bl	8000694 <PopSendTx8Bytes>
 80009e4:	4603      	mov	r3, r0
 80009e6:	74fb      	strb	r3, [r7, #19]
	if (ret != HAL_OK){
 80009e8:	7cfb      	ldrb	r3, [r7, #19]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d003      	beq.n	80009f6 <SendBytes+0x96>
		Error_Handler();
 80009ee:	f001 f8e5 	bl	8001bbc <Error_Handler>
		return ret;
 80009f2:	7cfb      	ldrb	r3, [r7, #19]
 80009f4:	e000      	b.n	80009f8 <SendBytes+0x98>
	}

	return HAL_OK;
 80009f6:	2300      	movs	r3, #0
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3720      	adds	r7, #32
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <CAN_SystemInit>:
 * @brief CANのシステムをアクティベートする. 具体的にはメッセージフィルターの設定とhal_can_start.
 *
 * @param _hcan
 * @param can_param
 */
void CAN_SystemInit(CAN_HandleTypeDef *_hcan){ // CANの初期化
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08e      	sub	sp, #56	; 0x38
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	phcan = _hcan;
 8000a08:	4a09      	ldr	r2, [pc, #36]	; (8000a30 <CAN_SystemInit+0x30>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6013      	str	r3, [r2, #0]

	all_node_detected = 0;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <CAN_SystemInit+0x34>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000a14:	2300      	movs	r3, #0
 8000a16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000a1a:	e029      	b.n	8000a70 <CAN_SystemInit+0x70>
		num_detected[type] = 0;
 8000a1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a20:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <CAN_SystemInit+0x38>)
 8000a22:	2100      	movs	r1, #0
 8000a24:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 0b111; i++){
 8000a26:	2300      	movs	r3, #0
 8000a28:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000a2c:	e017      	b.n	8000a5e <CAN_SystemInit+0x5e>
 8000a2e:	bf00      	nop
 8000a30:	200001d0 	.word	0x200001d0
 8000a34:	200001d4 	.word	0x200001d4
 8000a38:	200001d8 	.word	0x200001d8
			node_id_list[type][i] = 0xff;
 8000a3c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000a40:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8000a44:	48d7      	ldr	r0, [pc, #860]	; (8000da4 <CAN_SystemInit+0x3a4>)
 8000a46:	4613      	mov	r3, r2
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	1a9b      	subs	r3, r3, r2
 8000a4c:	4403      	add	r3, r0
 8000a4e:	440b      	add	r3, r1
 8000a50:	22ff      	movs	r2, #255	; 0xff
 8000a52:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 0b111; i++){
 8000a54:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000a58:	3301      	adds	r3, #1
 8000a5a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000a5e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d9ea      	bls.n	8000a3c <CAN_SystemInit+0x3c>
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000a66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000a70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a74:	2b08      	cmp	r3, #8
 8000a76:	d9d1      	bls.n	8000a1c <CAN_SystemInit+0x1c>
		}
	}

	//フィルタバンク設定
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000a84:	2301      	movs	r3, #1
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.SlaveStartFilterBank = 14;
 8000a88:	230e      	movs	r3, #14
 8000a8a:	633b      	str	r3, [r7, #48]	; 0x30

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000a90:	2300      	movs	r3, #0
 8000a92:	2200      	movs	r2, #0
 8000a94:	2100      	movs	r1, #0
 8000a96:	2001      	movs	r0, #1
 8000a98:	f000 fc57 	bl	800134a <Make_CAN_ID>
 8000a9c:	f04f 0200 	mov.w	r2, #0
 8000aa0:	f04f 0300 	mov.w	r3, #0
 8000aa4:	0b42      	lsrs	r2, r0, #13
 8000aa6:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000aaa:	0b4b      	lsrs	r3, r1, #13
 8000aac:	4613      	mov	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) >> 13;
 8000ab0:	231f      	movs	r3, #31
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f000 fc47 	bl	800134a <Make_CAN_ID>
 8000abc:	f04f 0200 	mov.w	r2, #0
 8000ac0:	f04f 0300 	mov.w	r3, #0
 8000ac4:	0b42      	lsrs	r2, r0, #13
 8000ac6:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000aca:	0b4b      	lsrs	r3, r1, #13
 8000acc:	4613      	mov	r3, r2
 8000ace:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f000 fc37 	bl	800134a <Make_CAN_ID>
 8000adc:	4602      	mov	r2, r0
 8000ade:	460b      	mov	r3, r1
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	00da      	lsls	r2, r3, #3
 8000ae4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ae8:	4013      	ands	r3, r2
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000af0:	231f      	movs	r3, #31
 8000af2:	2200      	movs	r2, #0
 8000af4:	2100      	movs	r1, #0
 8000af6:	2001      	movs	r0, #1
 8000af8:	f000 fc27 	bl	800134a <Make_CAN_ID>
 8000afc:	4602      	mov	r2, r0
 8000afe:	460b      	mov	r3, r1
 8000b00:	4613      	mov	r3, r2
 8000b02:	00da      	lsls	r2, r3, #3
 8000b04:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000b08:	4013      	ands	r3, r2
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000b10:	4ba5      	ldr	r3, [pc, #660]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f107 020c 	add.w	r2, r7, #12
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f001 fdae 	bl	800267c <HAL_CAN_ConfigFilter>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <CAN_SystemInit+0x12a>
		/* Filter configuration Error */
		Error_Handler();
 8000b26:	f001 f849 	bl	8001bbc <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 1;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000b2e:	2300      	movs	r3, #0
 8000b30:	2200      	movs	r2, #0
 8000b32:	2100      	movs	r1, #0
 8000b34:	2002      	movs	r0, #2
 8000b36:	f000 fc08 	bl	800134a <Make_CAN_ID>
 8000b3a:	f04f 0200 	mov.w	r2, #0
 8000b3e:	f04f 0300 	mov.w	r3, #0
 8000b42:	0b42      	lsrs	r2, r0, #13
 8000b44:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000b48:	0b4b      	lsrs	r3, r1, #13
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) >> 13;
 8000b4e:	231f      	movs	r3, #31
 8000b50:	2200      	movs	r2, #0
 8000b52:	2100      	movs	r1, #0
 8000b54:	2002      	movs	r0, #2
 8000b56:	f000 fbf8 	bl	800134a <Make_CAN_ID>
 8000b5a:	f04f 0200 	mov.w	r2, #0
 8000b5e:	f04f 0300 	mov.w	r3, #0
 8000b62:	0b42      	lsrs	r2, r0, #13
 8000b64:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000b68:	0b4b      	lsrs	r3, r1, #13
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000b6e:	2300      	movs	r3, #0
 8000b70:	2200      	movs	r2, #0
 8000b72:	2100      	movs	r1, #0
 8000b74:	2002      	movs	r0, #2
 8000b76:	f000 fbe8 	bl	800134a <Make_CAN_ID>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	4613      	mov	r3, r2
 8000b80:	00da      	lsls	r2, r3, #3
 8000b82:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000b86:	4013      	ands	r3, r2
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000b8e:	231f      	movs	r3, #31
 8000b90:	2200      	movs	r2, #0
 8000b92:	2100      	movs	r1, #0
 8000b94:	2002      	movs	r0, #2
 8000b96:	f000 fbd8 	bl	800134a <Make_CAN_ID>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	00da      	lsls	r2, r3, #3
 8000ba2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	f043 0304 	orr.w	r3, r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000bae:	4b7e      	ldr	r3, [pc, #504]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f107 020c 	add.w	r2, r7, #12
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 fd5f 	bl	800267c <HAL_CAN_ConfigFilter>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <CAN_SystemInit+0x1c8>
		/* Filter configuration Error */
		Error_Handler();
 8000bc4:	f000 fffa 	bl	8001bbc <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 2;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) >> 13;				   // 上16bit
 8000bcc:	2300      	movs	r3, #0
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2003      	movs	r0, #3
 8000bd4:	f000 fbb9 	bl	800134a <Make_CAN_ID>
 8000bd8:	f04f 0200 	mov.w	r2, #0
 8000bdc:	f04f 0300 	mov.w	r3, #0
 8000be0:	0b42      	lsrs	r2, r0, #13
 8000be2:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000be6:	0b4b      	lsrs	r3, r1, #13
 8000be8:	4613      	mov	r3, r2
 8000bea:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) >> 13;					   // TODO : 治す
 8000bec:	231f      	movs	r3, #31
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2003      	movs	r0, #3
 8000bf4:	f000 fba9 	bl	800134a <Make_CAN_ID>
 8000bf8:	f04f 0200 	mov.w	r2, #0
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	0b42      	lsrs	r2, r0, #13
 8000c02:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000c06:	0b4b      	lsrs	r3, r1, #13
 8000c08:	4613      	mov	r3, r2
 8000c0a:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2003      	movs	r0, #3
 8000c14:	f000 fb99 	bl	800134a <Make_CAN_ID>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	00da      	lsls	r2, r3, #3
 8000c20:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000c24:	4013      	ands	r3, r2
 8000c26:	f043 0304 	orr.w	r3, r3, #4
 8000c2a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000c2c:	231f      	movs	r3, #31
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2003      	movs	r0, #3
 8000c34:	f000 fb89 	bl	800134a <Make_CAN_ID>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	00da      	lsls	r2, r3, #3
 8000c40:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000c44:	4013      	ands	r3, r2
 8000c46:	f043 0304 	orr.w	r3, r3, #4
 8000c4a:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000c4c:	4b56      	ldr	r3, [pc, #344]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f107 020c 	add.w	r2, r7, #12
 8000c54:	4611      	mov	r1, r2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 fd10 	bl	800267c <HAL_CAN_ConfigFilter>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <CAN_SystemInit+0x266>
		/* Filter configuration Error */
		Error_Handler();
 8000c62:	f000 ffab 	bl	8001bbc <Error_Handler>
	}

	// FIFO0にfeedback用のフィルタを設定
	sFilterConfig.FilterBank = 3;
 8000c66:	2303      	movs	r3, #3
 8000c68:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) >> 13; // 上16bit
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2000      	movs	r0, #0
 8000c72:	f000 fb6a 	bl	800134a <Make_CAN_ID>
 8000c76:	f04f 0200 	mov.w	r2, #0
 8000c7a:	f04f 0300 	mov.w	r3, #0
 8000c7e:	0b42      	lsrs	r2, r0, #13
 8000c80:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000c84:	0b4b      	lsrs	r3, r1, #13
 8000c86:	4613      	mov	r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(0, 0, 0, 0b11111) >> 13;
 8000c8a:	231f      	movs	r3, #31
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2000      	movs	r0, #0
 8000c92:	f000 fb5a 	bl	800134a <Make_CAN_ID>
 8000c96:	f04f 0200 	mov.w	r2, #0
 8000c9a:	f04f 0300 	mov.w	r3, #0
 8000c9e:	0b42      	lsrs	r2, r0, #13
 8000ca0:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000ca4:	0b4b      	lsrs	r3, r1, #13
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000caa:	2301      	movs	r3, #1
 8000cac:	2200      	movs	r2, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f000 fb4a 	bl	800134a <Make_CAN_ID>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	460b      	mov	r3, r1
 8000cba:	4613      	mov	r3, r2
 8000cbc:	00da      	lsls	r2, r3, #3
 8000cbe:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(0, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000cca:	231f      	movs	r3, #31
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f000 fb3a 	bl	800134a <Make_CAN_ID>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	460b      	mov	r3, r1
 8000cda:	4613      	mov	r3, r2
 8000cdc:	00da      	lsls	r2, r3, #3
 8000cde:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000cea:	4b2f      	ldr	r3, [pc, #188]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f107 020c 	add.w	r2, r7, #12
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f001 fcc1 	bl	800267c <HAL_CAN_ConfigFilter>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <CAN_SystemInit+0x304>
		/* Filter configuration Error */
		Error_Handler();
 8000d00:	f000 ff5c 	bl	8001bbc <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 4;
 8000d04:	2304      	movs	r3, #4
 8000d06:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) >> 13; // 上16bit
 8000d08:	2300      	movs	r3, #0
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2004      	movs	r0, #4
 8000d10:	f000 fb1b 	bl	800134a <Make_CAN_ID>
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	0b42      	lsrs	r2, r0, #13
 8000d1e:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000d22:	0b4b      	lsrs	r3, r1, #13
 8000d24:	4613      	mov	r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) >> 13;
 8000d28:	231f      	movs	r3, #31
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2004      	movs	r0, #4
 8000d30:	f000 fb0b 	bl	800134a <Make_CAN_ID>
 8000d34:	f04f 0200 	mov.w	r2, #0
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	0b42      	lsrs	r2, r0, #13
 8000d3e:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000d42:	0b4b      	lsrs	r3, r1, #13
 8000d44:	4613      	mov	r3, r2
 8000d46:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000d48:	2300      	movs	r3, #0
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2004      	movs	r0, #4
 8000d50:	f000 fafb 	bl	800134a <Make_CAN_ID>
 8000d54:	4602      	mov	r2, r0
 8000d56:	460b      	mov	r3, r1
 8000d58:	4613      	mov	r3, r2
 8000d5a:	00da      	lsls	r2, r3, #3
 8000d5c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000d60:	4013      	ands	r3, r2
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000d68:	231f      	movs	r3, #31
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2004      	movs	r0, #4
 8000d70:	f000 faeb 	bl	800134a <Make_CAN_ID>
 8000d74:	4602      	mov	r2, r0
 8000d76:	460b      	mov	r3, r1
 8000d78:	4613      	mov	r3, r2
 8000d7a:	00da      	lsls	r2, r3, #3
 8000d7c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000d80:	4013      	ands	r3, r2
 8000d82:	f043 0304 	orr.w	r3, r3, #4
 8000d86:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f107 020c 	add.w	r2, r7, #12
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 fc72 	bl	800267c <HAL_CAN_ConfigFilter>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d006      	beq.n	8000dac <CAN_SystemInit+0x3ac>
		/* Filter configuration Error */
		Error_Handler();
 8000d9e:	f000 ff0d 	bl	8001bbc <Error_Handler>
 8000da2:	e003      	b.n	8000dac <CAN_SystemInit+0x3ac>
 8000da4:	200001e4 	.word	0x200001e4
 8000da8:	200001d0 	.word	0x200001d0
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 5;
 8000dac:	2305      	movs	r3, #5
 8000dae:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 8000db0:	2300      	movs	r3, #0
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	2005      	movs	r0, #5
 8000db8:	f000 fac7 	bl	800134a <Make_CAN_ID>
 8000dbc:	f04f 0200 	mov.w	r2, #0
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	0b42      	lsrs	r2, r0, #13
 8000dc6:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000dca:	0b4b      	lsrs	r3, r1, #13
 8000dcc:	4613      	mov	r3, r2
 8000dce:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) >> 13;
 8000dd0:	231f      	movs	r3, #31
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2005      	movs	r0, #5
 8000dd8:	f000 fab7 	bl	800134a <Make_CAN_ID>
 8000ddc:	f04f 0200 	mov.w	r2, #0
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	0b42      	lsrs	r2, r0, #13
 8000de6:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000dea:	0b4b      	lsrs	r3, r1, #13
 8000dec:	4613      	mov	r3, r2
 8000dee:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000df0:	2300      	movs	r3, #0
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	2005      	movs	r0, #5
 8000df8:	f000 faa7 	bl	800134a <Make_CAN_ID>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	4613      	mov	r3, r2
 8000e02:	00da      	lsls	r2, r3, #3
 8000e04:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000e08:	4013      	ands	r3, r2
 8000e0a:	f043 0304 	orr.w	r3, r3, #4
 8000e0e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000e10:	231f      	movs	r3, #31
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	2005      	movs	r0, #5
 8000e18:	f000 fa97 	bl	800134a <Make_CAN_ID>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	460b      	mov	r3, r1
 8000e20:	4613      	mov	r3, r2
 8000e22:	00da      	lsls	r2, r3, #3
 8000e24:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000e28:	4013      	ands	r3, r2
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000e30:	4b44      	ldr	r3, [pc, #272]	; (8000f44 <CAN_SystemInit+0x544>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f107 020c 	add.w	r2, r7, #12
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 fc1e 	bl	800267c <HAL_CAN_ConfigFilter>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <CAN_SystemInit+0x44a>
		/* Filter configuration Error */
		Error_Handler();
 8000e46:	f000 feb9 	bl	8001bbc <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 6;
 8000e4a:	2306      	movs	r3, #6
 8000e4c:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 8000e4e:	2300      	movs	r3, #0
 8000e50:	2200      	movs	r2, #0
 8000e52:	2100      	movs	r1, #0
 8000e54:	2006      	movs	r0, #6
 8000e56:	f000 fa78 	bl	800134a <Make_CAN_ID>
 8000e5a:	f04f 0200 	mov.w	r2, #0
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	0b42      	lsrs	r2, r0, #13
 8000e64:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000e68:	0b4b      	lsrs	r3, r1, #13
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) >> 13;
 8000e6e:	231f      	movs	r3, #31
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	2006      	movs	r0, #6
 8000e76:	f000 fa68 	bl	800134a <Make_CAN_ID>
 8000e7a:	f04f 0200 	mov.w	r2, #0
 8000e7e:	f04f 0300 	mov.w	r3, #0
 8000e82:	0b42      	lsrs	r2, r0, #13
 8000e84:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000e88:	0b4b      	lsrs	r3, r1, #13
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000e8e:	2300      	movs	r3, #0
 8000e90:	2200      	movs	r2, #0
 8000e92:	2100      	movs	r1, #0
 8000e94:	2006      	movs	r0, #6
 8000e96:	f000 fa58 	bl	800134a <Make_CAN_ID>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	00da      	lsls	r2, r3, #3
 8000ea2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000eae:	231f      	movs	r3, #31
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2006      	movs	r0, #6
 8000eb6:	f000 fa48 	bl	800134a <Make_CAN_ID>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	00da      	lsls	r2, r3, #3
 8000ec2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000ece:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <CAN_SystemInit+0x544>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f107 020c 	add.w	r2, r7, #12
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f001 fbcf 	bl	800267c <HAL_CAN_ConfigFilter>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <CAN_SystemInit+0x4e8>
		/* Filter configuration Error */
		Error_Handler();
 8000ee4:	f000 fe6a 	bl	8001bbc <Error_Handler>
	}

	if (HAL_CAN_Start(phcan) != HAL_OK){
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <CAN_SystemInit+0x544>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 fcb1 	bl	8002854 <HAL_CAN_Start>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d004      	beq.n	8000f02 <CAN_SystemInit+0x502>
		printf(" -> Start Error\n");
 8000ef8:	4813      	ldr	r0, [pc, #76]	; (8000f48 <CAN_SystemInit+0x548>)
 8000efa:	f009 fb5d 	bl	800a5b8 <puts>
		Error_Handler();
 8000efe:	f000 fe5d 	bl	8001bbc <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(phcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <CAN_SystemInit+0x544>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2102      	movs	r1, #2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f001 fefe 	bl	8002d0a <HAL_CAN_ActivateNotification>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d004      	beq.n	8000f1e <CAN_SystemInit+0x51e>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 8000f14:	480d      	ldr	r0, [pc, #52]	; (8000f4c <CAN_SystemInit+0x54c>)
 8000f16:	f009 fac9 	bl	800a4ac <iprintf>
		Error_Handler();
 8000f1a:	f000 fe4f 	bl	8001bbc <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(phcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK){
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <CAN_SystemInit+0x544>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2101      	movs	r1, #1
 8000f24:	4618      	mov	r0, r3
 8000f26:	f001 fef0 	bl	8002d0a <HAL_CAN_ActivateNotification>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d004      	beq.n	8000f3a <CAN_SystemInit+0x53a>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 8000f30:	4806      	ldr	r0, [pc, #24]	; (8000f4c <CAN_SystemInit+0x54c>)
 8000f32:	f009 fabb 	bl	800a4ac <iprintf>
		Error_Handler();
 8000f36:	f000 fe41 	bl	8001bbc <Error_Handler>
	}
}
 8000f3a:	bf00      	nop
 8000f3c:	3738      	adds	r7, #56	; 0x38
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200001d0 	.word	0x200001d0
 8000f48:	0800b4ec 	.word	0x0800b4ec
 8000f4c:	0800b4fc 	.word	0x0800b4fc

08000f50 <MCMD_ChangeControl>:
	for (uint8_t i = 0; i < num_of->other; i++)
		printf("Others No.%d\n\r", node_id_list[NODE_OTHER][i]);
}

//// MCMD
void MCMD_ChangeControl(MCMD_HandleTypedef *hmcmd){ // Ctrl typeを変更する.
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	float fdata[2];
	fdata[0] = hmcmd->ctrl_param.PID_param.kp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	613b      	str	r3, [r7, #16]
	fdata[1] = hmcmd->ctrl_param.PID_param.ki;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	617b      	str	r3, [r7, #20]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL1), (uint8_t *)&fdata, sizeof(fdata));
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2105      	movs	r1, #5
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 f9c5 	bl	80012f8 <Make_CAN_ID_from_CAN_Device>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	4610      	mov	r0, r2
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	2208      	movs	r2, #8
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f7ff fcf0 	bl	8000960 <SendBytes>
	fdata[0] = hmcmd->ctrl_param.PID_param.kd;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	613b      	str	r3, [r7, #16]
	fdata[1] = hmcmd->ctrl_param.accel_limit_size;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f8a:	617b      	str	r3, [r7, #20]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL2), (uint8_t *)&fdata, sizeof(fdata));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2106      	movs	r1, #6
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 f9b1 	bl	80012f8 <Make_CAN_ID_from_CAN_Device>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4610      	mov	r0, r2
 8000f9c:	f107 0310 	add.w	r3, r7, #16
 8000fa0:	2208      	movs	r2, #8
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f7ff fcdc 	bl	8000960 <SendBytes>

    fdata[0] = hmcmd->ctrl_param.PID_param.kff;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fac:	613b      	str	r3, [r7, #16]
    fdata[1] = hmcmd->ctrl_param.gravity_compensation_gain;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fb2:	617b      	str	r3, [r7, #20]
    SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL3), (uint8_t *)&fdata, sizeof(fdata));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2107      	movs	r1, #7
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 f99d 	bl	80012f8 <Make_CAN_ID_from_CAN_Device>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	2208      	movs	r2, #8
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f7ff fcc8 	bl	8000960 <SendBytes>

	uint8_t bdata[6];
	bdata[0] = hmcmd->ctrl_param.ctrl_type;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	7d1b      	ldrb	r3, [r3, #20]
 8000fd4:	723b      	strb	r3, [r7, #8]
	bdata[1] = hmcmd->ctrl_param.accel_limit;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000fdc:	727b      	strb	r3, [r7, #9]
	bdata[2] = hmcmd->ctrl_param.feedback;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000fe4:	72bb      	strb	r3, [r7, #10]
	bdata[3] = hmcmd->ctrl_param.timup_monitor;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000fec:	72fb      	strb	r3, [r7, #11]
	bdata[4] = hmcmd->fb_type;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	78db      	ldrb	r3, [r3, #3]
 8000ff2:	733b      	strb	r3, [r7, #12]
    bdata[5] = hmcmd->ctrl_param.gravity_compensation; // TODO : new
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000ffa:	737b      	strb	r3, [r7, #13]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL4), (uint8_t *)&bdata, sizeof(bdata));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2108      	movs	r1, #8
 8001000:	4618      	mov	r0, r3
 8001002:	f000 f979 	bl	80012f8 <Make_CAN_ID_from_CAN_Device>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	4610      	mov	r0, r2
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	2206      	movs	r2, #6
 8001012:	4619      	mov	r1, r3
 8001014:	f7ff fca4 	bl	8000960 <SendBytes>
}
 8001018:	bf00      	nop
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <MCMD_init>:

void MCMD_init(MCMD_HandleTypedef *hmcmd){
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	bdata[0] = hmcmd->enc_dir;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	791b      	ldrb	r3, [r3, #4]
 800102c:	753b      	strb	r3, [r7, #20]
	bdata[1] = hmcmd->rot_dir;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	795b      	ldrb	r3, [r3, #5]
 8001032:	757b      	strb	r3, [r7, #21]
	bdata[2] = hmcmd->calib;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	79db      	ldrb	r3, [r3, #7]
 8001038:	75bb      	strb	r3, [r7, #22]
	bdata[3] = hmcmd->limit_sw_type;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	799b      	ldrb	r3, [r3, #6]
 800103e:	75fb      	strb	r3, [r7, #23]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT1), bdata, sizeof(bdata));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2102      	movs	r1, #2
 8001044:	4618      	mov	r0, r3
 8001046:	f000 f957 	bl	80012f8 <Make_CAN_ID_from_CAN_Device>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4610      	mov	r0, r2
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2204      	movs	r2, #4
 8001056:	4619      	mov	r1, r3
 8001058:	f7ff fc82 	bl	8000960 <SendBytes>
	float fdata[2];
	fdata[0] = hmcmd->offset;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	60fb      	str	r3, [r7, #12]
	fdata[1] = hmcmd->calib_duty;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	613b      	str	r3, [r7, #16]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT2), (uint8_t *)&fdata, sizeof(fdata));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2103      	movs	r1, #3
 800106c:	4618      	mov	r0, r3
 800106e:	f000 f943 	bl	80012f8 <Make_CAN_ID_from_CAN_Device>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4610      	mov	r0, r2
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2208      	movs	r2, #8
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff fc6e 	bl	8000960 <SendBytes>

	fdata[0] = hmcmd->quant_per_unit;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	60fb      	str	r3, [r7, #12]
	fdata[1] = 0;
 800108a:	f04f 0300 	mov.w	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT3), (uint8_t *)&fdata, sizeof(fdata));
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2104      	movs	r1, #4
 8001094:	4618      	mov	r0, r3
 8001096:	f000 f92f 	bl	80012f8 <Make_CAN_ID_from_CAN_Device>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4610      	mov	r0, r2
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	2208      	movs	r2, #8
 80010a6:	4619      	mov	r1, r3
 80010a8:	f7ff fc5a 	bl	8000960 <SendBytes>
	HAL_Delay(50); // これないと動かない(なぜ?)
 80010ac:	2032      	movs	r0, #50	; 0x32
 80010ae:	f001 f9c5 	bl	800243c <HAL_Delay>
	MCMD_ChangeControl(hmcmd);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ff4c 	bl	8000f50 <MCMD_ChangeControl>
}
 80010b8:	bf00      	nop
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <MCMD_Calib>:

void MCMD_Calib(MCMD_HandleTypedef *hmcmd){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CALIB), bdata, sizeof(bdata));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2109      	movs	r1, #9
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 f913 	bl	80012f8 <Make_CAN_ID_from_CAN_Device>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4610      	mov	r0, r2
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2204      	movs	r2, #4
 80010de:	4619      	mov	r1, r3
 80010e0:	f7ff fc3e 	bl	8000960 <SendBytes>
}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <MCMD_Control_Enable>:

void MCMD_Control_Enable(MCMD_HandleTypedef *hmcmd){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_ENABLE), bdata, sizeof(bdata));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	210a      	movs	r1, #10
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 f8fd 	bl	80012f8 <Make_CAN_ID_from_CAN_Device>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4610      	mov	r0, r2
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	2204      	movs	r2, #4
 800110a:	4619      	mov	r1, r3
 800110c:	f7ff fc28 	bl	8000960 <SendBytes>
}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <MCMD_SetTarget>:
void MCMD_Control_Disable(MCMD_HandleTypedef *hmcmd){
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_DISABLE), bdata, sizeof(bdata));
}

void MCMD_SetTarget(MCMD_HandleTypedef *hmcmd, float target){
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	ed87 0a00 	vstr	s0, [r7]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_SET_TARGET), (uint8_t *)&target, sizeof(target));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	210c      	movs	r1, #12
 8001128:	4618      	mov	r0, r3
 800112a:	f000 f8e5 	bl	80012f8 <Make_CAN_ID_from_CAN_Device>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4610      	mov	r0, r2
 8001134:	463b      	mov	r3, r7
 8001136:	2204      	movs	r2, #4
 8001138:	4619      	mov	r1, r3
 800113a:	f7ff fc11 	bl	8000960 <SendBytes>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <Get_MCMD_Feedback>:

MCMD_Feedback_Typedef Get_MCMD_Feedback(CAN_Device *can_device){
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
	MCMD_Feedback_Typedef ans;
	if (can_device->node_type == NODE_MCMD1){
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d12f      	bne.n	80011ba <Get_MCMD_Feedback+0x72>
		ans.fb_type = _feedback_table_mcmd1[(can_device->node_id)].feedback_motor[(can_device->device_num)].fb_type;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	785b      	ldrb	r3, [r3, #1]
 800115e:	4618      	mov	r0, r3
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	789b      	ldrb	r3, [r3, #2]
 8001164:	4619      	mov	r1, r3
 8001166:	4a5f      	ldr	r2, [pc, #380]	; (80012e4 <Get_MCMD_Feedback+0x19c>)
 8001168:	0043      	lsls	r3, r0, #1
 800116a:	440b      	add	r3, r1
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	4413      	add	r3, r2
 8001170:	791b      	ldrb	r3, [r3, #4]
 8001172:	733b      	strb	r3, [r7, #12]
		ans.status = _feedback_table_mcmd1[(can_device->node_id)].feedback_motor[(can_device->device_num)].status;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	785b      	ldrb	r3, [r3, #1]
 8001178:	4618      	mov	r0, r3
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	789b      	ldrb	r3, [r3, #2]
 800117e:	4619      	mov	r1, r3
 8001180:	4a58      	ldr	r2, [pc, #352]	; (80012e4 <Get_MCMD_Feedback+0x19c>)
 8001182:	0043      	lsls	r3, r0, #1
 8001184:	440b      	add	r3, r1
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	4413      	add	r3, r2
 800118a:	795b      	ldrb	r3, [r3, #5]
 800118c:	737b      	strb	r3, [r7, #13]
		ans.value = _feedback_table_mcmd1[(can_device->node_id)].feedback_motor[(can_device->device_num)].value;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	785b      	ldrb	r3, [r3, #1]
 8001192:	4618      	mov	r0, r3
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	789b      	ldrb	r3, [r3, #2]
 8001198:	4619      	mov	r1, r3
 800119a:	4a52      	ldr	r2, [pc, #328]	; (80012e4 <Get_MCMD_Feedback+0x19c>)
 800119c:	0043      	lsls	r3, r0, #1
 800119e:	440b      	add	r3, r1
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	4413      	add	r3, r2
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	60bb      	str	r3, [r7, #8]
		return ans;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	461a      	mov	r2, r3
 80011ac:	f107 0308 	add.w	r3, r7, #8
 80011b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011b4:	e882 0003 	stmia.w	r2, {r0, r1}
 80011b8:	e08f      	b.n	80012da <Get_MCMD_Feedback+0x192>
	}else if (can_device->node_type == NODE_MCMD2){
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d111      	bne.n	80011e6 <Get_MCMD_Feedback+0x9e>
		return _feedback_table_mcmd2[(can_device->node_id)].feedback_motor[(can_device->device_num)];
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	785b      	ldrb	r3, [r3, #1]
 80011c6:	461c      	mov	r4, r3
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	789b      	ldrb	r3, [r3, #2]
 80011cc:	4618      	mov	r0, r3
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	4a45      	ldr	r2, [pc, #276]	; (80012e8 <Get_MCMD_Feedback+0x1a0>)
 80011d2:	0063      	lsls	r3, r4, #1
 80011d4:	4403      	add	r3, r0
 80011d6:	460c      	mov	r4, r1
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	4413      	add	r3, r2
 80011dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011e0:	e884 0003 	stmia.w	r4, {r0, r1}
 80011e4:	e079      	b.n	80012da <Get_MCMD_Feedback+0x192>
	}else if (can_device->node_type == NODE_MCMD3){
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d12f      	bne.n	800124e <Get_MCMD_Feedback+0x106>
		ans.fb_type = _feedback_table_mcmd3[(can_device->node_id)].feedback_motor[(can_device->device_num)].fb_type;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	785b      	ldrb	r3, [r3, #1]
 80011f2:	4618      	mov	r0, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	789b      	ldrb	r3, [r3, #2]
 80011f8:	4619      	mov	r1, r3
 80011fa:	4a3c      	ldr	r2, [pc, #240]	; (80012ec <Get_MCMD_Feedback+0x1a4>)
 80011fc:	0043      	lsls	r3, r0, #1
 80011fe:	440b      	add	r3, r1
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	4413      	add	r3, r2
 8001204:	791b      	ldrb	r3, [r3, #4]
 8001206:	733b      	strb	r3, [r7, #12]
		ans.status = _feedback_table_mcmd3[(can_device->node_id)].feedback_motor[(can_device->device_num)].status;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	785b      	ldrb	r3, [r3, #1]
 800120c:	4618      	mov	r0, r3
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	789b      	ldrb	r3, [r3, #2]
 8001212:	4619      	mov	r1, r3
 8001214:	4a35      	ldr	r2, [pc, #212]	; (80012ec <Get_MCMD_Feedback+0x1a4>)
 8001216:	0043      	lsls	r3, r0, #1
 8001218:	440b      	add	r3, r1
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	4413      	add	r3, r2
 800121e:	795b      	ldrb	r3, [r3, #5]
 8001220:	737b      	strb	r3, [r7, #13]
		ans.value = _feedback_table_mcmd3[(can_device->node_id)].feedback_motor[(can_device->device_num)].value;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	785b      	ldrb	r3, [r3, #1]
 8001226:	4618      	mov	r0, r3
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	789b      	ldrb	r3, [r3, #2]
 800122c:	4619      	mov	r1, r3
 800122e:	4a2f      	ldr	r2, [pc, #188]	; (80012ec <Get_MCMD_Feedback+0x1a4>)
 8001230:	0043      	lsls	r3, r0, #1
 8001232:	440b      	add	r3, r1
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	4413      	add	r3, r2
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	60bb      	str	r3, [r7, #8]
		return ans;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	461a      	mov	r2, r3
 8001240:	f107 0308 	add.w	r3, r7, #8
 8001244:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001248:	e882 0003 	stmia.w	r2, {r0, r1}
 800124c:	e045      	b.n	80012da <Get_MCMD_Feedback+0x192>
	}else if (can_device->node_type == NODE_MCMD4){
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b06      	cmp	r3, #6
 8001254:	d12f      	bne.n	80012b6 <Get_MCMD_Feedback+0x16e>
		ans.fb_type = _feedback_table_mcmd4[(can_device->node_id)].feedback_motor[(can_device->device_num)].fb_type;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	785b      	ldrb	r3, [r3, #1]
 800125a:	4618      	mov	r0, r3
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	789b      	ldrb	r3, [r3, #2]
 8001260:	4619      	mov	r1, r3
 8001262:	4a23      	ldr	r2, [pc, #140]	; (80012f0 <Get_MCMD_Feedback+0x1a8>)
 8001264:	0043      	lsls	r3, r0, #1
 8001266:	440b      	add	r3, r1
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	4413      	add	r3, r2
 800126c:	791b      	ldrb	r3, [r3, #4]
 800126e:	733b      	strb	r3, [r7, #12]
		ans.status = _feedback_table_mcmd4[(can_device->node_id)].feedback_motor[(can_device->device_num)].status;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	785b      	ldrb	r3, [r3, #1]
 8001274:	4618      	mov	r0, r3
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	789b      	ldrb	r3, [r3, #2]
 800127a:	4619      	mov	r1, r3
 800127c:	4a1c      	ldr	r2, [pc, #112]	; (80012f0 <Get_MCMD_Feedback+0x1a8>)
 800127e:	0043      	lsls	r3, r0, #1
 8001280:	440b      	add	r3, r1
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	4413      	add	r3, r2
 8001286:	795b      	ldrb	r3, [r3, #5]
 8001288:	737b      	strb	r3, [r7, #13]
		ans.value = _feedback_table_mcmd4[(can_device->node_id)].feedback_motor[(can_device->device_num)].value;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	785b      	ldrb	r3, [r3, #1]
 800128e:	4618      	mov	r0, r3
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	789b      	ldrb	r3, [r3, #2]
 8001294:	4619      	mov	r1, r3
 8001296:	4a16      	ldr	r2, [pc, #88]	; (80012f0 <Get_MCMD_Feedback+0x1a8>)
 8001298:	0043      	lsls	r3, r0, #1
 800129a:	440b      	add	r3, r1
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	4413      	add	r3, r2
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	60bb      	str	r3, [r7, #8]
		return ans;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	461a      	mov	r2, r3
 80012a8:	f107 0308 	add.w	r3, r7, #8
 80012ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012b0:	e882 0003 	stmia.w	r2, {r0, r1}
 80012b4:	e011      	b.n	80012da <Get_MCMD_Feedback+0x192>
	}else{
		ans.fb_type = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	733b      	strb	r3, [r7, #12]
		ans.status = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	737b      	strb	r3, [r7, #13]
		ans.value = 0.0f;
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
		printf("get feed back error\n\r");
 80012c4:	480b      	ldr	r0, [pc, #44]	; (80012f4 <Get_MCMD_Feedback+0x1ac>)
 80012c6:	f009 f8f1 	bl	800a4ac <iprintf>
		return ans;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	461a      	mov	r2, r3
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012d6:	e882 0003 	stmia.w	r2, {r0, r1}
	}
}
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd90      	pop	{r4, r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000224 	.word	0x20000224
 80012e8:	200002c4 	.word	0x200002c4
 80012ec:	20000364 	.word	0x20000364
 80012f0:	20000404 	.word	0x20000404
 80012f4:	0800b5ac 	.word	0x0800b5ac

080012f8 <Make_CAN_ID_from_CAN_Device>:
/**
 * @brief CANのIDを設定する. 上16bitのみを使用
 * @param CAN_Device*
 * @param cmd
 */
uint64_t Make_CAN_ID_from_CAN_Device(CAN_Device* _can_device, uint8_t cmd){  // mainからmcmdなどへの送信
 80012f8:	b4b0      	push	{r4, r5, r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	70fb      	strb	r3, [r7, #3]
    uint8_t node_type = (uint8_t)(_can_device->node_type) & (0b111);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	f003 0307 	and.w	r3, r3, #7
 800130c:	73fb      	strb	r3, [r7, #15]
    return (((node_type&0b111)<<11) | (((_can_device->node_id)&0b111)<<8) | (((_can_device->device_num)&0b111)<<5)
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	02db      	lsls	r3, r3, #11
 8001312:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	785b      	ldrb	r3, [r3, #1]
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001320:	431a      	orrs	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	789b      	ldrb	r3, [r3, #2]
 8001326:	015b      	lsls	r3, r3, #5
 8001328:	b2db      	uxtb	r3, r3
 800132a:	431a      	orrs	r2, r3
            | (cmd&0b11111) );
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	f003 031f 	and.w	r3, r3, #31
 8001332:	4313      	orrs	r3, r2
 8001334:	17da      	asrs	r2, r3, #31
 8001336:	461c      	mov	r4, r3
 8001338:	4615      	mov	r5, r2
 800133a:	4622      	mov	r2, r4
 800133c:	462b      	mov	r3, r5
}
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	bcb0      	pop	{r4, r5, r7}
 8001348:	4770      	bx	lr

0800134a <Make_CAN_ID>:
 * @param node_type
 * @param node_id
 * @param device_num
 * @param cmd
 */
uint64_t Make_CAN_ID(Node_Type node_type, uint8_t node_id, uint8_t device_num, uint8_t cmd){
 800134a:	e92d 0390 	stmdb	sp!, {r4, r7, r8, r9}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	4604      	mov	r4, r0
 8001354:	4608      	mov	r0, r1
 8001356:	4611      	mov	r1, r2
 8001358:	461a      	mov	r2, r3
 800135a:	4623      	mov	r3, r4
 800135c:	71fb      	strb	r3, [r7, #7]
 800135e:	4603      	mov	r3, r0
 8001360:	71bb      	strb	r3, [r7, #6]
 8001362:	460b      	mov	r3, r1
 8001364:	717b      	strb	r3, [r7, #5]
 8001366:	4613      	mov	r3, r2
 8001368:	713b      	strb	r3, [r7, #4]
    return ( (((uint8_t)node_type & 0b111) << 11) | (((node_id)&0b111) << 8) | ((device_num&0b111) << 5)
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	02db      	lsls	r3, r3, #11
 800136e:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001372:	79bb      	ldrb	r3, [r7, #6]
 8001374:	021b      	lsls	r3, r3, #8
 8001376:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800137a:	431a      	orrs	r2, r3
 800137c:	797b      	ldrb	r3, [r7, #5]
 800137e:	015b      	lsls	r3, r3, #5
 8001380:	b2db      	uxtb	r3, r3
 8001382:	431a      	orrs	r2, r3
             | (cmd&0b11111) );
 8001384:	793b      	ldrb	r3, [r7, #4]
 8001386:	f003 031f 	and.w	r3, r3, #31
 800138a:	4313      	orrs	r3, r2
 800138c:	17da      	asrs	r2, r3, #31
 800138e:	4698      	mov	r8, r3
 8001390:	4691      	mov	r9, r2
 8001392:	4642      	mov	r2, r8
 8001394:	464b      	mov	r3, r9
}
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	e8bd 0390 	ldmia.w	sp!, {r4, r7, r8, r9}
 80013a2:	4770      	bx	lr

080013a4 <Extract_CAN_Device>:

CAN_Device Extract_CAN_Device(uint64_t can_id) {  // CAN_IDからCAN_Deviceを抽出する
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	e9c7 0100 	strd	r0, r1, [r7]
    CAN_Device ans;
    ans.device_num = ((can_id>>5) & 0b111);
 80013ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	f04f 0300 	mov.w	r3, #0
 80013ba:	0942      	lsrs	r2, r0, #5
 80013bc:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 80013c0:	094b      	lsrs	r3, r1, #5
 80013c2:	b2d3      	uxtb	r3, r2
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	72bb      	strb	r3, [r7, #10]
    ans.node_id = ((can_id>>8) & 0b111);
 80013cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	f04f 0300 	mov.w	r3, #0
 80013d8:	0a02      	lsrs	r2, r0, #8
 80013da:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80013de:	0a0b      	lsrs	r3, r1, #8
 80013e0:	b2d3      	uxtb	r3, r2
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	727b      	strb	r3, [r7, #9]
    ans.node_type = (Node_Type)( (can_id>>11) & 0b111);
 80013ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	f04f 0300 	mov.w	r3, #0
 80013f6:	0ac2      	lsrs	r2, r0, #11
 80013f8:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 80013fc:	0acb      	lsrs	r3, r1, #11
 80013fe:	b2d3      	uxtb	r3, r2
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	b2db      	uxtb	r3, r3
 8001406:	723b      	strb	r3, [r7, #8]
    return ans;
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	f107 0208 	add.w	r2, r7, #8
 8001410:	6812      	ldr	r2, [r2, #0]
 8001412:	4611      	mov	r1, r2
 8001414:	8019      	strh	r1, [r3, #0]
 8001416:	3302      	adds	r3, #2
 8001418:	0c12      	lsrs	r2, r2, #16
 800141a:	701a      	strb	r2, [r3, #0]
 800141c:	2300      	movs	r3, #0
 800141e:	7b3a      	ldrb	r2, [r7, #12]
 8001420:	f362 0307 	bfi	r3, r2, #0, #8
 8001424:	7b7a      	ldrb	r2, [r7, #13]
 8001426:	f362 230f 	bfi	r3, r2, #8, #8
 800142a:	7bba      	ldrb	r2, [r7, #14]
 800142c:	f362 4317 	bfi	r3, r2, #16, #8
}
 8001430:	4618      	mov	r0, r3
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <Extract_CAN_CMD>:

uint8_t Extract_CAN_CMD(uint64_t can_id){ return ( can_id & 0b11111); }  // cmdを抽出
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	e9c7 0100 	strd	r0, r1, [r7]
 8001446:	783b      	ldrb	r3, [r7, #0]
 8001448:	f003 031f 	and.w	r3, r3, #31
 800144c:	b2db      	uxtb	r3, r3
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(uint8_t ch)
#else
#define PUTCHAR_PROTYPE int fputc(int ch,FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, &ch, 1, 500);
 8001466:	1df9      	adds	r1, r7, #7
 8001468:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800146c:	2201      	movs	r2, #1
 800146e:	4804      	ldr	r0, [pc, #16]	; (8001480 <__io_putchar+0x24>)
 8001470:	f004 fec0 	bl	80061f4 <HAL_UART_Transmit>
    return ch;
 8001474:	79fb      	ldrb	r3, [r7, #7]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200025c0 	.word	0x200025c0

08001484 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 800148c:	f7ff f95c 	bl	8000748 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 80014a0:	f7ff f958 	bl	8000754 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 80014b4:	f7ff f948 	bl	8000748 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 80014c8:	f7ff f944 	bl	8000754 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 80014dc:	f7ff f934 	bl	8000748 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 80014f0:	f7ff f930 	bl	8000754 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
    WhenCANRxFifo0MsgPending(hcan, &num_of_devices);
 8001504:	4903      	ldr	r1, [pc, #12]	; (8001514 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff f92a 	bl	8000760 <WhenCANRxFifo0MsgPending>
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200044d0 	.word	0x200044d0

08001518 <mcmdSetting.0>:
  MX_ETH_Init();
  MX_USB_OTG_FS_PCD_Init();
  MX_CAN1_Init();
  /* USER CODE BEGIN 2 */

void mcmdSetting(){
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	f8c7 c004 	str.w	ip, [r7, #4]
	printf("Start Initializing CAN System:Begin\n\r");
 8001522:	483e      	ldr	r0, [pc, #248]	; (800161c <mcmdSetting.0+0x104>)
 8001524:	f008 ffc2 	bl	800a4ac <iprintf>
	   HAL_Delay(100);
 8001528:	2064      	movs	r0, #100	; 0x64
 800152a:	f000 ff87 	bl	800243c <HAL_Delay>

	   CAN_SystemInit(&hcan1); // F7のCAN通信のinit
 800152e:	483c      	ldr	r0, [pc, #240]	; (8001620 <mcmdSetting.0+0x108>)
 8001530:	f7ff fa66 	bl	8000a00 <CAN_SystemInit>

	   // デバイス数の設定 (今回はmcmd4が1枚)
	   num_of_devices.mcmd3 = 1;
 8001534:	4b3b      	ldr	r3, [pc, #236]	; (8001624 <mcmdSetting.0+0x10c>)
 8001536:	2201      	movs	r2, #1
 8001538:	709a      	strb	r2, [r3, #2]
	   num_of_devices.mcmd4 = 0;
 800153a:	4b3a      	ldr	r3, [pc, #232]	; (8001624 <mcmdSetting.0+0x10c>)
 800153c:	2200      	movs	r2, #0
 800153e:	715a      	strb	r2, [r3, #5]
	   num_of_devices.air = 0;
 8001540:	4b38      	ldr	r3, [pc, #224]	; (8001624 <mcmdSetting.0+0x10c>)
 8001542:	2200      	movs	r2, #0
 8001544:	711a      	strb	r2, [r3, #4]
	   num_of_devices.servo = 0;
 8001546:	4b37      	ldr	r3, [pc, #220]	; (8001624 <mcmdSetting.0+0x10c>)
 8001548:	2200      	movs	r2, #0
 800154a:	70da      	strb	r2, [r3, #3]

	   printf("Start Initializing CAN System:End\n\r");
 800154c:	4836      	ldr	r0, [pc, #216]	; (8001628 <mcmdSetting.0+0x110>)
 800154e:	f008 ffad 	bl	800a4ac <iprintf>
	   HAL_Delay(100);
 8001552:	2064      	movs	r0, #100	; 0x64
 8001554:	f000 ff72 	bl	800243c <HAL_Delay>
	   //CAN_WaitConnect(&num_of_devices);  // 設定された全てのCANモジュール基板との接続が確認できるまで待機

	   // ここからはCANモジュール基板の設定
	    // 接続先のMCMDの設定
	    mcmd4_struct.device.node_type = NODE_MCMD3;  // nodeのタイプ (NODE_MCMD3など)
 8001558:	4b34      	ldr	r3, [pc, #208]	; (800162c <mcmdSetting.0+0x114>)
 800155a:	2203      	movs	r2, #3
 800155c:	701a      	strb	r2, [r3, #0]
	    mcmd4_struct.device.node_id = 1;  // 基板の番号 (基板上の半固定抵抗を回す事で設定できる)
 800155e:	4b33      	ldr	r3, [pc, #204]	; (800162c <mcmdSetting.0+0x114>)
 8001560:	2201      	movs	r2, #1
 8001562:	705a      	strb	r2, [r3, #1]
	    mcmd4_struct.device.device_num = 0;  // モーターの番号(MCMDなら0と1の2つが選べる)
 8001564:	4b31      	ldr	r3, [pc, #196]	; (800162c <mcmdSetting.0+0x114>)
 8001566:	2200      	movs	r2, #0
 8001568:	709a      	strb	r2, [r3, #2]

	    // 制御パラメータの設定
	    mcmd4_struct.ctrl_param.ctrl_type = MCMD_CTRL_POS;  //制御タイプを設定
 800156a:	4b30      	ldr	r3, [pc, #192]	; (800162c <mcmdSetting.0+0x114>)
 800156c:	2200      	movs	r2, #0
 800156e:	751a      	strb	r2, [r3, #20]
	    mcmd4_struct.ctrl_param.PID_param.kp = 0.3f;  // Pゲイン 1.0
 8001570:	4b2e      	ldr	r3, [pc, #184]	; (800162c <mcmdSetting.0+0x114>)
 8001572:	4a2f      	ldr	r2, [pc, #188]	; (8001630 <mcmdSetting.0+0x118>)
 8001574:	619a      	str	r2, [r3, #24]
	    mcmd4_struct.ctrl_param.PID_param.ki = 0.0f;  // Iゲイン 0.0
 8001576:	4b2d      	ldr	r3, [pc, #180]	; (800162c <mcmdSetting.0+0x114>)
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
	    mcmd4_struct.ctrl_param.PID_param.kd = 0.0f;  // Dゲイン 0.0 (Dゲインは使いにくい)
 800157e:	4b2b      	ldr	r3, [pc, #172]	; (800162c <mcmdSetting.0+0x114>)
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	621a      	str	r2, [r3, #32]
	    mcmd4_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;  // PIDの偏差をclipするか
 8001586:	4b29      	ldr	r3, [pc, #164]	; (800162c <mcmdSetting.0+0x114>)
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4_struct.ctrl_param.accel_limit_size = 2.0f;  // PIDの偏差をclipする場合の絶対値のmax値
 800158e:	4b27      	ldr	r3, [pc, #156]	; (800162c <mcmdSetting.0+0x114>)
 8001590:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001594:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4_struct.ctrl_param.feedback = MCMD_FB_ENABLE;  // MCMDからF7にフィードバックを送信するか否か
 8001596:	4b25      	ldr	r3, [pc, #148]	; (800162c <mcmdSetting.0+0x114>)
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;  // timeupは未実装なのでDISABLE。
 800159e:	4b23      	ldr	r3, [pc, #140]	; (800162c <mcmdSetting.0+0x114>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4_struct.enc_dir = MCMD_DIR_FW;  // Encoderの回転方向設定
 80015a6:	4b21      	ldr	r3, [pc, #132]	; (800162c <mcmdSetting.0+0x114>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	711a      	strb	r2, [r3, #4]
	    mcmd4_struct.rot_dir = MCMD_DIR_BC;  // モーターの回転方向設定
 80015ac:	4b1f      	ldr	r3, [pc, #124]	; (800162c <mcmdSetting.0+0x114>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	715a      	strb	r2, [r3, #5]
	    mcmd4_struct.quant_per_unit = 59.0/6400.0f;  // エンコーダーの分解能に対する制御値の変化量の割合
 80015b2:	4b1e      	ldr	r3, [pc, #120]	; (800162c <mcmdSetting.0+0x114>)
 80015b4:	4a1f      	ldr	r2, [pc, #124]	; (8001634 <mcmdSetting.0+0x11c>)
 80015b6:	611a      	str	r2, [r3, #16]

	    // 原点サーチの設定
	    mcmd4_struct.limit_sw_type = LIMIT_SW_NC;  // 原点サーチにNomaly Closedのスイッチを用いる
 80015b8:	4b1c      	ldr	r3, [pc, #112]	; (800162c <mcmdSetting.0+0x114>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	719a      	strb	r2, [r3, #6]
	    mcmd4_struct.calib = CALIBRATION_DISABLE;  // 原点サーチを行う。
 80015be:	4b1b      	ldr	r3, [pc, #108]	; (800162c <mcmdSetting.0+0x114>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	71da      	strb	r2, [r3, #7]
	    mcmd4_struct.calib_duty = 0.1f;  // 原点サーチ時のduty
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <mcmdSetting.0+0x114>)
 80015c6:	4a1c      	ldr	r2, [pc, #112]	; (8001638 <mcmdSetting.0+0x120>)
 80015c8:	609a      	str	r2, [r3, #8]
	    mcmd4_struct.offset = 0.0f;  // 原点のオフセット
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <mcmdSetting.0+0x114>)
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
	    mcmd4_struct.fb_type = MCMD_FB_POS;  // 読み取った位置情報をF7にフィードバックする。
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <mcmdSetting.0+0x114>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	70da      	strb	r2, [r3, #3]


	    // パラメータなどの設定と動作命令をMCMDに送信する
	     MCMD_init(&mcmd4_struct);
 80015d8:	4814      	ldr	r0, [pc, #80]	; (800162c <mcmdSetting.0+0x114>)
 80015da:	f7ff fd21 	bl	8001020 <MCMD_init>
	     HAL_Delay(10);
 80015de:	200a      	movs	r0, #10
 80015e0:	f000 ff2c 	bl	800243c <HAL_Delay>
	     MCMD_Calib(&mcmd4_struct);  // キャリブレーションを行う
 80015e4:	4811      	ldr	r0, [pc, #68]	; (800162c <mcmdSetting.0+0x114>)
 80015e6:	f7ff fd6b 	bl	80010c0 <MCMD_Calib>
	     HAL_Delay(2000);  // キャリブレーションが終わるまで待つ
 80015ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015ee:	f000 ff25 	bl	800243c <HAL_Delay>
	     MCMD_SetTarget(&mcmd4_struct, 30.0f);  // 目標値(0.0)を設定
 80015f2:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80015f6:	480d      	ldr	r0, [pc, #52]	; (800162c <mcmdSetting.0+0x114>)
 80015f8:	f7ff fd8e 	bl	8001118 <MCMD_SetTarget>
	     HAL_Delay(10);
 80015fc:	200a      	movs	r0, #10
 80015fe:	f000 ff1d 	bl	800243c <HAL_Delay>
	     MCMD_Control_Enable(&mcmd4_struct);  // 制御開始
 8001602:	480a      	ldr	r0, [pc, #40]	; (800162c <mcmdSetting.0+0x114>)
 8001604:	f7ff fd72 	bl	80010ec <MCMD_Control_Enable>
	     printf("start");
 8001608:	480c      	ldr	r0, [pc, #48]	; (800163c <mcmdSetting.0+0x124>)
 800160a:	f008 ff4f 	bl	800a4ac <iprintf>
	     HAL_Delay(10);
 800160e:	200a      	movs	r0, #10
 8001610:	f000 ff14 	bl	800243c <HAL_Delay>
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	0800b5f0 	.word	0x0800b5f0
 8001620:	200024e8 	.word	0x200024e8
 8001624:	200044d0 	.word	0x200044d0
 8001628:	0800b618 	.word	0x0800b618
 800162c:	200044d8 	.word	0x200044d8
 8001630:	3e99999a 	.word	0x3e99999a
 8001634:	3c170a3d 	.word	0x3c170a3d
 8001638:	3dcccccd 	.word	0x3dcccccd
 800163c:	0800b63c 	.word	0x0800b63c

08001640 <main>:
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
int main(void)
 8001646:	f107 0310 	add.w	r3, r7, #16
 800164a:	607b      	str	r3, [r7, #4]
  HAL_Init();
 800164c:	f000 fec9 	bl	80023e2 <HAL_Init>
  SystemClock_Config();
 8001650:	f000 f840 	bl	80016d4 <SystemClock_Config>
  MX_GPIO_Init();
 8001654:	f000 f9b0 	bl	80019b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001658:	f000 f990 	bl	800197c <MX_DMA_Init>
  MX_USART3_UART_Init();
 800165c:	f000 f930 	bl	80018c0 <MX_USART3_UART_Init>
  MX_ETH_Init();
 8001660:	f000 f8e0 	bl	8001824 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001664:	f000 f95c 	bl	8001920 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 8001668:	f000 f8a6 	bl	80017b8 <MX_CAN1_Init>

mcmdSetting();
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	469c      	mov	ip, r3
 8001670:	f7ff ff52 	bl	8001518 <mcmdSetting.0>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001674:	f006 f90e 	bl	8007894 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001678:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <main+0x70>)
 800167a:	2100      	movs	r1, #0
 800167c:	480d      	ldr	r0, [pc, #52]	; (80016b4 <main+0x74>)
 800167e:	f006 f973 	bl	8007968 <osThreadNew>
 8001682:	4603      	mov	r3, r0
 8001684:	4a0c      	ldr	r2, [pc, #48]	; (80016b8 <main+0x78>)
 8001686:	6013      	str	r3, [r2, #0]

  /* creation of systemCheckTask */
  systemCheckTaskHandle = osThreadNew(StartTask02, NULL, &systemCheckTask_attributes);
 8001688:	4a0c      	ldr	r2, [pc, #48]	; (80016bc <main+0x7c>)
 800168a:	2100      	movs	r1, #0
 800168c:	480c      	ldr	r0, [pc, #48]	; (80016c0 <main+0x80>)
 800168e:	f006 f96b 	bl	8007968 <osThreadNew>
 8001692:	4603      	mov	r3, r0
 8001694:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <main+0x84>)
 8001696:	6013      	str	r3, [r2, #0]

  /* creation of ControllerTask */
  ControllerTaskHandle = osThreadNew(StartTask03, NULL, &ControllerTask_attributes);
 8001698:	4a0b      	ldr	r2, [pc, #44]	; (80016c8 <main+0x88>)
 800169a:	2100      	movs	r1, #0
 800169c:	480b      	ldr	r0, [pc, #44]	; (80016cc <main+0x8c>)
 800169e:	f006 f963 	bl	8007968 <osThreadNew>
 80016a2:	4603      	mov	r3, r0
 80016a4:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <main+0x90>)
 80016a6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80016a8:	f006 f928 	bl	80078fc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <main+0x6c>
 80016ae:	bf00      	nop
 80016b0:	0800b674 	.word	0x0800b674
 80016b4:	08001afd 	.word	0x08001afd
 80016b8:	20002bb0 	.word	0x20002bb0
 80016bc:	0800b698 	.word	0x0800b698
 80016c0:	08001b6d 	.word	0x08001b6d
 80016c4:	20003410 	.word	0x20003410
 80016c8:	0800b6bc 	.word	0x0800b6bc
 80016cc:	08001b87 	.word	0x08001b87
 80016d0:	20003c70 	.word	0x20003c70

080016d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b094      	sub	sp, #80	; 0x50
 80016d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016da:	f107 031c 	add.w	r3, r7, #28
 80016de:	2234      	movs	r2, #52	; 0x34
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f008 feda 	bl	800a49c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e8:	f107 0308 	add.w	r3, r7, #8
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80016f8:	f003 f8c0 	bl	800487c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016fc:	4b2c      	ldr	r3, [pc, #176]	; (80017b0 <SystemClock_Config+0xdc>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	4a2b      	ldr	r2, [pc, #172]	; (80017b0 <SystemClock_Config+0xdc>)
 8001702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001706:	6413      	str	r3, [r2, #64]	; 0x40
 8001708:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <SystemClock_Config+0xdc>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001714:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <SystemClock_Config+0xe0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800171c:	4a25      	ldr	r2, [pc, #148]	; (80017b4 <SystemClock_Config+0xe0>)
 800171e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <SystemClock_Config+0xe0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800172c:	603b      	str	r3, [r7, #0]
 800172e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001730:	2301      	movs	r3, #1
 8001732:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001734:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001738:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173a:	2302      	movs	r3, #2
 800173c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800173e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001742:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001744:	2304      	movs	r3, #4
 8001746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001748:	2360      	movs	r3, #96	; 0x60
 800174a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800174c:	2302      	movs	r3, #2
 800174e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001750:	2304      	movs	r3, #4
 8001752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001754:	2302      	movs	r3, #2
 8001756:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001758:	f107 031c 	add.w	r3, r7, #28
 800175c:	4618      	mov	r0, r3
 800175e:	f003 f8ed 	bl	800493c <HAL_RCC_OscConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001768:	f000 fa28 	bl	8001bbc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800176c:	f003 f896 	bl	800489c <HAL_PWREx_EnableOverDrive>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001776:	f000 fa21 	bl	8001bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800177a:	230f      	movs	r3, #15
 800177c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800177e:	2302      	movs	r3, #2
 8001780:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800178c:	2300      	movs	r3, #0
 800178e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001790:	f107 0308 	add.w	r3, r7, #8
 8001794:	2103      	movs	r1, #3
 8001796:	4618      	mov	r0, r3
 8001798:	f003 fb7e 	bl	8004e98 <HAL_RCC_ClockConfig>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80017a2:	f000 fa0b 	bl	8001bbc <Error_Handler>
  }
}
 80017a6:	bf00      	nop
 80017a8:	3750      	adds	r7, #80	; 0x50
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40007000 	.word	0x40007000

080017b8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <MX_CAN1_Init+0x64>)
 80017be:	4a18      	ldr	r2, [pc, #96]	; (8001820 <MX_CAN1_Init+0x68>)
 80017c0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <MX_CAN1_Init+0x64>)
 80017c4:	2206      	movs	r2, #6
 80017c6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <MX_CAN1_Init+0x64>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80017ce:	4b13      	ldr	r3, [pc, #76]	; (800181c <MX_CAN1_Init+0x64>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_CAN1_Init+0x64>)
 80017d6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80017da:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <MX_CAN1_Init+0x64>)
 80017de:	2200      	movs	r2, #0
 80017e0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_CAN1_Init+0x64>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <MX_CAN1_Init+0x64>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <MX_CAN1_Init+0x64>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <MX_CAN1_Init+0x64>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <MX_CAN1_Init+0x64>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <MX_CAN1_Init+0x64>)
 8001802:	2201      	movs	r2, #1
 8001804:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001806:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_CAN1_Init+0x64>)
 8001808:	f000 fe3c 	bl	8002484 <HAL_CAN_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001812:	f000 f9d3 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200024e8 	.word	0x200024e8
 8001820:	40006400 	.word	0x40006400

08001824 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001828:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <MX_ETH_Init+0x84>)
 800182a:	4a20      	ldr	r2, [pc, #128]	; (80018ac <MX_ETH_Init+0x88>)
 800182c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <MX_ETH_Init+0x8c>)
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <MX_ETH_Init+0x8c>)
 8001836:	2280      	movs	r2, #128	; 0x80
 8001838:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800183a:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <MX_ETH_Init+0x8c>)
 800183c:	22e1      	movs	r2, #225	; 0xe1
 800183e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001840:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <MX_ETH_Init+0x8c>)
 8001842:	2200      	movs	r2, #0
 8001844:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001846:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <MX_ETH_Init+0x8c>)
 8001848:	2200      	movs	r2, #0
 800184a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800184c:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <MX_ETH_Init+0x8c>)
 800184e:	2200      	movs	r2, #0
 8001850:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <MX_ETH_Init+0x84>)
 8001854:	4a16      	ldr	r2, [pc, #88]	; (80018b0 <MX_ETH_Init+0x8c>)
 8001856:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001858:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <MX_ETH_Init+0x84>)
 800185a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800185e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <MX_ETH_Init+0x84>)
 8001862:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <MX_ETH_Init+0x90>)
 8001864:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <MX_ETH_Init+0x84>)
 8001868:	4a13      	ldr	r2, [pc, #76]	; (80018b8 <MX_ETH_Init+0x94>)
 800186a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800186c:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <MX_ETH_Init+0x84>)
 800186e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001872:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001874:	480c      	ldr	r0, [pc, #48]	; (80018a8 <MX_ETH_Init+0x84>)
 8001876:	f002 f8bf 	bl	80039f8 <HAL_ETH_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001880:	f000 f99c 	bl	8001bbc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001884:	2238      	movs	r2, #56	; 0x38
 8001886:	2100      	movs	r1, #0
 8001888:	480c      	ldr	r0, [pc, #48]	; (80018bc <MX_ETH_Init+0x98>)
 800188a:	f008 fe07 	bl	800a49c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <MX_ETH_Init+0x98>)
 8001890:	2221      	movs	r2, #33	; 0x21
 8001892:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <MX_ETH_Init+0x98>)
 8001896:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800189a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800189c:	4b07      	ldr	r3, [pc, #28]	; (80018bc <MX_ETH_Init+0x98>)
 800189e:	2200      	movs	r2, #0
 80018a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20002510 	.word	0x20002510
 80018ac:	40028000 	.word	0x40028000
 80018b0:	20004520 	.word	0x20004520
 80018b4:	20000114 	.word	0x20000114
 80018b8:	20000074 	.word	0x20000074
 80018bc:	200024b0 	.word	0x200024b0

080018c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <MX_USART3_UART_Init+0x58>)
 80018c6:	4a15      	ldr	r2, [pc, #84]	; (800191c <MX_USART3_UART_Init+0x5c>)
 80018c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018ca:	4b13      	ldr	r3, [pc, #76]	; (8001918 <MX_USART3_UART_Init+0x58>)
 80018cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018d2:	4b11      	ldr	r3, [pc, #68]	; (8001918 <MX_USART3_UART_Init+0x58>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <MX_USART3_UART_Init+0x58>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <MX_USART3_UART_Init+0x58>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <MX_USART3_UART_Init+0x58>)
 80018e6:	220c      	movs	r2, #12
 80018e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <MX_USART3_UART_Init+0x58>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <MX_USART3_UART_Init+0x58>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <MX_USART3_UART_Init+0x58>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <MX_USART3_UART_Init+0x58>)
 80018fe:	2200      	movs	r2, #0
 8001900:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001902:	4805      	ldr	r0, [pc, #20]	; (8001918 <MX_USART3_UART_Init+0x58>)
 8001904:	f004 fc28 	bl	8006158 <HAL_UART_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800190e:	f000 f955 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200025c0 	.word	0x200025c0
 800191c:	40004800 	.word	0x40004800

08001920 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001926:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800192a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800192e:	2206      	movs	r2, #6
 8001930:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001934:	2202      	movs	r2, #2
 8001936:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001940:	2202      	movs	r2, #2
 8001942:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001946:	2201      	movs	r2, #1
 8001948:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800194c:	2200      	movs	r2, #0
 800194e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001952:	2200      	movs	r2, #0
 8001954:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001956:	4b08      	ldr	r3, [pc, #32]	; (8001978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001958:	2201      	movs	r2, #1
 800195a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800195e:	2200      	movs	r2, #0
 8001960:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001962:	4805      	ldr	r0, [pc, #20]	; (8001978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001964:	f002 fe41 	bl	80045ea <HAL_PCD_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800196e:	f000 f925 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	200026a8 	.word	0x200026a8

0800197c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <MX_DMA_Init+0x38>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a0b      	ldr	r2, [pc, #44]	; (80019b4 <MX_DMA_Init+0x38>)
 8001988:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <MX_DMA_Init+0x38>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2105      	movs	r1, #5
 800199e:	200e      	movs	r0, #14
 80019a0:	f001 fc84 	bl	80032ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80019a4:	200e      	movs	r0, #14
 80019a6:	f001 fc9d 	bl	80032e4 <HAL_NVIC_EnableIRQ>

}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800

080019b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08c      	sub	sp, #48	; 0x30
 80019bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
 80019cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ce:	4b47      	ldr	r3, [pc, #284]	; (8001aec <MX_GPIO_Init+0x134>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a46      	ldr	r2, [pc, #280]	; (8001aec <MX_GPIO_Init+0x134>)
 80019d4:	f043 0304 	orr.w	r3, r3, #4
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b44      	ldr	r3, [pc, #272]	; (8001aec <MX_GPIO_Init+0x134>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	61bb      	str	r3, [r7, #24]
 80019e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019e6:	4b41      	ldr	r3, [pc, #260]	; (8001aec <MX_GPIO_Init+0x134>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a40      	ldr	r2, [pc, #256]	; (8001aec <MX_GPIO_Init+0x134>)
 80019ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b3e      	ldr	r3, [pc, #248]	; (8001aec <MX_GPIO_Init+0x134>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fe:	4b3b      	ldr	r3, [pc, #236]	; (8001aec <MX_GPIO_Init+0x134>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a3a      	ldr	r2, [pc, #232]	; (8001aec <MX_GPIO_Init+0x134>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b38      	ldr	r3, [pc, #224]	; (8001aec <MX_GPIO_Init+0x134>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a16:	4b35      	ldr	r3, [pc, #212]	; (8001aec <MX_GPIO_Init+0x134>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a34      	ldr	r2, [pc, #208]	; (8001aec <MX_GPIO_Init+0x134>)
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b32      	ldr	r3, [pc, #200]	; (8001aec <MX_GPIO_Init+0x134>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a2e:	4b2f      	ldr	r3, [pc, #188]	; (8001aec <MX_GPIO_Init+0x134>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a2e      	ldr	r2, [pc, #184]	; (8001aec <MX_GPIO_Init+0x134>)
 8001a34:	f043 0308 	orr.w	r3, r3, #8
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b2c      	ldr	r3, [pc, #176]	; (8001aec <MX_GPIO_Init+0x134>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a46:	4b29      	ldr	r3, [pc, #164]	; (8001aec <MX_GPIO_Init+0x134>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a28      	ldr	r2, [pc, #160]	; (8001aec <MX_GPIO_Init+0x134>)
 8001a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b26      	ldr	r3, [pc, #152]	; (8001aec <MX_GPIO_Init+0x134>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f244 0181 	movw	r1, #16513	; 0x4081
 8001a64:	4822      	ldr	r0, [pc, #136]	; (8001af0 <MX_GPIO_Init+0x138>)
 8001a66:	f002 fd8d 	bl	8004584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2140      	movs	r1, #64	; 0x40
 8001a6e:	4821      	ldr	r0, [pc, #132]	; (8001af4 <MX_GPIO_Init+0x13c>)
 8001a70:	f002 fd88 	bl	8004584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001a74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001a84:	f107 031c 	add.w	r3, r7, #28
 8001a88:	4619      	mov	r1, r3
 8001a8a:	481b      	ldr	r0, [pc, #108]	; (8001af8 <MX_GPIO_Init+0x140>)
 8001a8c:	f002 fbce 	bl	800422c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001a90:	f244 0381 	movw	r3, #16513	; 0x4081
 8001a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a96:	2301      	movs	r3, #1
 8001a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa2:	f107 031c 	add.w	r3, r7, #28
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4811      	ldr	r0, [pc, #68]	; (8001af0 <MX_GPIO_Init+0x138>)
 8001aaa:	f002 fbbf 	bl	800422c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001aae:	2340      	movs	r3, #64	; 0x40
 8001ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aba:	2300      	movs	r3, #0
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001abe:	f107 031c 	add.w	r3, r7, #28
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	480b      	ldr	r0, [pc, #44]	; (8001af4 <MX_GPIO_Init+0x13c>)
 8001ac6:	f002 fbb1 	bl	800422c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ad6:	f107 031c 	add.w	r3, r7, #28
 8001ada:	4619      	mov	r1, r3
 8001adc:	4805      	ldr	r0, [pc, #20]	; (8001af4 <MX_GPIO_Init+0x13c>)
 8001ade:	f002 fba5 	bl	800422c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ae2:	bf00      	nop
 8001ae4:	3730      	adds	r7, #48	; 0x30
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020400 	.word	0x40020400
 8001af4:	40021800 	.word	0x40021800
 8001af8:	40020800 	.word	0x40020800

08001afc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1000);
 8001b04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b08:	f005 ffd4 	bl	8007ab4 <osDelay>
 8001b0c:	e7fa      	b.n	8001b04 <StartDefaultTask+0x8>
	...

08001b10 <freeRTOSChecker>:
/**
* @brief Function implementing the systemCheckTask thread.
* @param argument: Not used
* @retval None
*/
void freeRTOSChecker(){//無限ループの中で実行
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, LD2_Pin);  // PINのPin stateを反転
 8001b14:	2180      	movs	r1, #128	; 0x80
 8001b16:	4802      	ldr	r0, [pc, #8]	; (8001b20 <freeRTOSChecker+0x10>)
 8001b18:	f002 fd4d 	bl	80045b6 <HAL_GPIO_TogglePin>
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40020400 	.word	0x40020400

08001b24 <mcmdChecker>:

void mcmdChecker(){//無限ループの中で実行
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
	mcmd_fb = Get_MCMD_Feedback(&(mcmd4_struct.device));
 8001b2a:	4c0d      	ldr	r4, [pc, #52]	; (8001b60 <mcmdChecker+0x3c>)
 8001b2c:	463b      	mov	r3, r7
 8001b2e:	490d      	ldr	r1, [pc, #52]	; (8001b64 <mcmdChecker+0x40>)
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fb09 	bl	8001148 <Get_MCMD_Feedback>
 8001b36:	4622      	mov	r2, r4
 8001b38:	463b      	mov	r3, r7
 8001b3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b3e:	e882 0003 	stmia.w	r2, {r0, r1}
	printf("value of tyokudou %d\r\n",(int)(mcmd_fb.value));
 8001b42:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <mcmdChecker+0x3c>)
 8001b44:	edd3 7a00 	vldr	s15, [r3]
 8001b48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b4c:	ee17 1a90 	vmov	r1, s15
 8001b50:	4805      	ldr	r0, [pc, #20]	; (8001b68 <mcmdChecker+0x44>)
 8001b52:	f008 fcab 	bl	800a4ac <iprintf>
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd90      	pop	{r4, r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20004518 	.word	0x20004518
 8001b64:	200044d8 	.word	0x200044d8
 8001b68:	0800b644 	.word	0x0800b644

08001b6c <StartTask02>:
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  freeRTOSChecker();
 8001b74:	f7ff ffcc 	bl	8001b10 <freeRTOSChecker>
	  mcmdChecker();
 8001b78:	f7ff ffd4 	bl	8001b24 <mcmdChecker>
      osDelay(1000);
 8001b7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b80:	f005 ff98 	bl	8007ab4 <osDelay>
	  freeRTOSChecker();
 8001b84:	e7f6      	b.n	8001b74 <StartTask02+0x8>

08001b86 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f005 ff90 	bl	8007ab4 <osDelay>
 8001b94:	e7fb      	b.n	8001b8e <StartTask03+0x8>
	...

08001b98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d101      	bne.n	8001bae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001baa:	f000 fc27 	bl	80023fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40002000 	.word	0x40002000

08001bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc0:	b672      	cpsid	i
}
 8001bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <Error_Handler+0x8>
	...

08001bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <HAL_MspInit+0x4c>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	4a10      	ldr	r2, [pc, #64]	; (8001c14 <HAL_MspInit+0x4c>)
 8001bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <HAL_MspInit+0x4c>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_MspInit+0x4c>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <HAL_MspInit+0x4c>)
 8001bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <HAL_MspInit+0x4c>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	210f      	movs	r1, #15
 8001c02:	f06f 0001 	mvn.w	r0, #1
 8001c06:	f001 fb51 	bl	80032ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800

08001c18 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a23      	ldr	r2, [pc, #140]	; (8001cc4 <HAL_CAN_MspInit+0xac>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d13f      	bne.n	8001cba <HAL_CAN_MspInit+0xa2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c3a:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <HAL_CAN_MspInit+0xb0>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	4a22      	ldr	r2, [pc, #136]	; (8001cc8 <HAL_CAN_MspInit+0xb0>)
 8001c40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c44:	6413      	str	r3, [r2, #64]	; 0x40
 8001c46:	4b20      	ldr	r3, [pc, #128]	; (8001cc8 <HAL_CAN_MspInit+0xb0>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c52:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <HAL_CAN_MspInit+0xb0>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	4a1c      	ldr	r2, [pc, #112]	; (8001cc8 <HAL_CAN_MspInit+0xb0>)
 8001c58:	f043 0308 	orr.w	r3, r3, #8
 8001c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <HAL_CAN_MspInit+0xb0>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c76:	2303      	movs	r3, #3
 8001c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c7a:	2309      	movs	r3, #9
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c7e:	f107 0314 	add.w	r3, r7, #20
 8001c82:	4619      	mov	r1, r3
 8001c84:	4811      	ldr	r0, [pc, #68]	; (8001ccc <HAL_CAN_MspInit+0xb4>)
 8001c86:	f002 fad1 	bl	800422c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2105      	movs	r1, #5
 8001c8e:	2013      	movs	r0, #19
 8001c90:	f001 fb0c 	bl	80032ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001c94:	2013      	movs	r0, #19
 8001c96:	f001 fb25 	bl	80032e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2105      	movs	r1, #5
 8001c9e:	2014      	movs	r0, #20
 8001ca0:	f001 fb04 	bl	80032ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001ca4:	2014      	movs	r0, #20
 8001ca6:	f001 fb1d 	bl	80032e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2105      	movs	r1, #5
 8001cae:	2015      	movs	r0, #21
 8001cb0:	f001 fafc 	bl	80032ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001cb4:	2015      	movs	r0, #21
 8001cb6:	f001 fb15 	bl	80032e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001cba:	bf00      	nop
 8001cbc:	3728      	adds	r7, #40	; 0x28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40006400 	.word	0x40006400
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40020c00 	.word	0x40020c00

08001cd0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08e      	sub	sp, #56	; 0x38
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a52      	ldr	r2, [pc, #328]	; (8001e38 <HAL_ETH_MspInit+0x168>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	f040 809e 	bne.w	8001e30 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001cf4:	4b51      	ldr	r3, [pc, #324]	; (8001e3c <HAL_ETH_MspInit+0x16c>)
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf8:	4a50      	ldr	r2, [pc, #320]	; (8001e3c <HAL_ETH_MspInit+0x16c>)
 8001cfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8001d00:	4b4e      	ldr	r3, [pc, #312]	; (8001e3c <HAL_ETH_MspInit+0x16c>)
 8001d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d08:	623b      	str	r3, [r7, #32]
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	4b4b      	ldr	r3, [pc, #300]	; (8001e3c <HAL_ETH_MspInit+0x16c>)
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d10:	4a4a      	ldr	r2, [pc, #296]	; (8001e3c <HAL_ETH_MspInit+0x16c>)
 8001d12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d16:	6313      	str	r3, [r2, #48]	; 0x30
 8001d18:	4b48      	ldr	r3, [pc, #288]	; (8001e3c <HAL_ETH_MspInit+0x16c>)
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d20:	61fb      	str	r3, [r7, #28]
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	4b45      	ldr	r3, [pc, #276]	; (8001e3c <HAL_ETH_MspInit+0x16c>)
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	4a44      	ldr	r2, [pc, #272]	; (8001e3c <HAL_ETH_MspInit+0x16c>)
 8001d2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d30:	4b42      	ldr	r3, [pc, #264]	; (8001e3c <HAL_ETH_MspInit+0x16c>)
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3c:	4b3f      	ldr	r3, [pc, #252]	; (8001e3c <HAL_ETH_MspInit+0x16c>)
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	4a3e      	ldr	r2, [pc, #248]	; (8001e3c <HAL_ETH_MspInit+0x16c>)
 8001d42:	f043 0304 	orr.w	r3, r3, #4
 8001d46:	6313      	str	r3, [r2, #48]	; 0x30
 8001d48:	4b3c      	ldr	r3, [pc, #240]	; (8001e3c <HAL_ETH_MspInit+0x16c>)
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d54:	4b39      	ldr	r3, [pc, #228]	; (8001e3c <HAL_ETH_MspInit+0x16c>)
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	4a38      	ldr	r2, [pc, #224]	; (8001e3c <HAL_ETH_MspInit+0x16c>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d60:	4b36      	ldr	r3, [pc, #216]	; (8001e3c <HAL_ETH_MspInit+0x16c>)
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6c:	4b33      	ldr	r3, [pc, #204]	; (8001e3c <HAL_ETH_MspInit+0x16c>)
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	4a32      	ldr	r2, [pc, #200]	; (8001e3c <HAL_ETH_MspInit+0x16c>)
 8001d72:	f043 0302 	orr.w	r3, r3, #2
 8001d76:	6313      	str	r3, [r2, #48]	; 0x30
 8001d78:	4b30      	ldr	r3, [pc, #192]	; (8001e3c <HAL_ETH_MspInit+0x16c>)
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d84:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <HAL_ETH_MspInit+0x16c>)
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	4a2c      	ldr	r2, [pc, #176]	; (8001e3c <HAL_ETH_MspInit+0x16c>)
 8001d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d90:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <HAL_ETH_MspInit+0x16c>)
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001d9c:	2332      	movs	r3, #50	; 0x32
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da8:	2303      	movs	r3, #3
 8001daa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dac:	230b      	movs	r3, #11
 8001dae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db4:	4619      	mov	r1, r3
 8001db6:	4822      	ldr	r0, [pc, #136]	; (8001e40 <HAL_ETH_MspInit+0x170>)
 8001db8:	f002 fa38 	bl	800422c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001dbc:	2386      	movs	r3, #134	; 0x86
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dcc:	230b      	movs	r3, #11
 8001dce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	481b      	ldr	r0, [pc, #108]	; (8001e44 <HAL_ETH_MspInit+0x174>)
 8001dd8:	f002 fa28 	bl	800422c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001ddc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dea:	2303      	movs	r3, #3
 8001dec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dee:	230b      	movs	r3, #11
 8001df0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df6:	4619      	mov	r1, r3
 8001df8:	4813      	ldr	r0, [pc, #76]	; (8001e48 <HAL_ETH_MspInit+0x178>)
 8001dfa:	f002 fa17 	bl	800422c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001dfe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e10:	230b      	movs	r3, #11
 8001e12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e18:	4619      	mov	r1, r3
 8001e1a:	480c      	ldr	r0, [pc, #48]	; (8001e4c <HAL_ETH_MspInit+0x17c>)
 8001e1c:	f002 fa06 	bl	800422c <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8001e20:	2200      	movs	r2, #0
 8001e22:	2105      	movs	r1, #5
 8001e24:	203d      	movs	r0, #61	; 0x3d
 8001e26:	f001 fa41 	bl	80032ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8001e2a:	203d      	movs	r0, #61	; 0x3d
 8001e2c:	f001 fa5a 	bl	80032e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001e30:	bf00      	nop
 8001e32:	3738      	adds	r7, #56	; 0x38
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40028000 	.word	0x40028000
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40020800 	.word	0x40020800
 8001e44:	40020000 	.word	0x40020000
 8001e48:	40020400 	.word	0x40020400
 8001e4c:	40021800 	.word	0x40021800

08001e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b0ae      	sub	sp, #184	; 0xb8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	2290      	movs	r2, #144	; 0x90
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4618      	mov	r0, r3
 8001e72:	f008 fb13 	bl	800a49c <memset>
  if(huart->Instance==USART3)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a3d      	ldr	r2, [pc, #244]	; (8001f70 <HAL_UART_MspInit+0x120>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d172      	bne.n	8001f66 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e84:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e86:	2300      	movs	r3, #0
 8001e88:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e8a:	f107 0314 	add.w	r3, r7, #20
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f003 fa5a 	bl	8005348 <HAL_RCCEx_PeriphCLKConfig>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e9a:	f7ff fe8f 	bl	8001bbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e9e:	4b35      	ldr	r3, [pc, #212]	; (8001f74 <HAL_UART_MspInit+0x124>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	4a34      	ldr	r2, [pc, #208]	; (8001f74 <HAL_UART_MspInit+0x124>)
 8001ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eaa:	4b32      	ldr	r3, [pc, #200]	; (8001f74 <HAL_UART_MspInit+0x124>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb6:	4b2f      	ldr	r3, [pc, #188]	; (8001f74 <HAL_UART_MspInit+0x124>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a2e      	ldr	r2, [pc, #184]	; (8001f74 <HAL_UART_MspInit+0x124>)
 8001ebc:	f043 0308 	orr.w	r3, r3, #8
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b2c      	ldr	r3, [pc, #176]	; (8001f74 <HAL_UART_MspInit+0x124>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001ece:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ed2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ee8:	2307      	movs	r3, #7
 8001eea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4820      	ldr	r0, [pc, #128]	; (8001f78 <HAL_UART_MspInit+0x128>)
 8001ef6:	f002 f999 	bl	800422c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001efa:	4b20      	ldr	r3, [pc, #128]	; (8001f7c <HAL_UART_MspInit+0x12c>)
 8001efc:	4a20      	ldr	r2, [pc, #128]	; (8001f80 <HAL_UART_MspInit+0x130>)
 8001efe:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001f00:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <HAL_UART_MspInit+0x12c>)
 8001f02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f06:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f08:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <HAL_UART_MspInit+0x12c>)
 8001f0a:	2240      	movs	r2, #64	; 0x40
 8001f0c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f0e:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_UART_MspInit+0x12c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HAL_UART_MspInit+0x12c>)
 8001f16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f1a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f1c:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <HAL_UART_MspInit+0x12c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f22:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <HAL_UART_MspInit+0x12c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001f28:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <HAL_UART_MspInit+0x12c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f2e:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <HAL_UART_MspInit+0x12c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_UART_MspInit+0x12c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001f3a:	4810      	ldr	r0, [pc, #64]	; (8001f7c <HAL_UART_MspInit+0x12c>)
 8001f3c:	f001 f9e0 	bl	8003300 <HAL_DMA_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001f46:	f7ff fe39 	bl	8001bbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a0b      	ldr	r2, [pc, #44]	; (8001f7c <HAL_UART_MspInit+0x12c>)
 8001f4e:	671a      	str	r2, [r3, #112]	; 0x70
 8001f50:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <HAL_UART_MspInit+0x12c>)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2105      	movs	r1, #5
 8001f5a:	2027      	movs	r0, #39	; 0x27
 8001f5c:	f001 f9a6 	bl	80032ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f60:	2027      	movs	r0, #39	; 0x27
 8001f62:	f001 f9bf 	bl	80032e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f66:	bf00      	nop
 8001f68:	37b8      	adds	r7, #184	; 0xb8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40004800 	.word	0x40004800
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40020c00 	.word	0x40020c00
 8001f7c:	20002648 	.word	0x20002648
 8001f80:	40026058 	.word	0x40026058

08001f84 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b0ae      	sub	sp, #184	; 0xb8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	2290      	movs	r2, #144	; 0x90
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f008 fa79 	bl	800a49c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fb2:	d159      	bne.n	8002068 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001fb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fb8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f003 f9bf 	bl	8005348 <HAL_RCCEx_PeriphCLKConfig>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001fd0:	f7ff fdf4 	bl	8001bbc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd4:	4b26      	ldr	r3, [pc, #152]	; (8002070 <HAL_PCD_MspInit+0xec>)
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	4a25      	ldr	r2, [pc, #148]	; (8002070 <HAL_PCD_MspInit+0xec>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe0:	4b23      	ldr	r3, [pc, #140]	; (8002070 <HAL_PCD_MspInit+0xec>)
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001fec:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001ff0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002000:	2303      	movs	r3, #3
 8002002:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002006:	230a      	movs	r3, #10
 8002008:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002010:	4619      	mov	r1, r3
 8002012:	4818      	ldr	r0, [pc, #96]	; (8002074 <HAL_PCD_MspInit+0xf0>)
 8002014:	f002 f90a 	bl	800422c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800201c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002020:	2300      	movs	r3, #0
 8002022:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800202c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002030:	4619      	mov	r1, r3
 8002032:	4810      	ldr	r0, [pc, #64]	; (8002074 <HAL_PCD_MspInit+0xf0>)
 8002034:	f002 f8fa 	bl	800422c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002038:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <HAL_PCD_MspInit+0xec>)
 800203a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203c:	4a0c      	ldr	r2, [pc, #48]	; (8002070 <HAL_PCD_MspInit+0xec>)
 800203e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002042:	6353      	str	r3, [r2, #52]	; 0x34
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_PCD_MspInit+0xec>)
 8002046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4b07      	ldr	r3, [pc, #28]	; (8002070 <HAL_PCD_MspInit+0xec>)
 8002052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002054:	4a06      	ldr	r2, [pc, #24]	; (8002070 <HAL_PCD_MspInit+0xec>)
 8002056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800205a:	6453      	str	r3, [r2, #68]	; 0x44
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <HAL_PCD_MspInit+0xec>)
 800205e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002068:	bf00      	nop
 800206a:	37b8      	adds	r7, #184	; 0xb8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40023800 	.word	0x40023800
 8002074:	40020000 	.word	0x40020000

08002078 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08e      	sub	sp, #56	; 0x38
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8002088:	4b33      	ldr	r3, [pc, #204]	; (8002158 <HAL_InitTick+0xe0>)
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	4a32      	ldr	r2, [pc, #200]	; (8002158 <HAL_InitTick+0xe0>)
 800208e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002092:	6413      	str	r3, [r2, #64]	; 0x40
 8002094:	4b30      	ldr	r3, [pc, #192]	; (8002158 <HAL_InitTick+0xe0>)
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020a0:	f107 0210 	add.w	r2, r7, #16
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	4611      	mov	r1, r2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f003 f91a 	bl	80052e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80020b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d103      	bne.n	80020c2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020ba:	f003 f8eb 	bl	8005294 <HAL_RCC_GetPCLK1Freq>
 80020be:	6378      	str	r0, [r7, #52]	; 0x34
 80020c0:	e004      	b.n	80020cc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80020c2:	f003 f8e7 	bl	8005294 <HAL_RCC_GetPCLK1Freq>
 80020c6:	4603      	mov	r3, r0
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ce:	4a23      	ldr	r2, [pc, #140]	; (800215c <HAL_InitTick+0xe4>)
 80020d0:	fba2 2303 	umull	r2, r3, r2, r3
 80020d4:	0c9b      	lsrs	r3, r3, #18
 80020d6:	3b01      	subs	r3, #1
 80020d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80020da:	4b21      	ldr	r3, [pc, #132]	; (8002160 <HAL_InitTick+0xe8>)
 80020dc:	4a21      	ldr	r2, [pc, #132]	; (8002164 <HAL_InitTick+0xec>)
 80020de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80020e0:	4b1f      	ldr	r3, [pc, #124]	; (8002160 <HAL_InitTick+0xe8>)
 80020e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020e6:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80020e8:	4a1d      	ldr	r2, [pc, #116]	; (8002160 <HAL_InitTick+0xe8>)
 80020ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ec:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80020ee:	4b1c      	ldr	r3, [pc, #112]	; (8002160 <HAL_InitTick+0xe8>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f4:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <HAL_InitTick+0xe8>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020fa:	4b19      	ldr	r3, [pc, #100]	; (8002160 <HAL_InitTick+0xe8>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8002100:	4817      	ldr	r0, [pc, #92]	; (8002160 <HAL_InitTick+0xe8>)
 8002102:	f003 fd49 	bl	8005b98 <HAL_TIM_Base_Init>
 8002106:	4603      	mov	r3, r0
 8002108:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800210c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002110:	2b00      	cmp	r3, #0
 8002112:	d11b      	bne.n	800214c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8002114:	4812      	ldr	r0, [pc, #72]	; (8002160 <HAL_InitTick+0xe8>)
 8002116:	f003 fda1 	bl	8005c5c <HAL_TIM_Base_Start_IT>
 800211a:	4603      	mov	r3, r0
 800211c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002120:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002124:	2b00      	cmp	r3, #0
 8002126:	d111      	bne.n	800214c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002128:	202d      	movs	r0, #45	; 0x2d
 800212a:	f001 f8db 	bl	80032e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b0f      	cmp	r3, #15
 8002132:	d808      	bhi.n	8002146 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8002134:	2200      	movs	r2, #0
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	202d      	movs	r0, #45	; 0x2d
 800213a:	f001 f8b7 	bl	80032ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800213e:	4a0a      	ldr	r2, [pc, #40]	; (8002168 <HAL_InitTick+0xf0>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	e002      	b.n	800214c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800214c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002150:	4618      	mov	r0, r3
 8002152:	3738      	adds	r7, #56	; 0x38
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40023800 	.word	0x40023800
 800215c:	431bde83 	.word	0x431bde83
 8002160:	20004528 	.word	0x20004528
 8002164:	40002000 	.word	0x40002000
 8002168:	20000004 	.word	0x20000004

0800216c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002170:	e7fe      	b.n	8002170 <NMI_Handler+0x4>

08002172 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002176:	e7fe      	b.n	8002176 <HardFault_Handler+0x4>

08002178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800217c:	e7fe      	b.n	800217c <MemManage_Handler+0x4>

0800217e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002182:	e7fe      	b.n	8002182 <BusFault_Handler+0x4>

08002184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002188:	e7fe      	b.n	8002188 <UsageFault_Handler+0x4>

0800218a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800219c:	4802      	ldr	r0, [pc, #8]	; (80021a8 <DMA1_Stream3_IRQHandler+0x10>)
 800219e:	f001 f9ef 	bl	8003580 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20002648 	.word	0x20002648

080021ac <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80021b0:	4802      	ldr	r0, [pc, #8]	; (80021bc <CAN1_TX_IRQHandler+0x10>)
 80021b2:	f000 fdd0 	bl	8002d56 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	200024e8 	.word	0x200024e8

080021c0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80021c4:	4802      	ldr	r0, [pc, #8]	; (80021d0 <CAN1_RX0_IRQHandler+0x10>)
 80021c6:	f000 fdc6 	bl	8002d56 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200024e8 	.word	0x200024e8

080021d4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80021d8:	4802      	ldr	r0, [pc, #8]	; (80021e4 <CAN1_RX1_IRQHandler+0x10>)
 80021da:	f000 fdbc 	bl	8002d56 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	200024e8 	.word	0x200024e8

080021e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80021ec:	4802      	ldr	r0, [pc, #8]	; (80021f8 <USART3_IRQHandler+0x10>)
 80021ee:	f004 f885 	bl	80062fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	200025c0 	.word	0x200025c0

080021fc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002200:	4802      	ldr	r0, [pc, #8]	; (800220c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002202:	f003 fda3 	bl	8005d4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20004528 	.word	0x20004528

08002210 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002214:	4802      	ldr	r0, [pc, #8]	; (8002220 <ETH_IRQHandler+0x10>)
 8002216:	f001 fc6b 	bl	8003af0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20002510 	.word	0x20002510

08002224 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	e00a      	b.n	800224c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002236:	f3af 8000 	nop.w
 800223a:	4601      	mov	r1, r0
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	60ba      	str	r2, [r7, #8]
 8002242:	b2ca      	uxtb	r2, r1
 8002244:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	3301      	adds	r3, #1
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	429a      	cmp	r2, r3
 8002252:	dbf0      	blt.n	8002236 <_read+0x12>
  }

  return len;
 8002254:	687b      	ldr	r3, [r7, #4]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b086      	sub	sp, #24
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	e009      	b.n	8002284 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	1c5a      	adds	r2, r3, #1
 8002274:	60ba      	str	r2, [r7, #8]
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff f8ef 	bl	800145c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	3301      	adds	r3, #1
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	429a      	cmp	r2, r3
 800228a:	dbf1      	blt.n	8002270 <_write+0x12>
  }
  return len;
 800228c:	687b      	ldr	r3, [r7, #4]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <_close>:

int _close(int file)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800229e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022be:	605a      	str	r2, [r3, #4]
  return 0;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <_isatty>:

int _isatty(int file)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022d6:	2301      	movs	r3, #1
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002308:	4a14      	ldr	r2, [pc, #80]	; (800235c <_sbrk+0x5c>)
 800230a:	4b15      	ldr	r3, [pc, #84]	; (8002360 <_sbrk+0x60>)
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002314:	4b13      	ldr	r3, [pc, #76]	; (8002364 <_sbrk+0x64>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d102      	bne.n	8002322 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800231c:	4b11      	ldr	r3, [pc, #68]	; (8002364 <_sbrk+0x64>)
 800231e:	4a12      	ldr	r2, [pc, #72]	; (8002368 <_sbrk+0x68>)
 8002320:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <_sbrk+0x64>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4413      	add	r3, r2
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	429a      	cmp	r2, r3
 800232e:	d207      	bcs.n	8002340 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002330:	f008 f87c 	bl	800a42c <__errno>
 8002334:	4603      	mov	r3, r0
 8002336:	220c      	movs	r2, #12
 8002338:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800233a:	f04f 33ff 	mov.w	r3, #4294967295
 800233e:	e009      	b.n	8002354 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <_sbrk+0x64>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002346:	4b07      	ldr	r3, [pc, #28]	; (8002364 <_sbrk+0x64>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	4a05      	ldr	r2, [pc, #20]	; (8002364 <_sbrk+0x64>)
 8002350:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002352:	68fb      	ldr	r3, [r7, #12]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20080000 	.word	0x20080000
 8002360:	00000400 	.word	0x00000400
 8002364:	20004574 	.word	0x20004574
 8002368:	20008ed8 	.word	0x20008ed8

0800236c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <SystemInit+0x20>)
 8002372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002376:	4a05      	ldr	r2, [pc, #20]	; (800238c <SystemInit+0x20>)
 8002378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800237c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002394:	480d      	ldr	r0, [pc, #52]	; (80023cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002396:	490e      	ldr	r1, [pc, #56]	; (80023d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002398:	4a0e      	ldr	r2, [pc, #56]	; (80023d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800239a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800239c:	e002      	b.n	80023a4 <LoopCopyDataInit>

0800239e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800239e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023a2:	3304      	adds	r3, #4

080023a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a8:	d3f9      	bcc.n	800239e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023aa:	4a0b      	ldr	r2, [pc, #44]	; (80023d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023ac:	4c0b      	ldr	r4, [pc, #44]	; (80023dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80023ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b0:	e001      	b.n	80023b6 <LoopFillZerobss>

080023b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b4:	3204      	adds	r2, #4

080023b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b8:	d3fb      	bcc.n	80023b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023ba:	f7ff ffd7 	bl	800236c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023be:	f008 f83b 	bl	800a438 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023c2:	f7ff f93d 	bl	8001640 <main>
  bx  lr    
 80023c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023c8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80023cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023d0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80023d4:	0800b7a8 	.word	0x0800b7a8
  ldr r2, =_sbss
 80023d8:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 80023dc:	20008ed4 	.word	0x20008ed4

080023e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023e0:	e7fe      	b.n	80023e0 <ADC_IRQHandler>

080023e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e6:	2003      	movs	r0, #3
 80023e8:	f000 ff55 	bl	8003296 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ec:	200f      	movs	r0, #15
 80023ee:	f7ff fe43 	bl	8002078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023f2:	f7ff fbe9 	bl	8001bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_IncTick+0x20>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	461a      	mov	r2, r3
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_IncTick+0x24>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4413      	add	r3, r2
 800240c:	4a04      	ldr	r2, [pc, #16]	; (8002420 <HAL_IncTick+0x24>)
 800240e:	6013      	str	r3, [r2, #0]
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	20000008 	.word	0x20000008
 8002420:	20004578 	.word	0x20004578

08002424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return uwTick;
 8002428:	4b03      	ldr	r3, [pc, #12]	; (8002438 <HAL_GetTick+0x14>)
 800242a:	681b      	ldr	r3, [r3, #0]
}
 800242c:	4618      	mov	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	20004578 	.word	0x20004578

0800243c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002444:	f7ff ffee 	bl	8002424 <HAL_GetTick>
 8002448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002454:	d005      	beq.n	8002462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002456:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <HAL_Delay+0x44>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4413      	add	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002462:	bf00      	nop
 8002464:	f7ff ffde 	bl	8002424 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	429a      	cmp	r2, r3
 8002472:	d8f7      	bhi.n	8002464 <HAL_Delay+0x28>
  {
  }
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000008 	.word	0x20000008

08002484 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e0ed      	b.n	8002672 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3020 	ldrb.w	r3, [r3, #32]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d102      	bne.n	80024a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff fbb8 	bl	8001c18 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0201 	orr.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024b8:	f7ff ffb4 	bl	8002424 <HAL_GetTick>
 80024bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024be:	e012      	b.n	80024e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024c0:	f7ff ffb0 	bl	8002424 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b0a      	cmp	r3, #10
 80024cc:	d90b      	bls.n	80024e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2205      	movs	r2, #5
 80024de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e0c5      	b.n	8002672 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0e5      	beq.n	80024c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0202 	bic.w	r2, r2, #2
 8002502:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002504:	f7ff ff8e 	bl	8002424 <HAL_GetTick>
 8002508:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800250a:	e012      	b.n	8002532 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800250c:	f7ff ff8a 	bl	8002424 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b0a      	cmp	r3, #10
 8002518:	d90b      	bls.n	8002532 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2205      	movs	r2, #5
 800252a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e09f      	b.n	8002672 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1e5      	bne.n	800250c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	7e1b      	ldrb	r3, [r3, #24]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d108      	bne.n	800255a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	e007      	b.n	800256a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002568:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	7e5b      	ldrb	r3, [r3, #25]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d108      	bne.n	8002584 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	e007      	b.n	8002594 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002592:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	7e9b      	ldrb	r3, [r3, #26]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d108      	bne.n	80025ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0220 	orr.w	r2, r2, #32
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	e007      	b.n	80025be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0220 	bic.w	r2, r2, #32
 80025bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	7edb      	ldrb	r3, [r3, #27]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d108      	bne.n	80025d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0210 	bic.w	r2, r2, #16
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	e007      	b.n	80025e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0210 	orr.w	r2, r2, #16
 80025e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	7f1b      	ldrb	r3, [r3, #28]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d108      	bne.n	8002602 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0208 	orr.w	r2, r2, #8
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	e007      	b.n	8002612 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0208 	bic.w	r2, r2, #8
 8002610:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	7f5b      	ldrb	r3, [r3, #29]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d108      	bne.n	800262c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f042 0204 	orr.w	r2, r2, #4
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	e007      	b.n	800263c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0204 	bic.w	r2, r2, #4
 800263a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	ea42 0103 	orr.w	r1, r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	1e5a      	subs	r2, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800267c:	b480      	push	{r7}
 800267e:	b087      	sub	sp, #28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002692:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002694:	7cfb      	ldrb	r3, [r7, #19]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d003      	beq.n	80026a2 <HAL_CAN_ConfigFilter+0x26>
 800269a:	7cfb      	ldrb	r3, [r7, #19]
 800269c:	2b02      	cmp	r3, #2
 800269e:	f040 80c7 	bne.w	8002830 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a69      	ldr	r2, [pc, #420]	; (800284c <HAL_CAN_ConfigFilter+0x1d0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d001      	beq.n	80026b0 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80026ac:	4b68      	ldr	r3, [pc, #416]	; (8002850 <HAL_CAN_ConfigFilter+0x1d4>)
 80026ae:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026b6:	f043 0201 	orr.w	r2, r3, #1
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	4a63      	ldr	r2, [pc, #396]	; (8002850 <HAL_CAN_ConfigFilter+0x1d4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d111      	bne.n	80026ec <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026ce:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	021b      	lsls	r3, r3, #8
 80026e4:	431a      	orrs	r2, r3
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	2201      	movs	r2, #1
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	43db      	mvns	r3, r3
 8002706:	401a      	ands	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d123      	bne.n	800275e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	43db      	mvns	r3, r3
 8002720:	401a      	ands	r2, r3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002738:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	3248      	adds	r2, #72	; 0x48
 800273e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002752:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002754:	6979      	ldr	r1, [r7, #20]
 8002756:	3348      	adds	r3, #72	; 0x48
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	440b      	add	r3, r1
 800275c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d122      	bne.n	80027ac <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	431a      	orrs	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002786:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	3248      	adds	r2, #72	; 0x48
 800278c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027a0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027a2:	6979      	ldr	r1, [r7, #20]
 80027a4:	3348      	adds	r3, #72	; 0x48
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	440b      	add	r3, r1
 80027aa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d109      	bne.n	80027c8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	43db      	mvns	r3, r3
 80027be:	401a      	ands	r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80027c6:	e007      	b.n	80027d8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	431a      	orrs	r2, r3
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d109      	bne.n	80027f4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	43db      	mvns	r3, r3
 80027ea:	401a      	ands	r2, r3
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80027f2:	e007      	b.n	8002804 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	431a      	orrs	r2, r3
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d107      	bne.n	800281c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	431a      	orrs	r2, r3
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002822:	f023 0201 	bic.w	r2, r3, #1
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800282c:	2300      	movs	r3, #0
 800282e:	e006      	b.n	800283e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
  }
}
 800283e:	4618      	mov	r0, r3
 8002840:	371c      	adds	r7, #28
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40003400 	.word	0x40003400
 8002850:	40006400 	.word	0x40006400

08002854 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b01      	cmp	r3, #1
 8002866:	d12e      	bne.n	80028c6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0201 	bic.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002880:	f7ff fdd0 	bl	8002424 <HAL_GetTick>
 8002884:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002886:	e012      	b.n	80028ae <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002888:	f7ff fdcc 	bl	8002424 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b0a      	cmp	r3, #10
 8002894:	d90b      	bls.n	80028ae <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2205      	movs	r2, #5
 80028a6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e012      	b.n	80028d4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1e5      	bne.n	8002888 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	e006      	b.n	80028d4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
  }
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80028dc:	b480      	push	{r7}
 80028de:	b089      	sub	sp, #36	; 0x24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028f0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80028fa:	7ffb      	ldrb	r3, [r7, #31]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d003      	beq.n	8002908 <HAL_CAN_AddTxMessage+0x2c>
 8002900:	7ffb      	ldrb	r3, [r7, #31]
 8002902:	2b02      	cmp	r3, #2
 8002904:	f040 80ad 	bne.w	8002a62 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10a      	bne.n	8002928 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002918:	2b00      	cmp	r3, #0
 800291a:	d105      	bne.n	8002928 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 8095 	beq.w	8002a52 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	0e1b      	lsrs	r3, r3, #24
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002932:	2201      	movs	r2, #1
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	409a      	lsls	r2, r3
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10d      	bne.n	8002960 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800294e:	68f9      	ldr	r1, [r7, #12]
 8002950:	6809      	ldr	r1, [r1, #0]
 8002952:	431a      	orrs	r2, r3
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	3318      	adds	r3, #24
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	440b      	add	r3, r1
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	e00f      	b.n	8002980 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800296a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002970:	68f9      	ldr	r1, [r7, #12]
 8002972:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002974:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	3318      	adds	r3, #24
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	440b      	add	r3, r1
 800297e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6819      	ldr	r1, [r3, #0]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	3318      	adds	r3, #24
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	440b      	add	r3, r1
 8002990:	3304      	adds	r3, #4
 8002992:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	7d1b      	ldrb	r3, [r3, #20]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d111      	bne.n	80029c0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	3318      	adds	r3, #24
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	4413      	add	r3, r2
 80029a8:	3304      	adds	r3, #4
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	6811      	ldr	r1, [r2, #0]
 80029b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	3318      	adds	r3, #24
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	440b      	add	r3, r1
 80029bc:	3304      	adds	r3, #4
 80029be:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3307      	adds	r3, #7
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	061a      	lsls	r2, r3, #24
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3306      	adds	r3, #6
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	041b      	lsls	r3, r3, #16
 80029d0:	431a      	orrs	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3305      	adds	r3, #5
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	021b      	lsls	r3, r3, #8
 80029da:	4313      	orrs	r3, r2
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	3204      	adds	r2, #4
 80029e0:	7812      	ldrb	r2, [r2, #0]
 80029e2:	4610      	mov	r0, r2
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	6811      	ldr	r1, [r2, #0]
 80029e8:	ea43 0200 	orr.w	r2, r3, r0
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	440b      	add	r3, r1
 80029f2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80029f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3303      	adds	r3, #3
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	061a      	lsls	r2, r3, #24
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3302      	adds	r3, #2
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	041b      	lsls	r3, r3, #16
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	4313      	orrs	r3, r2
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	7812      	ldrb	r2, [r2, #0]
 8002a18:	4610      	mov	r0, r2
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	6811      	ldr	r1, [r2, #0]
 8002a1e:	ea43 0200 	orr.w	r2, r3, r0
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	440b      	add	r3, r1
 8002a28:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002a2c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	3318      	adds	r3, #24
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	4413      	add	r3, r2
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	6811      	ldr	r1, [r2, #0]
 8002a40:	f043 0201 	orr.w	r2, r3, #1
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	3318      	adds	r3, #24
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	440b      	add	r3, r1
 8002a4c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	e00e      	b.n	8002a70 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e006      	b.n	8002a70 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
  }
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3724      	adds	r7, #36	; 0x24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a8e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002a90:	7afb      	ldrb	r3, [r7, #11]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d002      	beq.n	8002a9c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002a96:	7afb      	ldrb	r3, [r7, #11]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d11d      	bne.n	8002ad8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	3301      	adds	r3, #1
 8002aae:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b087      	sub	sp, #28
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
 8002af2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002afa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002afc:	7dfb      	ldrb	r3, [r7, #23]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d003      	beq.n	8002b0a <HAL_CAN_GetRxMessage+0x24>
 8002b02:	7dfb      	ldrb	r3, [r7, #23]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	f040 80f3 	bne.w	8002cf0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10e      	bne.n	8002b2e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d116      	bne.n	8002b4c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e0e7      	b.n	8002cfe <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d107      	bne.n	8002b4c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0d8      	b.n	8002cfe <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	331b      	adds	r3, #27
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	4413      	add	r3, r2
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0204 	and.w	r2, r3, #4
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10c      	bne.n	8002b84 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	331b      	adds	r3, #27
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	4413      	add	r3, r2
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	0d5b      	lsrs	r3, r3, #21
 8002b7a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	e00b      	b.n	8002b9c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	331b      	adds	r3, #27
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	4413      	add	r3, r2
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	08db      	lsrs	r3, r3, #3
 8002b94:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	331b      	adds	r3, #27
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	4413      	add	r3, r2
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0202 	and.w	r2, r3, #2
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	331b      	adds	r3, #27
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 020f 	and.w	r2, r3, #15
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	331b      	adds	r3, #27
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	0a1b      	lsrs	r3, r3, #8
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	331b      	adds	r3, #27
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	4413      	add	r3, r2
 8002bee:	3304      	adds	r3, #4
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	0c1b      	lsrs	r3, r3, #16
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	4413      	add	r3, r2
 8002c04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	0a1a      	lsrs	r2, r3, #8
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	3301      	adds	r3, #1
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	0c1a      	lsrs	r2, r3, #16
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	3302      	adds	r3, #2
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	0e1a      	lsrs	r2, r3, #24
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	3303      	adds	r3, #3
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	3304      	adds	r3, #4
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	0a1a      	lsrs	r2, r3, #8
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	3305      	adds	r3, #5
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	0c1a      	lsrs	r2, r3, #16
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	3306      	adds	r3, #6
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	0e1a      	lsrs	r2, r3, #24
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	3307      	adds	r3, #7
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d108      	bne.n	8002cdc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f042 0220 	orr.w	r2, r2, #32
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	e007      	b.n	8002cec <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	691a      	ldr	r2, [r3, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0220 	orr.w	r2, r2, #32
 8002cea:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	e006      	b.n	8002cfe <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
  }
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	371c      	adds	r7, #28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b085      	sub	sp, #20
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d1a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d002      	beq.n	8002d28 <HAL_CAN_ActivateNotification+0x1e>
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d109      	bne.n	8002d3c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6959      	ldr	r1, [r3, #20]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	e006      	b.n	8002d4a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
  }
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b08a      	sub	sp, #40	; 0x28
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d07c      	beq.n	8002e96 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d023      	beq.n	8002dee <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2201      	movs	r2, #1
 8002dac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f7fe fb63 	bl	8001484 <HAL_CAN_TxMailbox0CompleteCallback>
 8002dbe:	e016      	b.n	8002dee <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d004      	beq.n	8002dd4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd2:	e00c      	b.n	8002dee <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d004      	beq.n	8002de8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
 8002de6:	e002      	b.n	8002dee <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7fe fb55 	bl	8001498 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d024      	beq.n	8002e42 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7fe fb4d 	bl	80014ac <HAL_CAN_TxMailbox1CompleteCallback>
 8002e12:	e016      	b.n	8002e42 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d004      	beq.n	8002e28 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
 8002e26:	e00c      	b.n	8002e42 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d004      	beq.n	8002e3c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
 8002e3a:	e002      	b.n	8002e42 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7fe fb3f 	bl	80014c0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d024      	beq.n	8002e96 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e54:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7fe fb37 	bl	80014d4 <HAL_CAN_TxMailbox2CompleteCallback>
 8002e66:	e016      	b.n	8002e96 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d004      	beq.n	8002e7c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7a:	e00c      	b.n	8002e96 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d004      	beq.n	8002e90 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8e:	e002      	b.n	8002e96 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7fe fb29 	bl	80014e8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00c      	beq.n	8002eba <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f003 0310 	and.w	r3, r3, #16
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2210      	movs	r2, #16
 8002eb8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00b      	beq.n	8002edc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d006      	beq.n	8002edc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2208      	movs	r2, #8
 8002ed4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f8f4 	bl	80030c4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d009      	beq.n	8002efa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7fe fb01 	bl	80014fc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00c      	beq.n	8002f1e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d007      	beq.n	8002f1e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2210      	movs	r2, #16
 8002f1c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	f003 0320 	and.w	r3, r3, #32
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00b      	beq.n	8002f40 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d006      	beq.n	8002f40 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2208      	movs	r2, #8
 8002f38:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f8d6 	bl	80030ec <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d009      	beq.n	8002f5e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f003 0303 	and.w	r3, r3, #3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f8bd 	bl	80030d8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00b      	beq.n	8002f80 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d006      	beq.n	8002f80 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2210      	movs	r2, #16
 8002f78:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f8c0 	bl	8003100 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002f80:	6a3b      	ldr	r3, [r7, #32]
 8002f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00b      	beq.n	8002fa2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d006      	beq.n	8002fa2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2208      	movs	r2, #8
 8002f9a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f8b9 	bl	8003114 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d07b      	beq.n	80030a4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d072      	beq.n	800309c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d008      	beq.n	8002fee <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	f043 0302 	orr.w	r3, r3, #2
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	f043 0304 	orr.w	r3, r3, #4
 8003008:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003010:	2b00      	cmp	r3, #0
 8003012:	d043      	beq.n	800309c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800301a:	2b00      	cmp	r3, #0
 800301c:	d03e      	beq.n	800309c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003024:	2b60      	cmp	r3, #96	; 0x60
 8003026:	d02b      	beq.n	8003080 <HAL_CAN_IRQHandler+0x32a>
 8003028:	2b60      	cmp	r3, #96	; 0x60
 800302a:	d82e      	bhi.n	800308a <HAL_CAN_IRQHandler+0x334>
 800302c:	2b50      	cmp	r3, #80	; 0x50
 800302e:	d022      	beq.n	8003076 <HAL_CAN_IRQHandler+0x320>
 8003030:	2b50      	cmp	r3, #80	; 0x50
 8003032:	d82a      	bhi.n	800308a <HAL_CAN_IRQHandler+0x334>
 8003034:	2b40      	cmp	r3, #64	; 0x40
 8003036:	d019      	beq.n	800306c <HAL_CAN_IRQHandler+0x316>
 8003038:	2b40      	cmp	r3, #64	; 0x40
 800303a:	d826      	bhi.n	800308a <HAL_CAN_IRQHandler+0x334>
 800303c:	2b30      	cmp	r3, #48	; 0x30
 800303e:	d010      	beq.n	8003062 <HAL_CAN_IRQHandler+0x30c>
 8003040:	2b30      	cmp	r3, #48	; 0x30
 8003042:	d822      	bhi.n	800308a <HAL_CAN_IRQHandler+0x334>
 8003044:	2b10      	cmp	r3, #16
 8003046:	d002      	beq.n	800304e <HAL_CAN_IRQHandler+0x2f8>
 8003048:	2b20      	cmp	r3, #32
 800304a:	d005      	beq.n	8003058 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800304c:	e01d      	b.n	800308a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	f043 0308 	orr.w	r3, r3, #8
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003056:	e019      	b.n	800308c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	f043 0310 	orr.w	r3, r3, #16
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003060:	e014      	b.n	800308c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	f043 0320 	orr.w	r3, r3, #32
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800306a:	e00f      	b.n	800308c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003072:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003074:	e00a      	b.n	800308c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800307e:	e005      	b.n	800308c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003088:	e000      	b.n	800308c <HAL_CAN_IRQHandler+0x336>
            break;
 800308a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800309a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2204      	movs	r2, #4
 80030a2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d008      	beq.n	80030bc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f836 	bl	8003128 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80030bc:	bf00      	nop
 80030be:	3728      	adds	r7, #40	; 0x28
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800314c:	4b0b      	ldr	r3, [pc, #44]	; (800317c <__NVIC_SetPriorityGrouping+0x40>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003158:	4013      	ands	r3, r2
 800315a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003164:	4b06      	ldr	r3, [pc, #24]	; (8003180 <__NVIC_SetPriorityGrouping+0x44>)
 8003166:	4313      	orrs	r3, r2
 8003168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800316a:	4a04      	ldr	r2, [pc, #16]	; (800317c <__NVIC_SetPriorityGrouping+0x40>)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	60d3      	str	r3, [r2, #12]
}
 8003170:	bf00      	nop
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	e000ed00 	.word	0xe000ed00
 8003180:	05fa0000 	.word	0x05fa0000

08003184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003188:	4b04      	ldr	r3, [pc, #16]	; (800319c <__NVIC_GetPriorityGrouping+0x18>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	0a1b      	lsrs	r3, r3, #8
 800318e:	f003 0307 	and.w	r3, r3, #7
}
 8003192:	4618      	mov	r0, r3
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	e000ed00 	.word	0xe000ed00

080031a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	db0b      	blt.n	80031ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	f003 021f 	and.w	r2, r3, #31
 80031b8:	4907      	ldr	r1, [pc, #28]	; (80031d8 <__NVIC_EnableIRQ+0x38>)
 80031ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031be:	095b      	lsrs	r3, r3, #5
 80031c0:	2001      	movs	r0, #1
 80031c2:	fa00 f202 	lsl.w	r2, r0, r2
 80031c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	e000e100 	.word	0xe000e100

080031dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	6039      	str	r1, [r7, #0]
 80031e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	db0a      	blt.n	8003206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	490c      	ldr	r1, [pc, #48]	; (8003228 <__NVIC_SetPriority+0x4c>)
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	0112      	lsls	r2, r2, #4
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	440b      	add	r3, r1
 8003200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003204:	e00a      	b.n	800321c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	b2da      	uxtb	r2, r3
 800320a:	4908      	ldr	r1, [pc, #32]	; (800322c <__NVIC_SetPriority+0x50>)
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	3b04      	subs	r3, #4
 8003214:	0112      	lsls	r2, r2, #4
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	440b      	add	r3, r1
 800321a:	761a      	strb	r2, [r3, #24]
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	e000e100 	.word	0xe000e100
 800322c:	e000ed00 	.word	0xe000ed00

08003230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003230:	b480      	push	{r7}
 8003232:	b089      	sub	sp, #36	; 0x24
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f1c3 0307 	rsb	r3, r3, #7
 800324a:	2b04      	cmp	r3, #4
 800324c:	bf28      	it	cs
 800324e:	2304      	movcs	r3, #4
 8003250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	3304      	adds	r3, #4
 8003256:	2b06      	cmp	r3, #6
 8003258:	d902      	bls.n	8003260 <NVIC_EncodePriority+0x30>
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	3b03      	subs	r3, #3
 800325e:	e000      	b.n	8003262 <NVIC_EncodePriority+0x32>
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003264:	f04f 32ff 	mov.w	r2, #4294967295
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43da      	mvns	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	401a      	ands	r2, r3
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003278:	f04f 31ff 	mov.w	r1, #4294967295
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	fa01 f303 	lsl.w	r3, r1, r3
 8003282:	43d9      	mvns	r1, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003288:	4313      	orrs	r3, r2
         );
}
 800328a:	4618      	mov	r0, r3
 800328c:	3724      	adds	r7, #36	; 0x24
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff ff4c 	bl	800313c <__NVIC_SetPriorityGrouping>
}
 80032a4:	bf00      	nop
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
 80032b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032be:	f7ff ff61 	bl	8003184 <__NVIC_GetPriorityGrouping>
 80032c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	68b9      	ldr	r1, [r7, #8]
 80032c8:	6978      	ldr	r0, [r7, #20]
 80032ca:	f7ff ffb1 	bl	8003230 <NVIC_EncodePriority>
 80032ce:	4602      	mov	r2, r0
 80032d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032d4:	4611      	mov	r1, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff ff80 	bl	80031dc <__NVIC_SetPriority>
}
 80032dc:	bf00      	nop
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff ff54 	bl	80031a0 <__NVIC_EnableIRQ>
}
 80032f8:	bf00      	nop
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800330c:	f7ff f88a 	bl	8002424 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e099      	b.n	8003450 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0201 	bic.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800333c:	e00f      	b.n	800335e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800333e:	f7ff f871 	bl	8002424 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b05      	cmp	r3, #5
 800334a:	d908      	bls.n	800335e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2220      	movs	r2, #32
 8003350:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2203      	movs	r2, #3
 8003356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e078      	b.n	8003450 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1e8      	bne.n	800333e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	4b38      	ldr	r3, [pc, #224]	; (8003458 <HAL_DMA_Init+0x158>)
 8003378:	4013      	ands	r3, r2
 800337a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800338a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003396:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d107      	bne.n	80033c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c0:	4313      	orrs	r3, r2
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f023 0307 	bic.w	r3, r3, #7
 80033de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d117      	bne.n	8003422 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00e      	beq.n	8003422 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 fa7b 	bl	8003900 <DMA_CheckFifoParam>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d008      	beq.n	8003422 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2240      	movs	r2, #64	; 0x40
 8003414:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800341e:	2301      	movs	r3, #1
 8003420:	e016      	b.n	8003450 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 fa32 	bl	8003894 <DMA_CalcBaseAndBitshift>
 8003430:	4603      	mov	r3, r0
 8003432:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003438:	223f      	movs	r2, #63	; 0x3f
 800343a:	409a      	lsls	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	e010803f 	.word	0xe010803f

0800345c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003468:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800346a:	f7fe ffdb 	bl	8002424 <HAL_GetTick>
 800346e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d008      	beq.n	800348e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2280      	movs	r2, #128	; 0x80
 8003480:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e052      	b.n	8003534 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0216 	bic.w	r2, r2, #22
 800349c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695a      	ldr	r2, [r3, #20]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d103      	bne.n	80034be <HAL_DMA_Abort+0x62>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d007      	beq.n	80034ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0208 	bic.w	r2, r2, #8
 80034cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0201 	bic.w	r2, r2, #1
 80034dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034de:	e013      	b.n	8003508 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034e0:	f7fe ffa0 	bl	8002424 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b05      	cmp	r3, #5
 80034ec:	d90c      	bls.n	8003508 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2220      	movs	r2, #32
 80034f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2203      	movs	r2, #3
 80034f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e015      	b.n	8003534 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1e4      	bne.n	80034e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351a:	223f      	movs	r2, #63	; 0x3f
 800351c:	409a      	lsls	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d004      	beq.n	800355a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2280      	movs	r2, #128	; 0x80
 8003554:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e00c      	b.n	8003574 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2205      	movs	r2, #5
 800355e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0201 	bic.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800358c:	4b8e      	ldr	r3, [pc, #568]	; (80037c8 <HAL_DMA_IRQHandler+0x248>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a8e      	ldr	r2, [pc, #568]	; (80037cc <HAL_DMA_IRQHandler+0x24c>)
 8003592:	fba2 2303 	umull	r2, r3, r2, r3
 8003596:	0a9b      	lsrs	r3, r3, #10
 8003598:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035aa:	2208      	movs	r2, #8
 80035ac:	409a      	lsls	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d01a      	beq.n	80035ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d013      	beq.n	80035ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0204 	bic.w	r2, r2, #4
 80035d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d8:	2208      	movs	r2, #8
 80035da:	409a      	lsls	r2, r3
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e4:	f043 0201 	orr.w	r2, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f0:	2201      	movs	r2, #1
 80035f2:	409a      	lsls	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d012      	beq.n	8003622 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00b      	beq.n	8003622 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360e:	2201      	movs	r2, #1
 8003610:	409a      	lsls	r2, r3
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361a:	f043 0202 	orr.w	r2, r3, #2
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003626:	2204      	movs	r2, #4
 8003628:	409a      	lsls	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4013      	ands	r3, r2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d012      	beq.n	8003658 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00b      	beq.n	8003658 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003644:	2204      	movs	r2, #4
 8003646:	409a      	lsls	r2, r3
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003650:	f043 0204 	orr.w	r2, r3, #4
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365c:	2210      	movs	r2, #16
 800365e:	409a      	lsls	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4013      	ands	r3, r2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d043      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b00      	cmp	r3, #0
 8003674:	d03c      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367a:	2210      	movs	r2, #16
 800367c:	409a      	lsls	r2, r3
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d018      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d108      	bne.n	80036b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d024      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	4798      	blx	r3
 80036ae:	e01f      	b.n	80036f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d01b      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	4798      	blx	r3
 80036c0:	e016      	b.n	80036f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d107      	bne.n	80036e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0208 	bic.w	r2, r2, #8
 80036de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f4:	2220      	movs	r2, #32
 80036f6:	409a      	lsls	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 808f 	beq.w	8003820 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0310 	and.w	r3, r3, #16
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 8087 	beq.w	8003820 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003716:	2220      	movs	r2, #32
 8003718:	409a      	lsls	r2, r3
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b05      	cmp	r3, #5
 8003728:	d136      	bne.n	8003798 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0216 	bic.w	r2, r2, #22
 8003738:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695a      	ldr	r2, [r3, #20]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003748:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	2b00      	cmp	r3, #0
 8003750:	d103      	bne.n	800375a <HAL_DMA_IRQHandler+0x1da>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003756:	2b00      	cmp	r3, #0
 8003758:	d007      	beq.n	800376a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0208 	bic.w	r2, r2, #8
 8003768:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376e:	223f      	movs	r2, #63	; 0x3f
 8003770:	409a      	lsls	r2, r3
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800378a:	2b00      	cmp	r3, #0
 800378c:	d07e      	beq.n	800388c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	4798      	blx	r3
        }
        return;
 8003796:	e079      	b.n	800388c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d01d      	beq.n	80037e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10d      	bne.n	80037d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d031      	beq.n	8003820 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	4798      	blx	r3
 80037c4:	e02c      	b.n	8003820 <HAL_DMA_IRQHandler+0x2a0>
 80037c6:	bf00      	nop
 80037c8:	20000000 	.word	0x20000000
 80037cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d023      	beq.n	8003820 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	4798      	blx	r3
 80037e0:	e01e      	b.n	8003820 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10f      	bne.n	8003810 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0210 	bic.w	r2, r2, #16
 80037fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003824:	2b00      	cmp	r3, #0
 8003826:	d032      	beq.n	800388e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d022      	beq.n	800387a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2205      	movs	r2, #5
 8003838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0201 	bic.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	3301      	adds	r3, #1
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	429a      	cmp	r2, r3
 8003856:	d307      	bcc.n	8003868 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f2      	bne.n	800384c <HAL_DMA_IRQHandler+0x2cc>
 8003866:	e000      	b.n	800386a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003868:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387e:	2b00      	cmp	r3, #0
 8003880:	d005      	beq.n	800388e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	4798      	blx	r3
 800388a:	e000      	b.n	800388e <HAL_DMA_IRQHandler+0x30e>
        return;
 800388c:	bf00      	nop
    }
  }
}
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	3b10      	subs	r3, #16
 80038a4:	4a13      	ldr	r2, [pc, #76]	; (80038f4 <DMA_CalcBaseAndBitshift+0x60>)
 80038a6:	fba2 2303 	umull	r2, r3, r2, r3
 80038aa:	091b      	lsrs	r3, r3, #4
 80038ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038ae:	4a12      	ldr	r2, [pc, #72]	; (80038f8 <DMA_CalcBaseAndBitshift+0x64>)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4413      	add	r3, r2
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b03      	cmp	r3, #3
 80038c0:	d908      	bls.n	80038d4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	461a      	mov	r2, r3
 80038c8:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <DMA_CalcBaseAndBitshift+0x68>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	1d1a      	adds	r2, r3, #4
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	659a      	str	r2, [r3, #88]	; 0x58
 80038d2:	e006      	b.n	80038e2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	461a      	mov	r2, r3
 80038da:	4b08      	ldr	r3, [pc, #32]	; (80038fc <DMA_CalcBaseAndBitshift+0x68>)
 80038dc:	4013      	ands	r3, r2
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	aaaaaaab 	.word	0xaaaaaaab
 80038f8:	0800b6f8 	.word	0x0800b6f8
 80038fc:	fffffc00 	.word	0xfffffc00

08003900 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003910:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d11f      	bne.n	800395a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b03      	cmp	r3, #3
 800391e:	d856      	bhi.n	80039ce <DMA_CheckFifoParam+0xce>
 8003920:	a201      	add	r2, pc, #4	; (adr r2, 8003928 <DMA_CheckFifoParam+0x28>)
 8003922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003926:	bf00      	nop
 8003928:	08003939 	.word	0x08003939
 800392c:	0800394b 	.word	0x0800394b
 8003930:	08003939 	.word	0x08003939
 8003934:	080039cf 	.word	0x080039cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d046      	beq.n	80039d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003948:	e043      	b.n	80039d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003952:	d140      	bne.n	80039d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003958:	e03d      	b.n	80039d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003962:	d121      	bne.n	80039a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b03      	cmp	r3, #3
 8003968:	d837      	bhi.n	80039da <DMA_CheckFifoParam+0xda>
 800396a:	a201      	add	r2, pc, #4	; (adr r2, 8003970 <DMA_CheckFifoParam+0x70>)
 800396c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003970:	08003981 	.word	0x08003981
 8003974:	08003987 	.word	0x08003987
 8003978:	08003981 	.word	0x08003981
 800397c:	08003999 	.word	0x08003999
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	73fb      	strb	r3, [r7, #15]
      break;
 8003984:	e030      	b.n	80039e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d025      	beq.n	80039de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003996:	e022      	b.n	80039de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039a0:	d11f      	bne.n	80039e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039a6:	e01c      	b.n	80039e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d903      	bls.n	80039b6 <DMA_CheckFifoParam+0xb6>
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b03      	cmp	r3, #3
 80039b2:	d003      	beq.n	80039bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039b4:	e018      	b.n	80039e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	73fb      	strb	r3, [r7, #15]
      break;
 80039ba:	e015      	b.n	80039e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00e      	beq.n	80039e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	73fb      	strb	r3, [r7, #15]
      break;
 80039cc:	e00b      	b.n	80039e6 <DMA_CheckFifoParam+0xe6>
      break;
 80039ce:	bf00      	nop
 80039d0:	e00a      	b.n	80039e8 <DMA_CheckFifoParam+0xe8>
      break;
 80039d2:	bf00      	nop
 80039d4:	e008      	b.n	80039e8 <DMA_CheckFifoParam+0xe8>
      break;
 80039d6:	bf00      	nop
 80039d8:	e006      	b.n	80039e8 <DMA_CheckFifoParam+0xe8>
      break;
 80039da:	bf00      	nop
 80039dc:	e004      	b.n	80039e8 <DMA_CheckFifoParam+0xe8>
      break;
 80039de:	bf00      	nop
 80039e0:	e002      	b.n	80039e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80039e2:	bf00      	nop
 80039e4:	e000      	b.n	80039e8 <DMA_CheckFifoParam+0xe8>
      break;
 80039e6:	bf00      	nop
    }
  } 
  
  return status; 
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop

080039f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e06a      	b.n	8003ae0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d106      	bne.n	8003a22 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2223      	movs	r2, #35	; 0x23
 8003a18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7fe f957 	bl	8001cd0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a22:	4b31      	ldr	r3, [pc, #196]	; (8003ae8 <HAL_ETH_Init+0xf0>)
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	4a30      	ldr	r2, [pc, #192]	; (8003ae8 <HAL_ETH_Init+0xf0>)
 8003a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a2e:	4b2e      	ldr	r3, [pc, #184]	; (8003ae8 <HAL_ETH_Init+0xf0>)
 8003a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a36:	60bb      	str	r3, [r7, #8]
 8003a38:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003a3a:	4b2c      	ldr	r3, [pc, #176]	; (8003aec <HAL_ETH_Init+0xf4>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	4a2b      	ldr	r2, [pc, #172]	; (8003aec <HAL_ETH_Init+0xf4>)
 8003a40:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a44:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003a46:	4b29      	ldr	r3, [pc, #164]	; (8003aec <HAL_ETH_Init+0xf4>)
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	4927      	ldr	r1, [pc, #156]	; (8003aec <HAL_ETH_Init+0xf4>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003a54:	4b25      	ldr	r3, [pc, #148]	; (8003aec <HAL_ETH_Init+0xf4>)
 8003a56:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6812      	ldr	r2, [r2, #0]
 8003a66:	f043 0301 	orr.w	r3, r3, #1
 8003a6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a6e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a70:	f7fe fcd8 	bl	8002424 <HAL_GetTick>
 8003a74:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003a76:	e011      	b.n	8003a9c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003a78:	f7fe fcd4 	bl	8002424 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003a86:	d909      	bls.n	8003a9c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	22e0      	movs	r2, #224	; 0xe0
 8003a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e021      	b.n	8003ae0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1e4      	bne.n	8003a78 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fa4c 	bl	8003f4c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 faf3 	bl	80040a0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fb49 	bl	8004152 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 fab1 	bl	8004030 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2210      	movs	r2, #16
 8003ada:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	40013800 	.word	0x40013800

08003af0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b06:	2b40      	cmp	r3, #64	; 0x40
 8003b08:	d112      	bne.n	8003b30 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b18:	2b40      	cmp	r3, #64	; 0x40
 8003b1a:	d109      	bne.n	8003b30 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b24:	461a      	mov	r2, r3
 8003b26:	4b50      	ldr	r3, [pc, #320]	; (8003c68 <HAL_ETH_IRQHandler+0x178>)
 8003b28:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f8ac 	bl	8003c88 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d113      	bne.n	8003b6a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d10a      	bne.n	8003b6a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003b62:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f885 	bl	8003c74 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b7c:	d14c      	bne.n	8003c18 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b90:	d142      	bne.n	8003c18 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b98:	f043 0208 	orr.w	r2, r3, #8
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb4:	d11a      	bne.n	8003bec <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bbe:	695a      	ldr	r2, [r3, #20]
 8003bc0:	4b2a      	ldr	r3, [pc, #168]	; (8003c6c <HAL_ETH_IRQHandler+0x17c>)
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8003bdc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003be0:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	22e0      	movs	r2, #224	; 0xe0
 8003be6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003bea:	e012      	b.n	8003c12 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bf4:	695a      	ldr	r2, [r3, #20]
 8003bf6:	f248 6380 	movw	r3, #34432	; 0x8680
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	f248 6380 	movw	r3, #34432	; 0x8680
 8003c10:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f842 	bl	8003c9c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d10e      	bne.n	8003c44 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f83a 	bl	8003cb0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8003c44:	4b0a      	ldr	r3, [pc, #40]	; (8003c70 <HAL_ETH_IRQHandler+0x180>)
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d006      	beq.n	8003c5e <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003c50:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <HAL_ETH_IRQHandler+0x180>)
 8003c52:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003c56:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f833 	bl	8003cc4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8003c5e:	bf00      	nop
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	00010040 	.word	0x00010040
 8003c6c:	007e2000 	.word	0x007e2000
 8003c70:	40013c00 	.word	0x40013c00

08003c74 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	4b51      	ldr	r3, [pc, #324]	; (8003e34 <ETH_SetMACConfig+0x15c>)
 8003cee:	4013      	ands	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	7c1b      	ldrb	r3, [r3, #16]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d102      	bne.n	8003d00 <ETH_SetMACConfig+0x28>
 8003cfa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003cfe:	e000      	b.n	8003d02 <ETH_SetMACConfig+0x2a>
 8003d00:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	7c5b      	ldrb	r3, [r3, #17]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d102      	bne.n	8003d10 <ETH_SetMACConfig+0x38>
 8003d0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d0e:	e000      	b.n	8003d12 <ETH_SetMACConfig+0x3a>
 8003d10:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003d12:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003d18:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	7fdb      	ldrb	r3, [r3, #31]
 8003d1e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003d20:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003d26:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	7f92      	ldrb	r2, [r2, #30]
 8003d2c:	2a00      	cmp	r2, #0
 8003d2e:	d102      	bne.n	8003d36 <ETH_SetMACConfig+0x5e>
 8003d30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d34:	e000      	b.n	8003d38 <ETH_SetMACConfig+0x60>
 8003d36:	2200      	movs	r2, #0
                        macconf->Speed |
 8003d38:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	7f1b      	ldrb	r3, [r3, #28]
 8003d3e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003d40:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003d46:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	791b      	ldrb	r3, [r3, #4]
 8003d4c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003d4e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003d56:	2a00      	cmp	r2, #0
 8003d58:	d102      	bne.n	8003d60 <ETH_SetMACConfig+0x88>
 8003d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d5e:	e000      	b.n	8003d62 <ETH_SetMACConfig+0x8a>
 8003d60:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003d62:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	7bdb      	ldrb	r3, [r3, #15]
 8003d68:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003d6a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003d70:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d78:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d92:	2001      	movs	r0, #1
 8003d94:	f7fe fb52 	bl	800243c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003dae:	4013      	ands	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003dbe:	2a00      	cmp	r2, #0
 8003dc0:	d101      	bne.n	8003dc6 <ETH_SetMACConfig+0xee>
 8003dc2:	2280      	movs	r2, #128	; 0x80
 8003dc4:	e000      	b.n	8003dc8 <ETH_SetMACConfig+0xf0>
 8003dc6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003dc8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003dce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003dd6:	2a01      	cmp	r2, #1
 8003dd8:	d101      	bne.n	8003dde <ETH_SetMACConfig+0x106>
 8003dda:	2208      	movs	r2, #8
 8003ddc:	e000      	b.n	8003de0 <ETH_SetMACConfig+0x108>
 8003dde:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003de0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003de8:	2a01      	cmp	r2, #1
 8003dea:	d101      	bne.n	8003df0 <ETH_SetMACConfig+0x118>
 8003dec:	2204      	movs	r2, #4
 8003dee:	e000      	b.n	8003df2 <ETH_SetMACConfig+0x11a>
 8003df0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003df2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003dfa:	2a01      	cmp	r2, #1
 8003dfc:	d101      	bne.n	8003e02 <ETH_SetMACConfig+0x12a>
 8003dfe:	2202      	movs	r2, #2
 8003e00:	e000      	b.n	8003e04 <ETH_SetMACConfig+0x12c>
 8003e02:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003e04:	4313      	orrs	r3, r2
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e1c:	2001      	movs	r0, #1
 8003e1e:	f7fe fb0d 	bl	800243c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	619a      	str	r2, [r3, #24]
}
 8003e2a:	bf00      	nop
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	ff20810f 	.word	0xff20810f

08003e38 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	4b3d      	ldr	r3, [pc, #244]	; (8003f48 <ETH_SetDMAConfig+0x110>)
 8003e52:	4013      	ands	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	7b1b      	ldrb	r3, [r3, #12]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d102      	bne.n	8003e64 <ETH_SetDMAConfig+0x2c>
 8003e5e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003e62:	e000      	b.n	8003e66 <ETH_SetDMAConfig+0x2e>
 8003e64:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	7b5b      	ldrb	r3, [r3, #13]
 8003e6a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003e6c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	7f52      	ldrb	r2, [r2, #29]
 8003e72:	2a00      	cmp	r2, #0
 8003e74:	d102      	bne.n	8003e7c <ETH_SetDMAConfig+0x44>
 8003e76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e7a:	e000      	b.n	8003e7e <ETH_SetDMAConfig+0x46>
 8003e7c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003e7e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	7b9b      	ldrb	r3, [r3, #14]
 8003e84:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003e86:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003e8c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	7f1b      	ldrb	r3, [r3, #28]
 8003e92:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003e94:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	7f9b      	ldrb	r3, [r3, #30]
 8003e9a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003e9c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003ea2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003eaa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003eac:	4313      	orrs	r3, r2
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ece:	2001      	movs	r0, #1
 8003ed0:	f7fe fab4 	bl	800243c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003edc:	461a      	mov	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	791b      	ldrb	r3, [r3, #4]
 8003ee6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003eec:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003ef2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003ef8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f00:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003f02:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f08:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003f0a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003f10:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6812      	ldr	r2, [r2, #0]
 8003f16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f1e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f2c:	2001      	movs	r0, #1
 8003f2e:	f7fe fa85 	bl	800243c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6013      	str	r3, [r2, #0]
}
 8003f40:	bf00      	nop
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	f8de3f23 	.word	0xf8de3f23

08003f4c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b0a6      	sub	sp, #152	; 0x98
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003f54:	2301      	movs	r3, #1
 8003f56:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003f60:	2300      	movs	r3, #0
 8003f62:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003f64:	2300      	movs	r3, #0
 8003f66:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003f70:	2300      	movs	r3, #0
 8003f72:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003f76:	2301      	movs	r3, #1
 8003f78:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003f82:	2300      	movs	r3, #0
 8003f84:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003f96:	2300      	movs	r3, #0
 8003f98:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003fae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003fb2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003fb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003fc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7ff fe86 	bl	8003cd8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003ffc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004000:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004002:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004006:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004008:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800400c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800400e:	2301      	movs	r3, #1
 8004010:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004014:	2300      	movs	r3, #0
 8004016:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004018:	2300      	movs	r3, #0
 800401a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800401c:	f107 0308 	add.w	r3, r7, #8
 8004020:	4619      	mov	r1, r3
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff ff08 	bl	8003e38 <ETH_SetDMAConfig>
}
 8004028:	bf00      	nop
 800402a:	3798      	adds	r7, #152	; 0x98
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3305      	adds	r3, #5
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	021b      	lsls	r3, r3, #8
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	3204      	adds	r2, #4
 8004048:	7812      	ldrb	r2, [r2, #0]
 800404a:	4313      	orrs	r3, r2
 800404c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	4b11      	ldr	r3, [pc, #68]	; (8004098 <ETH_MACAddressConfig+0x68>)
 8004052:	4413      	add	r3, r2
 8004054:	461a      	mov	r2, r3
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3303      	adds	r3, #3
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	061a      	lsls	r2, r3, #24
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3302      	adds	r3, #2
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	041b      	lsls	r3, r3, #16
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3301      	adds	r3, #1
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	4313      	orrs	r3, r2
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	7812      	ldrb	r2, [r2, #0]
 800407a:	4313      	orrs	r3, r2
 800407c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	4b06      	ldr	r3, [pc, #24]	; (800409c <ETH_MACAddressConfig+0x6c>)
 8004082:	4413      	add	r3, r2
 8004084:	461a      	mov	r2, r3
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	6013      	str	r3, [r2, #0]
}
 800408a:	bf00      	nop
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40028040 	.word	0x40028040
 800409c:	40028044 	.word	0x40028044

080040a0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	e03e      	b.n	800412c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68d9      	ldr	r1, [r3, #12]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	4613      	mov	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	440b      	add	r3, r1
 80040be:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2200      	movs	r2, #0
 80040ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2200      	movs	r2, #0
 80040d0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2200      	movs	r2, #0
 80040d6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	3206      	adds	r2, #6
 80040e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d80c      	bhi.n	8004110 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68d9      	ldr	r1, [r3, #12]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	1c5a      	adds	r2, r3, #1
 80040fe:	4613      	mov	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4413      	add	r3, r2
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	440b      	add	r3, r1
 8004108:	461a      	mov	r2, r3
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	60da      	str	r2, [r3, #12]
 800410e:	e004      	b.n	800411a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	461a      	mov	r2, r3
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	3301      	adds	r3, #1
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b03      	cmp	r3, #3
 8004130:	d9bd      	bls.n	80040ae <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68da      	ldr	r2, [r3, #12]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004144:	611a      	str	r2, [r3, #16]
}
 8004146:	bf00      	nop
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004152:	b480      	push	{r7}
 8004154:	b085      	sub	sp, #20
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	e046      	b.n	80041ee <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6919      	ldr	r1, [r3, #16]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4613      	mov	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4413      	add	r3, r2
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	440b      	add	r3, r1
 8004170:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2200      	movs	r2, #0
 800417c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2200      	movs	r2, #0
 8004182:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2200      	movs	r2, #0
 8004188:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2200      	movs	r2, #0
 800418e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	2200      	movs	r2, #0
 8004194:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800419c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80041a4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80041b2:	68b9      	ldr	r1, [r7, #8]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	3212      	adds	r2, #18
 80041ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d80c      	bhi.n	80041de <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6919      	ldr	r1, [r3, #16]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	4613      	mov	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	440b      	add	r3, r1
 80041d6:	461a      	mov	r2, r3
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	60da      	str	r2, [r3, #12]
 80041dc:	e004      	b.n	80041e8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	461a      	mov	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	3301      	adds	r3, #1
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b03      	cmp	r3, #3
 80041f2:	d9b5      	bls.n	8004160 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800421e:	60da      	str	r2, [r3, #12]
}
 8004220:	bf00      	nop
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800422c:	b480      	push	{r7}
 800422e:	b089      	sub	sp, #36	; 0x24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004236:	2300      	movs	r3, #0
 8004238:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800423a:	2300      	movs	r3, #0
 800423c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800423e:	2300      	movs	r3, #0
 8004240:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004242:	2300      	movs	r3, #0
 8004244:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004246:	2300      	movs	r3, #0
 8004248:	61fb      	str	r3, [r7, #28]
 800424a:	e175      	b.n	8004538 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800424c:	2201      	movs	r2, #1
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	4013      	ands	r3, r2
 800425e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	429a      	cmp	r2, r3
 8004266:	f040 8164 	bne.w	8004532 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	2b01      	cmp	r3, #1
 8004274:	d005      	beq.n	8004282 <HAL_GPIO_Init+0x56>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d130      	bne.n	80042e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	2203      	movs	r2, #3
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	43db      	mvns	r3, r3
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4013      	ands	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042b8:	2201      	movs	r2, #1
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	43db      	mvns	r3, r3
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	4013      	ands	r3, r2
 80042c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	091b      	lsrs	r3, r3, #4
 80042ce:	f003 0201 	and.w	r2, r3, #1
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	4313      	orrs	r3, r2
 80042dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f003 0303 	and.w	r3, r3, #3
 80042ec:	2b03      	cmp	r3, #3
 80042ee:	d017      	beq.n	8004320 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	2203      	movs	r2, #3
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	43db      	mvns	r3, r3
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	4013      	ands	r3, r2
 8004306:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4313      	orrs	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f003 0303 	and.w	r3, r3, #3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d123      	bne.n	8004374 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	08da      	lsrs	r2, r3, #3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3208      	adds	r2, #8
 8004334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	220f      	movs	r2, #15
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	43db      	mvns	r3, r3
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	4013      	ands	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	4313      	orrs	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	08da      	lsrs	r2, r3, #3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	3208      	adds	r2, #8
 800436e:	69b9      	ldr	r1, [r7, #24]
 8004370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	2203      	movs	r2, #3
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	43db      	mvns	r3, r3
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	4013      	ands	r3, r2
 800438a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f003 0203 	and.w	r2, r3, #3
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	4313      	orrs	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 80be 	beq.w	8004532 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043b6:	4b66      	ldr	r3, [pc, #408]	; (8004550 <HAL_GPIO_Init+0x324>)
 80043b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ba:	4a65      	ldr	r2, [pc, #404]	; (8004550 <HAL_GPIO_Init+0x324>)
 80043bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043c0:	6453      	str	r3, [r2, #68]	; 0x44
 80043c2:	4b63      	ldr	r3, [pc, #396]	; (8004550 <HAL_GPIO_Init+0x324>)
 80043c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80043ce:	4a61      	ldr	r2, [pc, #388]	; (8004554 <HAL_GPIO_Init+0x328>)
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	089b      	lsrs	r3, r3, #2
 80043d4:	3302      	adds	r3, #2
 80043d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	220f      	movs	r2, #15
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	43db      	mvns	r3, r3
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	4013      	ands	r3, r2
 80043f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a58      	ldr	r2, [pc, #352]	; (8004558 <HAL_GPIO_Init+0x32c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d037      	beq.n	800446a <HAL_GPIO_Init+0x23e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a57      	ldr	r2, [pc, #348]	; (800455c <HAL_GPIO_Init+0x330>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d031      	beq.n	8004466 <HAL_GPIO_Init+0x23a>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a56      	ldr	r2, [pc, #344]	; (8004560 <HAL_GPIO_Init+0x334>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d02b      	beq.n	8004462 <HAL_GPIO_Init+0x236>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a55      	ldr	r2, [pc, #340]	; (8004564 <HAL_GPIO_Init+0x338>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d025      	beq.n	800445e <HAL_GPIO_Init+0x232>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a54      	ldr	r2, [pc, #336]	; (8004568 <HAL_GPIO_Init+0x33c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d01f      	beq.n	800445a <HAL_GPIO_Init+0x22e>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a53      	ldr	r2, [pc, #332]	; (800456c <HAL_GPIO_Init+0x340>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d019      	beq.n	8004456 <HAL_GPIO_Init+0x22a>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a52      	ldr	r2, [pc, #328]	; (8004570 <HAL_GPIO_Init+0x344>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d013      	beq.n	8004452 <HAL_GPIO_Init+0x226>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a51      	ldr	r2, [pc, #324]	; (8004574 <HAL_GPIO_Init+0x348>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d00d      	beq.n	800444e <HAL_GPIO_Init+0x222>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a50      	ldr	r2, [pc, #320]	; (8004578 <HAL_GPIO_Init+0x34c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d007      	beq.n	800444a <HAL_GPIO_Init+0x21e>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a4f      	ldr	r2, [pc, #316]	; (800457c <HAL_GPIO_Init+0x350>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d101      	bne.n	8004446 <HAL_GPIO_Init+0x21a>
 8004442:	2309      	movs	r3, #9
 8004444:	e012      	b.n	800446c <HAL_GPIO_Init+0x240>
 8004446:	230a      	movs	r3, #10
 8004448:	e010      	b.n	800446c <HAL_GPIO_Init+0x240>
 800444a:	2308      	movs	r3, #8
 800444c:	e00e      	b.n	800446c <HAL_GPIO_Init+0x240>
 800444e:	2307      	movs	r3, #7
 8004450:	e00c      	b.n	800446c <HAL_GPIO_Init+0x240>
 8004452:	2306      	movs	r3, #6
 8004454:	e00a      	b.n	800446c <HAL_GPIO_Init+0x240>
 8004456:	2305      	movs	r3, #5
 8004458:	e008      	b.n	800446c <HAL_GPIO_Init+0x240>
 800445a:	2304      	movs	r3, #4
 800445c:	e006      	b.n	800446c <HAL_GPIO_Init+0x240>
 800445e:	2303      	movs	r3, #3
 8004460:	e004      	b.n	800446c <HAL_GPIO_Init+0x240>
 8004462:	2302      	movs	r3, #2
 8004464:	e002      	b.n	800446c <HAL_GPIO_Init+0x240>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <HAL_GPIO_Init+0x240>
 800446a:	2300      	movs	r3, #0
 800446c:	69fa      	ldr	r2, [r7, #28]
 800446e:	f002 0203 	and.w	r2, r2, #3
 8004472:	0092      	lsls	r2, r2, #2
 8004474:	4093      	lsls	r3, r2
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	4313      	orrs	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800447c:	4935      	ldr	r1, [pc, #212]	; (8004554 <HAL_GPIO_Init+0x328>)
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	089b      	lsrs	r3, r3, #2
 8004482:	3302      	adds	r3, #2
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800448a:	4b3d      	ldr	r3, [pc, #244]	; (8004580 <HAL_GPIO_Init+0x354>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	43db      	mvns	r3, r3
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	4013      	ands	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044ae:	4a34      	ldr	r2, [pc, #208]	; (8004580 <HAL_GPIO_Init+0x354>)
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044b4:	4b32      	ldr	r3, [pc, #200]	; (8004580 <HAL_GPIO_Init+0x354>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	43db      	mvns	r3, r3
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	4013      	ands	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044d8:	4a29      	ldr	r2, [pc, #164]	; (8004580 <HAL_GPIO_Init+0x354>)
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044de:	4b28      	ldr	r3, [pc, #160]	; (8004580 <HAL_GPIO_Init+0x354>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	43db      	mvns	r3, r3
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	4013      	ands	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004502:	4a1f      	ldr	r2, [pc, #124]	; (8004580 <HAL_GPIO_Init+0x354>)
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004508:	4b1d      	ldr	r3, [pc, #116]	; (8004580 <HAL_GPIO_Init+0x354>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	43db      	mvns	r3, r3
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	4013      	ands	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800452c:	4a14      	ldr	r2, [pc, #80]	; (8004580 <HAL_GPIO_Init+0x354>)
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	3301      	adds	r3, #1
 8004536:	61fb      	str	r3, [r7, #28]
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	2b0f      	cmp	r3, #15
 800453c:	f67f ae86 	bls.w	800424c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004540:	bf00      	nop
 8004542:	bf00      	nop
 8004544:	3724      	adds	r7, #36	; 0x24
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40023800 	.word	0x40023800
 8004554:	40013800 	.word	0x40013800
 8004558:	40020000 	.word	0x40020000
 800455c:	40020400 	.word	0x40020400
 8004560:	40020800 	.word	0x40020800
 8004564:	40020c00 	.word	0x40020c00
 8004568:	40021000 	.word	0x40021000
 800456c:	40021400 	.word	0x40021400
 8004570:	40021800 	.word	0x40021800
 8004574:	40021c00 	.word	0x40021c00
 8004578:	40022000 	.word	0x40022000
 800457c:	40022400 	.word	0x40022400
 8004580:	40013c00 	.word	0x40013c00

08004584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	460b      	mov	r3, r1
 800458e:	807b      	strh	r3, [r7, #2]
 8004590:	4613      	mov	r3, r2
 8004592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004594:	787b      	ldrb	r3, [r7, #1]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800459a:	887a      	ldrh	r2, [r7, #2]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80045a0:	e003      	b.n	80045aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80045a2:	887b      	ldrh	r3, [r7, #2]
 80045a4:	041a      	lsls	r2, r3, #16
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	619a      	str	r2, [r3, #24]
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b085      	sub	sp, #20
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	460b      	mov	r3, r1
 80045c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045c8:	887a      	ldrh	r2, [r7, #2]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4013      	ands	r3, r2
 80045ce:	041a      	lsls	r2, r3, #16
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	43d9      	mvns	r1, r3
 80045d4:	887b      	ldrh	r3, [r7, #2]
 80045d6:	400b      	ands	r3, r1
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	619a      	str	r2, [r3, #24]
}
 80045de:	bf00      	nop
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80045ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ec:	b08f      	sub	sp, #60	; 0x3c
 80045ee:	af0a      	add	r7, sp, #40	; 0x28
 80045f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e116      	b.n	800482a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d106      	bne.n	800461c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7fd fcb4 	bl	8001f84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2203      	movs	r2, #3
 8004620:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462c:	2b00      	cmp	r3, #0
 800462e:	d102      	bne.n	8004636 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f002 fe86 	bl	800734c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	603b      	str	r3, [r7, #0]
 8004646:	687e      	ldr	r6, [r7, #4]
 8004648:	466d      	mov	r5, sp
 800464a:	f106 0410 	add.w	r4, r6, #16
 800464e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004650:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004652:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004654:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004656:	e894 0003 	ldmia.w	r4, {r0, r1}
 800465a:	e885 0003 	stmia.w	r5, {r0, r1}
 800465e:	1d33      	adds	r3, r6, #4
 8004660:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004662:	6838      	ldr	r0, [r7, #0]
 8004664:	f002 fe1a 	bl	800729c <USB_CoreInit>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d005      	beq.n	800467a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2202      	movs	r2, #2
 8004672:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e0d7      	b.n	800482a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2100      	movs	r1, #0
 8004680:	4618      	mov	r0, r3
 8004682:	f002 fe74 	bl	800736e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004686:	2300      	movs	r3, #0
 8004688:	73fb      	strb	r3, [r7, #15]
 800468a:	e04a      	b.n	8004722 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800468c:	7bfa      	ldrb	r2, [r7, #15]
 800468e:	6879      	ldr	r1, [r7, #4]
 8004690:	4613      	mov	r3, r2
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	4413      	add	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	440b      	add	r3, r1
 800469a:	333d      	adds	r3, #61	; 0x3d
 800469c:	2201      	movs	r2, #1
 800469e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80046a0:	7bfa      	ldrb	r2, [r7, #15]
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	4613      	mov	r3, r2
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	4413      	add	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	333c      	adds	r3, #60	; 0x3c
 80046b0:	7bfa      	ldrb	r2, [r7, #15]
 80046b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80046b4:	7bfa      	ldrb	r2, [r7, #15]
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
 80046b8:	b298      	uxth	r0, r3
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	4613      	mov	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	3344      	adds	r3, #68	; 0x44
 80046c8:	4602      	mov	r2, r0
 80046ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80046cc:	7bfa      	ldrb	r2, [r7, #15]
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	4613      	mov	r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	440b      	add	r3, r1
 80046da:	3340      	adds	r3, #64	; 0x40
 80046dc:	2200      	movs	r2, #0
 80046de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80046e0:	7bfa      	ldrb	r2, [r7, #15]
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	4613      	mov	r3, r2
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	4413      	add	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	3348      	adds	r3, #72	; 0x48
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80046f4:	7bfa      	ldrb	r2, [r7, #15]
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	4613      	mov	r3, r2
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	334c      	adds	r3, #76	; 0x4c
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004708:	7bfa      	ldrb	r2, [r7, #15]
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	4613      	mov	r3, r2
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	4413      	add	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	3354      	adds	r3, #84	; 0x54
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800471c:	7bfb      	ldrb	r3, [r7, #15]
 800471e:	3301      	adds	r3, #1
 8004720:	73fb      	strb	r3, [r7, #15]
 8004722:	7bfa      	ldrb	r2, [r7, #15]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	429a      	cmp	r2, r3
 800472a:	d3af      	bcc.n	800468c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800472c:	2300      	movs	r3, #0
 800472e:	73fb      	strb	r3, [r7, #15]
 8004730:	e044      	b.n	80047bc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004732:	7bfa      	ldrb	r2, [r7, #15]
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	4613      	mov	r3, r2
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	4413      	add	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	440b      	add	r3, r1
 8004740:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004744:	2200      	movs	r2, #0
 8004746:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004748:	7bfa      	ldrb	r2, [r7, #15]
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	4613      	mov	r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	4413      	add	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800475a:	7bfa      	ldrb	r2, [r7, #15]
 800475c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800475e:	7bfa      	ldrb	r2, [r7, #15]
 8004760:	6879      	ldr	r1, [r7, #4]
 8004762:	4613      	mov	r3, r2
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	4413      	add	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	440b      	add	r3, r1
 800476c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004770:	2200      	movs	r2, #0
 8004772:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004774:	7bfa      	ldrb	r2, [r7, #15]
 8004776:	6879      	ldr	r1, [r7, #4]
 8004778:	4613      	mov	r3, r2
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	4413      	add	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	440b      	add	r3, r1
 8004782:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800478a:	7bfa      	ldrb	r2, [r7, #15]
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	4413      	add	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	440b      	add	r3, r1
 8004798:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80047a0:	7bfa      	ldrb	r2, [r7, #15]
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	4613      	mov	r3, r2
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	4413      	add	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	440b      	add	r3, r1
 80047ae:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047b6:	7bfb      	ldrb	r3, [r7, #15]
 80047b8:	3301      	adds	r3, #1
 80047ba:	73fb      	strb	r3, [r7, #15]
 80047bc:	7bfa      	ldrb	r2, [r7, #15]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d3b5      	bcc.n	8004732 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	603b      	str	r3, [r7, #0]
 80047cc:	687e      	ldr	r6, [r7, #4]
 80047ce:	466d      	mov	r5, sp
 80047d0:	f106 0410 	add.w	r4, r6, #16
 80047d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80047e4:	1d33      	adds	r3, r6, #4
 80047e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047e8:	6838      	ldr	r0, [r7, #0]
 80047ea:	f002 fe0d 	bl	8007408 <USB_DevInit>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e014      	b.n	800482a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	2b01      	cmp	r3, #1
 8004816:	d102      	bne.n	800481e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f80b 	bl	8004834 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4618      	mov	r0, r3
 8004824:	f002 ffcb 	bl	80077be <USB_DevDisconnect>

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004834 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004862:	4b05      	ldr	r3, [pc, #20]	; (8004878 <HAL_PCDEx_ActivateLPM+0x44>)
 8004864:	4313      	orrs	r3, r2
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	10000003 	.word	0x10000003

0800487c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004880:	4b05      	ldr	r3, [pc, #20]	; (8004898 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a04      	ldr	r2, [pc, #16]	; (8004898 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800488a:	6013      	str	r3, [r2, #0]
}
 800488c:	bf00      	nop
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	40007000 	.word	0x40007000

0800489c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80048a2:	2300      	movs	r3, #0
 80048a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80048a6:	4b23      	ldr	r3, [pc, #140]	; (8004934 <HAL_PWREx_EnableOverDrive+0x98>)
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	4a22      	ldr	r2, [pc, #136]	; (8004934 <HAL_PWREx_EnableOverDrive+0x98>)
 80048ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b0:	6413      	str	r3, [r2, #64]	; 0x40
 80048b2:	4b20      	ldr	r3, [pc, #128]	; (8004934 <HAL_PWREx_EnableOverDrive+0x98>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80048be:	4b1e      	ldr	r3, [pc, #120]	; (8004938 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a1d      	ldr	r2, [pc, #116]	; (8004938 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048ca:	f7fd fdab 	bl	8002424 <HAL_GetTick>
 80048ce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048d0:	e009      	b.n	80048e6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80048d2:	f7fd fda7 	bl	8002424 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048e0:	d901      	bls.n	80048e6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e022      	b.n	800492c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048e6:	4b14      	ldr	r3, [pc, #80]	; (8004938 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f2:	d1ee      	bne.n	80048d2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80048f4:	4b10      	ldr	r3, [pc, #64]	; (8004938 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a0f      	ldr	r2, [pc, #60]	; (8004938 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004900:	f7fd fd90 	bl	8002424 <HAL_GetTick>
 8004904:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004906:	e009      	b.n	800491c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004908:	f7fd fd8c 	bl	8002424 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004916:	d901      	bls.n	800491c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e007      	b.n	800492c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800491c:	4b06      	ldr	r3, [pc, #24]	; (8004938 <HAL_PWREx_EnableOverDrive+0x9c>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004924:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004928:	d1ee      	bne.n	8004908 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40023800 	.word	0x40023800
 8004938:	40007000 	.word	0x40007000

0800493c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004944:	2300      	movs	r3, #0
 8004946:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e29b      	b.n	8004e8a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 8087 	beq.w	8004a6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004960:	4b96      	ldr	r3, [pc, #600]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f003 030c 	and.w	r3, r3, #12
 8004968:	2b04      	cmp	r3, #4
 800496a:	d00c      	beq.n	8004986 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800496c:	4b93      	ldr	r3, [pc, #588]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f003 030c 	and.w	r3, r3, #12
 8004974:	2b08      	cmp	r3, #8
 8004976:	d112      	bne.n	800499e <HAL_RCC_OscConfig+0x62>
 8004978:	4b90      	ldr	r3, [pc, #576]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004980:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004984:	d10b      	bne.n	800499e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004986:	4b8d      	ldr	r3, [pc, #564]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d06c      	beq.n	8004a6c <HAL_RCC_OscConfig+0x130>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d168      	bne.n	8004a6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e275      	b.n	8004e8a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a6:	d106      	bne.n	80049b6 <HAL_RCC_OscConfig+0x7a>
 80049a8:	4b84      	ldr	r3, [pc, #528]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a83      	ldr	r2, [pc, #524]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 80049ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	e02e      	b.n	8004a14 <HAL_RCC_OscConfig+0xd8>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10c      	bne.n	80049d8 <HAL_RCC_OscConfig+0x9c>
 80049be:	4b7f      	ldr	r3, [pc, #508]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a7e      	ldr	r2, [pc, #504]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 80049c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	4b7c      	ldr	r3, [pc, #496]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a7b      	ldr	r2, [pc, #492]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 80049d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	e01d      	b.n	8004a14 <HAL_RCC_OscConfig+0xd8>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049e0:	d10c      	bne.n	80049fc <HAL_RCC_OscConfig+0xc0>
 80049e2:	4b76      	ldr	r3, [pc, #472]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a75      	ldr	r2, [pc, #468]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 80049e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049ec:	6013      	str	r3, [r2, #0]
 80049ee:	4b73      	ldr	r3, [pc, #460]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a72      	ldr	r2, [pc, #456]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 80049f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	e00b      	b.n	8004a14 <HAL_RCC_OscConfig+0xd8>
 80049fc:	4b6f      	ldr	r3, [pc, #444]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a6e      	ldr	r2, [pc, #440]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 8004a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a06:	6013      	str	r3, [r2, #0]
 8004a08:	4b6c      	ldr	r3, [pc, #432]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a6b      	ldr	r2, [pc, #428]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 8004a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d013      	beq.n	8004a44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1c:	f7fd fd02 	bl	8002424 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a24:	f7fd fcfe 	bl	8002424 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b64      	cmp	r3, #100	; 0x64
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e229      	b.n	8004e8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a36:	4b61      	ldr	r3, [pc, #388]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f0      	beq.n	8004a24 <HAL_RCC_OscConfig+0xe8>
 8004a42:	e014      	b.n	8004a6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a44:	f7fd fcee 	bl	8002424 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a4c:	f7fd fcea 	bl	8002424 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b64      	cmp	r3, #100	; 0x64
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e215      	b.n	8004e8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a5e:	4b57      	ldr	r3, [pc, #348]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1f0      	bne.n	8004a4c <HAL_RCC_OscConfig+0x110>
 8004a6a:	e000      	b.n	8004a6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d069      	beq.n	8004b4e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a7a:	4b50      	ldr	r3, [pc, #320]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 030c 	and.w	r3, r3, #12
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00b      	beq.n	8004a9e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a86:	4b4d      	ldr	r3, [pc, #308]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 030c 	and.w	r3, r3, #12
 8004a8e:	2b08      	cmp	r3, #8
 8004a90:	d11c      	bne.n	8004acc <HAL_RCC_OscConfig+0x190>
 8004a92:	4b4a      	ldr	r3, [pc, #296]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d116      	bne.n	8004acc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a9e:	4b47      	ldr	r3, [pc, #284]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d005      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x17a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d001      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e1e9      	b.n	8004e8a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab6:	4b41      	ldr	r3, [pc, #260]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	493d      	ldr	r1, [pc, #244]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aca:	e040      	b.n	8004b4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d023      	beq.n	8004b1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ad4:	4b39      	ldr	r3, [pc, #228]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a38      	ldr	r2, [pc, #224]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 8004ada:	f043 0301 	orr.w	r3, r3, #1
 8004ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae0:	f7fd fca0 	bl	8002424 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ae8:	f7fd fc9c 	bl	8002424 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e1c7      	b.n	8004e8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004afa:	4b30      	ldr	r3, [pc, #192]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0f0      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b06:	4b2d      	ldr	r3, [pc, #180]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	4929      	ldr	r1, [pc, #164]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	600b      	str	r3, [r1, #0]
 8004b1a:	e018      	b.n	8004b4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b1c:	4b27      	ldr	r3, [pc, #156]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a26      	ldr	r2, [pc, #152]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 8004b22:	f023 0301 	bic.w	r3, r3, #1
 8004b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b28:	f7fd fc7c 	bl	8002424 <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b30:	f7fd fc78 	bl	8002424 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e1a3      	b.n	8004e8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b42:	4b1e      	ldr	r3, [pc, #120]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1f0      	bne.n	8004b30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d038      	beq.n	8004bcc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d019      	beq.n	8004b96 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b62:	4b16      	ldr	r3, [pc, #88]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 8004b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b66:	4a15      	ldr	r2, [pc, #84]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 8004b68:	f043 0301 	orr.w	r3, r3, #1
 8004b6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6e:	f7fd fc59 	bl	8002424 <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b76:	f7fd fc55 	bl	8002424 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e180      	b.n	8004e8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b88:	4b0c      	ldr	r3, [pc, #48]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 8004b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0f0      	beq.n	8004b76 <HAL_RCC_OscConfig+0x23a>
 8004b94:	e01a      	b.n	8004bcc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b96:	4b09      	ldr	r3, [pc, #36]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 8004b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b9a:	4a08      	ldr	r2, [pc, #32]	; (8004bbc <HAL_RCC_OscConfig+0x280>)
 8004b9c:	f023 0301 	bic.w	r3, r3, #1
 8004ba0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba2:	f7fd fc3f 	bl	8002424 <HAL_GetTick>
 8004ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ba8:	e00a      	b.n	8004bc0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004baa:	f7fd fc3b 	bl	8002424 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d903      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e166      	b.n	8004e8a <HAL_RCC_OscConfig+0x54e>
 8004bbc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bc0:	4b92      	ldr	r3, [pc, #584]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1ee      	bne.n	8004baa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 80a4 	beq.w	8004d22 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bda:	4b8c      	ldr	r3, [pc, #560]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10d      	bne.n	8004c02 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be6:	4b89      	ldr	r3, [pc, #548]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	4a88      	ldr	r2, [pc, #544]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8004bf2:	4b86      	ldr	r3, [pc, #536]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bfa:	60bb      	str	r3, [r7, #8]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c02:	4b83      	ldr	r3, [pc, #524]	; (8004e10 <HAL_RCC_OscConfig+0x4d4>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d118      	bne.n	8004c40 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004c0e:	4b80      	ldr	r3, [pc, #512]	; (8004e10 <HAL_RCC_OscConfig+0x4d4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a7f      	ldr	r2, [pc, #508]	; (8004e10 <HAL_RCC_OscConfig+0x4d4>)
 8004c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c1a:	f7fd fc03 	bl	8002424 <HAL_GetTick>
 8004c1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c20:	e008      	b.n	8004c34 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c22:	f7fd fbff 	bl	8002424 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b64      	cmp	r3, #100	; 0x64
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e12a      	b.n	8004e8a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c34:	4b76      	ldr	r3, [pc, #472]	; (8004e10 <HAL_RCC_OscConfig+0x4d4>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0f0      	beq.n	8004c22 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d106      	bne.n	8004c56 <HAL_RCC_OscConfig+0x31a>
 8004c48:	4b70      	ldr	r3, [pc, #448]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4c:	4a6f      	ldr	r2, [pc, #444]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004c4e:	f043 0301 	orr.w	r3, r3, #1
 8004c52:	6713      	str	r3, [r2, #112]	; 0x70
 8004c54:	e02d      	b.n	8004cb2 <HAL_RCC_OscConfig+0x376>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10c      	bne.n	8004c78 <HAL_RCC_OscConfig+0x33c>
 8004c5e:	4b6b      	ldr	r3, [pc, #428]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c62:	4a6a      	ldr	r2, [pc, #424]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004c64:	f023 0301 	bic.w	r3, r3, #1
 8004c68:	6713      	str	r3, [r2, #112]	; 0x70
 8004c6a:	4b68      	ldr	r3, [pc, #416]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6e:	4a67      	ldr	r2, [pc, #412]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004c70:	f023 0304 	bic.w	r3, r3, #4
 8004c74:	6713      	str	r3, [r2, #112]	; 0x70
 8004c76:	e01c      	b.n	8004cb2 <HAL_RCC_OscConfig+0x376>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	2b05      	cmp	r3, #5
 8004c7e:	d10c      	bne.n	8004c9a <HAL_RCC_OscConfig+0x35e>
 8004c80:	4b62      	ldr	r3, [pc, #392]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c84:	4a61      	ldr	r2, [pc, #388]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004c86:	f043 0304 	orr.w	r3, r3, #4
 8004c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c8c:	4b5f      	ldr	r3, [pc, #380]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c90:	4a5e      	ldr	r2, [pc, #376]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004c92:	f043 0301 	orr.w	r3, r3, #1
 8004c96:	6713      	str	r3, [r2, #112]	; 0x70
 8004c98:	e00b      	b.n	8004cb2 <HAL_RCC_OscConfig+0x376>
 8004c9a:	4b5c      	ldr	r3, [pc, #368]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9e:	4a5b      	ldr	r2, [pc, #364]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004ca0:	f023 0301 	bic.w	r3, r3, #1
 8004ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ca6:	4b59      	ldr	r3, [pc, #356]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004caa:	4a58      	ldr	r2, [pc, #352]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004cac:	f023 0304 	bic.w	r3, r3, #4
 8004cb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d015      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cba:	f7fd fbb3 	bl	8002424 <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc0:	e00a      	b.n	8004cd8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cc2:	f7fd fbaf 	bl	8002424 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e0d8      	b.n	8004e8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd8:	4b4c      	ldr	r3, [pc, #304]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0ee      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x386>
 8004ce4:	e014      	b.n	8004d10 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce6:	f7fd fb9d 	bl	8002424 <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cec:	e00a      	b.n	8004d04 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cee:	f7fd fb99 	bl	8002424 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e0c2      	b.n	8004e8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d04:	4b41      	ldr	r3, [pc, #260]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1ee      	bne.n	8004cee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d10:	7dfb      	ldrb	r3, [r7, #23]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d105      	bne.n	8004d22 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d16:	4b3d      	ldr	r3, [pc, #244]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	4a3c      	ldr	r2, [pc, #240]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 80ae 	beq.w	8004e88 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d2c:	4b37      	ldr	r3, [pc, #220]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 030c 	and.w	r3, r3, #12
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	d06d      	beq.n	8004e14 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d14b      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d40:	4b32      	ldr	r3, [pc, #200]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a31      	ldr	r2, [pc, #196]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004d46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4c:	f7fd fb6a 	bl	8002424 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d54:	f7fd fb66 	bl	8002424 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e091      	b.n	8004e8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d66:	4b29      	ldr	r3, [pc, #164]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f0      	bne.n	8004d54 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69da      	ldr	r2, [r3, #28]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	019b      	lsls	r3, r3, #6
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d88:	085b      	lsrs	r3, r3, #1
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	041b      	lsls	r3, r3, #16
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d94:	061b      	lsls	r3, r3, #24
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9c:	071b      	lsls	r3, r3, #28
 8004d9e:	491b      	ldr	r1, [pc, #108]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004da4:	4b19      	ldr	r3, [pc, #100]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a18      	ldr	r2, [pc, #96]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db0:	f7fd fb38 	bl	8002424 <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db8:	f7fd fb34 	bl	8002424 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e05f      	b.n	8004e8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dca:	4b10      	ldr	r3, [pc, #64]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0f0      	beq.n	8004db8 <HAL_RCC_OscConfig+0x47c>
 8004dd6:	e057      	b.n	8004e88 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dd8:	4b0c      	ldr	r3, [pc, #48]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a0b      	ldr	r2, [pc, #44]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de4:	f7fd fb1e 	bl	8002424 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dec:	f7fd fb1a 	bl	8002424 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e045      	b.n	8004e8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dfe:	4b03      	ldr	r3, [pc, #12]	; (8004e0c <HAL_RCC_OscConfig+0x4d0>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1f0      	bne.n	8004dec <HAL_RCC_OscConfig+0x4b0>
 8004e0a:	e03d      	b.n	8004e88 <HAL_RCC_OscConfig+0x54c>
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004e14:	4b1f      	ldr	r3, [pc, #124]	; (8004e94 <HAL_RCC_OscConfig+0x558>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d030      	beq.n	8004e84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d129      	bne.n	8004e84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d122      	bne.n	8004e84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e44:	4013      	ands	r3, r2
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e4a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d119      	bne.n	8004e84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5a:	085b      	lsrs	r3, r3, #1
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d10f      	bne.n	8004e84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d107      	bne.n	8004e84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d001      	beq.n	8004e88 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e000      	b.n	8004e8a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3718      	adds	r7, #24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	40023800 	.word	0x40023800

08004e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e0d0      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004eb0:	4b6a      	ldr	r3, [pc, #424]	; (800505c <HAL_RCC_ClockConfig+0x1c4>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 030f 	and.w	r3, r3, #15
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d910      	bls.n	8004ee0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ebe:	4b67      	ldr	r3, [pc, #412]	; (800505c <HAL_RCC_ClockConfig+0x1c4>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f023 020f 	bic.w	r2, r3, #15
 8004ec6:	4965      	ldr	r1, [pc, #404]	; (800505c <HAL_RCC_ClockConfig+0x1c4>)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ece:	4b63      	ldr	r3, [pc, #396]	; (800505c <HAL_RCC_ClockConfig+0x1c4>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d001      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e0b8      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d020      	beq.n	8004f2e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d005      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ef8:	4b59      	ldr	r3, [pc, #356]	; (8005060 <HAL_RCC_ClockConfig+0x1c8>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	4a58      	ldr	r2, [pc, #352]	; (8005060 <HAL_RCC_ClockConfig+0x1c8>)
 8004efe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0308 	and.w	r3, r3, #8
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d005      	beq.n	8004f1c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f10:	4b53      	ldr	r3, [pc, #332]	; (8005060 <HAL_RCC_ClockConfig+0x1c8>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	4a52      	ldr	r2, [pc, #328]	; (8005060 <HAL_RCC_ClockConfig+0x1c8>)
 8004f16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f1c:	4b50      	ldr	r3, [pc, #320]	; (8005060 <HAL_RCC_ClockConfig+0x1c8>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	494d      	ldr	r1, [pc, #308]	; (8005060 <HAL_RCC_ClockConfig+0x1c8>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d040      	beq.n	8004fbc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d107      	bne.n	8004f52 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f42:	4b47      	ldr	r3, [pc, #284]	; (8005060 <HAL_RCC_ClockConfig+0x1c8>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d115      	bne.n	8004f7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e07f      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d107      	bne.n	8004f6a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f5a:	4b41      	ldr	r3, [pc, #260]	; (8005060 <HAL_RCC_ClockConfig+0x1c8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d109      	bne.n	8004f7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e073      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f6a:	4b3d      	ldr	r3, [pc, #244]	; (8005060 <HAL_RCC_ClockConfig+0x1c8>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e06b      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f7a:	4b39      	ldr	r3, [pc, #228]	; (8005060 <HAL_RCC_ClockConfig+0x1c8>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f023 0203 	bic.w	r2, r3, #3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	4936      	ldr	r1, [pc, #216]	; (8005060 <HAL_RCC_ClockConfig+0x1c8>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f8c:	f7fd fa4a 	bl	8002424 <HAL_GetTick>
 8004f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f92:	e00a      	b.n	8004faa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f94:	f7fd fa46 	bl	8002424 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e053      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004faa:	4b2d      	ldr	r3, [pc, #180]	; (8005060 <HAL_RCC_ClockConfig+0x1c8>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 020c 	and.w	r2, r3, #12
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d1eb      	bne.n	8004f94 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fbc:	4b27      	ldr	r3, [pc, #156]	; (800505c <HAL_RCC_ClockConfig+0x1c4>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 030f 	and.w	r3, r3, #15
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d210      	bcs.n	8004fec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fca:	4b24      	ldr	r3, [pc, #144]	; (800505c <HAL_RCC_ClockConfig+0x1c4>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f023 020f 	bic.w	r2, r3, #15
 8004fd2:	4922      	ldr	r1, [pc, #136]	; (800505c <HAL_RCC_ClockConfig+0x1c4>)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fda:	4b20      	ldr	r3, [pc, #128]	; (800505c <HAL_RCC_ClockConfig+0x1c4>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 030f 	and.w	r3, r3, #15
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d001      	beq.n	8004fec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e032      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d008      	beq.n	800500a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ff8:	4b19      	ldr	r3, [pc, #100]	; (8005060 <HAL_RCC_ClockConfig+0x1c8>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	4916      	ldr	r1, [pc, #88]	; (8005060 <HAL_RCC_ClockConfig+0x1c8>)
 8005006:	4313      	orrs	r3, r2
 8005008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0308 	and.w	r3, r3, #8
 8005012:	2b00      	cmp	r3, #0
 8005014:	d009      	beq.n	800502a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005016:	4b12      	ldr	r3, [pc, #72]	; (8005060 <HAL_RCC_ClockConfig+0x1c8>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	490e      	ldr	r1, [pc, #56]	; (8005060 <HAL_RCC_ClockConfig+0x1c8>)
 8005026:	4313      	orrs	r3, r2
 8005028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800502a:	f000 f821 	bl	8005070 <HAL_RCC_GetSysClockFreq>
 800502e:	4602      	mov	r2, r0
 8005030:	4b0b      	ldr	r3, [pc, #44]	; (8005060 <HAL_RCC_ClockConfig+0x1c8>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	091b      	lsrs	r3, r3, #4
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	490a      	ldr	r1, [pc, #40]	; (8005064 <HAL_RCC_ClockConfig+0x1cc>)
 800503c:	5ccb      	ldrb	r3, [r1, r3]
 800503e:	fa22 f303 	lsr.w	r3, r2, r3
 8005042:	4a09      	ldr	r2, [pc, #36]	; (8005068 <HAL_RCC_ClockConfig+0x1d0>)
 8005044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005046:	4b09      	ldr	r3, [pc, #36]	; (800506c <HAL_RCC_ClockConfig+0x1d4>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4618      	mov	r0, r3
 800504c:	f7fd f814 	bl	8002078 <HAL_InitTick>

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	40023c00 	.word	0x40023c00
 8005060:	40023800 	.word	0x40023800
 8005064:	0800b6e0 	.word	0x0800b6e0
 8005068:	20000000 	.word	0x20000000
 800506c:	20000004 	.word	0x20000004

08005070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005074:	b094      	sub	sp, #80	; 0x50
 8005076:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005078:	2300      	movs	r3, #0
 800507a:	647b      	str	r3, [r7, #68]	; 0x44
 800507c:	2300      	movs	r3, #0
 800507e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005080:	2300      	movs	r3, #0
 8005082:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005084:	2300      	movs	r3, #0
 8005086:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005088:	4b79      	ldr	r3, [pc, #484]	; (8005270 <HAL_RCC_GetSysClockFreq+0x200>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 030c 	and.w	r3, r3, #12
 8005090:	2b08      	cmp	r3, #8
 8005092:	d00d      	beq.n	80050b0 <HAL_RCC_GetSysClockFreq+0x40>
 8005094:	2b08      	cmp	r3, #8
 8005096:	f200 80e1 	bhi.w	800525c <HAL_RCC_GetSysClockFreq+0x1ec>
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <HAL_RCC_GetSysClockFreq+0x34>
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d003      	beq.n	80050aa <HAL_RCC_GetSysClockFreq+0x3a>
 80050a2:	e0db      	b.n	800525c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050a4:	4b73      	ldr	r3, [pc, #460]	; (8005274 <HAL_RCC_GetSysClockFreq+0x204>)
 80050a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050a8:	e0db      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050aa:	4b73      	ldr	r3, [pc, #460]	; (8005278 <HAL_RCC_GetSysClockFreq+0x208>)
 80050ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050ae:	e0d8      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050b0:	4b6f      	ldr	r3, [pc, #444]	; (8005270 <HAL_RCC_GetSysClockFreq+0x200>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050b8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80050ba:	4b6d      	ldr	r3, [pc, #436]	; (8005270 <HAL_RCC_GetSysClockFreq+0x200>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d063      	beq.n	800518e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050c6:	4b6a      	ldr	r3, [pc, #424]	; (8005270 <HAL_RCC_GetSysClockFreq+0x200>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	099b      	lsrs	r3, r3, #6
 80050cc:	2200      	movs	r2, #0
 80050ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80050d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d8:	633b      	str	r3, [r7, #48]	; 0x30
 80050da:	2300      	movs	r3, #0
 80050dc:	637b      	str	r3, [r7, #52]	; 0x34
 80050de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80050e2:	4622      	mov	r2, r4
 80050e4:	462b      	mov	r3, r5
 80050e6:	f04f 0000 	mov.w	r0, #0
 80050ea:	f04f 0100 	mov.w	r1, #0
 80050ee:	0159      	lsls	r1, r3, #5
 80050f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050f4:	0150      	lsls	r0, r2, #5
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	4621      	mov	r1, r4
 80050fc:	1a51      	subs	r1, r2, r1
 80050fe:	6139      	str	r1, [r7, #16]
 8005100:	4629      	mov	r1, r5
 8005102:	eb63 0301 	sbc.w	r3, r3, r1
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	f04f 0300 	mov.w	r3, #0
 8005110:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005114:	4659      	mov	r1, fp
 8005116:	018b      	lsls	r3, r1, #6
 8005118:	4651      	mov	r1, sl
 800511a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800511e:	4651      	mov	r1, sl
 8005120:	018a      	lsls	r2, r1, #6
 8005122:	4651      	mov	r1, sl
 8005124:	ebb2 0801 	subs.w	r8, r2, r1
 8005128:	4659      	mov	r1, fp
 800512a:	eb63 0901 	sbc.w	r9, r3, r1
 800512e:	f04f 0200 	mov.w	r2, #0
 8005132:	f04f 0300 	mov.w	r3, #0
 8005136:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800513a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800513e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005142:	4690      	mov	r8, r2
 8005144:	4699      	mov	r9, r3
 8005146:	4623      	mov	r3, r4
 8005148:	eb18 0303 	adds.w	r3, r8, r3
 800514c:	60bb      	str	r3, [r7, #8]
 800514e:	462b      	mov	r3, r5
 8005150:	eb49 0303 	adc.w	r3, r9, r3
 8005154:	60fb      	str	r3, [r7, #12]
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005162:	4629      	mov	r1, r5
 8005164:	024b      	lsls	r3, r1, #9
 8005166:	4621      	mov	r1, r4
 8005168:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800516c:	4621      	mov	r1, r4
 800516e:	024a      	lsls	r2, r1, #9
 8005170:	4610      	mov	r0, r2
 8005172:	4619      	mov	r1, r3
 8005174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005176:	2200      	movs	r2, #0
 8005178:	62bb      	str	r3, [r7, #40]	; 0x28
 800517a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800517c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005180:	f7fb f8ae 	bl	80002e0 <__aeabi_uldivmod>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4613      	mov	r3, r2
 800518a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800518c:	e058      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800518e:	4b38      	ldr	r3, [pc, #224]	; (8005270 <HAL_RCC_GetSysClockFreq+0x200>)
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	099b      	lsrs	r3, r3, #6
 8005194:	2200      	movs	r2, #0
 8005196:	4618      	mov	r0, r3
 8005198:	4611      	mov	r1, r2
 800519a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800519e:	623b      	str	r3, [r7, #32]
 80051a0:	2300      	movs	r3, #0
 80051a2:	627b      	str	r3, [r7, #36]	; 0x24
 80051a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051a8:	4642      	mov	r2, r8
 80051aa:	464b      	mov	r3, r9
 80051ac:	f04f 0000 	mov.w	r0, #0
 80051b0:	f04f 0100 	mov.w	r1, #0
 80051b4:	0159      	lsls	r1, r3, #5
 80051b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051ba:	0150      	lsls	r0, r2, #5
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	4641      	mov	r1, r8
 80051c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80051c6:	4649      	mov	r1, r9
 80051c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051e0:	ebb2 040a 	subs.w	r4, r2, sl
 80051e4:	eb63 050b 	sbc.w	r5, r3, fp
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	00eb      	lsls	r3, r5, #3
 80051f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051f6:	00e2      	lsls	r2, r4, #3
 80051f8:	4614      	mov	r4, r2
 80051fa:	461d      	mov	r5, r3
 80051fc:	4643      	mov	r3, r8
 80051fe:	18e3      	adds	r3, r4, r3
 8005200:	603b      	str	r3, [r7, #0]
 8005202:	464b      	mov	r3, r9
 8005204:	eb45 0303 	adc.w	r3, r5, r3
 8005208:	607b      	str	r3, [r7, #4]
 800520a:	f04f 0200 	mov.w	r2, #0
 800520e:	f04f 0300 	mov.w	r3, #0
 8005212:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005216:	4629      	mov	r1, r5
 8005218:	028b      	lsls	r3, r1, #10
 800521a:	4621      	mov	r1, r4
 800521c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005220:	4621      	mov	r1, r4
 8005222:	028a      	lsls	r2, r1, #10
 8005224:	4610      	mov	r0, r2
 8005226:	4619      	mov	r1, r3
 8005228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800522a:	2200      	movs	r2, #0
 800522c:	61bb      	str	r3, [r7, #24]
 800522e:	61fa      	str	r2, [r7, #28]
 8005230:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005234:	f7fb f854 	bl	80002e0 <__aeabi_uldivmod>
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	4613      	mov	r3, r2
 800523e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005240:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <HAL_RCC_GetSysClockFreq+0x200>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	0c1b      	lsrs	r3, r3, #16
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	3301      	adds	r3, #1
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005250:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005254:	fbb2 f3f3 	udiv	r3, r2, r3
 8005258:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800525a:	e002      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800525c:	4b05      	ldr	r3, [pc, #20]	; (8005274 <HAL_RCC_GetSysClockFreq+0x204>)
 800525e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005264:	4618      	mov	r0, r3
 8005266:	3750      	adds	r7, #80	; 0x50
 8005268:	46bd      	mov	sp, r7
 800526a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800526e:	bf00      	nop
 8005270:	40023800 	.word	0x40023800
 8005274:	00f42400 	.word	0x00f42400
 8005278:	007a1200 	.word	0x007a1200

0800527c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005280:	4b03      	ldr	r3, [pc, #12]	; (8005290 <HAL_RCC_GetHCLKFreq+0x14>)
 8005282:	681b      	ldr	r3, [r3, #0]
}
 8005284:	4618      	mov	r0, r3
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	20000000 	.word	0x20000000

08005294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005298:	f7ff fff0 	bl	800527c <HAL_RCC_GetHCLKFreq>
 800529c:	4602      	mov	r2, r0
 800529e:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	0a9b      	lsrs	r3, r3, #10
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	4903      	ldr	r1, [pc, #12]	; (80052b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052aa:	5ccb      	ldrb	r3, [r1, r3]
 80052ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	40023800 	.word	0x40023800
 80052b8:	0800b6f0 	.word	0x0800b6f0

080052bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052c0:	f7ff ffdc 	bl	800527c <HAL_RCC_GetHCLKFreq>
 80052c4:	4602      	mov	r2, r0
 80052c6:	4b05      	ldr	r3, [pc, #20]	; (80052dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	0b5b      	lsrs	r3, r3, #13
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	4903      	ldr	r1, [pc, #12]	; (80052e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052d2:	5ccb      	ldrb	r3, [r1, r3]
 80052d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052d8:	4618      	mov	r0, r3
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	40023800 	.word	0x40023800
 80052e0:	0800b6f0 	.word	0x0800b6f0

080052e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	220f      	movs	r2, #15
 80052f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80052f4:	4b12      	ldr	r3, [pc, #72]	; (8005340 <HAL_RCC_GetClockConfig+0x5c>)
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f003 0203 	and.w	r2, r3, #3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005300:	4b0f      	ldr	r3, [pc, #60]	; (8005340 <HAL_RCC_GetClockConfig+0x5c>)
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800530c:	4b0c      	ldr	r3, [pc, #48]	; (8005340 <HAL_RCC_GetClockConfig+0x5c>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005318:	4b09      	ldr	r3, [pc, #36]	; (8005340 <HAL_RCC_GetClockConfig+0x5c>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	08db      	lsrs	r3, r3, #3
 800531e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005326:	4b07      	ldr	r3, [pc, #28]	; (8005344 <HAL_RCC_GetClockConfig+0x60>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 020f 	and.w	r2, r3, #15
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	601a      	str	r2, [r3, #0]
}
 8005332:	bf00      	nop
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40023800 	.word	0x40023800
 8005344:	40023c00 	.word	0x40023c00

08005348 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005350:	2300      	movs	r3, #0
 8005352:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005354:	2300      	movs	r3, #0
 8005356:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005358:	2300      	movs	r3, #0
 800535a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800535c:	2300      	movs	r3, #0
 800535e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005360:	2300      	movs	r3, #0
 8005362:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	2b00      	cmp	r3, #0
 800536e:	d012      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005370:	4b69      	ldr	r3, [pc, #420]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	4a68      	ldr	r2, [pc, #416]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005376:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800537a:	6093      	str	r3, [r2, #8]
 800537c:	4b66      	ldr	r3, [pc, #408]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005384:	4964      	ldr	r1, [pc, #400]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005386:	4313      	orrs	r3, r2
 8005388:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005392:	2301      	movs	r3, #1
 8005394:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d017      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053a2:	4b5d      	ldr	r3, [pc, #372]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b0:	4959      	ldr	r1, [pc, #356]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053c0:	d101      	bne.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80053c2:	2301      	movs	r3, #1
 80053c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80053ce:	2301      	movs	r3, #1
 80053d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d017      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80053de:	4b4e      	ldr	r3, [pc, #312]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ec:	494a      	ldr	r1, [pc, #296]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053fc:	d101      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80053fe:	2301      	movs	r3, #1
 8005400:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800540a:	2301      	movs	r3, #1
 800540c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800541a:	2301      	movs	r3, #1
 800541c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 808b 	beq.w	8005542 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800542c:	4b3a      	ldr	r3, [pc, #232]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800542e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005430:	4a39      	ldr	r2, [pc, #228]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005436:	6413      	str	r3, [r2, #64]	; 0x40
 8005438:	4b37      	ldr	r3, [pc, #220]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800543a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005440:	60bb      	str	r3, [r7, #8]
 8005442:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005444:	4b35      	ldr	r3, [pc, #212]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a34      	ldr	r2, [pc, #208]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800544a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800544e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005450:	f7fc ffe8 	bl	8002424 <HAL_GetTick>
 8005454:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005456:	e008      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005458:	f7fc ffe4 	bl	8002424 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b64      	cmp	r3, #100	; 0x64
 8005464:	d901      	bls.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e38f      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800546a:	4b2c      	ldr	r3, [pc, #176]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0f0      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005476:	4b28      	ldr	r3, [pc, #160]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800547e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d035      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	429a      	cmp	r2, r3
 8005492:	d02e      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005494:	4b20      	ldr	r3, [pc, #128]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800549c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800549e:	4b1e      	ldr	r3, [pc, #120]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a2:	4a1d      	ldr	r2, [pc, #116]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054aa:	4b1b      	ldr	r3, [pc, #108]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ae:	4a1a      	ldr	r2, [pc, #104]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80054b6:	4a18      	ldr	r2, [pc, #96]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80054bc:	4b16      	ldr	r3, [pc, #88]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d114      	bne.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c8:	f7fc ffac 	bl	8002424 <HAL_GetTick>
 80054cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ce:	e00a      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054d0:	f7fc ffa8 	bl	8002424 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	f241 3288 	movw	r2, #5000	; 0x1388
 80054de:	4293      	cmp	r3, r2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e351      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054e6:	4b0c      	ldr	r3, [pc, #48]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0ee      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054fe:	d111      	bne.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005500:	4b05      	ldr	r3, [pc, #20]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800550c:	4b04      	ldr	r3, [pc, #16]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800550e:	400b      	ands	r3, r1
 8005510:	4901      	ldr	r1, [pc, #4]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005512:	4313      	orrs	r3, r2
 8005514:	608b      	str	r3, [r1, #8]
 8005516:	e00b      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005518:	40023800 	.word	0x40023800
 800551c:	40007000 	.word	0x40007000
 8005520:	0ffffcff 	.word	0x0ffffcff
 8005524:	4bac      	ldr	r3, [pc, #688]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	4aab      	ldr	r2, [pc, #684]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800552a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800552e:	6093      	str	r3, [r2, #8]
 8005530:	4ba9      	ldr	r3, [pc, #676]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005532:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800553c:	49a6      	ldr	r1, [pc, #664]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800553e:	4313      	orrs	r3, r2
 8005540:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0310 	and.w	r3, r3, #16
 800554a:	2b00      	cmp	r3, #0
 800554c:	d010      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800554e:	4ba2      	ldr	r3, [pc, #648]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005554:	4aa0      	ldr	r2, [pc, #640]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005556:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800555a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800555e:	4b9e      	ldr	r3, [pc, #632]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005560:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005568:	499b      	ldr	r1, [pc, #620]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800556a:	4313      	orrs	r3, r2
 800556c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00a      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800557c:	4b96      	ldr	r3, [pc, #600]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800557e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005582:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800558a:	4993      	ldr	r1, [pc, #588]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800558c:	4313      	orrs	r3, r2
 800558e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00a      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800559e:	4b8e      	ldr	r3, [pc, #568]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055ac:	498a      	ldr	r1, [pc, #552]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00a      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055c0:	4b85      	ldr	r3, [pc, #532]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055ce:	4982      	ldr	r1, [pc, #520]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00a      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055e2:	4b7d      	ldr	r3, [pc, #500]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f0:	4979      	ldr	r1, [pc, #484]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00a      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005604:	4b74      	ldr	r3, [pc, #464]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800560a:	f023 0203 	bic.w	r2, r3, #3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005612:	4971      	ldr	r1, [pc, #452]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005614:	4313      	orrs	r3, r2
 8005616:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00a      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005626:	4b6c      	ldr	r3, [pc, #432]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562c:	f023 020c 	bic.w	r2, r3, #12
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005634:	4968      	ldr	r1, [pc, #416]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005636:	4313      	orrs	r3, r2
 8005638:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005648:	4b63      	ldr	r3, [pc, #396]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800564a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005656:	4960      	ldr	r1, [pc, #384]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005658:	4313      	orrs	r3, r2
 800565a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00a      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800566a:	4b5b      	ldr	r3, [pc, #364]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800566c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005670:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005678:	4957      	ldr	r1, [pc, #348]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800567a:	4313      	orrs	r3, r2
 800567c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00a      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800568c:	4b52      	ldr	r3, [pc, #328]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800568e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005692:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800569a:	494f      	ldr	r1, [pc, #316]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800569c:	4313      	orrs	r3, r2
 800569e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80056ae:	4b4a      	ldr	r3, [pc, #296]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056bc:	4946      	ldr	r1, [pc, #280]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00a      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80056d0:	4b41      	ldr	r3, [pc, #260]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056de:	493e      	ldr	r1, [pc, #248]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80056f2:	4b39      	ldr	r3, [pc, #228]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005700:	4935      	ldr	r1, [pc, #212]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005702:	4313      	orrs	r3, r2
 8005704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00a      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005714:	4b30      	ldr	r3, [pc, #192]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005722:	492d      	ldr	r1, [pc, #180]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005724:	4313      	orrs	r3, r2
 8005726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d011      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005736:	4b28      	ldr	r3, [pc, #160]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800573c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005744:	4924      	ldr	r1, [pc, #144]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005746:	4313      	orrs	r3, r2
 8005748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005754:	d101      	bne.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005756:	2301      	movs	r3, #1
 8005758:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0308 	and.w	r3, r3, #8
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005766:	2301      	movs	r3, #1
 8005768:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00a      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005776:	4b18      	ldr	r3, [pc, #96]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005784:	4914      	ldr	r1, [pc, #80]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005786:	4313      	orrs	r3, r2
 8005788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00b      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005798:	4b0f      	ldr	r3, [pc, #60]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800579a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057a8:	490b      	ldr	r1, [pc, #44]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00f      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80057bc:	4b06      	ldr	r3, [pc, #24]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057cc:	4902      	ldr	r1, [pc, #8]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80057d4:	e002      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80057d6:	bf00      	nop
 80057d8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00b      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057e8:	4b8a      	ldr	r3, [pc, #552]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f8:	4986      	ldr	r1, [pc, #536]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00b      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800580c:	4b81      	ldr	r3, [pc, #516]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800580e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005812:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800581c:	497d      	ldr	r1, [pc, #500]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800581e:	4313      	orrs	r3, r2
 8005820:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d006      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005832:	2b00      	cmp	r3, #0
 8005834:	f000 80d6 	beq.w	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005838:	4b76      	ldr	r3, [pc, #472]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a75      	ldr	r2, [pc, #468]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800583e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005844:	f7fc fdee 	bl	8002424 <HAL_GetTick>
 8005848:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800584a:	e008      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800584c:	f7fc fdea 	bl	8002424 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b64      	cmp	r3, #100	; 0x64
 8005858:	d901      	bls.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e195      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800585e:	4b6d      	ldr	r3, [pc, #436]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f0      	bne.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d021      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587a:	2b00      	cmp	r3, #0
 800587c:	d11d      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800587e:	4b65      	ldr	r3, [pc, #404]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005884:	0c1b      	lsrs	r3, r3, #16
 8005886:	f003 0303 	and.w	r3, r3, #3
 800588a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800588c:	4b61      	ldr	r3, [pc, #388]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800588e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005892:	0e1b      	lsrs	r3, r3, #24
 8005894:	f003 030f 	and.w	r3, r3, #15
 8005898:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	019a      	lsls	r2, r3, #6
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	041b      	lsls	r3, r3, #16
 80058a4:	431a      	orrs	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	061b      	lsls	r3, r3, #24
 80058aa:	431a      	orrs	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	071b      	lsls	r3, r3, #28
 80058b2:	4958      	ldr	r1, [pc, #352]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d004      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ce:	d00a      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d02e      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058e4:	d129      	bne.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80058e6:	4b4b      	ldr	r3, [pc, #300]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058ec:	0c1b      	lsrs	r3, r3, #16
 80058ee:	f003 0303 	and.w	r3, r3, #3
 80058f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80058f4:	4b47      	ldr	r3, [pc, #284]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058fa:	0f1b      	lsrs	r3, r3, #28
 80058fc:	f003 0307 	and.w	r3, r3, #7
 8005900:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	019a      	lsls	r2, r3, #6
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	041b      	lsls	r3, r3, #16
 800590c:	431a      	orrs	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	061b      	lsls	r3, r3, #24
 8005914:	431a      	orrs	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	071b      	lsls	r3, r3, #28
 800591a:	493e      	ldr	r1, [pc, #248]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800591c:	4313      	orrs	r3, r2
 800591e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005922:	4b3c      	ldr	r3, [pc, #240]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005928:	f023 021f 	bic.w	r2, r3, #31
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	3b01      	subs	r3, #1
 8005932:	4938      	ldr	r1, [pc, #224]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005934:	4313      	orrs	r3, r2
 8005936:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d01d      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005946:	4b33      	ldr	r3, [pc, #204]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800594c:	0e1b      	lsrs	r3, r3, #24
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005954:	4b2f      	ldr	r3, [pc, #188]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800595a:	0f1b      	lsrs	r3, r3, #28
 800595c:	f003 0307 	and.w	r3, r3, #7
 8005960:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	019a      	lsls	r2, r3, #6
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	041b      	lsls	r3, r3, #16
 800596e:	431a      	orrs	r2, r3
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	061b      	lsls	r3, r3, #24
 8005974:	431a      	orrs	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	071b      	lsls	r3, r3, #28
 800597a:	4926      	ldr	r1, [pc, #152]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800597c:	4313      	orrs	r3, r2
 800597e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d011      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	019a      	lsls	r2, r3, #6
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	041b      	lsls	r3, r3, #16
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	061b      	lsls	r3, r3, #24
 80059a2:	431a      	orrs	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	071b      	lsls	r3, r3, #28
 80059aa:	491a      	ldr	r1, [pc, #104]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059b2:	4b18      	ldr	r3, [pc, #96]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a17      	ldr	r2, [pc, #92]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059be:	f7fc fd31 	bl	8002424 <HAL_GetTick>
 80059c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059c4:	e008      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059c6:	f7fc fd2d 	bl	8002424 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b64      	cmp	r3, #100	; 0x64
 80059d2:	d901      	bls.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e0d8      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059d8:	4b0e      	ldr	r3, [pc, #56]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d0f0      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	f040 80ce 	bne.w	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80059ec:	4b09      	ldr	r3, [pc, #36]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a08      	ldr	r2, [pc, #32]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059f8:	f7fc fd14 	bl	8002424 <HAL_GetTick>
 80059fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059fe:	e00b      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a00:	f7fc fd10 	bl	8002424 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b64      	cmp	r3, #100	; 0x64
 8005a0c:	d904      	bls.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e0bb      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005a12:	bf00      	nop
 8005a14:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a18:	4b5e      	ldr	r3, [pc, #376]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a24:	d0ec      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d009      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d02e      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d12a      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a4e:	4b51      	ldr	r3, [pc, #324]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a54:	0c1b      	lsrs	r3, r3, #16
 8005a56:	f003 0303 	and.w	r3, r3, #3
 8005a5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a5c:	4b4d      	ldr	r3, [pc, #308]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a62:	0f1b      	lsrs	r3, r3, #28
 8005a64:	f003 0307 	and.w	r3, r3, #7
 8005a68:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	019a      	lsls	r2, r3, #6
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	041b      	lsls	r3, r3, #16
 8005a74:	431a      	orrs	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	061b      	lsls	r3, r3, #24
 8005a7c:	431a      	orrs	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	071b      	lsls	r3, r3, #28
 8005a82:	4944      	ldr	r1, [pc, #272]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a8a:	4b42      	ldr	r3, [pc, #264]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a90:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	021b      	lsls	r3, r3, #8
 8005a9c:	493d      	ldr	r1, [pc, #244]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d022      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ab4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ab8:	d11d      	bne.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005aba:	4b36      	ldr	r3, [pc, #216]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac0:	0e1b      	lsrs	r3, r3, #24
 8005ac2:	f003 030f 	and.w	r3, r3, #15
 8005ac6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ac8:	4b32      	ldr	r3, [pc, #200]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ace:	0f1b      	lsrs	r3, r3, #28
 8005ad0:	f003 0307 	and.w	r3, r3, #7
 8005ad4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	019a      	lsls	r2, r3, #6
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	041b      	lsls	r3, r3, #16
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	061b      	lsls	r3, r3, #24
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	071b      	lsls	r3, r3, #28
 8005aee:	4929      	ldr	r1, [pc, #164]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0308 	and.w	r3, r3, #8
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d028      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b02:	4b24      	ldr	r3, [pc, #144]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b08:	0e1b      	lsrs	r3, r3, #24
 8005b0a:	f003 030f 	and.w	r3, r3, #15
 8005b0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b10:	4b20      	ldr	r3, [pc, #128]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b16:	0c1b      	lsrs	r3, r3, #16
 8005b18:	f003 0303 	and.w	r3, r3, #3
 8005b1c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	019a      	lsls	r2, r3, #6
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	041b      	lsls	r3, r3, #16
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	061b      	lsls	r3, r3, #24
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	071b      	lsls	r3, r3, #28
 8005b36:	4917      	ldr	r1, [pc, #92]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005b3e:	4b15      	ldr	r3, [pc, #84]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4c:	4911      	ldr	r1, [pc, #68]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b54:	4b0f      	ldr	r3, [pc, #60]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a0e      	ldr	r2, [pc, #56]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b60:	f7fc fc60 	bl	8002424 <HAL_GetTick>
 8005b64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b66:	e008      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b68:	f7fc fc5c 	bl	8002424 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b64      	cmp	r3, #100	; 0x64
 8005b74:	d901      	bls.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e007      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b7a:	4b06      	ldr	r3, [pc, #24]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b86:	d1ef      	bne.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3720      	adds	r7, #32
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	40023800 	.word	0x40023800

08005b98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e049      	b.n	8005c3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d106      	bne.n	8005bc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f841 	bl	8005c46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4610      	mov	r0, r2
 8005bd8:	f000 fa00 	bl	8005fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005c4e:	bf00      	nop
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
	...

08005c5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d001      	beq.n	8005c74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e054      	b.n	8005d1e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0201 	orr.w	r2, r2, #1
 8005c8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a26      	ldr	r2, [pc, #152]	; (8005d2c <HAL_TIM_Base_Start_IT+0xd0>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d022      	beq.n	8005cdc <HAL_TIM_Base_Start_IT+0x80>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c9e:	d01d      	beq.n	8005cdc <HAL_TIM_Base_Start_IT+0x80>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a22      	ldr	r2, [pc, #136]	; (8005d30 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d018      	beq.n	8005cdc <HAL_TIM_Base_Start_IT+0x80>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a21      	ldr	r2, [pc, #132]	; (8005d34 <HAL_TIM_Base_Start_IT+0xd8>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d013      	beq.n	8005cdc <HAL_TIM_Base_Start_IT+0x80>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a1f      	ldr	r2, [pc, #124]	; (8005d38 <HAL_TIM_Base_Start_IT+0xdc>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d00e      	beq.n	8005cdc <HAL_TIM_Base_Start_IT+0x80>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a1e      	ldr	r2, [pc, #120]	; (8005d3c <HAL_TIM_Base_Start_IT+0xe0>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d009      	beq.n	8005cdc <HAL_TIM_Base_Start_IT+0x80>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a1c      	ldr	r2, [pc, #112]	; (8005d40 <HAL_TIM_Base_Start_IT+0xe4>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d004      	beq.n	8005cdc <HAL_TIM_Base_Start_IT+0x80>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a1b      	ldr	r2, [pc, #108]	; (8005d44 <HAL_TIM_Base_Start_IT+0xe8>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d115      	bne.n	8005d08 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689a      	ldr	r2, [r3, #8]
 8005ce2:	4b19      	ldr	r3, [pc, #100]	; (8005d48 <HAL_TIM_Base_Start_IT+0xec>)
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2b06      	cmp	r3, #6
 8005cec:	d015      	beq.n	8005d1a <HAL_TIM_Base_Start_IT+0xbe>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf4:	d011      	beq.n	8005d1a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f042 0201 	orr.w	r2, r2, #1
 8005d04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d06:	e008      	b.n	8005d1a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0201 	orr.w	r2, r2, #1
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	e000      	b.n	8005d1c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	40010000 	.word	0x40010000
 8005d30:	40000400 	.word	0x40000400
 8005d34:	40000800 	.word	0x40000800
 8005d38:	40000c00 	.word	0x40000c00
 8005d3c:	40010400 	.word	0x40010400
 8005d40:	40014000 	.word	0x40014000
 8005d44:	40001800 	.word	0x40001800
 8005d48:	00010007 	.word	0x00010007

08005d4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d122      	bne.n	8005da8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d11b      	bne.n	8005da8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f06f 0202 	mvn.w	r2, #2
 8005d78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f905 	bl	8005f9e <HAL_TIM_IC_CaptureCallback>
 8005d94:	e005      	b.n	8005da2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f8f7 	bl	8005f8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f908 	bl	8005fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f003 0304 	and.w	r3, r3, #4
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	d122      	bne.n	8005dfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d11b      	bne.n	8005dfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f06f 0204 	mvn.w	r2, #4
 8005dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2202      	movs	r2, #2
 8005dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f8db 	bl	8005f9e <HAL_TIM_IC_CaptureCallback>
 8005de8:	e005      	b.n	8005df6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f8cd 	bl	8005f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f8de 	bl	8005fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f003 0308 	and.w	r3, r3, #8
 8005e06:	2b08      	cmp	r3, #8
 8005e08:	d122      	bne.n	8005e50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d11b      	bne.n	8005e50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f06f 0208 	mvn.w	r2, #8
 8005e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2204      	movs	r2, #4
 8005e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	f003 0303 	and.w	r3, r3, #3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f8b1 	bl	8005f9e <HAL_TIM_IC_CaptureCallback>
 8005e3c:	e005      	b.n	8005e4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f8a3 	bl	8005f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f8b4 	bl	8005fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f003 0310 	and.w	r3, r3, #16
 8005e5a:	2b10      	cmp	r3, #16
 8005e5c:	d122      	bne.n	8005ea4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f003 0310 	and.w	r3, r3, #16
 8005e68:	2b10      	cmp	r3, #16
 8005e6a:	d11b      	bne.n	8005ea4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f06f 0210 	mvn.w	r2, #16
 8005e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2208      	movs	r2, #8
 8005e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f887 	bl	8005f9e <HAL_TIM_IC_CaptureCallback>
 8005e90:	e005      	b.n	8005e9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f879 	bl	8005f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f88a 	bl	8005fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d10e      	bne.n	8005ed0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d107      	bne.n	8005ed0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f06f 0201 	mvn.w	r2, #1
 8005ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7fb fe64 	bl	8001b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eda:	2b80      	cmp	r3, #128	; 0x80
 8005edc:	d10e      	bne.n	8005efc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee8:	2b80      	cmp	r3, #128	; 0x80
 8005eea:	d107      	bne.n	8005efc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f91a 	bl	8006130 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f0a:	d10e      	bne.n	8005f2a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f16:	2b80      	cmp	r3, #128	; 0x80
 8005f18:	d107      	bne.n	8005f2a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f90d 	bl	8006144 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f34:	2b40      	cmp	r3, #64	; 0x40
 8005f36:	d10e      	bne.n	8005f56 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f42:	2b40      	cmp	r3, #64	; 0x40
 8005f44:	d107      	bne.n	8005f56 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f838 	bl	8005fc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	f003 0320 	and.w	r3, r3, #32
 8005f60:	2b20      	cmp	r3, #32
 8005f62:	d10e      	bne.n	8005f82 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f003 0320 	and.w	r3, r3, #32
 8005f6e:	2b20      	cmp	r3, #32
 8005f70:	d107      	bne.n	8005f82 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f06f 0220 	mvn.w	r2, #32
 8005f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f8cd 	bl	800611c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f82:	bf00      	nop
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f92:	bf00      	nop
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fba:	bf00      	nop
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
	...

08005fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a40      	ldr	r2, [pc, #256]	; (80060f0 <TIM_Base_SetConfig+0x114>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d013      	beq.n	800601c <TIM_Base_SetConfig+0x40>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ffa:	d00f      	beq.n	800601c <TIM_Base_SetConfig+0x40>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a3d      	ldr	r2, [pc, #244]	; (80060f4 <TIM_Base_SetConfig+0x118>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d00b      	beq.n	800601c <TIM_Base_SetConfig+0x40>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a3c      	ldr	r2, [pc, #240]	; (80060f8 <TIM_Base_SetConfig+0x11c>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d007      	beq.n	800601c <TIM_Base_SetConfig+0x40>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a3b      	ldr	r2, [pc, #236]	; (80060fc <TIM_Base_SetConfig+0x120>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d003      	beq.n	800601c <TIM_Base_SetConfig+0x40>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a3a      	ldr	r2, [pc, #232]	; (8006100 <TIM_Base_SetConfig+0x124>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d108      	bne.n	800602e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	4313      	orrs	r3, r2
 800602c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a2f      	ldr	r2, [pc, #188]	; (80060f0 <TIM_Base_SetConfig+0x114>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d02b      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800603c:	d027      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a2c      	ldr	r2, [pc, #176]	; (80060f4 <TIM_Base_SetConfig+0x118>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d023      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a2b      	ldr	r2, [pc, #172]	; (80060f8 <TIM_Base_SetConfig+0x11c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d01f      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a2a      	ldr	r2, [pc, #168]	; (80060fc <TIM_Base_SetConfig+0x120>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d01b      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a29      	ldr	r2, [pc, #164]	; (8006100 <TIM_Base_SetConfig+0x124>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d017      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a28      	ldr	r2, [pc, #160]	; (8006104 <TIM_Base_SetConfig+0x128>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d013      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a27      	ldr	r2, [pc, #156]	; (8006108 <TIM_Base_SetConfig+0x12c>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00f      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a26      	ldr	r2, [pc, #152]	; (800610c <TIM_Base_SetConfig+0x130>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d00b      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a25      	ldr	r2, [pc, #148]	; (8006110 <TIM_Base_SetConfig+0x134>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d007      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a24      	ldr	r2, [pc, #144]	; (8006114 <TIM_Base_SetConfig+0x138>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d003      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a23      	ldr	r2, [pc, #140]	; (8006118 <TIM_Base_SetConfig+0x13c>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d108      	bne.n	80060a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	4313      	orrs	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a0a      	ldr	r2, [pc, #40]	; (80060f0 <TIM_Base_SetConfig+0x114>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d003      	beq.n	80060d4 <TIM_Base_SetConfig+0xf8>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a0c      	ldr	r2, [pc, #48]	; (8006100 <TIM_Base_SetConfig+0x124>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d103      	bne.n	80060dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	691a      	ldr	r2, [r3, #16]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	615a      	str	r2, [r3, #20]
}
 80060e2:	bf00      	nop
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	40010000 	.word	0x40010000
 80060f4:	40000400 	.word	0x40000400
 80060f8:	40000800 	.word	0x40000800
 80060fc:	40000c00 	.word	0x40000c00
 8006100:	40010400 	.word	0x40010400
 8006104:	40014000 	.word	0x40014000
 8006108:	40014400 	.word	0x40014400
 800610c:	40014800 	.word	0x40014800
 8006110:	40001800 	.word	0x40001800
 8006114:	40001c00 	.word	0x40001c00
 8006118:	40002000 	.word	0x40002000

0800611c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e040      	b.n	80061ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800616e:	2b00      	cmp	r3, #0
 8006170:	d106      	bne.n	8006180 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7fb fe68 	bl	8001e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2224      	movs	r2, #36	; 0x24
 8006184:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 0201 	bic.w	r2, r2, #1
 8006194:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fbc2 	bl	8006920 <UART_SetConfig>
 800619c:	4603      	mov	r3, r0
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d101      	bne.n	80061a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e022      	b.n	80061ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fe1a 	bl	8006de8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689a      	ldr	r2, [r3, #8]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0201 	orr.w	r2, r2, #1
 80061e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fea1 	bl	8006f2c <UART_CheckIdleState>
 80061ea:	4603      	mov	r3, r0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b08a      	sub	sp, #40	; 0x28
 80061f8:	af02      	add	r7, sp, #8
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	603b      	str	r3, [r7, #0]
 8006200:	4613      	mov	r3, r2
 8006202:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006208:	2b20      	cmp	r3, #32
 800620a:	d171      	bne.n	80062f0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d002      	beq.n	8006218 <HAL_UART_Transmit+0x24>
 8006212:	88fb      	ldrh	r3, [r7, #6]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e06a      	b.n	80062f2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2221      	movs	r2, #33	; 0x21
 8006228:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800622a:	f7fc f8fb 	bl	8002424 <HAL_GetTick>
 800622e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	88fa      	ldrh	r2, [r7, #6]
 8006234:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	88fa      	ldrh	r2, [r7, #6]
 800623c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006248:	d108      	bne.n	800625c <HAL_UART_Transmit+0x68>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d104      	bne.n	800625c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006252:	2300      	movs	r3, #0
 8006254:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	61bb      	str	r3, [r7, #24]
 800625a:	e003      	b.n	8006264 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006260:	2300      	movs	r3, #0
 8006262:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006264:	e02c      	b.n	80062c0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	2200      	movs	r2, #0
 800626e:	2180      	movs	r1, #128	; 0x80
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 fea8 	bl	8006fc6 <UART_WaitOnFlagUntilTimeout>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d001      	beq.n	8006280 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e038      	b.n	80062f2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10b      	bne.n	800629e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	881b      	ldrh	r3, [r3, #0]
 800628a:	461a      	mov	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006294:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	3302      	adds	r3, #2
 800629a:	61bb      	str	r3, [r7, #24]
 800629c:	e007      	b.n	80062ae <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	781a      	ldrb	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	3301      	adds	r3, #1
 80062ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	3b01      	subs	r3, #1
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1cc      	bne.n	8006266 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	2200      	movs	r2, #0
 80062d4:	2140      	movs	r1, #64	; 0x40
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f000 fe75 	bl	8006fc6 <UART_WaitOnFlagUntilTimeout>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e005      	b.n	80062f2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2220      	movs	r2, #32
 80062ea:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80062ec:	2300      	movs	r3, #0
 80062ee:	e000      	b.n	80062f2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80062f0:	2302      	movs	r3, #2
  }
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3720      	adds	r7, #32
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
	...

080062fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b0ba      	sub	sp, #232	; 0xe8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006322:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006326:	f640 030f 	movw	r3, #2063	; 0x80f
 800632a:	4013      	ands	r3, r2
 800632c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006330:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006334:	2b00      	cmp	r3, #0
 8006336:	d115      	bne.n	8006364 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800633c:	f003 0320 	and.w	r3, r3, #32
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00f      	beq.n	8006364 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006348:	f003 0320 	and.w	r3, r3, #32
 800634c:	2b00      	cmp	r3, #0
 800634e:	d009      	beq.n	8006364 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 82ac 	beq.w	80068b2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	4798      	blx	r3
      }
      return;
 8006362:	e2a6      	b.n	80068b2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006364:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 8117 	beq.w	800659c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800636e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	d106      	bne.n	8006388 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800637a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800637e:	4b85      	ldr	r3, [pc, #532]	; (8006594 <HAL_UART_IRQHandler+0x298>)
 8006380:	4013      	ands	r3, r2
 8006382:	2b00      	cmp	r3, #0
 8006384:	f000 810a 	beq.w	800659c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	2b00      	cmp	r3, #0
 8006392:	d011      	beq.n	80063b8 <HAL_UART_IRQHandler+0xbc>
 8006394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00b      	beq.n	80063b8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2201      	movs	r2, #1
 80063a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063ae:	f043 0201 	orr.w	r2, r3, #1
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063bc:	f003 0302 	and.w	r3, r3, #2
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d011      	beq.n	80063e8 <HAL_UART_IRQHandler+0xec>
 80063c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00b      	beq.n	80063e8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2202      	movs	r2, #2
 80063d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063de:	f043 0204 	orr.w	r2, r3, #4
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ec:	f003 0304 	and.w	r3, r3, #4
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d011      	beq.n	8006418 <HAL_UART_IRQHandler+0x11c>
 80063f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00b      	beq.n	8006418 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2204      	movs	r2, #4
 8006406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800640e:	f043 0202 	orr.w	r2, r3, #2
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800641c:	f003 0308 	and.w	r3, r3, #8
 8006420:	2b00      	cmp	r3, #0
 8006422:	d017      	beq.n	8006454 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006428:	f003 0320 	and.w	r3, r3, #32
 800642c:	2b00      	cmp	r3, #0
 800642e:	d105      	bne.n	800643c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006434:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00b      	beq.n	8006454 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2208      	movs	r2, #8
 8006442:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800644a:	f043 0208 	orr.w	r2, r3, #8
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800645c:	2b00      	cmp	r3, #0
 800645e:	d012      	beq.n	8006486 <HAL_UART_IRQHandler+0x18a>
 8006460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006464:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00c      	beq.n	8006486 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006474:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800647c:	f043 0220 	orr.w	r2, r3, #32
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 8212 	beq.w	80068b6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006496:	f003 0320 	and.w	r3, r3, #32
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00d      	beq.n	80064ba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800649e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064a2:	f003 0320 	and.w	r3, r3, #32
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d007      	beq.n	80064ba <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ce:	2b40      	cmp	r3, #64	; 0x40
 80064d0:	d005      	beq.n	80064de <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80064d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d04f      	beq.n	800657e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fe37 	bl	8007152 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ee:	2b40      	cmp	r3, #64	; 0x40
 80064f0:	d141      	bne.n	8006576 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3308      	adds	r3, #8
 80064f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006500:	e853 3f00 	ldrex	r3, [r3]
 8006504:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006508:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800650c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006510:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3308      	adds	r3, #8
 800651a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800651e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006522:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006526:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800652a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800652e:	e841 2300 	strex	r3, r2, [r1]
 8006532:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006536:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1d9      	bne.n	80064f2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006542:	2b00      	cmp	r3, #0
 8006544:	d013      	beq.n	800656e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800654a:	4a13      	ldr	r2, [pc, #76]	; (8006598 <HAL_UART_IRQHandler+0x29c>)
 800654c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006552:	4618      	mov	r0, r3
 8006554:	f7fc fff2 	bl	800353c <HAL_DMA_Abort_IT>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d017      	beq.n	800658e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006568:	4610      	mov	r0, r2
 800656a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800656c:	e00f      	b.n	800658e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f9b6 	bl	80068e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006574:	e00b      	b.n	800658e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f9b2 	bl	80068e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800657c:	e007      	b.n	800658e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f9ae 	bl	80068e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800658c:	e193      	b.n	80068b6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800658e:	bf00      	nop
    return;
 8006590:	e191      	b.n	80068b6 <HAL_UART_IRQHandler+0x5ba>
 8006592:	bf00      	nop
 8006594:	04000120 	.word	0x04000120
 8006598:	0800721b 	.word	0x0800721b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	f040 814c 	bne.w	800683e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80065a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065aa:	f003 0310 	and.w	r3, r3, #16
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f000 8145 	beq.w	800683e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80065b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b8:	f003 0310 	and.w	r3, r3, #16
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f000 813e 	beq.w	800683e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2210      	movs	r2, #16
 80065c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d4:	2b40      	cmp	r3, #64	; 0x40
 80065d6:	f040 80b6 	bne.w	8006746 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f000 8165 	beq.w	80068ba <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80065f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065fa:	429a      	cmp	r2, r3
 80065fc:	f080 815d 	bcs.w	80068ba <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006606:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800660e:	69db      	ldr	r3, [r3, #28]
 8006610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006614:	f000 8086 	beq.w	8006724 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006624:	e853 3f00 	ldrex	r3, [r3]
 8006628:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800662c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006634:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	461a      	mov	r2, r3
 800663e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006642:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006646:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800664e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006652:	e841 2300 	strex	r3, r2, [r1]
 8006656:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800665a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1da      	bne.n	8006618 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3308      	adds	r3, #8
 8006668:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800666c:	e853 3f00 	ldrex	r3, [r3]
 8006670:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006672:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006674:	f023 0301 	bic.w	r3, r3, #1
 8006678:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3308      	adds	r3, #8
 8006682:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006686:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800668a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800668e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006692:	e841 2300 	strex	r3, r2, [r1]
 8006696:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006698:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1e1      	bne.n	8006662 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	3308      	adds	r3, #8
 80066a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066a8:	e853 3f00 	ldrex	r3, [r3]
 80066ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80066ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	3308      	adds	r3, #8
 80066be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80066c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80066c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80066c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80066ca:	e841 2300 	strex	r3, r2, [r1]
 80066ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80066d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1e3      	bne.n	800669e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2220      	movs	r2, #32
 80066da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066f4:	f023 0310 	bic.w	r3, r3, #16
 80066f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	461a      	mov	r2, r3
 8006702:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006706:	65bb      	str	r3, [r7, #88]	; 0x58
 8006708:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800670c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800670e:	e841 2300 	strex	r3, r2, [r1]
 8006712:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1e4      	bne.n	80066e4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800671e:	4618      	mov	r0, r3
 8006720:	f7fc fe9c 	bl	800345c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2202      	movs	r2, #2
 8006728:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006736:	b29b      	uxth	r3, r3
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	b29b      	uxth	r3, r3
 800673c:	4619      	mov	r1, r3
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f8d8 	bl	80068f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006744:	e0b9      	b.n	80068ba <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006752:	b29b      	uxth	r3, r3
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006760:	b29b      	uxth	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 80ab 	beq.w	80068be <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006768:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 80a6 	beq.w	80068be <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677a:	e853 3f00 	ldrex	r3, [r3]
 800677e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006782:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006786:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	461a      	mov	r2, r3
 8006790:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006794:	647b      	str	r3, [r7, #68]	; 0x44
 8006796:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006798:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800679a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800679c:	e841 2300 	strex	r3, r2, [r1]
 80067a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1e4      	bne.n	8006772 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	3308      	adds	r3, #8
 80067ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b2:	e853 3f00 	ldrex	r3, [r3]
 80067b6:	623b      	str	r3, [r7, #32]
   return(result);
 80067b8:	6a3b      	ldr	r3, [r7, #32]
 80067ba:	f023 0301 	bic.w	r3, r3, #1
 80067be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3308      	adds	r3, #8
 80067c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80067cc:	633a      	str	r2, [r7, #48]	; 0x30
 80067ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067d4:	e841 2300 	strex	r3, r2, [r1]
 80067d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1e3      	bne.n	80067a8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2220      	movs	r2, #32
 80067e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	e853 3f00 	ldrex	r3, [r3]
 8006800:	60fb      	str	r3, [r7, #12]
   return(result);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f023 0310 	bic.w	r3, r3, #16
 8006808:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	461a      	mov	r2, r3
 8006812:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006816:	61fb      	str	r3, [r7, #28]
 8006818:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681a:	69b9      	ldr	r1, [r7, #24]
 800681c:	69fa      	ldr	r2, [r7, #28]
 800681e:	e841 2300 	strex	r3, r2, [r1]
 8006822:	617b      	str	r3, [r7, #20]
   return(result);
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1e4      	bne.n	80067f4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2202      	movs	r2, #2
 800682e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006830:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006834:	4619      	mov	r1, r3
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f85c 	bl	80068f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800683c:	e03f      	b.n	80068be <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800683e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00e      	beq.n	8006868 <HAL_UART_IRQHandler+0x56c>
 800684a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800684e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d008      	beq.n	8006868 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800685e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f853 	bl	800690c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006866:	e02d      	b.n	80068c4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800686c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00e      	beq.n	8006892 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800687c:	2b00      	cmp	r3, #0
 800687e:	d008      	beq.n	8006892 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006884:	2b00      	cmp	r3, #0
 8006886:	d01c      	beq.n	80068c2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	4798      	blx	r3
    }
    return;
 8006890:	e017      	b.n	80068c2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689a:	2b00      	cmp	r3, #0
 800689c:	d012      	beq.n	80068c4 <HAL_UART_IRQHandler+0x5c8>
 800689e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00c      	beq.n	80068c4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 fccb 	bl	8007246 <UART_EndTransmit_IT>
    return;
 80068b0:	e008      	b.n	80068c4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80068b2:	bf00      	nop
 80068b4:	e006      	b.n	80068c4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80068b6:	bf00      	nop
 80068b8:	e004      	b.n	80068c4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80068ba:	bf00      	nop
 80068bc:	e002      	b.n	80068c4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80068be:	bf00      	nop
 80068c0:	e000      	b.n	80068c4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80068c2:	bf00      	nop
  }

}
 80068c4:	37e8      	adds	r7, #232	; 0xe8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop

080068cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	460b      	mov	r3, r1
 80068fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006928:	2300      	movs	r3, #0
 800692a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	431a      	orrs	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	431a      	orrs	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	69db      	ldr	r3, [r3, #28]
 8006940:	4313      	orrs	r3, r2
 8006942:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	4ba6      	ldr	r3, [pc, #664]	; (8006be4 <UART_SetConfig+0x2c4>)
 800694c:	4013      	ands	r3, r2
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	6812      	ldr	r2, [r2, #0]
 8006952:	6979      	ldr	r1, [r7, #20]
 8006954:	430b      	orrs	r3, r1
 8006956:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	430a      	orrs	r2, r1
 800696c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	4313      	orrs	r3, r2
 800697c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	430a      	orrs	r2, r1
 8006990:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a94      	ldr	r2, [pc, #592]	; (8006be8 <UART_SetConfig+0x2c8>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d120      	bne.n	80069de <UART_SetConfig+0xbe>
 800699c:	4b93      	ldr	r3, [pc, #588]	; (8006bec <UART_SetConfig+0x2cc>)
 800699e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a2:	f003 0303 	and.w	r3, r3, #3
 80069a6:	2b03      	cmp	r3, #3
 80069a8:	d816      	bhi.n	80069d8 <UART_SetConfig+0xb8>
 80069aa:	a201      	add	r2, pc, #4	; (adr r2, 80069b0 <UART_SetConfig+0x90>)
 80069ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b0:	080069c1 	.word	0x080069c1
 80069b4:	080069cd 	.word	0x080069cd
 80069b8:	080069c7 	.word	0x080069c7
 80069bc:	080069d3 	.word	0x080069d3
 80069c0:	2301      	movs	r3, #1
 80069c2:	77fb      	strb	r3, [r7, #31]
 80069c4:	e150      	b.n	8006c68 <UART_SetConfig+0x348>
 80069c6:	2302      	movs	r3, #2
 80069c8:	77fb      	strb	r3, [r7, #31]
 80069ca:	e14d      	b.n	8006c68 <UART_SetConfig+0x348>
 80069cc:	2304      	movs	r3, #4
 80069ce:	77fb      	strb	r3, [r7, #31]
 80069d0:	e14a      	b.n	8006c68 <UART_SetConfig+0x348>
 80069d2:	2308      	movs	r3, #8
 80069d4:	77fb      	strb	r3, [r7, #31]
 80069d6:	e147      	b.n	8006c68 <UART_SetConfig+0x348>
 80069d8:	2310      	movs	r3, #16
 80069da:	77fb      	strb	r3, [r7, #31]
 80069dc:	e144      	b.n	8006c68 <UART_SetConfig+0x348>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a83      	ldr	r2, [pc, #524]	; (8006bf0 <UART_SetConfig+0x2d0>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d132      	bne.n	8006a4e <UART_SetConfig+0x12e>
 80069e8:	4b80      	ldr	r3, [pc, #512]	; (8006bec <UART_SetConfig+0x2cc>)
 80069ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ee:	f003 030c 	and.w	r3, r3, #12
 80069f2:	2b0c      	cmp	r3, #12
 80069f4:	d828      	bhi.n	8006a48 <UART_SetConfig+0x128>
 80069f6:	a201      	add	r2, pc, #4	; (adr r2, 80069fc <UART_SetConfig+0xdc>)
 80069f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fc:	08006a31 	.word	0x08006a31
 8006a00:	08006a49 	.word	0x08006a49
 8006a04:	08006a49 	.word	0x08006a49
 8006a08:	08006a49 	.word	0x08006a49
 8006a0c:	08006a3d 	.word	0x08006a3d
 8006a10:	08006a49 	.word	0x08006a49
 8006a14:	08006a49 	.word	0x08006a49
 8006a18:	08006a49 	.word	0x08006a49
 8006a1c:	08006a37 	.word	0x08006a37
 8006a20:	08006a49 	.word	0x08006a49
 8006a24:	08006a49 	.word	0x08006a49
 8006a28:	08006a49 	.word	0x08006a49
 8006a2c:	08006a43 	.word	0x08006a43
 8006a30:	2300      	movs	r3, #0
 8006a32:	77fb      	strb	r3, [r7, #31]
 8006a34:	e118      	b.n	8006c68 <UART_SetConfig+0x348>
 8006a36:	2302      	movs	r3, #2
 8006a38:	77fb      	strb	r3, [r7, #31]
 8006a3a:	e115      	b.n	8006c68 <UART_SetConfig+0x348>
 8006a3c:	2304      	movs	r3, #4
 8006a3e:	77fb      	strb	r3, [r7, #31]
 8006a40:	e112      	b.n	8006c68 <UART_SetConfig+0x348>
 8006a42:	2308      	movs	r3, #8
 8006a44:	77fb      	strb	r3, [r7, #31]
 8006a46:	e10f      	b.n	8006c68 <UART_SetConfig+0x348>
 8006a48:	2310      	movs	r3, #16
 8006a4a:	77fb      	strb	r3, [r7, #31]
 8006a4c:	e10c      	b.n	8006c68 <UART_SetConfig+0x348>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a68      	ldr	r2, [pc, #416]	; (8006bf4 <UART_SetConfig+0x2d4>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d120      	bne.n	8006a9a <UART_SetConfig+0x17a>
 8006a58:	4b64      	ldr	r3, [pc, #400]	; (8006bec <UART_SetConfig+0x2cc>)
 8006a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a5e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a62:	2b30      	cmp	r3, #48	; 0x30
 8006a64:	d013      	beq.n	8006a8e <UART_SetConfig+0x16e>
 8006a66:	2b30      	cmp	r3, #48	; 0x30
 8006a68:	d814      	bhi.n	8006a94 <UART_SetConfig+0x174>
 8006a6a:	2b20      	cmp	r3, #32
 8006a6c:	d009      	beq.n	8006a82 <UART_SetConfig+0x162>
 8006a6e:	2b20      	cmp	r3, #32
 8006a70:	d810      	bhi.n	8006a94 <UART_SetConfig+0x174>
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d002      	beq.n	8006a7c <UART_SetConfig+0x15c>
 8006a76:	2b10      	cmp	r3, #16
 8006a78:	d006      	beq.n	8006a88 <UART_SetConfig+0x168>
 8006a7a:	e00b      	b.n	8006a94 <UART_SetConfig+0x174>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	77fb      	strb	r3, [r7, #31]
 8006a80:	e0f2      	b.n	8006c68 <UART_SetConfig+0x348>
 8006a82:	2302      	movs	r3, #2
 8006a84:	77fb      	strb	r3, [r7, #31]
 8006a86:	e0ef      	b.n	8006c68 <UART_SetConfig+0x348>
 8006a88:	2304      	movs	r3, #4
 8006a8a:	77fb      	strb	r3, [r7, #31]
 8006a8c:	e0ec      	b.n	8006c68 <UART_SetConfig+0x348>
 8006a8e:	2308      	movs	r3, #8
 8006a90:	77fb      	strb	r3, [r7, #31]
 8006a92:	e0e9      	b.n	8006c68 <UART_SetConfig+0x348>
 8006a94:	2310      	movs	r3, #16
 8006a96:	77fb      	strb	r3, [r7, #31]
 8006a98:	e0e6      	b.n	8006c68 <UART_SetConfig+0x348>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a56      	ldr	r2, [pc, #344]	; (8006bf8 <UART_SetConfig+0x2d8>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d120      	bne.n	8006ae6 <UART_SetConfig+0x1c6>
 8006aa4:	4b51      	ldr	r3, [pc, #324]	; (8006bec <UART_SetConfig+0x2cc>)
 8006aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aaa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006aae:	2bc0      	cmp	r3, #192	; 0xc0
 8006ab0:	d013      	beq.n	8006ada <UART_SetConfig+0x1ba>
 8006ab2:	2bc0      	cmp	r3, #192	; 0xc0
 8006ab4:	d814      	bhi.n	8006ae0 <UART_SetConfig+0x1c0>
 8006ab6:	2b80      	cmp	r3, #128	; 0x80
 8006ab8:	d009      	beq.n	8006ace <UART_SetConfig+0x1ae>
 8006aba:	2b80      	cmp	r3, #128	; 0x80
 8006abc:	d810      	bhi.n	8006ae0 <UART_SetConfig+0x1c0>
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d002      	beq.n	8006ac8 <UART_SetConfig+0x1a8>
 8006ac2:	2b40      	cmp	r3, #64	; 0x40
 8006ac4:	d006      	beq.n	8006ad4 <UART_SetConfig+0x1b4>
 8006ac6:	e00b      	b.n	8006ae0 <UART_SetConfig+0x1c0>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	77fb      	strb	r3, [r7, #31]
 8006acc:	e0cc      	b.n	8006c68 <UART_SetConfig+0x348>
 8006ace:	2302      	movs	r3, #2
 8006ad0:	77fb      	strb	r3, [r7, #31]
 8006ad2:	e0c9      	b.n	8006c68 <UART_SetConfig+0x348>
 8006ad4:	2304      	movs	r3, #4
 8006ad6:	77fb      	strb	r3, [r7, #31]
 8006ad8:	e0c6      	b.n	8006c68 <UART_SetConfig+0x348>
 8006ada:	2308      	movs	r3, #8
 8006adc:	77fb      	strb	r3, [r7, #31]
 8006ade:	e0c3      	b.n	8006c68 <UART_SetConfig+0x348>
 8006ae0:	2310      	movs	r3, #16
 8006ae2:	77fb      	strb	r3, [r7, #31]
 8006ae4:	e0c0      	b.n	8006c68 <UART_SetConfig+0x348>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a44      	ldr	r2, [pc, #272]	; (8006bfc <UART_SetConfig+0x2dc>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d125      	bne.n	8006b3c <UART_SetConfig+0x21c>
 8006af0:	4b3e      	ldr	r3, [pc, #248]	; (8006bec <UART_SetConfig+0x2cc>)
 8006af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006afa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006afe:	d017      	beq.n	8006b30 <UART_SetConfig+0x210>
 8006b00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b04:	d817      	bhi.n	8006b36 <UART_SetConfig+0x216>
 8006b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b0a:	d00b      	beq.n	8006b24 <UART_SetConfig+0x204>
 8006b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b10:	d811      	bhi.n	8006b36 <UART_SetConfig+0x216>
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d003      	beq.n	8006b1e <UART_SetConfig+0x1fe>
 8006b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b1a:	d006      	beq.n	8006b2a <UART_SetConfig+0x20a>
 8006b1c:	e00b      	b.n	8006b36 <UART_SetConfig+0x216>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	77fb      	strb	r3, [r7, #31]
 8006b22:	e0a1      	b.n	8006c68 <UART_SetConfig+0x348>
 8006b24:	2302      	movs	r3, #2
 8006b26:	77fb      	strb	r3, [r7, #31]
 8006b28:	e09e      	b.n	8006c68 <UART_SetConfig+0x348>
 8006b2a:	2304      	movs	r3, #4
 8006b2c:	77fb      	strb	r3, [r7, #31]
 8006b2e:	e09b      	b.n	8006c68 <UART_SetConfig+0x348>
 8006b30:	2308      	movs	r3, #8
 8006b32:	77fb      	strb	r3, [r7, #31]
 8006b34:	e098      	b.n	8006c68 <UART_SetConfig+0x348>
 8006b36:	2310      	movs	r3, #16
 8006b38:	77fb      	strb	r3, [r7, #31]
 8006b3a:	e095      	b.n	8006c68 <UART_SetConfig+0x348>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a2f      	ldr	r2, [pc, #188]	; (8006c00 <UART_SetConfig+0x2e0>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d125      	bne.n	8006b92 <UART_SetConfig+0x272>
 8006b46:	4b29      	ldr	r3, [pc, #164]	; (8006bec <UART_SetConfig+0x2cc>)
 8006b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b54:	d017      	beq.n	8006b86 <UART_SetConfig+0x266>
 8006b56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b5a:	d817      	bhi.n	8006b8c <UART_SetConfig+0x26c>
 8006b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b60:	d00b      	beq.n	8006b7a <UART_SetConfig+0x25a>
 8006b62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b66:	d811      	bhi.n	8006b8c <UART_SetConfig+0x26c>
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d003      	beq.n	8006b74 <UART_SetConfig+0x254>
 8006b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b70:	d006      	beq.n	8006b80 <UART_SetConfig+0x260>
 8006b72:	e00b      	b.n	8006b8c <UART_SetConfig+0x26c>
 8006b74:	2301      	movs	r3, #1
 8006b76:	77fb      	strb	r3, [r7, #31]
 8006b78:	e076      	b.n	8006c68 <UART_SetConfig+0x348>
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	77fb      	strb	r3, [r7, #31]
 8006b7e:	e073      	b.n	8006c68 <UART_SetConfig+0x348>
 8006b80:	2304      	movs	r3, #4
 8006b82:	77fb      	strb	r3, [r7, #31]
 8006b84:	e070      	b.n	8006c68 <UART_SetConfig+0x348>
 8006b86:	2308      	movs	r3, #8
 8006b88:	77fb      	strb	r3, [r7, #31]
 8006b8a:	e06d      	b.n	8006c68 <UART_SetConfig+0x348>
 8006b8c:	2310      	movs	r3, #16
 8006b8e:	77fb      	strb	r3, [r7, #31]
 8006b90:	e06a      	b.n	8006c68 <UART_SetConfig+0x348>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a1b      	ldr	r2, [pc, #108]	; (8006c04 <UART_SetConfig+0x2e4>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d138      	bne.n	8006c0e <UART_SetConfig+0x2ee>
 8006b9c:	4b13      	ldr	r3, [pc, #76]	; (8006bec <UART_SetConfig+0x2cc>)
 8006b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ba2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006ba6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006baa:	d017      	beq.n	8006bdc <UART_SetConfig+0x2bc>
 8006bac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bb0:	d82a      	bhi.n	8006c08 <UART_SetConfig+0x2e8>
 8006bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bb6:	d00b      	beq.n	8006bd0 <UART_SetConfig+0x2b0>
 8006bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bbc:	d824      	bhi.n	8006c08 <UART_SetConfig+0x2e8>
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d003      	beq.n	8006bca <UART_SetConfig+0x2aa>
 8006bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bc6:	d006      	beq.n	8006bd6 <UART_SetConfig+0x2b6>
 8006bc8:	e01e      	b.n	8006c08 <UART_SetConfig+0x2e8>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	77fb      	strb	r3, [r7, #31]
 8006bce:	e04b      	b.n	8006c68 <UART_SetConfig+0x348>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	77fb      	strb	r3, [r7, #31]
 8006bd4:	e048      	b.n	8006c68 <UART_SetConfig+0x348>
 8006bd6:	2304      	movs	r3, #4
 8006bd8:	77fb      	strb	r3, [r7, #31]
 8006bda:	e045      	b.n	8006c68 <UART_SetConfig+0x348>
 8006bdc:	2308      	movs	r3, #8
 8006bde:	77fb      	strb	r3, [r7, #31]
 8006be0:	e042      	b.n	8006c68 <UART_SetConfig+0x348>
 8006be2:	bf00      	nop
 8006be4:	efff69f3 	.word	0xefff69f3
 8006be8:	40011000 	.word	0x40011000
 8006bec:	40023800 	.word	0x40023800
 8006bf0:	40004400 	.word	0x40004400
 8006bf4:	40004800 	.word	0x40004800
 8006bf8:	40004c00 	.word	0x40004c00
 8006bfc:	40005000 	.word	0x40005000
 8006c00:	40011400 	.word	0x40011400
 8006c04:	40007800 	.word	0x40007800
 8006c08:	2310      	movs	r3, #16
 8006c0a:	77fb      	strb	r3, [r7, #31]
 8006c0c:	e02c      	b.n	8006c68 <UART_SetConfig+0x348>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a72      	ldr	r2, [pc, #456]	; (8006ddc <UART_SetConfig+0x4bc>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d125      	bne.n	8006c64 <UART_SetConfig+0x344>
 8006c18:	4b71      	ldr	r3, [pc, #452]	; (8006de0 <UART_SetConfig+0x4c0>)
 8006c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c1e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c22:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c26:	d017      	beq.n	8006c58 <UART_SetConfig+0x338>
 8006c28:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c2c:	d817      	bhi.n	8006c5e <UART_SetConfig+0x33e>
 8006c2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c32:	d00b      	beq.n	8006c4c <UART_SetConfig+0x32c>
 8006c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c38:	d811      	bhi.n	8006c5e <UART_SetConfig+0x33e>
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <UART_SetConfig+0x326>
 8006c3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c42:	d006      	beq.n	8006c52 <UART_SetConfig+0x332>
 8006c44:	e00b      	b.n	8006c5e <UART_SetConfig+0x33e>
 8006c46:	2300      	movs	r3, #0
 8006c48:	77fb      	strb	r3, [r7, #31]
 8006c4a:	e00d      	b.n	8006c68 <UART_SetConfig+0x348>
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	77fb      	strb	r3, [r7, #31]
 8006c50:	e00a      	b.n	8006c68 <UART_SetConfig+0x348>
 8006c52:	2304      	movs	r3, #4
 8006c54:	77fb      	strb	r3, [r7, #31]
 8006c56:	e007      	b.n	8006c68 <UART_SetConfig+0x348>
 8006c58:	2308      	movs	r3, #8
 8006c5a:	77fb      	strb	r3, [r7, #31]
 8006c5c:	e004      	b.n	8006c68 <UART_SetConfig+0x348>
 8006c5e:	2310      	movs	r3, #16
 8006c60:	77fb      	strb	r3, [r7, #31]
 8006c62:	e001      	b.n	8006c68 <UART_SetConfig+0x348>
 8006c64:	2310      	movs	r3, #16
 8006c66:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	69db      	ldr	r3, [r3, #28]
 8006c6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c70:	d15b      	bne.n	8006d2a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006c72:	7ffb      	ldrb	r3, [r7, #31]
 8006c74:	2b08      	cmp	r3, #8
 8006c76:	d828      	bhi.n	8006cca <UART_SetConfig+0x3aa>
 8006c78:	a201      	add	r2, pc, #4	; (adr r2, 8006c80 <UART_SetConfig+0x360>)
 8006c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7e:	bf00      	nop
 8006c80:	08006ca5 	.word	0x08006ca5
 8006c84:	08006cad 	.word	0x08006cad
 8006c88:	08006cb5 	.word	0x08006cb5
 8006c8c:	08006ccb 	.word	0x08006ccb
 8006c90:	08006cbb 	.word	0x08006cbb
 8006c94:	08006ccb 	.word	0x08006ccb
 8006c98:	08006ccb 	.word	0x08006ccb
 8006c9c:	08006ccb 	.word	0x08006ccb
 8006ca0:	08006cc3 	.word	0x08006cc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ca4:	f7fe faf6 	bl	8005294 <HAL_RCC_GetPCLK1Freq>
 8006ca8:	61b8      	str	r0, [r7, #24]
        break;
 8006caa:	e013      	b.n	8006cd4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cac:	f7fe fb06 	bl	80052bc <HAL_RCC_GetPCLK2Freq>
 8006cb0:	61b8      	str	r0, [r7, #24]
        break;
 8006cb2:	e00f      	b.n	8006cd4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cb4:	4b4b      	ldr	r3, [pc, #300]	; (8006de4 <UART_SetConfig+0x4c4>)
 8006cb6:	61bb      	str	r3, [r7, #24]
        break;
 8006cb8:	e00c      	b.n	8006cd4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cba:	f7fe f9d9 	bl	8005070 <HAL_RCC_GetSysClockFreq>
 8006cbe:	61b8      	str	r0, [r7, #24]
        break;
 8006cc0:	e008      	b.n	8006cd4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cc6:	61bb      	str	r3, [r7, #24]
        break;
 8006cc8:	e004      	b.n	8006cd4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	77bb      	strb	r3, [r7, #30]
        break;
 8006cd2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d074      	beq.n	8006dc4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	005a      	lsls	r2, r3, #1
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	085b      	lsrs	r3, r3, #1
 8006ce4:	441a      	add	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	2b0f      	cmp	r3, #15
 8006cf4:	d916      	bls.n	8006d24 <UART_SetConfig+0x404>
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cfc:	d212      	bcs.n	8006d24 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	f023 030f 	bic.w	r3, r3, #15
 8006d06:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	085b      	lsrs	r3, r3, #1
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	f003 0307 	and.w	r3, r3, #7
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	89fb      	ldrh	r3, [r7, #14]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	89fa      	ldrh	r2, [r7, #14]
 8006d20:	60da      	str	r2, [r3, #12]
 8006d22:	e04f      	b.n	8006dc4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	77bb      	strb	r3, [r7, #30]
 8006d28:	e04c      	b.n	8006dc4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d2a:	7ffb      	ldrb	r3, [r7, #31]
 8006d2c:	2b08      	cmp	r3, #8
 8006d2e:	d828      	bhi.n	8006d82 <UART_SetConfig+0x462>
 8006d30:	a201      	add	r2, pc, #4	; (adr r2, 8006d38 <UART_SetConfig+0x418>)
 8006d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d36:	bf00      	nop
 8006d38:	08006d5d 	.word	0x08006d5d
 8006d3c:	08006d65 	.word	0x08006d65
 8006d40:	08006d6d 	.word	0x08006d6d
 8006d44:	08006d83 	.word	0x08006d83
 8006d48:	08006d73 	.word	0x08006d73
 8006d4c:	08006d83 	.word	0x08006d83
 8006d50:	08006d83 	.word	0x08006d83
 8006d54:	08006d83 	.word	0x08006d83
 8006d58:	08006d7b 	.word	0x08006d7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d5c:	f7fe fa9a 	bl	8005294 <HAL_RCC_GetPCLK1Freq>
 8006d60:	61b8      	str	r0, [r7, #24]
        break;
 8006d62:	e013      	b.n	8006d8c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d64:	f7fe faaa 	bl	80052bc <HAL_RCC_GetPCLK2Freq>
 8006d68:	61b8      	str	r0, [r7, #24]
        break;
 8006d6a:	e00f      	b.n	8006d8c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d6c:	4b1d      	ldr	r3, [pc, #116]	; (8006de4 <UART_SetConfig+0x4c4>)
 8006d6e:	61bb      	str	r3, [r7, #24]
        break;
 8006d70:	e00c      	b.n	8006d8c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d72:	f7fe f97d 	bl	8005070 <HAL_RCC_GetSysClockFreq>
 8006d76:	61b8      	str	r0, [r7, #24]
        break;
 8006d78:	e008      	b.n	8006d8c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d7e:	61bb      	str	r3, [r7, #24]
        break;
 8006d80:	e004      	b.n	8006d8c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	77bb      	strb	r3, [r7, #30]
        break;
 8006d8a:	bf00      	nop
    }

    if (pclk != 0U)
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d018      	beq.n	8006dc4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	085a      	lsrs	r2, r3, #1
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	441a      	add	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	2b0f      	cmp	r3, #15
 8006daa:	d909      	bls.n	8006dc0 <UART_SetConfig+0x4a0>
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006db2:	d205      	bcs.n	8006dc0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	60da      	str	r2, [r3, #12]
 8006dbe:	e001      	b.n	8006dc4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006dd0:	7fbb      	ldrb	r3, [r7, #30]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3720      	adds	r7, #32
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	40007c00 	.word	0x40007c00
 8006de0:	40023800 	.word	0x40023800
 8006de4:	00f42400 	.word	0x00f42400

08006de8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df4:	f003 0301 	and.w	r3, r3, #1
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00a      	beq.n	8006e12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00a      	beq.n	8006e34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	430a      	orrs	r2, r1
 8006e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e38:	f003 0304 	and.w	r3, r3, #4
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00a      	beq.n	8006e56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	430a      	orrs	r2, r1
 8006e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5a:	f003 0308 	and.w	r3, r3, #8
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00a      	beq.n	8006e78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	430a      	orrs	r2, r1
 8006e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7c:	f003 0310 	and.w	r3, r3, #16
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00a      	beq.n	8006e9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	430a      	orrs	r2, r1
 8006e98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	f003 0320 	and.w	r3, r3, #32
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00a      	beq.n	8006ebc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	430a      	orrs	r2, r1
 8006eba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d01a      	beq.n	8006efe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	430a      	orrs	r2, r1
 8006edc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ee6:	d10a      	bne.n	8006efe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	430a      	orrs	r2, r1
 8006efc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00a      	beq.n	8006f20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	430a      	orrs	r2, r1
 8006f1e:	605a      	str	r2, [r3, #4]
  }
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af02      	add	r7, sp, #8
 8006f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f3c:	f7fb fa72 	bl	8002424 <HAL_GetTick>
 8006f40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0308 	and.w	r3, r3, #8
 8006f4c:	2b08      	cmp	r3, #8
 8006f4e:	d10e      	bne.n	8006f6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f831 	bl	8006fc6 <UART_WaitOnFlagUntilTimeout>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d001      	beq.n	8006f6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e027      	b.n	8006fbe <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0304 	and.w	r3, r3, #4
 8006f78:	2b04      	cmp	r3, #4
 8006f7a:	d10e      	bne.n	8006f9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f81b 	bl	8006fc6 <UART_WaitOnFlagUntilTimeout>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d001      	beq.n	8006f9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e011      	b.n	8006fbe <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b09c      	sub	sp, #112	; 0x70
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	60f8      	str	r0, [r7, #12]
 8006fce:	60b9      	str	r1, [r7, #8]
 8006fd0:	603b      	str	r3, [r7, #0]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fd6:	e0a7      	b.n	8007128 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fde:	f000 80a3 	beq.w	8007128 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fe2:	f7fb fa1f 	bl	8002424 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d302      	bcc.n	8006ff8 <UART_WaitOnFlagUntilTimeout+0x32>
 8006ff2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d13f      	bne.n	8007078 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007000:	e853 3f00 	ldrex	r3, [r3]
 8007004:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007008:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800700c:	667b      	str	r3, [r7, #100]	; 0x64
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	461a      	mov	r2, r3
 8007014:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007016:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007018:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800701c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800701e:	e841 2300 	strex	r3, r2, [r1]
 8007022:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1e6      	bne.n	8006ff8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3308      	adds	r3, #8
 8007030:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007034:	e853 3f00 	ldrex	r3, [r3]
 8007038:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800703a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703c:	f023 0301 	bic.w	r3, r3, #1
 8007040:	663b      	str	r3, [r7, #96]	; 0x60
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3308      	adds	r3, #8
 8007048:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800704a:	64ba      	str	r2, [r7, #72]	; 0x48
 800704c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007052:	e841 2300 	strex	r3, r2, [r1]
 8007056:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1e5      	bne.n	800702a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2220      	movs	r2, #32
 8007062:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2220      	movs	r2, #32
 8007068:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e068      	b.n	800714a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0304 	and.w	r3, r3, #4
 8007082:	2b00      	cmp	r3, #0
 8007084:	d050      	beq.n	8007128 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	69db      	ldr	r3, [r3, #28]
 800708c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007090:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007094:	d148      	bne.n	8007128 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800709e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a8:	e853 3f00 	ldrex	r3, [r3]
 80070ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070be:	637b      	str	r3, [r7, #52]	; 0x34
 80070c0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070c6:	e841 2300 	strex	r3, r2, [r1]
 80070ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1e6      	bne.n	80070a0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	3308      	adds	r3, #8
 80070d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	e853 3f00 	ldrex	r3, [r3]
 80070e0:	613b      	str	r3, [r7, #16]
   return(result);
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f023 0301 	bic.w	r3, r3, #1
 80070e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3308      	adds	r3, #8
 80070f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80070f2:	623a      	str	r2, [r7, #32]
 80070f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f6:	69f9      	ldr	r1, [r7, #28]
 80070f8:	6a3a      	ldr	r2, [r7, #32]
 80070fa:	e841 2300 	strex	r3, r2, [r1]
 80070fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1e5      	bne.n	80070d2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2220      	movs	r2, #32
 800710a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2220      	movs	r2, #32
 8007110:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2220      	movs	r2, #32
 8007118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	e010      	b.n	800714a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	69da      	ldr	r2, [r3, #28]
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	4013      	ands	r3, r2
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	429a      	cmp	r2, r3
 8007136:	bf0c      	ite	eq
 8007138:	2301      	moveq	r3, #1
 800713a:	2300      	movne	r3, #0
 800713c:	b2db      	uxtb	r3, r3
 800713e:	461a      	mov	r2, r3
 8007140:	79fb      	ldrb	r3, [r7, #7]
 8007142:	429a      	cmp	r2, r3
 8007144:	f43f af48 	beq.w	8006fd8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3770      	adds	r7, #112	; 0x70
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007152:	b480      	push	{r7}
 8007154:	b095      	sub	sp, #84	; 0x54
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007162:	e853 3f00 	ldrex	r3, [r3]
 8007166:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800716e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	461a      	mov	r2, r3
 8007176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007178:	643b      	str	r3, [r7, #64]	; 0x40
 800717a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800717e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007180:	e841 2300 	strex	r3, r2, [r1]
 8007184:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1e6      	bne.n	800715a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	3308      	adds	r3, #8
 8007192:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007194:	6a3b      	ldr	r3, [r7, #32]
 8007196:	e853 3f00 	ldrex	r3, [r3]
 800719a:	61fb      	str	r3, [r7, #28]
   return(result);
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	f023 0301 	bic.w	r3, r3, #1
 80071a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	3308      	adds	r3, #8
 80071aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071b4:	e841 2300 	strex	r3, r2, [r1]
 80071b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1e5      	bne.n	800718c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d118      	bne.n	80071fa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	e853 3f00 	ldrex	r3, [r3]
 80071d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	f023 0310 	bic.w	r3, r3, #16
 80071dc:	647b      	str	r3, [r7, #68]	; 0x44
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	461a      	mov	r2, r3
 80071e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071e6:	61bb      	str	r3, [r7, #24]
 80071e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ea:	6979      	ldr	r1, [r7, #20]
 80071ec:	69ba      	ldr	r2, [r7, #24]
 80071ee:	e841 2300 	strex	r3, r2, [r1]
 80071f2:	613b      	str	r3, [r7, #16]
   return(result);
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1e6      	bne.n	80071c8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2220      	movs	r2, #32
 80071fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800720e:	bf00      	nop
 8007210:	3754      	adds	r7, #84	; 0x54
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr

0800721a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b084      	sub	sp, #16
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007226:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f7ff fb51 	bl	80068e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800723e:	bf00      	nop
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b088      	sub	sp, #32
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	e853 3f00 	ldrex	r3, [r3]
 800725a:	60bb      	str	r3, [r7, #8]
   return(result);
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007262:	61fb      	str	r3, [r7, #28]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	461a      	mov	r2, r3
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	61bb      	str	r3, [r7, #24]
 800726e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007270:	6979      	ldr	r1, [r7, #20]
 8007272:	69ba      	ldr	r2, [r7, #24]
 8007274:	e841 2300 	strex	r3, r2, [r1]
 8007278:	613b      	str	r3, [r7, #16]
   return(result);
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1e6      	bne.n	800724e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2220      	movs	r2, #32
 8007284:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f7ff fb1d 	bl	80068cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007292:	bf00      	nop
 8007294:	3720      	adds	r7, #32
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
	...

0800729c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800729c:	b084      	sub	sp, #16
 800729e:	b580      	push	{r7, lr}
 80072a0:	b084      	sub	sp, #16
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
 80072a6:	f107 001c 	add.w	r0, r7, #28
 80072aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80072ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d120      	bne.n	80072f6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	68da      	ldr	r2, [r3, #12]
 80072c4:	4b20      	ldr	r3, [pc, #128]	; (8007348 <USB_CoreInit+0xac>)
 80072c6:	4013      	ands	r3, r2
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80072d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d105      	bne.n	80072ea <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fa96 	bl	800781c <USB_CoreReset>
 80072f0:	4603      	mov	r3, r0
 80072f2:	73fb      	strb	r3, [r7, #15]
 80072f4:	e010      	b.n	8007318 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 fa8a 	bl	800781c <USB_CoreReset>
 8007308:	4603      	mov	r3, r0
 800730a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007310:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731a:	2b01      	cmp	r3, #1
 800731c:	d10b      	bne.n	8007336 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f043 0206 	orr.w	r2, r3, #6
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	f043 0220 	orr.w	r2, r3, #32
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007336:	7bfb      	ldrb	r3, [r7, #15]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007342:	b004      	add	sp, #16
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	ffbdffbf 	.word	0xffbdffbf

0800734c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	f023 0201 	bic.w	r2, r3, #1
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	460b      	mov	r3, r1
 8007378:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800737a:	2300      	movs	r3, #0
 800737c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800738a:	78fb      	ldrb	r3, [r7, #3]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d115      	bne.n	80073bc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800739c:	2001      	movs	r0, #1
 800739e:	f7fb f84d 	bl	800243c <HAL_Delay>
      ms++;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	3301      	adds	r3, #1
 80073a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fa29 	bl	8007800 <USB_GetMode>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d01e      	beq.n	80073f2 <USB_SetCurrentMode+0x84>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2b31      	cmp	r3, #49	; 0x31
 80073b8:	d9f0      	bls.n	800739c <USB_SetCurrentMode+0x2e>
 80073ba:	e01a      	b.n	80073f2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80073bc:	78fb      	ldrb	r3, [r7, #3]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d115      	bne.n	80073ee <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80073ce:	2001      	movs	r0, #1
 80073d0:	f7fb f834 	bl	800243c <HAL_Delay>
      ms++;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	3301      	adds	r3, #1
 80073d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fa10 	bl	8007800 <USB_GetMode>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d005      	beq.n	80073f2 <USB_SetCurrentMode+0x84>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2b31      	cmp	r3, #49	; 0x31
 80073ea:	d9f0      	bls.n	80073ce <USB_SetCurrentMode+0x60>
 80073ec:	e001      	b.n	80073f2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e005      	b.n	80073fe <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2b32      	cmp	r3, #50	; 0x32
 80073f6:	d101      	bne.n	80073fc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e000      	b.n	80073fe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
	...

08007408 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007408:	b084      	sub	sp, #16
 800740a:	b580      	push	{r7, lr}
 800740c:	b086      	sub	sp, #24
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800741a:	2300      	movs	r3, #0
 800741c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007422:	2300      	movs	r3, #0
 8007424:	613b      	str	r3, [r7, #16]
 8007426:	e009      	b.n	800743c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	3340      	adds	r3, #64	; 0x40
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	2200      	movs	r2, #0
 8007434:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	3301      	adds	r3, #1
 800743a:	613b      	str	r3, [r7, #16]
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	2b0e      	cmp	r3, #14
 8007440:	d9f2      	bls.n	8007428 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007444:	2b00      	cmp	r3, #0
 8007446:	d11c      	bne.n	8007482 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007456:	f043 0302 	orr.w	r3, r3, #2
 800745a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007460:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	601a      	str	r2, [r3, #0]
 8007480:	e005      	b.n	800748e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007486:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007494:	461a      	mov	r2, r3
 8007496:	2300      	movs	r3, #0
 8007498:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a0:	4619      	mov	r1, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a8:	461a      	mov	r2, r3
 80074aa:	680b      	ldr	r3, [r1, #0]
 80074ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d10c      	bne.n	80074ce <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80074b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d104      	bne.n	80074c4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80074ba:	2100      	movs	r1, #0
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 f965 	bl	800778c <USB_SetDevSpeed>
 80074c2:	e008      	b.n	80074d6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80074c4:	2101      	movs	r1, #1
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f960 	bl	800778c <USB_SetDevSpeed>
 80074cc:	e003      	b.n	80074d6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80074ce:	2103      	movs	r1, #3
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f95b 	bl	800778c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80074d6:	2110      	movs	r1, #16
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f8f3 	bl	80076c4 <USB_FlushTxFifo>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d001      	beq.n	80074e8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 f91f 	bl	800772c <USB_FlushRxFifo>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d001      	beq.n	80074f8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074fe:	461a      	mov	r2, r3
 8007500:	2300      	movs	r3, #0
 8007502:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800750a:	461a      	mov	r2, r3
 800750c:	2300      	movs	r3, #0
 800750e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007516:	461a      	mov	r2, r3
 8007518:	2300      	movs	r3, #0
 800751a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800751c:	2300      	movs	r3, #0
 800751e:	613b      	str	r3, [r7, #16]
 8007520:	e043      	b.n	80075aa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	015a      	lsls	r2, r3, #5
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	4413      	add	r3, r2
 800752a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007534:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007538:	d118      	bne.n	800756c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10a      	bne.n	8007556 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	015a      	lsls	r2, r3, #5
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	4413      	add	r3, r2
 8007548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800754c:	461a      	mov	r2, r3
 800754e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007552:	6013      	str	r3, [r2, #0]
 8007554:	e013      	b.n	800757e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	4413      	add	r3, r2
 800755e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007562:	461a      	mov	r2, r3
 8007564:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007568:	6013      	str	r3, [r2, #0]
 800756a:	e008      	b.n	800757e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	4413      	add	r3, r2
 8007574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007578:	461a      	mov	r2, r3
 800757a:	2300      	movs	r3, #0
 800757c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	015a      	lsls	r2, r3, #5
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	4413      	add	r3, r2
 8007586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800758a:	461a      	mov	r2, r3
 800758c:	2300      	movs	r3, #0
 800758e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4413      	add	r3, r2
 8007598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800759c:	461a      	mov	r2, r3
 800759e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80075a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	3301      	adds	r3, #1
 80075a8:	613b      	str	r3, [r7, #16]
 80075aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d3b7      	bcc.n	8007522 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075b2:	2300      	movs	r3, #0
 80075b4:	613b      	str	r3, [r7, #16]
 80075b6:	e043      	b.n	8007640 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075ce:	d118      	bne.n	8007602 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10a      	bne.n	80075ec <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	015a      	lsls	r2, r3, #5
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	4413      	add	r3, r2
 80075de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e2:	461a      	mov	r2, r3
 80075e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80075e8:	6013      	str	r3, [r2, #0]
 80075ea:	e013      	b.n	8007614 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f8:	461a      	mov	r2, r3
 80075fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80075fe:	6013      	str	r3, [r2, #0]
 8007600:	e008      	b.n	8007614 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	015a      	lsls	r2, r3, #5
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	4413      	add	r3, r2
 800760a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800760e:	461a      	mov	r2, r3
 8007610:	2300      	movs	r3, #0
 8007612:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	4413      	add	r3, r2
 800761c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007620:	461a      	mov	r2, r3
 8007622:	2300      	movs	r3, #0
 8007624:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	015a      	lsls	r2, r3, #5
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	4413      	add	r3, r2
 800762e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007632:	461a      	mov	r2, r3
 8007634:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007638:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	3301      	adds	r3, #1
 800763e:	613b      	str	r3, [r7, #16]
 8007640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007642:	693a      	ldr	r2, [r7, #16]
 8007644:	429a      	cmp	r2, r3
 8007646:	d3b7      	bcc.n	80075b8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007656:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800765a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007668:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800766a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766c:	2b00      	cmp	r3, #0
 800766e:	d105      	bne.n	800767c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	f043 0210 	orr.w	r2, r3, #16
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	699a      	ldr	r2, [r3, #24]
 8007680:	4b0e      	ldr	r3, [pc, #56]	; (80076bc <USB_DevInit+0x2b4>)
 8007682:	4313      	orrs	r3, r2
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800768a:	2b00      	cmp	r3, #0
 800768c:	d005      	beq.n	800769a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	f043 0208 	orr.w	r2, r3, #8
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800769a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800769c:	2b01      	cmp	r3, #1
 800769e:	d105      	bne.n	80076ac <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	699a      	ldr	r2, [r3, #24]
 80076a4:	4b06      	ldr	r3, [pc, #24]	; (80076c0 <USB_DevInit+0x2b8>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80076ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3718      	adds	r7, #24
 80076b2:	46bd      	mov	sp, r7
 80076b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076b8:	b004      	add	sp, #16
 80076ba:	4770      	bx	lr
 80076bc:	803c3800 	.word	0x803c3800
 80076c0:	40000004 	.word	0x40000004

080076c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	3301      	adds	r3, #1
 80076d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	4a13      	ldr	r2, [pc, #76]	; (8007728 <USB_FlushTxFifo+0x64>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d901      	bls.n	80076e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e01b      	b.n	800771c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	daf2      	bge.n	80076d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80076ec:	2300      	movs	r3, #0
 80076ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	019b      	lsls	r3, r3, #6
 80076f4:	f043 0220 	orr.w	r2, r3, #32
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	3301      	adds	r3, #1
 8007700:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	4a08      	ldr	r2, [pc, #32]	; (8007728 <USB_FlushTxFifo+0x64>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d901      	bls.n	800770e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e006      	b.n	800771c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	f003 0320 	and.w	r3, r3, #32
 8007716:	2b20      	cmp	r3, #32
 8007718:	d0f0      	beq.n	80076fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	00030d40 	.word	0x00030d40

0800772c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007734:	2300      	movs	r3, #0
 8007736:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	3301      	adds	r3, #1
 800773c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	4a11      	ldr	r2, [pc, #68]	; (8007788 <USB_FlushRxFifo+0x5c>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d901      	bls.n	800774a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e018      	b.n	800777c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	2b00      	cmp	r3, #0
 8007750:	daf2      	bge.n	8007738 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007752:	2300      	movs	r3, #0
 8007754:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2210      	movs	r2, #16
 800775a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	3301      	adds	r3, #1
 8007760:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	4a08      	ldr	r2, [pc, #32]	; (8007788 <USB_FlushRxFifo+0x5c>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d901      	bls.n	800776e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	e006      	b.n	800777c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	f003 0310 	and.w	r3, r3, #16
 8007776:	2b10      	cmp	r3, #16
 8007778:	d0f0      	beq.n	800775c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3714      	adds	r7, #20
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr
 8007788:	00030d40 	.word	0x00030d40

0800778c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	460b      	mov	r3, r1
 8007796:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	78fb      	ldrb	r3, [r7, #3]
 80077a6:	68f9      	ldr	r1, [r7, #12]
 80077a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077ac:	4313      	orrs	r3, r2
 80077ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3714      	adds	r7, #20
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr

080077be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80077be:	b480      	push	{r7}
 80077c0:	b085      	sub	sp, #20
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077d8:	f023 0303 	bic.w	r3, r3, #3
 80077dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077ec:	f043 0302 	orr.w	r3, r3, #2
 80077f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3714      	adds	r7, #20
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	695b      	ldr	r3, [r3, #20]
 800780c:	f003 0301 	and.w	r3, r3, #1
}
 8007810:	4618      	mov	r0, r3
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007824:	2300      	movs	r3, #0
 8007826:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	3301      	adds	r3, #1
 800782c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	4a13      	ldr	r2, [pc, #76]	; (8007880 <USB_CoreReset+0x64>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d901      	bls.n	800783a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e01b      	b.n	8007872 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	2b00      	cmp	r3, #0
 8007840:	daf2      	bge.n	8007828 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007842:	2300      	movs	r3, #0
 8007844:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	f043 0201 	orr.w	r2, r3, #1
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3301      	adds	r3, #1
 8007856:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	4a09      	ldr	r2, [pc, #36]	; (8007880 <USB_CoreReset+0x64>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d901      	bls.n	8007864 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e006      	b.n	8007872 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	f003 0301 	and.w	r3, r3, #1
 800786c:	2b01      	cmp	r3, #1
 800786e:	d0f0      	beq.n	8007852 <USB_CoreReset+0x36>

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	00030d40 	.word	0x00030d40

08007884 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007884:	b480      	push	{r7}
 8007886:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007888:	bf00      	nop
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
	...

08007894 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800789a:	f3ef 8305 	mrs	r3, IPSR
 800789e:	60bb      	str	r3, [r7, #8]
  return(result);
 80078a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10f      	bne.n	80078c6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078a6:	f3ef 8310 	mrs	r3, PRIMASK
 80078aa:	607b      	str	r3, [r7, #4]
  return(result);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d105      	bne.n	80078be <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078b2:	f3ef 8311 	mrs	r3, BASEPRI
 80078b6:	603b      	str	r3, [r7, #0]
  return(result);
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d007      	beq.n	80078ce <osKernelInitialize+0x3a>
 80078be:	4b0e      	ldr	r3, [pc, #56]	; (80078f8 <osKernelInitialize+0x64>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d103      	bne.n	80078ce <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80078c6:	f06f 0305 	mvn.w	r3, #5
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	e00c      	b.n	80078e8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80078ce:	4b0a      	ldr	r3, [pc, #40]	; (80078f8 <osKernelInitialize+0x64>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d105      	bne.n	80078e2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80078d6:	4b08      	ldr	r3, [pc, #32]	; (80078f8 <osKernelInitialize+0x64>)
 80078d8:	2201      	movs	r2, #1
 80078da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80078dc:	2300      	movs	r3, #0
 80078de:	60fb      	str	r3, [r7, #12]
 80078e0:	e002      	b.n	80078e8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80078e2:	f04f 33ff 	mov.w	r3, #4294967295
 80078e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80078e8:	68fb      	ldr	r3, [r7, #12]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	2000457c 	.word	0x2000457c

080078fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007902:	f3ef 8305 	mrs	r3, IPSR
 8007906:	60bb      	str	r3, [r7, #8]
  return(result);
 8007908:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800790a:	2b00      	cmp	r3, #0
 800790c:	d10f      	bne.n	800792e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800790e:	f3ef 8310 	mrs	r3, PRIMASK
 8007912:	607b      	str	r3, [r7, #4]
  return(result);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d105      	bne.n	8007926 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800791a:	f3ef 8311 	mrs	r3, BASEPRI
 800791e:	603b      	str	r3, [r7, #0]
  return(result);
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d007      	beq.n	8007936 <osKernelStart+0x3a>
 8007926:	4b0f      	ldr	r3, [pc, #60]	; (8007964 <osKernelStart+0x68>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b02      	cmp	r3, #2
 800792c:	d103      	bne.n	8007936 <osKernelStart+0x3a>
    stat = osErrorISR;
 800792e:	f06f 0305 	mvn.w	r3, #5
 8007932:	60fb      	str	r3, [r7, #12]
 8007934:	e010      	b.n	8007958 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007936:	4b0b      	ldr	r3, [pc, #44]	; (8007964 <osKernelStart+0x68>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d109      	bne.n	8007952 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800793e:	f7ff ffa1 	bl	8007884 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007942:	4b08      	ldr	r3, [pc, #32]	; (8007964 <osKernelStart+0x68>)
 8007944:	2202      	movs	r2, #2
 8007946:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007948:	f001 f8b4 	bl	8008ab4 <vTaskStartScheduler>
      stat = osOK;
 800794c:	2300      	movs	r3, #0
 800794e:	60fb      	str	r3, [r7, #12]
 8007950:	e002      	b.n	8007958 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007952:	f04f 33ff 	mov.w	r3, #4294967295
 8007956:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007958:	68fb      	ldr	r3, [r7, #12]
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	2000457c 	.word	0x2000457c

08007968 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007968:	b580      	push	{r7, lr}
 800796a:	b090      	sub	sp, #64	; 0x40
 800796c:	af04      	add	r7, sp, #16
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007974:	2300      	movs	r3, #0
 8007976:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007978:	f3ef 8305 	mrs	r3, IPSR
 800797c:	61fb      	str	r3, [r7, #28]
  return(result);
 800797e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007980:	2b00      	cmp	r3, #0
 8007982:	f040 808f 	bne.w	8007aa4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007986:	f3ef 8310 	mrs	r3, PRIMASK
 800798a:	61bb      	str	r3, [r7, #24]
  return(result);
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d105      	bne.n	800799e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007992:	f3ef 8311 	mrs	r3, BASEPRI
 8007996:	617b      	str	r3, [r7, #20]
  return(result);
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <osThreadNew+0x3e>
 800799e:	4b44      	ldr	r3, [pc, #272]	; (8007ab0 <osThreadNew+0x148>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d07e      	beq.n	8007aa4 <osThreadNew+0x13c>
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d07b      	beq.n	8007aa4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80079ac:	2380      	movs	r3, #128	; 0x80
 80079ae:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80079b0:	2318      	movs	r3, #24
 80079b2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80079b4:	2300      	movs	r3, #0
 80079b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80079b8:	f04f 33ff 	mov.w	r3, #4294967295
 80079bc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d045      	beq.n	8007a50 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d002      	beq.n	80079d2 <osThreadNew+0x6a>
        name = attr->name;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d002      	beq.n	80079e0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80079e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d008      	beq.n	80079f8 <osThreadNew+0x90>
 80079e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e8:	2b38      	cmp	r3, #56	; 0x38
 80079ea:	d805      	bhi.n	80079f8 <osThreadNew+0x90>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d001      	beq.n	80079fc <osThreadNew+0x94>
        return (NULL);
 80079f8:	2300      	movs	r3, #0
 80079fa:	e054      	b.n	8007aa6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	695b      	ldr	r3, [r3, #20]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d003      	beq.n	8007a0c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	695b      	ldr	r3, [r3, #20]
 8007a08:	089b      	lsrs	r3, r3, #2
 8007a0a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00e      	beq.n	8007a32 <osThreadNew+0xca>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	2b5b      	cmp	r3, #91	; 0x5b
 8007a1a:	d90a      	bls.n	8007a32 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d006      	beq.n	8007a32 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d002      	beq.n	8007a32 <osThreadNew+0xca>
        mem = 1;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	623b      	str	r3, [r7, #32]
 8007a30:	e010      	b.n	8007a54 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10c      	bne.n	8007a54 <osThreadNew+0xec>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d108      	bne.n	8007a54 <osThreadNew+0xec>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d104      	bne.n	8007a54 <osThreadNew+0xec>
          mem = 0;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	623b      	str	r3, [r7, #32]
 8007a4e:	e001      	b.n	8007a54 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007a50:	2300      	movs	r3, #0
 8007a52:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007a54:	6a3b      	ldr	r3, [r7, #32]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d110      	bne.n	8007a7c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a62:	9202      	str	r2, [sp, #8]
 8007a64:	9301      	str	r3, [sp, #4]
 8007a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 fe3f 	bl	80086f4 <xTaskCreateStatic>
 8007a76:	4603      	mov	r3, r0
 8007a78:	613b      	str	r3, [r7, #16]
 8007a7a:	e013      	b.n	8007aa4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007a7c:	6a3b      	ldr	r3, [r7, #32]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d110      	bne.n	8007aa4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a84:	b29a      	uxth	r2, r3
 8007a86:	f107 0310 	add.w	r3, r7, #16
 8007a8a:	9301      	str	r3, [sp, #4]
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f000 fe90 	bl	80087ba <xTaskCreate>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d001      	beq.n	8007aa4 <osThreadNew+0x13c>
          hTask = NULL;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007aa4:	693b      	ldr	r3, [r7, #16]
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3730      	adds	r7, #48	; 0x30
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	2000457c 	.word	0x2000457c

08007ab4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007abc:	f3ef 8305 	mrs	r3, IPSR
 8007ac0:	613b      	str	r3, [r7, #16]
  return(result);
 8007ac2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10f      	bne.n	8007ae8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8007acc:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d105      	bne.n	8007ae0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ad4:	f3ef 8311 	mrs	r3, BASEPRI
 8007ad8:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d007      	beq.n	8007af0 <osDelay+0x3c>
 8007ae0:	4b0a      	ldr	r3, [pc, #40]	; (8007b0c <osDelay+0x58>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d103      	bne.n	8007af0 <osDelay+0x3c>
    stat = osErrorISR;
 8007ae8:	f06f 0305 	mvn.w	r3, #5
 8007aec:	617b      	str	r3, [r7, #20]
 8007aee:	e007      	b.n	8007b00 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007af0:	2300      	movs	r3, #0
 8007af2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d002      	beq.n	8007b00 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 ffa4 	bl	8008a48 <vTaskDelay>
    }
  }

  return (stat);
 8007b00:	697b      	ldr	r3, [r7, #20]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3718      	adds	r7, #24
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	2000457c 	.word	0x2000457c

08007b10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	4a07      	ldr	r2, [pc, #28]	; (8007b3c <vApplicationGetIdleTaskMemory+0x2c>)
 8007b20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	4a06      	ldr	r2, [pc, #24]	; (8007b40 <vApplicationGetIdleTaskMemory+0x30>)
 8007b26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2280      	movs	r2, #128	; 0x80
 8007b2c:	601a      	str	r2, [r3, #0]
}
 8007b2e:	bf00      	nop
 8007b30:	3714      	adds	r7, #20
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	20004580 	.word	0x20004580
 8007b40:	200045dc 	.word	0x200045dc

08007b44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	4a07      	ldr	r2, [pc, #28]	; (8007b70 <vApplicationGetTimerTaskMemory+0x2c>)
 8007b54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	4a06      	ldr	r2, [pc, #24]	; (8007b74 <vApplicationGetTimerTaskMemory+0x30>)
 8007b5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b62:	601a      	str	r2, [r3, #0]
}
 8007b64:	bf00      	nop
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	200047dc 	.word	0x200047dc
 8007b74:	20004838 	.word	0x20004838

08007b78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f103 0208 	add.w	r2, r3, #8
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f103 0208 	add.w	r2, r3, #8
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f103 0208 	add.w	r2, r3, #8
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007bc6:	bf00      	nop
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b085      	sub	sp, #20
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	689a      	ldr	r2, [r3, #8]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	683a      	ldr	r2, [r7, #0]
 8007bf6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	1c5a      	adds	r2, r3, #1
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	601a      	str	r2, [r3, #0]
}
 8007c0e:	bf00      	nop
 8007c10:	3714      	adds	r7, #20
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b085      	sub	sp, #20
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c30:	d103      	bne.n	8007c3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	60fb      	str	r3, [r7, #12]
 8007c38:	e00c      	b.n	8007c54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	3308      	adds	r3, #8
 8007c3e:	60fb      	str	r3, [r7, #12]
 8007c40:	e002      	b.n	8007c48 <vListInsert+0x2e>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	60fb      	str	r3, [r7, #12]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d2f6      	bcs.n	8007c42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	685a      	ldr	r2, [r3, #4]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	683a      	ldr	r2, [r7, #0]
 8007c62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	1c5a      	adds	r2, r3, #1
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	601a      	str	r2, [r3, #0]
}
 8007c80:	bf00      	nop
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	6892      	ldr	r2, [r2, #8]
 8007ca2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	6852      	ldr	r2, [r2, #4]
 8007cac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d103      	bne.n	8007cc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	689a      	ldr	r2, [r3, #8]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	1e5a      	subs	r2, r3, #1
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3714      	adds	r7, #20
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10c      	bne.n	8007d0e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf8:	b672      	cpsid	i
 8007cfa:	f383 8811 	msr	BASEPRI, r3
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	b662      	cpsie	i
 8007d08:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007d0a:	bf00      	nop
 8007d0c:	e7fe      	b.n	8007d0c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007d0e:	f002 f87d 	bl	8009e0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d1a:	68f9      	ldr	r1, [r7, #12]
 8007d1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d1e:	fb01 f303 	mul.w	r3, r1, r3
 8007d22:	441a      	add	r2, r3
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	68f9      	ldr	r1, [r7, #12]
 8007d42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d44:	fb01 f303 	mul.w	r3, r1, r3
 8007d48:	441a      	add	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	22ff      	movs	r2, #255	; 0xff
 8007d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	22ff      	movs	r2, #255	; 0xff
 8007d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d114      	bne.n	8007d8e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d01a      	beq.n	8007da2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	3310      	adds	r3, #16
 8007d70:	4618      	mov	r0, r3
 8007d72:	f001 f937 	bl	8008fe4 <xTaskRemoveFromEventList>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d012      	beq.n	8007da2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d7c:	4b0c      	ldr	r3, [pc, #48]	; (8007db0 <xQueueGenericReset+0xd0>)
 8007d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	f3bf 8f6f 	isb	sy
 8007d8c:	e009      	b.n	8007da2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3310      	adds	r3, #16
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7ff fef0 	bl	8007b78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	3324      	adds	r3, #36	; 0x24
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7ff feeb 	bl	8007b78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007da2:	f002 f867 	bl	8009e74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007da6:	2301      	movs	r3, #1
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	e000ed04 	.word	0xe000ed04

08007db4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b08e      	sub	sp, #56	; 0x38
 8007db8:	af02      	add	r7, sp, #8
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
 8007dc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10c      	bne.n	8007de2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dcc:	b672      	cpsid	i
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	b662      	cpsie	i
 8007ddc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007dde:	bf00      	nop
 8007de0:	e7fe      	b.n	8007de0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10c      	bne.n	8007e02 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dec:	b672      	cpsid	i
 8007dee:	f383 8811 	msr	BASEPRI, r3
 8007df2:	f3bf 8f6f 	isb	sy
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	b662      	cpsie	i
 8007dfc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007dfe:	bf00      	nop
 8007e00:	e7fe      	b.n	8007e00 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d002      	beq.n	8007e0e <xQueueGenericCreateStatic+0x5a>
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <xQueueGenericCreateStatic+0x5e>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e000      	b.n	8007e14 <xQueueGenericCreateStatic+0x60>
 8007e12:	2300      	movs	r3, #0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d10c      	bne.n	8007e32 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1c:	b672      	cpsid	i
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	b662      	cpsie	i
 8007e2c:	623b      	str	r3, [r7, #32]
}
 8007e2e:	bf00      	nop
 8007e30:	e7fe      	b.n	8007e30 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d102      	bne.n	8007e3e <xQueueGenericCreateStatic+0x8a>
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d101      	bne.n	8007e42 <xQueueGenericCreateStatic+0x8e>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e000      	b.n	8007e44 <xQueueGenericCreateStatic+0x90>
 8007e42:	2300      	movs	r3, #0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10c      	bne.n	8007e62 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4c:	b672      	cpsid	i
 8007e4e:	f383 8811 	msr	BASEPRI, r3
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	b662      	cpsie	i
 8007e5c:	61fb      	str	r3, [r7, #28]
}
 8007e5e:	bf00      	nop
 8007e60:	e7fe      	b.n	8007e60 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e62:	2350      	movs	r3, #80	; 0x50
 8007e64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	2b50      	cmp	r3, #80	; 0x50
 8007e6a:	d00c      	beq.n	8007e86 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e70:	b672      	cpsid	i
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	b662      	cpsie	i
 8007e80:	61bb      	str	r3, [r7, #24]
}
 8007e82:	bf00      	nop
 8007e84:	e7fe      	b.n	8007e84 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e86:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00d      	beq.n	8007eae <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e9a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea0:	9300      	str	r3, [sp, #0]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	68b9      	ldr	r1, [r7, #8]
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f000 f805 	bl	8007eb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3730      	adds	r7, #48	; 0x30
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	607a      	str	r2, [r7, #4]
 8007ec4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d103      	bne.n	8007ed4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	69ba      	ldr	r2, [r7, #24]
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	e002      	b.n	8007eda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	68ba      	ldr	r2, [r7, #8]
 8007ee4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ee6:	2101      	movs	r1, #1
 8007ee8:	69b8      	ldr	r0, [r7, #24]
 8007eea:	f7ff fef9 	bl	8007ce0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	78fa      	ldrb	r2, [r7, #3]
 8007ef2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007ef6:	bf00      	nop
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
	...

08007f00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b08e      	sub	sp, #56	; 0x38
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]
 8007f0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10c      	bne.n	8007f36 <xQueueGenericSend+0x36>
	__asm volatile
 8007f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f20:	b672      	cpsid	i
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	b662      	cpsie	i
 8007f30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f32:	bf00      	nop
 8007f34:	e7fe      	b.n	8007f34 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d103      	bne.n	8007f44 <xQueueGenericSend+0x44>
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d101      	bne.n	8007f48 <xQueueGenericSend+0x48>
 8007f44:	2301      	movs	r3, #1
 8007f46:	e000      	b.n	8007f4a <xQueueGenericSend+0x4a>
 8007f48:	2300      	movs	r3, #0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10c      	bne.n	8007f68 <xQueueGenericSend+0x68>
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f52:	b672      	cpsid	i
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	b662      	cpsie	i
 8007f62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f64:	bf00      	nop
 8007f66:	e7fe      	b.n	8007f66 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d103      	bne.n	8007f76 <xQueueGenericSend+0x76>
 8007f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d101      	bne.n	8007f7a <xQueueGenericSend+0x7a>
 8007f76:	2301      	movs	r3, #1
 8007f78:	e000      	b.n	8007f7c <xQueueGenericSend+0x7c>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10c      	bne.n	8007f9a <xQueueGenericSend+0x9a>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	b672      	cpsid	i
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	b662      	cpsie	i
 8007f94:	623b      	str	r3, [r7, #32]
}
 8007f96:	bf00      	nop
 8007f98:	e7fe      	b.n	8007f98 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f9a:	f001 f9e9 	bl	8009370 <xTaskGetSchedulerState>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d102      	bne.n	8007faa <xQueueGenericSend+0xaa>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d101      	bne.n	8007fae <xQueueGenericSend+0xae>
 8007faa:	2301      	movs	r3, #1
 8007fac:	e000      	b.n	8007fb0 <xQueueGenericSend+0xb0>
 8007fae:	2300      	movs	r3, #0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10c      	bne.n	8007fce <xQueueGenericSend+0xce>
	__asm volatile
 8007fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb8:	b672      	cpsid	i
 8007fba:	f383 8811 	msr	BASEPRI, r3
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	f3bf 8f4f 	dsb	sy
 8007fc6:	b662      	cpsie	i
 8007fc8:	61fb      	str	r3, [r7, #28]
}
 8007fca:	bf00      	nop
 8007fcc:	e7fe      	b.n	8007fcc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007fce:	f001 ff1d 	bl	8009e0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d302      	bcc.n	8007fe4 <xQueueGenericSend+0xe4>
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d129      	bne.n	8008038 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fe4:	683a      	ldr	r2, [r7, #0]
 8007fe6:	68b9      	ldr	r1, [r7, #8]
 8007fe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fea:	f000 fa15 	bl	8008418 <prvCopyDataToQueue>
 8007fee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d010      	beq.n	800801a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffa:	3324      	adds	r3, #36	; 0x24
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f000 fff1 	bl	8008fe4 <xTaskRemoveFromEventList>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d013      	beq.n	8008030 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008008:	4b3f      	ldr	r3, [pc, #252]	; (8008108 <xQueueGenericSend+0x208>)
 800800a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800800e:	601a      	str	r2, [r3, #0]
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	e00a      	b.n	8008030 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800801a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801c:	2b00      	cmp	r3, #0
 800801e:	d007      	beq.n	8008030 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008020:	4b39      	ldr	r3, [pc, #228]	; (8008108 <xQueueGenericSend+0x208>)
 8008022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008026:	601a      	str	r2, [r3, #0]
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008030:	f001 ff20 	bl	8009e74 <vPortExitCritical>
				return pdPASS;
 8008034:	2301      	movs	r3, #1
 8008036:	e063      	b.n	8008100 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d103      	bne.n	8008046 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800803e:	f001 ff19 	bl	8009e74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008042:	2300      	movs	r3, #0
 8008044:	e05c      	b.n	8008100 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008048:	2b00      	cmp	r3, #0
 800804a:	d106      	bne.n	800805a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800804c:	f107 0314 	add.w	r3, r7, #20
 8008050:	4618      	mov	r0, r3
 8008052:	f001 f82d 	bl	80090b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008056:	2301      	movs	r3, #1
 8008058:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800805a:	f001 ff0b 	bl	8009e74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800805e:	f000 fd93 	bl	8008b88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008062:	f001 fed3 	bl	8009e0c <vPortEnterCritical>
 8008066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008068:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800806c:	b25b      	sxtb	r3, r3
 800806e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008072:	d103      	bne.n	800807c <xQueueGenericSend+0x17c>
 8008074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008076:	2200      	movs	r2, #0
 8008078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800807c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008082:	b25b      	sxtb	r3, r3
 8008084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008088:	d103      	bne.n	8008092 <xQueueGenericSend+0x192>
 800808a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808c:	2200      	movs	r2, #0
 800808e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008092:	f001 feef 	bl	8009e74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008096:	1d3a      	adds	r2, r7, #4
 8008098:	f107 0314 	add.w	r3, r7, #20
 800809c:	4611      	mov	r1, r2
 800809e:	4618      	mov	r0, r3
 80080a0:	f001 f81c 	bl	80090dc <xTaskCheckForTimeOut>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d124      	bne.n	80080f4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80080aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080ac:	f000 faac 	bl	8008608 <prvIsQueueFull>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d018      	beq.n	80080e8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80080b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b8:	3310      	adds	r3, #16
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	4611      	mov	r1, r2
 80080be:	4618      	mov	r0, r3
 80080c0:	f000 ff3c 	bl	8008f3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80080c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080c6:	f000 fa37 	bl	8008538 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80080ca:	f000 fd6b 	bl	8008ba4 <xTaskResumeAll>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f47f af7c 	bne.w	8007fce <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80080d6:	4b0c      	ldr	r3, [pc, #48]	; (8008108 <xQueueGenericSend+0x208>)
 80080d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080dc:	601a      	str	r2, [r3, #0]
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	e772      	b.n	8007fce <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80080e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080ea:	f000 fa25 	bl	8008538 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080ee:	f000 fd59 	bl	8008ba4 <xTaskResumeAll>
 80080f2:	e76c      	b.n	8007fce <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80080f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080f6:	f000 fa1f 	bl	8008538 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080fa:	f000 fd53 	bl	8008ba4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80080fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008100:	4618      	mov	r0, r3
 8008102:	3738      	adds	r7, #56	; 0x38
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	e000ed04 	.word	0xe000ed04

0800810c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b08e      	sub	sp, #56	; 0x38
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
 8008118:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800811e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10c      	bne.n	800813e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008128:	b672      	cpsid	i
 800812a:	f383 8811 	msr	BASEPRI, r3
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	f3bf 8f4f 	dsb	sy
 8008136:	b662      	cpsie	i
 8008138:	627b      	str	r3, [r7, #36]	; 0x24
}
 800813a:	bf00      	nop
 800813c:	e7fe      	b.n	800813c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d103      	bne.n	800814c <xQueueGenericSendFromISR+0x40>
 8008144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008148:	2b00      	cmp	r3, #0
 800814a:	d101      	bne.n	8008150 <xQueueGenericSendFromISR+0x44>
 800814c:	2301      	movs	r3, #1
 800814e:	e000      	b.n	8008152 <xQueueGenericSendFromISR+0x46>
 8008150:	2300      	movs	r3, #0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10c      	bne.n	8008170 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8008156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815a:	b672      	cpsid	i
 800815c:	f383 8811 	msr	BASEPRI, r3
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	b662      	cpsie	i
 800816a:	623b      	str	r3, [r7, #32]
}
 800816c:	bf00      	nop
 800816e:	e7fe      	b.n	800816e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	2b02      	cmp	r3, #2
 8008174:	d103      	bne.n	800817e <xQueueGenericSendFromISR+0x72>
 8008176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800817a:	2b01      	cmp	r3, #1
 800817c:	d101      	bne.n	8008182 <xQueueGenericSendFromISR+0x76>
 800817e:	2301      	movs	r3, #1
 8008180:	e000      	b.n	8008184 <xQueueGenericSendFromISR+0x78>
 8008182:	2300      	movs	r3, #0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10c      	bne.n	80081a2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8008188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818c:	b672      	cpsid	i
 800818e:	f383 8811 	msr	BASEPRI, r3
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	b662      	cpsie	i
 800819c:	61fb      	str	r3, [r7, #28]
}
 800819e:	bf00      	nop
 80081a0:	e7fe      	b.n	80081a0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081a2:	f001 ff1b 	bl	8009fdc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80081a6:	f3ef 8211 	mrs	r2, BASEPRI
 80081aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ae:	b672      	cpsid	i
 80081b0:	f383 8811 	msr	BASEPRI, r3
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	b662      	cpsie	i
 80081be:	61ba      	str	r2, [r7, #24]
 80081c0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80081c2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80081c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d302      	bcc.n	80081d8 <xQueueGenericSendFromISR+0xcc>
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d12c      	bne.n	8008232 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80081d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	68b9      	ldr	r1, [r7, #8]
 80081e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081e8:	f000 f916 	bl	8008418 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80081ec:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80081f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f4:	d112      	bne.n	800821c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d016      	beq.n	800822c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008200:	3324      	adds	r3, #36	; 0x24
 8008202:	4618      	mov	r0, r3
 8008204:	f000 feee 	bl	8008fe4 <xTaskRemoveFromEventList>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00e      	beq.n	800822c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00b      	beq.n	800822c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	601a      	str	r2, [r3, #0]
 800821a:	e007      	b.n	800822c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800821c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008220:	3301      	adds	r3, #1
 8008222:	b2db      	uxtb	r3, r3
 8008224:	b25a      	sxtb	r2, r3
 8008226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800822c:	2301      	movs	r3, #1
 800822e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008230:	e001      	b.n	8008236 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008232:	2300      	movs	r3, #0
 8008234:	637b      	str	r3, [r7, #52]	; 0x34
 8008236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008238:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008240:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008244:	4618      	mov	r0, r3
 8008246:	3738      	adds	r7, #56	; 0x38
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b08c      	sub	sp, #48	; 0x30
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008258:	2300      	movs	r3, #0
 800825a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10c      	bne.n	8008280 <xQueueReceive+0x34>
	__asm volatile
 8008266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826a:	b672      	cpsid	i
 800826c:	f383 8811 	msr	BASEPRI, r3
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	b662      	cpsie	i
 800827a:	623b      	str	r3, [r7, #32]
}
 800827c:	bf00      	nop
 800827e:	e7fe      	b.n	800827e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d103      	bne.n	800828e <xQueueReceive+0x42>
 8008286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828a:	2b00      	cmp	r3, #0
 800828c:	d101      	bne.n	8008292 <xQueueReceive+0x46>
 800828e:	2301      	movs	r3, #1
 8008290:	e000      	b.n	8008294 <xQueueReceive+0x48>
 8008292:	2300      	movs	r3, #0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10c      	bne.n	80082b2 <xQueueReceive+0x66>
	__asm volatile
 8008298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829c:	b672      	cpsid	i
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	b662      	cpsie	i
 80082ac:	61fb      	str	r3, [r7, #28]
}
 80082ae:	bf00      	nop
 80082b0:	e7fe      	b.n	80082b0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082b2:	f001 f85d 	bl	8009370 <xTaskGetSchedulerState>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d102      	bne.n	80082c2 <xQueueReceive+0x76>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d101      	bne.n	80082c6 <xQueueReceive+0x7a>
 80082c2:	2301      	movs	r3, #1
 80082c4:	e000      	b.n	80082c8 <xQueueReceive+0x7c>
 80082c6:	2300      	movs	r3, #0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10c      	bne.n	80082e6 <xQueueReceive+0x9a>
	__asm volatile
 80082cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d0:	b672      	cpsid	i
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	b662      	cpsie	i
 80082e0:	61bb      	str	r3, [r7, #24]
}
 80082e2:	bf00      	nop
 80082e4:	e7fe      	b.n	80082e4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082e6:	f001 fd91 	bl	8009e0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d01f      	beq.n	8008336 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80082f6:	68b9      	ldr	r1, [r7, #8]
 80082f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082fa:	f000 f8f7 	bl	80084ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80082fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008300:	1e5a      	subs	r2, r3, #1
 8008302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008304:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00f      	beq.n	800832e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800830e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008310:	3310      	adds	r3, #16
 8008312:	4618      	mov	r0, r3
 8008314:	f000 fe66 	bl	8008fe4 <xTaskRemoveFromEventList>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d007      	beq.n	800832e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800831e:	4b3d      	ldr	r3, [pc, #244]	; (8008414 <xQueueReceive+0x1c8>)
 8008320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800832e:	f001 fda1 	bl	8009e74 <vPortExitCritical>
				return pdPASS;
 8008332:	2301      	movs	r3, #1
 8008334:	e069      	b.n	800840a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d103      	bne.n	8008344 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800833c:	f001 fd9a 	bl	8009e74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008340:	2300      	movs	r3, #0
 8008342:	e062      	b.n	800840a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008346:	2b00      	cmp	r3, #0
 8008348:	d106      	bne.n	8008358 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800834a:	f107 0310 	add.w	r3, r7, #16
 800834e:	4618      	mov	r0, r3
 8008350:	f000 feae 	bl	80090b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008354:	2301      	movs	r3, #1
 8008356:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008358:	f001 fd8c 	bl	8009e74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800835c:	f000 fc14 	bl	8008b88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008360:	f001 fd54 	bl	8009e0c <vPortEnterCritical>
 8008364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008366:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800836a:	b25b      	sxtb	r3, r3
 800836c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008370:	d103      	bne.n	800837a <xQueueReceive+0x12e>
 8008372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008374:	2200      	movs	r2, #0
 8008376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800837a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008380:	b25b      	sxtb	r3, r3
 8008382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008386:	d103      	bne.n	8008390 <xQueueReceive+0x144>
 8008388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838a:	2200      	movs	r2, #0
 800838c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008390:	f001 fd70 	bl	8009e74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008394:	1d3a      	adds	r2, r7, #4
 8008396:	f107 0310 	add.w	r3, r7, #16
 800839a:	4611      	mov	r1, r2
 800839c:	4618      	mov	r0, r3
 800839e:	f000 fe9d 	bl	80090dc <xTaskCheckForTimeOut>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d123      	bne.n	80083f0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083aa:	f000 f917 	bl	80085dc <prvIsQueueEmpty>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d017      	beq.n	80083e4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80083b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b6:	3324      	adds	r3, #36	; 0x24
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	4611      	mov	r1, r2
 80083bc:	4618      	mov	r0, r3
 80083be:	f000 fdbd 	bl	8008f3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80083c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083c4:	f000 f8b8 	bl	8008538 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80083c8:	f000 fbec 	bl	8008ba4 <xTaskResumeAll>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d189      	bne.n	80082e6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80083d2:	4b10      	ldr	r3, [pc, #64]	; (8008414 <xQueueReceive+0x1c8>)
 80083d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083d8:	601a      	str	r2, [r3, #0]
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	f3bf 8f6f 	isb	sy
 80083e2:	e780      	b.n	80082e6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80083e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083e6:	f000 f8a7 	bl	8008538 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083ea:	f000 fbdb 	bl	8008ba4 <xTaskResumeAll>
 80083ee:	e77a      	b.n	80082e6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80083f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083f2:	f000 f8a1 	bl	8008538 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083f6:	f000 fbd5 	bl	8008ba4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083fc:	f000 f8ee 	bl	80085dc <prvIsQueueEmpty>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	f43f af6f 	beq.w	80082e6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008408:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800840a:	4618      	mov	r0, r3
 800840c:	3730      	adds	r7, #48	; 0x30
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	e000ed04 	.word	0xe000ed04

08008418 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008424:	2300      	movs	r3, #0
 8008426:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10d      	bne.n	8008452 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d14d      	bne.n	80084da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	4618      	mov	r0, r3
 8008444:	f000 ffb2 	bl	80093ac <xTaskPriorityDisinherit>
 8008448:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	609a      	str	r2, [r3, #8]
 8008450:	e043      	b.n	80084da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d119      	bne.n	800848c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6858      	ldr	r0, [r3, #4]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008460:	461a      	mov	r2, r3
 8008462:	68b9      	ldr	r1, [r7, #8]
 8008464:	f002 f80c 	bl	800a480 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	685a      	ldr	r2, [r3, #4]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008470:	441a      	add	r2, r3
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	685a      	ldr	r2, [r3, #4]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	429a      	cmp	r2, r3
 8008480:	d32b      	bcc.n	80084da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	605a      	str	r2, [r3, #4]
 800848a:	e026      	b.n	80084da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	68d8      	ldr	r0, [r3, #12]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008494:	461a      	mov	r2, r3
 8008496:	68b9      	ldr	r1, [r7, #8]
 8008498:	f001 fff2 	bl	800a480 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	68da      	ldr	r2, [r3, #12]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a4:	425b      	negs	r3, r3
 80084a6:	441a      	add	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	68da      	ldr	r2, [r3, #12]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d207      	bcs.n	80084c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	689a      	ldr	r2, [r3, #8]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c0:	425b      	negs	r3, r3
 80084c2:	441a      	add	r2, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d105      	bne.n	80084da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d002      	beq.n	80084da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	3b01      	subs	r3, #1
 80084d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	1c5a      	adds	r2, r3, #1
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80084e2:	697b      	ldr	r3, [r7, #20]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3718      	adds	r7, #24
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d018      	beq.n	8008530 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68da      	ldr	r2, [r3, #12]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008506:	441a      	add	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	68da      	ldr	r2, [r3, #12]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	429a      	cmp	r2, r3
 8008516:	d303      	bcc.n	8008520 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	68d9      	ldr	r1, [r3, #12]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008528:	461a      	mov	r2, r3
 800852a:	6838      	ldr	r0, [r7, #0]
 800852c:	f001 ffa8 	bl	800a480 <memcpy>
	}
}
 8008530:	bf00      	nop
 8008532:	3708      	adds	r7, #8
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008540:	f001 fc64 	bl	8009e0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800854a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800854c:	e011      	b.n	8008572 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008552:	2b00      	cmp	r3, #0
 8008554:	d012      	beq.n	800857c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	3324      	adds	r3, #36	; 0x24
 800855a:	4618      	mov	r0, r3
 800855c:	f000 fd42 	bl	8008fe4 <xTaskRemoveFromEventList>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d001      	beq.n	800856a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008566:	f000 fe1f 	bl	80091a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800856a:	7bfb      	ldrb	r3, [r7, #15]
 800856c:	3b01      	subs	r3, #1
 800856e:	b2db      	uxtb	r3, r3
 8008570:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008576:	2b00      	cmp	r3, #0
 8008578:	dce9      	bgt.n	800854e <prvUnlockQueue+0x16>
 800857a:	e000      	b.n	800857e <prvUnlockQueue+0x46>
					break;
 800857c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	22ff      	movs	r2, #255	; 0xff
 8008582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008586:	f001 fc75 	bl	8009e74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800858a:	f001 fc3f 	bl	8009e0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008594:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008596:	e011      	b.n	80085bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d012      	beq.n	80085c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	3310      	adds	r3, #16
 80085a4:	4618      	mov	r0, r3
 80085a6:	f000 fd1d 	bl	8008fe4 <xTaskRemoveFromEventList>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80085b0:	f000 fdfa 	bl	80091a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80085b4:	7bbb      	ldrb	r3, [r7, #14]
 80085b6:	3b01      	subs	r3, #1
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80085bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	dce9      	bgt.n	8008598 <prvUnlockQueue+0x60>
 80085c4:	e000      	b.n	80085c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80085c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	22ff      	movs	r2, #255	; 0xff
 80085cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80085d0:	f001 fc50 	bl	8009e74 <vPortExitCritical>
}
 80085d4:	bf00      	nop
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085e4:	f001 fc12 	bl	8009e0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d102      	bne.n	80085f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80085f0:	2301      	movs	r3, #1
 80085f2:	60fb      	str	r3, [r7, #12]
 80085f4:	e001      	b.n	80085fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80085f6:	2300      	movs	r3, #0
 80085f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085fa:	f001 fc3b 	bl	8009e74 <vPortExitCritical>

	return xReturn;
 80085fe:	68fb      	ldr	r3, [r7, #12]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3710      	adds	r7, #16
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008610:	f001 fbfc 	bl	8009e0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800861c:	429a      	cmp	r2, r3
 800861e:	d102      	bne.n	8008626 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008620:	2301      	movs	r3, #1
 8008622:	60fb      	str	r3, [r7, #12]
 8008624:	e001      	b.n	800862a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008626:	2300      	movs	r3, #0
 8008628:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800862a:	f001 fc23 	bl	8009e74 <vPortExitCritical>

	return xReturn;
 800862e:	68fb      	ldr	r3, [r7, #12]
}
 8008630:	4618      	mov	r0, r3
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008642:	2300      	movs	r3, #0
 8008644:	60fb      	str	r3, [r7, #12]
 8008646:	e014      	b.n	8008672 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008648:	4a0f      	ldr	r2, [pc, #60]	; (8008688 <vQueueAddToRegistry+0x50>)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10b      	bne.n	800866c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008654:	490c      	ldr	r1, [pc, #48]	; (8008688 <vQueueAddToRegistry+0x50>)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	683a      	ldr	r2, [r7, #0]
 800865a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800865e:	4a0a      	ldr	r2, [pc, #40]	; (8008688 <vQueueAddToRegistry+0x50>)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	00db      	lsls	r3, r3, #3
 8008664:	4413      	add	r3, r2
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800866a:	e006      	b.n	800867a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	3301      	adds	r3, #1
 8008670:	60fb      	str	r3, [r7, #12]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2b07      	cmp	r3, #7
 8008676:	d9e7      	bls.n	8008648 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008678:	bf00      	nop
 800867a:	bf00      	nop
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	20004c38 	.word	0x20004c38

0800868c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800868c:	b580      	push	{r7, lr}
 800868e:	b086      	sub	sp, #24
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800869c:	f001 fbb6 	bl	8009e0c <vPortEnterCritical>
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086a6:	b25b      	sxtb	r3, r3
 80086a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ac:	d103      	bne.n	80086b6 <vQueueWaitForMessageRestricted+0x2a>
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086bc:	b25b      	sxtb	r3, r3
 80086be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c2:	d103      	bne.n	80086cc <vQueueWaitForMessageRestricted+0x40>
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086cc:	f001 fbd2 	bl	8009e74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d106      	bne.n	80086e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	3324      	adds	r3, #36	; 0x24
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	68b9      	ldr	r1, [r7, #8]
 80086e0:	4618      	mov	r0, r3
 80086e2:	f000 fc51 	bl	8008f88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80086e6:	6978      	ldr	r0, [r7, #20]
 80086e8:	f7ff ff26 	bl	8008538 <prvUnlockQueue>
	}
 80086ec:	bf00      	nop
 80086ee:	3718      	adds	r7, #24
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b08e      	sub	sp, #56	; 0x38
 80086f8:	af04      	add	r7, sp, #16
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	607a      	str	r2, [r7, #4]
 8008700:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008704:	2b00      	cmp	r3, #0
 8008706:	d10c      	bne.n	8008722 <xTaskCreateStatic+0x2e>
	__asm volatile
 8008708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870c:	b672      	cpsid	i
 800870e:	f383 8811 	msr	BASEPRI, r3
 8008712:	f3bf 8f6f 	isb	sy
 8008716:	f3bf 8f4f 	dsb	sy
 800871a:	b662      	cpsie	i
 800871c:	623b      	str	r3, [r7, #32]
}
 800871e:	bf00      	nop
 8008720:	e7fe      	b.n	8008720 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008724:	2b00      	cmp	r3, #0
 8008726:	d10c      	bne.n	8008742 <xTaskCreateStatic+0x4e>
	__asm volatile
 8008728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872c:	b672      	cpsid	i
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	b662      	cpsie	i
 800873c:	61fb      	str	r3, [r7, #28]
}
 800873e:	bf00      	nop
 8008740:	e7fe      	b.n	8008740 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008742:	235c      	movs	r3, #92	; 0x5c
 8008744:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	2b5c      	cmp	r3, #92	; 0x5c
 800874a:	d00c      	beq.n	8008766 <xTaskCreateStatic+0x72>
	__asm volatile
 800874c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008750:	b672      	cpsid	i
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	b662      	cpsie	i
 8008760:	61bb      	str	r3, [r7, #24]
}
 8008762:	bf00      	nop
 8008764:	e7fe      	b.n	8008764 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008766:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876a:	2b00      	cmp	r3, #0
 800876c:	d01e      	beq.n	80087ac <xTaskCreateStatic+0xb8>
 800876e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008770:	2b00      	cmp	r3, #0
 8008772:	d01b      	beq.n	80087ac <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008776:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800877c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800877e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008780:	2202      	movs	r2, #2
 8008782:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008786:	2300      	movs	r3, #0
 8008788:	9303      	str	r3, [sp, #12]
 800878a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878c:	9302      	str	r3, [sp, #8]
 800878e:	f107 0314 	add.w	r3, r7, #20
 8008792:	9301      	str	r3, [sp, #4]
 8008794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008796:	9300      	str	r3, [sp, #0]
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	68b9      	ldr	r1, [r7, #8]
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f000 f850 	bl	8008844 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087a6:	f000 f8df 	bl	8008968 <prvAddNewTaskToReadyList>
 80087aa:	e001      	b.n	80087b0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80087ac:	2300      	movs	r3, #0
 80087ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80087b0:	697b      	ldr	r3, [r7, #20]
	}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3728      	adds	r7, #40	; 0x28
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b08c      	sub	sp, #48	; 0x30
 80087be:	af04      	add	r7, sp, #16
 80087c0:	60f8      	str	r0, [r7, #12]
 80087c2:	60b9      	str	r1, [r7, #8]
 80087c4:	603b      	str	r3, [r7, #0]
 80087c6:	4613      	mov	r3, r2
 80087c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80087ca:	88fb      	ldrh	r3, [r7, #6]
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4618      	mov	r0, r3
 80087d0:	f001 fc48 	bl	800a064 <pvPortMalloc>
 80087d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d00e      	beq.n	80087fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80087dc:	205c      	movs	r0, #92	; 0x5c
 80087de:	f001 fc41 	bl	800a064 <pvPortMalloc>
 80087e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d003      	beq.n	80087f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	697a      	ldr	r2, [r7, #20]
 80087ee:	631a      	str	r2, [r3, #48]	; 0x30
 80087f0:	e005      	b.n	80087fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80087f2:	6978      	ldr	r0, [r7, #20]
 80087f4:	f001 fd00 	bl	800a1f8 <vPortFree>
 80087f8:	e001      	b.n	80087fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80087fa:	2300      	movs	r3, #0
 80087fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d017      	beq.n	8008834 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	2200      	movs	r2, #0
 8008808:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800880c:	88fa      	ldrh	r2, [r7, #6]
 800880e:	2300      	movs	r3, #0
 8008810:	9303      	str	r3, [sp, #12]
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	9302      	str	r3, [sp, #8]
 8008816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008818:	9301      	str	r3, [sp, #4]
 800881a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	68b9      	ldr	r1, [r7, #8]
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f000 f80e 	bl	8008844 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008828:	69f8      	ldr	r0, [r7, #28]
 800882a:	f000 f89d 	bl	8008968 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800882e:	2301      	movs	r3, #1
 8008830:	61bb      	str	r3, [r7, #24]
 8008832:	e002      	b.n	800883a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008834:	f04f 33ff 	mov.w	r3, #4294967295
 8008838:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800883a:	69bb      	ldr	r3, [r7, #24]
	}
 800883c:	4618      	mov	r0, r3
 800883e:	3720      	adds	r7, #32
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b088      	sub	sp, #32
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]
 8008850:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008854:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	461a      	mov	r2, r3
 800885c:	21a5      	movs	r1, #165	; 0xa5
 800885e:	f001 fe1d 	bl	800a49c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008864:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008866:	6879      	ldr	r1, [r7, #4]
 8008868:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800886c:	440b      	add	r3, r1
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	4413      	add	r3, r2
 8008872:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	f023 0307 	bic.w	r3, r3, #7
 800887a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	f003 0307 	and.w	r3, r3, #7
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00c      	beq.n	80088a0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888a:	b672      	cpsid	i
 800888c:	f383 8811 	msr	BASEPRI, r3
 8008890:	f3bf 8f6f 	isb	sy
 8008894:	f3bf 8f4f 	dsb	sy
 8008898:	b662      	cpsie	i
 800889a:	617b      	str	r3, [r7, #20]
}
 800889c:	bf00      	nop
 800889e:	e7fe      	b.n	800889e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d01f      	beq.n	80088e6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088a6:	2300      	movs	r3, #0
 80088a8:	61fb      	str	r3, [r7, #28]
 80088aa:	e012      	b.n	80088d2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	4413      	add	r3, r2
 80088b2:	7819      	ldrb	r1, [r3, #0]
 80088b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	4413      	add	r3, r2
 80088ba:	3334      	adds	r3, #52	; 0x34
 80088bc:	460a      	mov	r2, r1
 80088be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	4413      	add	r3, r2
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d006      	beq.n	80088da <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088cc:	69fb      	ldr	r3, [r7, #28]
 80088ce:	3301      	adds	r3, #1
 80088d0:	61fb      	str	r3, [r7, #28]
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	2b0f      	cmp	r3, #15
 80088d6:	d9e9      	bls.n	80088ac <prvInitialiseNewTask+0x68>
 80088d8:	e000      	b.n	80088dc <prvInitialiseNewTask+0x98>
			{
				break;
 80088da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80088dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088de:	2200      	movs	r2, #0
 80088e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088e4:	e003      	b.n	80088ee <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80088e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80088ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f0:	2b37      	cmp	r3, #55	; 0x37
 80088f2:	d901      	bls.n	80088f8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80088f4:	2337      	movs	r3, #55	; 0x37
 80088f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80088f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80088fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008902:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008906:	2200      	movs	r2, #0
 8008908:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800890a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890c:	3304      	adds	r3, #4
 800890e:	4618      	mov	r0, r3
 8008910:	f7ff f952 	bl	8007bb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008916:	3318      	adds	r3, #24
 8008918:	4618      	mov	r0, r3
 800891a:	f7ff f94d 	bl	8007bb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800891e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008922:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008926:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800892a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800892e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008932:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008936:	2200      	movs	r2, #0
 8008938:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800893a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893c:	2200      	movs	r2, #0
 800893e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008942:	683a      	ldr	r2, [r7, #0]
 8008944:	68f9      	ldr	r1, [r7, #12]
 8008946:	69b8      	ldr	r0, [r7, #24]
 8008948:	f001 f952 	bl	8009bf0 <pxPortInitialiseStack>
 800894c:	4602      	mov	r2, r0
 800894e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008950:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008954:	2b00      	cmp	r3, #0
 8008956:	d002      	beq.n	800895e <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800895c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800895e:	bf00      	nop
 8008960:	3720      	adds	r7, #32
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
	...

08008968 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008970:	f001 fa4c 	bl	8009e0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008974:	4b2d      	ldr	r3, [pc, #180]	; (8008a2c <prvAddNewTaskToReadyList+0xc4>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	3301      	adds	r3, #1
 800897a:	4a2c      	ldr	r2, [pc, #176]	; (8008a2c <prvAddNewTaskToReadyList+0xc4>)
 800897c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800897e:	4b2c      	ldr	r3, [pc, #176]	; (8008a30 <prvAddNewTaskToReadyList+0xc8>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d109      	bne.n	800899a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008986:	4a2a      	ldr	r2, [pc, #168]	; (8008a30 <prvAddNewTaskToReadyList+0xc8>)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800898c:	4b27      	ldr	r3, [pc, #156]	; (8008a2c <prvAddNewTaskToReadyList+0xc4>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2b01      	cmp	r3, #1
 8008992:	d110      	bne.n	80089b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008994:	f000 fc2c 	bl	80091f0 <prvInitialiseTaskLists>
 8008998:	e00d      	b.n	80089b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800899a:	4b26      	ldr	r3, [pc, #152]	; (8008a34 <prvAddNewTaskToReadyList+0xcc>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d109      	bne.n	80089b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80089a2:	4b23      	ldr	r3, [pc, #140]	; (8008a30 <prvAddNewTaskToReadyList+0xc8>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d802      	bhi.n	80089b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80089b0:	4a1f      	ldr	r2, [pc, #124]	; (8008a30 <prvAddNewTaskToReadyList+0xc8>)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80089b6:	4b20      	ldr	r3, [pc, #128]	; (8008a38 <prvAddNewTaskToReadyList+0xd0>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	3301      	adds	r3, #1
 80089bc:	4a1e      	ldr	r2, [pc, #120]	; (8008a38 <prvAddNewTaskToReadyList+0xd0>)
 80089be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80089c0:	4b1d      	ldr	r3, [pc, #116]	; (8008a38 <prvAddNewTaskToReadyList+0xd0>)
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089cc:	4b1b      	ldr	r3, [pc, #108]	; (8008a3c <prvAddNewTaskToReadyList+0xd4>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d903      	bls.n	80089dc <prvAddNewTaskToReadyList+0x74>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d8:	4a18      	ldr	r2, [pc, #96]	; (8008a3c <prvAddNewTaskToReadyList+0xd4>)
 80089da:	6013      	str	r3, [r2, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e0:	4613      	mov	r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4413      	add	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	4a15      	ldr	r2, [pc, #84]	; (8008a40 <prvAddNewTaskToReadyList+0xd8>)
 80089ea:	441a      	add	r2, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	3304      	adds	r3, #4
 80089f0:	4619      	mov	r1, r3
 80089f2:	4610      	mov	r0, r2
 80089f4:	f7ff f8ed 	bl	8007bd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80089f8:	f001 fa3c 	bl	8009e74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80089fc:	4b0d      	ldr	r3, [pc, #52]	; (8008a34 <prvAddNewTaskToReadyList+0xcc>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00e      	beq.n	8008a22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008a04:	4b0a      	ldr	r3, [pc, #40]	; (8008a30 <prvAddNewTaskToReadyList+0xc8>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d207      	bcs.n	8008a22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008a12:	4b0c      	ldr	r3, [pc, #48]	; (8008a44 <prvAddNewTaskToReadyList+0xdc>)
 8008a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a18:	601a      	str	r2, [r3, #0]
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a22:	bf00      	nop
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	2000514c 	.word	0x2000514c
 8008a30:	20004c78 	.word	0x20004c78
 8008a34:	20005158 	.word	0x20005158
 8008a38:	20005168 	.word	0x20005168
 8008a3c:	20005154 	.word	0x20005154
 8008a40:	20004c7c 	.word	0x20004c7c
 8008a44:	e000ed04 	.word	0xe000ed04

08008a48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a50:	2300      	movs	r3, #0
 8008a52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d019      	beq.n	8008a8e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a5a:	4b14      	ldr	r3, [pc, #80]	; (8008aac <vTaskDelay+0x64>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00c      	beq.n	8008a7c <vTaskDelay+0x34>
	__asm volatile
 8008a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a66:	b672      	cpsid	i
 8008a68:	f383 8811 	msr	BASEPRI, r3
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	b662      	cpsie	i
 8008a76:	60bb      	str	r3, [r7, #8]
}
 8008a78:	bf00      	nop
 8008a7a:	e7fe      	b.n	8008a7a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008a7c:	f000 f884 	bl	8008b88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a80:	2100      	movs	r1, #0
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fd04 	bl	8009490 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a88:	f000 f88c 	bl	8008ba4 <xTaskResumeAll>
 8008a8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d107      	bne.n	8008aa4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008a94:	4b06      	ldr	r3, [pc, #24]	; (8008ab0 <vTaskDelay+0x68>)
 8008a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a9a:	601a      	str	r2, [r3, #0]
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008aa4:	bf00      	nop
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	20005174 	.word	0x20005174
 8008ab0:	e000ed04 	.word	0xe000ed04

08008ab4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b08a      	sub	sp, #40	; 0x28
 8008ab8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008aba:	2300      	movs	r3, #0
 8008abc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008ac2:	463a      	mov	r2, r7
 8008ac4:	1d39      	adds	r1, r7, #4
 8008ac6:	f107 0308 	add.w	r3, r7, #8
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7ff f820 	bl	8007b10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008ad0:	6839      	ldr	r1, [r7, #0]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	9202      	str	r2, [sp, #8]
 8008ad8:	9301      	str	r3, [sp, #4]
 8008ada:	2300      	movs	r3, #0
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	2300      	movs	r3, #0
 8008ae0:	460a      	mov	r2, r1
 8008ae2:	4923      	ldr	r1, [pc, #140]	; (8008b70 <vTaskStartScheduler+0xbc>)
 8008ae4:	4823      	ldr	r0, [pc, #140]	; (8008b74 <vTaskStartScheduler+0xc0>)
 8008ae6:	f7ff fe05 	bl	80086f4 <xTaskCreateStatic>
 8008aea:	4603      	mov	r3, r0
 8008aec:	4a22      	ldr	r2, [pc, #136]	; (8008b78 <vTaskStartScheduler+0xc4>)
 8008aee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008af0:	4b21      	ldr	r3, [pc, #132]	; (8008b78 <vTaskStartScheduler+0xc4>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d002      	beq.n	8008afe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008af8:	2301      	movs	r3, #1
 8008afa:	617b      	str	r3, [r7, #20]
 8008afc:	e001      	b.n	8008b02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008afe:	2300      	movs	r3, #0
 8008b00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d102      	bne.n	8008b0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008b08:	f000 fd16 	bl	8009538 <xTimerCreateTimerTask>
 8008b0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d118      	bne.n	8008b46 <vTaskStartScheduler+0x92>
	__asm volatile
 8008b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b18:	b672      	cpsid	i
 8008b1a:	f383 8811 	msr	BASEPRI, r3
 8008b1e:	f3bf 8f6f 	isb	sy
 8008b22:	f3bf 8f4f 	dsb	sy
 8008b26:	b662      	cpsie	i
 8008b28:	613b      	str	r3, [r7, #16]
}
 8008b2a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008b2c:	4b13      	ldr	r3, [pc, #76]	; (8008b7c <vTaskStartScheduler+0xc8>)
 8008b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b32:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008b34:	4b12      	ldr	r3, [pc, #72]	; (8008b80 <vTaskStartScheduler+0xcc>)
 8008b36:	2201      	movs	r2, #1
 8008b38:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008b3a:	4b12      	ldr	r3, [pc, #72]	; (8008b84 <vTaskStartScheduler+0xd0>)
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008b40:	f001 f8e6 	bl	8009d10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008b44:	e010      	b.n	8008b68 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b4c:	d10c      	bne.n	8008b68 <vTaskStartScheduler+0xb4>
	__asm volatile
 8008b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b52:	b672      	cpsid	i
 8008b54:	f383 8811 	msr	BASEPRI, r3
 8008b58:	f3bf 8f6f 	isb	sy
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	b662      	cpsie	i
 8008b62:	60fb      	str	r3, [r7, #12]
}
 8008b64:	bf00      	nop
 8008b66:	e7fe      	b.n	8008b66 <vTaskStartScheduler+0xb2>
}
 8008b68:	bf00      	nop
 8008b6a:	3718      	adds	r7, #24
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	0800b65c 	.word	0x0800b65c
 8008b74:	080091c1 	.word	0x080091c1
 8008b78:	20005170 	.word	0x20005170
 8008b7c:	2000516c 	.word	0x2000516c
 8008b80:	20005158 	.word	0x20005158
 8008b84:	20005150 	.word	0x20005150

08008b88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b88:	b480      	push	{r7}
 8008b8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008b8c:	4b04      	ldr	r3, [pc, #16]	; (8008ba0 <vTaskSuspendAll+0x18>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	3301      	adds	r3, #1
 8008b92:	4a03      	ldr	r2, [pc, #12]	; (8008ba0 <vTaskSuspendAll+0x18>)
 8008b94:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008b96:	bf00      	nop
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	20005174 	.word	0x20005174

08008ba4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008baa:	2300      	movs	r3, #0
 8008bac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008bb2:	4b43      	ldr	r3, [pc, #268]	; (8008cc0 <xTaskResumeAll+0x11c>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d10c      	bne.n	8008bd4 <xTaskResumeAll+0x30>
	__asm volatile
 8008bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bbe:	b672      	cpsid	i
 8008bc0:	f383 8811 	msr	BASEPRI, r3
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	b662      	cpsie	i
 8008bce:	603b      	str	r3, [r7, #0]
}
 8008bd0:	bf00      	nop
 8008bd2:	e7fe      	b.n	8008bd2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008bd4:	f001 f91a 	bl	8009e0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008bd8:	4b39      	ldr	r3, [pc, #228]	; (8008cc0 <xTaskResumeAll+0x11c>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	4a38      	ldr	r2, [pc, #224]	; (8008cc0 <xTaskResumeAll+0x11c>)
 8008be0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008be2:	4b37      	ldr	r3, [pc, #220]	; (8008cc0 <xTaskResumeAll+0x11c>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d162      	bne.n	8008cb0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008bea:	4b36      	ldr	r3, [pc, #216]	; (8008cc4 <xTaskResumeAll+0x120>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d05e      	beq.n	8008cb0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bf2:	e02f      	b.n	8008c54 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bf4:	4b34      	ldr	r3, [pc, #208]	; (8008cc8 <xTaskResumeAll+0x124>)
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	3318      	adds	r3, #24
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7ff f843 	bl	8007c8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	3304      	adds	r3, #4
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7ff f83e 	bl	8007c8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c14:	4b2d      	ldr	r3, [pc, #180]	; (8008ccc <xTaskResumeAll+0x128>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d903      	bls.n	8008c24 <xTaskResumeAll+0x80>
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c20:	4a2a      	ldr	r2, [pc, #168]	; (8008ccc <xTaskResumeAll+0x128>)
 8008c22:	6013      	str	r3, [r2, #0]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c28:	4613      	mov	r3, r2
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	4413      	add	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4a27      	ldr	r2, [pc, #156]	; (8008cd0 <xTaskResumeAll+0x12c>)
 8008c32:	441a      	add	r2, r3
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	3304      	adds	r3, #4
 8008c38:	4619      	mov	r1, r3
 8008c3a:	4610      	mov	r0, r2
 8008c3c:	f7fe ffc9 	bl	8007bd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c44:	4b23      	ldr	r3, [pc, #140]	; (8008cd4 <xTaskResumeAll+0x130>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d302      	bcc.n	8008c54 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008c4e:	4b22      	ldr	r3, [pc, #136]	; (8008cd8 <xTaskResumeAll+0x134>)
 8008c50:	2201      	movs	r2, #1
 8008c52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c54:	4b1c      	ldr	r3, [pc, #112]	; (8008cc8 <xTaskResumeAll+0x124>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1cb      	bne.n	8008bf4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d001      	beq.n	8008c66 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c62:	f000 fb65 	bl	8009330 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008c66:	4b1d      	ldr	r3, [pc, #116]	; (8008cdc <xTaskResumeAll+0x138>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d010      	beq.n	8008c94 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c72:	f000 f847 	bl	8008d04 <xTaskIncrementTick>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d002      	beq.n	8008c82 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008c7c:	4b16      	ldr	r3, [pc, #88]	; (8008cd8 <xTaskResumeAll+0x134>)
 8008c7e:	2201      	movs	r2, #1
 8008c80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	3b01      	subs	r3, #1
 8008c86:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1f1      	bne.n	8008c72 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008c8e:	4b13      	ldr	r3, [pc, #76]	; (8008cdc <xTaskResumeAll+0x138>)
 8008c90:	2200      	movs	r2, #0
 8008c92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c94:	4b10      	ldr	r3, [pc, #64]	; (8008cd8 <xTaskResumeAll+0x134>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d009      	beq.n	8008cb0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008ca0:	4b0f      	ldr	r3, [pc, #60]	; (8008ce0 <xTaskResumeAll+0x13c>)
 8008ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ca6:	601a      	str	r2, [r3, #0]
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008cb0:	f001 f8e0 	bl	8009e74 <vPortExitCritical>

	return xAlreadyYielded;
 8008cb4:	68bb      	ldr	r3, [r7, #8]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20005174 	.word	0x20005174
 8008cc4:	2000514c 	.word	0x2000514c
 8008cc8:	2000510c 	.word	0x2000510c
 8008ccc:	20005154 	.word	0x20005154
 8008cd0:	20004c7c 	.word	0x20004c7c
 8008cd4:	20004c78 	.word	0x20004c78
 8008cd8:	20005160 	.word	0x20005160
 8008cdc:	2000515c 	.word	0x2000515c
 8008ce0:	e000ed04 	.word	0xe000ed04

08008ce4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008cea:	4b05      	ldr	r3, [pc, #20]	; (8008d00 <xTaskGetTickCount+0x1c>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008cf0:	687b      	ldr	r3, [r7, #4]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	370c      	adds	r7, #12
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	20005150 	.word	0x20005150

08008d04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b086      	sub	sp, #24
 8008d08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d0e:	4b50      	ldr	r3, [pc, #320]	; (8008e50 <xTaskIncrementTick+0x14c>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f040 808b 	bne.w	8008e2e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008d18:	4b4e      	ldr	r3, [pc, #312]	; (8008e54 <xTaskIncrementTick+0x150>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008d20:	4a4c      	ldr	r2, [pc, #304]	; (8008e54 <xTaskIncrementTick+0x150>)
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d122      	bne.n	8008d72 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008d2c:	4b4a      	ldr	r3, [pc, #296]	; (8008e58 <xTaskIncrementTick+0x154>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00c      	beq.n	8008d50 <xTaskIncrementTick+0x4c>
	__asm volatile
 8008d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3a:	b672      	cpsid	i
 8008d3c:	f383 8811 	msr	BASEPRI, r3
 8008d40:	f3bf 8f6f 	isb	sy
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	b662      	cpsie	i
 8008d4a:	603b      	str	r3, [r7, #0]
}
 8008d4c:	bf00      	nop
 8008d4e:	e7fe      	b.n	8008d4e <xTaskIncrementTick+0x4a>
 8008d50:	4b41      	ldr	r3, [pc, #260]	; (8008e58 <xTaskIncrementTick+0x154>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	60fb      	str	r3, [r7, #12]
 8008d56:	4b41      	ldr	r3, [pc, #260]	; (8008e5c <xTaskIncrementTick+0x158>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a3f      	ldr	r2, [pc, #252]	; (8008e58 <xTaskIncrementTick+0x154>)
 8008d5c:	6013      	str	r3, [r2, #0]
 8008d5e:	4a3f      	ldr	r2, [pc, #252]	; (8008e5c <xTaskIncrementTick+0x158>)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6013      	str	r3, [r2, #0]
 8008d64:	4b3e      	ldr	r3, [pc, #248]	; (8008e60 <xTaskIncrementTick+0x15c>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	4a3d      	ldr	r2, [pc, #244]	; (8008e60 <xTaskIncrementTick+0x15c>)
 8008d6c:	6013      	str	r3, [r2, #0]
 8008d6e:	f000 fadf 	bl	8009330 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d72:	4b3c      	ldr	r3, [pc, #240]	; (8008e64 <xTaskIncrementTick+0x160>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	693a      	ldr	r2, [r7, #16]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d349      	bcc.n	8008e10 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d7c:	4b36      	ldr	r3, [pc, #216]	; (8008e58 <xTaskIncrementTick+0x154>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d104      	bne.n	8008d90 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d86:	4b37      	ldr	r3, [pc, #220]	; (8008e64 <xTaskIncrementTick+0x160>)
 8008d88:	f04f 32ff 	mov.w	r2, #4294967295
 8008d8c:	601a      	str	r2, [r3, #0]
					break;
 8008d8e:	e03f      	b.n	8008e10 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d90:	4b31      	ldr	r3, [pc, #196]	; (8008e58 <xTaskIncrementTick+0x154>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d203      	bcs.n	8008db0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008da8:	4a2e      	ldr	r2, [pc, #184]	; (8008e64 <xTaskIncrementTick+0x160>)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008dae:	e02f      	b.n	8008e10 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	3304      	adds	r3, #4
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7fe ff69 	bl	8007c8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d004      	beq.n	8008dcc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	3318      	adds	r3, #24
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7fe ff60 	bl	8007c8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd0:	4b25      	ldr	r3, [pc, #148]	; (8008e68 <xTaskIncrementTick+0x164>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d903      	bls.n	8008de0 <xTaskIncrementTick+0xdc>
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ddc:	4a22      	ldr	r2, [pc, #136]	; (8008e68 <xTaskIncrementTick+0x164>)
 8008dde:	6013      	str	r3, [r2, #0]
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008de4:	4613      	mov	r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4413      	add	r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	4a1f      	ldr	r2, [pc, #124]	; (8008e6c <xTaskIncrementTick+0x168>)
 8008dee:	441a      	add	r2, r3
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	3304      	adds	r3, #4
 8008df4:	4619      	mov	r1, r3
 8008df6:	4610      	mov	r0, r2
 8008df8:	f7fe feeb 	bl	8007bd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e00:	4b1b      	ldr	r3, [pc, #108]	; (8008e70 <xTaskIncrementTick+0x16c>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d3b8      	bcc.n	8008d7c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e0e:	e7b5      	b.n	8008d7c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008e10:	4b17      	ldr	r3, [pc, #92]	; (8008e70 <xTaskIncrementTick+0x16c>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e16:	4915      	ldr	r1, [pc, #84]	; (8008e6c <xTaskIncrementTick+0x168>)
 8008e18:	4613      	mov	r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	4413      	add	r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	440b      	add	r3, r1
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d907      	bls.n	8008e38 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	617b      	str	r3, [r7, #20]
 8008e2c:	e004      	b.n	8008e38 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008e2e:	4b11      	ldr	r3, [pc, #68]	; (8008e74 <xTaskIncrementTick+0x170>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	3301      	adds	r3, #1
 8008e34:	4a0f      	ldr	r2, [pc, #60]	; (8008e74 <xTaskIncrementTick+0x170>)
 8008e36:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008e38:	4b0f      	ldr	r3, [pc, #60]	; (8008e78 <xTaskIncrementTick+0x174>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d001      	beq.n	8008e44 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008e40:	2301      	movs	r3, #1
 8008e42:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008e44:	697b      	ldr	r3, [r7, #20]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3718      	adds	r7, #24
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	20005174 	.word	0x20005174
 8008e54:	20005150 	.word	0x20005150
 8008e58:	20005104 	.word	0x20005104
 8008e5c:	20005108 	.word	0x20005108
 8008e60:	20005164 	.word	0x20005164
 8008e64:	2000516c 	.word	0x2000516c
 8008e68:	20005154 	.word	0x20005154
 8008e6c:	20004c7c 	.word	0x20004c7c
 8008e70:	20004c78 	.word	0x20004c78
 8008e74:	2000515c 	.word	0x2000515c
 8008e78:	20005160 	.word	0x20005160

08008e7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e82:	4b29      	ldr	r3, [pc, #164]	; (8008f28 <vTaskSwitchContext+0xac>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d003      	beq.n	8008e92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e8a:	4b28      	ldr	r3, [pc, #160]	; (8008f2c <vTaskSwitchContext+0xb0>)
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e90:	e043      	b.n	8008f1a <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8008e92:	4b26      	ldr	r3, [pc, #152]	; (8008f2c <vTaskSwitchContext+0xb0>)
 8008e94:	2200      	movs	r2, #0
 8008e96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e98:	4b25      	ldr	r3, [pc, #148]	; (8008f30 <vTaskSwitchContext+0xb4>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	60fb      	str	r3, [r7, #12]
 8008e9e:	e012      	b.n	8008ec6 <vTaskSwitchContext+0x4a>
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d10c      	bne.n	8008ec0 <vTaskSwitchContext+0x44>
	__asm volatile
 8008ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eaa:	b672      	cpsid	i
 8008eac:	f383 8811 	msr	BASEPRI, r3
 8008eb0:	f3bf 8f6f 	isb	sy
 8008eb4:	f3bf 8f4f 	dsb	sy
 8008eb8:	b662      	cpsie	i
 8008eba:	607b      	str	r3, [r7, #4]
}
 8008ebc:	bf00      	nop
 8008ebe:	e7fe      	b.n	8008ebe <vTaskSwitchContext+0x42>
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	60fb      	str	r3, [r7, #12]
 8008ec6:	491b      	ldr	r1, [pc, #108]	; (8008f34 <vTaskSwitchContext+0xb8>)
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	4613      	mov	r3, r2
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	4413      	add	r3, r2
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	440b      	add	r3, r1
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d0e2      	beq.n	8008ea0 <vTaskSwitchContext+0x24>
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	4613      	mov	r3, r2
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	4413      	add	r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	4a13      	ldr	r2, [pc, #76]	; (8008f34 <vTaskSwitchContext+0xb8>)
 8008ee6:	4413      	add	r3, r2
 8008ee8:	60bb      	str	r3, [r7, #8]
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	685a      	ldr	r2, [r3, #4]
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	605a      	str	r2, [r3, #4]
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	685a      	ldr	r2, [r3, #4]
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	3308      	adds	r3, #8
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d104      	bne.n	8008f0a <vTaskSwitchContext+0x8e>
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	685a      	ldr	r2, [r3, #4]
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	605a      	str	r2, [r3, #4]
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	4a09      	ldr	r2, [pc, #36]	; (8008f38 <vTaskSwitchContext+0xbc>)
 8008f12:	6013      	str	r3, [r2, #0]
 8008f14:	4a06      	ldr	r2, [pc, #24]	; (8008f30 <vTaskSwitchContext+0xb4>)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	6013      	str	r3, [r2, #0]
}
 8008f1a:	bf00      	nop
 8008f1c:	3714      	adds	r7, #20
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	20005174 	.word	0x20005174
 8008f2c:	20005160 	.word	0x20005160
 8008f30:	20005154 	.word	0x20005154
 8008f34:	20004c7c 	.word	0x20004c7c
 8008f38:	20004c78 	.word	0x20004c78

08008f3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10c      	bne.n	8008f66 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f50:	b672      	cpsid	i
 8008f52:	f383 8811 	msr	BASEPRI, r3
 8008f56:	f3bf 8f6f 	isb	sy
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	b662      	cpsie	i
 8008f60:	60fb      	str	r3, [r7, #12]
}
 8008f62:	bf00      	nop
 8008f64:	e7fe      	b.n	8008f64 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f66:	4b07      	ldr	r3, [pc, #28]	; (8008f84 <vTaskPlaceOnEventList+0x48>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	3318      	adds	r3, #24
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f7fe fe53 	bl	8007c1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f74:	2101      	movs	r1, #1
 8008f76:	6838      	ldr	r0, [r7, #0]
 8008f78:	f000 fa8a 	bl	8009490 <prvAddCurrentTaskToDelayedList>
}
 8008f7c:	bf00      	nop
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	20004c78 	.word	0x20004c78

08008f88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b086      	sub	sp, #24
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d10c      	bne.n	8008fb4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9e:	b672      	cpsid	i
 8008fa0:	f383 8811 	msr	BASEPRI, r3
 8008fa4:	f3bf 8f6f 	isb	sy
 8008fa8:	f3bf 8f4f 	dsb	sy
 8008fac:	b662      	cpsie	i
 8008fae:	617b      	str	r3, [r7, #20]
}
 8008fb0:	bf00      	nop
 8008fb2:	e7fe      	b.n	8008fb2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008fb4:	4b0a      	ldr	r3, [pc, #40]	; (8008fe0 <vTaskPlaceOnEventListRestricted+0x58>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	3318      	adds	r3, #24
 8008fba:	4619      	mov	r1, r3
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f7fe fe08 	bl	8007bd2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d002      	beq.n	8008fce <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8008fcc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008fce:	6879      	ldr	r1, [r7, #4]
 8008fd0:	68b8      	ldr	r0, [r7, #8]
 8008fd2:	f000 fa5d 	bl	8009490 <prvAddCurrentTaskToDelayedList>
	}
 8008fd6:	bf00      	nop
 8008fd8:	3718      	adds	r7, #24
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	20004c78 	.word	0x20004c78

08008fe4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b086      	sub	sp, #24
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d10c      	bne.n	8009014 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffe:	b672      	cpsid	i
 8009000:	f383 8811 	msr	BASEPRI, r3
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	b662      	cpsie	i
 800900e:	60fb      	str	r3, [r7, #12]
}
 8009010:	bf00      	nop
 8009012:	e7fe      	b.n	8009012 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	3318      	adds	r3, #24
 8009018:	4618      	mov	r0, r3
 800901a:	f7fe fe37 	bl	8007c8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800901e:	4b1e      	ldr	r3, [pc, #120]	; (8009098 <xTaskRemoveFromEventList+0xb4>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d11d      	bne.n	8009062 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	3304      	adds	r3, #4
 800902a:	4618      	mov	r0, r3
 800902c:	f7fe fe2e 	bl	8007c8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009034:	4b19      	ldr	r3, [pc, #100]	; (800909c <xTaskRemoveFromEventList+0xb8>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	429a      	cmp	r2, r3
 800903a:	d903      	bls.n	8009044 <xTaskRemoveFromEventList+0x60>
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009040:	4a16      	ldr	r2, [pc, #88]	; (800909c <xTaskRemoveFromEventList+0xb8>)
 8009042:	6013      	str	r3, [r2, #0]
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009048:	4613      	mov	r3, r2
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	4413      	add	r3, r2
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	4a13      	ldr	r2, [pc, #76]	; (80090a0 <xTaskRemoveFromEventList+0xbc>)
 8009052:	441a      	add	r2, r3
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	3304      	adds	r3, #4
 8009058:	4619      	mov	r1, r3
 800905a:	4610      	mov	r0, r2
 800905c:	f7fe fdb9 	bl	8007bd2 <vListInsertEnd>
 8009060:	e005      	b.n	800906e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	3318      	adds	r3, #24
 8009066:	4619      	mov	r1, r3
 8009068:	480e      	ldr	r0, [pc, #56]	; (80090a4 <xTaskRemoveFromEventList+0xc0>)
 800906a:	f7fe fdb2 	bl	8007bd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009072:	4b0d      	ldr	r3, [pc, #52]	; (80090a8 <xTaskRemoveFromEventList+0xc4>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009078:	429a      	cmp	r2, r3
 800907a:	d905      	bls.n	8009088 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800907c:	2301      	movs	r3, #1
 800907e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009080:	4b0a      	ldr	r3, [pc, #40]	; (80090ac <xTaskRemoveFromEventList+0xc8>)
 8009082:	2201      	movs	r2, #1
 8009084:	601a      	str	r2, [r3, #0]
 8009086:	e001      	b.n	800908c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8009088:	2300      	movs	r3, #0
 800908a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800908c:	697b      	ldr	r3, [r7, #20]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3718      	adds	r7, #24
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	20005174 	.word	0x20005174
 800909c:	20005154 	.word	0x20005154
 80090a0:	20004c7c 	.word	0x20004c7c
 80090a4:	2000510c 	.word	0x2000510c
 80090a8:	20004c78 	.word	0x20004c78
 80090ac:	20005160 	.word	0x20005160

080090b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80090b8:	4b06      	ldr	r3, [pc, #24]	; (80090d4 <vTaskInternalSetTimeOutState+0x24>)
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80090c0:	4b05      	ldr	r3, [pc, #20]	; (80090d8 <vTaskInternalSetTimeOutState+0x28>)
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	605a      	str	r2, [r3, #4]
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr
 80090d4:	20005164 	.word	0x20005164
 80090d8:	20005150 	.word	0x20005150

080090dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b088      	sub	sp, #32
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d10c      	bne.n	8009106 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80090ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f0:	b672      	cpsid	i
 80090f2:	f383 8811 	msr	BASEPRI, r3
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	b662      	cpsie	i
 8009100:	613b      	str	r3, [r7, #16]
}
 8009102:	bf00      	nop
 8009104:	e7fe      	b.n	8009104 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d10c      	bne.n	8009126 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800910c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009110:	b672      	cpsid	i
 8009112:	f383 8811 	msr	BASEPRI, r3
 8009116:	f3bf 8f6f 	isb	sy
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	b662      	cpsie	i
 8009120:	60fb      	str	r3, [r7, #12]
}
 8009122:	bf00      	nop
 8009124:	e7fe      	b.n	8009124 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8009126:	f000 fe71 	bl	8009e0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800912a:	4b1d      	ldr	r3, [pc, #116]	; (80091a0 <xTaskCheckForTimeOut+0xc4>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	69ba      	ldr	r2, [r7, #24]
 8009136:	1ad3      	subs	r3, r2, r3
 8009138:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009142:	d102      	bne.n	800914a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009144:	2300      	movs	r3, #0
 8009146:	61fb      	str	r3, [r7, #28]
 8009148:	e023      	b.n	8009192 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	4b15      	ldr	r3, [pc, #84]	; (80091a4 <xTaskCheckForTimeOut+0xc8>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	429a      	cmp	r2, r3
 8009154:	d007      	beq.n	8009166 <xTaskCheckForTimeOut+0x8a>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	69ba      	ldr	r2, [r7, #24]
 800915c:	429a      	cmp	r2, r3
 800915e:	d302      	bcc.n	8009166 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009160:	2301      	movs	r3, #1
 8009162:	61fb      	str	r3, [r7, #28]
 8009164:	e015      	b.n	8009192 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	697a      	ldr	r2, [r7, #20]
 800916c:	429a      	cmp	r2, r3
 800916e:	d20b      	bcs.n	8009188 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	1ad2      	subs	r2, r2, r3
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f7ff ff97 	bl	80090b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009182:	2300      	movs	r3, #0
 8009184:	61fb      	str	r3, [r7, #28]
 8009186:	e004      	b.n	8009192 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	2200      	movs	r2, #0
 800918c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800918e:	2301      	movs	r3, #1
 8009190:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009192:	f000 fe6f 	bl	8009e74 <vPortExitCritical>

	return xReturn;
 8009196:	69fb      	ldr	r3, [r7, #28]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3720      	adds	r7, #32
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	20005150 	.word	0x20005150
 80091a4:	20005164 	.word	0x20005164

080091a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80091a8:	b480      	push	{r7}
 80091aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80091ac:	4b03      	ldr	r3, [pc, #12]	; (80091bc <vTaskMissedYield+0x14>)
 80091ae:	2201      	movs	r2, #1
 80091b0:	601a      	str	r2, [r3, #0]
}
 80091b2:	bf00      	nop
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr
 80091bc:	20005160 	.word	0x20005160

080091c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80091c8:	f000 f852 	bl	8009270 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80091cc:	4b06      	ldr	r3, [pc, #24]	; (80091e8 <prvIdleTask+0x28>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d9f9      	bls.n	80091c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80091d4:	4b05      	ldr	r3, [pc, #20]	; (80091ec <prvIdleTask+0x2c>)
 80091d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80091e4:	e7f0      	b.n	80091c8 <prvIdleTask+0x8>
 80091e6:	bf00      	nop
 80091e8:	20004c7c 	.word	0x20004c7c
 80091ec:	e000ed04 	.word	0xe000ed04

080091f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091f6:	2300      	movs	r3, #0
 80091f8:	607b      	str	r3, [r7, #4]
 80091fa:	e00c      	b.n	8009216 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	4613      	mov	r3, r2
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	4413      	add	r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4a12      	ldr	r2, [pc, #72]	; (8009250 <prvInitialiseTaskLists+0x60>)
 8009208:	4413      	add	r3, r2
 800920a:	4618      	mov	r0, r3
 800920c:	f7fe fcb4 	bl	8007b78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	3301      	adds	r3, #1
 8009214:	607b      	str	r3, [r7, #4]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2b37      	cmp	r3, #55	; 0x37
 800921a:	d9ef      	bls.n	80091fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800921c:	480d      	ldr	r0, [pc, #52]	; (8009254 <prvInitialiseTaskLists+0x64>)
 800921e:	f7fe fcab 	bl	8007b78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009222:	480d      	ldr	r0, [pc, #52]	; (8009258 <prvInitialiseTaskLists+0x68>)
 8009224:	f7fe fca8 	bl	8007b78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009228:	480c      	ldr	r0, [pc, #48]	; (800925c <prvInitialiseTaskLists+0x6c>)
 800922a:	f7fe fca5 	bl	8007b78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800922e:	480c      	ldr	r0, [pc, #48]	; (8009260 <prvInitialiseTaskLists+0x70>)
 8009230:	f7fe fca2 	bl	8007b78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009234:	480b      	ldr	r0, [pc, #44]	; (8009264 <prvInitialiseTaskLists+0x74>)
 8009236:	f7fe fc9f 	bl	8007b78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800923a:	4b0b      	ldr	r3, [pc, #44]	; (8009268 <prvInitialiseTaskLists+0x78>)
 800923c:	4a05      	ldr	r2, [pc, #20]	; (8009254 <prvInitialiseTaskLists+0x64>)
 800923e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009240:	4b0a      	ldr	r3, [pc, #40]	; (800926c <prvInitialiseTaskLists+0x7c>)
 8009242:	4a05      	ldr	r2, [pc, #20]	; (8009258 <prvInitialiseTaskLists+0x68>)
 8009244:	601a      	str	r2, [r3, #0]
}
 8009246:	bf00      	nop
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	20004c7c 	.word	0x20004c7c
 8009254:	200050dc 	.word	0x200050dc
 8009258:	200050f0 	.word	0x200050f0
 800925c:	2000510c 	.word	0x2000510c
 8009260:	20005120 	.word	0x20005120
 8009264:	20005138 	.word	0x20005138
 8009268:	20005104 	.word	0x20005104
 800926c:	20005108 	.word	0x20005108

08009270 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009276:	e019      	b.n	80092ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009278:	f000 fdc8 	bl	8009e0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800927c:	4b10      	ldr	r3, [pc, #64]	; (80092c0 <prvCheckTasksWaitingTermination+0x50>)
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	3304      	adds	r3, #4
 8009288:	4618      	mov	r0, r3
 800928a:	f7fe fcff 	bl	8007c8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800928e:	4b0d      	ldr	r3, [pc, #52]	; (80092c4 <prvCheckTasksWaitingTermination+0x54>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	3b01      	subs	r3, #1
 8009294:	4a0b      	ldr	r2, [pc, #44]	; (80092c4 <prvCheckTasksWaitingTermination+0x54>)
 8009296:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009298:	4b0b      	ldr	r3, [pc, #44]	; (80092c8 <prvCheckTasksWaitingTermination+0x58>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	3b01      	subs	r3, #1
 800929e:	4a0a      	ldr	r2, [pc, #40]	; (80092c8 <prvCheckTasksWaitingTermination+0x58>)
 80092a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80092a2:	f000 fde7 	bl	8009e74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 f810 	bl	80092cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092ac:	4b06      	ldr	r3, [pc, #24]	; (80092c8 <prvCheckTasksWaitingTermination+0x58>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1e1      	bne.n	8009278 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80092b4:	bf00      	nop
 80092b6:	bf00      	nop
 80092b8:	3708      	adds	r7, #8
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	20005120 	.word	0x20005120
 80092c4:	2000514c 	.word	0x2000514c
 80092c8:	20005134 	.word	0x20005134

080092cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d108      	bne.n	80092f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e2:	4618      	mov	r0, r3
 80092e4:	f000 ff88 	bl	800a1f8 <vPortFree>
				vPortFree( pxTCB );
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 ff85 	bl	800a1f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80092ee:	e01a      	b.n	8009326 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d103      	bne.n	8009302 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 ff7c 	bl	800a1f8 <vPortFree>
	}
 8009300:	e011      	b.n	8009326 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009308:	2b02      	cmp	r3, #2
 800930a:	d00c      	beq.n	8009326 <prvDeleteTCB+0x5a>
	__asm volatile
 800930c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009310:	b672      	cpsid	i
 8009312:	f383 8811 	msr	BASEPRI, r3
 8009316:	f3bf 8f6f 	isb	sy
 800931a:	f3bf 8f4f 	dsb	sy
 800931e:	b662      	cpsie	i
 8009320:	60fb      	str	r3, [r7, #12]
}
 8009322:	bf00      	nop
 8009324:	e7fe      	b.n	8009324 <prvDeleteTCB+0x58>
	}
 8009326:	bf00      	nop
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
	...

08009330 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009336:	4b0c      	ldr	r3, [pc, #48]	; (8009368 <prvResetNextTaskUnblockTime+0x38>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d104      	bne.n	800934a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009340:	4b0a      	ldr	r3, [pc, #40]	; (800936c <prvResetNextTaskUnblockTime+0x3c>)
 8009342:	f04f 32ff 	mov.w	r2, #4294967295
 8009346:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009348:	e008      	b.n	800935c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800934a:	4b07      	ldr	r3, [pc, #28]	; (8009368 <prvResetNextTaskUnblockTime+0x38>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	4a04      	ldr	r2, [pc, #16]	; (800936c <prvResetNextTaskUnblockTime+0x3c>)
 800935a:	6013      	str	r3, [r2, #0]
}
 800935c:	bf00      	nop
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr
 8009368:	20005104 	.word	0x20005104
 800936c:	2000516c 	.word	0x2000516c

08009370 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009376:	4b0b      	ldr	r3, [pc, #44]	; (80093a4 <xTaskGetSchedulerState+0x34>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d102      	bne.n	8009384 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800937e:	2301      	movs	r3, #1
 8009380:	607b      	str	r3, [r7, #4]
 8009382:	e008      	b.n	8009396 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009384:	4b08      	ldr	r3, [pc, #32]	; (80093a8 <xTaskGetSchedulerState+0x38>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d102      	bne.n	8009392 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800938c:	2302      	movs	r3, #2
 800938e:	607b      	str	r3, [r7, #4]
 8009390:	e001      	b.n	8009396 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009392:	2300      	movs	r3, #0
 8009394:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009396:	687b      	ldr	r3, [r7, #4]
	}
 8009398:	4618      	mov	r0, r3
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr
 80093a4:	20005158 	.word	0x20005158
 80093a8:	20005174 	.word	0x20005174

080093ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b086      	sub	sp, #24
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80093b8:	2300      	movs	r3, #0
 80093ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d05a      	beq.n	8009478 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80093c2:	4b30      	ldr	r3, [pc, #192]	; (8009484 <xTaskPriorityDisinherit+0xd8>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	693a      	ldr	r2, [r7, #16]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d00c      	beq.n	80093e6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80093cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d0:	b672      	cpsid	i
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	b662      	cpsie	i
 80093e0:	60fb      	str	r3, [r7, #12]
}
 80093e2:	bf00      	nop
 80093e4:	e7fe      	b.n	80093e4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d10c      	bne.n	8009408 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80093ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f2:	b672      	cpsid	i
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	b662      	cpsie	i
 8009402:	60bb      	str	r3, [r7, #8]
}
 8009404:	bf00      	nop
 8009406:	e7fe      	b.n	8009406 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800940c:	1e5a      	subs	r2, r3, #1
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800941a:	429a      	cmp	r2, r3
 800941c:	d02c      	beq.n	8009478 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009422:	2b00      	cmp	r3, #0
 8009424:	d128      	bne.n	8009478 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	3304      	adds	r3, #4
 800942a:	4618      	mov	r0, r3
 800942c:	f7fe fc2e 	bl	8007c8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800943c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009448:	4b0f      	ldr	r3, [pc, #60]	; (8009488 <xTaskPriorityDisinherit+0xdc>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	429a      	cmp	r2, r3
 800944e:	d903      	bls.n	8009458 <xTaskPriorityDisinherit+0xac>
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009454:	4a0c      	ldr	r2, [pc, #48]	; (8009488 <xTaskPriorityDisinherit+0xdc>)
 8009456:	6013      	str	r3, [r2, #0]
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800945c:	4613      	mov	r3, r2
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	4413      	add	r3, r2
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	4a09      	ldr	r2, [pc, #36]	; (800948c <xTaskPriorityDisinherit+0xe0>)
 8009466:	441a      	add	r2, r3
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	3304      	adds	r3, #4
 800946c:	4619      	mov	r1, r3
 800946e:	4610      	mov	r0, r2
 8009470:	f7fe fbaf 	bl	8007bd2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009474:	2301      	movs	r3, #1
 8009476:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009478:	697b      	ldr	r3, [r7, #20]
	}
 800947a:	4618      	mov	r0, r3
 800947c:	3718      	adds	r7, #24
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	20004c78 	.word	0x20004c78
 8009488:	20005154 	.word	0x20005154
 800948c:	20004c7c 	.word	0x20004c7c

08009490 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800949a:	4b21      	ldr	r3, [pc, #132]	; (8009520 <prvAddCurrentTaskToDelayedList+0x90>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094a0:	4b20      	ldr	r3, [pc, #128]	; (8009524 <prvAddCurrentTaskToDelayedList+0x94>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	3304      	adds	r3, #4
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fe fbf0 	bl	8007c8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b2:	d10a      	bne.n	80094ca <prvAddCurrentTaskToDelayedList+0x3a>
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d007      	beq.n	80094ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094ba:	4b1a      	ldr	r3, [pc, #104]	; (8009524 <prvAddCurrentTaskToDelayedList+0x94>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	3304      	adds	r3, #4
 80094c0:	4619      	mov	r1, r3
 80094c2:	4819      	ldr	r0, [pc, #100]	; (8009528 <prvAddCurrentTaskToDelayedList+0x98>)
 80094c4:	f7fe fb85 	bl	8007bd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80094c8:	e026      	b.n	8009518 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80094ca:	68fa      	ldr	r2, [r7, #12]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4413      	add	r3, r2
 80094d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80094d2:	4b14      	ldr	r3, [pc, #80]	; (8009524 <prvAddCurrentTaskToDelayedList+0x94>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	68ba      	ldr	r2, [r7, #8]
 80094d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80094da:	68ba      	ldr	r2, [r7, #8]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d209      	bcs.n	80094f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094e2:	4b12      	ldr	r3, [pc, #72]	; (800952c <prvAddCurrentTaskToDelayedList+0x9c>)
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	4b0f      	ldr	r3, [pc, #60]	; (8009524 <prvAddCurrentTaskToDelayedList+0x94>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	3304      	adds	r3, #4
 80094ec:	4619      	mov	r1, r3
 80094ee:	4610      	mov	r0, r2
 80094f0:	f7fe fb93 	bl	8007c1a <vListInsert>
}
 80094f4:	e010      	b.n	8009518 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094f6:	4b0e      	ldr	r3, [pc, #56]	; (8009530 <prvAddCurrentTaskToDelayedList+0xa0>)
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	4b0a      	ldr	r3, [pc, #40]	; (8009524 <prvAddCurrentTaskToDelayedList+0x94>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	3304      	adds	r3, #4
 8009500:	4619      	mov	r1, r3
 8009502:	4610      	mov	r0, r2
 8009504:	f7fe fb89 	bl	8007c1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009508:	4b0a      	ldr	r3, [pc, #40]	; (8009534 <prvAddCurrentTaskToDelayedList+0xa4>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	429a      	cmp	r2, r3
 8009510:	d202      	bcs.n	8009518 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009512:	4a08      	ldr	r2, [pc, #32]	; (8009534 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	6013      	str	r3, [r2, #0]
}
 8009518:	bf00      	nop
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}
 8009520:	20005150 	.word	0x20005150
 8009524:	20004c78 	.word	0x20004c78
 8009528:	20005138 	.word	0x20005138
 800952c:	20005108 	.word	0x20005108
 8009530:	20005104 	.word	0x20005104
 8009534:	2000516c 	.word	0x2000516c

08009538 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b08a      	sub	sp, #40	; 0x28
 800953c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800953e:	2300      	movs	r3, #0
 8009540:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009542:	f000 fb15 	bl	8009b70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009546:	4b1d      	ldr	r3, [pc, #116]	; (80095bc <xTimerCreateTimerTask+0x84>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d021      	beq.n	8009592 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800954e:	2300      	movs	r3, #0
 8009550:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009552:	2300      	movs	r3, #0
 8009554:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009556:	1d3a      	adds	r2, r7, #4
 8009558:	f107 0108 	add.w	r1, r7, #8
 800955c:	f107 030c 	add.w	r3, r7, #12
 8009560:	4618      	mov	r0, r3
 8009562:	f7fe faef 	bl	8007b44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009566:	6879      	ldr	r1, [r7, #4]
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	68fa      	ldr	r2, [r7, #12]
 800956c:	9202      	str	r2, [sp, #8]
 800956e:	9301      	str	r3, [sp, #4]
 8009570:	2302      	movs	r3, #2
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	2300      	movs	r3, #0
 8009576:	460a      	mov	r2, r1
 8009578:	4911      	ldr	r1, [pc, #68]	; (80095c0 <xTimerCreateTimerTask+0x88>)
 800957a:	4812      	ldr	r0, [pc, #72]	; (80095c4 <xTimerCreateTimerTask+0x8c>)
 800957c:	f7ff f8ba 	bl	80086f4 <xTaskCreateStatic>
 8009580:	4603      	mov	r3, r0
 8009582:	4a11      	ldr	r2, [pc, #68]	; (80095c8 <xTimerCreateTimerTask+0x90>)
 8009584:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009586:	4b10      	ldr	r3, [pc, #64]	; (80095c8 <xTimerCreateTimerTask+0x90>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d001      	beq.n	8009592 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800958e:	2301      	movs	r3, #1
 8009590:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d10c      	bne.n	80095b2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8009598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959c:	b672      	cpsid	i
 800959e:	f383 8811 	msr	BASEPRI, r3
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	b662      	cpsie	i
 80095ac:	613b      	str	r3, [r7, #16]
}
 80095ae:	bf00      	nop
 80095b0:	e7fe      	b.n	80095b0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80095b2:	697b      	ldr	r3, [r7, #20]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3718      	adds	r7, #24
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	200051a8 	.word	0x200051a8
 80095c0:	0800b664 	.word	0x0800b664
 80095c4:	08009709 	.word	0x08009709
 80095c8:	200051ac 	.word	0x200051ac

080095cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b08a      	sub	sp, #40	; 0x28
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	607a      	str	r2, [r7, #4]
 80095d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80095da:	2300      	movs	r3, #0
 80095dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d10c      	bne.n	80095fe <xTimerGenericCommand+0x32>
	__asm volatile
 80095e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e8:	b672      	cpsid	i
 80095ea:	f383 8811 	msr	BASEPRI, r3
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	f3bf 8f4f 	dsb	sy
 80095f6:	b662      	cpsie	i
 80095f8:	623b      	str	r3, [r7, #32]
}
 80095fa:	bf00      	nop
 80095fc:	e7fe      	b.n	80095fc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80095fe:	4b1a      	ldr	r3, [pc, #104]	; (8009668 <xTimerGenericCommand+0x9c>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d02a      	beq.n	800965c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	2b05      	cmp	r3, #5
 8009616:	dc18      	bgt.n	800964a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009618:	f7ff feaa 	bl	8009370 <xTaskGetSchedulerState>
 800961c:	4603      	mov	r3, r0
 800961e:	2b02      	cmp	r3, #2
 8009620:	d109      	bne.n	8009636 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009622:	4b11      	ldr	r3, [pc, #68]	; (8009668 <xTimerGenericCommand+0x9c>)
 8009624:	6818      	ldr	r0, [r3, #0]
 8009626:	f107 0110 	add.w	r1, r7, #16
 800962a:	2300      	movs	r3, #0
 800962c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800962e:	f7fe fc67 	bl	8007f00 <xQueueGenericSend>
 8009632:	6278      	str	r0, [r7, #36]	; 0x24
 8009634:	e012      	b.n	800965c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009636:	4b0c      	ldr	r3, [pc, #48]	; (8009668 <xTimerGenericCommand+0x9c>)
 8009638:	6818      	ldr	r0, [r3, #0]
 800963a:	f107 0110 	add.w	r1, r7, #16
 800963e:	2300      	movs	r3, #0
 8009640:	2200      	movs	r2, #0
 8009642:	f7fe fc5d 	bl	8007f00 <xQueueGenericSend>
 8009646:	6278      	str	r0, [r7, #36]	; 0x24
 8009648:	e008      	b.n	800965c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800964a:	4b07      	ldr	r3, [pc, #28]	; (8009668 <xTimerGenericCommand+0x9c>)
 800964c:	6818      	ldr	r0, [r3, #0]
 800964e:	f107 0110 	add.w	r1, r7, #16
 8009652:	2300      	movs	r3, #0
 8009654:	683a      	ldr	r2, [r7, #0]
 8009656:	f7fe fd59 	bl	800810c <xQueueGenericSendFromISR>
 800965a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800965c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800965e:	4618      	mov	r0, r3
 8009660:	3728      	adds	r7, #40	; 0x28
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	200051a8 	.word	0x200051a8

0800966c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b088      	sub	sp, #32
 8009670:	af02      	add	r7, sp, #8
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009676:	4b23      	ldr	r3, [pc, #140]	; (8009704 <prvProcessExpiredTimer+0x98>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	3304      	adds	r3, #4
 8009684:	4618      	mov	r0, r3
 8009686:	f7fe fb01 	bl	8007c8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009690:	f003 0304 	and.w	r3, r3, #4
 8009694:	2b00      	cmp	r3, #0
 8009696:	d024      	beq.n	80096e2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	699a      	ldr	r2, [r3, #24]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	18d1      	adds	r1, r2, r3
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	683a      	ldr	r2, [r7, #0]
 80096a4:	6978      	ldr	r0, [r7, #20]
 80096a6:	f000 f8d3 	bl	8009850 <prvInsertTimerInActiveList>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d021      	beq.n	80096f4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80096b0:	2300      	movs	r3, #0
 80096b2:	9300      	str	r3, [sp, #0]
 80096b4:	2300      	movs	r3, #0
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	2100      	movs	r1, #0
 80096ba:	6978      	ldr	r0, [r7, #20]
 80096bc:	f7ff ff86 	bl	80095cc <xTimerGenericCommand>
 80096c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d115      	bne.n	80096f4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80096c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096cc:	b672      	cpsid	i
 80096ce:	f383 8811 	msr	BASEPRI, r3
 80096d2:	f3bf 8f6f 	isb	sy
 80096d6:	f3bf 8f4f 	dsb	sy
 80096da:	b662      	cpsie	i
 80096dc:	60fb      	str	r3, [r7, #12]
}
 80096de:	bf00      	nop
 80096e0:	e7fe      	b.n	80096e0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096e8:	f023 0301 	bic.w	r3, r3, #1
 80096ec:	b2da      	uxtb	r2, r3
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	6a1b      	ldr	r3, [r3, #32]
 80096f8:	6978      	ldr	r0, [r7, #20]
 80096fa:	4798      	blx	r3
}
 80096fc:	bf00      	nop
 80096fe:	3718      	adds	r7, #24
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	200051a0 	.word	0x200051a0

08009708 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009710:	f107 0308 	add.w	r3, r7, #8
 8009714:	4618      	mov	r0, r3
 8009716:	f000 f857 	bl	80097c8 <prvGetNextExpireTime>
 800971a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	4619      	mov	r1, r3
 8009720:	68f8      	ldr	r0, [r7, #12]
 8009722:	f000 f803 	bl	800972c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009726:	f000 f8d5 	bl	80098d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800972a:	e7f1      	b.n	8009710 <prvTimerTask+0x8>

0800972c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009736:	f7ff fa27 	bl	8008b88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800973a:	f107 0308 	add.w	r3, r7, #8
 800973e:	4618      	mov	r0, r3
 8009740:	f000 f866 	bl	8009810 <prvSampleTimeNow>
 8009744:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d130      	bne.n	80097ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10a      	bne.n	8009768 <prvProcessTimerOrBlockTask+0x3c>
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	429a      	cmp	r2, r3
 8009758:	d806      	bhi.n	8009768 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800975a:	f7ff fa23 	bl	8008ba4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800975e:	68f9      	ldr	r1, [r7, #12]
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f7ff ff83 	bl	800966c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009766:	e024      	b.n	80097b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d008      	beq.n	8009780 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800976e:	4b13      	ldr	r3, [pc, #76]	; (80097bc <prvProcessTimerOrBlockTask+0x90>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d101      	bne.n	800977c <prvProcessTimerOrBlockTask+0x50>
 8009778:	2301      	movs	r3, #1
 800977a:	e000      	b.n	800977e <prvProcessTimerOrBlockTask+0x52>
 800977c:	2300      	movs	r3, #0
 800977e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009780:	4b0f      	ldr	r3, [pc, #60]	; (80097c0 <prvProcessTimerOrBlockTask+0x94>)
 8009782:	6818      	ldr	r0, [r3, #0]
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	4619      	mov	r1, r3
 800978e:	f7fe ff7d 	bl	800868c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009792:	f7ff fa07 	bl	8008ba4 <xTaskResumeAll>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d10a      	bne.n	80097b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800979c:	4b09      	ldr	r3, [pc, #36]	; (80097c4 <prvProcessTimerOrBlockTask+0x98>)
 800979e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097a2:	601a      	str	r2, [r3, #0]
 80097a4:	f3bf 8f4f 	dsb	sy
 80097a8:	f3bf 8f6f 	isb	sy
}
 80097ac:	e001      	b.n	80097b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80097ae:	f7ff f9f9 	bl	8008ba4 <xTaskResumeAll>
}
 80097b2:	bf00      	nop
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	200051a4 	.word	0x200051a4
 80097c0:	200051a8 	.word	0x200051a8
 80097c4:	e000ed04 	.word	0xe000ed04

080097c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80097d0:	4b0e      	ldr	r3, [pc, #56]	; (800980c <prvGetNextExpireTime+0x44>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d101      	bne.n	80097de <prvGetNextExpireTime+0x16>
 80097da:	2201      	movs	r2, #1
 80097dc:	e000      	b.n	80097e0 <prvGetNextExpireTime+0x18>
 80097de:	2200      	movs	r2, #0
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d105      	bne.n	80097f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097ec:	4b07      	ldr	r3, [pc, #28]	; (800980c <prvGetNextExpireTime+0x44>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	60fb      	str	r3, [r7, #12]
 80097f6:	e001      	b.n	80097fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80097f8:	2300      	movs	r3, #0
 80097fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80097fc:	68fb      	ldr	r3, [r7, #12]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3714      	adds	r7, #20
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	200051a0 	.word	0x200051a0

08009810 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009818:	f7ff fa64 	bl	8008ce4 <xTaskGetTickCount>
 800981c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800981e:	4b0b      	ldr	r3, [pc, #44]	; (800984c <prvSampleTimeNow+0x3c>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	68fa      	ldr	r2, [r7, #12]
 8009824:	429a      	cmp	r2, r3
 8009826:	d205      	bcs.n	8009834 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009828:	f000 f93c 	bl	8009aa4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	601a      	str	r2, [r3, #0]
 8009832:	e002      	b.n	800983a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800983a:	4a04      	ldr	r2, [pc, #16]	; (800984c <prvSampleTimeNow+0x3c>)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009840:	68fb      	ldr	r3, [r7, #12]
}
 8009842:	4618      	mov	r0, r3
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	200051b0 	.word	0x200051b0

08009850 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b086      	sub	sp, #24
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	607a      	str	r2, [r7, #4]
 800985c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800985e:	2300      	movs	r3, #0
 8009860:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	68ba      	ldr	r2, [r7, #8]
 8009866:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	68fa      	ldr	r2, [r7, #12]
 800986c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800986e:	68ba      	ldr	r2, [r7, #8]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	429a      	cmp	r2, r3
 8009874:	d812      	bhi.n	800989c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	1ad2      	subs	r2, r2, r3
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	699b      	ldr	r3, [r3, #24]
 8009880:	429a      	cmp	r2, r3
 8009882:	d302      	bcc.n	800988a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009884:	2301      	movs	r3, #1
 8009886:	617b      	str	r3, [r7, #20]
 8009888:	e01b      	b.n	80098c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800988a:	4b10      	ldr	r3, [pc, #64]	; (80098cc <prvInsertTimerInActiveList+0x7c>)
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	3304      	adds	r3, #4
 8009892:	4619      	mov	r1, r3
 8009894:	4610      	mov	r0, r2
 8009896:	f7fe f9c0 	bl	8007c1a <vListInsert>
 800989a:	e012      	b.n	80098c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d206      	bcs.n	80098b2 <prvInsertTimerInActiveList+0x62>
 80098a4:	68ba      	ldr	r2, [r7, #8]
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d302      	bcc.n	80098b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80098ac:	2301      	movs	r3, #1
 80098ae:	617b      	str	r3, [r7, #20]
 80098b0:	e007      	b.n	80098c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80098b2:	4b07      	ldr	r3, [pc, #28]	; (80098d0 <prvInsertTimerInActiveList+0x80>)
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	3304      	adds	r3, #4
 80098ba:	4619      	mov	r1, r3
 80098bc:	4610      	mov	r0, r2
 80098be:	f7fe f9ac 	bl	8007c1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80098c2:	697b      	ldr	r3, [r7, #20]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3718      	adds	r7, #24
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	200051a4 	.word	0x200051a4
 80098d0:	200051a0 	.word	0x200051a0

080098d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b08e      	sub	sp, #56	; 0x38
 80098d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098da:	e0d0      	b.n	8009a7e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	da1a      	bge.n	8009918 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80098e2:	1d3b      	adds	r3, r7, #4
 80098e4:	3304      	adds	r3, #4
 80098e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80098e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10c      	bne.n	8009908 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80098ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f2:	b672      	cpsid	i
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	b662      	cpsie	i
 8009902:	61fb      	str	r3, [r7, #28]
}
 8009904:	bf00      	nop
 8009906:	e7fe      	b.n	8009906 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800990e:	6850      	ldr	r0, [r2, #4]
 8009910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009912:	6892      	ldr	r2, [r2, #8]
 8009914:	4611      	mov	r1, r2
 8009916:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2b00      	cmp	r3, #0
 800991c:	f2c0 80ae 	blt.w	8009a7c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009926:	695b      	ldr	r3, [r3, #20]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d004      	beq.n	8009936 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800992c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992e:	3304      	adds	r3, #4
 8009930:	4618      	mov	r0, r3
 8009932:	f7fe f9ab 	bl	8007c8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009936:	463b      	mov	r3, r7
 8009938:	4618      	mov	r0, r3
 800993a:	f7ff ff69 	bl	8009810 <prvSampleTimeNow>
 800993e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2b09      	cmp	r3, #9
 8009944:	f200 809b 	bhi.w	8009a7e <prvProcessReceivedCommands+0x1aa>
 8009948:	a201      	add	r2, pc, #4	; (adr r2, 8009950 <prvProcessReceivedCommands+0x7c>)
 800994a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800994e:	bf00      	nop
 8009950:	08009979 	.word	0x08009979
 8009954:	08009979 	.word	0x08009979
 8009958:	08009979 	.word	0x08009979
 800995c:	080099f1 	.word	0x080099f1
 8009960:	08009a05 	.word	0x08009a05
 8009964:	08009a53 	.word	0x08009a53
 8009968:	08009979 	.word	0x08009979
 800996c:	08009979 	.word	0x08009979
 8009970:	080099f1 	.word	0x080099f1
 8009974:	08009a05 	.word	0x08009a05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800997e:	f043 0301 	orr.w	r3, r3, #1
 8009982:	b2da      	uxtb	r2, r3
 8009984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009986:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800998a:	68ba      	ldr	r2, [r7, #8]
 800998c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998e:	699b      	ldr	r3, [r3, #24]
 8009990:	18d1      	adds	r1, r2, r3
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009998:	f7ff ff5a 	bl	8009850 <prvInsertTimerInActiveList>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d06d      	beq.n	8009a7e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a4:	6a1b      	ldr	r3, [r3, #32]
 80099a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099b0:	f003 0304 	and.w	r3, r3, #4
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d062      	beq.n	8009a7e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80099b8:	68ba      	ldr	r2, [r7, #8]
 80099ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099bc:	699b      	ldr	r3, [r3, #24]
 80099be:	441a      	add	r2, r3
 80099c0:	2300      	movs	r3, #0
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	2300      	movs	r3, #0
 80099c6:	2100      	movs	r1, #0
 80099c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099ca:	f7ff fdff 	bl	80095cc <xTimerGenericCommand>
 80099ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80099d0:	6a3b      	ldr	r3, [r7, #32]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d153      	bne.n	8009a7e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80099d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099da:	b672      	cpsid	i
 80099dc:	f383 8811 	msr	BASEPRI, r3
 80099e0:	f3bf 8f6f 	isb	sy
 80099e4:	f3bf 8f4f 	dsb	sy
 80099e8:	b662      	cpsie	i
 80099ea:	61bb      	str	r3, [r7, #24]
}
 80099ec:	bf00      	nop
 80099ee:	e7fe      	b.n	80099ee <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099f6:	f023 0301 	bic.w	r3, r3, #1
 80099fa:	b2da      	uxtb	r2, r3
 80099fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009a02:	e03c      	b.n	8009a7e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a0a:	f043 0301 	orr.w	r3, r3, #1
 8009a0e:	b2da      	uxtb	r2, r3
 8009a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009a16:	68ba      	ldr	r2, [r7, #8]
 8009a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1e:	699b      	ldr	r3, [r3, #24]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10c      	bne.n	8009a3e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8009a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a28:	b672      	cpsid	i
 8009a2a:	f383 8811 	msr	BASEPRI, r3
 8009a2e:	f3bf 8f6f 	isb	sy
 8009a32:	f3bf 8f4f 	dsb	sy
 8009a36:	b662      	cpsie	i
 8009a38:	617b      	str	r3, [r7, #20]
}
 8009a3a:	bf00      	nop
 8009a3c:	e7fe      	b.n	8009a3c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a40:	699a      	ldr	r2, [r3, #24]
 8009a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a44:	18d1      	adds	r1, r2, r3
 8009a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a4c:	f7ff ff00 	bl	8009850 <prvInsertTimerInActiveList>
					break;
 8009a50:	e015      	b.n	8009a7e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a58:	f003 0302 	and.w	r3, r3, #2
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d103      	bne.n	8009a68 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009a60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a62:	f000 fbc9 	bl	800a1f8 <vPortFree>
 8009a66:	e00a      	b.n	8009a7e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a6e:	f023 0301 	bic.w	r3, r3, #1
 8009a72:	b2da      	uxtb	r2, r3
 8009a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009a7a:	e000      	b.n	8009a7e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009a7c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a7e:	4b08      	ldr	r3, [pc, #32]	; (8009aa0 <prvProcessReceivedCommands+0x1cc>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	1d39      	adds	r1, r7, #4
 8009a84:	2200      	movs	r2, #0
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7fe fbe0 	bl	800824c <xQueueReceive>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	f47f af24 	bne.w	80098dc <prvProcessReceivedCommands+0x8>
	}
}
 8009a94:	bf00      	nop
 8009a96:	bf00      	nop
 8009a98:	3730      	adds	r7, #48	; 0x30
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	200051a8 	.word	0x200051a8

08009aa4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b088      	sub	sp, #32
 8009aa8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009aaa:	e04a      	b.n	8009b42 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009aac:	4b2e      	ldr	r3, [pc, #184]	; (8009b68 <prvSwitchTimerLists+0xc4>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ab6:	4b2c      	ldr	r3, [pc, #176]	; (8009b68 <prvSwitchTimerLists+0xc4>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	3304      	adds	r3, #4
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7fe f8e1 	bl	8007c8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6a1b      	ldr	r3, [r3, #32]
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ad8:	f003 0304 	and.w	r3, r3, #4
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d030      	beq.n	8009b42 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	699b      	ldr	r3, [r3, #24]
 8009ae4:	693a      	ldr	r2, [r7, #16]
 8009ae6:	4413      	add	r3, r2
 8009ae8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d90e      	bls.n	8009b10 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	68ba      	ldr	r2, [r7, #8]
 8009af6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	68fa      	ldr	r2, [r7, #12]
 8009afc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009afe:	4b1a      	ldr	r3, [pc, #104]	; (8009b68 <prvSwitchTimerLists+0xc4>)
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	3304      	adds	r3, #4
 8009b06:	4619      	mov	r1, r3
 8009b08:	4610      	mov	r0, r2
 8009b0a:	f7fe f886 	bl	8007c1a <vListInsert>
 8009b0e:	e018      	b.n	8009b42 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b10:	2300      	movs	r3, #0
 8009b12:	9300      	str	r3, [sp, #0]
 8009b14:	2300      	movs	r3, #0
 8009b16:	693a      	ldr	r2, [r7, #16]
 8009b18:	2100      	movs	r1, #0
 8009b1a:	68f8      	ldr	r0, [r7, #12]
 8009b1c:	f7ff fd56 	bl	80095cc <xTimerGenericCommand>
 8009b20:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d10c      	bne.n	8009b42 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2c:	b672      	cpsid	i
 8009b2e:	f383 8811 	msr	BASEPRI, r3
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	b662      	cpsie	i
 8009b3c:	603b      	str	r3, [r7, #0]
}
 8009b3e:	bf00      	nop
 8009b40:	e7fe      	b.n	8009b40 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b42:	4b09      	ldr	r3, [pc, #36]	; (8009b68 <prvSwitchTimerLists+0xc4>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d1af      	bne.n	8009aac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009b4c:	4b06      	ldr	r3, [pc, #24]	; (8009b68 <prvSwitchTimerLists+0xc4>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009b52:	4b06      	ldr	r3, [pc, #24]	; (8009b6c <prvSwitchTimerLists+0xc8>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a04      	ldr	r2, [pc, #16]	; (8009b68 <prvSwitchTimerLists+0xc4>)
 8009b58:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009b5a:	4a04      	ldr	r2, [pc, #16]	; (8009b6c <prvSwitchTimerLists+0xc8>)
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	6013      	str	r3, [r2, #0]
}
 8009b60:	bf00      	nop
 8009b62:	3718      	adds	r7, #24
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	200051a0 	.word	0x200051a0
 8009b6c:	200051a4 	.word	0x200051a4

08009b70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b76:	f000 f949 	bl	8009e0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b7a:	4b15      	ldr	r3, [pc, #84]	; (8009bd0 <prvCheckForValidListAndQueue+0x60>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d120      	bne.n	8009bc4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009b82:	4814      	ldr	r0, [pc, #80]	; (8009bd4 <prvCheckForValidListAndQueue+0x64>)
 8009b84:	f7fd fff8 	bl	8007b78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009b88:	4813      	ldr	r0, [pc, #76]	; (8009bd8 <prvCheckForValidListAndQueue+0x68>)
 8009b8a:	f7fd fff5 	bl	8007b78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009b8e:	4b13      	ldr	r3, [pc, #76]	; (8009bdc <prvCheckForValidListAndQueue+0x6c>)
 8009b90:	4a10      	ldr	r2, [pc, #64]	; (8009bd4 <prvCheckForValidListAndQueue+0x64>)
 8009b92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b94:	4b12      	ldr	r3, [pc, #72]	; (8009be0 <prvCheckForValidListAndQueue+0x70>)
 8009b96:	4a10      	ldr	r2, [pc, #64]	; (8009bd8 <prvCheckForValidListAndQueue+0x68>)
 8009b98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	9300      	str	r3, [sp, #0]
 8009b9e:	4b11      	ldr	r3, [pc, #68]	; (8009be4 <prvCheckForValidListAndQueue+0x74>)
 8009ba0:	4a11      	ldr	r2, [pc, #68]	; (8009be8 <prvCheckForValidListAndQueue+0x78>)
 8009ba2:	2110      	movs	r1, #16
 8009ba4:	200a      	movs	r0, #10
 8009ba6:	f7fe f905 	bl	8007db4 <xQueueGenericCreateStatic>
 8009baa:	4603      	mov	r3, r0
 8009bac:	4a08      	ldr	r2, [pc, #32]	; (8009bd0 <prvCheckForValidListAndQueue+0x60>)
 8009bae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009bb0:	4b07      	ldr	r3, [pc, #28]	; (8009bd0 <prvCheckForValidListAndQueue+0x60>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d005      	beq.n	8009bc4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009bb8:	4b05      	ldr	r3, [pc, #20]	; (8009bd0 <prvCheckForValidListAndQueue+0x60>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	490b      	ldr	r1, [pc, #44]	; (8009bec <prvCheckForValidListAndQueue+0x7c>)
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7fe fd3a 	bl	8008638 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009bc4:	f000 f956 	bl	8009e74 <vPortExitCritical>
}
 8009bc8:	bf00      	nop
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	200051a8 	.word	0x200051a8
 8009bd4:	20005178 	.word	0x20005178
 8009bd8:	2000518c 	.word	0x2000518c
 8009bdc:	200051a0 	.word	0x200051a0
 8009be0:	200051a4 	.word	0x200051a4
 8009be4:	20005254 	.word	0x20005254
 8009be8:	200051b4 	.word	0x200051b4
 8009bec:	0800b66c 	.word	0x0800b66c

08009bf0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	3b04      	subs	r3, #4
 8009c00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	3b04      	subs	r3, #4
 8009c0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	f023 0201 	bic.w	r2, r3, #1
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	3b04      	subs	r3, #4
 8009c1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009c20:	4a0c      	ldr	r2, [pc, #48]	; (8009c54 <pxPortInitialiseStack+0x64>)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	3b14      	subs	r3, #20
 8009c2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	3b04      	subs	r3, #4
 8009c36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f06f 0202 	mvn.w	r2, #2
 8009c3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	3b20      	subs	r3, #32
 8009c44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009c46:	68fb      	ldr	r3, [r7, #12]
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3714      	adds	r7, #20
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr
 8009c54:	08009c59 	.word	0x08009c59

08009c58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009c62:	4b14      	ldr	r3, [pc, #80]	; (8009cb4 <prvTaskExitError+0x5c>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c6a:	d00c      	beq.n	8009c86 <prvTaskExitError+0x2e>
	__asm volatile
 8009c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c70:	b672      	cpsid	i
 8009c72:	f383 8811 	msr	BASEPRI, r3
 8009c76:	f3bf 8f6f 	isb	sy
 8009c7a:	f3bf 8f4f 	dsb	sy
 8009c7e:	b662      	cpsie	i
 8009c80:	60fb      	str	r3, [r7, #12]
}
 8009c82:	bf00      	nop
 8009c84:	e7fe      	b.n	8009c84 <prvTaskExitError+0x2c>
	__asm volatile
 8009c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8a:	b672      	cpsid	i
 8009c8c:	f383 8811 	msr	BASEPRI, r3
 8009c90:	f3bf 8f6f 	isb	sy
 8009c94:	f3bf 8f4f 	dsb	sy
 8009c98:	b662      	cpsie	i
 8009c9a:	60bb      	str	r3, [r7, #8]
}
 8009c9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c9e:	bf00      	nop
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d0fc      	beq.n	8009ca0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009ca6:	bf00      	nop
 8009ca8:	bf00      	nop
 8009caa:	3714      	adds	r7, #20
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr
 8009cb4:	2000000c 	.word	0x2000000c
	...

08009cc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009cc0:	4b07      	ldr	r3, [pc, #28]	; (8009ce0 <pxCurrentTCBConst2>)
 8009cc2:	6819      	ldr	r1, [r3, #0]
 8009cc4:	6808      	ldr	r0, [r1, #0]
 8009cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cca:	f380 8809 	msr	PSP, r0
 8009cce:	f3bf 8f6f 	isb	sy
 8009cd2:	f04f 0000 	mov.w	r0, #0
 8009cd6:	f380 8811 	msr	BASEPRI, r0
 8009cda:	4770      	bx	lr
 8009cdc:	f3af 8000 	nop.w

08009ce0 <pxCurrentTCBConst2>:
 8009ce0:	20004c78 	.word	0x20004c78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009ce4:	bf00      	nop
 8009ce6:	bf00      	nop

08009ce8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009ce8:	4808      	ldr	r0, [pc, #32]	; (8009d0c <prvPortStartFirstTask+0x24>)
 8009cea:	6800      	ldr	r0, [r0, #0]
 8009cec:	6800      	ldr	r0, [r0, #0]
 8009cee:	f380 8808 	msr	MSP, r0
 8009cf2:	f04f 0000 	mov.w	r0, #0
 8009cf6:	f380 8814 	msr	CONTROL, r0
 8009cfa:	b662      	cpsie	i
 8009cfc:	b661      	cpsie	f
 8009cfe:	f3bf 8f4f 	dsb	sy
 8009d02:	f3bf 8f6f 	isb	sy
 8009d06:	df00      	svc	0
 8009d08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d0a:	bf00      	nop
 8009d0c:	e000ed08 	.word	0xe000ed08

08009d10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009d16:	4b37      	ldr	r3, [pc, #220]	; (8009df4 <xPortStartScheduler+0xe4>)
 8009d18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	22ff      	movs	r2, #255	; 0xff
 8009d26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d30:	78fb      	ldrb	r3, [r7, #3]
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009d38:	b2da      	uxtb	r2, r3
 8009d3a:	4b2f      	ldr	r3, [pc, #188]	; (8009df8 <xPortStartScheduler+0xe8>)
 8009d3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d3e:	4b2f      	ldr	r3, [pc, #188]	; (8009dfc <xPortStartScheduler+0xec>)
 8009d40:	2207      	movs	r2, #7
 8009d42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d44:	e009      	b.n	8009d5a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009d46:	4b2d      	ldr	r3, [pc, #180]	; (8009dfc <xPortStartScheduler+0xec>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	3b01      	subs	r3, #1
 8009d4c:	4a2b      	ldr	r2, [pc, #172]	; (8009dfc <xPortStartScheduler+0xec>)
 8009d4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d50:	78fb      	ldrb	r3, [r7, #3]
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	005b      	lsls	r3, r3, #1
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d5a:	78fb      	ldrb	r3, [r7, #3]
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d62:	2b80      	cmp	r3, #128	; 0x80
 8009d64:	d0ef      	beq.n	8009d46 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d66:	4b25      	ldr	r3, [pc, #148]	; (8009dfc <xPortStartScheduler+0xec>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f1c3 0307 	rsb	r3, r3, #7
 8009d6e:	2b04      	cmp	r3, #4
 8009d70:	d00c      	beq.n	8009d8c <xPortStartScheduler+0x7c>
	__asm volatile
 8009d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d76:	b672      	cpsid	i
 8009d78:	f383 8811 	msr	BASEPRI, r3
 8009d7c:	f3bf 8f6f 	isb	sy
 8009d80:	f3bf 8f4f 	dsb	sy
 8009d84:	b662      	cpsie	i
 8009d86:	60bb      	str	r3, [r7, #8]
}
 8009d88:	bf00      	nop
 8009d8a:	e7fe      	b.n	8009d8a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d8c:	4b1b      	ldr	r3, [pc, #108]	; (8009dfc <xPortStartScheduler+0xec>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	021b      	lsls	r3, r3, #8
 8009d92:	4a1a      	ldr	r2, [pc, #104]	; (8009dfc <xPortStartScheduler+0xec>)
 8009d94:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009d96:	4b19      	ldr	r3, [pc, #100]	; (8009dfc <xPortStartScheduler+0xec>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009d9e:	4a17      	ldr	r2, [pc, #92]	; (8009dfc <xPortStartScheduler+0xec>)
 8009da0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	b2da      	uxtb	r2, r3
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009daa:	4b15      	ldr	r3, [pc, #84]	; (8009e00 <xPortStartScheduler+0xf0>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a14      	ldr	r2, [pc, #80]	; (8009e00 <xPortStartScheduler+0xf0>)
 8009db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009db4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009db6:	4b12      	ldr	r3, [pc, #72]	; (8009e00 <xPortStartScheduler+0xf0>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a11      	ldr	r2, [pc, #68]	; (8009e00 <xPortStartScheduler+0xf0>)
 8009dbc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009dc0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009dc2:	f000 f8dd 	bl	8009f80 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009dc6:	4b0f      	ldr	r3, [pc, #60]	; (8009e04 <xPortStartScheduler+0xf4>)
 8009dc8:	2200      	movs	r2, #0
 8009dca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009dcc:	f000 f8fc 	bl	8009fc8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009dd0:	4b0d      	ldr	r3, [pc, #52]	; (8009e08 <xPortStartScheduler+0xf8>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a0c      	ldr	r2, [pc, #48]	; (8009e08 <xPortStartScheduler+0xf8>)
 8009dd6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009dda:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ddc:	f7ff ff84 	bl	8009ce8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009de0:	f7ff f84c 	bl	8008e7c <vTaskSwitchContext>
	prvTaskExitError();
 8009de4:	f7ff ff38 	bl	8009c58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	e000e400 	.word	0xe000e400
 8009df8:	200052a4 	.word	0x200052a4
 8009dfc:	200052a8 	.word	0x200052a8
 8009e00:	e000ed20 	.word	0xe000ed20
 8009e04:	2000000c 	.word	0x2000000c
 8009e08:	e000ef34 	.word	0xe000ef34

08009e0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
	__asm volatile
 8009e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e16:	b672      	cpsid	i
 8009e18:	f383 8811 	msr	BASEPRI, r3
 8009e1c:	f3bf 8f6f 	isb	sy
 8009e20:	f3bf 8f4f 	dsb	sy
 8009e24:	b662      	cpsie	i
 8009e26:	607b      	str	r3, [r7, #4]
}
 8009e28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e2a:	4b10      	ldr	r3, [pc, #64]	; (8009e6c <vPortEnterCritical+0x60>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	4a0e      	ldr	r2, [pc, #56]	; (8009e6c <vPortEnterCritical+0x60>)
 8009e32:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e34:	4b0d      	ldr	r3, [pc, #52]	; (8009e6c <vPortEnterCritical+0x60>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d111      	bne.n	8009e60 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e3c:	4b0c      	ldr	r3, [pc, #48]	; (8009e70 <vPortEnterCritical+0x64>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00c      	beq.n	8009e60 <vPortEnterCritical+0x54>
	__asm volatile
 8009e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4a:	b672      	cpsid	i
 8009e4c:	f383 8811 	msr	BASEPRI, r3
 8009e50:	f3bf 8f6f 	isb	sy
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	b662      	cpsie	i
 8009e5a:	603b      	str	r3, [r7, #0]
}
 8009e5c:	bf00      	nop
 8009e5e:	e7fe      	b.n	8009e5e <vPortEnterCritical+0x52>
	}
}
 8009e60:	bf00      	nop
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr
 8009e6c:	2000000c 	.word	0x2000000c
 8009e70:	e000ed04 	.word	0xe000ed04

08009e74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e7a:	4b13      	ldr	r3, [pc, #76]	; (8009ec8 <vPortExitCritical+0x54>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d10c      	bne.n	8009e9c <vPortExitCritical+0x28>
	__asm volatile
 8009e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e86:	b672      	cpsid	i
 8009e88:	f383 8811 	msr	BASEPRI, r3
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	f3bf 8f4f 	dsb	sy
 8009e94:	b662      	cpsie	i
 8009e96:	607b      	str	r3, [r7, #4]
}
 8009e98:	bf00      	nop
 8009e9a:	e7fe      	b.n	8009e9a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009e9c:	4b0a      	ldr	r3, [pc, #40]	; (8009ec8 <vPortExitCritical+0x54>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	4a09      	ldr	r2, [pc, #36]	; (8009ec8 <vPortExitCritical+0x54>)
 8009ea4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ea6:	4b08      	ldr	r3, [pc, #32]	; (8009ec8 <vPortExitCritical+0x54>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d105      	bne.n	8009eba <vPortExitCritical+0x46>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	f383 8811 	msr	BASEPRI, r3
}
 8009eb8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009eba:	bf00      	nop
 8009ebc:	370c      	adds	r7, #12
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop
 8009ec8:	2000000c 	.word	0x2000000c
 8009ecc:	00000000 	.word	0x00000000

08009ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ed0:	f3ef 8009 	mrs	r0, PSP
 8009ed4:	f3bf 8f6f 	isb	sy
 8009ed8:	4b15      	ldr	r3, [pc, #84]	; (8009f30 <pxCurrentTCBConst>)
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	f01e 0f10 	tst.w	lr, #16
 8009ee0:	bf08      	it	eq
 8009ee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eea:	6010      	str	r0, [r2, #0]
 8009eec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009ef4:	b672      	cpsid	i
 8009ef6:	f380 8811 	msr	BASEPRI, r0
 8009efa:	f3bf 8f4f 	dsb	sy
 8009efe:	f3bf 8f6f 	isb	sy
 8009f02:	b662      	cpsie	i
 8009f04:	f7fe ffba 	bl	8008e7c <vTaskSwitchContext>
 8009f08:	f04f 0000 	mov.w	r0, #0
 8009f0c:	f380 8811 	msr	BASEPRI, r0
 8009f10:	bc09      	pop	{r0, r3}
 8009f12:	6819      	ldr	r1, [r3, #0]
 8009f14:	6808      	ldr	r0, [r1, #0]
 8009f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f1a:	f01e 0f10 	tst.w	lr, #16
 8009f1e:	bf08      	it	eq
 8009f20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009f24:	f380 8809 	msr	PSP, r0
 8009f28:	f3bf 8f6f 	isb	sy
 8009f2c:	4770      	bx	lr
 8009f2e:	bf00      	nop

08009f30 <pxCurrentTCBConst>:
 8009f30:	20004c78 	.word	0x20004c78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f34:	bf00      	nop
 8009f36:	bf00      	nop

08009f38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f42:	b672      	cpsid	i
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	b662      	cpsie	i
 8009f52:	607b      	str	r3, [r7, #4]
}
 8009f54:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f56:	f7fe fed5 	bl	8008d04 <xTaskIncrementTick>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d003      	beq.n	8009f68 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f60:	4b06      	ldr	r3, [pc, #24]	; (8009f7c <SysTick_Handler+0x44>)
 8009f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f66:	601a      	str	r2, [r3, #0]
 8009f68:	2300      	movs	r3, #0
 8009f6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	f383 8811 	msr	BASEPRI, r3
}
 8009f72:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f74:	bf00      	nop
 8009f76:	3708      	adds	r7, #8
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	e000ed04 	.word	0xe000ed04

08009f80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009f80:	b480      	push	{r7}
 8009f82:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f84:	4b0b      	ldr	r3, [pc, #44]	; (8009fb4 <vPortSetupTimerInterrupt+0x34>)
 8009f86:	2200      	movs	r2, #0
 8009f88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f8a:	4b0b      	ldr	r3, [pc, #44]	; (8009fb8 <vPortSetupTimerInterrupt+0x38>)
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f90:	4b0a      	ldr	r3, [pc, #40]	; (8009fbc <vPortSetupTimerInterrupt+0x3c>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a0a      	ldr	r2, [pc, #40]	; (8009fc0 <vPortSetupTimerInterrupt+0x40>)
 8009f96:	fba2 2303 	umull	r2, r3, r2, r3
 8009f9a:	099b      	lsrs	r3, r3, #6
 8009f9c:	4a09      	ldr	r2, [pc, #36]	; (8009fc4 <vPortSetupTimerInterrupt+0x44>)
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009fa2:	4b04      	ldr	r3, [pc, #16]	; (8009fb4 <vPortSetupTimerInterrupt+0x34>)
 8009fa4:	2207      	movs	r2, #7
 8009fa6:	601a      	str	r2, [r3, #0]
}
 8009fa8:	bf00      	nop
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	e000e010 	.word	0xe000e010
 8009fb8:	e000e018 	.word	0xe000e018
 8009fbc:	20000000 	.word	0x20000000
 8009fc0:	10624dd3 	.word	0x10624dd3
 8009fc4:	e000e014 	.word	0xe000e014

08009fc8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009fc8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009fd8 <vPortEnableVFP+0x10>
 8009fcc:	6801      	ldr	r1, [r0, #0]
 8009fce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009fd2:	6001      	str	r1, [r0, #0]
 8009fd4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009fd6:	bf00      	nop
 8009fd8:	e000ed88 	.word	0xe000ed88

08009fdc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009fe2:	f3ef 8305 	mrs	r3, IPSR
 8009fe6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2b0f      	cmp	r3, #15
 8009fec:	d916      	bls.n	800a01c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009fee:	4a19      	ldr	r2, [pc, #100]	; (800a054 <vPortValidateInterruptPriority+0x78>)
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009ff8:	4b17      	ldr	r3, [pc, #92]	; (800a058 <vPortValidateInterruptPriority+0x7c>)
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	7afa      	ldrb	r2, [r7, #11]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d20c      	bcs.n	800a01c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800a002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a006:	b672      	cpsid	i
 800a008:	f383 8811 	msr	BASEPRI, r3
 800a00c:	f3bf 8f6f 	isb	sy
 800a010:	f3bf 8f4f 	dsb	sy
 800a014:	b662      	cpsie	i
 800a016:	607b      	str	r3, [r7, #4]
}
 800a018:	bf00      	nop
 800a01a:	e7fe      	b.n	800a01a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a01c:	4b0f      	ldr	r3, [pc, #60]	; (800a05c <vPortValidateInterruptPriority+0x80>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a024:	4b0e      	ldr	r3, [pc, #56]	; (800a060 <vPortValidateInterruptPriority+0x84>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d90c      	bls.n	800a046 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800a02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a030:	b672      	cpsid	i
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	b662      	cpsie	i
 800a040:	603b      	str	r3, [r7, #0]
}
 800a042:	bf00      	nop
 800a044:	e7fe      	b.n	800a044 <vPortValidateInterruptPriority+0x68>
	}
 800a046:	bf00      	nop
 800a048:	3714      	adds	r7, #20
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	e000e3f0 	.word	0xe000e3f0
 800a058:	200052a4 	.word	0x200052a4
 800a05c:	e000ed0c 	.word	0xe000ed0c
 800a060:	200052a8 	.word	0x200052a8

0800a064 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b08a      	sub	sp, #40	; 0x28
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a06c:	2300      	movs	r3, #0
 800a06e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a070:	f7fe fd8a 	bl	8008b88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a074:	4b5b      	ldr	r3, [pc, #364]	; (800a1e4 <pvPortMalloc+0x180>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d101      	bne.n	800a080 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a07c:	f000 f91a 	bl	800a2b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a080:	4b59      	ldr	r3, [pc, #356]	; (800a1e8 <pvPortMalloc+0x184>)
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4013      	ands	r3, r2
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f040 8092 	bne.w	800a1b2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d01f      	beq.n	800a0d4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800a094:	2208      	movs	r2, #8
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	4413      	add	r3, r2
 800a09a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f003 0307 	and.w	r3, r3, #7
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d016      	beq.n	800a0d4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f023 0307 	bic.w	r3, r3, #7
 800a0ac:	3308      	adds	r3, #8
 800a0ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f003 0307 	and.w	r3, r3, #7
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d00c      	beq.n	800a0d4 <pvPortMalloc+0x70>
	__asm volatile
 800a0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0be:	b672      	cpsid	i
 800a0c0:	f383 8811 	msr	BASEPRI, r3
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	b662      	cpsie	i
 800a0ce:	617b      	str	r3, [r7, #20]
}
 800a0d0:	bf00      	nop
 800a0d2:	e7fe      	b.n	800a0d2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d06b      	beq.n	800a1b2 <pvPortMalloc+0x14e>
 800a0da:	4b44      	ldr	r3, [pc, #272]	; (800a1ec <pvPortMalloc+0x188>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d866      	bhi.n	800a1b2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a0e4:	4b42      	ldr	r3, [pc, #264]	; (800a1f0 <pvPortMalloc+0x18c>)
 800a0e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a0e8:	4b41      	ldr	r3, [pc, #260]	; (800a1f0 <pvPortMalloc+0x18c>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0ee:	e004      	b.n	800a0fa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	429a      	cmp	r2, r3
 800a102:	d903      	bls.n	800a10c <pvPortMalloc+0xa8>
 800a104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d1f1      	bne.n	800a0f0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a10c:	4b35      	ldr	r3, [pc, #212]	; (800a1e4 <pvPortMalloc+0x180>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a112:	429a      	cmp	r2, r3
 800a114:	d04d      	beq.n	800a1b2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a116:	6a3b      	ldr	r3, [r7, #32]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2208      	movs	r2, #8
 800a11c:	4413      	add	r3, r2
 800a11e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	6a3b      	ldr	r3, [r7, #32]
 800a126:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12a:	685a      	ldr	r2, [r3, #4]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	1ad2      	subs	r2, r2, r3
 800a130:	2308      	movs	r3, #8
 800a132:	005b      	lsls	r3, r3, #1
 800a134:	429a      	cmp	r2, r3
 800a136:	d921      	bls.n	800a17c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4413      	add	r3, r2
 800a13e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	f003 0307 	and.w	r3, r3, #7
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00c      	beq.n	800a164 <pvPortMalloc+0x100>
	__asm volatile
 800a14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14e:	b672      	cpsid	i
 800a150:	f383 8811 	msr	BASEPRI, r3
 800a154:	f3bf 8f6f 	isb	sy
 800a158:	f3bf 8f4f 	dsb	sy
 800a15c:	b662      	cpsie	i
 800a15e:	613b      	str	r3, [r7, #16]
}
 800a160:	bf00      	nop
 800a162:	e7fe      	b.n	800a162 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a166:	685a      	ldr	r2, [r3, #4]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	1ad2      	subs	r2, r2, r3
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a176:	69b8      	ldr	r0, [r7, #24]
 800a178:	f000 f8fe 	bl	800a378 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a17c:	4b1b      	ldr	r3, [pc, #108]	; (800a1ec <pvPortMalloc+0x188>)
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	1ad3      	subs	r3, r2, r3
 800a186:	4a19      	ldr	r2, [pc, #100]	; (800a1ec <pvPortMalloc+0x188>)
 800a188:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a18a:	4b18      	ldr	r3, [pc, #96]	; (800a1ec <pvPortMalloc+0x188>)
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	4b19      	ldr	r3, [pc, #100]	; (800a1f4 <pvPortMalloc+0x190>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	429a      	cmp	r2, r3
 800a194:	d203      	bcs.n	800a19e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a196:	4b15      	ldr	r3, [pc, #84]	; (800a1ec <pvPortMalloc+0x188>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a16      	ldr	r2, [pc, #88]	; (800a1f4 <pvPortMalloc+0x190>)
 800a19c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a0:	685a      	ldr	r2, [r3, #4]
 800a1a2:	4b11      	ldr	r3, [pc, #68]	; (800a1e8 <pvPortMalloc+0x184>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	431a      	orrs	r2, r3
 800a1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a1b2:	f7fe fcf7 	bl	8008ba4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	f003 0307 	and.w	r3, r3, #7
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d00c      	beq.n	800a1da <pvPortMalloc+0x176>
	__asm volatile
 800a1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c4:	b672      	cpsid	i
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	b662      	cpsie	i
 800a1d4:	60fb      	str	r3, [r7, #12]
}
 800a1d6:	bf00      	nop
 800a1d8:	e7fe      	b.n	800a1d8 <pvPortMalloc+0x174>
	return pvReturn;
 800a1da:	69fb      	ldr	r3, [r7, #28]
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3728      	adds	r7, #40	; 0x28
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	20008eb4 	.word	0x20008eb4
 800a1e8:	20008ec0 	.word	0x20008ec0
 800a1ec:	20008eb8 	.word	0x20008eb8
 800a1f0:	20008eac 	.word	0x20008eac
 800a1f4:	20008ebc 	.word	0x20008ebc

0800a1f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b086      	sub	sp, #24
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d04c      	beq.n	800a2a4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a20a:	2308      	movs	r3, #8
 800a20c:	425b      	negs	r3, r3
 800a20e:	697a      	ldr	r2, [r7, #20]
 800a210:	4413      	add	r3, r2
 800a212:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	685a      	ldr	r2, [r3, #4]
 800a21c:	4b23      	ldr	r3, [pc, #140]	; (800a2ac <vPortFree+0xb4>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4013      	ands	r3, r2
 800a222:	2b00      	cmp	r3, #0
 800a224:	d10c      	bne.n	800a240 <vPortFree+0x48>
	__asm volatile
 800a226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22a:	b672      	cpsid	i
 800a22c:	f383 8811 	msr	BASEPRI, r3
 800a230:	f3bf 8f6f 	isb	sy
 800a234:	f3bf 8f4f 	dsb	sy
 800a238:	b662      	cpsie	i
 800a23a:	60fb      	str	r3, [r7, #12]
}
 800a23c:	bf00      	nop
 800a23e:	e7fe      	b.n	800a23e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d00c      	beq.n	800a262 <vPortFree+0x6a>
	__asm volatile
 800a248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24c:	b672      	cpsid	i
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	b662      	cpsie	i
 800a25c:	60bb      	str	r3, [r7, #8]
}
 800a25e:	bf00      	nop
 800a260:	e7fe      	b.n	800a260 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	685a      	ldr	r2, [r3, #4]
 800a266:	4b11      	ldr	r3, [pc, #68]	; (800a2ac <vPortFree+0xb4>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4013      	ands	r3, r2
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d019      	beq.n	800a2a4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d115      	bne.n	800a2a4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	685a      	ldr	r2, [r3, #4]
 800a27c:	4b0b      	ldr	r3, [pc, #44]	; (800a2ac <vPortFree+0xb4>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	43db      	mvns	r3, r3
 800a282:	401a      	ands	r2, r3
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a288:	f7fe fc7e 	bl	8008b88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	685a      	ldr	r2, [r3, #4]
 800a290:	4b07      	ldr	r3, [pc, #28]	; (800a2b0 <vPortFree+0xb8>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4413      	add	r3, r2
 800a296:	4a06      	ldr	r2, [pc, #24]	; (800a2b0 <vPortFree+0xb8>)
 800a298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a29a:	6938      	ldr	r0, [r7, #16]
 800a29c:	f000 f86c 	bl	800a378 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a2a0:	f7fe fc80 	bl	8008ba4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a2a4:	bf00      	nop
 800a2a6:	3718      	adds	r7, #24
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	20008ec0 	.word	0x20008ec0
 800a2b0:	20008eb8 	.word	0x20008eb8

0800a2b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a2ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a2be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a2c0:	4b27      	ldr	r3, [pc, #156]	; (800a360 <prvHeapInit+0xac>)
 800a2c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f003 0307 	and.w	r3, r3, #7
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00c      	beq.n	800a2e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	3307      	adds	r3, #7
 800a2d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f023 0307 	bic.w	r3, r3, #7
 800a2da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a2dc:	68ba      	ldr	r2, [r7, #8]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	1ad3      	subs	r3, r2, r3
 800a2e2:	4a1f      	ldr	r2, [pc, #124]	; (800a360 <prvHeapInit+0xac>)
 800a2e4:	4413      	add	r3, r2
 800a2e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a2ec:	4a1d      	ldr	r2, [pc, #116]	; (800a364 <prvHeapInit+0xb0>)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a2f2:	4b1c      	ldr	r3, [pc, #112]	; (800a364 <prvHeapInit+0xb0>)
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	68ba      	ldr	r2, [r7, #8]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a300:	2208      	movs	r2, #8
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	1a9b      	subs	r3, r3, r2
 800a306:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f023 0307 	bic.w	r3, r3, #7
 800a30e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	4a15      	ldr	r2, [pc, #84]	; (800a368 <prvHeapInit+0xb4>)
 800a314:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a316:	4b14      	ldr	r3, [pc, #80]	; (800a368 <prvHeapInit+0xb4>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2200      	movs	r2, #0
 800a31c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a31e:	4b12      	ldr	r3, [pc, #72]	; (800a368 <prvHeapInit+0xb4>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2200      	movs	r2, #0
 800a324:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	1ad2      	subs	r2, r2, r3
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a334:	4b0c      	ldr	r3, [pc, #48]	; (800a368 <prvHeapInit+0xb4>)
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	4a0a      	ldr	r2, [pc, #40]	; (800a36c <prvHeapInit+0xb8>)
 800a342:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	4a09      	ldr	r2, [pc, #36]	; (800a370 <prvHeapInit+0xbc>)
 800a34a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a34c:	4b09      	ldr	r3, [pc, #36]	; (800a374 <prvHeapInit+0xc0>)
 800a34e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a352:	601a      	str	r2, [r3, #0]
}
 800a354:	bf00      	nop
 800a356:	3714      	adds	r7, #20
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr
 800a360:	200052ac 	.word	0x200052ac
 800a364:	20008eac 	.word	0x20008eac
 800a368:	20008eb4 	.word	0x20008eb4
 800a36c:	20008ebc 	.word	0x20008ebc
 800a370:	20008eb8 	.word	0x20008eb8
 800a374:	20008ec0 	.word	0x20008ec0

0800a378 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a380:	4b28      	ldr	r3, [pc, #160]	; (800a424 <prvInsertBlockIntoFreeList+0xac>)
 800a382:	60fb      	str	r3, [r7, #12]
 800a384:	e002      	b.n	800a38c <prvInsertBlockIntoFreeList+0x14>
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	60fb      	str	r3, [r7, #12]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	429a      	cmp	r2, r3
 800a394:	d8f7      	bhi.n	800a386 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	68ba      	ldr	r2, [r7, #8]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d108      	bne.n	800a3ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	685a      	ldr	r2, [r3, #4]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	441a      	add	r2, r3
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	68ba      	ldr	r2, [r7, #8]
 800a3c4:	441a      	add	r2, r3
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d118      	bne.n	800a400 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	4b15      	ldr	r3, [pc, #84]	; (800a428 <prvInsertBlockIntoFreeList+0xb0>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d00d      	beq.n	800a3f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	685a      	ldr	r2, [r3, #4]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	441a      	add	r2, r3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	601a      	str	r2, [r3, #0]
 800a3f4:	e008      	b.n	800a408 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a3f6:	4b0c      	ldr	r3, [pc, #48]	; (800a428 <prvInsertBlockIntoFreeList+0xb0>)
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	601a      	str	r2, [r3, #0]
 800a3fe:	e003      	b.n	800a408 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a408:	68fa      	ldr	r2, [r7, #12]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d002      	beq.n	800a416 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a416:	bf00      	nop
 800a418:	3714      	adds	r7, #20
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	20008eac 	.word	0x20008eac
 800a428:	20008eb4 	.word	0x20008eb4

0800a42c <__errno>:
 800a42c:	4b01      	ldr	r3, [pc, #4]	; (800a434 <__errno+0x8>)
 800a42e:	6818      	ldr	r0, [r3, #0]
 800a430:	4770      	bx	lr
 800a432:	bf00      	nop
 800a434:	20000010 	.word	0x20000010

0800a438 <__libc_init_array>:
 800a438:	b570      	push	{r4, r5, r6, lr}
 800a43a:	4d0d      	ldr	r5, [pc, #52]	; (800a470 <__libc_init_array+0x38>)
 800a43c:	4c0d      	ldr	r4, [pc, #52]	; (800a474 <__libc_init_array+0x3c>)
 800a43e:	1b64      	subs	r4, r4, r5
 800a440:	10a4      	asrs	r4, r4, #2
 800a442:	2600      	movs	r6, #0
 800a444:	42a6      	cmp	r6, r4
 800a446:	d109      	bne.n	800a45c <__libc_init_array+0x24>
 800a448:	4d0b      	ldr	r5, [pc, #44]	; (800a478 <__libc_init_array+0x40>)
 800a44a:	4c0c      	ldr	r4, [pc, #48]	; (800a47c <__libc_init_array+0x44>)
 800a44c:	f001 f832 	bl	800b4b4 <_init>
 800a450:	1b64      	subs	r4, r4, r5
 800a452:	10a4      	asrs	r4, r4, #2
 800a454:	2600      	movs	r6, #0
 800a456:	42a6      	cmp	r6, r4
 800a458:	d105      	bne.n	800a466 <__libc_init_array+0x2e>
 800a45a:	bd70      	pop	{r4, r5, r6, pc}
 800a45c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a460:	4798      	blx	r3
 800a462:	3601      	adds	r6, #1
 800a464:	e7ee      	b.n	800a444 <__libc_init_array+0xc>
 800a466:	f855 3b04 	ldr.w	r3, [r5], #4
 800a46a:	4798      	blx	r3
 800a46c:	3601      	adds	r6, #1
 800a46e:	e7f2      	b.n	800a456 <__libc_init_array+0x1e>
 800a470:	0800b7a0 	.word	0x0800b7a0
 800a474:	0800b7a0 	.word	0x0800b7a0
 800a478:	0800b7a0 	.word	0x0800b7a0
 800a47c:	0800b7a4 	.word	0x0800b7a4

0800a480 <memcpy>:
 800a480:	440a      	add	r2, r1
 800a482:	4291      	cmp	r1, r2
 800a484:	f100 33ff 	add.w	r3, r0, #4294967295
 800a488:	d100      	bne.n	800a48c <memcpy+0xc>
 800a48a:	4770      	bx	lr
 800a48c:	b510      	push	{r4, lr}
 800a48e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a492:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a496:	4291      	cmp	r1, r2
 800a498:	d1f9      	bne.n	800a48e <memcpy+0xe>
 800a49a:	bd10      	pop	{r4, pc}

0800a49c <memset>:
 800a49c:	4402      	add	r2, r0
 800a49e:	4603      	mov	r3, r0
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d100      	bne.n	800a4a6 <memset+0xa>
 800a4a4:	4770      	bx	lr
 800a4a6:	f803 1b01 	strb.w	r1, [r3], #1
 800a4aa:	e7f9      	b.n	800a4a0 <memset+0x4>

0800a4ac <iprintf>:
 800a4ac:	b40f      	push	{r0, r1, r2, r3}
 800a4ae:	4b0a      	ldr	r3, [pc, #40]	; (800a4d8 <iprintf+0x2c>)
 800a4b0:	b513      	push	{r0, r1, r4, lr}
 800a4b2:	681c      	ldr	r4, [r3, #0]
 800a4b4:	b124      	cbz	r4, 800a4c0 <iprintf+0x14>
 800a4b6:	69a3      	ldr	r3, [r4, #24]
 800a4b8:	b913      	cbnz	r3, 800a4c0 <iprintf+0x14>
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	f000 fa5e 	bl	800a97c <__sinit>
 800a4c0:	ab05      	add	r3, sp, #20
 800a4c2:	9a04      	ldr	r2, [sp, #16]
 800a4c4:	68a1      	ldr	r1, [r4, #8]
 800a4c6:	9301      	str	r3, [sp, #4]
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	f000 fc67 	bl	800ad9c <_vfiprintf_r>
 800a4ce:	b002      	add	sp, #8
 800a4d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4d4:	b004      	add	sp, #16
 800a4d6:	4770      	bx	lr
 800a4d8:	20000010 	.word	0x20000010

0800a4dc <_puts_r>:
 800a4dc:	b570      	push	{r4, r5, r6, lr}
 800a4de:	460e      	mov	r6, r1
 800a4e0:	4605      	mov	r5, r0
 800a4e2:	b118      	cbz	r0, 800a4ec <_puts_r+0x10>
 800a4e4:	6983      	ldr	r3, [r0, #24]
 800a4e6:	b90b      	cbnz	r3, 800a4ec <_puts_r+0x10>
 800a4e8:	f000 fa48 	bl	800a97c <__sinit>
 800a4ec:	69ab      	ldr	r3, [r5, #24]
 800a4ee:	68ac      	ldr	r4, [r5, #8]
 800a4f0:	b913      	cbnz	r3, 800a4f8 <_puts_r+0x1c>
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	f000 fa42 	bl	800a97c <__sinit>
 800a4f8:	4b2c      	ldr	r3, [pc, #176]	; (800a5ac <_puts_r+0xd0>)
 800a4fa:	429c      	cmp	r4, r3
 800a4fc:	d120      	bne.n	800a540 <_puts_r+0x64>
 800a4fe:	686c      	ldr	r4, [r5, #4]
 800a500:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a502:	07db      	lsls	r3, r3, #31
 800a504:	d405      	bmi.n	800a512 <_puts_r+0x36>
 800a506:	89a3      	ldrh	r3, [r4, #12]
 800a508:	0598      	lsls	r0, r3, #22
 800a50a:	d402      	bmi.n	800a512 <_puts_r+0x36>
 800a50c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a50e:	f000 fad3 	bl	800aab8 <__retarget_lock_acquire_recursive>
 800a512:	89a3      	ldrh	r3, [r4, #12]
 800a514:	0719      	lsls	r1, r3, #28
 800a516:	d51d      	bpl.n	800a554 <_puts_r+0x78>
 800a518:	6923      	ldr	r3, [r4, #16]
 800a51a:	b1db      	cbz	r3, 800a554 <_puts_r+0x78>
 800a51c:	3e01      	subs	r6, #1
 800a51e:	68a3      	ldr	r3, [r4, #8]
 800a520:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a524:	3b01      	subs	r3, #1
 800a526:	60a3      	str	r3, [r4, #8]
 800a528:	bb39      	cbnz	r1, 800a57a <_puts_r+0x9e>
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	da38      	bge.n	800a5a0 <_puts_r+0xc4>
 800a52e:	4622      	mov	r2, r4
 800a530:	210a      	movs	r1, #10
 800a532:	4628      	mov	r0, r5
 800a534:	f000 f848 	bl	800a5c8 <__swbuf_r>
 800a538:	3001      	adds	r0, #1
 800a53a:	d011      	beq.n	800a560 <_puts_r+0x84>
 800a53c:	250a      	movs	r5, #10
 800a53e:	e011      	b.n	800a564 <_puts_r+0x88>
 800a540:	4b1b      	ldr	r3, [pc, #108]	; (800a5b0 <_puts_r+0xd4>)
 800a542:	429c      	cmp	r4, r3
 800a544:	d101      	bne.n	800a54a <_puts_r+0x6e>
 800a546:	68ac      	ldr	r4, [r5, #8]
 800a548:	e7da      	b.n	800a500 <_puts_r+0x24>
 800a54a:	4b1a      	ldr	r3, [pc, #104]	; (800a5b4 <_puts_r+0xd8>)
 800a54c:	429c      	cmp	r4, r3
 800a54e:	bf08      	it	eq
 800a550:	68ec      	ldreq	r4, [r5, #12]
 800a552:	e7d5      	b.n	800a500 <_puts_r+0x24>
 800a554:	4621      	mov	r1, r4
 800a556:	4628      	mov	r0, r5
 800a558:	f000 f888 	bl	800a66c <__swsetup_r>
 800a55c:	2800      	cmp	r0, #0
 800a55e:	d0dd      	beq.n	800a51c <_puts_r+0x40>
 800a560:	f04f 35ff 	mov.w	r5, #4294967295
 800a564:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a566:	07da      	lsls	r2, r3, #31
 800a568:	d405      	bmi.n	800a576 <_puts_r+0x9a>
 800a56a:	89a3      	ldrh	r3, [r4, #12]
 800a56c:	059b      	lsls	r3, r3, #22
 800a56e:	d402      	bmi.n	800a576 <_puts_r+0x9a>
 800a570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a572:	f000 faa2 	bl	800aaba <__retarget_lock_release_recursive>
 800a576:	4628      	mov	r0, r5
 800a578:	bd70      	pop	{r4, r5, r6, pc}
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	da04      	bge.n	800a588 <_puts_r+0xac>
 800a57e:	69a2      	ldr	r2, [r4, #24]
 800a580:	429a      	cmp	r2, r3
 800a582:	dc06      	bgt.n	800a592 <_puts_r+0xb6>
 800a584:	290a      	cmp	r1, #10
 800a586:	d004      	beq.n	800a592 <_puts_r+0xb6>
 800a588:	6823      	ldr	r3, [r4, #0]
 800a58a:	1c5a      	adds	r2, r3, #1
 800a58c:	6022      	str	r2, [r4, #0]
 800a58e:	7019      	strb	r1, [r3, #0]
 800a590:	e7c5      	b.n	800a51e <_puts_r+0x42>
 800a592:	4622      	mov	r2, r4
 800a594:	4628      	mov	r0, r5
 800a596:	f000 f817 	bl	800a5c8 <__swbuf_r>
 800a59a:	3001      	adds	r0, #1
 800a59c:	d1bf      	bne.n	800a51e <_puts_r+0x42>
 800a59e:	e7df      	b.n	800a560 <_puts_r+0x84>
 800a5a0:	6823      	ldr	r3, [r4, #0]
 800a5a2:	250a      	movs	r5, #10
 800a5a4:	1c5a      	adds	r2, r3, #1
 800a5a6:	6022      	str	r2, [r4, #0]
 800a5a8:	701d      	strb	r5, [r3, #0]
 800a5aa:	e7db      	b.n	800a564 <_puts_r+0x88>
 800a5ac:	0800b724 	.word	0x0800b724
 800a5b0:	0800b744 	.word	0x0800b744
 800a5b4:	0800b704 	.word	0x0800b704

0800a5b8 <puts>:
 800a5b8:	4b02      	ldr	r3, [pc, #8]	; (800a5c4 <puts+0xc>)
 800a5ba:	4601      	mov	r1, r0
 800a5bc:	6818      	ldr	r0, [r3, #0]
 800a5be:	f7ff bf8d 	b.w	800a4dc <_puts_r>
 800a5c2:	bf00      	nop
 800a5c4:	20000010 	.word	0x20000010

0800a5c8 <__swbuf_r>:
 800a5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ca:	460e      	mov	r6, r1
 800a5cc:	4614      	mov	r4, r2
 800a5ce:	4605      	mov	r5, r0
 800a5d0:	b118      	cbz	r0, 800a5da <__swbuf_r+0x12>
 800a5d2:	6983      	ldr	r3, [r0, #24]
 800a5d4:	b90b      	cbnz	r3, 800a5da <__swbuf_r+0x12>
 800a5d6:	f000 f9d1 	bl	800a97c <__sinit>
 800a5da:	4b21      	ldr	r3, [pc, #132]	; (800a660 <__swbuf_r+0x98>)
 800a5dc:	429c      	cmp	r4, r3
 800a5de:	d12b      	bne.n	800a638 <__swbuf_r+0x70>
 800a5e0:	686c      	ldr	r4, [r5, #4]
 800a5e2:	69a3      	ldr	r3, [r4, #24]
 800a5e4:	60a3      	str	r3, [r4, #8]
 800a5e6:	89a3      	ldrh	r3, [r4, #12]
 800a5e8:	071a      	lsls	r2, r3, #28
 800a5ea:	d52f      	bpl.n	800a64c <__swbuf_r+0x84>
 800a5ec:	6923      	ldr	r3, [r4, #16]
 800a5ee:	b36b      	cbz	r3, 800a64c <__swbuf_r+0x84>
 800a5f0:	6923      	ldr	r3, [r4, #16]
 800a5f2:	6820      	ldr	r0, [r4, #0]
 800a5f4:	1ac0      	subs	r0, r0, r3
 800a5f6:	6963      	ldr	r3, [r4, #20]
 800a5f8:	b2f6      	uxtb	r6, r6
 800a5fa:	4283      	cmp	r3, r0
 800a5fc:	4637      	mov	r7, r6
 800a5fe:	dc04      	bgt.n	800a60a <__swbuf_r+0x42>
 800a600:	4621      	mov	r1, r4
 800a602:	4628      	mov	r0, r5
 800a604:	f000 f926 	bl	800a854 <_fflush_r>
 800a608:	bb30      	cbnz	r0, 800a658 <__swbuf_r+0x90>
 800a60a:	68a3      	ldr	r3, [r4, #8]
 800a60c:	3b01      	subs	r3, #1
 800a60e:	60a3      	str	r3, [r4, #8]
 800a610:	6823      	ldr	r3, [r4, #0]
 800a612:	1c5a      	adds	r2, r3, #1
 800a614:	6022      	str	r2, [r4, #0]
 800a616:	701e      	strb	r6, [r3, #0]
 800a618:	6963      	ldr	r3, [r4, #20]
 800a61a:	3001      	adds	r0, #1
 800a61c:	4283      	cmp	r3, r0
 800a61e:	d004      	beq.n	800a62a <__swbuf_r+0x62>
 800a620:	89a3      	ldrh	r3, [r4, #12]
 800a622:	07db      	lsls	r3, r3, #31
 800a624:	d506      	bpl.n	800a634 <__swbuf_r+0x6c>
 800a626:	2e0a      	cmp	r6, #10
 800a628:	d104      	bne.n	800a634 <__swbuf_r+0x6c>
 800a62a:	4621      	mov	r1, r4
 800a62c:	4628      	mov	r0, r5
 800a62e:	f000 f911 	bl	800a854 <_fflush_r>
 800a632:	b988      	cbnz	r0, 800a658 <__swbuf_r+0x90>
 800a634:	4638      	mov	r0, r7
 800a636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a638:	4b0a      	ldr	r3, [pc, #40]	; (800a664 <__swbuf_r+0x9c>)
 800a63a:	429c      	cmp	r4, r3
 800a63c:	d101      	bne.n	800a642 <__swbuf_r+0x7a>
 800a63e:	68ac      	ldr	r4, [r5, #8]
 800a640:	e7cf      	b.n	800a5e2 <__swbuf_r+0x1a>
 800a642:	4b09      	ldr	r3, [pc, #36]	; (800a668 <__swbuf_r+0xa0>)
 800a644:	429c      	cmp	r4, r3
 800a646:	bf08      	it	eq
 800a648:	68ec      	ldreq	r4, [r5, #12]
 800a64a:	e7ca      	b.n	800a5e2 <__swbuf_r+0x1a>
 800a64c:	4621      	mov	r1, r4
 800a64e:	4628      	mov	r0, r5
 800a650:	f000 f80c 	bl	800a66c <__swsetup_r>
 800a654:	2800      	cmp	r0, #0
 800a656:	d0cb      	beq.n	800a5f0 <__swbuf_r+0x28>
 800a658:	f04f 37ff 	mov.w	r7, #4294967295
 800a65c:	e7ea      	b.n	800a634 <__swbuf_r+0x6c>
 800a65e:	bf00      	nop
 800a660:	0800b724 	.word	0x0800b724
 800a664:	0800b744 	.word	0x0800b744
 800a668:	0800b704 	.word	0x0800b704

0800a66c <__swsetup_r>:
 800a66c:	4b32      	ldr	r3, [pc, #200]	; (800a738 <__swsetup_r+0xcc>)
 800a66e:	b570      	push	{r4, r5, r6, lr}
 800a670:	681d      	ldr	r5, [r3, #0]
 800a672:	4606      	mov	r6, r0
 800a674:	460c      	mov	r4, r1
 800a676:	b125      	cbz	r5, 800a682 <__swsetup_r+0x16>
 800a678:	69ab      	ldr	r3, [r5, #24]
 800a67a:	b913      	cbnz	r3, 800a682 <__swsetup_r+0x16>
 800a67c:	4628      	mov	r0, r5
 800a67e:	f000 f97d 	bl	800a97c <__sinit>
 800a682:	4b2e      	ldr	r3, [pc, #184]	; (800a73c <__swsetup_r+0xd0>)
 800a684:	429c      	cmp	r4, r3
 800a686:	d10f      	bne.n	800a6a8 <__swsetup_r+0x3c>
 800a688:	686c      	ldr	r4, [r5, #4]
 800a68a:	89a3      	ldrh	r3, [r4, #12]
 800a68c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a690:	0719      	lsls	r1, r3, #28
 800a692:	d42c      	bmi.n	800a6ee <__swsetup_r+0x82>
 800a694:	06dd      	lsls	r5, r3, #27
 800a696:	d411      	bmi.n	800a6bc <__swsetup_r+0x50>
 800a698:	2309      	movs	r3, #9
 800a69a:	6033      	str	r3, [r6, #0]
 800a69c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6a0:	81a3      	strh	r3, [r4, #12]
 800a6a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6a6:	e03e      	b.n	800a726 <__swsetup_r+0xba>
 800a6a8:	4b25      	ldr	r3, [pc, #148]	; (800a740 <__swsetup_r+0xd4>)
 800a6aa:	429c      	cmp	r4, r3
 800a6ac:	d101      	bne.n	800a6b2 <__swsetup_r+0x46>
 800a6ae:	68ac      	ldr	r4, [r5, #8]
 800a6b0:	e7eb      	b.n	800a68a <__swsetup_r+0x1e>
 800a6b2:	4b24      	ldr	r3, [pc, #144]	; (800a744 <__swsetup_r+0xd8>)
 800a6b4:	429c      	cmp	r4, r3
 800a6b6:	bf08      	it	eq
 800a6b8:	68ec      	ldreq	r4, [r5, #12]
 800a6ba:	e7e6      	b.n	800a68a <__swsetup_r+0x1e>
 800a6bc:	0758      	lsls	r0, r3, #29
 800a6be:	d512      	bpl.n	800a6e6 <__swsetup_r+0x7a>
 800a6c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6c2:	b141      	cbz	r1, 800a6d6 <__swsetup_r+0x6a>
 800a6c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6c8:	4299      	cmp	r1, r3
 800a6ca:	d002      	beq.n	800a6d2 <__swsetup_r+0x66>
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	f000 fa5b 	bl	800ab88 <_free_r>
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	6363      	str	r3, [r4, #52]	; 0x34
 800a6d6:	89a3      	ldrh	r3, [r4, #12]
 800a6d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6dc:	81a3      	strh	r3, [r4, #12]
 800a6de:	2300      	movs	r3, #0
 800a6e0:	6063      	str	r3, [r4, #4]
 800a6e2:	6923      	ldr	r3, [r4, #16]
 800a6e4:	6023      	str	r3, [r4, #0]
 800a6e6:	89a3      	ldrh	r3, [r4, #12]
 800a6e8:	f043 0308 	orr.w	r3, r3, #8
 800a6ec:	81a3      	strh	r3, [r4, #12]
 800a6ee:	6923      	ldr	r3, [r4, #16]
 800a6f0:	b94b      	cbnz	r3, 800a706 <__swsetup_r+0x9a>
 800a6f2:	89a3      	ldrh	r3, [r4, #12]
 800a6f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6fc:	d003      	beq.n	800a706 <__swsetup_r+0x9a>
 800a6fe:	4621      	mov	r1, r4
 800a700:	4630      	mov	r0, r6
 800a702:	f000 fa01 	bl	800ab08 <__smakebuf_r>
 800a706:	89a0      	ldrh	r0, [r4, #12]
 800a708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a70c:	f010 0301 	ands.w	r3, r0, #1
 800a710:	d00a      	beq.n	800a728 <__swsetup_r+0xbc>
 800a712:	2300      	movs	r3, #0
 800a714:	60a3      	str	r3, [r4, #8]
 800a716:	6963      	ldr	r3, [r4, #20]
 800a718:	425b      	negs	r3, r3
 800a71a:	61a3      	str	r3, [r4, #24]
 800a71c:	6923      	ldr	r3, [r4, #16]
 800a71e:	b943      	cbnz	r3, 800a732 <__swsetup_r+0xc6>
 800a720:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a724:	d1ba      	bne.n	800a69c <__swsetup_r+0x30>
 800a726:	bd70      	pop	{r4, r5, r6, pc}
 800a728:	0781      	lsls	r1, r0, #30
 800a72a:	bf58      	it	pl
 800a72c:	6963      	ldrpl	r3, [r4, #20]
 800a72e:	60a3      	str	r3, [r4, #8]
 800a730:	e7f4      	b.n	800a71c <__swsetup_r+0xb0>
 800a732:	2000      	movs	r0, #0
 800a734:	e7f7      	b.n	800a726 <__swsetup_r+0xba>
 800a736:	bf00      	nop
 800a738:	20000010 	.word	0x20000010
 800a73c:	0800b724 	.word	0x0800b724
 800a740:	0800b744 	.word	0x0800b744
 800a744:	0800b704 	.word	0x0800b704

0800a748 <__sflush_r>:
 800a748:	898a      	ldrh	r2, [r1, #12]
 800a74a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a74e:	4605      	mov	r5, r0
 800a750:	0710      	lsls	r0, r2, #28
 800a752:	460c      	mov	r4, r1
 800a754:	d458      	bmi.n	800a808 <__sflush_r+0xc0>
 800a756:	684b      	ldr	r3, [r1, #4]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	dc05      	bgt.n	800a768 <__sflush_r+0x20>
 800a75c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a75e:	2b00      	cmp	r3, #0
 800a760:	dc02      	bgt.n	800a768 <__sflush_r+0x20>
 800a762:	2000      	movs	r0, #0
 800a764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a768:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a76a:	2e00      	cmp	r6, #0
 800a76c:	d0f9      	beq.n	800a762 <__sflush_r+0x1a>
 800a76e:	2300      	movs	r3, #0
 800a770:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a774:	682f      	ldr	r7, [r5, #0]
 800a776:	602b      	str	r3, [r5, #0]
 800a778:	d032      	beq.n	800a7e0 <__sflush_r+0x98>
 800a77a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a77c:	89a3      	ldrh	r3, [r4, #12]
 800a77e:	075a      	lsls	r2, r3, #29
 800a780:	d505      	bpl.n	800a78e <__sflush_r+0x46>
 800a782:	6863      	ldr	r3, [r4, #4]
 800a784:	1ac0      	subs	r0, r0, r3
 800a786:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a788:	b10b      	cbz	r3, 800a78e <__sflush_r+0x46>
 800a78a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a78c:	1ac0      	subs	r0, r0, r3
 800a78e:	2300      	movs	r3, #0
 800a790:	4602      	mov	r2, r0
 800a792:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a794:	6a21      	ldr	r1, [r4, #32]
 800a796:	4628      	mov	r0, r5
 800a798:	47b0      	blx	r6
 800a79a:	1c43      	adds	r3, r0, #1
 800a79c:	89a3      	ldrh	r3, [r4, #12]
 800a79e:	d106      	bne.n	800a7ae <__sflush_r+0x66>
 800a7a0:	6829      	ldr	r1, [r5, #0]
 800a7a2:	291d      	cmp	r1, #29
 800a7a4:	d82c      	bhi.n	800a800 <__sflush_r+0xb8>
 800a7a6:	4a2a      	ldr	r2, [pc, #168]	; (800a850 <__sflush_r+0x108>)
 800a7a8:	40ca      	lsrs	r2, r1
 800a7aa:	07d6      	lsls	r6, r2, #31
 800a7ac:	d528      	bpl.n	800a800 <__sflush_r+0xb8>
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	6062      	str	r2, [r4, #4]
 800a7b2:	04d9      	lsls	r1, r3, #19
 800a7b4:	6922      	ldr	r2, [r4, #16]
 800a7b6:	6022      	str	r2, [r4, #0]
 800a7b8:	d504      	bpl.n	800a7c4 <__sflush_r+0x7c>
 800a7ba:	1c42      	adds	r2, r0, #1
 800a7bc:	d101      	bne.n	800a7c2 <__sflush_r+0x7a>
 800a7be:	682b      	ldr	r3, [r5, #0]
 800a7c0:	b903      	cbnz	r3, 800a7c4 <__sflush_r+0x7c>
 800a7c2:	6560      	str	r0, [r4, #84]	; 0x54
 800a7c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7c6:	602f      	str	r7, [r5, #0]
 800a7c8:	2900      	cmp	r1, #0
 800a7ca:	d0ca      	beq.n	800a762 <__sflush_r+0x1a>
 800a7cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7d0:	4299      	cmp	r1, r3
 800a7d2:	d002      	beq.n	800a7da <__sflush_r+0x92>
 800a7d4:	4628      	mov	r0, r5
 800a7d6:	f000 f9d7 	bl	800ab88 <_free_r>
 800a7da:	2000      	movs	r0, #0
 800a7dc:	6360      	str	r0, [r4, #52]	; 0x34
 800a7de:	e7c1      	b.n	800a764 <__sflush_r+0x1c>
 800a7e0:	6a21      	ldr	r1, [r4, #32]
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	4628      	mov	r0, r5
 800a7e6:	47b0      	blx	r6
 800a7e8:	1c41      	adds	r1, r0, #1
 800a7ea:	d1c7      	bne.n	800a77c <__sflush_r+0x34>
 800a7ec:	682b      	ldr	r3, [r5, #0]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d0c4      	beq.n	800a77c <__sflush_r+0x34>
 800a7f2:	2b1d      	cmp	r3, #29
 800a7f4:	d001      	beq.n	800a7fa <__sflush_r+0xb2>
 800a7f6:	2b16      	cmp	r3, #22
 800a7f8:	d101      	bne.n	800a7fe <__sflush_r+0xb6>
 800a7fa:	602f      	str	r7, [r5, #0]
 800a7fc:	e7b1      	b.n	800a762 <__sflush_r+0x1a>
 800a7fe:	89a3      	ldrh	r3, [r4, #12]
 800a800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a804:	81a3      	strh	r3, [r4, #12]
 800a806:	e7ad      	b.n	800a764 <__sflush_r+0x1c>
 800a808:	690f      	ldr	r7, [r1, #16]
 800a80a:	2f00      	cmp	r7, #0
 800a80c:	d0a9      	beq.n	800a762 <__sflush_r+0x1a>
 800a80e:	0793      	lsls	r3, r2, #30
 800a810:	680e      	ldr	r6, [r1, #0]
 800a812:	bf08      	it	eq
 800a814:	694b      	ldreq	r3, [r1, #20]
 800a816:	600f      	str	r7, [r1, #0]
 800a818:	bf18      	it	ne
 800a81a:	2300      	movne	r3, #0
 800a81c:	eba6 0807 	sub.w	r8, r6, r7
 800a820:	608b      	str	r3, [r1, #8]
 800a822:	f1b8 0f00 	cmp.w	r8, #0
 800a826:	dd9c      	ble.n	800a762 <__sflush_r+0x1a>
 800a828:	6a21      	ldr	r1, [r4, #32]
 800a82a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a82c:	4643      	mov	r3, r8
 800a82e:	463a      	mov	r2, r7
 800a830:	4628      	mov	r0, r5
 800a832:	47b0      	blx	r6
 800a834:	2800      	cmp	r0, #0
 800a836:	dc06      	bgt.n	800a846 <__sflush_r+0xfe>
 800a838:	89a3      	ldrh	r3, [r4, #12]
 800a83a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a83e:	81a3      	strh	r3, [r4, #12]
 800a840:	f04f 30ff 	mov.w	r0, #4294967295
 800a844:	e78e      	b.n	800a764 <__sflush_r+0x1c>
 800a846:	4407      	add	r7, r0
 800a848:	eba8 0800 	sub.w	r8, r8, r0
 800a84c:	e7e9      	b.n	800a822 <__sflush_r+0xda>
 800a84e:	bf00      	nop
 800a850:	20400001 	.word	0x20400001

0800a854 <_fflush_r>:
 800a854:	b538      	push	{r3, r4, r5, lr}
 800a856:	690b      	ldr	r3, [r1, #16]
 800a858:	4605      	mov	r5, r0
 800a85a:	460c      	mov	r4, r1
 800a85c:	b913      	cbnz	r3, 800a864 <_fflush_r+0x10>
 800a85e:	2500      	movs	r5, #0
 800a860:	4628      	mov	r0, r5
 800a862:	bd38      	pop	{r3, r4, r5, pc}
 800a864:	b118      	cbz	r0, 800a86e <_fflush_r+0x1a>
 800a866:	6983      	ldr	r3, [r0, #24]
 800a868:	b90b      	cbnz	r3, 800a86e <_fflush_r+0x1a>
 800a86a:	f000 f887 	bl	800a97c <__sinit>
 800a86e:	4b14      	ldr	r3, [pc, #80]	; (800a8c0 <_fflush_r+0x6c>)
 800a870:	429c      	cmp	r4, r3
 800a872:	d11b      	bne.n	800a8ac <_fflush_r+0x58>
 800a874:	686c      	ldr	r4, [r5, #4]
 800a876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d0ef      	beq.n	800a85e <_fflush_r+0xa>
 800a87e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a880:	07d0      	lsls	r0, r2, #31
 800a882:	d404      	bmi.n	800a88e <_fflush_r+0x3a>
 800a884:	0599      	lsls	r1, r3, #22
 800a886:	d402      	bmi.n	800a88e <_fflush_r+0x3a>
 800a888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a88a:	f000 f915 	bl	800aab8 <__retarget_lock_acquire_recursive>
 800a88e:	4628      	mov	r0, r5
 800a890:	4621      	mov	r1, r4
 800a892:	f7ff ff59 	bl	800a748 <__sflush_r>
 800a896:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a898:	07da      	lsls	r2, r3, #31
 800a89a:	4605      	mov	r5, r0
 800a89c:	d4e0      	bmi.n	800a860 <_fflush_r+0xc>
 800a89e:	89a3      	ldrh	r3, [r4, #12]
 800a8a0:	059b      	lsls	r3, r3, #22
 800a8a2:	d4dd      	bmi.n	800a860 <_fflush_r+0xc>
 800a8a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8a6:	f000 f908 	bl	800aaba <__retarget_lock_release_recursive>
 800a8aa:	e7d9      	b.n	800a860 <_fflush_r+0xc>
 800a8ac:	4b05      	ldr	r3, [pc, #20]	; (800a8c4 <_fflush_r+0x70>)
 800a8ae:	429c      	cmp	r4, r3
 800a8b0:	d101      	bne.n	800a8b6 <_fflush_r+0x62>
 800a8b2:	68ac      	ldr	r4, [r5, #8]
 800a8b4:	e7df      	b.n	800a876 <_fflush_r+0x22>
 800a8b6:	4b04      	ldr	r3, [pc, #16]	; (800a8c8 <_fflush_r+0x74>)
 800a8b8:	429c      	cmp	r4, r3
 800a8ba:	bf08      	it	eq
 800a8bc:	68ec      	ldreq	r4, [r5, #12]
 800a8be:	e7da      	b.n	800a876 <_fflush_r+0x22>
 800a8c0:	0800b724 	.word	0x0800b724
 800a8c4:	0800b744 	.word	0x0800b744
 800a8c8:	0800b704 	.word	0x0800b704

0800a8cc <std>:
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	b510      	push	{r4, lr}
 800a8d0:	4604      	mov	r4, r0
 800a8d2:	e9c0 3300 	strd	r3, r3, [r0]
 800a8d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8da:	6083      	str	r3, [r0, #8]
 800a8dc:	8181      	strh	r1, [r0, #12]
 800a8de:	6643      	str	r3, [r0, #100]	; 0x64
 800a8e0:	81c2      	strh	r2, [r0, #14]
 800a8e2:	6183      	str	r3, [r0, #24]
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	2208      	movs	r2, #8
 800a8e8:	305c      	adds	r0, #92	; 0x5c
 800a8ea:	f7ff fdd7 	bl	800a49c <memset>
 800a8ee:	4b05      	ldr	r3, [pc, #20]	; (800a904 <std+0x38>)
 800a8f0:	6263      	str	r3, [r4, #36]	; 0x24
 800a8f2:	4b05      	ldr	r3, [pc, #20]	; (800a908 <std+0x3c>)
 800a8f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8f6:	4b05      	ldr	r3, [pc, #20]	; (800a90c <std+0x40>)
 800a8f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8fa:	4b05      	ldr	r3, [pc, #20]	; (800a910 <std+0x44>)
 800a8fc:	6224      	str	r4, [r4, #32]
 800a8fe:	6323      	str	r3, [r4, #48]	; 0x30
 800a900:	bd10      	pop	{r4, pc}
 800a902:	bf00      	nop
 800a904:	0800b345 	.word	0x0800b345
 800a908:	0800b367 	.word	0x0800b367
 800a90c:	0800b39f 	.word	0x0800b39f
 800a910:	0800b3c3 	.word	0x0800b3c3

0800a914 <_cleanup_r>:
 800a914:	4901      	ldr	r1, [pc, #4]	; (800a91c <_cleanup_r+0x8>)
 800a916:	f000 b8af 	b.w	800aa78 <_fwalk_reent>
 800a91a:	bf00      	nop
 800a91c:	0800a855 	.word	0x0800a855

0800a920 <__sfmoreglue>:
 800a920:	b570      	push	{r4, r5, r6, lr}
 800a922:	2268      	movs	r2, #104	; 0x68
 800a924:	1e4d      	subs	r5, r1, #1
 800a926:	4355      	muls	r5, r2
 800a928:	460e      	mov	r6, r1
 800a92a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a92e:	f000 f997 	bl	800ac60 <_malloc_r>
 800a932:	4604      	mov	r4, r0
 800a934:	b140      	cbz	r0, 800a948 <__sfmoreglue+0x28>
 800a936:	2100      	movs	r1, #0
 800a938:	e9c0 1600 	strd	r1, r6, [r0]
 800a93c:	300c      	adds	r0, #12
 800a93e:	60a0      	str	r0, [r4, #8]
 800a940:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a944:	f7ff fdaa 	bl	800a49c <memset>
 800a948:	4620      	mov	r0, r4
 800a94a:	bd70      	pop	{r4, r5, r6, pc}

0800a94c <__sfp_lock_acquire>:
 800a94c:	4801      	ldr	r0, [pc, #4]	; (800a954 <__sfp_lock_acquire+0x8>)
 800a94e:	f000 b8b3 	b.w	800aab8 <__retarget_lock_acquire_recursive>
 800a952:	bf00      	nop
 800a954:	20008ec5 	.word	0x20008ec5

0800a958 <__sfp_lock_release>:
 800a958:	4801      	ldr	r0, [pc, #4]	; (800a960 <__sfp_lock_release+0x8>)
 800a95a:	f000 b8ae 	b.w	800aaba <__retarget_lock_release_recursive>
 800a95e:	bf00      	nop
 800a960:	20008ec5 	.word	0x20008ec5

0800a964 <__sinit_lock_acquire>:
 800a964:	4801      	ldr	r0, [pc, #4]	; (800a96c <__sinit_lock_acquire+0x8>)
 800a966:	f000 b8a7 	b.w	800aab8 <__retarget_lock_acquire_recursive>
 800a96a:	bf00      	nop
 800a96c:	20008ec6 	.word	0x20008ec6

0800a970 <__sinit_lock_release>:
 800a970:	4801      	ldr	r0, [pc, #4]	; (800a978 <__sinit_lock_release+0x8>)
 800a972:	f000 b8a2 	b.w	800aaba <__retarget_lock_release_recursive>
 800a976:	bf00      	nop
 800a978:	20008ec6 	.word	0x20008ec6

0800a97c <__sinit>:
 800a97c:	b510      	push	{r4, lr}
 800a97e:	4604      	mov	r4, r0
 800a980:	f7ff fff0 	bl	800a964 <__sinit_lock_acquire>
 800a984:	69a3      	ldr	r3, [r4, #24]
 800a986:	b11b      	cbz	r3, 800a990 <__sinit+0x14>
 800a988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a98c:	f7ff bff0 	b.w	800a970 <__sinit_lock_release>
 800a990:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a994:	6523      	str	r3, [r4, #80]	; 0x50
 800a996:	4b13      	ldr	r3, [pc, #76]	; (800a9e4 <__sinit+0x68>)
 800a998:	4a13      	ldr	r2, [pc, #76]	; (800a9e8 <__sinit+0x6c>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a99e:	42a3      	cmp	r3, r4
 800a9a0:	bf04      	itt	eq
 800a9a2:	2301      	moveq	r3, #1
 800a9a4:	61a3      	streq	r3, [r4, #24]
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f000 f820 	bl	800a9ec <__sfp>
 800a9ac:	6060      	str	r0, [r4, #4]
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	f000 f81c 	bl	800a9ec <__sfp>
 800a9b4:	60a0      	str	r0, [r4, #8]
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f000 f818 	bl	800a9ec <__sfp>
 800a9bc:	2200      	movs	r2, #0
 800a9be:	60e0      	str	r0, [r4, #12]
 800a9c0:	2104      	movs	r1, #4
 800a9c2:	6860      	ldr	r0, [r4, #4]
 800a9c4:	f7ff ff82 	bl	800a8cc <std>
 800a9c8:	68a0      	ldr	r0, [r4, #8]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	2109      	movs	r1, #9
 800a9ce:	f7ff ff7d 	bl	800a8cc <std>
 800a9d2:	68e0      	ldr	r0, [r4, #12]
 800a9d4:	2202      	movs	r2, #2
 800a9d6:	2112      	movs	r1, #18
 800a9d8:	f7ff ff78 	bl	800a8cc <std>
 800a9dc:	2301      	movs	r3, #1
 800a9de:	61a3      	str	r3, [r4, #24]
 800a9e0:	e7d2      	b.n	800a988 <__sinit+0xc>
 800a9e2:	bf00      	nop
 800a9e4:	0800b700 	.word	0x0800b700
 800a9e8:	0800a915 	.word	0x0800a915

0800a9ec <__sfp>:
 800a9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ee:	4607      	mov	r7, r0
 800a9f0:	f7ff ffac 	bl	800a94c <__sfp_lock_acquire>
 800a9f4:	4b1e      	ldr	r3, [pc, #120]	; (800aa70 <__sfp+0x84>)
 800a9f6:	681e      	ldr	r6, [r3, #0]
 800a9f8:	69b3      	ldr	r3, [r6, #24]
 800a9fa:	b913      	cbnz	r3, 800aa02 <__sfp+0x16>
 800a9fc:	4630      	mov	r0, r6
 800a9fe:	f7ff ffbd 	bl	800a97c <__sinit>
 800aa02:	3648      	adds	r6, #72	; 0x48
 800aa04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa08:	3b01      	subs	r3, #1
 800aa0a:	d503      	bpl.n	800aa14 <__sfp+0x28>
 800aa0c:	6833      	ldr	r3, [r6, #0]
 800aa0e:	b30b      	cbz	r3, 800aa54 <__sfp+0x68>
 800aa10:	6836      	ldr	r6, [r6, #0]
 800aa12:	e7f7      	b.n	800aa04 <__sfp+0x18>
 800aa14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa18:	b9d5      	cbnz	r5, 800aa50 <__sfp+0x64>
 800aa1a:	4b16      	ldr	r3, [pc, #88]	; (800aa74 <__sfp+0x88>)
 800aa1c:	60e3      	str	r3, [r4, #12]
 800aa1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa22:	6665      	str	r5, [r4, #100]	; 0x64
 800aa24:	f000 f847 	bl	800aab6 <__retarget_lock_init_recursive>
 800aa28:	f7ff ff96 	bl	800a958 <__sfp_lock_release>
 800aa2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aa30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aa34:	6025      	str	r5, [r4, #0]
 800aa36:	61a5      	str	r5, [r4, #24]
 800aa38:	2208      	movs	r2, #8
 800aa3a:	4629      	mov	r1, r5
 800aa3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa40:	f7ff fd2c 	bl	800a49c <memset>
 800aa44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aa48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa50:	3468      	adds	r4, #104	; 0x68
 800aa52:	e7d9      	b.n	800aa08 <__sfp+0x1c>
 800aa54:	2104      	movs	r1, #4
 800aa56:	4638      	mov	r0, r7
 800aa58:	f7ff ff62 	bl	800a920 <__sfmoreglue>
 800aa5c:	4604      	mov	r4, r0
 800aa5e:	6030      	str	r0, [r6, #0]
 800aa60:	2800      	cmp	r0, #0
 800aa62:	d1d5      	bne.n	800aa10 <__sfp+0x24>
 800aa64:	f7ff ff78 	bl	800a958 <__sfp_lock_release>
 800aa68:	230c      	movs	r3, #12
 800aa6a:	603b      	str	r3, [r7, #0]
 800aa6c:	e7ee      	b.n	800aa4c <__sfp+0x60>
 800aa6e:	bf00      	nop
 800aa70:	0800b700 	.word	0x0800b700
 800aa74:	ffff0001 	.word	0xffff0001

0800aa78 <_fwalk_reent>:
 800aa78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa7c:	4606      	mov	r6, r0
 800aa7e:	4688      	mov	r8, r1
 800aa80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aa84:	2700      	movs	r7, #0
 800aa86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa8a:	f1b9 0901 	subs.w	r9, r9, #1
 800aa8e:	d505      	bpl.n	800aa9c <_fwalk_reent+0x24>
 800aa90:	6824      	ldr	r4, [r4, #0]
 800aa92:	2c00      	cmp	r4, #0
 800aa94:	d1f7      	bne.n	800aa86 <_fwalk_reent+0xe>
 800aa96:	4638      	mov	r0, r7
 800aa98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa9c:	89ab      	ldrh	r3, [r5, #12]
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d907      	bls.n	800aab2 <_fwalk_reent+0x3a>
 800aaa2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	d003      	beq.n	800aab2 <_fwalk_reent+0x3a>
 800aaaa:	4629      	mov	r1, r5
 800aaac:	4630      	mov	r0, r6
 800aaae:	47c0      	blx	r8
 800aab0:	4307      	orrs	r7, r0
 800aab2:	3568      	adds	r5, #104	; 0x68
 800aab4:	e7e9      	b.n	800aa8a <_fwalk_reent+0x12>

0800aab6 <__retarget_lock_init_recursive>:
 800aab6:	4770      	bx	lr

0800aab8 <__retarget_lock_acquire_recursive>:
 800aab8:	4770      	bx	lr

0800aaba <__retarget_lock_release_recursive>:
 800aaba:	4770      	bx	lr

0800aabc <__swhatbuf_r>:
 800aabc:	b570      	push	{r4, r5, r6, lr}
 800aabe:	460e      	mov	r6, r1
 800aac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aac4:	2900      	cmp	r1, #0
 800aac6:	b096      	sub	sp, #88	; 0x58
 800aac8:	4614      	mov	r4, r2
 800aaca:	461d      	mov	r5, r3
 800aacc:	da08      	bge.n	800aae0 <__swhatbuf_r+0x24>
 800aace:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aad2:	2200      	movs	r2, #0
 800aad4:	602a      	str	r2, [r5, #0]
 800aad6:	061a      	lsls	r2, r3, #24
 800aad8:	d410      	bmi.n	800aafc <__swhatbuf_r+0x40>
 800aada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aade:	e00e      	b.n	800aafe <__swhatbuf_r+0x42>
 800aae0:	466a      	mov	r2, sp
 800aae2:	f000 fc95 	bl	800b410 <_fstat_r>
 800aae6:	2800      	cmp	r0, #0
 800aae8:	dbf1      	blt.n	800aace <__swhatbuf_r+0x12>
 800aaea:	9a01      	ldr	r2, [sp, #4]
 800aaec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aaf0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aaf4:	425a      	negs	r2, r3
 800aaf6:	415a      	adcs	r2, r3
 800aaf8:	602a      	str	r2, [r5, #0]
 800aafa:	e7ee      	b.n	800aada <__swhatbuf_r+0x1e>
 800aafc:	2340      	movs	r3, #64	; 0x40
 800aafe:	2000      	movs	r0, #0
 800ab00:	6023      	str	r3, [r4, #0]
 800ab02:	b016      	add	sp, #88	; 0x58
 800ab04:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ab08 <__smakebuf_r>:
 800ab08:	898b      	ldrh	r3, [r1, #12]
 800ab0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab0c:	079d      	lsls	r5, r3, #30
 800ab0e:	4606      	mov	r6, r0
 800ab10:	460c      	mov	r4, r1
 800ab12:	d507      	bpl.n	800ab24 <__smakebuf_r+0x1c>
 800ab14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab18:	6023      	str	r3, [r4, #0]
 800ab1a:	6123      	str	r3, [r4, #16]
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	6163      	str	r3, [r4, #20]
 800ab20:	b002      	add	sp, #8
 800ab22:	bd70      	pop	{r4, r5, r6, pc}
 800ab24:	ab01      	add	r3, sp, #4
 800ab26:	466a      	mov	r2, sp
 800ab28:	f7ff ffc8 	bl	800aabc <__swhatbuf_r>
 800ab2c:	9900      	ldr	r1, [sp, #0]
 800ab2e:	4605      	mov	r5, r0
 800ab30:	4630      	mov	r0, r6
 800ab32:	f000 f895 	bl	800ac60 <_malloc_r>
 800ab36:	b948      	cbnz	r0, 800ab4c <__smakebuf_r+0x44>
 800ab38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab3c:	059a      	lsls	r2, r3, #22
 800ab3e:	d4ef      	bmi.n	800ab20 <__smakebuf_r+0x18>
 800ab40:	f023 0303 	bic.w	r3, r3, #3
 800ab44:	f043 0302 	orr.w	r3, r3, #2
 800ab48:	81a3      	strh	r3, [r4, #12]
 800ab4a:	e7e3      	b.n	800ab14 <__smakebuf_r+0xc>
 800ab4c:	4b0d      	ldr	r3, [pc, #52]	; (800ab84 <__smakebuf_r+0x7c>)
 800ab4e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ab50:	89a3      	ldrh	r3, [r4, #12]
 800ab52:	6020      	str	r0, [r4, #0]
 800ab54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab58:	81a3      	strh	r3, [r4, #12]
 800ab5a:	9b00      	ldr	r3, [sp, #0]
 800ab5c:	6163      	str	r3, [r4, #20]
 800ab5e:	9b01      	ldr	r3, [sp, #4]
 800ab60:	6120      	str	r0, [r4, #16]
 800ab62:	b15b      	cbz	r3, 800ab7c <__smakebuf_r+0x74>
 800ab64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab68:	4630      	mov	r0, r6
 800ab6a:	f000 fc63 	bl	800b434 <_isatty_r>
 800ab6e:	b128      	cbz	r0, 800ab7c <__smakebuf_r+0x74>
 800ab70:	89a3      	ldrh	r3, [r4, #12]
 800ab72:	f023 0303 	bic.w	r3, r3, #3
 800ab76:	f043 0301 	orr.w	r3, r3, #1
 800ab7a:	81a3      	strh	r3, [r4, #12]
 800ab7c:	89a0      	ldrh	r0, [r4, #12]
 800ab7e:	4305      	orrs	r5, r0
 800ab80:	81a5      	strh	r5, [r4, #12]
 800ab82:	e7cd      	b.n	800ab20 <__smakebuf_r+0x18>
 800ab84:	0800a915 	.word	0x0800a915

0800ab88 <_free_r>:
 800ab88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab8a:	2900      	cmp	r1, #0
 800ab8c:	d044      	beq.n	800ac18 <_free_r+0x90>
 800ab8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab92:	9001      	str	r0, [sp, #4]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	f1a1 0404 	sub.w	r4, r1, #4
 800ab9a:	bfb8      	it	lt
 800ab9c:	18e4      	addlt	r4, r4, r3
 800ab9e:	f000 fc6b 	bl	800b478 <__malloc_lock>
 800aba2:	4a1e      	ldr	r2, [pc, #120]	; (800ac1c <_free_r+0x94>)
 800aba4:	9801      	ldr	r0, [sp, #4]
 800aba6:	6813      	ldr	r3, [r2, #0]
 800aba8:	b933      	cbnz	r3, 800abb8 <_free_r+0x30>
 800abaa:	6063      	str	r3, [r4, #4]
 800abac:	6014      	str	r4, [r2, #0]
 800abae:	b003      	add	sp, #12
 800abb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800abb4:	f000 bc66 	b.w	800b484 <__malloc_unlock>
 800abb8:	42a3      	cmp	r3, r4
 800abba:	d908      	bls.n	800abce <_free_r+0x46>
 800abbc:	6825      	ldr	r5, [r4, #0]
 800abbe:	1961      	adds	r1, r4, r5
 800abc0:	428b      	cmp	r3, r1
 800abc2:	bf01      	itttt	eq
 800abc4:	6819      	ldreq	r1, [r3, #0]
 800abc6:	685b      	ldreq	r3, [r3, #4]
 800abc8:	1949      	addeq	r1, r1, r5
 800abca:	6021      	streq	r1, [r4, #0]
 800abcc:	e7ed      	b.n	800abaa <_free_r+0x22>
 800abce:	461a      	mov	r2, r3
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	b10b      	cbz	r3, 800abd8 <_free_r+0x50>
 800abd4:	42a3      	cmp	r3, r4
 800abd6:	d9fa      	bls.n	800abce <_free_r+0x46>
 800abd8:	6811      	ldr	r1, [r2, #0]
 800abda:	1855      	adds	r5, r2, r1
 800abdc:	42a5      	cmp	r5, r4
 800abde:	d10b      	bne.n	800abf8 <_free_r+0x70>
 800abe0:	6824      	ldr	r4, [r4, #0]
 800abe2:	4421      	add	r1, r4
 800abe4:	1854      	adds	r4, r2, r1
 800abe6:	42a3      	cmp	r3, r4
 800abe8:	6011      	str	r1, [r2, #0]
 800abea:	d1e0      	bne.n	800abae <_free_r+0x26>
 800abec:	681c      	ldr	r4, [r3, #0]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	6053      	str	r3, [r2, #4]
 800abf2:	4421      	add	r1, r4
 800abf4:	6011      	str	r1, [r2, #0]
 800abf6:	e7da      	b.n	800abae <_free_r+0x26>
 800abf8:	d902      	bls.n	800ac00 <_free_r+0x78>
 800abfa:	230c      	movs	r3, #12
 800abfc:	6003      	str	r3, [r0, #0]
 800abfe:	e7d6      	b.n	800abae <_free_r+0x26>
 800ac00:	6825      	ldr	r5, [r4, #0]
 800ac02:	1961      	adds	r1, r4, r5
 800ac04:	428b      	cmp	r3, r1
 800ac06:	bf04      	itt	eq
 800ac08:	6819      	ldreq	r1, [r3, #0]
 800ac0a:	685b      	ldreq	r3, [r3, #4]
 800ac0c:	6063      	str	r3, [r4, #4]
 800ac0e:	bf04      	itt	eq
 800ac10:	1949      	addeq	r1, r1, r5
 800ac12:	6021      	streq	r1, [r4, #0]
 800ac14:	6054      	str	r4, [r2, #4]
 800ac16:	e7ca      	b.n	800abae <_free_r+0x26>
 800ac18:	b003      	add	sp, #12
 800ac1a:	bd30      	pop	{r4, r5, pc}
 800ac1c:	20008ec8 	.word	0x20008ec8

0800ac20 <sbrk_aligned>:
 800ac20:	b570      	push	{r4, r5, r6, lr}
 800ac22:	4e0e      	ldr	r6, [pc, #56]	; (800ac5c <sbrk_aligned+0x3c>)
 800ac24:	460c      	mov	r4, r1
 800ac26:	6831      	ldr	r1, [r6, #0]
 800ac28:	4605      	mov	r5, r0
 800ac2a:	b911      	cbnz	r1, 800ac32 <sbrk_aligned+0x12>
 800ac2c:	f000 fb7a 	bl	800b324 <_sbrk_r>
 800ac30:	6030      	str	r0, [r6, #0]
 800ac32:	4621      	mov	r1, r4
 800ac34:	4628      	mov	r0, r5
 800ac36:	f000 fb75 	bl	800b324 <_sbrk_r>
 800ac3a:	1c43      	adds	r3, r0, #1
 800ac3c:	d00a      	beq.n	800ac54 <sbrk_aligned+0x34>
 800ac3e:	1cc4      	adds	r4, r0, #3
 800ac40:	f024 0403 	bic.w	r4, r4, #3
 800ac44:	42a0      	cmp	r0, r4
 800ac46:	d007      	beq.n	800ac58 <sbrk_aligned+0x38>
 800ac48:	1a21      	subs	r1, r4, r0
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	f000 fb6a 	bl	800b324 <_sbrk_r>
 800ac50:	3001      	adds	r0, #1
 800ac52:	d101      	bne.n	800ac58 <sbrk_aligned+0x38>
 800ac54:	f04f 34ff 	mov.w	r4, #4294967295
 800ac58:	4620      	mov	r0, r4
 800ac5a:	bd70      	pop	{r4, r5, r6, pc}
 800ac5c:	20008ecc 	.word	0x20008ecc

0800ac60 <_malloc_r>:
 800ac60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac64:	1ccd      	adds	r5, r1, #3
 800ac66:	f025 0503 	bic.w	r5, r5, #3
 800ac6a:	3508      	adds	r5, #8
 800ac6c:	2d0c      	cmp	r5, #12
 800ac6e:	bf38      	it	cc
 800ac70:	250c      	movcc	r5, #12
 800ac72:	2d00      	cmp	r5, #0
 800ac74:	4607      	mov	r7, r0
 800ac76:	db01      	blt.n	800ac7c <_malloc_r+0x1c>
 800ac78:	42a9      	cmp	r1, r5
 800ac7a:	d905      	bls.n	800ac88 <_malloc_r+0x28>
 800ac7c:	230c      	movs	r3, #12
 800ac7e:	603b      	str	r3, [r7, #0]
 800ac80:	2600      	movs	r6, #0
 800ac82:	4630      	mov	r0, r6
 800ac84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac88:	4e2e      	ldr	r6, [pc, #184]	; (800ad44 <_malloc_r+0xe4>)
 800ac8a:	f000 fbf5 	bl	800b478 <__malloc_lock>
 800ac8e:	6833      	ldr	r3, [r6, #0]
 800ac90:	461c      	mov	r4, r3
 800ac92:	bb34      	cbnz	r4, 800ace2 <_malloc_r+0x82>
 800ac94:	4629      	mov	r1, r5
 800ac96:	4638      	mov	r0, r7
 800ac98:	f7ff ffc2 	bl	800ac20 <sbrk_aligned>
 800ac9c:	1c43      	adds	r3, r0, #1
 800ac9e:	4604      	mov	r4, r0
 800aca0:	d14d      	bne.n	800ad3e <_malloc_r+0xde>
 800aca2:	6834      	ldr	r4, [r6, #0]
 800aca4:	4626      	mov	r6, r4
 800aca6:	2e00      	cmp	r6, #0
 800aca8:	d140      	bne.n	800ad2c <_malloc_r+0xcc>
 800acaa:	6823      	ldr	r3, [r4, #0]
 800acac:	4631      	mov	r1, r6
 800acae:	4638      	mov	r0, r7
 800acb0:	eb04 0803 	add.w	r8, r4, r3
 800acb4:	f000 fb36 	bl	800b324 <_sbrk_r>
 800acb8:	4580      	cmp	r8, r0
 800acba:	d13a      	bne.n	800ad32 <_malloc_r+0xd2>
 800acbc:	6821      	ldr	r1, [r4, #0]
 800acbe:	3503      	adds	r5, #3
 800acc0:	1a6d      	subs	r5, r5, r1
 800acc2:	f025 0503 	bic.w	r5, r5, #3
 800acc6:	3508      	adds	r5, #8
 800acc8:	2d0c      	cmp	r5, #12
 800acca:	bf38      	it	cc
 800accc:	250c      	movcc	r5, #12
 800acce:	4629      	mov	r1, r5
 800acd0:	4638      	mov	r0, r7
 800acd2:	f7ff ffa5 	bl	800ac20 <sbrk_aligned>
 800acd6:	3001      	adds	r0, #1
 800acd8:	d02b      	beq.n	800ad32 <_malloc_r+0xd2>
 800acda:	6823      	ldr	r3, [r4, #0]
 800acdc:	442b      	add	r3, r5
 800acde:	6023      	str	r3, [r4, #0]
 800ace0:	e00e      	b.n	800ad00 <_malloc_r+0xa0>
 800ace2:	6822      	ldr	r2, [r4, #0]
 800ace4:	1b52      	subs	r2, r2, r5
 800ace6:	d41e      	bmi.n	800ad26 <_malloc_r+0xc6>
 800ace8:	2a0b      	cmp	r2, #11
 800acea:	d916      	bls.n	800ad1a <_malloc_r+0xba>
 800acec:	1961      	adds	r1, r4, r5
 800acee:	42a3      	cmp	r3, r4
 800acf0:	6025      	str	r5, [r4, #0]
 800acf2:	bf18      	it	ne
 800acf4:	6059      	strne	r1, [r3, #4]
 800acf6:	6863      	ldr	r3, [r4, #4]
 800acf8:	bf08      	it	eq
 800acfa:	6031      	streq	r1, [r6, #0]
 800acfc:	5162      	str	r2, [r4, r5]
 800acfe:	604b      	str	r3, [r1, #4]
 800ad00:	4638      	mov	r0, r7
 800ad02:	f104 060b 	add.w	r6, r4, #11
 800ad06:	f000 fbbd 	bl	800b484 <__malloc_unlock>
 800ad0a:	f026 0607 	bic.w	r6, r6, #7
 800ad0e:	1d23      	adds	r3, r4, #4
 800ad10:	1af2      	subs	r2, r6, r3
 800ad12:	d0b6      	beq.n	800ac82 <_malloc_r+0x22>
 800ad14:	1b9b      	subs	r3, r3, r6
 800ad16:	50a3      	str	r3, [r4, r2]
 800ad18:	e7b3      	b.n	800ac82 <_malloc_r+0x22>
 800ad1a:	6862      	ldr	r2, [r4, #4]
 800ad1c:	42a3      	cmp	r3, r4
 800ad1e:	bf0c      	ite	eq
 800ad20:	6032      	streq	r2, [r6, #0]
 800ad22:	605a      	strne	r2, [r3, #4]
 800ad24:	e7ec      	b.n	800ad00 <_malloc_r+0xa0>
 800ad26:	4623      	mov	r3, r4
 800ad28:	6864      	ldr	r4, [r4, #4]
 800ad2a:	e7b2      	b.n	800ac92 <_malloc_r+0x32>
 800ad2c:	4634      	mov	r4, r6
 800ad2e:	6876      	ldr	r6, [r6, #4]
 800ad30:	e7b9      	b.n	800aca6 <_malloc_r+0x46>
 800ad32:	230c      	movs	r3, #12
 800ad34:	603b      	str	r3, [r7, #0]
 800ad36:	4638      	mov	r0, r7
 800ad38:	f000 fba4 	bl	800b484 <__malloc_unlock>
 800ad3c:	e7a1      	b.n	800ac82 <_malloc_r+0x22>
 800ad3e:	6025      	str	r5, [r4, #0]
 800ad40:	e7de      	b.n	800ad00 <_malloc_r+0xa0>
 800ad42:	bf00      	nop
 800ad44:	20008ec8 	.word	0x20008ec8

0800ad48 <__sfputc_r>:
 800ad48:	6893      	ldr	r3, [r2, #8]
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	b410      	push	{r4}
 800ad50:	6093      	str	r3, [r2, #8]
 800ad52:	da08      	bge.n	800ad66 <__sfputc_r+0x1e>
 800ad54:	6994      	ldr	r4, [r2, #24]
 800ad56:	42a3      	cmp	r3, r4
 800ad58:	db01      	blt.n	800ad5e <__sfputc_r+0x16>
 800ad5a:	290a      	cmp	r1, #10
 800ad5c:	d103      	bne.n	800ad66 <__sfputc_r+0x1e>
 800ad5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad62:	f7ff bc31 	b.w	800a5c8 <__swbuf_r>
 800ad66:	6813      	ldr	r3, [r2, #0]
 800ad68:	1c58      	adds	r0, r3, #1
 800ad6a:	6010      	str	r0, [r2, #0]
 800ad6c:	7019      	strb	r1, [r3, #0]
 800ad6e:	4608      	mov	r0, r1
 800ad70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad74:	4770      	bx	lr

0800ad76 <__sfputs_r>:
 800ad76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad78:	4606      	mov	r6, r0
 800ad7a:	460f      	mov	r7, r1
 800ad7c:	4614      	mov	r4, r2
 800ad7e:	18d5      	adds	r5, r2, r3
 800ad80:	42ac      	cmp	r4, r5
 800ad82:	d101      	bne.n	800ad88 <__sfputs_r+0x12>
 800ad84:	2000      	movs	r0, #0
 800ad86:	e007      	b.n	800ad98 <__sfputs_r+0x22>
 800ad88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad8c:	463a      	mov	r2, r7
 800ad8e:	4630      	mov	r0, r6
 800ad90:	f7ff ffda 	bl	800ad48 <__sfputc_r>
 800ad94:	1c43      	adds	r3, r0, #1
 800ad96:	d1f3      	bne.n	800ad80 <__sfputs_r+0xa>
 800ad98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad9c <_vfiprintf_r>:
 800ad9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada0:	460d      	mov	r5, r1
 800ada2:	b09d      	sub	sp, #116	; 0x74
 800ada4:	4614      	mov	r4, r2
 800ada6:	4698      	mov	r8, r3
 800ada8:	4606      	mov	r6, r0
 800adaa:	b118      	cbz	r0, 800adb4 <_vfiprintf_r+0x18>
 800adac:	6983      	ldr	r3, [r0, #24]
 800adae:	b90b      	cbnz	r3, 800adb4 <_vfiprintf_r+0x18>
 800adb0:	f7ff fde4 	bl	800a97c <__sinit>
 800adb4:	4b89      	ldr	r3, [pc, #548]	; (800afdc <_vfiprintf_r+0x240>)
 800adb6:	429d      	cmp	r5, r3
 800adb8:	d11b      	bne.n	800adf2 <_vfiprintf_r+0x56>
 800adba:	6875      	ldr	r5, [r6, #4]
 800adbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adbe:	07d9      	lsls	r1, r3, #31
 800adc0:	d405      	bmi.n	800adce <_vfiprintf_r+0x32>
 800adc2:	89ab      	ldrh	r3, [r5, #12]
 800adc4:	059a      	lsls	r2, r3, #22
 800adc6:	d402      	bmi.n	800adce <_vfiprintf_r+0x32>
 800adc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adca:	f7ff fe75 	bl	800aab8 <__retarget_lock_acquire_recursive>
 800adce:	89ab      	ldrh	r3, [r5, #12]
 800add0:	071b      	lsls	r3, r3, #28
 800add2:	d501      	bpl.n	800add8 <_vfiprintf_r+0x3c>
 800add4:	692b      	ldr	r3, [r5, #16]
 800add6:	b9eb      	cbnz	r3, 800ae14 <_vfiprintf_r+0x78>
 800add8:	4629      	mov	r1, r5
 800adda:	4630      	mov	r0, r6
 800addc:	f7ff fc46 	bl	800a66c <__swsetup_r>
 800ade0:	b1c0      	cbz	r0, 800ae14 <_vfiprintf_r+0x78>
 800ade2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ade4:	07dc      	lsls	r4, r3, #31
 800ade6:	d50e      	bpl.n	800ae06 <_vfiprintf_r+0x6a>
 800ade8:	f04f 30ff 	mov.w	r0, #4294967295
 800adec:	b01d      	add	sp, #116	; 0x74
 800adee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf2:	4b7b      	ldr	r3, [pc, #492]	; (800afe0 <_vfiprintf_r+0x244>)
 800adf4:	429d      	cmp	r5, r3
 800adf6:	d101      	bne.n	800adfc <_vfiprintf_r+0x60>
 800adf8:	68b5      	ldr	r5, [r6, #8]
 800adfa:	e7df      	b.n	800adbc <_vfiprintf_r+0x20>
 800adfc:	4b79      	ldr	r3, [pc, #484]	; (800afe4 <_vfiprintf_r+0x248>)
 800adfe:	429d      	cmp	r5, r3
 800ae00:	bf08      	it	eq
 800ae02:	68f5      	ldreq	r5, [r6, #12]
 800ae04:	e7da      	b.n	800adbc <_vfiprintf_r+0x20>
 800ae06:	89ab      	ldrh	r3, [r5, #12]
 800ae08:	0598      	lsls	r0, r3, #22
 800ae0a:	d4ed      	bmi.n	800ade8 <_vfiprintf_r+0x4c>
 800ae0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae0e:	f7ff fe54 	bl	800aaba <__retarget_lock_release_recursive>
 800ae12:	e7e9      	b.n	800ade8 <_vfiprintf_r+0x4c>
 800ae14:	2300      	movs	r3, #0
 800ae16:	9309      	str	r3, [sp, #36]	; 0x24
 800ae18:	2320      	movs	r3, #32
 800ae1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae22:	2330      	movs	r3, #48	; 0x30
 800ae24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800afe8 <_vfiprintf_r+0x24c>
 800ae28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae2c:	f04f 0901 	mov.w	r9, #1
 800ae30:	4623      	mov	r3, r4
 800ae32:	469a      	mov	sl, r3
 800ae34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae38:	b10a      	cbz	r2, 800ae3e <_vfiprintf_r+0xa2>
 800ae3a:	2a25      	cmp	r2, #37	; 0x25
 800ae3c:	d1f9      	bne.n	800ae32 <_vfiprintf_r+0x96>
 800ae3e:	ebba 0b04 	subs.w	fp, sl, r4
 800ae42:	d00b      	beq.n	800ae5c <_vfiprintf_r+0xc0>
 800ae44:	465b      	mov	r3, fp
 800ae46:	4622      	mov	r2, r4
 800ae48:	4629      	mov	r1, r5
 800ae4a:	4630      	mov	r0, r6
 800ae4c:	f7ff ff93 	bl	800ad76 <__sfputs_r>
 800ae50:	3001      	adds	r0, #1
 800ae52:	f000 80aa 	beq.w	800afaa <_vfiprintf_r+0x20e>
 800ae56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae58:	445a      	add	r2, fp
 800ae5a:	9209      	str	r2, [sp, #36]	; 0x24
 800ae5c:	f89a 3000 	ldrb.w	r3, [sl]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f000 80a2 	beq.w	800afaa <_vfiprintf_r+0x20e>
 800ae66:	2300      	movs	r3, #0
 800ae68:	f04f 32ff 	mov.w	r2, #4294967295
 800ae6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae70:	f10a 0a01 	add.w	sl, sl, #1
 800ae74:	9304      	str	r3, [sp, #16]
 800ae76:	9307      	str	r3, [sp, #28]
 800ae78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae7c:	931a      	str	r3, [sp, #104]	; 0x68
 800ae7e:	4654      	mov	r4, sl
 800ae80:	2205      	movs	r2, #5
 800ae82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae86:	4858      	ldr	r0, [pc, #352]	; (800afe8 <_vfiprintf_r+0x24c>)
 800ae88:	f7f5 f9da 	bl	8000240 <memchr>
 800ae8c:	9a04      	ldr	r2, [sp, #16]
 800ae8e:	b9d8      	cbnz	r0, 800aec8 <_vfiprintf_r+0x12c>
 800ae90:	06d1      	lsls	r1, r2, #27
 800ae92:	bf44      	itt	mi
 800ae94:	2320      	movmi	r3, #32
 800ae96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae9a:	0713      	lsls	r3, r2, #28
 800ae9c:	bf44      	itt	mi
 800ae9e:	232b      	movmi	r3, #43	; 0x2b
 800aea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aea4:	f89a 3000 	ldrb.w	r3, [sl]
 800aea8:	2b2a      	cmp	r3, #42	; 0x2a
 800aeaa:	d015      	beq.n	800aed8 <_vfiprintf_r+0x13c>
 800aeac:	9a07      	ldr	r2, [sp, #28]
 800aeae:	4654      	mov	r4, sl
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	f04f 0c0a 	mov.w	ip, #10
 800aeb6:	4621      	mov	r1, r4
 800aeb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aebc:	3b30      	subs	r3, #48	; 0x30
 800aebe:	2b09      	cmp	r3, #9
 800aec0:	d94e      	bls.n	800af60 <_vfiprintf_r+0x1c4>
 800aec2:	b1b0      	cbz	r0, 800aef2 <_vfiprintf_r+0x156>
 800aec4:	9207      	str	r2, [sp, #28]
 800aec6:	e014      	b.n	800aef2 <_vfiprintf_r+0x156>
 800aec8:	eba0 0308 	sub.w	r3, r0, r8
 800aecc:	fa09 f303 	lsl.w	r3, r9, r3
 800aed0:	4313      	orrs	r3, r2
 800aed2:	9304      	str	r3, [sp, #16]
 800aed4:	46a2      	mov	sl, r4
 800aed6:	e7d2      	b.n	800ae7e <_vfiprintf_r+0xe2>
 800aed8:	9b03      	ldr	r3, [sp, #12]
 800aeda:	1d19      	adds	r1, r3, #4
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	9103      	str	r1, [sp, #12]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	bfbb      	ittet	lt
 800aee4:	425b      	neglt	r3, r3
 800aee6:	f042 0202 	orrlt.w	r2, r2, #2
 800aeea:	9307      	strge	r3, [sp, #28]
 800aeec:	9307      	strlt	r3, [sp, #28]
 800aeee:	bfb8      	it	lt
 800aef0:	9204      	strlt	r2, [sp, #16]
 800aef2:	7823      	ldrb	r3, [r4, #0]
 800aef4:	2b2e      	cmp	r3, #46	; 0x2e
 800aef6:	d10c      	bne.n	800af12 <_vfiprintf_r+0x176>
 800aef8:	7863      	ldrb	r3, [r4, #1]
 800aefa:	2b2a      	cmp	r3, #42	; 0x2a
 800aefc:	d135      	bne.n	800af6a <_vfiprintf_r+0x1ce>
 800aefe:	9b03      	ldr	r3, [sp, #12]
 800af00:	1d1a      	adds	r2, r3, #4
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	9203      	str	r2, [sp, #12]
 800af06:	2b00      	cmp	r3, #0
 800af08:	bfb8      	it	lt
 800af0a:	f04f 33ff 	movlt.w	r3, #4294967295
 800af0e:	3402      	adds	r4, #2
 800af10:	9305      	str	r3, [sp, #20]
 800af12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aff8 <_vfiprintf_r+0x25c>
 800af16:	7821      	ldrb	r1, [r4, #0]
 800af18:	2203      	movs	r2, #3
 800af1a:	4650      	mov	r0, sl
 800af1c:	f7f5 f990 	bl	8000240 <memchr>
 800af20:	b140      	cbz	r0, 800af34 <_vfiprintf_r+0x198>
 800af22:	2340      	movs	r3, #64	; 0x40
 800af24:	eba0 000a 	sub.w	r0, r0, sl
 800af28:	fa03 f000 	lsl.w	r0, r3, r0
 800af2c:	9b04      	ldr	r3, [sp, #16]
 800af2e:	4303      	orrs	r3, r0
 800af30:	3401      	adds	r4, #1
 800af32:	9304      	str	r3, [sp, #16]
 800af34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af38:	482c      	ldr	r0, [pc, #176]	; (800afec <_vfiprintf_r+0x250>)
 800af3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af3e:	2206      	movs	r2, #6
 800af40:	f7f5 f97e 	bl	8000240 <memchr>
 800af44:	2800      	cmp	r0, #0
 800af46:	d03f      	beq.n	800afc8 <_vfiprintf_r+0x22c>
 800af48:	4b29      	ldr	r3, [pc, #164]	; (800aff0 <_vfiprintf_r+0x254>)
 800af4a:	bb1b      	cbnz	r3, 800af94 <_vfiprintf_r+0x1f8>
 800af4c:	9b03      	ldr	r3, [sp, #12]
 800af4e:	3307      	adds	r3, #7
 800af50:	f023 0307 	bic.w	r3, r3, #7
 800af54:	3308      	adds	r3, #8
 800af56:	9303      	str	r3, [sp, #12]
 800af58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af5a:	443b      	add	r3, r7
 800af5c:	9309      	str	r3, [sp, #36]	; 0x24
 800af5e:	e767      	b.n	800ae30 <_vfiprintf_r+0x94>
 800af60:	fb0c 3202 	mla	r2, ip, r2, r3
 800af64:	460c      	mov	r4, r1
 800af66:	2001      	movs	r0, #1
 800af68:	e7a5      	b.n	800aeb6 <_vfiprintf_r+0x11a>
 800af6a:	2300      	movs	r3, #0
 800af6c:	3401      	adds	r4, #1
 800af6e:	9305      	str	r3, [sp, #20]
 800af70:	4619      	mov	r1, r3
 800af72:	f04f 0c0a 	mov.w	ip, #10
 800af76:	4620      	mov	r0, r4
 800af78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af7c:	3a30      	subs	r2, #48	; 0x30
 800af7e:	2a09      	cmp	r2, #9
 800af80:	d903      	bls.n	800af8a <_vfiprintf_r+0x1ee>
 800af82:	2b00      	cmp	r3, #0
 800af84:	d0c5      	beq.n	800af12 <_vfiprintf_r+0x176>
 800af86:	9105      	str	r1, [sp, #20]
 800af88:	e7c3      	b.n	800af12 <_vfiprintf_r+0x176>
 800af8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800af8e:	4604      	mov	r4, r0
 800af90:	2301      	movs	r3, #1
 800af92:	e7f0      	b.n	800af76 <_vfiprintf_r+0x1da>
 800af94:	ab03      	add	r3, sp, #12
 800af96:	9300      	str	r3, [sp, #0]
 800af98:	462a      	mov	r2, r5
 800af9a:	4b16      	ldr	r3, [pc, #88]	; (800aff4 <_vfiprintf_r+0x258>)
 800af9c:	a904      	add	r1, sp, #16
 800af9e:	4630      	mov	r0, r6
 800afa0:	f3af 8000 	nop.w
 800afa4:	4607      	mov	r7, r0
 800afa6:	1c78      	adds	r0, r7, #1
 800afa8:	d1d6      	bne.n	800af58 <_vfiprintf_r+0x1bc>
 800afaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afac:	07d9      	lsls	r1, r3, #31
 800afae:	d405      	bmi.n	800afbc <_vfiprintf_r+0x220>
 800afb0:	89ab      	ldrh	r3, [r5, #12]
 800afb2:	059a      	lsls	r2, r3, #22
 800afb4:	d402      	bmi.n	800afbc <_vfiprintf_r+0x220>
 800afb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afb8:	f7ff fd7f 	bl	800aaba <__retarget_lock_release_recursive>
 800afbc:	89ab      	ldrh	r3, [r5, #12]
 800afbe:	065b      	lsls	r3, r3, #25
 800afc0:	f53f af12 	bmi.w	800ade8 <_vfiprintf_r+0x4c>
 800afc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afc6:	e711      	b.n	800adec <_vfiprintf_r+0x50>
 800afc8:	ab03      	add	r3, sp, #12
 800afca:	9300      	str	r3, [sp, #0]
 800afcc:	462a      	mov	r2, r5
 800afce:	4b09      	ldr	r3, [pc, #36]	; (800aff4 <_vfiprintf_r+0x258>)
 800afd0:	a904      	add	r1, sp, #16
 800afd2:	4630      	mov	r0, r6
 800afd4:	f000 f880 	bl	800b0d8 <_printf_i>
 800afd8:	e7e4      	b.n	800afa4 <_vfiprintf_r+0x208>
 800afda:	bf00      	nop
 800afdc:	0800b724 	.word	0x0800b724
 800afe0:	0800b744 	.word	0x0800b744
 800afe4:	0800b704 	.word	0x0800b704
 800afe8:	0800b764 	.word	0x0800b764
 800afec:	0800b76e 	.word	0x0800b76e
 800aff0:	00000000 	.word	0x00000000
 800aff4:	0800ad77 	.word	0x0800ad77
 800aff8:	0800b76a 	.word	0x0800b76a

0800affc <_printf_common>:
 800affc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b000:	4616      	mov	r6, r2
 800b002:	4699      	mov	r9, r3
 800b004:	688a      	ldr	r2, [r1, #8]
 800b006:	690b      	ldr	r3, [r1, #16]
 800b008:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b00c:	4293      	cmp	r3, r2
 800b00e:	bfb8      	it	lt
 800b010:	4613      	movlt	r3, r2
 800b012:	6033      	str	r3, [r6, #0]
 800b014:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b018:	4607      	mov	r7, r0
 800b01a:	460c      	mov	r4, r1
 800b01c:	b10a      	cbz	r2, 800b022 <_printf_common+0x26>
 800b01e:	3301      	adds	r3, #1
 800b020:	6033      	str	r3, [r6, #0]
 800b022:	6823      	ldr	r3, [r4, #0]
 800b024:	0699      	lsls	r1, r3, #26
 800b026:	bf42      	ittt	mi
 800b028:	6833      	ldrmi	r3, [r6, #0]
 800b02a:	3302      	addmi	r3, #2
 800b02c:	6033      	strmi	r3, [r6, #0]
 800b02e:	6825      	ldr	r5, [r4, #0]
 800b030:	f015 0506 	ands.w	r5, r5, #6
 800b034:	d106      	bne.n	800b044 <_printf_common+0x48>
 800b036:	f104 0a19 	add.w	sl, r4, #25
 800b03a:	68e3      	ldr	r3, [r4, #12]
 800b03c:	6832      	ldr	r2, [r6, #0]
 800b03e:	1a9b      	subs	r3, r3, r2
 800b040:	42ab      	cmp	r3, r5
 800b042:	dc26      	bgt.n	800b092 <_printf_common+0x96>
 800b044:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b048:	1e13      	subs	r3, r2, #0
 800b04a:	6822      	ldr	r2, [r4, #0]
 800b04c:	bf18      	it	ne
 800b04e:	2301      	movne	r3, #1
 800b050:	0692      	lsls	r2, r2, #26
 800b052:	d42b      	bmi.n	800b0ac <_printf_common+0xb0>
 800b054:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b058:	4649      	mov	r1, r9
 800b05a:	4638      	mov	r0, r7
 800b05c:	47c0      	blx	r8
 800b05e:	3001      	adds	r0, #1
 800b060:	d01e      	beq.n	800b0a0 <_printf_common+0xa4>
 800b062:	6823      	ldr	r3, [r4, #0]
 800b064:	68e5      	ldr	r5, [r4, #12]
 800b066:	6832      	ldr	r2, [r6, #0]
 800b068:	f003 0306 	and.w	r3, r3, #6
 800b06c:	2b04      	cmp	r3, #4
 800b06e:	bf08      	it	eq
 800b070:	1aad      	subeq	r5, r5, r2
 800b072:	68a3      	ldr	r3, [r4, #8]
 800b074:	6922      	ldr	r2, [r4, #16]
 800b076:	bf0c      	ite	eq
 800b078:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b07c:	2500      	movne	r5, #0
 800b07e:	4293      	cmp	r3, r2
 800b080:	bfc4      	itt	gt
 800b082:	1a9b      	subgt	r3, r3, r2
 800b084:	18ed      	addgt	r5, r5, r3
 800b086:	2600      	movs	r6, #0
 800b088:	341a      	adds	r4, #26
 800b08a:	42b5      	cmp	r5, r6
 800b08c:	d11a      	bne.n	800b0c4 <_printf_common+0xc8>
 800b08e:	2000      	movs	r0, #0
 800b090:	e008      	b.n	800b0a4 <_printf_common+0xa8>
 800b092:	2301      	movs	r3, #1
 800b094:	4652      	mov	r2, sl
 800b096:	4649      	mov	r1, r9
 800b098:	4638      	mov	r0, r7
 800b09a:	47c0      	blx	r8
 800b09c:	3001      	adds	r0, #1
 800b09e:	d103      	bne.n	800b0a8 <_printf_common+0xac>
 800b0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0a8:	3501      	adds	r5, #1
 800b0aa:	e7c6      	b.n	800b03a <_printf_common+0x3e>
 800b0ac:	18e1      	adds	r1, r4, r3
 800b0ae:	1c5a      	adds	r2, r3, #1
 800b0b0:	2030      	movs	r0, #48	; 0x30
 800b0b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0b6:	4422      	add	r2, r4
 800b0b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b0bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b0c0:	3302      	adds	r3, #2
 800b0c2:	e7c7      	b.n	800b054 <_printf_common+0x58>
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	4622      	mov	r2, r4
 800b0c8:	4649      	mov	r1, r9
 800b0ca:	4638      	mov	r0, r7
 800b0cc:	47c0      	blx	r8
 800b0ce:	3001      	adds	r0, #1
 800b0d0:	d0e6      	beq.n	800b0a0 <_printf_common+0xa4>
 800b0d2:	3601      	adds	r6, #1
 800b0d4:	e7d9      	b.n	800b08a <_printf_common+0x8e>
	...

0800b0d8 <_printf_i>:
 800b0d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0dc:	7e0f      	ldrb	r7, [r1, #24]
 800b0de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b0e0:	2f78      	cmp	r7, #120	; 0x78
 800b0e2:	4691      	mov	r9, r2
 800b0e4:	4680      	mov	r8, r0
 800b0e6:	460c      	mov	r4, r1
 800b0e8:	469a      	mov	sl, r3
 800b0ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b0ee:	d807      	bhi.n	800b100 <_printf_i+0x28>
 800b0f0:	2f62      	cmp	r7, #98	; 0x62
 800b0f2:	d80a      	bhi.n	800b10a <_printf_i+0x32>
 800b0f4:	2f00      	cmp	r7, #0
 800b0f6:	f000 80d8 	beq.w	800b2aa <_printf_i+0x1d2>
 800b0fa:	2f58      	cmp	r7, #88	; 0x58
 800b0fc:	f000 80a3 	beq.w	800b246 <_printf_i+0x16e>
 800b100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b104:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b108:	e03a      	b.n	800b180 <_printf_i+0xa8>
 800b10a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b10e:	2b15      	cmp	r3, #21
 800b110:	d8f6      	bhi.n	800b100 <_printf_i+0x28>
 800b112:	a101      	add	r1, pc, #4	; (adr r1, 800b118 <_printf_i+0x40>)
 800b114:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b118:	0800b171 	.word	0x0800b171
 800b11c:	0800b185 	.word	0x0800b185
 800b120:	0800b101 	.word	0x0800b101
 800b124:	0800b101 	.word	0x0800b101
 800b128:	0800b101 	.word	0x0800b101
 800b12c:	0800b101 	.word	0x0800b101
 800b130:	0800b185 	.word	0x0800b185
 800b134:	0800b101 	.word	0x0800b101
 800b138:	0800b101 	.word	0x0800b101
 800b13c:	0800b101 	.word	0x0800b101
 800b140:	0800b101 	.word	0x0800b101
 800b144:	0800b291 	.word	0x0800b291
 800b148:	0800b1b5 	.word	0x0800b1b5
 800b14c:	0800b273 	.word	0x0800b273
 800b150:	0800b101 	.word	0x0800b101
 800b154:	0800b101 	.word	0x0800b101
 800b158:	0800b2b3 	.word	0x0800b2b3
 800b15c:	0800b101 	.word	0x0800b101
 800b160:	0800b1b5 	.word	0x0800b1b5
 800b164:	0800b101 	.word	0x0800b101
 800b168:	0800b101 	.word	0x0800b101
 800b16c:	0800b27b 	.word	0x0800b27b
 800b170:	682b      	ldr	r3, [r5, #0]
 800b172:	1d1a      	adds	r2, r3, #4
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	602a      	str	r2, [r5, #0]
 800b178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b17c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b180:	2301      	movs	r3, #1
 800b182:	e0a3      	b.n	800b2cc <_printf_i+0x1f4>
 800b184:	6820      	ldr	r0, [r4, #0]
 800b186:	6829      	ldr	r1, [r5, #0]
 800b188:	0606      	lsls	r6, r0, #24
 800b18a:	f101 0304 	add.w	r3, r1, #4
 800b18e:	d50a      	bpl.n	800b1a6 <_printf_i+0xce>
 800b190:	680e      	ldr	r6, [r1, #0]
 800b192:	602b      	str	r3, [r5, #0]
 800b194:	2e00      	cmp	r6, #0
 800b196:	da03      	bge.n	800b1a0 <_printf_i+0xc8>
 800b198:	232d      	movs	r3, #45	; 0x2d
 800b19a:	4276      	negs	r6, r6
 800b19c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1a0:	485e      	ldr	r0, [pc, #376]	; (800b31c <_printf_i+0x244>)
 800b1a2:	230a      	movs	r3, #10
 800b1a4:	e019      	b.n	800b1da <_printf_i+0x102>
 800b1a6:	680e      	ldr	r6, [r1, #0]
 800b1a8:	602b      	str	r3, [r5, #0]
 800b1aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b1ae:	bf18      	it	ne
 800b1b0:	b236      	sxthne	r6, r6
 800b1b2:	e7ef      	b.n	800b194 <_printf_i+0xbc>
 800b1b4:	682b      	ldr	r3, [r5, #0]
 800b1b6:	6820      	ldr	r0, [r4, #0]
 800b1b8:	1d19      	adds	r1, r3, #4
 800b1ba:	6029      	str	r1, [r5, #0]
 800b1bc:	0601      	lsls	r1, r0, #24
 800b1be:	d501      	bpl.n	800b1c4 <_printf_i+0xec>
 800b1c0:	681e      	ldr	r6, [r3, #0]
 800b1c2:	e002      	b.n	800b1ca <_printf_i+0xf2>
 800b1c4:	0646      	lsls	r6, r0, #25
 800b1c6:	d5fb      	bpl.n	800b1c0 <_printf_i+0xe8>
 800b1c8:	881e      	ldrh	r6, [r3, #0]
 800b1ca:	4854      	ldr	r0, [pc, #336]	; (800b31c <_printf_i+0x244>)
 800b1cc:	2f6f      	cmp	r7, #111	; 0x6f
 800b1ce:	bf0c      	ite	eq
 800b1d0:	2308      	moveq	r3, #8
 800b1d2:	230a      	movne	r3, #10
 800b1d4:	2100      	movs	r1, #0
 800b1d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b1da:	6865      	ldr	r5, [r4, #4]
 800b1dc:	60a5      	str	r5, [r4, #8]
 800b1de:	2d00      	cmp	r5, #0
 800b1e0:	bfa2      	ittt	ge
 800b1e2:	6821      	ldrge	r1, [r4, #0]
 800b1e4:	f021 0104 	bicge.w	r1, r1, #4
 800b1e8:	6021      	strge	r1, [r4, #0]
 800b1ea:	b90e      	cbnz	r6, 800b1f0 <_printf_i+0x118>
 800b1ec:	2d00      	cmp	r5, #0
 800b1ee:	d04d      	beq.n	800b28c <_printf_i+0x1b4>
 800b1f0:	4615      	mov	r5, r2
 800b1f2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b1f6:	fb03 6711 	mls	r7, r3, r1, r6
 800b1fa:	5dc7      	ldrb	r7, [r0, r7]
 800b1fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b200:	4637      	mov	r7, r6
 800b202:	42bb      	cmp	r3, r7
 800b204:	460e      	mov	r6, r1
 800b206:	d9f4      	bls.n	800b1f2 <_printf_i+0x11a>
 800b208:	2b08      	cmp	r3, #8
 800b20a:	d10b      	bne.n	800b224 <_printf_i+0x14c>
 800b20c:	6823      	ldr	r3, [r4, #0]
 800b20e:	07de      	lsls	r6, r3, #31
 800b210:	d508      	bpl.n	800b224 <_printf_i+0x14c>
 800b212:	6923      	ldr	r3, [r4, #16]
 800b214:	6861      	ldr	r1, [r4, #4]
 800b216:	4299      	cmp	r1, r3
 800b218:	bfde      	ittt	le
 800b21a:	2330      	movle	r3, #48	; 0x30
 800b21c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b220:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b224:	1b52      	subs	r2, r2, r5
 800b226:	6122      	str	r2, [r4, #16]
 800b228:	f8cd a000 	str.w	sl, [sp]
 800b22c:	464b      	mov	r3, r9
 800b22e:	aa03      	add	r2, sp, #12
 800b230:	4621      	mov	r1, r4
 800b232:	4640      	mov	r0, r8
 800b234:	f7ff fee2 	bl	800affc <_printf_common>
 800b238:	3001      	adds	r0, #1
 800b23a:	d14c      	bne.n	800b2d6 <_printf_i+0x1fe>
 800b23c:	f04f 30ff 	mov.w	r0, #4294967295
 800b240:	b004      	add	sp, #16
 800b242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b246:	4835      	ldr	r0, [pc, #212]	; (800b31c <_printf_i+0x244>)
 800b248:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b24c:	6829      	ldr	r1, [r5, #0]
 800b24e:	6823      	ldr	r3, [r4, #0]
 800b250:	f851 6b04 	ldr.w	r6, [r1], #4
 800b254:	6029      	str	r1, [r5, #0]
 800b256:	061d      	lsls	r5, r3, #24
 800b258:	d514      	bpl.n	800b284 <_printf_i+0x1ac>
 800b25a:	07df      	lsls	r7, r3, #31
 800b25c:	bf44      	itt	mi
 800b25e:	f043 0320 	orrmi.w	r3, r3, #32
 800b262:	6023      	strmi	r3, [r4, #0]
 800b264:	b91e      	cbnz	r6, 800b26e <_printf_i+0x196>
 800b266:	6823      	ldr	r3, [r4, #0]
 800b268:	f023 0320 	bic.w	r3, r3, #32
 800b26c:	6023      	str	r3, [r4, #0]
 800b26e:	2310      	movs	r3, #16
 800b270:	e7b0      	b.n	800b1d4 <_printf_i+0xfc>
 800b272:	6823      	ldr	r3, [r4, #0]
 800b274:	f043 0320 	orr.w	r3, r3, #32
 800b278:	6023      	str	r3, [r4, #0]
 800b27a:	2378      	movs	r3, #120	; 0x78
 800b27c:	4828      	ldr	r0, [pc, #160]	; (800b320 <_printf_i+0x248>)
 800b27e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b282:	e7e3      	b.n	800b24c <_printf_i+0x174>
 800b284:	0659      	lsls	r1, r3, #25
 800b286:	bf48      	it	mi
 800b288:	b2b6      	uxthmi	r6, r6
 800b28a:	e7e6      	b.n	800b25a <_printf_i+0x182>
 800b28c:	4615      	mov	r5, r2
 800b28e:	e7bb      	b.n	800b208 <_printf_i+0x130>
 800b290:	682b      	ldr	r3, [r5, #0]
 800b292:	6826      	ldr	r6, [r4, #0]
 800b294:	6961      	ldr	r1, [r4, #20]
 800b296:	1d18      	adds	r0, r3, #4
 800b298:	6028      	str	r0, [r5, #0]
 800b29a:	0635      	lsls	r5, r6, #24
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	d501      	bpl.n	800b2a4 <_printf_i+0x1cc>
 800b2a0:	6019      	str	r1, [r3, #0]
 800b2a2:	e002      	b.n	800b2aa <_printf_i+0x1d2>
 800b2a4:	0670      	lsls	r0, r6, #25
 800b2a6:	d5fb      	bpl.n	800b2a0 <_printf_i+0x1c8>
 800b2a8:	8019      	strh	r1, [r3, #0]
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	6123      	str	r3, [r4, #16]
 800b2ae:	4615      	mov	r5, r2
 800b2b0:	e7ba      	b.n	800b228 <_printf_i+0x150>
 800b2b2:	682b      	ldr	r3, [r5, #0]
 800b2b4:	1d1a      	adds	r2, r3, #4
 800b2b6:	602a      	str	r2, [r5, #0]
 800b2b8:	681d      	ldr	r5, [r3, #0]
 800b2ba:	6862      	ldr	r2, [r4, #4]
 800b2bc:	2100      	movs	r1, #0
 800b2be:	4628      	mov	r0, r5
 800b2c0:	f7f4 ffbe 	bl	8000240 <memchr>
 800b2c4:	b108      	cbz	r0, 800b2ca <_printf_i+0x1f2>
 800b2c6:	1b40      	subs	r0, r0, r5
 800b2c8:	6060      	str	r0, [r4, #4]
 800b2ca:	6863      	ldr	r3, [r4, #4]
 800b2cc:	6123      	str	r3, [r4, #16]
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2d4:	e7a8      	b.n	800b228 <_printf_i+0x150>
 800b2d6:	6923      	ldr	r3, [r4, #16]
 800b2d8:	462a      	mov	r2, r5
 800b2da:	4649      	mov	r1, r9
 800b2dc:	4640      	mov	r0, r8
 800b2de:	47d0      	blx	sl
 800b2e0:	3001      	adds	r0, #1
 800b2e2:	d0ab      	beq.n	800b23c <_printf_i+0x164>
 800b2e4:	6823      	ldr	r3, [r4, #0]
 800b2e6:	079b      	lsls	r3, r3, #30
 800b2e8:	d413      	bmi.n	800b312 <_printf_i+0x23a>
 800b2ea:	68e0      	ldr	r0, [r4, #12]
 800b2ec:	9b03      	ldr	r3, [sp, #12]
 800b2ee:	4298      	cmp	r0, r3
 800b2f0:	bfb8      	it	lt
 800b2f2:	4618      	movlt	r0, r3
 800b2f4:	e7a4      	b.n	800b240 <_printf_i+0x168>
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	4632      	mov	r2, r6
 800b2fa:	4649      	mov	r1, r9
 800b2fc:	4640      	mov	r0, r8
 800b2fe:	47d0      	blx	sl
 800b300:	3001      	adds	r0, #1
 800b302:	d09b      	beq.n	800b23c <_printf_i+0x164>
 800b304:	3501      	adds	r5, #1
 800b306:	68e3      	ldr	r3, [r4, #12]
 800b308:	9903      	ldr	r1, [sp, #12]
 800b30a:	1a5b      	subs	r3, r3, r1
 800b30c:	42ab      	cmp	r3, r5
 800b30e:	dcf2      	bgt.n	800b2f6 <_printf_i+0x21e>
 800b310:	e7eb      	b.n	800b2ea <_printf_i+0x212>
 800b312:	2500      	movs	r5, #0
 800b314:	f104 0619 	add.w	r6, r4, #25
 800b318:	e7f5      	b.n	800b306 <_printf_i+0x22e>
 800b31a:	bf00      	nop
 800b31c:	0800b775 	.word	0x0800b775
 800b320:	0800b786 	.word	0x0800b786

0800b324 <_sbrk_r>:
 800b324:	b538      	push	{r3, r4, r5, lr}
 800b326:	4d06      	ldr	r5, [pc, #24]	; (800b340 <_sbrk_r+0x1c>)
 800b328:	2300      	movs	r3, #0
 800b32a:	4604      	mov	r4, r0
 800b32c:	4608      	mov	r0, r1
 800b32e:	602b      	str	r3, [r5, #0]
 800b330:	f7f6 ffe6 	bl	8002300 <_sbrk>
 800b334:	1c43      	adds	r3, r0, #1
 800b336:	d102      	bne.n	800b33e <_sbrk_r+0x1a>
 800b338:	682b      	ldr	r3, [r5, #0]
 800b33a:	b103      	cbz	r3, 800b33e <_sbrk_r+0x1a>
 800b33c:	6023      	str	r3, [r4, #0]
 800b33e:	bd38      	pop	{r3, r4, r5, pc}
 800b340:	20008ed0 	.word	0x20008ed0

0800b344 <__sread>:
 800b344:	b510      	push	{r4, lr}
 800b346:	460c      	mov	r4, r1
 800b348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b34c:	f000 f8a0 	bl	800b490 <_read_r>
 800b350:	2800      	cmp	r0, #0
 800b352:	bfab      	itete	ge
 800b354:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b356:	89a3      	ldrhlt	r3, [r4, #12]
 800b358:	181b      	addge	r3, r3, r0
 800b35a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b35e:	bfac      	ite	ge
 800b360:	6563      	strge	r3, [r4, #84]	; 0x54
 800b362:	81a3      	strhlt	r3, [r4, #12]
 800b364:	bd10      	pop	{r4, pc}

0800b366 <__swrite>:
 800b366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b36a:	461f      	mov	r7, r3
 800b36c:	898b      	ldrh	r3, [r1, #12]
 800b36e:	05db      	lsls	r3, r3, #23
 800b370:	4605      	mov	r5, r0
 800b372:	460c      	mov	r4, r1
 800b374:	4616      	mov	r6, r2
 800b376:	d505      	bpl.n	800b384 <__swrite+0x1e>
 800b378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b37c:	2302      	movs	r3, #2
 800b37e:	2200      	movs	r2, #0
 800b380:	f000 f868 	bl	800b454 <_lseek_r>
 800b384:	89a3      	ldrh	r3, [r4, #12]
 800b386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b38a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b38e:	81a3      	strh	r3, [r4, #12]
 800b390:	4632      	mov	r2, r6
 800b392:	463b      	mov	r3, r7
 800b394:	4628      	mov	r0, r5
 800b396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b39a:	f000 b817 	b.w	800b3cc <_write_r>

0800b39e <__sseek>:
 800b39e:	b510      	push	{r4, lr}
 800b3a0:	460c      	mov	r4, r1
 800b3a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3a6:	f000 f855 	bl	800b454 <_lseek_r>
 800b3aa:	1c43      	adds	r3, r0, #1
 800b3ac:	89a3      	ldrh	r3, [r4, #12]
 800b3ae:	bf15      	itete	ne
 800b3b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3ba:	81a3      	strheq	r3, [r4, #12]
 800b3bc:	bf18      	it	ne
 800b3be:	81a3      	strhne	r3, [r4, #12]
 800b3c0:	bd10      	pop	{r4, pc}

0800b3c2 <__sclose>:
 800b3c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3c6:	f000 b813 	b.w	800b3f0 <_close_r>
	...

0800b3cc <_write_r>:
 800b3cc:	b538      	push	{r3, r4, r5, lr}
 800b3ce:	4d07      	ldr	r5, [pc, #28]	; (800b3ec <_write_r+0x20>)
 800b3d0:	4604      	mov	r4, r0
 800b3d2:	4608      	mov	r0, r1
 800b3d4:	4611      	mov	r1, r2
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	602a      	str	r2, [r5, #0]
 800b3da:	461a      	mov	r2, r3
 800b3dc:	f7f6 ff3f 	bl	800225e <_write>
 800b3e0:	1c43      	adds	r3, r0, #1
 800b3e2:	d102      	bne.n	800b3ea <_write_r+0x1e>
 800b3e4:	682b      	ldr	r3, [r5, #0]
 800b3e6:	b103      	cbz	r3, 800b3ea <_write_r+0x1e>
 800b3e8:	6023      	str	r3, [r4, #0]
 800b3ea:	bd38      	pop	{r3, r4, r5, pc}
 800b3ec:	20008ed0 	.word	0x20008ed0

0800b3f0 <_close_r>:
 800b3f0:	b538      	push	{r3, r4, r5, lr}
 800b3f2:	4d06      	ldr	r5, [pc, #24]	; (800b40c <_close_r+0x1c>)
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	4604      	mov	r4, r0
 800b3f8:	4608      	mov	r0, r1
 800b3fa:	602b      	str	r3, [r5, #0]
 800b3fc:	f7f6 ff4b 	bl	8002296 <_close>
 800b400:	1c43      	adds	r3, r0, #1
 800b402:	d102      	bne.n	800b40a <_close_r+0x1a>
 800b404:	682b      	ldr	r3, [r5, #0]
 800b406:	b103      	cbz	r3, 800b40a <_close_r+0x1a>
 800b408:	6023      	str	r3, [r4, #0]
 800b40a:	bd38      	pop	{r3, r4, r5, pc}
 800b40c:	20008ed0 	.word	0x20008ed0

0800b410 <_fstat_r>:
 800b410:	b538      	push	{r3, r4, r5, lr}
 800b412:	4d07      	ldr	r5, [pc, #28]	; (800b430 <_fstat_r+0x20>)
 800b414:	2300      	movs	r3, #0
 800b416:	4604      	mov	r4, r0
 800b418:	4608      	mov	r0, r1
 800b41a:	4611      	mov	r1, r2
 800b41c:	602b      	str	r3, [r5, #0]
 800b41e:	f7f6 ff46 	bl	80022ae <_fstat>
 800b422:	1c43      	adds	r3, r0, #1
 800b424:	d102      	bne.n	800b42c <_fstat_r+0x1c>
 800b426:	682b      	ldr	r3, [r5, #0]
 800b428:	b103      	cbz	r3, 800b42c <_fstat_r+0x1c>
 800b42a:	6023      	str	r3, [r4, #0]
 800b42c:	bd38      	pop	{r3, r4, r5, pc}
 800b42e:	bf00      	nop
 800b430:	20008ed0 	.word	0x20008ed0

0800b434 <_isatty_r>:
 800b434:	b538      	push	{r3, r4, r5, lr}
 800b436:	4d06      	ldr	r5, [pc, #24]	; (800b450 <_isatty_r+0x1c>)
 800b438:	2300      	movs	r3, #0
 800b43a:	4604      	mov	r4, r0
 800b43c:	4608      	mov	r0, r1
 800b43e:	602b      	str	r3, [r5, #0]
 800b440:	f7f6 ff45 	bl	80022ce <_isatty>
 800b444:	1c43      	adds	r3, r0, #1
 800b446:	d102      	bne.n	800b44e <_isatty_r+0x1a>
 800b448:	682b      	ldr	r3, [r5, #0]
 800b44a:	b103      	cbz	r3, 800b44e <_isatty_r+0x1a>
 800b44c:	6023      	str	r3, [r4, #0]
 800b44e:	bd38      	pop	{r3, r4, r5, pc}
 800b450:	20008ed0 	.word	0x20008ed0

0800b454 <_lseek_r>:
 800b454:	b538      	push	{r3, r4, r5, lr}
 800b456:	4d07      	ldr	r5, [pc, #28]	; (800b474 <_lseek_r+0x20>)
 800b458:	4604      	mov	r4, r0
 800b45a:	4608      	mov	r0, r1
 800b45c:	4611      	mov	r1, r2
 800b45e:	2200      	movs	r2, #0
 800b460:	602a      	str	r2, [r5, #0]
 800b462:	461a      	mov	r2, r3
 800b464:	f7f6 ff3e 	bl	80022e4 <_lseek>
 800b468:	1c43      	adds	r3, r0, #1
 800b46a:	d102      	bne.n	800b472 <_lseek_r+0x1e>
 800b46c:	682b      	ldr	r3, [r5, #0]
 800b46e:	b103      	cbz	r3, 800b472 <_lseek_r+0x1e>
 800b470:	6023      	str	r3, [r4, #0]
 800b472:	bd38      	pop	{r3, r4, r5, pc}
 800b474:	20008ed0 	.word	0x20008ed0

0800b478 <__malloc_lock>:
 800b478:	4801      	ldr	r0, [pc, #4]	; (800b480 <__malloc_lock+0x8>)
 800b47a:	f7ff bb1d 	b.w	800aab8 <__retarget_lock_acquire_recursive>
 800b47e:	bf00      	nop
 800b480:	20008ec4 	.word	0x20008ec4

0800b484 <__malloc_unlock>:
 800b484:	4801      	ldr	r0, [pc, #4]	; (800b48c <__malloc_unlock+0x8>)
 800b486:	f7ff bb18 	b.w	800aaba <__retarget_lock_release_recursive>
 800b48a:	bf00      	nop
 800b48c:	20008ec4 	.word	0x20008ec4

0800b490 <_read_r>:
 800b490:	b538      	push	{r3, r4, r5, lr}
 800b492:	4d07      	ldr	r5, [pc, #28]	; (800b4b0 <_read_r+0x20>)
 800b494:	4604      	mov	r4, r0
 800b496:	4608      	mov	r0, r1
 800b498:	4611      	mov	r1, r2
 800b49a:	2200      	movs	r2, #0
 800b49c:	602a      	str	r2, [r5, #0]
 800b49e:	461a      	mov	r2, r3
 800b4a0:	f7f6 fec0 	bl	8002224 <_read>
 800b4a4:	1c43      	adds	r3, r0, #1
 800b4a6:	d102      	bne.n	800b4ae <_read_r+0x1e>
 800b4a8:	682b      	ldr	r3, [r5, #0]
 800b4aa:	b103      	cbz	r3, 800b4ae <_read_r+0x1e>
 800b4ac:	6023      	str	r3, [r4, #0]
 800b4ae:	bd38      	pop	{r3, r4, r5, pc}
 800b4b0:	20008ed0 	.word	0x20008ed0

0800b4b4 <_init>:
 800b4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4b6:	bf00      	nop
 800b4b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4ba:	bc08      	pop	{r3}
 800b4bc:	469e      	mov	lr, r3
 800b4be:	4770      	bx	lr

0800b4c0 <_fini>:
 800b4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c2:	bf00      	nop
 800b4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4c6:	bc08      	pop	{r3}
 800b4c8:	469e      	mov	lr, r3
 800b4ca:	4770      	bx	lr
