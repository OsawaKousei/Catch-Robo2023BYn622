
Catch-Robo2023BYn622.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000181e0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f98  080183e0  080183e0  000283e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b378  0801b378  000301d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801b378  0801b378  0002b378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b380  0801b380  000301d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b380  0801b380  0002b380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b384  0801b384  0002b384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0801b388  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000094  0801b41c  00030094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000134  0801b4bc  00030134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00011000  200001d4  0801b55c  000301d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200111d4  0801b55c  000311d4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003a9dd  00000000  00000000  00030202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008490  00000000  00000000  0006abdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002a58  00000000  00000000  00073070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000028a0  00000000  00000000  00075ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000370d4  00000000  00000000  00078368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00041de8  00000000  00000000  000af43c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001275d3  00000000  00000000  000f1224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  002187f7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000b9ac  00000000  00000000  00218848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	080183c8 	.word	0x080183c8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	080183c8 	.word	0x080183c8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <PushTx8Bytes>:
CANTxBuf buffer[CAN_TXBUFFER_SIZE];
uint32_t readpoint = 0;
uint32_t writepoint = 0;
uint8_t isfull = 0;

HAL_StatusTypeDef PushTx8Bytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){
 80005e4:	b480      	push	{r7}
 80005e6:	b087      	sub	sp, #28
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
	buffer[writepoint].DLC = size;
 80005f0:	4b24      	ldr	r3, [pc, #144]	; (8000684 <PushTx8Bytes+0xa0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a24      	ldr	r2, [pc, #144]	; (8000688 <PushTx8Bytes+0xa4>)
 80005f6:	011b      	lsls	r3, r3, #4
 80005f8:	4413      	add	r3, r2
 80005fa:	3304      	adds	r3, #4
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	601a      	str	r2, [r3, #0]
	buffer[writepoint].ExtId = ExtId;
 8000600:	4b20      	ldr	r3, [pc, #128]	; (8000684 <PushTx8Bytes+0xa0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a20      	ldr	r2, [pc, #128]	; (8000688 <PushTx8Bytes+0xa4>)
 8000606:	011b      	lsls	r3, r3, #4
 8000608:	4413      	add	r3, r2
 800060a:	68fa      	ldr	r2, [r7, #12]
 800060c:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++)buffer[writepoint].bytes[i] = bytes[i];
 800060e:	2300      	movs	r3, #0
 8000610:	75fb      	strb	r3, [r7, #23]
 8000612:	e010      	b.n	8000636 <PushTx8Bytes+0x52>
 8000614:	7dfb      	ldrb	r3, [r7, #23]
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	18d1      	adds	r1, r2, r3
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <PushTx8Bytes+0xa0>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	7dfb      	ldrb	r3, [r7, #23]
 8000620:	7808      	ldrb	r0, [r1, #0]
 8000622:	4919      	ldr	r1, [pc, #100]	; (8000688 <PushTx8Bytes+0xa4>)
 8000624:	0112      	lsls	r2, r2, #4
 8000626:	440a      	add	r2, r1
 8000628:	4413      	add	r3, r2
 800062a:	3308      	adds	r3, #8
 800062c:	4602      	mov	r2, r0
 800062e:	701a      	strb	r2, [r3, #0]
 8000630:	7dfb      	ldrb	r3, [r7, #23]
 8000632:	3301      	adds	r3, #1
 8000634:	75fb      	strb	r3, [r7, #23]
 8000636:	7dfb      	ldrb	r3, [r7, #23]
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	429a      	cmp	r2, r3
 800063c:	d8ea      	bhi.n	8000614 <PushTx8Bytes+0x30>

	if (isfull == 1)readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <PushTx8Bytes+0xa8>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d106      	bne.n	8000654 <PushTx8Bytes+0x70>
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <PushTx8Bytes+0xac>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	3301      	adds	r3, #1
 800064c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000650:	4a0f      	ldr	r2, [pc, #60]	; (8000690 <PushTx8Bytes+0xac>)
 8000652:	6013      	str	r3, [r2, #0]
	writepoint = (writepoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000654:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <PushTx8Bytes+0xa0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	3301      	adds	r3, #1
 800065a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800065e:	4a09      	ldr	r2, [pc, #36]	; (8000684 <PushTx8Bytes+0xa0>)
 8000660:	6013      	str	r3, [r2, #0]

	if (writepoint == readpoint){
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <PushTx8Bytes+0xa0>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <PushTx8Bytes+0xac>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	429a      	cmp	r2, r3
 800066c:	d102      	bne.n	8000674 <PushTx8Bytes+0x90>
		isfull = 1;
 800066e:	4b07      	ldr	r3, [pc, #28]	; (800068c <PushTx8Bytes+0xa8>)
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]
	}

	return HAL_OK;
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	371c      	adds	r7, #28
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	200024c8 	.word	0x200024c8
 8000688:	200004c4 	.word	0x200004c4
 800068c:	200024cc 	.word	0x200024cc
 8000690:	200024c4 	.word	0x200024c4

08000694 <PopSendTx8Bytes>:

HAL_StatusTypeDef PopSendTx8Bytes(){
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;

	txHeader.RTR = CAN_RTR_DATA; // Data frame
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
	txHeader.IDE = CAN_ID_EXT;	 // CAN Extend ID
 800069e:	2304      	movs	r3, #4
 80006a0:	60fb      	str	r3, [r7, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	763b      	strb	r3, [r7, #24]

	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 80006a6:	e035      	b.n	8000714 <PopSendTx8Bytes+0x80>
		if (isfull == 0 && readpoint == writepoint)break;
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <PopSendTx8Bytes+0xa0>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d105      	bne.n	80006bc <PopSendTx8Bytes+0x28>
 80006b0:	4b21      	ldr	r3, [pc, #132]	; (8000738 <PopSendTx8Bytes+0xa4>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b21      	ldr	r3, [pc, #132]	; (800073c <PopSendTx8Bytes+0xa8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d034      	beq.n	8000726 <PopSendTx8Bytes+0x92>

		txHeader.DLC = buffer[readpoint].DLC;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <PopSendTx8Bytes+0xa4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a1f      	ldr	r2, [pc, #124]	; (8000740 <PopSendTx8Bytes+0xac>)
 80006c2:	011b      	lsls	r3, r3, #4
 80006c4:	4413      	add	r3, r2
 80006c6:	3304      	adds	r3, #4
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	617b      	str	r3, [r7, #20]
		txHeader.ExtId = buffer[readpoint].ExtId;
 80006cc:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <PopSendTx8Bytes+0xa4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a1b      	ldr	r2, [pc, #108]	; (8000740 <PopSendTx8Bytes+0xac>)
 80006d2:	011b      	lsls	r3, r3, #4
 80006d4:	4413      	add	r3, r2
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	60bb      	str	r3, [r7, #8]

		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, buffer[readpoint].bytes, &txMailbox);
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <PopSendTx8Bytes+0xb0>)
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	4b16      	ldr	r3, [pc, #88]	; (8000738 <PopSendTx8Bytes+0xa4>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	011b      	lsls	r3, r3, #4
 80006e4:	3308      	adds	r3, #8
 80006e6:	4a16      	ldr	r2, [pc, #88]	; (8000740 <PopSendTx8Bytes+0xac>)
 80006e8:	441a      	add	r2, r3
 80006ea:	463b      	mov	r3, r7
 80006ec:	1d39      	adds	r1, r7, #4
 80006ee:	f002 f96f 	bl	80029d0 <HAL_CAN_AddTxMessage>
 80006f2:	4603      	mov	r3, r0
 80006f4:	77fb      	strb	r3, [r7, #31]
		if (ret != HAL_OK)return ret;
 80006f6:	7ffb      	ldrb	r3, [r7, #31]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <PopSendTx8Bytes+0x6c>
 80006fc:	7ffb      	ldrb	r3, [r7, #31]
 80006fe:	e014      	b.n	800072a <PopSendTx8Bytes+0x96>

		readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000700:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <PopSendTx8Bytes+0xa4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	3301      	adds	r3, #1
 8000706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800070a:	4a0b      	ldr	r2, [pc, #44]	; (8000738 <PopSendTx8Bytes+0xa4>)
 800070c:	6013      	str	r3, [r2, #0]
		isfull = 0;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <PopSendTx8Bytes+0xa0>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <PopSendTx8Bytes+0xb0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f002 fa29 	bl	8002b70 <HAL_CAN_GetTxMailboxesFreeLevel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d1c1      	bne.n	80006a8 <PopSendTx8Bytes+0x14>
 8000724:	e000      	b.n	8000728 <PopSendTx8Bytes+0x94>
		if (isfull == 0 && readpoint == writepoint)break;
 8000726:	bf00      	nop
	}

	return HAL_OK;
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	3720      	adds	r7, #32
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200024cc 	.word	0x200024cc
 8000738:	200024c4 	.word	0x200024c4
 800073c:	200024c8 	.word	0x200024c8
 8000740:	200004c4 	.word	0x200004c4
 8000744:	200001f0 	.word	0x200001f0

08000748 <WhenTxMailbox0_1_2CompleteCallbackCalled>:

void WhenTxMailbox0_1_2CompleteCallbackCalled(){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 800074c:	f7ff ffa2 	bl	8000694 <PopSendTx8Bytes>
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}

08000754 <WhenTxMailbox0_1_2AbortCallbackCalled>:

void WhenTxMailbox0_1_2AbortCallbackCalled(){
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 8000758:	f7ff ff9c 	bl	8000694 <PopSendTx8Bytes>
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <WhenCANRxFifo0MsgPending>:

void WhenCANRxFifo0MsgPending(CAN_HandleTypeDef *phcan, NUM_OF_DEVICES *num_of){ // Fifo0MsgPendingで呼び出すこと. CAN受信時に呼び出される関数
 8000760:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000764:	b08e      	sub	sp, #56	; 0x38
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
 800076a:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_CAN_GetRxMessage(phcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK){
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	f107 0218 	add.w	r2, r7, #24
 8000774:	2100      	movs	r1, #0
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f002 fa2f 	bl	8002bda <HAL_CAN_GetRxMessage>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d004      	beq.n	800078c <WhenCANRxFifo0MsgPending+0x2c>
		// Reception Error
		printf("GetRxMessage error\n\r");
 8000782:	486e      	ldr	r0, [pc, #440]	; (800093c <WhenCANRxFifo0MsgPending+0x1dc>)
 8000784:	f016 fd5a 	bl	801723c <iprintf>
		Error_Handler();
 8000788:	f001 f9ca 	bl	8001b20 <Error_Handler>
	}
	// awakeコマンドを受信した場合
	CAN_Device can_device = Extract_CAN_Device(rxHeader.ExtId);
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	2200      	movs	r2, #0
 8000790:	4698      	mov	r8, r3
 8000792:	4691      	mov	r9, r2
 8000794:	4640      	mov	r0, r8
 8000796:	4649      	mov	r1, r9
 8000798:	f000 fe04 	bl	80013a4 <Extract_CAN_Device>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	733a      	strb	r2, [r7, #12]
 80007a2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80007a6:	737a      	strb	r2, [r7, #13]
 80007a8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80007ac:	73bb      	strb	r3, [r7, #14]
	uint8_t extracted_cmd = Extract_CAN_CMD(rxHeader.ExtId);
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	2200      	movs	r2, #0
 80007b2:	461c      	mov	r4, r3
 80007b4:	4615      	mov	r5, r2
 80007b6:	4620      	mov	r0, r4
 80007b8:	4629      	mov	r1, r5
 80007ba:	f000 fe3f 	bl	800143c <Extract_CAN_CMD>
 80007be:	4603      	mov	r3, r0
 80007c0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(extracted_cmd == AWAKE_CMD){
 80007c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d139      	bne.n	8000840 <WhenCANRxFifo0MsgPending+0xe0>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 80007cc:	2300      	movs	r3, #0
 80007ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80007d2:	e013      	b.n	80007fc <WhenCANRxFifo0MsgPending+0x9c>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 80007d4:	7b3b      	ldrb	r3, [r7, #12]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80007dc:	4958      	ldr	r1, [pc, #352]	; (8000940 <WhenCANRxFifo0MsgPending+0x1e0>)
 80007de:	4603      	mov	r3, r0
 80007e0:	00db      	lsls	r3, r3, #3
 80007e2:	1a1b      	subs	r3, r3, r0
 80007e4:	440b      	add	r3, r1
 80007e6:	4413      	add	r3, r2
 80007e8:	781a      	ldrb	r2, [r3, #0]
 80007ea:	7c3b      	ldrb	r3, [r7, #16]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	f000 80a0 	beq.w	8000932 <WhenCANRxFifo0MsgPending+0x1d2>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 80007f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007f6:	3301      	adds	r3, #1
 80007f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80007fc:	7b3b      	ldrb	r3, [r7, #12]
 80007fe:	461a      	mov	r2, r3
 8000800:	4b50      	ldr	r3, [pc, #320]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000802:	5c9b      	ldrb	r3, [r3, r2]
 8000804:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000808:	429a      	cmp	r2, r3
 800080a:	d3e3      	bcc.n	80007d4 <WhenCANRxFifo0MsgPending+0x74>
		}
		node_id_list[can_device.node_type][num_detected[can_device.node_type]] = rxData[0];
 800080c:	7b3b      	ldrb	r3, [r7, #12]
 800080e:	4619      	mov	r1, r3
 8000810:	7b3b      	ldrb	r3, [r7, #12]
 8000812:	461a      	mov	r2, r3
 8000814:	4b4b      	ldr	r3, [pc, #300]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000816:	5c9b      	ldrb	r3, [r3, r2]
 8000818:	461c      	mov	r4, r3
 800081a:	7c38      	ldrb	r0, [r7, #16]
 800081c:	4a48      	ldr	r2, [pc, #288]	; (8000940 <WhenCANRxFifo0MsgPending+0x1e0>)
 800081e:	460b      	mov	r3, r1
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	1a5b      	subs	r3, r3, r1
 8000824:	4413      	add	r3, r2
 8000826:	4423      	add	r3, r4
 8000828:	4602      	mov	r2, r0
 800082a:	701a      	strb	r2, [r3, #0]
		num_detected[can_device.node_type] += 1;
 800082c:	7b3b      	ldrb	r3, [r7, #12]
 800082e:	461a      	mov	r2, r3
 8000830:	4b44      	ldr	r3, [pc, #272]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000832:	5c9b      	ldrb	r3, [r3, r2]
 8000834:	7b3a      	ldrb	r2, [r7, #12]
 8000836:	3301      	adds	r3, #1
 8000838:	b2d9      	uxtb	r1, r3
 800083a:	4b42      	ldr	r3, [pc, #264]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 800083c:	5499      	strb	r1, [r3, r2]
 800083e:	e04a      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
	}else if(extracted_cmd == FB_CMD){
 8000840:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000844:	2b01      	cmp	r3, #1
 8000846:	d146      	bne.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
		if (can_device.node_type == NODE_MCMD1){
 8000848:	7b3b      	ldrb	r3, [r7, #12]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d10d      	bne.n	800086a <WhenCANRxFifo0MsgPending+0x10a>
			memcpy(&(_feedback_table_mcmd1[can_device.node_id].feedback_motor[can_device.device_num]),
 800084e:	7b7b      	ldrb	r3, [r7, #13]
 8000850:	7bba      	ldrb	r2, [r7, #14]
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	4413      	add	r3, r2
 8000856:	00db      	lsls	r3, r3, #3
 8000858:	4a3b      	ldr	r2, [pc, #236]	; (8000948 <WhenCANRxFifo0MsgPending+0x1e8>)
 800085a:	4413      	add	r3, r2
 800085c:	461a      	mov	r2, r3
 800085e:	f107 0310 	add.w	r3, r7, #16
 8000862:	cb03      	ldmia	r3!, {r0, r1}
 8000864:	6010      	str	r0, [r2, #0]
 8000866:	6051      	str	r1, [r2, #4]
 8000868:	e035      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
                   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD2){
 800086a:	7b3b      	ldrb	r3, [r7, #12]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d10d      	bne.n	800088c <WhenCANRxFifo0MsgPending+0x12c>
			memcpy(&(_feedback_table_mcmd2[can_device.node_id].feedback_motor[can_device.device_num]),
 8000870:	7b7b      	ldrb	r3, [r7, #13]
 8000872:	7bba      	ldrb	r2, [r7, #14]
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	4413      	add	r3, r2
 8000878:	00db      	lsls	r3, r3, #3
 800087a:	4a34      	ldr	r2, [pc, #208]	; (800094c <WhenCANRxFifo0MsgPending+0x1ec>)
 800087c:	4413      	add	r3, r2
 800087e:	461a      	mov	r2, r3
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	cb03      	ldmia	r3!, {r0, r1}
 8000886:	6010      	str	r0, [r2, #0]
 8000888:	6051      	str	r1, [r2, #4]
 800088a:	e024      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD3){
 800088c:	7b3b      	ldrb	r3, [r7, #12]
 800088e:	2b03      	cmp	r3, #3
 8000890:	d10d      	bne.n	80008ae <WhenCANRxFifo0MsgPending+0x14e>
			memcpy(&(_feedback_table_mcmd3[can_device.node_id].feedback_motor[can_device.device_num]),
 8000892:	7b7b      	ldrb	r3, [r7, #13]
 8000894:	7bba      	ldrb	r2, [r7, #14]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	4413      	add	r3, r2
 800089a:	00db      	lsls	r3, r3, #3
 800089c:	4a2c      	ldr	r2, [pc, #176]	; (8000950 <WhenCANRxFifo0MsgPending+0x1f0>)
 800089e:	4413      	add	r3, r2
 80008a0:	461a      	mov	r2, r3
 80008a2:	f107 0310 	add.w	r3, r7, #16
 80008a6:	cb03      	ldmia	r3!, {r0, r1}
 80008a8:	6010      	str	r0, [r2, #0]
 80008aa:	6051      	str	r1, [r2, #4]
 80008ac:	e013      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD4){
 80008ae:	7b3b      	ldrb	r3, [r7, #12]
 80008b0:	2b06      	cmp	r3, #6
 80008b2:	d10d      	bne.n	80008d0 <WhenCANRxFifo0MsgPending+0x170>
			memcpy(&(_feedback_table_mcmd4[can_device.node_id].feedback_motor[can_device.device_num]),
 80008b4:	7b7b      	ldrb	r3, [r7, #13]
 80008b6:	7bba      	ldrb	r2, [r7, #14]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	4413      	add	r3, r2
 80008bc:	00db      	lsls	r3, r3, #3
 80008be:	4a25      	ldr	r2, [pc, #148]	; (8000954 <WhenCANRxFifo0MsgPending+0x1f4>)
 80008c0:	4413      	add	r3, r2
 80008c2:	461a      	mov	r2, r3
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	cb03      	ldmia	r3!, {r0, r1}
 80008ca:	6010      	str	r0, [r2, #0]
 80008cc:	6051      	str	r1, [r2, #4]
 80008ce:	e002      	b.n	80008d6 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else{
			printf("Error\n\r");
 80008d0:	4821      	ldr	r0, [pc, #132]	; (8000958 <WhenCANRxFifo0MsgPending+0x1f8>)
 80008d2:	f016 fcb3 	bl	801723c <iprintf>
		}
	}else{

    }
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 80008d6:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 80008d8:	785a      	ldrb	r2, [r3, #1]
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	429a      	cmp	r2, r3
 80008e0:	d128      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 80008e4:	789a      	ldrb	r2, [r3, #2]
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	785b      	ldrb	r3, [r3, #1]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d122      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 80008f0:	78da      	ldrb	r2, [r3, #3]
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	789b      	ldrb	r3, [r3, #2]
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d11c      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 80008fc:	791a      	ldrb	r2, [r3, #4]
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	78db      	ldrb	r3, [r3, #3]
 8000902:	429a      	cmp	r2, r3
 8000904:	d116      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000908:	795a      	ldrb	r2, [r3, #5]
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	791b      	ldrb	r3, [r3, #4]
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 800090e:	429a      	cmp	r2, r3
 8000910:	d110      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000914:	799a      	ldrb	r2, [r3, #6]
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	795b      	ldrb	r3, [r3, #5]
 800091a:	429a      	cmp	r2, r3
 800091c:	d10a      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000920:	7a1a      	ldrb	r2, [r3, #8]
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	799b      	ldrb	r3, [r3, #6]
 8000926:	429a      	cmp	r2, r3
 8000928:	d104      	bne.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
		all_node_detected = 1;
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <WhenCANRxFifo0MsgPending+0x1fc>)
 800092c:	2201      	movs	r2, #1
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	e000      	b.n	8000934 <WhenCANRxFifo0MsgPending+0x1d4>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000932:	bf00      	nop
	}
}
 8000934:	3738      	adds	r7, #56	; 0x38
 8000936:	46bd      	mov	sp, r7
 8000938:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800093c:	080183e0 	.word	0x080183e0
 8000940:	20000204 	.word	0x20000204
 8000944:	200001f8 	.word	0x200001f8
 8000948:	20000244 	.word	0x20000244
 800094c:	200002e4 	.word	0x200002e4
 8000950:	20000384 	.word	0x20000384
 8000954:	20000424 	.word	0x20000424
 8000958:	080183f8 	.word	0x080183f8
 800095c:	200001f4 	.word	0x200001f4

08000960 <SendBytes>:

HAL_StatusTypeDef SendBytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){ // 命令を送信する関数
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
	uint32_t quotient = size / 8;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	08db      	lsrs	r3, r3, #3
 8000970:	61bb      	str	r3, [r7, #24]
	uint32_t remainder = size - (8 * quotient);
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef ret;

	for (uint8_t i = 0; i < quotient; i++){
 800097c:	2300      	movs	r3, #0
 800097e:	77fb      	strb	r3, [r7, #31]
 8000980:	e015      	b.n	80009ae <SendBytes+0x4e>
		ret = PushTx8Bytes(ExtId, bytes + i * 8, 8);
 8000982:	7ffb      	ldrb	r3, [r7, #31]
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	461a      	mov	r2, r3
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	4413      	add	r3, r2
 800098c:	2208      	movs	r2, #8
 800098e:	4619      	mov	r1, r3
 8000990:	68f8      	ldr	r0, [r7, #12]
 8000992:	f7ff fe27 	bl	80005e4 <PushTx8Bytes>
 8000996:	4603      	mov	r3, r0
 8000998:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 800099a:	7cfb      	ldrb	r3, [r7, #19]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d003      	beq.n	80009a8 <SendBytes+0x48>
			Error_Handler();
 80009a0:	f001 f8be 	bl	8001b20 <Error_Handler>
			return ret;
 80009a4:	7cfb      	ldrb	r3, [r7, #19]
 80009a6:	e027      	b.n	80009f8 <SendBytes+0x98>
	for (uint8_t i = 0; i < quotient; i++){
 80009a8:	7ffb      	ldrb	r3, [r7, #31]
 80009aa:	3301      	adds	r3, #1
 80009ac:	77fb      	strb	r3, [r7, #31]
 80009ae:	7ffb      	ldrb	r3, [r7, #31]
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d8e5      	bhi.n	8000982 <SendBytes+0x22>
		}
	}

	if(remainder != 0){
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d011      	beq.n	80009e0 <SendBytes+0x80>
		ret = PushTx8Bytes(ExtId, bytes + quotient * 8, remainder);
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	00db      	lsls	r3, r3, #3
 80009c0:	68ba      	ldr	r2, [r7, #8]
 80009c2:	4413      	add	r3, r2
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	4619      	mov	r1, r3
 80009c8:	68f8      	ldr	r0, [r7, #12]
 80009ca:	f7ff fe0b 	bl	80005e4 <PushTx8Bytes>
 80009ce:	4603      	mov	r3, r0
 80009d0:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 80009d2:	7cfb      	ldrb	r3, [r7, #19]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d003      	beq.n	80009e0 <SendBytes+0x80>
			Error_Handler();
 80009d8:	f001 f8a2 	bl	8001b20 <Error_Handler>
			return ret;
 80009dc:	7cfb      	ldrb	r3, [r7, #19]
 80009de:	e00b      	b.n	80009f8 <SendBytes+0x98>
		}
	}

	ret = PopSendTx8Bytes();
 80009e0:	f7ff fe58 	bl	8000694 <PopSendTx8Bytes>
 80009e4:	4603      	mov	r3, r0
 80009e6:	74fb      	strb	r3, [r7, #19]
	if (ret != HAL_OK){
 80009e8:	7cfb      	ldrb	r3, [r7, #19]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d003      	beq.n	80009f6 <SendBytes+0x96>
		Error_Handler();
 80009ee:	f001 f897 	bl	8001b20 <Error_Handler>
		return ret;
 80009f2:	7cfb      	ldrb	r3, [r7, #19]
 80009f4:	e000      	b.n	80009f8 <SendBytes+0x98>
	}

	return HAL_OK;
 80009f6:	2300      	movs	r3, #0
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3720      	adds	r7, #32
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <CAN_SystemInit>:
 * @brief CANのシステムをアクティベートする. 具体的にはメッセージフィルターの設定とhal_can_start.
 *
 * @param _hcan
 * @param can_param
 */
void CAN_SystemInit(CAN_HandleTypeDef *_hcan){ // CANの初期化
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08e      	sub	sp, #56	; 0x38
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	phcan = _hcan;
 8000a08:	4a09      	ldr	r2, [pc, #36]	; (8000a30 <CAN_SystemInit+0x30>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6013      	str	r3, [r2, #0]

	all_node_detected = 0;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <CAN_SystemInit+0x34>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000a14:	2300      	movs	r3, #0
 8000a16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000a1a:	e029      	b.n	8000a70 <CAN_SystemInit+0x70>
		num_detected[type] = 0;
 8000a1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a20:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <CAN_SystemInit+0x38>)
 8000a22:	2100      	movs	r1, #0
 8000a24:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 0b111; i++){
 8000a26:	2300      	movs	r3, #0
 8000a28:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000a2c:	e017      	b.n	8000a5e <CAN_SystemInit+0x5e>
 8000a2e:	bf00      	nop
 8000a30:	200001f0 	.word	0x200001f0
 8000a34:	200001f4 	.word	0x200001f4
 8000a38:	200001f8 	.word	0x200001f8
			node_id_list[type][i] = 0xff;
 8000a3c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000a40:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8000a44:	48d7      	ldr	r0, [pc, #860]	; (8000da4 <CAN_SystemInit+0x3a4>)
 8000a46:	4613      	mov	r3, r2
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	1a9b      	subs	r3, r3, r2
 8000a4c:	4403      	add	r3, r0
 8000a4e:	440b      	add	r3, r1
 8000a50:	22ff      	movs	r2, #255	; 0xff
 8000a52:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 0b111; i++){
 8000a54:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000a58:	3301      	adds	r3, #1
 8000a5a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000a5e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d9ea      	bls.n	8000a3c <CAN_SystemInit+0x3c>
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000a66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000a70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a74:	2b08      	cmp	r3, #8
 8000a76:	d9d1      	bls.n	8000a1c <CAN_SystemInit+0x1c>
		}
	}

	//フィルタバンク設定
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000a84:	2301      	movs	r3, #1
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.SlaveStartFilterBank = 14;
 8000a88:	230e      	movs	r3, #14
 8000a8a:	633b      	str	r3, [r7, #48]	; 0x30

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000a90:	2300      	movs	r3, #0
 8000a92:	2200      	movs	r2, #0
 8000a94:	2100      	movs	r1, #0
 8000a96:	2001      	movs	r0, #1
 8000a98:	f000 fc57 	bl	800134a <Make_CAN_ID>
 8000a9c:	f04f 0200 	mov.w	r2, #0
 8000aa0:	f04f 0300 	mov.w	r3, #0
 8000aa4:	0b42      	lsrs	r2, r0, #13
 8000aa6:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000aaa:	0b4b      	lsrs	r3, r1, #13
 8000aac:	4613      	mov	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) >> 13;
 8000ab0:	231f      	movs	r3, #31
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f000 fc47 	bl	800134a <Make_CAN_ID>
 8000abc:	f04f 0200 	mov.w	r2, #0
 8000ac0:	f04f 0300 	mov.w	r3, #0
 8000ac4:	0b42      	lsrs	r2, r0, #13
 8000ac6:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000aca:	0b4b      	lsrs	r3, r1, #13
 8000acc:	4613      	mov	r3, r2
 8000ace:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f000 fc37 	bl	800134a <Make_CAN_ID>
 8000adc:	4602      	mov	r2, r0
 8000ade:	460b      	mov	r3, r1
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	00da      	lsls	r2, r3, #3
 8000ae4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ae8:	4013      	ands	r3, r2
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000af0:	231f      	movs	r3, #31
 8000af2:	2200      	movs	r2, #0
 8000af4:	2100      	movs	r1, #0
 8000af6:	2001      	movs	r0, #1
 8000af8:	f000 fc27 	bl	800134a <Make_CAN_ID>
 8000afc:	4602      	mov	r2, r0
 8000afe:	460b      	mov	r3, r1
 8000b00:	4613      	mov	r3, r2
 8000b02:	00da      	lsls	r2, r3, #3
 8000b04:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000b08:	4013      	ands	r3, r2
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000b10:	4ba5      	ldr	r3, [pc, #660]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f107 020c 	add.w	r2, r7, #12
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f001 fe28 	bl	8002770 <HAL_CAN_ConfigFilter>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <CAN_SystemInit+0x12a>
		/* Filter configuration Error */
		Error_Handler();
 8000b26:	f000 fffb 	bl	8001b20 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 1;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000b2e:	2300      	movs	r3, #0
 8000b30:	2200      	movs	r2, #0
 8000b32:	2100      	movs	r1, #0
 8000b34:	2002      	movs	r0, #2
 8000b36:	f000 fc08 	bl	800134a <Make_CAN_ID>
 8000b3a:	f04f 0200 	mov.w	r2, #0
 8000b3e:	f04f 0300 	mov.w	r3, #0
 8000b42:	0b42      	lsrs	r2, r0, #13
 8000b44:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000b48:	0b4b      	lsrs	r3, r1, #13
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) >> 13;
 8000b4e:	231f      	movs	r3, #31
 8000b50:	2200      	movs	r2, #0
 8000b52:	2100      	movs	r1, #0
 8000b54:	2002      	movs	r0, #2
 8000b56:	f000 fbf8 	bl	800134a <Make_CAN_ID>
 8000b5a:	f04f 0200 	mov.w	r2, #0
 8000b5e:	f04f 0300 	mov.w	r3, #0
 8000b62:	0b42      	lsrs	r2, r0, #13
 8000b64:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000b68:	0b4b      	lsrs	r3, r1, #13
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000b6e:	2300      	movs	r3, #0
 8000b70:	2200      	movs	r2, #0
 8000b72:	2100      	movs	r1, #0
 8000b74:	2002      	movs	r0, #2
 8000b76:	f000 fbe8 	bl	800134a <Make_CAN_ID>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	4613      	mov	r3, r2
 8000b80:	00da      	lsls	r2, r3, #3
 8000b82:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000b86:	4013      	ands	r3, r2
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000b8e:	231f      	movs	r3, #31
 8000b90:	2200      	movs	r2, #0
 8000b92:	2100      	movs	r1, #0
 8000b94:	2002      	movs	r0, #2
 8000b96:	f000 fbd8 	bl	800134a <Make_CAN_ID>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	00da      	lsls	r2, r3, #3
 8000ba2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	f043 0304 	orr.w	r3, r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000bae:	4b7e      	ldr	r3, [pc, #504]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f107 020c 	add.w	r2, r7, #12
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 fdd9 	bl	8002770 <HAL_CAN_ConfigFilter>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <CAN_SystemInit+0x1c8>
		/* Filter configuration Error */
		Error_Handler();
 8000bc4:	f000 ffac 	bl	8001b20 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 2;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) >> 13;				   // 上16bit
 8000bcc:	2300      	movs	r3, #0
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2003      	movs	r0, #3
 8000bd4:	f000 fbb9 	bl	800134a <Make_CAN_ID>
 8000bd8:	f04f 0200 	mov.w	r2, #0
 8000bdc:	f04f 0300 	mov.w	r3, #0
 8000be0:	0b42      	lsrs	r2, r0, #13
 8000be2:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000be6:	0b4b      	lsrs	r3, r1, #13
 8000be8:	4613      	mov	r3, r2
 8000bea:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) >> 13;					   // TODO : 治す
 8000bec:	231f      	movs	r3, #31
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2003      	movs	r0, #3
 8000bf4:	f000 fba9 	bl	800134a <Make_CAN_ID>
 8000bf8:	f04f 0200 	mov.w	r2, #0
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	0b42      	lsrs	r2, r0, #13
 8000c02:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000c06:	0b4b      	lsrs	r3, r1, #13
 8000c08:	4613      	mov	r3, r2
 8000c0a:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2003      	movs	r0, #3
 8000c14:	f000 fb99 	bl	800134a <Make_CAN_ID>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	00da      	lsls	r2, r3, #3
 8000c20:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000c24:	4013      	ands	r3, r2
 8000c26:	f043 0304 	orr.w	r3, r3, #4
 8000c2a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000c2c:	231f      	movs	r3, #31
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2003      	movs	r0, #3
 8000c34:	f000 fb89 	bl	800134a <Make_CAN_ID>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	00da      	lsls	r2, r3, #3
 8000c40:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000c44:	4013      	ands	r3, r2
 8000c46:	f043 0304 	orr.w	r3, r3, #4
 8000c4a:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000c4c:	4b56      	ldr	r3, [pc, #344]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f107 020c 	add.w	r2, r7, #12
 8000c54:	4611      	mov	r1, r2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 fd8a 	bl	8002770 <HAL_CAN_ConfigFilter>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <CAN_SystemInit+0x266>
		/* Filter configuration Error */
		Error_Handler();
 8000c62:	f000 ff5d 	bl	8001b20 <Error_Handler>
	}

	// FIFO0にfeedback用のフィルタを設定
	sFilterConfig.FilterBank = 3;
 8000c66:	2303      	movs	r3, #3
 8000c68:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) >> 13; // 上16bit
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2000      	movs	r0, #0
 8000c72:	f000 fb6a 	bl	800134a <Make_CAN_ID>
 8000c76:	f04f 0200 	mov.w	r2, #0
 8000c7a:	f04f 0300 	mov.w	r3, #0
 8000c7e:	0b42      	lsrs	r2, r0, #13
 8000c80:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000c84:	0b4b      	lsrs	r3, r1, #13
 8000c86:	4613      	mov	r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(0, 0, 0, 0b11111) >> 13;
 8000c8a:	231f      	movs	r3, #31
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2000      	movs	r0, #0
 8000c92:	f000 fb5a 	bl	800134a <Make_CAN_ID>
 8000c96:	f04f 0200 	mov.w	r2, #0
 8000c9a:	f04f 0300 	mov.w	r3, #0
 8000c9e:	0b42      	lsrs	r2, r0, #13
 8000ca0:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000ca4:	0b4b      	lsrs	r3, r1, #13
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000caa:	2301      	movs	r3, #1
 8000cac:	2200      	movs	r2, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f000 fb4a 	bl	800134a <Make_CAN_ID>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	460b      	mov	r3, r1
 8000cba:	4613      	mov	r3, r2
 8000cbc:	00da      	lsls	r2, r3, #3
 8000cbe:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(0, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000cca:	231f      	movs	r3, #31
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f000 fb3a 	bl	800134a <Make_CAN_ID>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	460b      	mov	r3, r1
 8000cda:	4613      	mov	r3, r2
 8000cdc:	00da      	lsls	r2, r3, #3
 8000cde:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000cea:	4b2f      	ldr	r3, [pc, #188]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f107 020c 	add.w	r2, r7, #12
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f001 fd3b 	bl	8002770 <HAL_CAN_ConfigFilter>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <CAN_SystemInit+0x304>
		/* Filter configuration Error */
		Error_Handler();
 8000d00:	f000 ff0e 	bl	8001b20 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 4;
 8000d04:	2304      	movs	r3, #4
 8000d06:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) >> 13; // 上16bit
 8000d08:	2300      	movs	r3, #0
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2004      	movs	r0, #4
 8000d10:	f000 fb1b 	bl	800134a <Make_CAN_ID>
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	0b42      	lsrs	r2, r0, #13
 8000d1e:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000d22:	0b4b      	lsrs	r3, r1, #13
 8000d24:	4613      	mov	r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) >> 13;
 8000d28:	231f      	movs	r3, #31
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2004      	movs	r0, #4
 8000d30:	f000 fb0b 	bl	800134a <Make_CAN_ID>
 8000d34:	f04f 0200 	mov.w	r2, #0
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	0b42      	lsrs	r2, r0, #13
 8000d3e:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000d42:	0b4b      	lsrs	r3, r1, #13
 8000d44:	4613      	mov	r3, r2
 8000d46:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000d48:	2300      	movs	r3, #0
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2004      	movs	r0, #4
 8000d50:	f000 fafb 	bl	800134a <Make_CAN_ID>
 8000d54:	4602      	mov	r2, r0
 8000d56:	460b      	mov	r3, r1
 8000d58:	4613      	mov	r3, r2
 8000d5a:	00da      	lsls	r2, r3, #3
 8000d5c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000d60:	4013      	ands	r3, r2
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000d68:	231f      	movs	r3, #31
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2004      	movs	r0, #4
 8000d70:	f000 faeb 	bl	800134a <Make_CAN_ID>
 8000d74:	4602      	mov	r2, r0
 8000d76:	460b      	mov	r3, r1
 8000d78:	4613      	mov	r3, r2
 8000d7a:	00da      	lsls	r2, r3, #3
 8000d7c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000d80:	4013      	ands	r3, r2
 8000d82:	f043 0304 	orr.w	r3, r3, #4
 8000d86:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <CAN_SystemInit+0x3a8>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f107 020c 	add.w	r2, r7, #12
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 fcec 	bl	8002770 <HAL_CAN_ConfigFilter>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d006      	beq.n	8000dac <CAN_SystemInit+0x3ac>
		/* Filter configuration Error */
		Error_Handler();
 8000d9e:	f000 febf 	bl	8001b20 <Error_Handler>
 8000da2:	e003      	b.n	8000dac <CAN_SystemInit+0x3ac>
 8000da4:	20000204 	.word	0x20000204
 8000da8:	200001f0 	.word	0x200001f0
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 5;
 8000dac:	2305      	movs	r3, #5
 8000dae:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 8000db0:	2300      	movs	r3, #0
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	2005      	movs	r0, #5
 8000db8:	f000 fac7 	bl	800134a <Make_CAN_ID>
 8000dbc:	f04f 0200 	mov.w	r2, #0
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	0b42      	lsrs	r2, r0, #13
 8000dc6:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000dca:	0b4b      	lsrs	r3, r1, #13
 8000dcc:	4613      	mov	r3, r2
 8000dce:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) >> 13;
 8000dd0:	231f      	movs	r3, #31
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2005      	movs	r0, #5
 8000dd8:	f000 fab7 	bl	800134a <Make_CAN_ID>
 8000ddc:	f04f 0200 	mov.w	r2, #0
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	0b42      	lsrs	r2, r0, #13
 8000de6:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000dea:	0b4b      	lsrs	r3, r1, #13
 8000dec:	4613      	mov	r3, r2
 8000dee:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000df0:	2300      	movs	r3, #0
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	2005      	movs	r0, #5
 8000df8:	f000 faa7 	bl	800134a <Make_CAN_ID>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	4613      	mov	r3, r2
 8000e02:	00da      	lsls	r2, r3, #3
 8000e04:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000e08:	4013      	ands	r3, r2
 8000e0a:	f043 0304 	orr.w	r3, r3, #4
 8000e0e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000e10:	231f      	movs	r3, #31
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	2005      	movs	r0, #5
 8000e18:	f000 fa97 	bl	800134a <Make_CAN_ID>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	460b      	mov	r3, r1
 8000e20:	4613      	mov	r3, r2
 8000e22:	00da      	lsls	r2, r3, #3
 8000e24:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000e28:	4013      	ands	r3, r2
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000e30:	4b44      	ldr	r3, [pc, #272]	; (8000f44 <CAN_SystemInit+0x544>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f107 020c 	add.w	r2, r7, #12
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 fc98 	bl	8002770 <HAL_CAN_ConfigFilter>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <CAN_SystemInit+0x44a>
		/* Filter configuration Error */
		Error_Handler();
 8000e46:	f000 fe6b 	bl	8001b20 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 6;
 8000e4a:	2306      	movs	r3, #6
 8000e4c:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 8000e4e:	2300      	movs	r3, #0
 8000e50:	2200      	movs	r2, #0
 8000e52:	2100      	movs	r1, #0
 8000e54:	2006      	movs	r0, #6
 8000e56:	f000 fa78 	bl	800134a <Make_CAN_ID>
 8000e5a:	f04f 0200 	mov.w	r2, #0
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	0b42      	lsrs	r2, r0, #13
 8000e64:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000e68:	0b4b      	lsrs	r3, r1, #13
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) >> 13;
 8000e6e:	231f      	movs	r3, #31
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	2006      	movs	r0, #6
 8000e76:	f000 fa68 	bl	800134a <Make_CAN_ID>
 8000e7a:	f04f 0200 	mov.w	r2, #0
 8000e7e:	f04f 0300 	mov.w	r3, #0
 8000e82:	0b42      	lsrs	r2, r0, #13
 8000e84:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000e88:	0b4b      	lsrs	r3, r1, #13
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000e8e:	2300      	movs	r3, #0
 8000e90:	2200      	movs	r2, #0
 8000e92:	2100      	movs	r1, #0
 8000e94:	2006      	movs	r0, #6
 8000e96:	f000 fa58 	bl	800134a <Make_CAN_ID>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	00da      	lsls	r2, r3, #3
 8000ea2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000eae:	231f      	movs	r3, #31
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2006      	movs	r0, #6
 8000eb6:	f000 fa48 	bl	800134a <Make_CAN_ID>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	00da      	lsls	r2, r3, #3
 8000ec2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000ece:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <CAN_SystemInit+0x544>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f107 020c 	add.w	r2, r7, #12
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f001 fc49 	bl	8002770 <HAL_CAN_ConfigFilter>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <CAN_SystemInit+0x4e8>
		/* Filter configuration Error */
		Error_Handler();
 8000ee4:	f000 fe1c 	bl	8001b20 <Error_Handler>
	}

	if (HAL_CAN_Start(phcan) != HAL_OK){
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <CAN_SystemInit+0x544>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 fd2b 	bl	8002948 <HAL_CAN_Start>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d004      	beq.n	8000f02 <CAN_SystemInit+0x502>
		printf(" -> Start Error\n");
 8000ef8:	4813      	ldr	r0, [pc, #76]	; (8000f48 <CAN_SystemInit+0x548>)
 8000efa:	f016 fa25 	bl	8017348 <puts>
		Error_Handler();
 8000efe:	f000 fe0f 	bl	8001b20 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(phcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <CAN_SystemInit+0x544>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2102      	movs	r1, #2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f001 ff78 	bl	8002dfe <HAL_CAN_ActivateNotification>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d004      	beq.n	8000f1e <CAN_SystemInit+0x51e>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 8000f14:	480d      	ldr	r0, [pc, #52]	; (8000f4c <CAN_SystemInit+0x54c>)
 8000f16:	f016 f991 	bl	801723c <iprintf>
		Error_Handler();
 8000f1a:	f000 fe01 	bl	8001b20 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(phcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK){
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <CAN_SystemInit+0x544>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2101      	movs	r1, #1
 8000f24:	4618      	mov	r0, r3
 8000f26:	f001 ff6a 	bl	8002dfe <HAL_CAN_ActivateNotification>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d004      	beq.n	8000f3a <CAN_SystemInit+0x53a>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 8000f30:	4806      	ldr	r0, [pc, #24]	; (8000f4c <CAN_SystemInit+0x54c>)
 8000f32:	f016 f983 	bl	801723c <iprintf>
		Error_Handler();
 8000f36:	f000 fdf3 	bl	8001b20 <Error_Handler>
	}
}
 8000f3a:	bf00      	nop
 8000f3c:	3738      	adds	r7, #56	; 0x38
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200001f0 	.word	0x200001f0
 8000f48:	08018400 	.word	0x08018400
 8000f4c:	08018410 	.word	0x08018410

08000f50 <MCMD_ChangeControl>:
	for (uint8_t i = 0; i < num_of->other; i++)
		printf("Others No.%d\n\r", node_id_list[NODE_OTHER][i]);
}

//// MCMD
void MCMD_ChangeControl(MCMD_HandleTypedef *hmcmd){ // Ctrl typeを変更する.
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	float fdata[2];
	fdata[0] = hmcmd->ctrl_param.PID_param.kp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	613b      	str	r3, [r7, #16]
	fdata[1] = hmcmd->ctrl_param.PID_param.ki;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	617b      	str	r3, [r7, #20]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL1), (uint8_t *)&fdata, sizeof(fdata));
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2105      	movs	r1, #5
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 f9c5 	bl	80012f8 <Make_CAN_ID_from_CAN_Device>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	4610      	mov	r0, r2
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	2208      	movs	r2, #8
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f7ff fcf0 	bl	8000960 <SendBytes>
	fdata[0] = hmcmd->ctrl_param.PID_param.kd;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	613b      	str	r3, [r7, #16]
	fdata[1] = hmcmd->ctrl_param.accel_limit_size;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f8a:	617b      	str	r3, [r7, #20]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL2), (uint8_t *)&fdata, sizeof(fdata));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2106      	movs	r1, #6
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 f9b1 	bl	80012f8 <Make_CAN_ID_from_CAN_Device>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4610      	mov	r0, r2
 8000f9c:	f107 0310 	add.w	r3, r7, #16
 8000fa0:	2208      	movs	r2, #8
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f7ff fcdc 	bl	8000960 <SendBytes>

    fdata[0] = hmcmd->ctrl_param.PID_param.kff;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fac:	613b      	str	r3, [r7, #16]
    fdata[1] = hmcmd->ctrl_param.gravity_compensation_gain;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fb2:	617b      	str	r3, [r7, #20]
    SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL3), (uint8_t *)&fdata, sizeof(fdata));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2107      	movs	r1, #7
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 f99d 	bl	80012f8 <Make_CAN_ID_from_CAN_Device>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	2208      	movs	r2, #8
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f7ff fcc8 	bl	8000960 <SendBytes>

	uint8_t bdata[6];
	bdata[0] = hmcmd->ctrl_param.ctrl_type;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	7d1b      	ldrb	r3, [r3, #20]
 8000fd4:	723b      	strb	r3, [r7, #8]
	bdata[1] = hmcmd->ctrl_param.accel_limit;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000fdc:	727b      	strb	r3, [r7, #9]
	bdata[2] = hmcmd->ctrl_param.feedback;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000fe4:	72bb      	strb	r3, [r7, #10]
	bdata[3] = hmcmd->ctrl_param.timup_monitor;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000fec:	72fb      	strb	r3, [r7, #11]
	bdata[4] = hmcmd->fb_type;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	78db      	ldrb	r3, [r3, #3]
 8000ff2:	733b      	strb	r3, [r7, #12]
    bdata[5] = hmcmd->ctrl_param.gravity_compensation; // TODO : new
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000ffa:	737b      	strb	r3, [r7, #13]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL4), (uint8_t *)&bdata, sizeof(bdata));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2108      	movs	r1, #8
 8001000:	4618      	mov	r0, r3
 8001002:	f000 f979 	bl	80012f8 <Make_CAN_ID_from_CAN_Device>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	4610      	mov	r0, r2
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	2206      	movs	r2, #6
 8001012:	4619      	mov	r1, r3
 8001014:	f7ff fca4 	bl	8000960 <SendBytes>
}
 8001018:	bf00      	nop
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <MCMD_init>:

void MCMD_init(MCMD_HandleTypedef *hmcmd){
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	bdata[0] = hmcmd->enc_dir;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	791b      	ldrb	r3, [r3, #4]
 800102c:	753b      	strb	r3, [r7, #20]
	bdata[1] = hmcmd->rot_dir;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	795b      	ldrb	r3, [r3, #5]
 8001032:	757b      	strb	r3, [r7, #21]
	bdata[2] = hmcmd->calib;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	79db      	ldrb	r3, [r3, #7]
 8001038:	75bb      	strb	r3, [r7, #22]
	bdata[3] = hmcmd->limit_sw_type;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	799b      	ldrb	r3, [r3, #6]
 800103e:	75fb      	strb	r3, [r7, #23]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT1), bdata, sizeof(bdata));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2102      	movs	r1, #2
 8001044:	4618      	mov	r0, r3
 8001046:	f000 f957 	bl	80012f8 <Make_CAN_ID_from_CAN_Device>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4610      	mov	r0, r2
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2204      	movs	r2, #4
 8001056:	4619      	mov	r1, r3
 8001058:	f7ff fc82 	bl	8000960 <SendBytes>
	float fdata[2];
	fdata[0] = hmcmd->offset;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	60fb      	str	r3, [r7, #12]
	fdata[1] = hmcmd->calib_duty;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	613b      	str	r3, [r7, #16]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT2), (uint8_t *)&fdata, sizeof(fdata));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2103      	movs	r1, #3
 800106c:	4618      	mov	r0, r3
 800106e:	f000 f943 	bl	80012f8 <Make_CAN_ID_from_CAN_Device>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4610      	mov	r0, r2
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2208      	movs	r2, #8
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff fc6e 	bl	8000960 <SendBytes>

	fdata[0] = hmcmd->quant_per_unit;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	60fb      	str	r3, [r7, #12]
	fdata[1] = 0;
 800108a:	f04f 0300 	mov.w	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT3), (uint8_t *)&fdata, sizeof(fdata));
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2104      	movs	r1, #4
 8001094:	4618      	mov	r0, r3
 8001096:	f000 f92f 	bl	80012f8 <Make_CAN_ID_from_CAN_Device>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4610      	mov	r0, r2
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	2208      	movs	r2, #8
 80010a6:	4619      	mov	r1, r3
 80010a8:	f7ff fc5a 	bl	8000960 <SendBytes>
	HAL_Delay(50); // これないと動かない(なぜ?)
 80010ac:	2032      	movs	r0, #50	; 0x32
 80010ae:	f001 fa3f 	bl	8002530 <HAL_Delay>
	MCMD_ChangeControl(hmcmd);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ff4c 	bl	8000f50 <MCMD_ChangeControl>
}
 80010b8:	bf00      	nop
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <MCMD_Calib>:

void MCMD_Calib(MCMD_HandleTypedef *hmcmd){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CALIB), bdata, sizeof(bdata));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2109      	movs	r1, #9
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 f913 	bl	80012f8 <Make_CAN_ID_from_CAN_Device>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4610      	mov	r0, r2
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2204      	movs	r2, #4
 80010de:	4619      	mov	r1, r3
 80010e0:	f7ff fc3e 	bl	8000960 <SendBytes>
}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <MCMD_Control_Enable>:

void MCMD_Control_Enable(MCMD_HandleTypedef *hmcmd){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_ENABLE), bdata, sizeof(bdata));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	210a      	movs	r1, #10
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 f8fd 	bl	80012f8 <Make_CAN_ID_from_CAN_Device>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4610      	mov	r0, r2
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	2204      	movs	r2, #4
 800110a:	4619      	mov	r1, r3
 800110c:	f7ff fc28 	bl	8000960 <SendBytes>
}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <MCMD_SetTarget>:
void MCMD_Control_Disable(MCMD_HandleTypedef *hmcmd){
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_DISABLE), bdata, sizeof(bdata));
}

void MCMD_SetTarget(MCMD_HandleTypedef *hmcmd, float target){
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	ed87 0a00 	vstr	s0, [r7]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_SET_TARGET), (uint8_t *)&target, sizeof(target));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	210c      	movs	r1, #12
 8001128:	4618      	mov	r0, r3
 800112a:	f000 f8e5 	bl	80012f8 <Make_CAN_ID_from_CAN_Device>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4610      	mov	r0, r2
 8001134:	463b      	mov	r3, r7
 8001136:	2204      	movs	r2, #4
 8001138:	4619      	mov	r1, r3
 800113a:	f7ff fc11 	bl	8000960 <SendBytes>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <Get_MCMD_Feedback>:

MCMD_Feedback_Typedef Get_MCMD_Feedback(CAN_Device *can_device){
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
	MCMD_Feedback_Typedef ans;
	if (can_device->node_type == NODE_MCMD1){
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d12f      	bne.n	80011ba <Get_MCMD_Feedback+0x72>
		ans.fb_type = _feedback_table_mcmd1[(can_device->node_id)].feedback_motor[(can_device->device_num)].fb_type;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	785b      	ldrb	r3, [r3, #1]
 800115e:	4618      	mov	r0, r3
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	789b      	ldrb	r3, [r3, #2]
 8001164:	4619      	mov	r1, r3
 8001166:	4a5f      	ldr	r2, [pc, #380]	; (80012e4 <Get_MCMD_Feedback+0x19c>)
 8001168:	0043      	lsls	r3, r0, #1
 800116a:	440b      	add	r3, r1
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	4413      	add	r3, r2
 8001170:	791b      	ldrb	r3, [r3, #4]
 8001172:	733b      	strb	r3, [r7, #12]
		ans.status = _feedback_table_mcmd1[(can_device->node_id)].feedback_motor[(can_device->device_num)].status;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	785b      	ldrb	r3, [r3, #1]
 8001178:	4618      	mov	r0, r3
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	789b      	ldrb	r3, [r3, #2]
 800117e:	4619      	mov	r1, r3
 8001180:	4a58      	ldr	r2, [pc, #352]	; (80012e4 <Get_MCMD_Feedback+0x19c>)
 8001182:	0043      	lsls	r3, r0, #1
 8001184:	440b      	add	r3, r1
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	4413      	add	r3, r2
 800118a:	795b      	ldrb	r3, [r3, #5]
 800118c:	737b      	strb	r3, [r7, #13]
		ans.value = _feedback_table_mcmd1[(can_device->node_id)].feedback_motor[(can_device->device_num)].value;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	785b      	ldrb	r3, [r3, #1]
 8001192:	4618      	mov	r0, r3
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	789b      	ldrb	r3, [r3, #2]
 8001198:	4619      	mov	r1, r3
 800119a:	4a52      	ldr	r2, [pc, #328]	; (80012e4 <Get_MCMD_Feedback+0x19c>)
 800119c:	0043      	lsls	r3, r0, #1
 800119e:	440b      	add	r3, r1
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	4413      	add	r3, r2
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	60bb      	str	r3, [r7, #8]
		return ans;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	461a      	mov	r2, r3
 80011ac:	f107 0308 	add.w	r3, r7, #8
 80011b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011b4:	e882 0003 	stmia.w	r2, {r0, r1}
 80011b8:	e08f      	b.n	80012da <Get_MCMD_Feedback+0x192>
	}else if (can_device->node_type == NODE_MCMD2){
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d111      	bne.n	80011e6 <Get_MCMD_Feedback+0x9e>
		return _feedback_table_mcmd2[(can_device->node_id)].feedback_motor[(can_device->device_num)];
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	785b      	ldrb	r3, [r3, #1]
 80011c6:	461c      	mov	r4, r3
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	789b      	ldrb	r3, [r3, #2]
 80011cc:	4618      	mov	r0, r3
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	4a45      	ldr	r2, [pc, #276]	; (80012e8 <Get_MCMD_Feedback+0x1a0>)
 80011d2:	0063      	lsls	r3, r4, #1
 80011d4:	4403      	add	r3, r0
 80011d6:	460c      	mov	r4, r1
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	4413      	add	r3, r2
 80011dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011e0:	e884 0003 	stmia.w	r4, {r0, r1}
 80011e4:	e079      	b.n	80012da <Get_MCMD_Feedback+0x192>
	}else if (can_device->node_type == NODE_MCMD3){
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d12f      	bne.n	800124e <Get_MCMD_Feedback+0x106>
		ans.fb_type = _feedback_table_mcmd3[(can_device->node_id)].feedback_motor[(can_device->device_num)].fb_type;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	785b      	ldrb	r3, [r3, #1]
 80011f2:	4618      	mov	r0, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	789b      	ldrb	r3, [r3, #2]
 80011f8:	4619      	mov	r1, r3
 80011fa:	4a3c      	ldr	r2, [pc, #240]	; (80012ec <Get_MCMD_Feedback+0x1a4>)
 80011fc:	0043      	lsls	r3, r0, #1
 80011fe:	440b      	add	r3, r1
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	4413      	add	r3, r2
 8001204:	791b      	ldrb	r3, [r3, #4]
 8001206:	733b      	strb	r3, [r7, #12]
		ans.status = _feedback_table_mcmd3[(can_device->node_id)].feedback_motor[(can_device->device_num)].status;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	785b      	ldrb	r3, [r3, #1]
 800120c:	4618      	mov	r0, r3
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	789b      	ldrb	r3, [r3, #2]
 8001212:	4619      	mov	r1, r3
 8001214:	4a35      	ldr	r2, [pc, #212]	; (80012ec <Get_MCMD_Feedback+0x1a4>)
 8001216:	0043      	lsls	r3, r0, #1
 8001218:	440b      	add	r3, r1
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	4413      	add	r3, r2
 800121e:	795b      	ldrb	r3, [r3, #5]
 8001220:	737b      	strb	r3, [r7, #13]
		ans.value = _feedback_table_mcmd3[(can_device->node_id)].feedback_motor[(can_device->device_num)].value;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	785b      	ldrb	r3, [r3, #1]
 8001226:	4618      	mov	r0, r3
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	789b      	ldrb	r3, [r3, #2]
 800122c:	4619      	mov	r1, r3
 800122e:	4a2f      	ldr	r2, [pc, #188]	; (80012ec <Get_MCMD_Feedback+0x1a4>)
 8001230:	0043      	lsls	r3, r0, #1
 8001232:	440b      	add	r3, r1
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	4413      	add	r3, r2
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	60bb      	str	r3, [r7, #8]
		return ans;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	461a      	mov	r2, r3
 8001240:	f107 0308 	add.w	r3, r7, #8
 8001244:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001248:	e882 0003 	stmia.w	r2, {r0, r1}
 800124c:	e045      	b.n	80012da <Get_MCMD_Feedback+0x192>
	}else if (can_device->node_type == NODE_MCMD4){
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b06      	cmp	r3, #6
 8001254:	d12f      	bne.n	80012b6 <Get_MCMD_Feedback+0x16e>
		ans.fb_type = _feedback_table_mcmd4[(can_device->node_id)].feedback_motor[(can_device->device_num)].fb_type;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	785b      	ldrb	r3, [r3, #1]
 800125a:	4618      	mov	r0, r3
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	789b      	ldrb	r3, [r3, #2]
 8001260:	4619      	mov	r1, r3
 8001262:	4a23      	ldr	r2, [pc, #140]	; (80012f0 <Get_MCMD_Feedback+0x1a8>)
 8001264:	0043      	lsls	r3, r0, #1
 8001266:	440b      	add	r3, r1
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	4413      	add	r3, r2
 800126c:	791b      	ldrb	r3, [r3, #4]
 800126e:	733b      	strb	r3, [r7, #12]
		ans.status = _feedback_table_mcmd4[(can_device->node_id)].feedback_motor[(can_device->device_num)].status;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	785b      	ldrb	r3, [r3, #1]
 8001274:	4618      	mov	r0, r3
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	789b      	ldrb	r3, [r3, #2]
 800127a:	4619      	mov	r1, r3
 800127c:	4a1c      	ldr	r2, [pc, #112]	; (80012f0 <Get_MCMD_Feedback+0x1a8>)
 800127e:	0043      	lsls	r3, r0, #1
 8001280:	440b      	add	r3, r1
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	4413      	add	r3, r2
 8001286:	795b      	ldrb	r3, [r3, #5]
 8001288:	737b      	strb	r3, [r7, #13]
		ans.value = _feedback_table_mcmd4[(can_device->node_id)].feedback_motor[(can_device->device_num)].value;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	785b      	ldrb	r3, [r3, #1]
 800128e:	4618      	mov	r0, r3
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	789b      	ldrb	r3, [r3, #2]
 8001294:	4619      	mov	r1, r3
 8001296:	4a16      	ldr	r2, [pc, #88]	; (80012f0 <Get_MCMD_Feedback+0x1a8>)
 8001298:	0043      	lsls	r3, r0, #1
 800129a:	440b      	add	r3, r1
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	4413      	add	r3, r2
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	60bb      	str	r3, [r7, #8]
		return ans;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	461a      	mov	r2, r3
 80012a8:	f107 0308 	add.w	r3, r7, #8
 80012ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012b0:	e882 0003 	stmia.w	r2, {r0, r1}
 80012b4:	e011      	b.n	80012da <Get_MCMD_Feedback+0x192>
	}else{
		ans.fb_type = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	733b      	strb	r3, [r7, #12]
		ans.status = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	737b      	strb	r3, [r7, #13]
		ans.value = 0.0f;
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
		printf("get feed back error\n\r");
 80012c4:	480b      	ldr	r0, [pc, #44]	; (80012f4 <Get_MCMD_Feedback+0x1ac>)
 80012c6:	f015 ffb9 	bl	801723c <iprintf>
		return ans;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	461a      	mov	r2, r3
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012d6:	e882 0003 	stmia.w	r2, {r0, r1}
	}
}
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd90      	pop	{r4, r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000244 	.word	0x20000244
 80012e8:	200002e4 	.word	0x200002e4
 80012ec:	20000384 	.word	0x20000384
 80012f0:	20000424 	.word	0x20000424
 80012f4:	080184c0 	.word	0x080184c0

080012f8 <Make_CAN_ID_from_CAN_Device>:
/**
 * @brief CANのIDを設定する. 上16bitのみを使用
 * @param CAN_Device*
 * @param cmd
 */
uint64_t Make_CAN_ID_from_CAN_Device(CAN_Device* _can_device, uint8_t cmd){  // mainからmcmdなどへの送信
 80012f8:	b4b0      	push	{r4, r5, r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	70fb      	strb	r3, [r7, #3]
    uint8_t node_type = (uint8_t)(_can_device->node_type) & (0b111);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	f003 0307 	and.w	r3, r3, #7
 800130c:	73fb      	strb	r3, [r7, #15]
    return (((node_type&0b111)<<11) | (((_can_device->node_id)&0b111)<<8) | (((_can_device->device_num)&0b111)<<5)
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	02db      	lsls	r3, r3, #11
 8001312:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	785b      	ldrb	r3, [r3, #1]
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001320:	431a      	orrs	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	789b      	ldrb	r3, [r3, #2]
 8001326:	015b      	lsls	r3, r3, #5
 8001328:	b2db      	uxtb	r3, r3
 800132a:	431a      	orrs	r2, r3
            | (cmd&0b11111) );
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	f003 031f 	and.w	r3, r3, #31
 8001332:	4313      	orrs	r3, r2
 8001334:	17da      	asrs	r2, r3, #31
 8001336:	461c      	mov	r4, r3
 8001338:	4615      	mov	r5, r2
 800133a:	4622      	mov	r2, r4
 800133c:	462b      	mov	r3, r5
}
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	bcb0      	pop	{r4, r5, r7}
 8001348:	4770      	bx	lr

0800134a <Make_CAN_ID>:
 * @param node_type
 * @param node_id
 * @param device_num
 * @param cmd
 */
uint64_t Make_CAN_ID(Node_Type node_type, uint8_t node_id, uint8_t device_num, uint8_t cmd){
 800134a:	e92d 0390 	stmdb	sp!, {r4, r7, r8, r9}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	4604      	mov	r4, r0
 8001354:	4608      	mov	r0, r1
 8001356:	4611      	mov	r1, r2
 8001358:	461a      	mov	r2, r3
 800135a:	4623      	mov	r3, r4
 800135c:	71fb      	strb	r3, [r7, #7]
 800135e:	4603      	mov	r3, r0
 8001360:	71bb      	strb	r3, [r7, #6]
 8001362:	460b      	mov	r3, r1
 8001364:	717b      	strb	r3, [r7, #5]
 8001366:	4613      	mov	r3, r2
 8001368:	713b      	strb	r3, [r7, #4]
    return ( (((uint8_t)node_type & 0b111) << 11) | (((node_id)&0b111) << 8) | ((device_num&0b111) << 5)
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	02db      	lsls	r3, r3, #11
 800136e:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001372:	79bb      	ldrb	r3, [r7, #6]
 8001374:	021b      	lsls	r3, r3, #8
 8001376:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800137a:	431a      	orrs	r2, r3
 800137c:	797b      	ldrb	r3, [r7, #5]
 800137e:	015b      	lsls	r3, r3, #5
 8001380:	b2db      	uxtb	r3, r3
 8001382:	431a      	orrs	r2, r3
             | (cmd&0b11111) );
 8001384:	793b      	ldrb	r3, [r7, #4]
 8001386:	f003 031f 	and.w	r3, r3, #31
 800138a:	4313      	orrs	r3, r2
 800138c:	17da      	asrs	r2, r3, #31
 800138e:	4698      	mov	r8, r3
 8001390:	4691      	mov	r9, r2
 8001392:	4642      	mov	r2, r8
 8001394:	464b      	mov	r3, r9
}
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	e8bd 0390 	ldmia.w	sp!, {r4, r7, r8, r9}
 80013a2:	4770      	bx	lr

080013a4 <Extract_CAN_Device>:

CAN_Device Extract_CAN_Device(uint64_t can_id) {  // CAN_IDからCAN_Deviceを抽出する
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	e9c7 0100 	strd	r0, r1, [r7]
    CAN_Device ans;
    ans.device_num = ((can_id>>5) & 0b111);
 80013ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	f04f 0300 	mov.w	r3, #0
 80013ba:	0942      	lsrs	r2, r0, #5
 80013bc:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 80013c0:	094b      	lsrs	r3, r1, #5
 80013c2:	b2d3      	uxtb	r3, r2
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	72bb      	strb	r3, [r7, #10]
    ans.node_id = ((can_id>>8) & 0b111);
 80013cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	f04f 0300 	mov.w	r3, #0
 80013d8:	0a02      	lsrs	r2, r0, #8
 80013da:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80013de:	0a0b      	lsrs	r3, r1, #8
 80013e0:	b2d3      	uxtb	r3, r2
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	727b      	strb	r3, [r7, #9]
    ans.node_type = (Node_Type)( (can_id>>11) & 0b111);
 80013ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	f04f 0300 	mov.w	r3, #0
 80013f6:	0ac2      	lsrs	r2, r0, #11
 80013f8:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 80013fc:	0acb      	lsrs	r3, r1, #11
 80013fe:	b2d3      	uxtb	r3, r2
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	b2db      	uxtb	r3, r3
 8001406:	723b      	strb	r3, [r7, #8]
    return ans;
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	f107 0208 	add.w	r2, r7, #8
 8001410:	6812      	ldr	r2, [r2, #0]
 8001412:	4611      	mov	r1, r2
 8001414:	8019      	strh	r1, [r3, #0]
 8001416:	3302      	adds	r3, #2
 8001418:	0c12      	lsrs	r2, r2, #16
 800141a:	701a      	strb	r2, [r3, #0]
 800141c:	2300      	movs	r3, #0
 800141e:	7b3a      	ldrb	r2, [r7, #12]
 8001420:	f362 0307 	bfi	r3, r2, #0, #8
 8001424:	7b7a      	ldrb	r2, [r7, #13]
 8001426:	f362 230f 	bfi	r3, r2, #8, #8
 800142a:	7bba      	ldrb	r2, [r7, #14]
 800142c:	f362 4317 	bfi	r3, r2, #16, #8
}
 8001430:	4618      	mov	r0, r3
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <Extract_CAN_CMD>:

uint8_t Extract_CAN_CMD(uint64_t can_id){ return ( can_id & 0b11111); }  // cmdを抽出
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	e9c7 0100 	strd	r0, r1, [r7]
 8001446:	783b      	ldrb	r3, [r7, #0]
 8001448:	f003 031f 	and.w	r3, r3, #31
 800144c:	b2db      	uxtb	r3, r3
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(uint8_t ch)
#else
#define PUTCHAR_PROTYPE int fputc(int ch,FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, &ch, 1, 500);
 8001466:	1df9      	adds	r1, r7, #7
 8001468:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800146c:	2201      	movs	r2, #1
 800146e:	4804      	ldr	r0, [pc, #16]	; (8001480 <__io_putchar+0x24>)
 8001470:	f005 fd6e 	bl	8006f50 <HAL_UART_Transmit>
    return ch;
 8001474:	79fb      	ldrb	r3, [r7, #7]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200024f8 	.word	0x200024f8

08001484 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 800148c:	f7ff f95c 	bl	8000748 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 80014a0:	f7ff f958 	bl	8000754 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 80014b4:	f7ff f948 	bl	8000748 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 80014c8:	f7ff f944 	bl	8000754 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 80014dc:	f7ff f934 	bl	8000748 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 80014f0:	f7ff f930 	bl	8000754 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
    WhenCANRxFifo0MsgPending(hcan, &num_of_devices);
 8001504:	4903      	ldr	r1, [pc, #12]	; (8001514 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff f92a 	bl	8000760 <WhenCANRxFifo0MsgPending>
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20004408 	.word	0x20004408

08001518 <mcmdSetting.0>:
  MX_USART3_UART_Init();
  MX_USB_OTG_FS_PCD_Init();
  MX_CAN1_Init();
  /* USER CODE BEGIN 2 */

void mcmdSetting(){
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	f8c7 c004 	str.w	ip, [r7, #4]
	printf("Start Initializing CAN System:Begin\n\r");
 8001522:	483e      	ldr	r0, [pc, #248]	; (800161c <mcmdSetting.0+0x104>)
 8001524:	f015 fe8a 	bl	801723c <iprintf>
	   HAL_Delay(100);
 8001528:	2064      	movs	r0, #100	; 0x64
 800152a:	f001 f801 	bl	8002530 <HAL_Delay>

	   CAN_SystemInit(&hcan1); // F7のCAN通信のinit
 800152e:	483c      	ldr	r0, [pc, #240]	; (8001620 <mcmdSetting.0+0x108>)
 8001530:	f7ff fa66 	bl	8000a00 <CAN_SystemInit>

	   // デバイス数の設定 (今回はmcmd4が1枚)
	   num_of_devices.mcmd3 = 1;
 8001534:	4b3b      	ldr	r3, [pc, #236]	; (8001624 <mcmdSetting.0+0x10c>)
 8001536:	2201      	movs	r2, #1
 8001538:	709a      	strb	r2, [r3, #2]
	   num_of_devices.mcmd4 = 0;
 800153a:	4b3a      	ldr	r3, [pc, #232]	; (8001624 <mcmdSetting.0+0x10c>)
 800153c:	2200      	movs	r2, #0
 800153e:	715a      	strb	r2, [r3, #5]
	   num_of_devices.air = 0;
 8001540:	4b38      	ldr	r3, [pc, #224]	; (8001624 <mcmdSetting.0+0x10c>)
 8001542:	2200      	movs	r2, #0
 8001544:	711a      	strb	r2, [r3, #4]
	   num_of_devices.servo = 0;
 8001546:	4b37      	ldr	r3, [pc, #220]	; (8001624 <mcmdSetting.0+0x10c>)
 8001548:	2200      	movs	r2, #0
 800154a:	70da      	strb	r2, [r3, #3]

	   printf("Start Initializing CAN System:End\n\r");
 800154c:	4836      	ldr	r0, [pc, #216]	; (8001628 <mcmdSetting.0+0x110>)
 800154e:	f015 fe75 	bl	801723c <iprintf>
	   HAL_Delay(100);
 8001552:	2064      	movs	r0, #100	; 0x64
 8001554:	f000 ffec 	bl	8002530 <HAL_Delay>
	   //CAN_WaitConnect(&num_of_devices);  // 設定された全てのCANモジュール基板との接続が確認できるまで待機

	   // ここからはCANモジュール基板の設定
	    // 接続先のMCMDの設定
	    mcmd4_struct.device.node_type = NODE_MCMD3;  // nodeのタイプ (NODE_MCMD3など)
 8001558:	4b34      	ldr	r3, [pc, #208]	; (800162c <mcmdSetting.0+0x114>)
 800155a:	2203      	movs	r2, #3
 800155c:	701a      	strb	r2, [r3, #0]
	    mcmd4_struct.device.node_id = 1;  // 基板の番号 (基板上の半固定抵抗を回す事で設定できる)
 800155e:	4b33      	ldr	r3, [pc, #204]	; (800162c <mcmdSetting.0+0x114>)
 8001560:	2201      	movs	r2, #1
 8001562:	705a      	strb	r2, [r3, #1]
	    mcmd4_struct.device.device_num = 0;  // モーターの番号(MCMDなら0と1の2つが選べる)
 8001564:	4b31      	ldr	r3, [pc, #196]	; (800162c <mcmdSetting.0+0x114>)
 8001566:	2200      	movs	r2, #0
 8001568:	709a      	strb	r2, [r3, #2]

	    // 制御パラメータの設定
	    mcmd4_struct.ctrl_param.ctrl_type = MCMD_CTRL_POS;  //制御タイプを設定
 800156a:	4b30      	ldr	r3, [pc, #192]	; (800162c <mcmdSetting.0+0x114>)
 800156c:	2200      	movs	r2, #0
 800156e:	751a      	strb	r2, [r3, #20]
	    mcmd4_struct.ctrl_param.PID_param.kp = 0.3f;  // Pゲイン 1.0
 8001570:	4b2e      	ldr	r3, [pc, #184]	; (800162c <mcmdSetting.0+0x114>)
 8001572:	4a2f      	ldr	r2, [pc, #188]	; (8001630 <mcmdSetting.0+0x118>)
 8001574:	619a      	str	r2, [r3, #24]
	    mcmd4_struct.ctrl_param.PID_param.ki = 0.0f;  // Iゲイン 0.0
 8001576:	4b2d      	ldr	r3, [pc, #180]	; (800162c <mcmdSetting.0+0x114>)
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
	    mcmd4_struct.ctrl_param.PID_param.kd = 0.0f;  // Dゲイン 0.0 (Dゲインは使いにくい)
 800157e:	4b2b      	ldr	r3, [pc, #172]	; (800162c <mcmdSetting.0+0x114>)
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	621a      	str	r2, [r3, #32]
	    mcmd4_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;  // PIDの偏差をclipするか
 8001586:	4b29      	ldr	r3, [pc, #164]	; (800162c <mcmdSetting.0+0x114>)
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4_struct.ctrl_param.accel_limit_size = 2.0f;  // PIDの偏差をclipする場合の絶対値のmax値
 800158e:	4b27      	ldr	r3, [pc, #156]	; (800162c <mcmdSetting.0+0x114>)
 8001590:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001594:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4_struct.ctrl_param.feedback = MCMD_FB_ENABLE;  // MCMDからF7にフィードバックを送信するか否か
 8001596:	4b25      	ldr	r3, [pc, #148]	; (800162c <mcmdSetting.0+0x114>)
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;  // timeupは未実装なのでDISABLE。
 800159e:	4b23      	ldr	r3, [pc, #140]	; (800162c <mcmdSetting.0+0x114>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4_struct.enc_dir = MCMD_DIR_FW;  // Encoderの回転方向設定
 80015a6:	4b21      	ldr	r3, [pc, #132]	; (800162c <mcmdSetting.0+0x114>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	711a      	strb	r2, [r3, #4]
	    mcmd4_struct.rot_dir = MCMD_DIR_BC;  // モーターの回転方向設定
 80015ac:	4b1f      	ldr	r3, [pc, #124]	; (800162c <mcmdSetting.0+0x114>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	715a      	strb	r2, [r3, #5]
	    mcmd4_struct.quant_per_unit = 59.0/6400.0f;  // エンコーダーの分解能に対する制御値の変化量の割合
 80015b2:	4b1e      	ldr	r3, [pc, #120]	; (800162c <mcmdSetting.0+0x114>)
 80015b4:	4a1f      	ldr	r2, [pc, #124]	; (8001634 <mcmdSetting.0+0x11c>)
 80015b6:	611a      	str	r2, [r3, #16]

	    // 原点サーチの設定
	    mcmd4_struct.limit_sw_type = LIMIT_SW_NC;  // 原点サーチにNomaly Closedのスイッチを用いる
 80015b8:	4b1c      	ldr	r3, [pc, #112]	; (800162c <mcmdSetting.0+0x114>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	719a      	strb	r2, [r3, #6]
	    mcmd4_struct.calib = CALIBRATION_DISABLE;  // 原点サーチを行う。
 80015be:	4b1b      	ldr	r3, [pc, #108]	; (800162c <mcmdSetting.0+0x114>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	71da      	strb	r2, [r3, #7]
	    mcmd4_struct.calib_duty = 0.1f;  // 原点サーチ時のduty
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <mcmdSetting.0+0x114>)
 80015c6:	4a1c      	ldr	r2, [pc, #112]	; (8001638 <mcmdSetting.0+0x120>)
 80015c8:	609a      	str	r2, [r3, #8]
	    mcmd4_struct.offset = 0.0f;  // 原点のオフセット
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <mcmdSetting.0+0x114>)
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
	    mcmd4_struct.fb_type = MCMD_FB_POS;  // 読み取った位置情報をF7にフィードバックする。
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <mcmdSetting.0+0x114>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	70da      	strb	r2, [r3, #3]


	    // パラメータなどの設定と動作命令をMCMDに送信する
	     MCMD_init(&mcmd4_struct);
 80015d8:	4814      	ldr	r0, [pc, #80]	; (800162c <mcmdSetting.0+0x114>)
 80015da:	f7ff fd21 	bl	8001020 <MCMD_init>
	     HAL_Delay(10);
 80015de:	200a      	movs	r0, #10
 80015e0:	f000 ffa6 	bl	8002530 <HAL_Delay>
	     MCMD_Calib(&mcmd4_struct);  // キャリブレーションを行う
 80015e4:	4811      	ldr	r0, [pc, #68]	; (800162c <mcmdSetting.0+0x114>)
 80015e6:	f7ff fd6b 	bl	80010c0 <MCMD_Calib>
	     HAL_Delay(2000);  // キャリブレーションが終わるまで待つ
 80015ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015ee:	f000 ff9f 	bl	8002530 <HAL_Delay>
	     MCMD_SetTarget(&mcmd4_struct, 30.0f);  // 目標値(0.0)を設定
 80015f2:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80015f6:	480d      	ldr	r0, [pc, #52]	; (800162c <mcmdSetting.0+0x114>)
 80015f8:	f7ff fd8e 	bl	8001118 <MCMD_SetTarget>
	     HAL_Delay(10);
 80015fc:	200a      	movs	r0, #10
 80015fe:	f000 ff97 	bl	8002530 <HAL_Delay>
	     MCMD_Control_Enable(&mcmd4_struct);  // 制御開始
 8001602:	480a      	ldr	r0, [pc, #40]	; (800162c <mcmdSetting.0+0x114>)
 8001604:	f7ff fd72 	bl	80010ec <MCMD_Control_Enable>
	     printf("start");
 8001608:	480c      	ldr	r0, [pc, #48]	; (800163c <mcmdSetting.0+0x124>)
 800160a:	f015 fe17 	bl	801723c <iprintf>
	     HAL_Delay(10);
 800160e:	200a      	movs	r0, #10
 8001610:	f000 ff8e 	bl	8002530 <HAL_Delay>
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	08018504 	.word	0x08018504
 8001620:	200024d0 	.word	0x200024d0
 8001624:	20004408 	.word	0x20004408
 8001628:	0801852c 	.word	0x0801852c
 800162c:	20004410 	.word	0x20004410
 8001630:	3e99999a 	.word	0x3e99999a
 8001634:	3c170a3d 	.word	0x3c170a3d
 8001638:	3dcccccd 	.word	0x3dcccccd
 800163c:	08018550 	.word	0x08018550

08001640 <main>:
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
int main(void)
 8001646:	f107 0310 	add.w	r3, r7, #16
 800164a:	607b      	str	r3, [r7, #4]
  HAL_Init();
 800164c:	f000 ff42 	bl	80024d4 <HAL_Init>
  SystemClock_Config();
 8001650:	f000 f83e 	bl	80016d0 <SystemClock_Config>
  MX_GPIO_Init();
 8001654:	f000 f960 	bl	8001918 <MX_GPIO_Init>
  MX_DMA_Init();
 8001658:	f000 f940 	bl	80018dc <MX_DMA_Init>
  MX_USART3_UART_Init();
 800165c:	f000 f8e0 	bl	8001820 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001660:	f000 f90e 	bl	8001880 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 8001664:	f000 f8a6 	bl	80017b4 <MX_CAN1_Init>

mcmdSetting();
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	469c      	mov	ip, r3
 800166c:	f7ff ff54 	bl	8001518 <mcmdSetting.0>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001670:	f007 fdf8 	bl	8009264 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001674:	4a0d      	ldr	r2, [pc, #52]	; (80016ac <main+0x6c>)
 8001676:	2100      	movs	r1, #0
 8001678:	480d      	ldr	r0, [pc, #52]	; (80016b0 <main+0x70>)
 800167a:	f007 fe85 	bl	8009388 <osThreadNew>
 800167e:	4603      	mov	r3, r0
 8001680:	4a0c      	ldr	r2, [pc, #48]	; (80016b4 <main+0x74>)
 8001682:	6013      	str	r3, [r2, #0]

  /* creation of systemCheckTask */
  systemCheckTaskHandle = osThreadNew(StartTask02, NULL, &systemCheckTask_attributes);
 8001684:	4a0c      	ldr	r2, [pc, #48]	; (80016b8 <main+0x78>)
 8001686:	2100      	movs	r1, #0
 8001688:	480c      	ldr	r0, [pc, #48]	; (80016bc <main+0x7c>)
 800168a:	f007 fe7d 	bl	8009388 <osThreadNew>
 800168e:	4603      	mov	r3, r0
 8001690:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <main+0x80>)
 8001692:	6013      	str	r3, [r2, #0]

  /* creation of ControllerTask */
  ControllerTaskHandle = osThreadNew(StartTask03, NULL, &ControllerTask_attributes);
 8001694:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <main+0x84>)
 8001696:	2100      	movs	r1, #0
 8001698:	480b      	ldr	r0, [pc, #44]	; (80016c8 <main+0x88>)
 800169a:	f007 fe75 	bl	8009388 <osThreadNew>
 800169e:	4603      	mov	r3, r0
 80016a0:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <main+0x8c>)
 80016a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80016a4:	f007 fe12 	bl	80092cc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <main+0x68>
 80016aa:	bf00      	nop
 80016ac:	0801b074 	.word	0x0801b074
 80016b0:	08001a5d 	.word	0x08001a5d
 80016b4:	20002ae8 	.word	0x20002ae8
 80016b8:	0801b098 	.word	0x0801b098
 80016bc:	08001ad1 	.word	0x08001ad1
 80016c0:	20003348 	.word	0x20003348
 80016c4:	0801b0bc 	.word	0x0801b0bc
 80016c8:	08001aeb 	.word	0x08001aeb
 80016cc:	20003ba8 	.word	0x20003ba8

080016d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b094      	sub	sp, #80	; 0x50
 80016d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	2234      	movs	r2, #52	; 0x34
 80016dc:	2100      	movs	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f015 fda4 	bl	801722c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e4:	f107 0308 	add.w	r3, r7, #8
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80016f4:	f003 ff70 	bl	80055d8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f8:	4b2c      	ldr	r3, [pc, #176]	; (80017ac <SystemClock_Config+0xdc>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	4a2b      	ldr	r2, [pc, #172]	; (80017ac <SystemClock_Config+0xdc>)
 80016fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001702:	6413      	str	r3, [r2, #64]	; 0x40
 8001704:	4b29      	ldr	r3, [pc, #164]	; (80017ac <SystemClock_Config+0xdc>)
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001710:	4b27      	ldr	r3, [pc, #156]	; (80017b0 <SystemClock_Config+0xe0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001718:	4a25      	ldr	r2, [pc, #148]	; (80017b0 <SystemClock_Config+0xe0>)
 800171a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <SystemClock_Config+0xe0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800172c:	2301      	movs	r3, #1
 800172e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001730:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001734:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001736:	2302      	movs	r3, #2
 8001738:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800173a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800173e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001740:	2304      	movs	r3, #4
 8001742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001744:	2360      	movs	r3, #96	; 0x60
 8001746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001748:	2302      	movs	r3, #2
 800174a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800174c:	2304      	movs	r3, #4
 800174e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001750:	2302      	movs	r3, #2
 8001752:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001754:	f107 031c 	add.w	r3, r7, #28
 8001758:	4618      	mov	r0, r3
 800175a:	f003 ff9d 	bl	8005698 <HAL_RCC_OscConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001764:	f000 f9dc 	bl	8001b20 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001768:	f003 ff46 	bl	80055f8 <HAL_PWREx_EnableOverDrive>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001772:	f000 f9d5 	bl	8001b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001776:	230f      	movs	r3, #15
 8001778:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800177a:	2302      	movs	r3, #2
 800177c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001786:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001788:	2300      	movs	r3, #0
 800178a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800178c:	f107 0308 	add.w	r3, r7, #8
 8001790:	2103      	movs	r1, #3
 8001792:	4618      	mov	r0, r3
 8001794:	f004 fa2e 	bl	8005bf4 <HAL_RCC_ClockConfig>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800179e:	f000 f9bf 	bl	8001b20 <Error_Handler>
  }
}
 80017a2:	bf00      	nop
 80017a4:	3750      	adds	r7, #80	; 0x50
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40007000 	.word	0x40007000

080017b4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80017b8:	4b17      	ldr	r3, [pc, #92]	; (8001818 <MX_CAN1_Init+0x64>)
 80017ba:	4a18      	ldr	r2, [pc, #96]	; (800181c <MX_CAN1_Init+0x68>)
 80017bc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80017be:	4b16      	ldr	r3, [pc, #88]	; (8001818 <MX_CAN1_Init+0x64>)
 80017c0:	2206      	movs	r2, #6
 80017c2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80017c4:	4b14      	ldr	r3, [pc, #80]	; (8001818 <MX_CAN1_Init+0x64>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <MX_CAN1_Init+0x64>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_CAN1_Init+0x64>)
 80017d2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80017d6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <MX_CAN1_Init+0x64>)
 80017da:	2200      	movs	r2, #0
 80017dc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <MX_CAN1_Init+0x64>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <MX_CAN1_Init+0x64>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <MX_CAN1_Init+0x64>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <MX_CAN1_Init+0x64>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80017f6:	4b08      	ldr	r3, [pc, #32]	; (8001818 <MX_CAN1_Init+0x64>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <MX_CAN1_Init+0x64>)
 80017fe:	2201      	movs	r2, #1
 8001800:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001802:	4805      	ldr	r0, [pc, #20]	; (8001818 <MX_CAN1_Init+0x64>)
 8001804:	f000 feb8 	bl	8002578 <HAL_CAN_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800180e:	f000 f987 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200024d0 	.word	0x200024d0
 800181c:	40006400 	.word	0x40006400

08001820 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <MX_USART3_UART_Init+0x58>)
 8001826:	4a15      	ldr	r2, [pc, #84]	; (800187c <MX_USART3_UART_Init+0x5c>)
 8001828:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800182a:	4b13      	ldr	r3, [pc, #76]	; (8001878 <MX_USART3_UART_Init+0x58>)
 800182c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001830:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <MX_USART3_UART_Init+0x58>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <MX_USART3_UART_Init+0x58>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <MX_USART3_UART_Init+0x58>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <MX_USART3_UART_Init+0x58>)
 8001846:	220c      	movs	r2, #12
 8001848:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <MX_USART3_UART_Init+0x58>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <MX_USART3_UART_Init+0x58>)
 8001852:	2200      	movs	r2, #0
 8001854:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <MX_USART3_UART_Init+0x58>)
 8001858:	2200      	movs	r2, #0
 800185a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <MX_USART3_UART_Init+0x58>)
 800185e:	2200      	movs	r2, #0
 8001860:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001862:	4805      	ldr	r0, [pc, #20]	; (8001878 <MX_USART3_UART_Init+0x58>)
 8001864:	f005 fb26 	bl	8006eb4 <HAL_UART_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800186e:	f000 f957 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200024f8 	.word	0x200024f8
 800187c:	40004800 	.word	0x40004800

08001880 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001884:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001886:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800188a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800188e:	2206      	movs	r2, #6
 8001890:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001894:	2202      	movs	r2, #2
 8001896:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800189a:	2200      	movs	r2, #0
 800189c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018a0:	2202      	movs	r2, #2
 80018a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80018b6:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018be:	2200      	movs	r2, #0
 80018c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80018c2:	4805      	ldr	r0, [pc, #20]	; (80018d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018c4:	f003 fd3f 	bl	8005346 <HAL_PCD_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80018ce:	f000 f927 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200025e0 	.word	0x200025e0

080018dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <MX_DMA_Init+0x38>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a0b      	ldr	r2, [pc, #44]	; (8001914 <MX_DMA_Init+0x38>)
 80018e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <MX_DMA_Init+0x38>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2105      	movs	r1, #5
 80018fe:	200e      	movs	r0, #14
 8001900:	f001 fd4e 	bl	80033a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001904:	200e      	movs	r0, #14
 8001906:	f001 fd67 	bl	80033d8 <HAL_NVIC_EnableIRQ>

}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800

08001918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08c      	sub	sp, #48	; 0x30
 800191c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191e:	f107 031c 	add.w	r3, r7, #28
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
 800192c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800192e:	4b47      	ldr	r3, [pc, #284]	; (8001a4c <MX_GPIO_Init+0x134>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a46      	ldr	r2, [pc, #280]	; (8001a4c <MX_GPIO_Init+0x134>)
 8001934:	f043 0304 	orr.w	r3, r3, #4
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b44      	ldr	r3, [pc, #272]	; (8001a4c <MX_GPIO_Init+0x134>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	61bb      	str	r3, [r7, #24]
 8001944:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001946:	4b41      	ldr	r3, [pc, #260]	; (8001a4c <MX_GPIO_Init+0x134>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a40      	ldr	r2, [pc, #256]	; (8001a4c <MX_GPIO_Init+0x134>)
 800194c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b3e      	ldr	r3, [pc, #248]	; (8001a4c <MX_GPIO_Init+0x134>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	4b3b      	ldr	r3, [pc, #236]	; (8001a4c <MX_GPIO_Init+0x134>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a3a      	ldr	r2, [pc, #232]	; (8001a4c <MX_GPIO_Init+0x134>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b38      	ldr	r3, [pc, #224]	; (8001a4c <MX_GPIO_Init+0x134>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001976:	4b35      	ldr	r3, [pc, #212]	; (8001a4c <MX_GPIO_Init+0x134>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a34      	ldr	r2, [pc, #208]	; (8001a4c <MX_GPIO_Init+0x134>)
 800197c:	f043 0302 	orr.w	r3, r3, #2
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b32      	ldr	r3, [pc, #200]	; (8001a4c <MX_GPIO_Init+0x134>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800198e:	4b2f      	ldr	r3, [pc, #188]	; (8001a4c <MX_GPIO_Init+0x134>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a2e      	ldr	r2, [pc, #184]	; (8001a4c <MX_GPIO_Init+0x134>)
 8001994:	f043 0308 	orr.w	r3, r3, #8
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b2c      	ldr	r3, [pc, #176]	; (8001a4c <MX_GPIO_Init+0x134>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019a6:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <MX_GPIO_Init+0x134>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a28      	ldr	r2, [pc, #160]	; (8001a4c <MX_GPIO_Init+0x134>)
 80019ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <MX_GPIO_Init+0x134>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80019be:	2200      	movs	r2, #0
 80019c0:	f244 0181 	movw	r1, #16513	; 0x4081
 80019c4:	4822      	ldr	r0, [pc, #136]	; (8001a50 <MX_GPIO_Init+0x138>)
 80019c6:	f003 fc8b 	bl	80052e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2140      	movs	r1, #64	; 0x40
 80019ce:	4821      	ldr	r0, [pc, #132]	; (8001a54 <MX_GPIO_Init+0x13c>)
 80019d0:	f003 fc86 	bl	80052e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80019d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80019e4:	f107 031c 	add.w	r3, r7, #28
 80019e8:	4619      	mov	r1, r3
 80019ea:	481b      	ldr	r0, [pc, #108]	; (8001a58 <MX_GPIO_Init+0x140>)
 80019ec:	f003 facc 	bl	8004f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80019f0:	f244 0381 	movw	r3, #16513	; 0x4081
 80019f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f6:	2301      	movs	r3, #1
 80019f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a02:	f107 031c 	add.w	r3, r7, #28
 8001a06:	4619      	mov	r1, r3
 8001a08:	4811      	ldr	r0, [pc, #68]	; (8001a50 <MX_GPIO_Init+0x138>)
 8001a0a:	f003 fabd 	bl	8004f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001a0e:	2340      	movs	r3, #64	; 0x40
 8001a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a12:	2301      	movs	r3, #1
 8001a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a1e:	f107 031c 	add.w	r3, r7, #28
 8001a22:	4619      	mov	r1, r3
 8001a24:	480b      	ldr	r0, [pc, #44]	; (8001a54 <MX_GPIO_Init+0x13c>)
 8001a26:	f003 faaf 	bl	8004f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a36:	f107 031c 	add.w	r3, r7, #28
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4805      	ldr	r0, [pc, #20]	; (8001a54 <MX_GPIO_Init+0x13c>)
 8001a3e:	f003 faa3 	bl	8004f88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a42:	bf00      	nop
 8001a44:	3730      	adds	r7, #48	; 0x30
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020400 	.word	0x40020400
 8001a54:	40021800 	.word	0x40021800
 8001a58:	40020800 	.word	0x40020800

08001a5c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001a64:	f006 fdbc 	bl	80085e0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1000);
 8001a68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a6c:	f007 fd32 	bl	80094d4 <osDelay>
 8001a70:	e7fa      	b.n	8001a68 <StartDefaultTask+0xc>
	...

08001a74 <freeRTOSChecker>:
/**
* @brief Function implementing the systemCheckTask thread.
* @param argument: Not used
* @retval None
*/
void freeRTOSChecker(){//無限ループの中で実行
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, LD2_Pin);  // PINのPin stateを反転
 8001a78:	2180      	movs	r1, #128	; 0x80
 8001a7a:	4802      	ldr	r0, [pc, #8]	; (8001a84 <freeRTOSChecker+0x10>)
 8001a7c:	f003 fc49 	bl	8005312 <HAL_GPIO_TogglePin>
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40020400 	.word	0x40020400

08001a88 <mcmdChecker>:

void mcmdChecker(){//無限ループの中で実行
 8001a88:	b590      	push	{r4, r7, lr}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
	mcmd_fb = Get_MCMD_Feedback(&(mcmd4_struct.device));
 8001a8e:	4c0d      	ldr	r4, [pc, #52]	; (8001ac4 <mcmdChecker+0x3c>)
 8001a90:	463b      	mov	r3, r7
 8001a92:	490d      	ldr	r1, [pc, #52]	; (8001ac8 <mcmdChecker+0x40>)
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fb57 	bl	8001148 <Get_MCMD_Feedback>
 8001a9a:	4622      	mov	r2, r4
 8001a9c:	463b      	mov	r3, r7
 8001a9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001aa2:	e882 0003 	stmia.w	r2, {r0, r1}
	printf("value of tyokudou %d\r\n",(int)(mcmd_fb.value));
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <mcmdChecker+0x3c>)
 8001aa8:	edd3 7a00 	vldr	s15, [r3]
 8001aac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ab0:	ee17 1a90 	vmov	r1, s15
 8001ab4:	4805      	ldr	r0, [pc, #20]	; (8001acc <mcmdChecker+0x44>)
 8001ab6:	f015 fbc1 	bl	801723c <iprintf>
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd90      	pop	{r4, r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20004450 	.word	0x20004450
 8001ac8:	20004410 	.word	0x20004410
 8001acc:	08018558 	.word	0x08018558

08001ad0 <StartTask02>:
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  freeRTOSChecker();
 8001ad8:	f7ff ffcc 	bl	8001a74 <freeRTOSChecker>
	  mcmdChecker();
 8001adc:	f7ff ffd4 	bl	8001a88 <mcmdChecker>
      osDelay(1000);
 8001ae0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ae4:	f007 fcf6 	bl	80094d4 <osDelay>
	  freeRTOSChecker();
 8001ae8:	e7f6      	b.n	8001ad8 <StartTask02+0x8>

08001aea <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001af2:	2001      	movs	r0, #1
 8001af4:	f007 fcee 	bl	80094d4 <osDelay>
 8001af8:	e7fb      	b.n	8001af2 <StartTask03+0x8>
	...

08001afc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d101      	bne.n	8001b12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b0e:	f000 fcef 	bl	80024f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40002000 	.word	0x40002000

08001b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b24:	b672      	cpsid	i
}
 8001b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <Error_Handler+0x8>
	...

08001b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <HAL_MspInit+0x4c>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	4a10      	ldr	r2, [pc, #64]	; (8001b78 <HAL_MspInit+0x4c>)
 8001b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <HAL_MspInit+0x4c>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_MspInit+0x4c>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <HAL_MspInit+0x4c>)
 8001b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b54:	6453      	str	r3, [r2, #68]	; 0x44
 8001b56:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <HAL_MspInit+0x4c>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	210f      	movs	r1, #15
 8001b66:	f06f 0001 	mvn.w	r0, #1
 8001b6a:	f001 fc19 	bl	80033a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800

08001b7c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	; 0x28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a23      	ldr	r2, [pc, #140]	; (8001c28 <HAL_CAN_MspInit+0xac>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d13f      	bne.n	8001c1e <HAL_CAN_MspInit+0xa2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b9e:	4b23      	ldr	r3, [pc, #140]	; (8001c2c <HAL_CAN_MspInit+0xb0>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	4a22      	ldr	r2, [pc, #136]	; (8001c2c <HAL_CAN_MspInit+0xb0>)
 8001ba4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8001baa:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <HAL_CAN_MspInit+0xb0>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb6:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <HAL_CAN_MspInit+0xb0>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a1c      	ldr	r2, [pc, #112]	; (8001c2c <HAL_CAN_MspInit+0xb0>)
 8001bbc:	f043 0308 	orr.w	r3, r3, #8
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b1a      	ldr	r3, [pc, #104]	; (8001c2c <HAL_CAN_MspInit+0xb0>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001bde:	2309      	movs	r3, #9
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be2:	f107 0314 	add.w	r3, r7, #20
 8001be6:	4619      	mov	r1, r3
 8001be8:	4811      	ldr	r0, [pc, #68]	; (8001c30 <HAL_CAN_MspInit+0xb4>)
 8001bea:	f003 f9cd 	bl	8004f88 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2105      	movs	r1, #5
 8001bf2:	2013      	movs	r0, #19
 8001bf4:	f001 fbd4 	bl	80033a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001bf8:	2013      	movs	r0, #19
 8001bfa:	f001 fbed 	bl	80033d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2105      	movs	r1, #5
 8001c02:	2014      	movs	r0, #20
 8001c04:	f001 fbcc 	bl	80033a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001c08:	2014      	movs	r0, #20
 8001c0a:	f001 fbe5 	bl	80033d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2105      	movs	r1, #5
 8001c12:	2015      	movs	r0, #21
 8001c14:	f001 fbc4 	bl	80033a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001c18:	2015      	movs	r0, #21
 8001c1a:	f001 fbdd 	bl	80033d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001c1e:	bf00      	nop
 8001c20:	3728      	adds	r7, #40	; 0x28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40006400 	.word	0x40006400
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40020c00 	.word	0x40020c00

08001c34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b0ae      	sub	sp, #184	; 0xb8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	2290      	movs	r2, #144	; 0x90
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f015 fae9 	bl	801722c <memset>
  if(huart->Instance==USART3)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a3d      	ldr	r2, [pc, #244]	; (8001d54 <HAL_UART_MspInit+0x120>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d172      	bne.n	8001d4a <HAL_UART_MspInit+0x116>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c68:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	4618      	mov	r0, r3
 8001c74:	f004 fa16 	bl	80060a4 <HAL_RCCEx_PeriphCLKConfig>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001c7e:	f7ff ff4f 	bl	8001b20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c82:	4b35      	ldr	r3, [pc, #212]	; (8001d58 <HAL_UART_MspInit+0x124>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a34      	ldr	r2, [pc, #208]	; (8001d58 <HAL_UART_MspInit+0x124>)
 8001c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b32      	ldr	r3, [pc, #200]	; (8001d58 <HAL_UART_MspInit+0x124>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c9a:	4b2f      	ldr	r3, [pc, #188]	; (8001d58 <HAL_UART_MspInit+0x124>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a2e      	ldr	r2, [pc, #184]	; (8001d58 <HAL_UART_MspInit+0x124>)
 8001ca0:	f043 0308 	orr.w	r3, r3, #8
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b2c      	ldr	r3, [pc, #176]	; (8001d58 <HAL_UART_MspInit+0x124>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001cb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ccc:	2307      	movs	r3, #7
 8001cce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4820      	ldr	r0, [pc, #128]	; (8001d5c <HAL_UART_MspInit+0x128>)
 8001cda:	f003 f955 	bl	8004f88 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001cde:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <HAL_UART_MspInit+0x12c>)
 8001ce0:	4a20      	ldr	r2, [pc, #128]	; (8001d64 <HAL_UART_MspInit+0x130>)
 8001ce2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001ce4:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <HAL_UART_MspInit+0x12c>)
 8001ce6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cea:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cec:	4b1c      	ldr	r3, [pc, #112]	; (8001d60 <HAL_UART_MspInit+0x12c>)
 8001cee:	2240      	movs	r2, #64	; 0x40
 8001cf0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <HAL_UART_MspInit+0x12c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cf8:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <HAL_UART_MspInit+0x12c>)
 8001cfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cfe:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d00:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <HAL_UART_MspInit+0x12c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d06:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <HAL_UART_MspInit+0x12c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001d0c:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <HAL_UART_MspInit+0x12c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d12:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <HAL_UART_MspInit+0x12c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <HAL_UART_MspInit+0x12c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001d1e:	4810      	ldr	r0, [pc, #64]	; (8001d60 <HAL_UART_MspInit+0x12c>)
 8001d20:	f001 fb68 	bl	80033f4 <HAL_DMA_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001d2a:	f7ff fef9 	bl	8001b20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a0b      	ldr	r2, [pc, #44]	; (8001d60 <HAL_UART_MspInit+0x12c>)
 8001d32:	671a      	str	r2, [r3, #112]	; 0x70
 8001d34:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <HAL_UART_MspInit+0x12c>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2105      	movs	r1, #5
 8001d3e:	2027      	movs	r0, #39	; 0x27
 8001d40:	f001 fb2e 	bl	80033a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d44:	2027      	movs	r0, #39	; 0x27
 8001d46:	f001 fb47 	bl	80033d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d4a:	bf00      	nop
 8001d4c:	37b8      	adds	r7, #184	; 0xb8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40004800 	.word	0x40004800
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40020c00 	.word	0x40020c00
 8001d60:	20002580 	.word	0x20002580
 8001d64:	40026058 	.word	0x40026058

08001d68 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b0ae      	sub	sp, #184	; 0xb8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	2290      	movs	r2, #144	; 0x90
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f015 fa4f 	bl	801722c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d96:	d159      	bne.n	8001e4c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001d98:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d9c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4618      	mov	r0, r3
 8001daa:	f004 f97b 	bl	80060a4 <HAL_RCCEx_PeriphCLKConfig>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001db4:	f7ff feb4 	bl	8001b20 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db8:	4b26      	ldr	r3, [pc, #152]	; (8001e54 <HAL_PCD_MspInit+0xec>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	4a25      	ldr	r2, [pc, #148]	; (8001e54 <HAL_PCD_MspInit+0xec>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc4:	4b23      	ldr	r3, [pc, #140]	; (8001e54 <HAL_PCD_MspInit+0xec>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001dd0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001dd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de4:	2303      	movs	r3, #3
 8001de6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001dea:	230a      	movs	r3, #10
 8001dec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001df4:	4619      	mov	r1, r3
 8001df6:	4818      	ldr	r0, [pc, #96]	; (8001e58 <HAL_PCD_MspInit+0xf0>)
 8001df8:	f003 f8c6 	bl	8004f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001dfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e14:	4619      	mov	r1, r3
 8001e16:	4810      	ldr	r0, [pc, #64]	; (8001e58 <HAL_PCD_MspInit+0xf0>)
 8001e18:	f003 f8b6 	bl	8004f88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e1c:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <HAL_PCD_MspInit+0xec>)
 8001e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e20:	4a0c      	ldr	r2, [pc, #48]	; (8001e54 <HAL_PCD_MspInit+0xec>)
 8001e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e26:	6353      	str	r3, [r2, #52]	; 0x34
 8001e28:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <HAL_PCD_MspInit+0xec>)
 8001e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <HAL_PCD_MspInit+0xec>)
 8001e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e38:	4a06      	ldr	r2, [pc, #24]	; (8001e54 <HAL_PCD_MspInit+0xec>)
 8001e3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e3e:	6453      	str	r3, [r2, #68]	; 0x44
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <HAL_PCD_MspInit+0xec>)
 8001e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001e4c:	bf00      	nop
 8001e4e:	37b8      	adds	r7, #184	; 0xb8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40020000 	.word	0x40020000

08001e5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08e      	sub	sp, #56	; 0x38
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001e6c:	4b33      	ldr	r3, [pc, #204]	; (8001f3c <HAL_InitTick+0xe0>)
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	4a32      	ldr	r2, [pc, #200]	; (8001f3c <HAL_InitTick+0xe0>)
 8001e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e76:	6413      	str	r3, [r2, #64]	; 0x40
 8001e78:	4b30      	ldr	r3, [pc, #192]	; (8001f3c <HAL_InitTick+0xe0>)
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e84:	f107 0210 	add.w	r2, r7, #16
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	4611      	mov	r1, r2
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f004 f8d6 	bl	8006040 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d103      	bne.n	8001ea6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e9e:	f004 f8a7 	bl	8005ff0 <HAL_RCC_GetPCLK1Freq>
 8001ea2:	6378      	str	r0, [r7, #52]	; 0x34
 8001ea4:	e004      	b.n	8001eb0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ea6:	f004 f8a3 	bl	8005ff0 <HAL_RCC_GetPCLK1Freq>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb2:	4a23      	ldr	r2, [pc, #140]	; (8001f40 <HAL_InitTick+0xe4>)
 8001eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb8:	0c9b      	lsrs	r3, r3, #18
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001ebe:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <HAL_InitTick+0xe8>)
 8001ec0:	4a21      	ldr	r2, [pc, #132]	; (8001f48 <HAL_InitTick+0xec>)
 8001ec2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001ec4:	4b1f      	ldr	r3, [pc, #124]	; (8001f44 <HAL_InitTick+0xe8>)
 8001ec6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001eca:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001ecc:	4a1d      	ldr	r2, [pc, #116]	; (8001f44 <HAL_InitTick+0xe8>)
 8001ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed0:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <HAL_InitTick+0xe8>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed8:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <HAL_InitTick+0xe8>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ede:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <HAL_InitTick+0xe8>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001ee4:	4817      	ldr	r0, [pc, #92]	; (8001f44 <HAL_InitTick+0xe8>)
 8001ee6:	f004 fd05 	bl	80068f4 <HAL_TIM_Base_Init>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001ef0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d11b      	bne.n	8001f30 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8001ef8:	4812      	ldr	r0, [pc, #72]	; (8001f44 <HAL_InitTick+0xe8>)
 8001efa:	f004 fd5d 	bl	80069b8 <HAL_TIM_Base_Start_IT>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001f04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d111      	bne.n	8001f30 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001f0c:	202d      	movs	r0, #45	; 0x2d
 8001f0e:	f001 fa63 	bl	80033d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b0f      	cmp	r3, #15
 8001f16:	d808      	bhi.n	8001f2a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	202d      	movs	r0, #45	; 0x2d
 8001f1e:	f001 fa3f 	bl	80033a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <HAL_InitTick+0xf0>)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	e002      	b.n	8001f30 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3738      	adds	r7, #56	; 0x38
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	431bde83 	.word	0x431bde83
 8001f44:	20004458 	.word	0x20004458
 8001f48:	40002000 	.word	0x40002000
 8001f4c:	20000004 	.word	0x20000004

08001f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f54:	e7fe      	b.n	8001f54 <NMI_Handler+0x4>

08001f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f5a:	e7fe      	b.n	8001f5a <HardFault_Handler+0x4>

08001f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <MemManage_Handler+0x4>

08001f62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f66:	e7fe      	b.n	8001f66 <BusFault_Handler+0x4>

08001f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <UsageFault_Handler+0x4>

08001f6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001f80:	4802      	ldr	r0, [pc, #8]	; (8001f8c <DMA1_Stream3_IRQHandler+0x10>)
 8001f82:	f001 fb77 	bl	8003674 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20002580 	.word	0x20002580

08001f90 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f94:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <CAN1_TX_IRQHandler+0x10>)
 8001f96:	f000 ff58 	bl	8002e4a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200024d0 	.word	0x200024d0

08001fa4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001fa8:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <CAN1_RX0_IRQHandler+0x10>)
 8001faa:	f000 ff4e 	bl	8002e4a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	200024d0 	.word	0x200024d0

08001fb8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001fbc:	4802      	ldr	r0, [pc, #8]	; (8001fc8 <CAN1_RX1_IRQHandler+0x10>)
 8001fbe:	f000 ff44 	bl	8002e4a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	200024d0 	.word	0x200024d0

08001fcc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001fd0:	4802      	ldr	r0, [pc, #8]	; (8001fdc <USART3_IRQHandler+0x10>)
 8001fd2:	f005 f841 	bl	8007058 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	200024f8 	.word	0x200024f8

08001fe0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001fe4:	4802      	ldr	r0, [pc, #8]	; (8001ff0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001fe6:	f004 fd5f 	bl	8006aa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20004458 	.word	0x20004458

08001ff4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001ff8:	4802      	ldr	r0, [pc, #8]	; (8002004 <ETH_IRQHandler+0x10>)
 8001ffa:	f002 f8f1 	bl	80041e0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20008eb0 	.word	0x20008eb0

08002008 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return 1;
 800200c:	2301      	movs	r3, #1
}
 800200e:	4618      	mov	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <_kill>:

int _kill(int pid, int sig)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002022:	4b05      	ldr	r3, [pc, #20]	; (8002038 <_kill+0x20>)
 8002024:	2216      	movs	r2, #22
 8002026:	601a      	str	r2, [r3, #0]
  return -1;
 8002028:	f04f 33ff 	mov.w	r3, #4294967295
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	200111c0 	.word	0x200111c0

0800203c <_exit>:

void _exit (int status)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002044:	f04f 31ff 	mov.w	r1, #4294967295
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff ffe5 	bl	8002018 <_kill>
  while (1) {}    /* Make sure we hang here */
 800204e:	e7fe      	b.n	800204e <_exit+0x12>

08002050 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	e00a      	b.n	8002078 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002062:	f3af 8000 	nop.w
 8002066:	4601      	mov	r1, r0
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	60ba      	str	r2, [r7, #8]
 800206e:	b2ca      	uxtb	r2, r1
 8002070:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	3301      	adds	r3, #1
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	429a      	cmp	r2, r3
 800207e:	dbf0      	blt.n	8002062 <_read+0x12>
  }

  return len;
 8002080:	687b      	ldr	r3, [r7, #4]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b086      	sub	sp, #24
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	e009      	b.n	80020b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	60ba      	str	r2, [r7, #8]
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff f9d9 	bl	800145c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	3301      	adds	r3, #1
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	dbf1      	blt.n	800209c <_write+0x12>
  }
  return len;
 80020b8:	687b      	ldr	r3, [r7, #4]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <_close>:

int _close(int file)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020ea:	605a      	str	r2, [r3, #4]
  return 0;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <_isatty>:

int _isatty(int file)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002102:	2301      	movs	r3, #1
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800212c:	b480      	push	{r7}
 800212e:	b087      	sub	sp, #28
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002134:	4a14      	ldr	r2, [pc, #80]	; (8002188 <_sbrk+0x5c>)
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <_sbrk+0x60>)
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002140:	4b13      	ldr	r3, [pc, #76]	; (8002190 <_sbrk+0x64>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d102      	bne.n	800214e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <_sbrk+0x64>)
 800214a:	4a12      	ldr	r2, [pc, #72]	; (8002194 <_sbrk+0x68>)
 800214c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <_sbrk+0x64>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	429a      	cmp	r2, r3
 800215a:	d205      	bcs.n	8002168 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800215c:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <_sbrk+0x6c>)
 800215e:	220c      	movs	r2, #12
 8002160:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002162:	f04f 33ff 	mov.w	r3, #4294967295
 8002166:	e009      	b.n	800217c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002168:	4b09      	ldr	r3, [pc, #36]	; (8002190 <_sbrk+0x64>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800216e:	4b08      	ldr	r3, [pc, #32]	; (8002190 <_sbrk+0x64>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4413      	add	r3, r2
 8002176:	4a06      	ldr	r2, [pc, #24]	; (8002190 <_sbrk+0x64>)
 8002178:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800217a:	68fb      	ldr	r3, [r7, #12]
}
 800217c:	4618      	mov	r0, r3
 800217e:	371c      	adds	r7, #28
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	20080000 	.word	0x20080000
 800218c:	00000400 	.word	0x00000400
 8002190:	200044a4 	.word	0x200044a4
 8002194:	200111d8 	.word	0x200111d8
 8002198:	200111c0 	.word	0x200111c0

0800219c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <SystemInit+0x20>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a6:	4a05      	ldr	r2, [pc, #20]	; (80021bc <SystemInit+0x20>)
 80021a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021c4:	480d      	ldr	r0, [pc, #52]	; (80021fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021c6:	490e      	ldr	r1, [pc, #56]	; (8002200 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021c8:	4a0e      	ldr	r2, [pc, #56]	; (8002204 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021cc:	e002      	b.n	80021d4 <LoopCopyDataInit>

080021ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021d2:	3304      	adds	r3, #4

080021d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021d8:	d3f9      	bcc.n	80021ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021da:	4a0b      	ldr	r2, [pc, #44]	; (8002208 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021dc:	4c0b      	ldr	r4, [pc, #44]	; (800220c <LoopFillZerobss+0x26>)
  movs r3, #0
 80021de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e0:	e001      	b.n	80021e6 <LoopFillZerobss>

080021e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e4:	3204      	adds	r2, #4

080021e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021e8:	d3fb      	bcc.n	80021e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021ea:	f7ff ffd7 	bl	800219c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ee:	f014 ffdb 	bl	80171a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021f2:	f7ff fa25 	bl	8001640 <main>
  bx  lr    
 80021f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021f8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80021fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002200:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002204:	0801b388 	.word	0x0801b388
  ldr r2, =_sbss
 8002208:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800220c:	200111d4 	.word	0x200111d4

08002210 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002210:	e7fe      	b.n	8002210 <ADC_IRQHandler>

08002212 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00b      	beq.n	800223a <LAN8742_RegisterBusIO+0x28>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <LAN8742_RegisterBusIO+0x28>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <LAN8742_RegisterBusIO+0x28>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d102      	bne.n	8002240 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800223a:	f04f 33ff 	mov.w	r3, #4294967295
 800223e:	e014      	b.n	800226a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002276:	b580      	push	{r7, lr}
 8002278:	b086      	sub	sp, #24
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	2300      	movs	r3, #0
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d17c      	bne.n	8002390 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d002      	beq.n	80022a4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2220      	movs	r2, #32
 80022a8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	e01c      	b.n	80022ea <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	f107 0208 	add.w	r2, r7, #8
 80022b8:	2112      	movs	r1, #18
 80022ba:	6978      	ldr	r0, [r7, #20]
 80022bc:	4798      	blx	r3
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	da03      	bge.n	80022cc <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80022c4:	f06f 0304 	mvn.w	r3, #4
 80022c8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80022ca:	e00b      	b.n	80022e4 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f003 031f 	and.w	r3, r3, #31
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d105      	bne.n	80022e4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
         break;
 80022e2:	e005      	b.n	80022f0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	3301      	adds	r3, #1
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2b1f      	cmp	r3, #31
 80022ee:	d9df      	bls.n	80022b0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b1f      	cmp	r3, #31
 80022f6:	d902      	bls.n	80022fe <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80022f8:	f06f 0302 	mvn.w	r3, #2
 80022fc:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d145      	bne.n	8002390 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6810      	ldr	r0, [r2, #0]
 800230c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002310:	2100      	movs	r1, #0
 8002312:	4798      	blx	r3
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	db37      	blt.n	800238a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6810      	ldr	r0, [r2, #0]
 8002322:	f107 0208 	add.w	r2, r7, #8
 8002326:	2100      	movs	r1, #0
 8002328:	4798      	blx	r3
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	db28      	blt.n	8002382 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	4798      	blx	r3
 8002336:	4603      	mov	r3, r0
 8002338:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800233a:	e01c      	b.n	8002376 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	4798      	blx	r3
 8002342:	4603      	mov	r3, r0
 8002344:	461a      	mov	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800234e:	d80e      	bhi.n	800236e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6810      	ldr	r0, [r2, #0]
 8002358:	f107 0208 	add.w	r2, r7, #8
 800235c:	2100      	movs	r1, #0
 800235e:	4798      	blx	r3
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	da07      	bge.n	8002376 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8002366:	f06f 0304 	mvn.w	r3, #4
 800236a:	613b      	str	r3, [r7, #16]
                 break;
 800236c:	e010      	b.n	8002390 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800236e:	f06f 0301 	mvn.w	r3, #1
 8002372:	613b      	str	r3, [r7, #16]
               break;
 8002374:	e00c      	b.n	8002390 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1dd      	bne.n	800233c <LAN8742_Init+0xc6>
 8002380:	e006      	b.n	8002390 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002382:	f06f 0304 	mvn.w	r3, #4
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	e002      	b.n	8002390 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800238a:	f06f 0303 	mvn.w	r3, #3
 800238e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d112      	bne.n	80023bc <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	4798      	blx	r3
 800239c:	4603      	mov	r3, r0
 800239e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80023a0:	bf00      	nop
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	4798      	blx	r3
 80023a8:	4603      	mov	r3, r0
 80023aa:	461a      	mov	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80023b4:	d9f5      	bls.n	80023a2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80023bc:	693b      	ldr	r3, [r7, #16]
 }
 80023be:	4618      	mov	r0, r3
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b084      	sub	sp, #16
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6810      	ldr	r0, [r2, #0]
 80023da:	f107 020c 	add.w	r2, r7, #12
 80023de:	2101      	movs	r1, #1
 80023e0:	4798      	blx	r3
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	da02      	bge.n	80023ee <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80023e8:	f06f 0304 	mvn.w	r3, #4
 80023ec:	e06e      	b.n	80024cc <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6810      	ldr	r0, [r2, #0]
 80023f6:	f107 020c 	add.w	r2, r7, #12
 80023fa:	2101      	movs	r1, #1
 80023fc:	4798      	blx	r3
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	da02      	bge.n	800240a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002404:	f06f 0304 	mvn.w	r3, #4
 8002408:	e060      	b.n	80024cc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8002414:	2301      	movs	r3, #1
 8002416:	e059      	b.n	80024cc <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6810      	ldr	r0, [r2, #0]
 8002420:	f107 020c 	add.w	r2, r7, #12
 8002424:	2100      	movs	r1, #0
 8002426:	4798      	blx	r3
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	da02      	bge.n	8002434 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800242e:	f06f 0304 	mvn.w	r3, #4
 8002432:	e04b      	b.n	80024cc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d11b      	bne.n	8002476 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d006      	beq.n	8002456 <LAN8742_GetLinkState+0x90>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002452:	2302      	movs	r3, #2
 8002454:	e03a      	b.n	80024cc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002460:	2303      	movs	r3, #3
 8002462:	e033      	b.n	80024cc <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800246e:	2304      	movs	r3, #4
 8002470:	e02c      	b.n	80024cc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002472:	2305      	movs	r3, #5
 8002474:	e02a      	b.n	80024cc <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6810      	ldr	r0, [r2, #0]
 800247e:	f107 020c 	add.w	r2, r7, #12
 8002482:	211f      	movs	r1, #31
 8002484:	4798      	blx	r3
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	da02      	bge.n	8002492 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800248c:	f06f 0304 	mvn.w	r3, #4
 8002490:	e01c      	b.n	80024cc <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800249c:	2306      	movs	r3, #6
 800249e:	e015      	b.n	80024cc <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 031c 	and.w	r3, r3, #28
 80024a6:	2b18      	cmp	r3, #24
 80024a8:	d101      	bne.n	80024ae <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80024aa:	2302      	movs	r3, #2
 80024ac:	e00e      	b.n	80024cc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f003 031c 	and.w	r3, r3, #28
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d101      	bne.n	80024bc <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e007      	b.n	80024cc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f003 031c 	and.w	r3, r3, #28
 80024c2:	2b14      	cmp	r3, #20
 80024c4:	d101      	bne.n	80024ca <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80024c6:	2304      	movs	r3, #4
 80024c8:	e000      	b.n	80024cc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80024ca:	2305      	movs	r3, #5
    }				
  }
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d8:	2003      	movs	r0, #3
 80024da:	f000 ff56 	bl	800338a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024de:	200f      	movs	r0, #15
 80024e0:	f7ff fcbc 	bl	8001e5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024e4:	f7ff fb22 	bl	8001b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_IncTick+0x20>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_IncTick+0x24>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	4a04      	ldr	r2, [pc, #16]	; (8002514 <HAL_IncTick+0x24>)
 8002502:	6013      	str	r3, [r2, #0]
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000008 	.word	0x20000008
 8002514:	200044a8 	.word	0x200044a8

08002518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return uwTick;
 800251c:	4b03      	ldr	r3, [pc, #12]	; (800252c <HAL_GetTick+0x14>)
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	200044a8 	.word	0x200044a8

08002530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002538:	f7ff ffee 	bl	8002518 <HAL_GetTick>
 800253c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002548:	d005      	beq.n	8002556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800254a:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <HAL_Delay+0x44>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4413      	add	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002556:	bf00      	nop
 8002558:	f7ff ffde 	bl	8002518 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	429a      	cmp	r2, r3
 8002566:	d8f7      	bhi.n	8002558 <HAL_Delay+0x28>
  {
  }
}
 8002568:	bf00      	nop
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000008 	.word	0x20000008

08002578 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e0ed      	b.n	8002766 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d102      	bne.n	800259c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff faf0 	bl	8001b7c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025ac:	f7ff ffb4 	bl	8002518 <HAL_GetTick>
 80025b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025b2:	e012      	b.n	80025da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025b4:	f7ff ffb0 	bl	8002518 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b0a      	cmp	r3, #10
 80025c0:	d90b      	bls.n	80025da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2205      	movs	r2, #5
 80025d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e0c5      	b.n	8002766 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0e5      	beq.n	80025b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0202 	bic.w	r2, r2, #2
 80025f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025f8:	f7ff ff8e 	bl	8002518 <HAL_GetTick>
 80025fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025fe:	e012      	b.n	8002626 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002600:	f7ff ff8a 	bl	8002518 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b0a      	cmp	r3, #10
 800260c:	d90b      	bls.n	8002626 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2205      	movs	r2, #5
 800261e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e09f      	b.n	8002766 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1e5      	bne.n	8002600 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	7e1b      	ldrb	r3, [r3, #24]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d108      	bne.n	800264e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	e007      	b.n	800265e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800265c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	7e5b      	ldrb	r3, [r3, #25]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d108      	bne.n	8002678 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	e007      	b.n	8002688 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002686:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	7e9b      	ldrb	r3, [r3, #26]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d108      	bne.n	80026a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0220 	orr.w	r2, r2, #32
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	e007      	b.n	80026b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0220 	bic.w	r2, r2, #32
 80026b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	7edb      	ldrb	r3, [r3, #27]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d108      	bne.n	80026cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0210 	bic.w	r2, r2, #16
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	e007      	b.n	80026dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0210 	orr.w	r2, r2, #16
 80026da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	7f1b      	ldrb	r3, [r3, #28]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d108      	bne.n	80026f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0208 	orr.w	r2, r2, #8
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	e007      	b.n	8002706 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0208 	bic.w	r2, r2, #8
 8002704:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	7f5b      	ldrb	r3, [r3, #29]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d108      	bne.n	8002720 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0204 	orr.w	r2, r2, #4
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	e007      	b.n	8002730 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0204 	bic.w	r2, r2, #4
 800272e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	ea42 0103 	orr.w	r1, r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	1e5a      	subs	r2, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002770:	b480      	push	{r7}
 8002772:	b087      	sub	sp, #28
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002786:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002788:	7cfb      	ldrb	r3, [r7, #19]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d003      	beq.n	8002796 <HAL_CAN_ConfigFilter+0x26>
 800278e:	7cfb      	ldrb	r3, [r7, #19]
 8002790:	2b02      	cmp	r3, #2
 8002792:	f040 80c7 	bne.w	8002924 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a69      	ldr	r2, [pc, #420]	; (8002940 <HAL_CAN_ConfigFilter+0x1d0>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d001      	beq.n	80027a4 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80027a0:	4b68      	ldr	r3, [pc, #416]	; (8002944 <HAL_CAN_ConfigFilter+0x1d4>)
 80027a2:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027aa:	f043 0201 	orr.w	r2, r3, #1
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	4a63      	ldr	r2, [pc, #396]	; (8002944 <HAL_CAN_ConfigFilter+0x1d4>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d111      	bne.n	80027e0 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027c2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	021b      	lsls	r3, r3, #8
 80027d8:	431a      	orrs	r2, r3
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	f003 031f 	and.w	r3, r3, #31
 80027e8:	2201      	movs	r2, #1
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	401a      	ands	r2, r3
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d123      	bne.n	8002852 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	43db      	mvns	r3, r3
 8002814:	401a      	ands	r2, r3
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800282c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	3248      	adds	r2, #72	; 0x48
 8002832:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002846:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002848:	6979      	ldr	r1, [r7, #20]
 800284a:	3348      	adds	r3, #72	; 0x48
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	440b      	add	r3, r1
 8002850:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d122      	bne.n	80028a0 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	431a      	orrs	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800287a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	3248      	adds	r2, #72	; 0x48
 8002880:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002894:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002896:	6979      	ldr	r1, [r7, #20]
 8002898:	3348      	adds	r3, #72	; 0x48
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	440b      	add	r3, r1
 800289e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d109      	bne.n	80028bc <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	401a      	ands	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80028ba:	e007      	b.n	80028cc <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	431a      	orrs	r2, r3
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d109      	bne.n	80028e8 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	43db      	mvns	r3, r3
 80028de:	401a      	ands	r2, r3
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80028e6:	e007      	b.n	80028f8 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	431a      	orrs	r2, r3
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d107      	bne.n	8002910 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	431a      	orrs	r2, r3
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002916:	f023 0201 	bic.w	r2, r3, #1
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002920:	2300      	movs	r3, #0
 8002922:	e006      	b.n	8002932 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
  }
}
 8002932:	4618      	mov	r0, r3
 8002934:	371c      	adds	r7, #28
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40003400 	.word	0x40003400
 8002944:	40006400 	.word	0x40006400

08002948 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b01      	cmp	r3, #1
 800295a:	d12e      	bne.n	80029ba <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0201 	bic.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002974:	f7ff fdd0 	bl	8002518 <HAL_GetTick>
 8002978:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800297a:	e012      	b.n	80029a2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800297c:	f7ff fdcc 	bl	8002518 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b0a      	cmp	r3, #10
 8002988:	d90b      	bls.n	80029a2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2205      	movs	r2, #5
 800299a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e012      	b.n	80029c8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1e5      	bne.n	800297c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	e006      	b.n	80029c8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
  }
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b089      	sub	sp, #36	; 0x24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029e4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80029ee:	7ffb      	ldrb	r3, [r7, #31]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d003      	beq.n	80029fc <HAL_CAN_AddTxMessage+0x2c>
 80029f4:	7ffb      	ldrb	r3, [r7, #31]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	f040 80ad 	bne.w	8002b56 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10a      	bne.n	8002a1c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d105      	bne.n	8002a1c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 8095 	beq.w	8002b46 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	0e1b      	lsrs	r3, r3, #24
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002a26:	2201      	movs	r2, #1
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10d      	bne.n	8002a54 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a42:	68f9      	ldr	r1, [r7, #12]
 8002a44:	6809      	ldr	r1, [r1, #0]
 8002a46:	431a      	orrs	r2, r3
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	3318      	adds	r3, #24
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	440b      	add	r3, r1
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	e00f      	b.n	8002a74 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a5e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a64:	68f9      	ldr	r1, [r7, #12]
 8002a66:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002a68:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	3318      	adds	r3, #24
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	440b      	add	r3, r1
 8002a72:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6819      	ldr	r1, [r3, #0]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	3318      	adds	r3, #24
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	440b      	add	r3, r1
 8002a84:	3304      	adds	r3, #4
 8002a86:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	7d1b      	ldrb	r3, [r3, #20]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d111      	bne.n	8002ab4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	3318      	adds	r3, #24
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	6811      	ldr	r1, [r2, #0]
 8002aa4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	3318      	adds	r3, #24
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	440b      	add	r3, r1
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3307      	adds	r3, #7
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	061a      	lsls	r2, r3, #24
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3306      	adds	r3, #6
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	041b      	lsls	r3, r3, #16
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3305      	adds	r3, #5
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	021b      	lsls	r3, r3, #8
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	3204      	adds	r2, #4
 8002ad4:	7812      	ldrb	r2, [r2, #0]
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	6811      	ldr	r1, [r2, #0]
 8002adc:	ea43 0200 	orr.w	r2, r3, r0
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	440b      	add	r3, r1
 8002ae6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002aea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3303      	adds	r3, #3
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	061a      	lsls	r2, r3, #24
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3302      	adds	r3, #2
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	041b      	lsls	r3, r3, #16
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3301      	adds	r3, #1
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	021b      	lsls	r3, r3, #8
 8002b06:	4313      	orrs	r3, r2
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	7812      	ldrb	r2, [r2, #0]
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	6811      	ldr	r1, [r2, #0]
 8002b12:	ea43 0200 	orr.w	r2, r3, r0
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	440b      	add	r3, r1
 8002b1c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002b20:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	3318      	adds	r3, #24
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	4413      	add	r3, r2
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	6811      	ldr	r1, [r2, #0]
 8002b34:	f043 0201 	orr.w	r2, r3, #1
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	3318      	adds	r3, #24
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	440b      	add	r3, r1
 8002b40:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	e00e      	b.n	8002b64 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e006      	b.n	8002b64 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
  }
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3724      	adds	r7, #36	; 0x24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b82:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002b84:	7afb      	ldrb	r3, [r7, #11]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d002      	beq.n	8002b90 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002b8a:	7afb      	ldrb	r3, [r7, #11]
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d11d      	bne.n	8002bcc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b087      	sub	sp, #28
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bee:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002bf0:	7dfb      	ldrb	r3, [r7, #23]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d003      	beq.n	8002bfe <HAL_CAN_GetRxMessage+0x24>
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	f040 80f3 	bne.w	8002de4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10e      	bne.n	8002c22 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d116      	bne.n	8002c40 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e0e7      	b.n	8002df2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d107      	bne.n	8002c40 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0d8      	b.n	8002df2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	331b      	adds	r3, #27
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	4413      	add	r3, r2
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0204 	and.w	r2, r3, #4
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10c      	bne.n	8002c78 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	331b      	adds	r3, #27
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	4413      	add	r3, r2
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	0d5b      	lsrs	r3, r3, #21
 8002c6e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	e00b      	b.n	8002c90 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	331b      	adds	r3, #27
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	4413      	add	r3, r2
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	08db      	lsrs	r3, r3, #3
 8002c88:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	331b      	adds	r3, #27
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	4413      	add	r3, r2
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0202 	and.w	r2, r3, #2
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	331b      	adds	r3, #27
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 020f 	and.w	r2, r3, #15
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	331b      	adds	r3, #27
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	4413      	add	r3, r2
 8002cca:	3304      	adds	r3, #4
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	0a1b      	lsrs	r3, r3, #8
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	331b      	adds	r3, #27
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	0c1b      	lsrs	r3, r3, #16
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	0a1a      	lsrs	r2, r3, #8
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	0c1a      	lsrs	r2, r3, #16
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	3302      	adds	r3, #2
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	0e1a      	lsrs	r2, r3, #24
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	3303      	adds	r3, #3
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	3304      	adds	r3, #4
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	0a1a      	lsrs	r2, r3, #8
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	3305      	adds	r3, #5
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	0c1a      	lsrs	r2, r3, #16
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	3306      	adds	r3, #6
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	0e1a      	lsrs	r2, r3, #24
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	3307      	adds	r3, #7
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d108      	bne.n	8002dd0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 0220 	orr.w	r2, r2, #32
 8002dcc:	60da      	str	r2, [r3, #12]
 8002dce:	e007      	b.n	8002de0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691a      	ldr	r2, [r3, #16]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0220 	orr.w	r2, r2, #32
 8002dde:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	e006      	b.n	8002df2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
  }
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	371c      	adds	r7, #28
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b085      	sub	sp, #20
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e0e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d002      	beq.n	8002e1c <HAL_CAN_ActivateNotification+0x1e>
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d109      	bne.n	8002e30 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6959      	ldr	r1, [r3, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	e006      	b.n	8002e3e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
  }
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b08a      	sub	sp, #40	; 0x28
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002e52:	2300      	movs	r3, #0
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d07c      	beq.n	8002f8a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d023      	beq.n	8002ee2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7fe fae9 	bl	8001484 <HAL_CAN_TxMailbox0CompleteCallback>
 8002eb2:	e016      	b.n	8002ee2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d004      	beq.n	8002ec8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec6:	e00c      	b.n	8002ee2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d004      	beq.n	8002edc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eda:	e002      	b.n	8002ee2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7fe fadb 	bl	8001498 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d024      	beq.n	8002f36 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ef4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7fe fad3 	bl	80014ac <HAL_CAN_TxMailbox1CompleteCallback>
 8002f06:	e016      	b.n	8002f36 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d004      	beq.n	8002f1c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1a:	e00c      	b.n	8002f36 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d004      	beq.n	8002f30 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2e:	e002      	b.n	8002f36 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7fe fac5 	bl	80014c0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d024      	beq.n	8002f8a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f48:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7fe fabd 	bl	80014d4 <HAL_CAN_TxMailbox2CompleteCallback>
 8002f5a:	e016      	b.n	8002f8a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d004      	beq.n	8002f70 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f6e:	e00c      	b.n	8002f8a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d004      	beq.n	8002f84 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
 8002f82:	e002      	b.n	8002f8a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7fe faaf 	bl	80014e8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00c      	beq.n	8002fae <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f003 0310 	and.w	r3, r3, #16
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d007      	beq.n	8002fae <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2210      	movs	r2, #16
 8002fac:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00b      	beq.n	8002fd0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d006      	beq.n	8002fd0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2208      	movs	r2, #8
 8002fc8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f8f4 	bl	80031b8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7fe fa87 	bl	80014fc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00c      	beq.n	8003012 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f003 0310 	and.w	r3, r3, #16
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d007      	beq.n	8003012 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003008:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2210      	movs	r2, #16
 8003010:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	f003 0320 	and.w	r3, r3, #32
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00b      	beq.n	8003034 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	2b00      	cmp	r3, #0
 8003024:	d006      	beq.n	8003034 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2208      	movs	r2, #8
 800302c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f8d6 	bl	80031e0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	f003 0310 	and.w	r3, r3, #16
 800303a:	2b00      	cmp	r3, #0
 800303c:	d009      	beq.n	8003052 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	f003 0303 	and.w	r3, r3, #3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f8bd 	bl	80031cc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00b      	beq.n	8003074 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	f003 0310 	and.w	r3, r3, #16
 8003062:	2b00      	cmp	r3, #0
 8003064:	d006      	beq.n	8003074 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2210      	movs	r2, #16
 800306c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f8c0 	bl	80031f4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00b      	beq.n	8003096 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b00      	cmp	r3, #0
 8003086:	d006      	beq.n	8003096 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2208      	movs	r2, #8
 800308e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f8b9 	bl	8003208 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d07b      	beq.n	8003198 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d072      	beq.n	8003190 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	f043 0302 	orr.w	r3, r3, #2
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d008      	beq.n	80030fe <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	f043 0304 	orr.w	r3, r3, #4
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003104:	2b00      	cmp	r3, #0
 8003106:	d043      	beq.n	8003190 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800310e:	2b00      	cmp	r3, #0
 8003110:	d03e      	beq.n	8003190 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003118:	2b60      	cmp	r3, #96	; 0x60
 800311a:	d02b      	beq.n	8003174 <HAL_CAN_IRQHandler+0x32a>
 800311c:	2b60      	cmp	r3, #96	; 0x60
 800311e:	d82e      	bhi.n	800317e <HAL_CAN_IRQHandler+0x334>
 8003120:	2b50      	cmp	r3, #80	; 0x50
 8003122:	d022      	beq.n	800316a <HAL_CAN_IRQHandler+0x320>
 8003124:	2b50      	cmp	r3, #80	; 0x50
 8003126:	d82a      	bhi.n	800317e <HAL_CAN_IRQHandler+0x334>
 8003128:	2b40      	cmp	r3, #64	; 0x40
 800312a:	d019      	beq.n	8003160 <HAL_CAN_IRQHandler+0x316>
 800312c:	2b40      	cmp	r3, #64	; 0x40
 800312e:	d826      	bhi.n	800317e <HAL_CAN_IRQHandler+0x334>
 8003130:	2b30      	cmp	r3, #48	; 0x30
 8003132:	d010      	beq.n	8003156 <HAL_CAN_IRQHandler+0x30c>
 8003134:	2b30      	cmp	r3, #48	; 0x30
 8003136:	d822      	bhi.n	800317e <HAL_CAN_IRQHandler+0x334>
 8003138:	2b10      	cmp	r3, #16
 800313a:	d002      	beq.n	8003142 <HAL_CAN_IRQHandler+0x2f8>
 800313c:	2b20      	cmp	r3, #32
 800313e:	d005      	beq.n	800314c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003140:	e01d      	b.n	800317e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	f043 0308 	orr.w	r3, r3, #8
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800314a:	e019      	b.n	8003180 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	f043 0310 	orr.w	r3, r3, #16
 8003152:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003154:	e014      	b.n	8003180 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	f043 0320 	orr.w	r3, r3, #32
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800315e:	e00f      	b.n	8003180 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003166:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003168:	e00a      	b.n	8003180 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003172:	e005      	b.n	8003180 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800317c:	e000      	b.n	8003180 <HAL_CAN_IRQHandler+0x336>
            break;
 800317e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699a      	ldr	r2, [r3, #24]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800318e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2204      	movs	r2, #4
 8003196:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	2b00      	cmp	r3, #0
 800319c:	d008      	beq.n	80031b0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f836 	bl	800321c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80031b0:	bf00      	nop
 80031b2:	3728      	adds	r7, #40	; 0x28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <__NVIC_SetPriorityGrouping+0x40>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800324c:	4013      	ands	r3, r2
 800324e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003258:	4b06      	ldr	r3, [pc, #24]	; (8003274 <__NVIC_SetPriorityGrouping+0x44>)
 800325a:	4313      	orrs	r3, r2
 800325c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800325e:	4a04      	ldr	r2, [pc, #16]	; (8003270 <__NVIC_SetPriorityGrouping+0x40>)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	60d3      	str	r3, [r2, #12]
}
 8003264:	bf00      	nop
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	e000ed00 	.word	0xe000ed00
 8003274:	05fa0000 	.word	0x05fa0000

08003278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800327c:	4b04      	ldr	r3, [pc, #16]	; (8003290 <__NVIC_GetPriorityGrouping+0x18>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	0a1b      	lsrs	r3, r3, #8
 8003282:	f003 0307 	and.w	r3, r3, #7
}
 8003286:	4618      	mov	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	db0b      	blt.n	80032be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	f003 021f 	and.w	r2, r3, #31
 80032ac:	4907      	ldr	r1, [pc, #28]	; (80032cc <__NVIC_EnableIRQ+0x38>)
 80032ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	2001      	movs	r0, #1
 80032b6:	fa00 f202 	lsl.w	r2, r0, r2
 80032ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	e000e100 	.word	0xe000e100

080032d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	6039      	str	r1, [r7, #0]
 80032da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	db0a      	blt.n	80032fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	490c      	ldr	r1, [pc, #48]	; (800331c <__NVIC_SetPriority+0x4c>)
 80032ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ee:	0112      	lsls	r2, r2, #4
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	440b      	add	r3, r1
 80032f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032f8:	e00a      	b.n	8003310 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	4908      	ldr	r1, [pc, #32]	; (8003320 <__NVIC_SetPriority+0x50>)
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	3b04      	subs	r3, #4
 8003308:	0112      	lsls	r2, r2, #4
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	440b      	add	r3, r1
 800330e:	761a      	strb	r2, [r3, #24]
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	e000e100 	.word	0xe000e100
 8003320:	e000ed00 	.word	0xe000ed00

08003324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003324:	b480      	push	{r7}
 8003326:	b089      	sub	sp, #36	; 0x24
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	f1c3 0307 	rsb	r3, r3, #7
 800333e:	2b04      	cmp	r3, #4
 8003340:	bf28      	it	cs
 8003342:	2304      	movcs	r3, #4
 8003344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	3304      	adds	r3, #4
 800334a:	2b06      	cmp	r3, #6
 800334c:	d902      	bls.n	8003354 <NVIC_EncodePriority+0x30>
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	3b03      	subs	r3, #3
 8003352:	e000      	b.n	8003356 <NVIC_EncodePriority+0x32>
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003358:	f04f 32ff 	mov.w	r2, #4294967295
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43da      	mvns	r2, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	401a      	ands	r2, r3
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800336c:	f04f 31ff 	mov.w	r1, #4294967295
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	fa01 f303 	lsl.w	r3, r1, r3
 8003376:	43d9      	mvns	r1, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800337c:	4313      	orrs	r3, r2
         );
}
 800337e:	4618      	mov	r0, r3
 8003380:	3724      	adds	r7, #36	; 0x24
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b082      	sub	sp, #8
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7ff ff4c 	bl	8003230 <__NVIC_SetPriorityGrouping>
}
 8003398:	bf00      	nop
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
 80033ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033ae:	2300      	movs	r3, #0
 80033b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033b2:	f7ff ff61 	bl	8003278 <__NVIC_GetPriorityGrouping>
 80033b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	68b9      	ldr	r1, [r7, #8]
 80033bc:	6978      	ldr	r0, [r7, #20]
 80033be:	f7ff ffb1 	bl	8003324 <NVIC_EncodePriority>
 80033c2:	4602      	mov	r2, r0
 80033c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c8:	4611      	mov	r1, r2
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff ff80 	bl	80032d0 <__NVIC_SetPriority>
}
 80033d0:	bf00      	nop
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff ff54 	bl	8003294 <__NVIC_EnableIRQ>
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003400:	f7ff f88a 	bl	8002518 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e099      	b.n	8003544 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0201 	bic.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003430:	e00f      	b.n	8003452 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003432:	f7ff f871 	bl	8002518 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b05      	cmp	r3, #5
 800343e:	d908      	bls.n	8003452 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2203      	movs	r2, #3
 800344a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e078      	b.n	8003544 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1e8      	bne.n	8003432 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	4b38      	ldr	r3, [pc, #224]	; (800354c <HAL_DMA_Init+0x158>)
 800346c:	4013      	ands	r3, r2
 800346e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800347e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800348a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003496:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d107      	bne.n	80034bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b4:	4313      	orrs	r3, r2
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f023 0307 	bic.w	r3, r3, #7
 80034d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	4313      	orrs	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d117      	bne.n	8003516 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00e      	beq.n	8003516 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fa7b 	bl	80039f4 <DMA_CheckFifoParam>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2240      	movs	r2, #64	; 0x40
 8003508:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003512:	2301      	movs	r3, #1
 8003514:	e016      	b.n	8003544 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fa32 	bl	8003988 <DMA_CalcBaseAndBitshift>
 8003524:	4603      	mov	r3, r0
 8003526:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352c:	223f      	movs	r2, #63	; 0x3f
 800352e:	409a      	lsls	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	e010803f 	.word	0xe010803f

08003550 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800355e:	f7fe ffdb 	bl	8002518 <HAL_GetTick>
 8003562:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d008      	beq.n	8003582 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2280      	movs	r2, #128	; 0x80
 8003574:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e052      	b.n	8003628 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0216 	bic.w	r2, r2, #22
 8003590:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695a      	ldr	r2, [r3, #20]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d103      	bne.n	80035b2 <HAL_DMA_Abort+0x62>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d007      	beq.n	80035c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0208 	bic.w	r2, r2, #8
 80035c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0201 	bic.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035d2:	e013      	b.n	80035fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035d4:	f7fe ffa0 	bl	8002518 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b05      	cmp	r3, #5
 80035e0:	d90c      	bls.n	80035fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2220      	movs	r2, #32
 80035e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2203      	movs	r2, #3
 80035ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e015      	b.n	8003628 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1e4      	bne.n	80035d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360e:	223f      	movs	r2, #63	; 0x3f
 8003610:	409a      	lsls	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d004      	beq.n	800364e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2280      	movs	r2, #128	; 0x80
 8003648:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e00c      	b.n	8003668 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2205      	movs	r2, #5
 8003652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0201 	bic.w	r2, r2, #1
 8003664:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003680:	4b8e      	ldr	r3, [pc, #568]	; (80038bc <HAL_DMA_IRQHandler+0x248>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a8e      	ldr	r2, [pc, #568]	; (80038c0 <HAL_DMA_IRQHandler+0x24c>)
 8003686:	fba2 2303 	umull	r2, r3, r2, r3
 800368a:	0a9b      	lsrs	r3, r3, #10
 800368c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003692:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369e:	2208      	movs	r2, #8
 80036a0:	409a      	lsls	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4013      	ands	r3, r2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d01a      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d013      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0204 	bic.w	r2, r2, #4
 80036c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036cc:	2208      	movs	r2, #8
 80036ce:	409a      	lsls	r2, r3
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d8:	f043 0201 	orr.w	r2, r3, #1
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e4:	2201      	movs	r2, #1
 80036e6:	409a      	lsls	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4013      	ands	r3, r2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d012      	beq.n	8003716 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00b      	beq.n	8003716 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003702:	2201      	movs	r2, #1
 8003704:	409a      	lsls	r2, r3
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370e:	f043 0202 	orr.w	r2, r3, #2
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371a:	2204      	movs	r2, #4
 800371c:	409a      	lsls	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4013      	ands	r3, r2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d012      	beq.n	800374c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00b      	beq.n	800374c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003738:	2204      	movs	r2, #4
 800373a:	409a      	lsls	r2, r3
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003744:	f043 0204 	orr.w	r2, r3, #4
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003750:	2210      	movs	r2, #16
 8003752:	409a      	lsls	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4013      	ands	r3, r2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d043      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d03c      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376e:	2210      	movs	r2, #16
 8003770:	409a      	lsls	r2, r3
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d018      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d108      	bne.n	80037a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	2b00      	cmp	r3, #0
 8003798:	d024      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	4798      	blx	r3
 80037a2:	e01f      	b.n	80037e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d01b      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	4798      	blx	r3
 80037b4:	e016      	b.n	80037e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d107      	bne.n	80037d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0208 	bic.w	r2, r2, #8
 80037d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e8:	2220      	movs	r2, #32
 80037ea:	409a      	lsls	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4013      	ands	r3, r2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 808f 	beq.w	8003914 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 8087 	beq.w	8003914 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380a:	2220      	movs	r2, #32
 800380c:	409a      	lsls	r2, r3
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b05      	cmp	r3, #5
 800381c:	d136      	bne.n	800388c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0216 	bic.w	r2, r2, #22
 800382c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695a      	ldr	r2, [r3, #20]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800383c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	d103      	bne.n	800384e <HAL_DMA_IRQHandler+0x1da>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800384a:	2b00      	cmp	r3, #0
 800384c:	d007      	beq.n	800385e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0208 	bic.w	r2, r2, #8
 800385c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003862:	223f      	movs	r2, #63	; 0x3f
 8003864:	409a      	lsls	r2, r3
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800387e:	2b00      	cmp	r3, #0
 8003880:	d07e      	beq.n	8003980 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	4798      	blx	r3
        }
        return;
 800388a:	e079      	b.n	8003980 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d01d      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10d      	bne.n	80038c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d031      	beq.n	8003914 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	4798      	blx	r3
 80038b8:	e02c      	b.n	8003914 <HAL_DMA_IRQHandler+0x2a0>
 80038ba:	bf00      	nop
 80038bc:	20000000 	.word	0x20000000
 80038c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d023      	beq.n	8003914 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	4798      	blx	r3
 80038d4:	e01e      	b.n	8003914 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10f      	bne.n	8003904 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0210 	bic.w	r2, r2, #16
 80038f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003918:	2b00      	cmp	r3, #0
 800391a:	d032      	beq.n	8003982 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d022      	beq.n	800396e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2205      	movs	r2, #5
 800392c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0201 	bic.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	3301      	adds	r3, #1
 8003944:	60bb      	str	r3, [r7, #8]
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	429a      	cmp	r2, r3
 800394a:	d307      	bcc.n	800395c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f2      	bne.n	8003940 <HAL_DMA_IRQHandler+0x2cc>
 800395a:	e000      	b.n	800395e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800395c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003972:	2b00      	cmp	r3, #0
 8003974:	d005      	beq.n	8003982 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	4798      	blx	r3
 800397e:	e000      	b.n	8003982 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003980:	bf00      	nop
    }
  }
}
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	3b10      	subs	r3, #16
 8003998:	4a13      	ldr	r2, [pc, #76]	; (80039e8 <DMA_CalcBaseAndBitshift+0x60>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039a2:	4a12      	ldr	r2, [pc, #72]	; (80039ec <DMA_CalcBaseAndBitshift+0x64>)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4413      	add	r3, r2
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d908      	bls.n	80039c8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <DMA_CalcBaseAndBitshift+0x68>)
 80039be:	4013      	ands	r3, r2
 80039c0:	1d1a      	adds	r2, r3, #4
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	659a      	str	r2, [r3, #88]	; 0x58
 80039c6:	e006      	b.n	80039d6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	4b08      	ldr	r3, [pc, #32]	; (80039f0 <DMA_CalcBaseAndBitshift+0x68>)
 80039d0:	4013      	ands	r3, r2
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	aaaaaaab 	.word	0xaaaaaaab
 80039ec:	0801b0f8 	.word	0x0801b0f8
 80039f0:	fffffc00 	.word	0xfffffc00

080039f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d11f      	bne.n	8003a4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	d856      	bhi.n	8003ac2 <DMA_CheckFifoParam+0xce>
 8003a14:	a201      	add	r2, pc, #4	; (adr r2, 8003a1c <DMA_CheckFifoParam+0x28>)
 8003a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1a:	bf00      	nop
 8003a1c:	08003a2d 	.word	0x08003a2d
 8003a20:	08003a3f 	.word	0x08003a3f
 8003a24:	08003a2d 	.word	0x08003a2d
 8003a28:	08003ac3 	.word	0x08003ac3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d046      	beq.n	8003ac6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a3c:	e043      	b.n	8003ac6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a46:	d140      	bne.n	8003aca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a4c:	e03d      	b.n	8003aca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a56:	d121      	bne.n	8003a9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d837      	bhi.n	8003ace <DMA_CheckFifoParam+0xda>
 8003a5e:	a201      	add	r2, pc, #4	; (adr r2, 8003a64 <DMA_CheckFifoParam+0x70>)
 8003a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a64:	08003a75 	.word	0x08003a75
 8003a68:	08003a7b 	.word	0x08003a7b
 8003a6c:	08003a75 	.word	0x08003a75
 8003a70:	08003a8d 	.word	0x08003a8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	73fb      	strb	r3, [r7, #15]
      break;
 8003a78:	e030      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d025      	beq.n	8003ad2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a8a:	e022      	b.n	8003ad2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a94:	d11f      	bne.n	8003ad6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a9a:	e01c      	b.n	8003ad6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d903      	bls.n	8003aaa <DMA_CheckFifoParam+0xb6>
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b03      	cmp	r3, #3
 8003aa6:	d003      	beq.n	8003ab0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003aa8:	e018      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
      break;
 8003aae:	e015      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00e      	beq.n	8003ada <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac0:	e00b      	b.n	8003ada <DMA_CheckFifoParam+0xe6>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e00a      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e008      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      break;
 8003aca:	bf00      	nop
 8003acc:	e006      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      break;
 8003ace:	bf00      	nop
 8003ad0:	e004      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      break;
 8003ad2:	bf00      	nop
 8003ad4:	e002      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      break;   
 8003ad6:	bf00      	nop
 8003ad8:	e000      	b.n	8003adc <DMA_CheckFifoParam+0xe8>
      break;
 8003ada:	bf00      	nop
    }
  } 
  
  return status; 
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop

08003aec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e06a      	b.n	8003bd4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d106      	bne.n	8003b16 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2223      	movs	r2, #35	; 0x23
 8003b0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f005 f987 	bl	8008e24 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b16:	4b31      	ldr	r3, [pc, #196]	; (8003bdc <HAL_ETH_Init+0xf0>)
 8003b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1a:	4a30      	ldr	r2, [pc, #192]	; (8003bdc <HAL_ETH_Init+0xf0>)
 8003b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b20:	6453      	str	r3, [r2, #68]	; 0x44
 8003b22:	4b2e      	ldr	r3, [pc, #184]	; (8003bdc <HAL_ETH_Init+0xf0>)
 8003b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b2a:	60bb      	str	r3, [r7, #8]
 8003b2c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003b2e:	4b2c      	ldr	r3, [pc, #176]	; (8003be0 <HAL_ETH_Init+0xf4>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	4a2b      	ldr	r2, [pc, #172]	; (8003be0 <HAL_ETH_Init+0xf4>)
 8003b34:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b38:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003b3a:	4b29      	ldr	r3, [pc, #164]	; (8003be0 <HAL_ETH_Init+0xf4>)
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	4927      	ldr	r1, [pc, #156]	; (8003be0 <HAL_ETH_Init+0xf4>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003b48:	4b25      	ldr	r3, [pc, #148]	; (8003be0 <HAL_ETH_Init+0xf4>)
 8003b4a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6812      	ldr	r2, [r2, #0]
 8003b5a:	f043 0301 	orr.w	r3, r3, #1
 8003b5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b62:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b64:	f7fe fcd8 	bl	8002518 <HAL_GetTick>
 8003b68:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003b6a:	e011      	b.n	8003b90 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003b6c:	f7fe fcd4 	bl	8002518 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003b7a:	d909      	bls.n	8003b90 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2204      	movs	r2, #4
 8003b80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	22e0      	movs	r2, #224	; 0xe0
 8003b88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e021      	b.n	8003bd4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1e4      	bne.n	8003b6c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 ff4c 	bl	8004a40 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fff3 	bl	8004b94 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f001 f849 	bl	8004c46 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	2100      	movs	r1, #0
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 ffb1 	bl	8004b24 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2210      	movs	r2, #16
 8003bce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	40013800 	.word	0x40013800

08003be4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bf2:	2b10      	cmp	r3, #16
 8003bf4:	d17b      	bne.n	8003cee <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2223      	movs	r2, #35	; 0x23
 8003bfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8003c12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	4b35      	ldr	r3, [pc, #212]	; (8003cf8 <HAL_ETH_Start_IT+0x114>)
 8003c22:	430b      	orrs	r3, r1
 8003c24:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8003c38:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2204      	movs	r2, #4
 8003c40:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f9fc 	bl	8004040 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0208 	orr.w	r2, r2, #8
 8003c56:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c60:	2001      	movs	r0, #1
 8003c62:	f7fe fc65 	bl	8002530 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f042 0204 	orr.w	r2, r2, #4
 8003c7c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c86:	2001      	movs	r0, #1
 8003c88:	f7fe fc52 	bl	8002530 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 fd74 	bl	8004782 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6812      	ldr	r2, [r2, #0]
 8003ca8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003cb0:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6812      	ldr	r2, [r2, #0]
 8003cc0:	f043 0302 	orr.w	r3, r3, #2
 8003cc4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003cc8:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cd2:	69d9      	ldr	r1, [r3, #28]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <HAL_ETH_Start_IT+0x118>)
 8003cda:	430b      	orrs	r3, r1
 8003cdc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ce0:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2223      	movs	r2, #35	; 0x23
 8003ce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	e000      	b.n	8003cf0 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
  }
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	00020060 	.word	0x00020060
 8003cfc:	0001a0c1 	.word	0x0001a0c1

08003d00 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d0e:	2b23      	cmp	r3, #35	; 0x23
 8003d10:	d16e      	bne.n	8003df0 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2223      	movs	r2, #35	; 0x23
 8003d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d22:	69d9      	ldr	r1, [r3, #28]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	4b34      	ldr	r3, [pc, #208]	; (8003dfc <HAL_ETH_Stop_IT+0xfc>)
 8003d2a:	400b      	ands	r3, r1
 8003d2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d30:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6812      	ldr	r2, [r2, #0]
 8003d40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d48:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6812      	ldr	r2, [r2, #0]
 8003d58:	f023 0302 	bic.w	r3, r3, #2
 8003d5c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d60:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0204 	bic.w	r2, r2, #4
 8003d70:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d7a:	2001      	movs	r0, #1
 8003d7c:	f7fe fbd8 	bl	8002530 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 fcfa 	bl	8004782 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0208 	bic.w	r2, r2, #8
 8003d9c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003da6:	2001      	movs	r0, #1
 8003da8:	f7fe fbc2 	bl	8002530 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	e00e      	b.n	8003dd8 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	3212      	adds	r2, #18
 8003dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dc4:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2b03      	cmp	r3, #3
 8003ddc:	d9ed      	bls.n	8003dba <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2210      	movs	r2, #16
 8003de8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8003dec:	2300      	movs	r3, #0
 8003dee:	e000      	b.n	8003df2 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
  }
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	fffe5f3e 	.word	0xfffe5f3e

08003e00 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d109      	bne.n	8003e24 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e16:	f043 0201 	orr.w	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e045      	b.n	8003eb0 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e2a:	2b23      	cmp	r3, #35	; 0x23
 8003e2c:	d13f      	bne.n	8003eae <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003e36:	2201      	movs	r2, #1
 8003e38:	6839      	ldr	r1, [r7, #0]
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 ff70 	bl	8004d20 <ETH_Prepare_Tx_Descriptors>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d009      	beq.n	8003e5a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4c:	f043 0202 	orr.w	r2, r3, #2
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e02a      	b.n	8003eb0 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003e5a:	f3bf 8f4f 	dsb	sy
}
 8003e5e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	629a      	str	r2, [r3, #40]	; 0x28
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d904      	bls.n	8003e7c <HAL_ETH_Transmit_IT+0x7c>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e76:	1f1a      	subs	r2, r3, #4
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00d      	beq.n	8003eaa <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e96:	461a      	mov	r2, r3
 8003e98:	2304      	movs	r3, #4
 8003e9a:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	e000      	b.n	8003eb0 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
  }
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b088      	sub	sp, #32
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d109      	bne.n	8003ee4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed6:	f043 0201 	orr.w	r2, r3, #1
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0a8      	b.n	8004036 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eea:	2b23      	cmp	r3, #35	; 0x23
 8003eec:	d001      	beq.n	8003ef2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e0a1      	b.n	8004036 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69fa      	ldr	r2, [r7, #28]
 8003efc:	3212      	adds	r2, #18
 8003efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f02:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f08:	f1c3 0304 	rsb	r3, r3, #4
 8003f0c:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003f0e:	e06a      	b.n	8003fe6 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d007      	beq.n	8003f2c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	699a      	ldr	r2, [r3, #24]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	69da      	ldr	r2, [r3, #28]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d103      	bne.n	8003f40 <HAL_ETH_ReadData+0x88>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d040      	beq.n	8003fc2 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d005      	beq.n	8003f58 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00c      	beq.n	8003f84 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	0c1b      	lsrs	r3, r3, #16
 8003f70:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003f74:	3b04      	subs	r3, #4
 8003f76:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8003f80:	2301      	movs	r3, #1
 8003f82:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	f005 f90b 	bl	80091bc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	441a      	add	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	61fb      	str	r3, [r7, #28]
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	d902      	bls.n	8003fd4 <HAL_ETH_ReadData+0x11c>
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	3b04      	subs	r3, #4
 8003fd2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	69fa      	ldr	r2, [r7, #28]
 8003fd8:	3212      	adds	r2, #18
 8003fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fde:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	db06      	blt.n	8003ffc <HAL_ETH_ReadData+0x144>
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d202      	bcs.n	8003ffc <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8003ff6:	7bfb      	ldrb	r3, [r7, #15]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d089      	beq.n	8003f10 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	441a      	add	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f815 	bl	8004040 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69fa      	ldr	r2, [r7, #28]
 800401a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800401c:	7bfb      	ldrb	r3, [r7, #15]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d108      	bne.n	8004034 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	e000      	b.n	8004036 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
}
 8004036:	4618      	mov	r0, r3
 8004038:	3720      	adds	r7, #32
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
	...

08004040 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004048:	2300      	movs	r3, #0
 800404a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800404c:	2301      	movs	r3, #1
 800404e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004054:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	69fa      	ldr	r2, [r7, #28]
 800405a:	3212      	adds	r2, #18
 800405c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004060:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004066:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004068:	e040      	b.n	80040ec <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d112      	bne.n	8004098 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004072:	f107 030c 	add.w	r3, r7, #12
 8004076:	4618      	mov	r0, r3
 8004078:	f005 f870 	bl	800915c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d102      	bne.n	8004088 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	74fb      	strb	r3, [r7, #19]
 8004086:	e007      	b.n	8004098 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	461a      	mov	r2, r3
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	461a      	mov	r2, r3
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004098:	7cfb      	ldrb	r3, [r7, #19]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d026      	beq.n	80040ec <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d103      	bne.n	80040ae <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	4a1e      	ldr	r2, [pc, #120]	; (8004124 <ETH_UpdateDescriptor+0xe4>)
 80040aa:	605a      	str	r2, [r3, #4]
 80040ac:	e003      	b.n	80040b6 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80040b4:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80040b6:	f3bf 8f5f 	dmb	sy
}
 80040ba:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	3301      	adds	r3, #1
 80040cc:	61fb      	str	r3, [r7, #28]
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	2b03      	cmp	r3, #3
 80040d2:	d902      	bls.n	80040da <ETH_UpdateDescriptor+0x9a>
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	3b04      	subs	r3, #4
 80040d8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69fa      	ldr	r2, [r7, #28]
 80040de:	3212      	adds	r2, #18
 80040e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040e4:	617b      	str	r3, [r7, #20]
      desccount--;
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	3b01      	subs	r3, #1
 80040ea:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <ETH_UpdateDescriptor+0xb8>
 80040f2:	7cfb      	ldrb	r3, [r7, #19]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1b8      	bne.n	800406a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d00c      	beq.n	800411c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800410a:	461a      	mov	r2, r3
 800410c:	2300      	movs	r3, #0
 800410e:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	69fa      	ldr	r2, [r7, #28]
 8004114:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800411c:	bf00      	nop
 800411e:	3720      	adds	r7, #32
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	80004600 	.word	0x80004600

08004128 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3318      	adds	r3, #24
 8004134:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004142:	2301      	movs	r3, #1
 8004144:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004146:	e03f      	b.n	80041c8 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8004148:	2301      	movs	r3, #1
 800414a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	3b01      	subs	r3, #1
 8004150:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	3304      	adds	r3, #4
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d106      	bne.n	8004170 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	3301      	adds	r3, #1
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800416c:	2300      	movs	r3, #0
 800416e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004170:	7bbb      	ldrb	r3, [r7, #14]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d028      	beq.n	80041c8 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68d9      	ldr	r1, [r3, #12]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4613      	mov	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	440b      	add	r3, r1
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	db1b      	blt.n	80041c4 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	3304      	adds	r3, #4
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	4618      	mov	r0, r3
 800419a:	f005 f851 	bl	8009240 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	3304      	adds	r3, #4
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	2200      	movs	r2, #0
 80041aa:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	3301      	adds	r3, #1
 80041b0:	f003 0303 	and.w	r3, r3, #3
 80041b4:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80041c2:	e001      	b.n	80041c8 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <HAL_ETH_ReleaseTxPacket+0xac>
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1b9      	bne.n	8004148 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f6:	2b40      	cmp	r3, #64	; 0x40
 80041f8:	d112      	bne.n	8004220 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004208:	2b40      	cmp	r3, #64	; 0x40
 800420a:	d109      	bne.n	8004220 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004214:	461a      	mov	r2, r3
 8004216:	4b50      	ldr	r3, [pc, #320]	; (8004358 <HAL_ETH_IRQHandler+0x178>)
 8004218:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f004 fb64 	bl	80088e8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b01      	cmp	r3, #1
 8004230:	d113      	bne.n	800425a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b01      	cmp	r3, #1
 8004242:	d10a      	bne.n	800425a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800424c:	461a      	mov	r2, r3
 800424e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8004252:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f004 fb57 	bl	8008908 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800426c:	d14c      	bne.n	8004308 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800427c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004280:	d142      	bne.n	8004308 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004288:	f043 0208 	orr.w	r2, r3, #8
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042a4:	d11a      	bne.n	80042dc <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ae:	695a      	ldr	r2, [r3, #20]
 80042b0:	4b2a      	ldr	r3, [pc, #168]	; (800435c <HAL_ETH_IRQHandler+0x17c>)
 80042b2:	4013      	ands	r3, r2
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 80042cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042d0:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	22e0      	movs	r2, #224	; 0xe0
 80042d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80042da:	e012      	b.n	8004302 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e4:	695a      	ldr	r2, [r3, #20]
 80042e6:	f248 6380 	movw	r3, #34432	; 0x8680
 80042ea:	4013      	ands	r3, r2
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042fa:	461a      	mov	r2, r3
 80042fc:	f248 6380 	movw	r3, #34432	; 0x8680
 8004300:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f004 fb10 	bl	8008928 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b08      	cmp	r3, #8
 8004314:	d10e      	bne.n	8004334 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f81c 	bl	8004364 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8004334:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <HAL_ETH_IRQHandler+0x180>)
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d006      	beq.n	800434e <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004340:	4b07      	ldr	r3, [pc, #28]	; (8004360 <HAL_ETH_IRQHandler+0x180>)
 8004342:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004346:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f815 	bl	8004378 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800434e:	bf00      	nop
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	00010040 	.word	0x00010040
 800435c:	007e2000 	.word	0x007e2000
 8004360:	40013c00 	.word	0x40013c00

08004364 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
 8004398:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f003 031c 	and.w	r3, r3, #28
 80043a8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	02db      	lsls	r3, r3, #11
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	019b      	lsls	r3, r3, #6
 80043ba:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f023 0302 	bic.w	r3, r3, #2
 80043ca:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80043dc:	f7fe f89c 	bl	8002518 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80043e2:	e00d      	b.n	8004400 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80043e4:	f7fe f898 	bl	8002518 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f2:	d301      	bcc.n	80043f8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e010      	b.n	800441a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1ec      	bne.n	80043e4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	b29b      	uxth	r3, r3
 8004412:	461a      	mov	r2, r3
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b086      	sub	sp, #24
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	607a      	str	r2, [r7, #4]
 800442e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f003 031c 	and.w	r3, r3, #28
 800443e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	02db      	lsls	r3, r3, #11
 8004444:	b29b      	uxth	r3, r3
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	019b      	lsls	r3, r3, #6
 8004450:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	4313      	orrs	r3, r2
 8004458:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f043 0302 	orr.w	r3, r3, #2
 8004460:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	b29a      	uxth	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800447c:	f7fe f84c 	bl	8002518 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004482:	e00d      	b.n	80044a0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004484:	f7fe f848 	bl	8002518 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004492:	d301      	bcc.n	8004498 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e009      	b.n	80044ac <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1ec      	bne.n	8004484 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e0d9      	b.n	800467c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0310 	and.w	r3, r3, #16
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	bf14      	ite	ne
 80044d6:	2301      	movne	r3, #1
 80044d8:	2300      	moveq	r3, #0
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	461a      	mov	r2, r3
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	bf0c      	ite	eq
 8004500:	2301      	moveq	r3, #1
 8004502:	2300      	movne	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	461a      	mov	r2, r3
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8004518:	2b00      	cmp	r3, #0
 800451a:	bf14      	ite	ne
 800451c:	2301      	movne	r3, #1
 800451e:	2300      	moveq	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004532:	2b00      	cmp	r3, #0
 8004534:	bf0c      	ite	eq
 8004536:	2301      	moveq	r3, #1
 8004538:	2300      	movne	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	461a      	mov	r2, r3
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800454c:	2b00      	cmp	r3, #0
 800454e:	bf14      	ite	ne
 8004550:	2301      	movne	r3, #1
 8004552:	2300      	moveq	r3, #0
 8004554:	b2db      	uxtb	r3, r3
 8004556:	461a      	mov	r2, r3
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004582:	2b00      	cmp	r3, #0
 8004584:	bf0c      	ite	eq
 8004586:	2301      	moveq	r3, #1
 8004588:	2300      	movne	r3, #0
 800458a:	b2db      	uxtb	r3, r3
 800458c:	461a      	mov	r2, r3
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800459c:	2b00      	cmp	r3, #0
 800459e:	bf0c      	ite	eq
 80045a0:	2301      	moveq	r3, #1
 80045a2:	2300      	movne	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	461a      	mov	r2, r3
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	bf14      	ite	ne
 80045ba:	2301      	movne	r3, #1
 80045bc:	2300      	moveq	r3, #0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	461a      	mov	r2, r3
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045de:	2b00      	cmp	r3, #0
 80045e0:	bf14      	ite	ne
 80045e2:	2301      	movne	r3, #1
 80045e4:	2300      	moveq	r3, #0
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	461a      	mov	r2, r3
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	bf14      	ite	ne
 80045fc:	2301      	movne	r3, #1
 80045fe:	2300      	moveq	r3, #0
 8004600:	b2db      	uxtb	r3, r3
 8004602:	461a      	mov	r2, r3
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004614:	2b00      	cmp	r3, #0
 8004616:	bf0c      	ite	eq
 8004618:	2301      	moveq	r3, #1
 800461a:	2300      	movne	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	461a      	mov	r2, r3
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	0c1b      	lsrs	r3, r3, #16
 800463c:	b29a      	uxth	r2, r3
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	bf14      	ite	ne
 8004650:	2301      	movne	r3, #1
 8004652:	2300      	moveq	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	461a      	mov	r2, r3
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004668:	2b00      	cmp	r3, #0
 800466a:	bf14      	ite	ne
 800466c:	2301      	movne	r3, #1
 800466e:	2300      	moveq	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e00b      	b.n	80046b4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a2:	2b10      	cmp	r3, #16
 80046a4:	d105      	bne.n	80046b2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80046a6:	6839      	ldr	r1, [r7, #0]
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f88f 	bl	80047cc <ETH_SetMACConfig>

    return HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	e000      	b.n	80046b4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
  }
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 031c 	bic.w	r3, r3, #28
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80046d4:	f001 fc80 	bl	8005fd8 <HAL_RCC_GetHCLKFreq>
 80046d8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	4a1d      	ldr	r2, [pc, #116]	; (8004754 <HAL_ETH_SetMDIOClockRange+0x98>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d908      	bls.n	80046f4 <HAL_ETH_SetMDIOClockRange+0x38>
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	4a1c      	ldr	r2, [pc, #112]	; (8004758 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d804      	bhi.n	80046f4 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f043 0308 	orr.w	r3, r3, #8
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	e027      	b.n	8004744 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	4a18      	ldr	r2, [pc, #96]	; (8004758 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d908      	bls.n	800470e <HAL_ETH_SetMDIOClockRange+0x52>
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4a17      	ldr	r2, [pc, #92]	; (800475c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d204      	bcs.n	800470e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f043 030c 	orr.w	r3, r3, #12
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	e01a      	b.n	8004744 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	4a12      	ldr	r2, [pc, #72]	; (800475c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d303      	bcc.n	800471e <HAL_ETH_SetMDIOClockRange+0x62>
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	4a11      	ldr	r2, [pc, #68]	; (8004760 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d911      	bls.n	8004742 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	4a0f      	ldr	r2, [pc, #60]	; (8004760 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d908      	bls.n	8004738 <HAL_ETH_SetMDIOClockRange+0x7c>
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	4a0e      	ldr	r2, [pc, #56]	; (8004764 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d804      	bhi.n	8004738 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f043 0304 	orr.w	r3, r3, #4
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	e005      	b.n	8004744 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f043 0310 	orr.w	r3, r3, #16
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	e000      	b.n	8004744 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004742:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	611a      	str	r2, [r3, #16]
}
 800474c:	bf00      	nop
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	01312cff 	.word	0x01312cff
 8004758:	02160ebf 	.word	0x02160ebf
 800475c:	03938700 	.word	0x03938700
 8004760:	05f5e0ff 	.word	0x05f5e0ff
 8004764:	08f0d17f 	.word	0x08f0d17f

08004768 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8004776:	4618      	mov	r0, r3
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b084      	sub	sp, #16
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800478a:	2300      	movs	r3, #0
 800478c:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6812      	ldr	r2, [r2, #0]
 800479c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047a4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80047b2:	2001      	movs	r0, #1
 80047b4:	f7fd febc 	bl	8002530 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047c2:	6193      	str	r3, [r2, #24]
}
 80047c4:	bf00      	nop
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	4b51      	ldr	r3, [pc, #324]	; (8004928 <ETH_SetMACConfig+0x15c>)
 80047e2:	4013      	ands	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	7c1b      	ldrb	r3, [r3, #16]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d102      	bne.n	80047f4 <ETH_SetMACConfig+0x28>
 80047ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80047f2:	e000      	b.n	80047f6 <ETH_SetMACConfig+0x2a>
 80047f4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	7c5b      	ldrb	r3, [r3, #17]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d102      	bne.n	8004804 <ETH_SetMACConfig+0x38>
 80047fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004802:	e000      	b.n	8004806 <ETH_SetMACConfig+0x3a>
 8004804:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004806:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800480c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	7fdb      	ldrb	r3, [r3, #31]
 8004812:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004814:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800481a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	7f92      	ldrb	r2, [r2, #30]
 8004820:	2a00      	cmp	r2, #0
 8004822:	d102      	bne.n	800482a <ETH_SetMACConfig+0x5e>
 8004824:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004828:	e000      	b.n	800482c <ETH_SetMACConfig+0x60>
 800482a:	2200      	movs	r2, #0
                        macconf->Speed |
 800482c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	7f1b      	ldrb	r3, [r3, #28]
 8004832:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004834:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800483a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	791b      	ldrb	r3, [r3, #4]
 8004840:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004842:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	f892 2020 	ldrb.w	r2, [r2, #32]
 800484a:	2a00      	cmp	r2, #0
 800484c:	d102      	bne.n	8004854 <ETH_SetMACConfig+0x88>
 800484e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004852:	e000      	b.n	8004856 <ETH_SetMACConfig+0x8a>
 8004854:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004856:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	7bdb      	ldrb	r3, [r3, #15]
 800485c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800485e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004864:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800486c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800486e:	4313      	orrs	r3, r2
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004886:	2001      	movs	r0, #1
 8004888:	f7fd fe52 	bl	8002530 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	f64f 7341 	movw	r3, #65345	; 0xff41
 80048a2:	4013      	ands	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048aa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80048b2:	2a00      	cmp	r2, #0
 80048b4:	d101      	bne.n	80048ba <ETH_SetMACConfig+0xee>
 80048b6:	2280      	movs	r2, #128	; 0x80
 80048b8:	e000      	b.n	80048bc <ETH_SetMACConfig+0xf0>
 80048ba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80048bc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80048c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80048ca:	2a01      	cmp	r2, #1
 80048cc:	d101      	bne.n	80048d2 <ETH_SetMACConfig+0x106>
 80048ce:	2208      	movs	r2, #8
 80048d0:	e000      	b.n	80048d4 <ETH_SetMACConfig+0x108>
 80048d2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80048d4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80048dc:	2a01      	cmp	r2, #1
 80048de:	d101      	bne.n	80048e4 <ETH_SetMACConfig+0x118>
 80048e0:	2204      	movs	r2, #4
 80048e2:	e000      	b.n	80048e6 <ETH_SetMACConfig+0x11a>
 80048e4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80048e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80048ee:	2a01      	cmp	r2, #1
 80048f0:	d101      	bne.n	80048f6 <ETH_SetMACConfig+0x12a>
 80048f2:	2202      	movs	r2, #2
 80048f4:	e000      	b.n	80048f8 <ETH_SetMACConfig+0x12c>
 80048f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80048f8:	4313      	orrs	r3, r2
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004910:	2001      	movs	r0, #1
 8004912:	f7fd fe0d 	bl	8002530 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	619a      	str	r2, [r3, #24]
}
 800491e:	bf00      	nop
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	ff20810f 	.word	0xff20810f

0800492c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	4b3d      	ldr	r3, [pc, #244]	; (8004a3c <ETH_SetDMAConfig+0x110>)
 8004946:	4013      	ands	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	7b1b      	ldrb	r3, [r3, #12]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d102      	bne.n	8004958 <ETH_SetDMAConfig+0x2c>
 8004952:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004956:	e000      	b.n	800495a <ETH_SetDMAConfig+0x2e>
 8004958:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	7b5b      	ldrb	r3, [r3, #13]
 800495e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004960:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	7f52      	ldrb	r2, [r2, #29]
 8004966:	2a00      	cmp	r2, #0
 8004968:	d102      	bne.n	8004970 <ETH_SetDMAConfig+0x44>
 800496a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800496e:	e000      	b.n	8004972 <ETH_SetDMAConfig+0x46>
 8004970:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004972:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	7b9b      	ldrb	r3, [r3, #14]
 8004978:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800497a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004980:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	7f1b      	ldrb	r3, [r3, #28]
 8004986:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004988:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	7f9b      	ldrb	r3, [r3, #30]
 800498e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004990:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004996:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800499e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80049a0:	4313      	orrs	r3, r2
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049b0:	461a      	mov	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80049c2:	2001      	movs	r0, #1
 80049c4:	f7fd fdb4 	bl	8002530 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d0:	461a      	mov	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	791b      	ldrb	r3, [r3, #4]
 80049da:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80049e0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80049e6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80049ec:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80049f4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80049f6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80049fe:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004a04:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6812      	ldr	r2, [r2, #0]
 8004a0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a12:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a20:	2001      	movs	r0, #1
 8004a22:	f7fd fd85 	bl	8002530 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a2e:	461a      	mov	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6013      	str	r3, [r2, #0]
}
 8004a34:	bf00      	nop
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	f8de3f23 	.word	0xf8de3f23

08004a40 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b0a6      	sub	sp, #152	; 0x98
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004a54:	2300      	movs	r3, #0
 8004a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004a64:	2300      	movs	r3, #0
 8004a66:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004a70:	2300      	movs	r3, #0
 8004a72:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004a76:	2300      	movs	r3, #0
 8004a78:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004a80:	2300      	movs	r3, #0
 8004a82:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004a90:	2300      	movs	r3, #0
 8004a92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004a96:	2300      	movs	r3, #0
 8004a98:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004aa2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004aa6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004aa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004aac:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004ab4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004ab8:	4619      	mov	r1, r3
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7ff fe86 	bl	80047cc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004adc:	2300      	movs	r3, #0
 8004ade:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004aec:	2301      	movs	r3, #1
 8004aee:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004af0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004af4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004af6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004afa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004afc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b00:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004b02:	2301      	movs	r3, #1
 8004b04:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004b10:	f107 0308 	add.w	r3, r7, #8
 8004b14:	4619      	mov	r1, r3
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7ff ff08 	bl	800492c <ETH_SetDMAConfig>
}
 8004b1c:	bf00      	nop
 8004b1e:	3798      	adds	r7, #152	; 0x98
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3305      	adds	r3, #5
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	021b      	lsls	r3, r3, #8
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	3204      	adds	r2, #4
 8004b3c:	7812      	ldrb	r2, [r2, #0]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	4b11      	ldr	r3, [pc, #68]	; (8004b8c <ETH_MACAddressConfig+0x68>)
 8004b46:	4413      	add	r3, r2
 8004b48:	461a      	mov	r2, r3
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	3303      	adds	r3, #3
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	061a      	lsls	r2, r3, #24
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	3302      	adds	r3, #2
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	041b      	lsls	r3, r3, #16
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3301      	adds	r3, #1
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	7812      	ldrb	r2, [r2, #0]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	4b06      	ldr	r3, [pc, #24]	; (8004b90 <ETH_MACAddressConfig+0x6c>)
 8004b76:	4413      	add	r3, r2
 8004b78:	461a      	mov	r2, r3
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	6013      	str	r3, [r2, #0]
}
 8004b7e:	bf00      	nop
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40028040 	.word	0x40028040
 8004b90:	40028044 	.word	0x40028044

08004b94 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	e03e      	b.n	8004c20 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68d9      	ldr	r1, [r3, #12]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	440b      	add	r3, r1
 8004bb2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004bcc:	68b9      	ldr	r1, [r7, #8]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	3206      	adds	r2, #6
 8004bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d80c      	bhi.n	8004c04 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68d9      	ldr	r1, [r3, #12]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	440b      	add	r3, r1
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	60da      	str	r2, [r3, #12]
 8004c02:	e004      	b.n	8004c0e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d9bd      	bls.n	8004ba2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c38:	611a      	str	r2, [r3, #16]
}
 8004c3a:	bf00      	nop
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b085      	sub	sp, #20
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	e046      	b.n	8004ce2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6919      	ldr	r1, [r3, #16]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	440b      	add	r3, r1
 8004c64:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2200      	movs	r2, #0
 8004c76:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	2200      	movs	r2, #0
 8004c82:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	2200      	movs	r2, #0
 8004c88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c90:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8004c98:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004ca6:	68b9      	ldr	r1, [r7, #8]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	3212      	adds	r2, #18
 8004cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d80c      	bhi.n	8004cd2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6919      	ldr	r1, [r3, #16]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	440b      	add	r3, r1
 8004cca:	461a      	mov	r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	60da      	str	r2, [r3, #12]
 8004cd0:	e004      	b.n	8004cdc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	60fb      	str	r3, [r7, #12]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b03      	cmp	r3, #3
 8004ce6:	d9b5      	bls.n	8004c54 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691a      	ldr	r2, [r3, #16]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d12:	60da      	str	r2, [r3, #12]
}
 8004d14:	bf00      	nop
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b08d      	sub	sp, #52	; 0x34
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3318      	adds	r3, #24
 8004d30:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d4a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8004d52:	2300      	movs	r3, #0
 8004d54:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d62:	d007      	beq.n	8004d74 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d68:	3304      	adds	r3, #4
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004d74:	2302      	movs	r3, #2
 8004d76:	e0ff      	b.n	8004f78 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	4b7d      	ldr	r3, [pc, #500]	; (8004f84 <ETH_Prepare_Tx_Descriptors+0x264>)
 8004d8e:	4013      	ands	r3, r2
 8004d90:	69fa      	ldr	r2, [r7, #28]
 8004d92:	6852      	ldr	r2, [r2, #4]
 8004d94:	431a      	orrs	r2, r3
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d008      	beq.n	8004db8 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	431a      	orrs	r2, r3
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0320 	and.w	r3, r3, #32
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
 8004dd4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0304 	and.w	r3, r3, #4
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d005      	beq.n	8004dee <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8004dfa:	f3bf 8f5f 	dmb	sy
}
 8004dfe:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004e00:	6a3b      	ldr	r3, [r7, #32]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004e0c:	e082      	b.n	8004f14 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d006      	beq.n	8004e2e <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	e005      	b.n	8004e3a <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d902      	bls.n	8004e4c <ETH_Prepare_Tx_Descriptors+0x12c>
 8004e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e48:	3b04      	subs	r3, #4
 8004e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e54:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e6e:	d007      	beq.n	8004e80 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e74:	3304      	adds	r3, #4
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d029      	beq.n	8004ed4 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e8c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004e8e:	2300      	movs	r3, #0
 8004e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e92:	e019      	b.n	8004ec8 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8004e94:	f3bf 8f5f 	dmb	sy
}
 8004e98:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eae:	2b03      	cmp	r3, #3
 8004eb0:	d902      	bls.n	8004eb8 <ETH_Prepare_Tx_Descriptors+0x198>
 8004eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb4:	3b04      	subs	r3, #4
 8004eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ec0:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8004ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d3e1      	bcc.n	8004e94 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e051      	b.n	8004f78 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	4b25      	ldr	r3, [pc, #148]	; (8004f84 <ETH_Prepare_Tx_Descriptors+0x264>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	69fa      	ldr	r2, [r7, #28]
 8004ef4:	6852      	ldr	r2, [r2, #4]
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	3301      	adds	r3, #1
 8004f00:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8004f02:	f3bf 8f5f 	dmb	sy
}
 8004f06:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f47f af78 	bne.w	8004e0e <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d006      	beq.n	8004f32 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004f24:	6a3b      	ldr	r3, [r7, #32]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	e005      	b.n	8004f3e <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f3a:	6a3b      	ldr	r3, [r7, #32]
 8004f3c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f4e:	6979      	ldr	r1, [r7, #20]
 8004f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f52:	3304      	adds	r3, #4
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	440b      	add	r3, r1
 8004f58:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f5e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f60:	b672      	cpsid	i
}
 8004f62:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004f72:	b662      	cpsie	i
}
 8004f74:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3734      	adds	r7, #52	; 0x34
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	ffffe000 	.word	0xffffe000

08004f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b089      	sub	sp, #36	; 0x24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004f92:	2300      	movs	r3, #0
 8004f94:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004f96:	2300      	movs	r3, #0
 8004f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61fb      	str	r3, [r7, #28]
 8004fa6:	e175      	b.n	8005294 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004fa8:	2201      	movs	r2, #1
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	f040 8164 	bne.w	800528e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d005      	beq.n	8004fde <HAL_GPIO_Init+0x56>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d130      	bne.n	8005040 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	2203      	movs	r2, #3
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	4313      	orrs	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005014:	2201      	movs	r2, #1
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	43db      	mvns	r3, r3
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	4013      	ands	r3, r2
 8005022:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	091b      	lsrs	r3, r3, #4
 800502a:	f003 0201 	and.w	r2, r3, #1
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	fa02 f303 	lsl.w	r3, r2, r3
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	4313      	orrs	r3, r2
 8005038:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f003 0303 	and.w	r3, r3, #3
 8005048:	2b03      	cmp	r3, #3
 800504a:	d017      	beq.n	800507c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	2203      	movs	r2, #3
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	43db      	mvns	r3, r3
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	4013      	ands	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	fa02 f303 	lsl.w	r3, r2, r3
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	4313      	orrs	r3, r2
 8005074:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f003 0303 	and.w	r3, r3, #3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d123      	bne.n	80050d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	08da      	lsrs	r2, r3, #3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3208      	adds	r2, #8
 8005090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	220f      	movs	r2, #15
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	43db      	mvns	r3, r3
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	4013      	ands	r3, r2
 80050aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	691a      	ldr	r2, [r3, #16]
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	4313      	orrs	r3, r2
 80050c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	08da      	lsrs	r2, r3, #3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	3208      	adds	r2, #8
 80050ca:	69b9      	ldr	r1, [r7, #24]
 80050cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	2203      	movs	r2, #3
 80050dc:	fa02 f303 	lsl.w	r3, r2, r3
 80050e0:	43db      	mvns	r3, r3
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	4013      	ands	r3, r2
 80050e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f003 0203 	and.w	r2, r3, #3
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 80be 	beq.w	800528e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005112:	4b66      	ldr	r3, [pc, #408]	; (80052ac <HAL_GPIO_Init+0x324>)
 8005114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005116:	4a65      	ldr	r2, [pc, #404]	; (80052ac <HAL_GPIO_Init+0x324>)
 8005118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800511c:	6453      	str	r3, [r2, #68]	; 0x44
 800511e:	4b63      	ldr	r3, [pc, #396]	; (80052ac <HAL_GPIO_Init+0x324>)
 8005120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800512a:	4a61      	ldr	r2, [pc, #388]	; (80052b0 <HAL_GPIO_Init+0x328>)
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	089b      	lsrs	r3, r3, #2
 8005130:	3302      	adds	r3, #2
 8005132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005136:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	220f      	movs	r2, #15
 8005142:	fa02 f303 	lsl.w	r3, r2, r3
 8005146:	43db      	mvns	r3, r3
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	4013      	ands	r3, r2
 800514c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a58      	ldr	r2, [pc, #352]	; (80052b4 <HAL_GPIO_Init+0x32c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d037      	beq.n	80051c6 <HAL_GPIO_Init+0x23e>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a57      	ldr	r2, [pc, #348]	; (80052b8 <HAL_GPIO_Init+0x330>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d031      	beq.n	80051c2 <HAL_GPIO_Init+0x23a>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a56      	ldr	r2, [pc, #344]	; (80052bc <HAL_GPIO_Init+0x334>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d02b      	beq.n	80051be <HAL_GPIO_Init+0x236>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a55      	ldr	r2, [pc, #340]	; (80052c0 <HAL_GPIO_Init+0x338>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d025      	beq.n	80051ba <HAL_GPIO_Init+0x232>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a54      	ldr	r2, [pc, #336]	; (80052c4 <HAL_GPIO_Init+0x33c>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d01f      	beq.n	80051b6 <HAL_GPIO_Init+0x22e>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a53      	ldr	r2, [pc, #332]	; (80052c8 <HAL_GPIO_Init+0x340>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d019      	beq.n	80051b2 <HAL_GPIO_Init+0x22a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a52      	ldr	r2, [pc, #328]	; (80052cc <HAL_GPIO_Init+0x344>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d013      	beq.n	80051ae <HAL_GPIO_Init+0x226>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a51      	ldr	r2, [pc, #324]	; (80052d0 <HAL_GPIO_Init+0x348>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00d      	beq.n	80051aa <HAL_GPIO_Init+0x222>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a50      	ldr	r2, [pc, #320]	; (80052d4 <HAL_GPIO_Init+0x34c>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d007      	beq.n	80051a6 <HAL_GPIO_Init+0x21e>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a4f      	ldr	r2, [pc, #316]	; (80052d8 <HAL_GPIO_Init+0x350>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d101      	bne.n	80051a2 <HAL_GPIO_Init+0x21a>
 800519e:	2309      	movs	r3, #9
 80051a0:	e012      	b.n	80051c8 <HAL_GPIO_Init+0x240>
 80051a2:	230a      	movs	r3, #10
 80051a4:	e010      	b.n	80051c8 <HAL_GPIO_Init+0x240>
 80051a6:	2308      	movs	r3, #8
 80051a8:	e00e      	b.n	80051c8 <HAL_GPIO_Init+0x240>
 80051aa:	2307      	movs	r3, #7
 80051ac:	e00c      	b.n	80051c8 <HAL_GPIO_Init+0x240>
 80051ae:	2306      	movs	r3, #6
 80051b0:	e00a      	b.n	80051c8 <HAL_GPIO_Init+0x240>
 80051b2:	2305      	movs	r3, #5
 80051b4:	e008      	b.n	80051c8 <HAL_GPIO_Init+0x240>
 80051b6:	2304      	movs	r3, #4
 80051b8:	e006      	b.n	80051c8 <HAL_GPIO_Init+0x240>
 80051ba:	2303      	movs	r3, #3
 80051bc:	e004      	b.n	80051c8 <HAL_GPIO_Init+0x240>
 80051be:	2302      	movs	r3, #2
 80051c0:	e002      	b.n	80051c8 <HAL_GPIO_Init+0x240>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e000      	b.n	80051c8 <HAL_GPIO_Init+0x240>
 80051c6:	2300      	movs	r3, #0
 80051c8:	69fa      	ldr	r2, [r7, #28]
 80051ca:	f002 0203 	and.w	r2, r2, #3
 80051ce:	0092      	lsls	r2, r2, #2
 80051d0:	4093      	lsls	r3, r2
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80051d8:	4935      	ldr	r1, [pc, #212]	; (80052b0 <HAL_GPIO_Init+0x328>)
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	089b      	lsrs	r3, r3, #2
 80051de:	3302      	adds	r3, #2
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051e6:	4b3d      	ldr	r3, [pc, #244]	; (80052dc <HAL_GPIO_Init+0x354>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	43db      	mvns	r3, r3
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	4013      	ands	r3, r2
 80051f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	4313      	orrs	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800520a:	4a34      	ldr	r2, [pc, #208]	; (80052dc <HAL_GPIO_Init+0x354>)
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005210:	4b32      	ldr	r3, [pc, #200]	; (80052dc <HAL_GPIO_Init+0x354>)
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	43db      	mvns	r3, r3
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	4013      	ands	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005234:	4a29      	ldr	r2, [pc, #164]	; (80052dc <HAL_GPIO_Init+0x354>)
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800523a:	4b28      	ldr	r3, [pc, #160]	; (80052dc <HAL_GPIO_Init+0x354>)
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	43db      	mvns	r3, r3
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	4013      	ands	r3, r2
 8005248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800525e:	4a1f      	ldr	r2, [pc, #124]	; (80052dc <HAL_GPIO_Init+0x354>)
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005264:	4b1d      	ldr	r3, [pc, #116]	; (80052dc <HAL_GPIO_Init+0x354>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	43db      	mvns	r3, r3
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	4013      	ands	r3, r2
 8005272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	4313      	orrs	r3, r2
 8005286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005288:	4a14      	ldr	r2, [pc, #80]	; (80052dc <HAL_GPIO_Init+0x354>)
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	3301      	adds	r3, #1
 8005292:	61fb      	str	r3, [r7, #28]
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	2b0f      	cmp	r3, #15
 8005298:	f67f ae86 	bls.w	8004fa8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800529c:	bf00      	nop
 800529e:	bf00      	nop
 80052a0:	3724      	adds	r7, #36	; 0x24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40023800 	.word	0x40023800
 80052b0:	40013800 	.word	0x40013800
 80052b4:	40020000 	.word	0x40020000
 80052b8:	40020400 	.word	0x40020400
 80052bc:	40020800 	.word	0x40020800
 80052c0:	40020c00 	.word	0x40020c00
 80052c4:	40021000 	.word	0x40021000
 80052c8:	40021400 	.word	0x40021400
 80052cc:	40021800 	.word	0x40021800
 80052d0:	40021c00 	.word	0x40021c00
 80052d4:	40022000 	.word	0x40022000
 80052d8:	40022400 	.word	0x40022400
 80052dc:	40013c00 	.word	0x40013c00

080052e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	807b      	strh	r3, [r7, #2]
 80052ec:	4613      	mov	r3, r2
 80052ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052f0:	787b      	ldrb	r3, [r7, #1]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052f6:	887a      	ldrh	r2, [r7, #2]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80052fc:	e003      	b.n	8005306 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80052fe:	887b      	ldrh	r3, [r7, #2]
 8005300:	041a      	lsls	r2, r3, #16
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	619a      	str	r2, [r3, #24]
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005312:	b480      	push	{r7}
 8005314:	b085      	sub	sp, #20
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	460b      	mov	r3, r1
 800531c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005324:	887a      	ldrh	r2, [r7, #2]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	4013      	ands	r3, r2
 800532a:	041a      	lsls	r2, r3, #16
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	43d9      	mvns	r1, r3
 8005330:	887b      	ldrh	r3, [r7, #2]
 8005332:	400b      	ands	r3, r1
 8005334:	431a      	orrs	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	619a      	str	r2, [r3, #24]
}
 800533a:	bf00      	nop
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005346:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005348:	b08f      	sub	sp, #60	; 0x3c
 800534a:	af0a      	add	r7, sp, #40	; 0x28
 800534c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e116      	b.n	8005586 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d106      	bne.n	8005378 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7fc fcf8 	bl	8001d68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2203      	movs	r2, #3
 800537c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005388:	2b00      	cmp	r3, #0
 800538a:	d102      	bne.n	8005392 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4618      	mov	r0, r3
 8005398:	f002 fe86 	bl	80080a8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	603b      	str	r3, [r7, #0]
 80053a2:	687e      	ldr	r6, [r7, #4]
 80053a4:	466d      	mov	r5, sp
 80053a6:	f106 0410 	add.w	r4, r6, #16
 80053aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80053b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80053ba:	1d33      	adds	r3, r6, #4
 80053bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053be:	6838      	ldr	r0, [r7, #0]
 80053c0:	f002 fe1a 	bl	8007ff8 <USB_CoreInit>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d005      	beq.n	80053d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2202      	movs	r2, #2
 80053ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e0d7      	b.n	8005586 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2100      	movs	r1, #0
 80053dc:	4618      	mov	r0, r3
 80053de:	f002 fe74 	bl	80080ca <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053e2:	2300      	movs	r3, #0
 80053e4:	73fb      	strb	r3, [r7, #15]
 80053e6:	e04a      	b.n	800547e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80053e8:	7bfa      	ldrb	r2, [r7, #15]
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	4613      	mov	r3, r2
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	4413      	add	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	333d      	adds	r3, #61	; 0x3d
 80053f8:	2201      	movs	r2, #1
 80053fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80053fc:	7bfa      	ldrb	r2, [r7, #15]
 80053fe:	6879      	ldr	r1, [r7, #4]
 8005400:	4613      	mov	r3, r2
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	4413      	add	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	440b      	add	r3, r1
 800540a:	333c      	adds	r3, #60	; 0x3c
 800540c:	7bfa      	ldrb	r2, [r7, #15]
 800540e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005410:	7bfa      	ldrb	r2, [r7, #15]
 8005412:	7bfb      	ldrb	r3, [r7, #15]
 8005414:	b298      	uxth	r0, r3
 8005416:	6879      	ldr	r1, [r7, #4]
 8005418:	4613      	mov	r3, r2
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	4413      	add	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	440b      	add	r3, r1
 8005422:	3344      	adds	r3, #68	; 0x44
 8005424:	4602      	mov	r2, r0
 8005426:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005428:	7bfa      	ldrb	r2, [r7, #15]
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	4613      	mov	r3, r2
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	4413      	add	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	440b      	add	r3, r1
 8005436:	3340      	adds	r3, #64	; 0x40
 8005438:	2200      	movs	r2, #0
 800543a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800543c:	7bfa      	ldrb	r2, [r7, #15]
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	4613      	mov	r3, r2
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	4413      	add	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	440b      	add	r3, r1
 800544a:	3348      	adds	r3, #72	; 0x48
 800544c:	2200      	movs	r2, #0
 800544e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005450:	7bfa      	ldrb	r2, [r7, #15]
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	4613      	mov	r3, r2
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	4413      	add	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	440b      	add	r3, r1
 800545e:	334c      	adds	r3, #76	; 0x4c
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005464:	7bfa      	ldrb	r2, [r7, #15]
 8005466:	6879      	ldr	r1, [r7, #4]
 8005468:	4613      	mov	r3, r2
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	4413      	add	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	440b      	add	r3, r1
 8005472:	3354      	adds	r3, #84	; 0x54
 8005474:	2200      	movs	r2, #0
 8005476:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005478:	7bfb      	ldrb	r3, [r7, #15]
 800547a:	3301      	adds	r3, #1
 800547c:	73fb      	strb	r3, [r7, #15]
 800547e:	7bfa      	ldrb	r2, [r7, #15]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	429a      	cmp	r2, r3
 8005486:	d3af      	bcc.n	80053e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005488:	2300      	movs	r3, #0
 800548a:	73fb      	strb	r3, [r7, #15]
 800548c:	e044      	b.n	8005518 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800548e:	7bfa      	ldrb	r2, [r7, #15]
 8005490:	6879      	ldr	r1, [r7, #4]
 8005492:	4613      	mov	r3, r2
 8005494:	00db      	lsls	r3, r3, #3
 8005496:	4413      	add	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	440b      	add	r3, r1
 800549c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80054a0:	2200      	movs	r2, #0
 80054a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80054a4:	7bfa      	ldrb	r2, [r7, #15]
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	4613      	mov	r3, r2
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	4413      	add	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	440b      	add	r3, r1
 80054b2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80054b6:	7bfa      	ldrb	r2, [r7, #15]
 80054b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80054ba:	7bfa      	ldrb	r2, [r7, #15]
 80054bc:	6879      	ldr	r1, [r7, #4]
 80054be:	4613      	mov	r3, r2
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	4413      	add	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	440b      	add	r3, r1
 80054c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80054cc:	2200      	movs	r2, #0
 80054ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80054d0:	7bfa      	ldrb	r2, [r7, #15]
 80054d2:	6879      	ldr	r1, [r7, #4]
 80054d4:	4613      	mov	r3, r2
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	4413      	add	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80054e6:	7bfa      	ldrb	r2, [r7, #15]
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	4613      	mov	r3, r2
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	4413      	add	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	440b      	add	r3, r1
 80054f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80054fc:	7bfa      	ldrb	r2, [r7, #15]
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	4613      	mov	r3, r2
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	4413      	add	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	440b      	add	r3, r1
 800550a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800550e:	2200      	movs	r2, #0
 8005510:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005512:	7bfb      	ldrb	r3, [r7, #15]
 8005514:	3301      	adds	r3, #1
 8005516:	73fb      	strb	r3, [r7, #15]
 8005518:	7bfa      	ldrb	r2, [r7, #15]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	429a      	cmp	r2, r3
 8005520:	d3b5      	bcc.n	800548e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	603b      	str	r3, [r7, #0]
 8005528:	687e      	ldr	r6, [r7, #4]
 800552a:	466d      	mov	r5, sp
 800552c:	f106 0410 	add.w	r4, r6, #16
 8005530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005532:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005534:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005538:	e894 0003 	ldmia.w	r4, {r0, r1}
 800553c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005540:	1d33      	adds	r3, r6, #4
 8005542:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005544:	6838      	ldr	r0, [r7, #0]
 8005546:	f002 fe0d 	bl	8008164 <USB_DevInit>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d005      	beq.n	800555c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e014      	b.n	8005586 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	2b01      	cmp	r3, #1
 8005572:	d102      	bne.n	800557a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f80b 	bl	8005590 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4618      	mov	r0, r3
 8005580:	f002 ffcb 	bl	800851a <USB_DevDisconnect>

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005590 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055be:	4b05      	ldr	r3, [pc, #20]	; (80055d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	10000003 	.word	0x10000003

080055d8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80055d8:	b480      	push	{r7}
 80055da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055dc:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a04      	ldr	r2, [pc, #16]	; (80055f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80055e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055e6:	6013      	str	r3, [r2, #0]
}
 80055e8:	bf00      	nop
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	40007000 	.word	0x40007000

080055f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80055fe:	2300      	movs	r3, #0
 8005600:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005602:	4b23      	ldr	r3, [pc, #140]	; (8005690 <HAL_PWREx_EnableOverDrive+0x98>)
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	4a22      	ldr	r2, [pc, #136]	; (8005690 <HAL_PWREx_EnableOverDrive+0x98>)
 8005608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800560c:	6413      	str	r3, [r2, #64]	; 0x40
 800560e:	4b20      	ldr	r3, [pc, #128]	; (8005690 <HAL_PWREx_EnableOverDrive+0x98>)
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005616:	603b      	str	r3, [r7, #0]
 8005618:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800561a:	4b1e      	ldr	r3, [pc, #120]	; (8005694 <HAL_PWREx_EnableOverDrive+0x9c>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a1d      	ldr	r2, [pc, #116]	; (8005694 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005624:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005626:	f7fc ff77 	bl	8002518 <HAL_GetTick>
 800562a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800562c:	e009      	b.n	8005642 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800562e:	f7fc ff73 	bl	8002518 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800563c:	d901      	bls.n	8005642 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e022      	b.n	8005688 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005642:	4b14      	ldr	r3, [pc, #80]	; (8005694 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800564a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800564e:	d1ee      	bne.n	800562e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005650:	4b10      	ldr	r3, [pc, #64]	; (8005694 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a0f      	ldr	r2, [pc, #60]	; (8005694 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005656:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800565a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800565c:	f7fc ff5c 	bl	8002518 <HAL_GetTick>
 8005660:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005662:	e009      	b.n	8005678 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005664:	f7fc ff58 	bl	8002518 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005672:	d901      	bls.n	8005678 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e007      	b.n	8005688 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005678:	4b06      	ldr	r3, [pc, #24]	; (8005694 <HAL_PWREx_EnableOverDrive+0x9c>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005680:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005684:	d1ee      	bne.n	8005664 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	40023800 	.word	0x40023800
 8005694:	40007000 	.word	0x40007000

08005698 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80056a0:	2300      	movs	r3, #0
 80056a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e29b      	b.n	8005be6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 8087 	beq.w	80057ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80056bc:	4b96      	ldr	r3, [pc, #600]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f003 030c 	and.w	r3, r3, #12
 80056c4:	2b04      	cmp	r3, #4
 80056c6:	d00c      	beq.n	80056e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056c8:	4b93      	ldr	r3, [pc, #588]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f003 030c 	and.w	r3, r3, #12
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d112      	bne.n	80056fa <HAL_RCC_OscConfig+0x62>
 80056d4:	4b90      	ldr	r3, [pc, #576]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056e0:	d10b      	bne.n	80056fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056e2:	4b8d      	ldr	r3, [pc, #564]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d06c      	beq.n	80057c8 <HAL_RCC_OscConfig+0x130>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d168      	bne.n	80057c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e275      	b.n	8005be6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005702:	d106      	bne.n	8005712 <HAL_RCC_OscConfig+0x7a>
 8005704:	4b84      	ldr	r3, [pc, #528]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a83      	ldr	r2, [pc, #524]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 800570a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	e02e      	b.n	8005770 <HAL_RCC_OscConfig+0xd8>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10c      	bne.n	8005734 <HAL_RCC_OscConfig+0x9c>
 800571a:	4b7f      	ldr	r3, [pc, #508]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a7e      	ldr	r2, [pc, #504]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	4b7c      	ldr	r3, [pc, #496]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a7b      	ldr	r2, [pc, #492]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 800572c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	e01d      	b.n	8005770 <HAL_RCC_OscConfig+0xd8>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800573c:	d10c      	bne.n	8005758 <HAL_RCC_OscConfig+0xc0>
 800573e:	4b76      	ldr	r3, [pc, #472]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a75      	ldr	r2, [pc, #468]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005748:	6013      	str	r3, [r2, #0]
 800574a:	4b73      	ldr	r3, [pc, #460]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a72      	ldr	r2, [pc, #456]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	e00b      	b.n	8005770 <HAL_RCC_OscConfig+0xd8>
 8005758:	4b6f      	ldr	r3, [pc, #444]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a6e      	ldr	r2, [pc, #440]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 800575e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005762:	6013      	str	r3, [r2, #0]
 8005764:	4b6c      	ldr	r3, [pc, #432]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a6b      	ldr	r2, [pc, #428]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 800576a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800576e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d013      	beq.n	80057a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005778:	f7fc fece 	bl	8002518 <HAL_GetTick>
 800577c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005780:	f7fc feca 	bl	8002518 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b64      	cmp	r3, #100	; 0x64
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e229      	b.n	8005be6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005792:	4b61      	ldr	r3, [pc, #388]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0f0      	beq.n	8005780 <HAL_RCC_OscConfig+0xe8>
 800579e:	e014      	b.n	80057ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a0:	f7fc feba 	bl	8002518 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057a8:	f7fc feb6 	bl	8002518 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b64      	cmp	r3, #100	; 0x64
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e215      	b.n	8005be6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ba:	4b57      	ldr	r3, [pc, #348]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1f0      	bne.n	80057a8 <HAL_RCC_OscConfig+0x110>
 80057c6:	e000      	b.n	80057ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d069      	beq.n	80058aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057d6:	4b50      	ldr	r3, [pc, #320]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f003 030c 	and.w	r3, r3, #12
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00b      	beq.n	80057fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057e2:	4b4d      	ldr	r3, [pc, #308]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 030c 	and.w	r3, r3, #12
 80057ea:	2b08      	cmp	r3, #8
 80057ec:	d11c      	bne.n	8005828 <HAL_RCC_OscConfig+0x190>
 80057ee:	4b4a      	ldr	r3, [pc, #296]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d116      	bne.n	8005828 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057fa:	4b47      	ldr	r3, [pc, #284]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d005      	beq.n	8005812 <HAL_RCC_OscConfig+0x17a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d001      	beq.n	8005812 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e1e9      	b.n	8005be6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005812:	4b41      	ldr	r3, [pc, #260]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	493d      	ldr	r1, [pc, #244]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005822:	4313      	orrs	r3, r2
 8005824:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005826:	e040      	b.n	80058aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d023      	beq.n	8005878 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005830:	4b39      	ldr	r3, [pc, #228]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a38      	ldr	r2, [pc, #224]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005836:	f043 0301 	orr.w	r3, r3, #1
 800583a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583c:	f7fc fe6c 	bl	8002518 <HAL_GetTick>
 8005840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005844:	f7fc fe68 	bl	8002518 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e1c7      	b.n	8005be6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005856:	4b30      	ldr	r3, [pc, #192]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0f0      	beq.n	8005844 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005862:	4b2d      	ldr	r3, [pc, #180]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	4929      	ldr	r1, [pc, #164]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005872:	4313      	orrs	r3, r2
 8005874:	600b      	str	r3, [r1, #0]
 8005876:	e018      	b.n	80058aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005878:	4b27      	ldr	r3, [pc, #156]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a26      	ldr	r2, [pc, #152]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 800587e:	f023 0301 	bic.w	r3, r3, #1
 8005882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005884:	f7fc fe48 	bl	8002518 <HAL_GetTick>
 8005888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800588a:	e008      	b.n	800589e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800588c:	f7fc fe44 	bl	8002518 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b02      	cmp	r3, #2
 8005898:	d901      	bls.n	800589e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e1a3      	b.n	8005be6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800589e:	4b1e      	ldr	r3, [pc, #120]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1f0      	bne.n	800588c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0308 	and.w	r3, r3, #8
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d038      	beq.n	8005928 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d019      	beq.n	80058f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058be:	4b16      	ldr	r3, [pc, #88]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80058c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058c2:	4a15      	ldr	r2, [pc, #84]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80058c4:	f043 0301 	orr.w	r3, r3, #1
 80058c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ca:	f7fc fe25 	bl	8002518 <HAL_GetTick>
 80058ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058d0:	e008      	b.n	80058e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058d2:	f7fc fe21 	bl	8002518 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d901      	bls.n	80058e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e180      	b.n	8005be6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058e4:	4b0c      	ldr	r3, [pc, #48]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80058e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0f0      	beq.n	80058d2 <HAL_RCC_OscConfig+0x23a>
 80058f0:	e01a      	b.n	8005928 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058f2:	4b09      	ldr	r3, [pc, #36]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80058f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058f6:	4a08      	ldr	r2, [pc, #32]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80058f8:	f023 0301 	bic.w	r3, r3, #1
 80058fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058fe:	f7fc fe0b 	bl	8002518 <HAL_GetTick>
 8005902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005904:	e00a      	b.n	800591c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005906:	f7fc fe07 	bl	8002518 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	2b02      	cmp	r3, #2
 8005912:	d903      	bls.n	800591c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e166      	b.n	8005be6 <HAL_RCC_OscConfig+0x54e>
 8005918:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800591c:	4b92      	ldr	r3, [pc, #584]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 800591e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1ee      	bne.n	8005906 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 80a4 	beq.w	8005a7e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005936:	4b8c      	ldr	r3, [pc, #560]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 8005938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10d      	bne.n	800595e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005942:	4b89      	ldr	r3, [pc, #548]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	4a88      	ldr	r2, [pc, #544]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 8005948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800594c:	6413      	str	r3, [r2, #64]	; 0x40
 800594e:	4b86      	ldr	r3, [pc, #536]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005956:	60bb      	str	r3, [r7, #8]
 8005958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800595a:	2301      	movs	r3, #1
 800595c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800595e:	4b83      	ldr	r3, [pc, #524]	; (8005b6c <HAL_RCC_OscConfig+0x4d4>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005966:	2b00      	cmp	r3, #0
 8005968:	d118      	bne.n	800599c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800596a:	4b80      	ldr	r3, [pc, #512]	; (8005b6c <HAL_RCC_OscConfig+0x4d4>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a7f      	ldr	r2, [pc, #508]	; (8005b6c <HAL_RCC_OscConfig+0x4d4>)
 8005970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005976:	f7fc fdcf 	bl	8002518 <HAL_GetTick>
 800597a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800597c:	e008      	b.n	8005990 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800597e:	f7fc fdcb 	bl	8002518 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b64      	cmp	r3, #100	; 0x64
 800598a:	d901      	bls.n	8005990 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e12a      	b.n	8005be6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005990:	4b76      	ldr	r3, [pc, #472]	; (8005b6c <HAL_RCC_OscConfig+0x4d4>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005998:	2b00      	cmp	r3, #0
 800599a:	d0f0      	beq.n	800597e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d106      	bne.n	80059b2 <HAL_RCC_OscConfig+0x31a>
 80059a4:	4b70      	ldr	r3, [pc, #448]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 80059a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a8:	4a6f      	ldr	r2, [pc, #444]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 80059aa:	f043 0301 	orr.w	r3, r3, #1
 80059ae:	6713      	str	r3, [r2, #112]	; 0x70
 80059b0:	e02d      	b.n	8005a0e <HAL_RCC_OscConfig+0x376>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10c      	bne.n	80059d4 <HAL_RCC_OscConfig+0x33c>
 80059ba:	4b6b      	ldr	r3, [pc, #428]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 80059bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059be:	4a6a      	ldr	r2, [pc, #424]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 80059c0:	f023 0301 	bic.w	r3, r3, #1
 80059c4:	6713      	str	r3, [r2, #112]	; 0x70
 80059c6:	4b68      	ldr	r3, [pc, #416]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 80059c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ca:	4a67      	ldr	r2, [pc, #412]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 80059cc:	f023 0304 	bic.w	r3, r3, #4
 80059d0:	6713      	str	r3, [r2, #112]	; 0x70
 80059d2:	e01c      	b.n	8005a0e <HAL_RCC_OscConfig+0x376>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	2b05      	cmp	r3, #5
 80059da:	d10c      	bne.n	80059f6 <HAL_RCC_OscConfig+0x35e>
 80059dc:	4b62      	ldr	r3, [pc, #392]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 80059de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e0:	4a61      	ldr	r2, [pc, #388]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 80059e2:	f043 0304 	orr.w	r3, r3, #4
 80059e6:	6713      	str	r3, [r2, #112]	; 0x70
 80059e8:	4b5f      	ldr	r3, [pc, #380]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 80059ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ec:	4a5e      	ldr	r2, [pc, #376]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 80059ee:	f043 0301 	orr.w	r3, r3, #1
 80059f2:	6713      	str	r3, [r2, #112]	; 0x70
 80059f4:	e00b      	b.n	8005a0e <HAL_RCC_OscConfig+0x376>
 80059f6:	4b5c      	ldr	r3, [pc, #368]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 80059f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059fa:	4a5b      	ldr	r2, [pc, #364]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 80059fc:	f023 0301 	bic.w	r3, r3, #1
 8005a00:	6713      	str	r3, [r2, #112]	; 0x70
 8005a02:	4b59      	ldr	r3, [pc, #356]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 8005a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a06:	4a58      	ldr	r2, [pc, #352]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 8005a08:	f023 0304 	bic.w	r3, r3, #4
 8005a0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d015      	beq.n	8005a42 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a16:	f7fc fd7f 	bl	8002518 <HAL_GetTick>
 8005a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a1c:	e00a      	b.n	8005a34 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a1e:	f7fc fd7b 	bl	8002518 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d901      	bls.n	8005a34 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e0d8      	b.n	8005be6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a34:	4b4c      	ldr	r3, [pc, #304]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 8005a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a38:	f003 0302 	and.w	r3, r3, #2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d0ee      	beq.n	8005a1e <HAL_RCC_OscConfig+0x386>
 8005a40:	e014      	b.n	8005a6c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a42:	f7fc fd69 	bl	8002518 <HAL_GetTick>
 8005a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a48:	e00a      	b.n	8005a60 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a4a:	f7fc fd65 	bl	8002518 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e0c2      	b.n	8005be6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a60:	4b41      	ldr	r3, [pc, #260]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 8005a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a64:	f003 0302 	and.w	r3, r3, #2
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1ee      	bne.n	8005a4a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a6c:	7dfb      	ldrb	r3, [r7, #23]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d105      	bne.n	8005a7e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a72:	4b3d      	ldr	r3, [pc, #244]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 8005a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a76:	4a3c      	ldr	r2, [pc, #240]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 8005a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 80ae 	beq.w	8005be4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a88:	4b37      	ldr	r3, [pc, #220]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f003 030c 	and.w	r3, r3, #12
 8005a90:	2b08      	cmp	r3, #8
 8005a92:	d06d      	beq.n	8005b70 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d14b      	bne.n	8005b34 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a9c:	4b32      	ldr	r3, [pc, #200]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a31      	ldr	r2, [pc, #196]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 8005aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa8:	f7fc fd36 	bl	8002518 <HAL_GetTick>
 8005aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aae:	e008      	b.n	8005ac2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ab0:	f7fc fd32 	bl	8002518 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e091      	b.n	8005be6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ac2:	4b29      	ldr	r3, [pc, #164]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1f0      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69da      	ldr	r2, [r3, #28]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005adc:	019b      	lsls	r3, r3, #6
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae4:	085b      	lsrs	r3, r3, #1
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	041b      	lsls	r3, r3, #16
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af0:	061b      	lsls	r3, r3, #24
 8005af2:	431a      	orrs	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af8:	071b      	lsls	r3, r3, #28
 8005afa:	491b      	ldr	r1, [pc, #108]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b00:	4b19      	ldr	r3, [pc, #100]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a18      	ldr	r2, [pc, #96]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 8005b06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b0c:	f7fc fd04 	bl	8002518 <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b14:	f7fc fd00 	bl	8002518 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e05f      	b.n	8005be6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b26:	4b10      	ldr	r3, [pc, #64]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0f0      	beq.n	8005b14 <HAL_RCC_OscConfig+0x47c>
 8005b32:	e057      	b.n	8005be4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b34:	4b0c      	ldr	r3, [pc, #48]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a0b      	ldr	r2, [pc, #44]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 8005b3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b40:	f7fc fcea 	bl	8002518 <HAL_GetTick>
 8005b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b46:	e008      	b.n	8005b5a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b48:	f7fc fce6 	bl	8002518 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d901      	bls.n	8005b5a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e045      	b.n	8005be6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b5a:	4b03      	ldr	r3, [pc, #12]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1f0      	bne.n	8005b48 <HAL_RCC_OscConfig+0x4b0>
 8005b66:	e03d      	b.n	8005be4 <HAL_RCC_OscConfig+0x54c>
 8005b68:	40023800 	.word	0x40023800
 8005b6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005b70:	4b1f      	ldr	r3, [pc, #124]	; (8005bf0 <HAL_RCC_OscConfig+0x558>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d030      	beq.n	8005be0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d129      	bne.n	8005be0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d122      	bne.n	8005be0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ba6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d119      	bne.n	8005be0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb6:	085b      	lsrs	r3, r3, #1
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d10f      	bne.n	8005be0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d107      	bne.n	8005be0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bda:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d001      	beq.n	8005be4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e000      	b.n	8005be6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3718      	adds	r7, #24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	40023800 	.word	0x40023800

08005bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d101      	bne.n	8005c0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e0d0      	b.n	8005dae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c0c:	4b6a      	ldr	r3, [pc, #424]	; (8005db8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 030f 	and.w	r3, r3, #15
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d910      	bls.n	8005c3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c1a:	4b67      	ldr	r3, [pc, #412]	; (8005db8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f023 020f 	bic.w	r2, r3, #15
 8005c22:	4965      	ldr	r1, [pc, #404]	; (8005db8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c2a:	4b63      	ldr	r3, [pc, #396]	; (8005db8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 030f 	and.w	r3, r3, #15
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d001      	beq.n	8005c3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e0b8      	b.n	8005dae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d020      	beq.n	8005c8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c54:	4b59      	ldr	r3, [pc, #356]	; (8005dbc <HAL_RCC_ClockConfig+0x1c8>)
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	4a58      	ldr	r2, [pc, #352]	; (8005dbc <HAL_RCC_ClockConfig+0x1c8>)
 8005c5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0308 	and.w	r3, r3, #8
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d005      	beq.n	8005c78 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c6c:	4b53      	ldr	r3, [pc, #332]	; (8005dbc <HAL_RCC_ClockConfig+0x1c8>)
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	4a52      	ldr	r2, [pc, #328]	; (8005dbc <HAL_RCC_ClockConfig+0x1c8>)
 8005c72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c78:	4b50      	ldr	r3, [pc, #320]	; (8005dbc <HAL_RCC_ClockConfig+0x1c8>)
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	494d      	ldr	r1, [pc, #308]	; (8005dbc <HAL_RCC_ClockConfig+0x1c8>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d040      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d107      	bne.n	8005cae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c9e:	4b47      	ldr	r3, [pc, #284]	; (8005dbc <HAL_RCC_ClockConfig+0x1c8>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d115      	bne.n	8005cd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e07f      	b.n	8005dae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d107      	bne.n	8005cc6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cb6:	4b41      	ldr	r3, [pc, #260]	; (8005dbc <HAL_RCC_ClockConfig+0x1c8>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d109      	bne.n	8005cd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e073      	b.n	8005dae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cc6:	4b3d      	ldr	r3, [pc, #244]	; (8005dbc <HAL_RCC_ClockConfig+0x1c8>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e06b      	b.n	8005dae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cd6:	4b39      	ldr	r3, [pc, #228]	; (8005dbc <HAL_RCC_ClockConfig+0x1c8>)
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f023 0203 	bic.w	r2, r3, #3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	4936      	ldr	r1, [pc, #216]	; (8005dbc <HAL_RCC_ClockConfig+0x1c8>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ce8:	f7fc fc16 	bl	8002518 <HAL_GetTick>
 8005cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cee:	e00a      	b.n	8005d06 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cf0:	f7fc fc12 	bl	8002518 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e053      	b.n	8005dae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d06:	4b2d      	ldr	r3, [pc, #180]	; (8005dbc <HAL_RCC_ClockConfig+0x1c8>)
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f003 020c 	and.w	r2, r3, #12
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d1eb      	bne.n	8005cf0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d18:	4b27      	ldr	r3, [pc, #156]	; (8005db8 <HAL_RCC_ClockConfig+0x1c4>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 030f 	and.w	r3, r3, #15
 8005d20:	683a      	ldr	r2, [r7, #0]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d210      	bcs.n	8005d48 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d26:	4b24      	ldr	r3, [pc, #144]	; (8005db8 <HAL_RCC_ClockConfig+0x1c4>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f023 020f 	bic.w	r2, r3, #15
 8005d2e:	4922      	ldr	r1, [pc, #136]	; (8005db8 <HAL_RCC_ClockConfig+0x1c4>)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d36:	4b20      	ldr	r3, [pc, #128]	; (8005db8 <HAL_RCC_ClockConfig+0x1c4>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 030f 	and.w	r3, r3, #15
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d001      	beq.n	8005d48 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e032      	b.n	8005dae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0304 	and.w	r3, r3, #4
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d008      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d54:	4b19      	ldr	r3, [pc, #100]	; (8005dbc <HAL_RCC_ClockConfig+0x1c8>)
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	4916      	ldr	r1, [pc, #88]	; (8005dbc <HAL_RCC_ClockConfig+0x1c8>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0308 	and.w	r3, r3, #8
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d009      	beq.n	8005d86 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d72:	4b12      	ldr	r3, [pc, #72]	; (8005dbc <HAL_RCC_ClockConfig+0x1c8>)
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	490e      	ldr	r1, [pc, #56]	; (8005dbc <HAL_RCC_ClockConfig+0x1c8>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d86:	f000 f821 	bl	8005dcc <HAL_RCC_GetSysClockFreq>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	4b0b      	ldr	r3, [pc, #44]	; (8005dbc <HAL_RCC_ClockConfig+0x1c8>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	091b      	lsrs	r3, r3, #4
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	490a      	ldr	r1, [pc, #40]	; (8005dc0 <HAL_RCC_ClockConfig+0x1cc>)
 8005d98:	5ccb      	ldrb	r3, [r1, r3]
 8005d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d9e:	4a09      	ldr	r2, [pc, #36]	; (8005dc4 <HAL_RCC_ClockConfig+0x1d0>)
 8005da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005da2:	4b09      	ldr	r3, [pc, #36]	; (8005dc8 <HAL_RCC_ClockConfig+0x1d4>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fc f858 	bl	8001e5c <HAL_InitTick>

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	40023c00 	.word	0x40023c00
 8005dbc:	40023800 	.word	0x40023800
 8005dc0:	0801b0e0 	.word	0x0801b0e0
 8005dc4:	20000000 	.word	0x20000000
 8005dc8:	20000004 	.word	0x20000004

08005dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dd0:	b094      	sub	sp, #80	; 0x50
 8005dd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	647b      	str	r3, [r7, #68]	; 0x44
 8005dd8:	2300      	movs	r3, #0
 8005dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ddc:	2300      	movs	r3, #0
 8005dde:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005de0:	2300      	movs	r3, #0
 8005de2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005de4:	4b79      	ldr	r3, [pc, #484]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f003 030c 	and.w	r3, r3, #12
 8005dec:	2b08      	cmp	r3, #8
 8005dee:	d00d      	beq.n	8005e0c <HAL_RCC_GetSysClockFreq+0x40>
 8005df0:	2b08      	cmp	r3, #8
 8005df2:	f200 80e1 	bhi.w	8005fb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <HAL_RCC_GetSysClockFreq+0x34>
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	d003      	beq.n	8005e06 <HAL_RCC_GetSysClockFreq+0x3a>
 8005dfe:	e0db      	b.n	8005fb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e00:	4b73      	ldr	r3, [pc, #460]	; (8005fd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e04:	e0db      	b.n	8005fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e06:	4b73      	ldr	r3, [pc, #460]	; (8005fd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005e08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e0a:	e0d8      	b.n	8005fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e0c:	4b6f      	ldr	r3, [pc, #444]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e14:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005e16:	4b6d      	ldr	r3, [pc, #436]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d063      	beq.n	8005eea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e22:	4b6a      	ldr	r3, [pc, #424]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	099b      	lsrs	r3, r3, #6
 8005e28:	2200      	movs	r2, #0
 8005e2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e34:	633b      	str	r3, [r7, #48]	; 0x30
 8005e36:	2300      	movs	r3, #0
 8005e38:	637b      	str	r3, [r7, #52]	; 0x34
 8005e3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005e3e:	4622      	mov	r2, r4
 8005e40:	462b      	mov	r3, r5
 8005e42:	f04f 0000 	mov.w	r0, #0
 8005e46:	f04f 0100 	mov.w	r1, #0
 8005e4a:	0159      	lsls	r1, r3, #5
 8005e4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e50:	0150      	lsls	r0, r2, #5
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	4621      	mov	r1, r4
 8005e58:	1a51      	subs	r1, r2, r1
 8005e5a:	6139      	str	r1, [r7, #16]
 8005e5c:	4629      	mov	r1, r5
 8005e5e:	eb63 0301 	sbc.w	r3, r3, r1
 8005e62:	617b      	str	r3, [r7, #20]
 8005e64:	f04f 0200 	mov.w	r2, #0
 8005e68:	f04f 0300 	mov.w	r3, #0
 8005e6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e70:	4659      	mov	r1, fp
 8005e72:	018b      	lsls	r3, r1, #6
 8005e74:	4651      	mov	r1, sl
 8005e76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e7a:	4651      	mov	r1, sl
 8005e7c:	018a      	lsls	r2, r1, #6
 8005e7e:	4651      	mov	r1, sl
 8005e80:	ebb2 0801 	subs.w	r8, r2, r1
 8005e84:	4659      	mov	r1, fp
 8005e86:	eb63 0901 	sbc.w	r9, r3, r1
 8005e8a:	f04f 0200 	mov.w	r2, #0
 8005e8e:	f04f 0300 	mov.w	r3, #0
 8005e92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e9e:	4690      	mov	r8, r2
 8005ea0:	4699      	mov	r9, r3
 8005ea2:	4623      	mov	r3, r4
 8005ea4:	eb18 0303 	adds.w	r3, r8, r3
 8005ea8:	60bb      	str	r3, [r7, #8]
 8005eaa:	462b      	mov	r3, r5
 8005eac:	eb49 0303 	adc.w	r3, r9, r3
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	f04f 0200 	mov.w	r2, #0
 8005eb6:	f04f 0300 	mov.w	r3, #0
 8005eba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005ebe:	4629      	mov	r1, r5
 8005ec0:	024b      	lsls	r3, r1, #9
 8005ec2:	4621      	mov	r1, r4
 8005ec4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ec8:	4621      	mov	r1, r4
 8005eca:	024a      	lsls	r2, r1, #9
 8005ecc:	4610      	mov	r0, r2
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ed6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ed8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005edc:	f7fa fa00 	bl	80002e0 <__aeabi_uldivmod>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ee8:	e058      	b.n	8005f9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eea:	4b38      	ldr	r3, [pc, #224]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	099b      	lsrs	r3, r3, #6
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	4611      	mov	r1, r2
 8005ef6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005efa:	623b      	str	r3, [r7, #32]
 8005efc:	2300      	movs	r3, #0
 8005efe:	627b      	str	r3, [r7, #36]	; 0x24
 8005f00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f04:	4642      	mov	r2, r8
 8005f06:	464b      	mov	r3, r9
 8005f08:	f04f 0000 	mov.w	r0, #0
 8005f0c:	f04f 0100 	mov.w	r1, #0
 8005f10:	0159      	lsls	r1, r3, #5
 8005f12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f16:	0150      	lsls	r0, r2, #5
 8005f18:	4602      	mov	r2, r0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4641      	mov	r1, r8
 8005f1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f22:	4649      	mov	r1, r9
 8005f24:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f28:	f04f 0200 	mov.w	r2, #0
 8005f2c:	f04f 0300 	mov.w	r3, #0
 8005f30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005f34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f3c:	ebb2 040a 	subs.w	r4, r2, sl
 8005f40:	eb63 050b 	sbc.w	r5, r3, fp
 8005f44:	f04f 0200 	mov.w	r2, #0
 8005f48:	f04f 0300 	mov.w	r3, #0
 8005f4c:	00eb      	lsls	r3, r5, #3
 8005f4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f52:	00e2      	lsls	r2, r4, #3
 8005f54:	4614      	mov	r4, r2
 8005f56:	461d      	mov	r5, r3
 8005f58:	4643      	mov	r3, r8
 8005f5a:	18e3      	adds	r3, r4, r3
 8005f5c:	603b      	str	r3, [r7, #0]
 8005f5e:	464b      	mov	r3, r9
 8005f60:	eb45 0303 	adc.w	r3, r5, r3
 8005f64:	607b      	str	r3, [r7, #4]
 8005f66:	f04f 0200 	mov.w	r2, #0
 8005f6a:	f04f 0300 	mov.w	r3, #0
 8005f6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f72:	4629      	mov	r1, r5
 8005f74:	028b      	lsls	r3, r1, #10
 8005f76:	4621      	mov	r1, r4
 8005f78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f7c:	4621      	mov	r1, r4
 8005f7e:	028a      	lsls	r2, r1, #10
 8005f80:	4610      	mov	r0, r2
 8005f82:	4619      	mov	r1, r3
 8005f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f86:	2200      	movs	r2, #0
 8005f88:	61bb      	str	r3, [r7, #24]
 8005f8a:	61fa      	str	r2, [r7, #28]
 8005f8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f90:	f7fa f9a6 	bl	80002e0 <__aeabi_uldivmod>
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	4613      	mov	r3, r2
 8005f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005f9c:	4b0b      	ldr	r3, [pc, #44]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	0c1b      	lsrs	r3, r3, #16
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005fac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005fb6:	e002      	b.n	8005fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fb8:	4b05      	ldr	r3, [pc, #20]	; (8005fd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005fba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005fbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3750      	adds	r7, #80	; 0x50
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fca:	bf00      	nop
 8005fcc:	40023800 	.word	0x40023800
 8005fd0:	00f42400 	.word	0x00f42400
 8005fd4:	007a1200 	.word	0x007a1200

08005fd8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fdc:	4b03      	ldr	r3, [pc, #12]	; (8005fec <HAL_RCC_GetHCLKFreq+0x14>)
 8005fde:	681b      	ldr	r3, [r3, #0]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	20000000 	.word	0x20000000

08005ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ff4:	f7ff fff0 	bl	8005fd8 <HAL_RCC_GetHCLKFreq>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	4b05      	ldr	r3, [pc, #20]	; (8006010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	0a9b      	lsrs	r3, r3, #10
 8006000:	f003 0307 	and.w	r3, r3, #7
 8006004:	4903      	ldr	r1, [pc, #12]	; (8006014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006006:	5ccb      	ldrb	r3, [r1, r3]
 8006008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800600c:	4618      	mov	r0, r3
 800600e:	bd80      	pop	{r7, pc}
 8006010:	40023800 	.word	0x40023800
 8006014:	0801b0f0 	.word	0x0801b0f0

08006018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800601c:	f7ff ffdc 	bl	8005fd8 <HAL_RCC_GetHCLKFreq>
 8006020:	4602      	mov	r2, r0
 8006022:	4b05      	ldr	r3, [pc, #20]	; (8006038 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	0b5b      	lsrs	r3, r3, #13
 8006028:	f003 0307 	and.w	r3, r3, #7
 800602c:	4903      	ldr	r1, [pc, #12]	; (800603c <HAL_RCC_GetPCLK2Freq+0x24>)
 800602e:	5ccb      	ldrb	r3, [r1, r3]
 8006030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006034:	4618      	mov	r0, r3
 8006036:	bd80      	pop	{r7, pc}
 8006038:	40023800 	.word	0x40023800
 800603c:	0801b0f0 	.word	0x0801b0f0

08006040 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	220f      	movs	r2, #15
 800604e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006050:	4b12      	ldr	r3, [pc, #72]	; (800609c <HAL_RCC_GetClockConfig+0x5c>)
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f003 0203 	and.w	r2, r3, #3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800605c:	4b0f      	ldr	r3, [pc, #60]	; (800609c <HAL_RCC_GetClockConfig+0x5c>)
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006068:	4b0c      	ldr	r3, [pc, #48]	; (800609c <HAL_RCC_GetClockConfig+0x5c>)
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006074:	4b09      	ldr	r3, [pc, #36]	; (800609c <HAL_RCC_GetClockConfig+0x5c>)
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	08db      	lsrs	r3, r3, #3
 800607a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006082:	4b07      	ldr	r3, [pc, #28]	; (80060a0 <HAL_RCC_GetClockConfig+0x60>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 020f 	and.w	r2, r3, #15
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	601a      	str	r2, [r3, #0]
}
 800608e:	bf00      	nop
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	40023800 	.word	0x40023800
 80060a0:	40023c00 	.word	0x40023c00

080060a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b088      	sub	sp, #32
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80060ac:	2300      	movs	r3, #0
 80060ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80060b0:	2300      	movs	r3, #0
 80060b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80060b4:	2300      	movs	r3, #0
 80060b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80060b8:	2300      	movs	r3, #0
 80060ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80060bc:	2300      	movs	r3, #0
 80060be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d012      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80060cc:	4b69      	ldr	r3, [pc, #420]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	4a68      	ldr	r2, [pc, #416]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80060d6:	6093      	str	r3, [r2, #8]
 80060d8:	4b66      	ldr	r3, [pc, #408]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060da:	689a      	ldr	r2, [r3, #8]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e0:	4964      	ldr	r1, [pc, #400]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80060ee:	2301      	movs	r3, #1
 80060f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d017      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060fe:	4b5d      	ldr	r3, [pc, #372]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006104:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610c:	4959      	ldr	r1, [pc, #356]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800610e:	4313      	orrs	r3, r2
 8006110:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006118:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800611c:	d101      	bne.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800611e:	2301      	movs	r3, #1
 8006120:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800612a:	2301      	movs	r3, #1
 800612c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d017      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800613a:	4b4e      	ldr	r3, [pc, #312]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800613c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006140:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006148:	494a      	ldr	r1, [pc, #296]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800614a:	4313      	orrs	r3, r2
 800614c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006154:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006158:	d101      	bne.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800615a:	2301      	movs	r3, #1
 800615c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006166:	2301      	movs	r3, #1
 8006168:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006176:	2301      	movs	r3, #1
 8006178:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0320 	and.w	r3, r3, #32
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 808b 	beq.w	800629e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006188:	4b3a      	ldr	r3, [pc, #232]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800618a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618c:	4a39      	ldr	r2, [pc, #228]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800618e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006192:	6413      	str	r3, [r2, #64]	; 0x40
 8006194:	4b37      	ldr	r3, [pc, #220]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800619c:	60bb      	str	r3, [r7, #8]
 800619e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80061a0:	4b35      	ldr	r3, [pc, #212]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a34      	ldr	r2, [pc, #208]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061ac:	f7fc f9b4 	bl	8002518 <HAL_GetTick>
 80061b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80061b2:	e008      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061b4:	f7fc f9b0 	bl	8002518 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b64      	cmp	r3, #100	; 0x64
 80061c0:	d901      	bls.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e38f      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80061c6:	4b2c      	ldr	r3, [pc, #176]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d0f0      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061d2:	4b28      	ldr	r3, [pc, #160]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d035      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d02e      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061f0:	4b20      	ldr	r3, [pc, #128]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061fa:	4b1e      	ldr	r3, [pc, #120]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fe:	4a1d      	ldr	r2, [pc, #116]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006204:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006206:	4b1b      	ldr	r3, [pc, #108]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800620a:	4a1a      	ldr	r2, [pc, #104]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800620c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006210:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006212:	4a18      	ldr	r2, [pc, #96]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006218:	4b16      	ldr	r3, [pc, #88]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800621a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	2b01      	cmp	r3, #1
 8006222:	d114      	bne.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006224:	f7fc f978 	bl	8002518 <HAL_GetTick>
 8006228:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800622a:	e00a      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800622c:	f7fc f974 	bl	8002518 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	f241 3288 	movw	r2, #5000	; 0x1388
 800623a:	4293      	cmp	r3, r2
 800623c:	d901      	bls.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e351      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006242:	4b0c      	ldr	r3, [pc, #48]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0ee      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006256:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800625a:	d111      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800625c:	4b05      	ldr	r3, [pc, #20]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006268:	4b04      	ldr	r3, [pc, #16]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800626a:	400b      	ands	r3, r1
 800626c:	4901      	ldr	r1, [pc, #4]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800626e:	4313      	orrs	r3, r2
 8006270:	608b      	str	r3, [r1, #8]
 8006272:	e00b      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006274:	40023800 	.word	0x40023800
 8006278:	40007000 	.word	0x40007000
 800627c:	0ffffcff 	.word	0x0ffffcff
 8006280:	4bac      	ldr	r3, [pc, #688]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	4aab      	ldr	r2, [pc, #684]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006286:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800628a:	6093      	str	r3, [r2, #8]
 800628c:	4ba9      	ldr	r3, [pc, #676]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800628e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006298:	49a6      	ldr	r1, [pc, #664]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800629a:	4313      	orrs	r3, r2
 800629c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0310 	and.w	r3, r3, #16
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d010      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80062aa:	4ba2      	ldr	r3, [pc, #648]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062b0:	4aa0      	ldr	r2, [pc, #640]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80062ba:	4b9e      	ldr	r3, [pc, #632]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c4:	499b      	ldr	r1, [pc, #620]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00a      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062d8:	4b96      	ldr	r3, [pc, #600]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062e6:	4993      	ldr	r1, [pc, #588]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062fa:	4b8e      	ldr	r3, [pc, #568]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006300:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006308:	498a      	ldr	r1, [pc, #552]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800630a:	4313      	orrs	r3, r2
 800630c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00a      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800631c:	4b85      	ldr	r3, [pc, #532]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800631e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006322:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800632a:	4982      	ldr	r1, [pc, #520]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800632c:	4313      	orrs	r3, r2
 800632e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00a      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800633e:	4b7d      	ldr	r3, [pc, #500]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006344:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634c:	4979      	ldr	r1, [pc, #484]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800634e:	4313      	orrs	r3, r2
 8006350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00a      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006360:	4b74      	ldr	r3, [pc, #464]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006366:	f023 0203 	bic.w	r2, r3, #3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800636e:	4971      	ldr	r1, [pc, #452]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006370:	4313      	orrs	r3, r2
 8006372:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00a      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006382:	4b6c      	ldr	r3, [pc, #432]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006388:	f023 020c 	bic.w	r2, r3, #12
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006390:	4968      	ldr	r1, [pc, #416]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006392:	4313      	orrs	r3, r2
 8006394:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00a      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063a4:	4b63      	ldr	r3, [pc, #396]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063b2:	4960      	ldr	r1, [pc, #384]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00a      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063c6:	4b5b      	ldr	r3, [pc, #364]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d4:	4957      	ldr	r1, [pc, #348]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00a      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063e8:	4b52      	ldr	r3, [pc, #328]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f6:	494f      	ldr	r1, [pc, #316]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00a      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800640a:	4b4a      	ldr	r3, [pc, #296]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800640c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006410:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006418:	4946      	ldr	r1, [pc, #280]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800641a:	4313      	orrs	r3, r2
 800641c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00a      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800642c:	4b41      	ldr	r3, [pc, #260]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800642e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006432:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800643a:	493e      	ldr	r1, [pc, #248]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800643c:	4313      	orrs	r3, r2
 800643e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00a      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800644e:	4b39      	ldr	r3, [pc, #228]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006454:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800645c:	4935      	ldr	r1, [pc, #212]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800645e:	4313      	orrs	r3, r2
 8006460:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00a      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006470:	4b30      	ldr	r3, [pc, #192]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006476:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800647e:	492d      	ldr	r1, [pc, #180]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006480:	4313      	orrs	r3, r2
 8006482:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d011      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006492:	4b28      	ldr	r3, [pc, #160]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006498:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064a0:	4924      	ldr	r1, [pc, #144]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064b0:	d101      	bne.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80064b2:	2301      	movs	r3, #1
 80064b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0308 	and.w	r3, r3, #8
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80064c2:	2301      	movs	r3, #1
 80064c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00a      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064d2:	4b18      	ldr	r3, [pc, #96]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064e0:	4914      	ldr	r1, [pc, #80]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00b      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80064f4:	4b0f      	ldr	r3, [pc, #60]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006504:	490b      	ldr	r1, [pc, #44]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006506:	4313      	orrs	r3, r2
 8006508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00f      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006518:	4b06      	ldr	r3, [pc, #24]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800651a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800651e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006528:	4902      	ldr	r1, [pc, #8]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800652a:	4313      	orrs	r3, r2
 800652c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006530:	e002      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006532:	bf00      	nop
 8006534:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00b      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006544:	4b8a      	ldr	r3, [pc, #552]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800654a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006554:	4986      	ldr	r1, [pc, #536]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006556:	4313      	orrs	r3, r2
 8006558:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00b      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006568:	4b81      	ldr	r3, [pc, #516]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800656a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800656e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006578:	497d      	ldr	r1, [pc, #500]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800657a:	4313      	orrs	r3, r2
 800657c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d006      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800658e:	2b00      	cmp	r3, #0
 8006590:	f000 80d6 	beq.w	8006740 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006594:	4b76      	ldr	r3, [pc, #472]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a75      	ldr	r2, [pc, #468]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800659a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800659e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065a0:	f7fb ffba 	bl	8002518 <HAL_GetTick>
 80065a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065a6:	e008      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80065a8:	f7fb ffb6 	bl	8002518 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b64      	cmp	r3, #100	; 0x64
 80065b4:	d901      	bls.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e195      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065ba:	4b6d      	ldr	r3, [pc, #436]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1f0      	bne.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d021      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d11d      	bne.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80065da:	4b65      	ldr	r3, [pc, #404]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065e0:	0c1b      	lsrs	r3, r3, #16
 80065e2:	f003 0303 	and.w	r3, r3, #3
 80065e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80065e8:	4b61      	ldr	r3, [pc, #388]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065ee:	0e1b      	lsrs	r3, r3, #24
 80065f0:	f003 030f 	and.w	r3, r3, #15
 80065f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	019a      	lsls	r2, r3, #6
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	041b      	lsls	r3, r3, #16
 8006600:	431a      	orrs	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	061b      	lsls	r3, r3, #24
 8006606:	431a      	orrs	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	071b      	lsls	r3, r3, #28
 800660e:	4958      	ldr	r1, [pc, #352]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006610:	4313      	orrs	r3, r2
 8006612:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d004      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800662a:	d00a      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006634:	2b00      	cmp	r3, #0
 8006636:	d02e      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006640:	d129      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006642:	4b4b      	ldr	r3, [pc, #300]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006648:	0c1b      	lsrs	r3, r3, #16
 800664a:	f003 0303 	and.w	r3, r3, #3
 800664e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006650:	4b47      	ldr	r3, [pc, #284]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006656:	0f1b      	lsrs	r3, r3, #28
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	019a      	lsls	r2, r3, #6
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	041b      	lsls	r3, r3, #16
 8006668:	431a      	orrs	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	061b      	lsls	r3, r3, #24
 8006670:	431a      	orrs	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	071b      	lsls	r3, r3, #28
 8006676:	493e      	ldr	r1, [pc, #248]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006678:	4313      	orrs	r3, r2
 800667a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800667e:	4b3c      	ldr	r3, [pc, #240]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006684:	f023 021f 	bic.w	r2, r3, #31
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668c:	3b01      	subs	r3, #1
 800668e:	4938      	ldr	r1, [pc, #224]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006690:	4313      	orrs	r3, r2
 8006692:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d01d      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80066a2:	4b33      	ldr	r3, [pc, #204]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066a8:	0e1b      	lsrs	r3, r3, #24
 80066aa:	f003 030f 	and.w	r3, r3, #15
 80066ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80066b0:	4b2f      	ldr	r3, [pc, #188]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066b6:	0f1b      	lsrs	r3, r3, #28
 80066b8:	f003 0307 	and.w	r3, r3, #7
 80066bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	019a      	lsls	r2, r3, #6
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	041b      	lsls	r3, r3, #16
 80066ca:	431a      	orrs	r2, r3
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	061b      	lsls	r3, r3, #24
 80066d0:	431a      	orrs	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	071b      	lsls	r3, r3, #28
 80066d6:	4926      	ldr	r1, [pc, #152]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d011      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	019a      	lsls	r2, r3, #6
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	041b      	lsls	r3, r3, #16
 80066f6:	431a      	orrs	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	061b      	lsls	r3, r3, #24
 80066fe:	431a      	orrs	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	071b      	lsls	r3, r3, #28
 8006706:	491a      	ldr	r1, [pc, #104]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006708:	4313      	orrs	r3, r2
 800670a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800670e:	4b18      	ldr	r3, [pc, #96]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a17      	ldr	r2, [pc, #92]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006714:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006718:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800671a:	f7fb fefd 	bl	8002518 <HAL_GetTick>
 800671e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006720:	e008      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006722:	f7fb fef9 	bl	8002518 <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	2b64      	cmp	r3, #100	; 0x64
 800672e:	d901      	bls.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e0d8      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006734:	4b0e      	ldr	r3, [pc, #56]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0f0      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	2b01      	cmp	r3, #1
 8006744:	f040 80ce 	bne.w	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006748:	4b09      	ldr	r3, [pc, #36]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a08      	ldr	r2, [pc, #32]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800674e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006752:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006754:	f7fb fee0 	bl	8002518 <HAL_GetTick>
 8006758:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800675a:	e00b      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800675c:	f7fb fedc 	bl	8002518 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	2b64      	cmp	r3, #100	; 0x64
 8006768:	d904      	bls.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e0bb      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800676e:	bf00      	nop
 8006770:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006774:	4b5e      	ldr	r3, [pc, #376]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800677c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006780:	d0ec      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006792:	2b00      	cmp	r3, #0
 8006794:	d009      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d02e      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d12a      	bne.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80067aa:	4b51      	ldr	r3, [pc, #324]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b0:	0c1b      	lsrs	r3, r3, #16
 80067b2:	f003 0303 	and.w	r3, r3, #3
 80067b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067b8:	4b4d      	ldr	r3, [pc, #308]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067be:	0f1b      	lsrs	r3, r3, #28
 80067c0:	f003 0307 	and.w	r3, r3, #7
 80067c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	019a      	lsls	r2, r3, #6
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	041b      	lsls	r3, r3, #16
 80067d0:	431a      	orrs	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	061b      	lsls	r3, r3, #24
 80067d8:	431a      	orrs	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	071b      	lsls	r3, r3, #28
 80067de:	4944      	ldr	r1, [pc, #272]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80067e6:	4b42      	ldr	r3, [pc, #264]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f4:	3b01      	subs	r3, #1
 80067f6:	021b      	lsls	r3, r3, #8
 80067f8:	493d      	ldr	r1, [pc, #244]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d022      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006810:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006814:	d11d      	bne.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006816:	4b36      	ldr	r3, [pc, #216]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800681c:	0e1b      	lsrs	r3, r3, #24
 800681e:	f003 030f 	and.w	r3, r3, #15
 8006822:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006824:	4b32      	ldr	r3, [pc, #200]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800682a:	0f1b      	lsrs	r3, r3, #28
 800682c:	f003 0307 	and.w	r3, r3, #7
 8006830:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	019a      	lsls	r2, r3, #6
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a1b      	ldr	r3, [r3, #32]
 800683c:	041b      	lsls	r3, r3, #16
 800683e:	431a      	orrs	r2, r3
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	061b      	lsls	r3, r3, #24
 8006844:	431a      	orrs	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	071b      	lsls	r3, r3, #28
 800684a:	4929      	ldr	r1, [pc, #164]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800684c:	4313      	orrs	r3, r2
 800684e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0308 	and.w	r3, r3, #8
 800685a:	2b00      	cmp	r3, #0
 800685c:	d028      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800685e:	4b24      	ldr	r3, [pc, #144]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006864:	0e1b      	lsrs	r3, r3, #24
 8006866:	f003 030f 	and.w	r3, r3, #15
 800686a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800686c:	4b20      	ldr	r3, [pc, #128]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800686e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006872:	0c1b      	lsrs	r3, r3, #16
 8006874:	f003 0303 	and.w	r3, r3, #3
 8006878:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	019a      	lsls	r2, r3, #6
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	041b      	lsls	r3, r3, #16
 8006884:	431a      	orrs	r2, r3
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	061b      	lsls	r3, r3, #24
 800688a:	431a      	orrs	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	071b      	lsls	r3, r3, #28
 8006892:	4917      	ldr	r1, [pc, #92]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006894:	4313      	orrs	r3, r2
 8006896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800689a:	4b15      	ldr	r3, [pc, #84]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800689c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a8:	4911      	ldr	r1, [pc, #68]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80068b0:	4b0f      	ldr	r3, [pc, #60]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a0e      	ldr	r2, [pc, #56]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80068b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068bc:	f7fb fe2c 	bl	8002518 <HAL_GetTick>
 80068c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068c2:	e008      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80068c4:	f7fb fe28 	bl	8002518 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	2b64      	cmp	r3, #100	; 0x64
 80068d0:	d901      	bls.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e007      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068d6:	4b06      	ldr	r3, [pc, #24]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068e2:	d1ef      	bne.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3720      	adds	r7, #32
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	40023800 	.word	0x40023800

080068f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d101      	bne.n	8006906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e049      	b.n	800699a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b00      	cmp	r3, #0
 8006910:	d106      	bne.n	8006920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f841 	bl	80069a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2202      	movs	r2, #2
 8006924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	3304      	adds	r3, #4
 8006930:	4619      	mov	r1, r3
 8006932:	4610      	mov	r0, r2
 8006934:	f000 fa00 	bl	8006d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80069a2:	b480      	push	{r7}
 80069a4:	b083      	sub	sp, #12
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80069aa:	bf00      	nop
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
	...

080069b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d001      	beq.n	80069d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e054      	b.n	8006a7a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2202      	movs	r2, #2
 80069d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68da      	ldr	r2, [r3, #12]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f042 0201 	orr.w	r2, r2, #1
 80069e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a26      	ldr	r2, [pc, #152]	; (8006a88 <HAL_TIM_Base_Start_IT+0xd0>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d022      	beq.n	8006a38 <HAL_TIM_Base_Start_IT+0x80>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069fa:	d01d      	beq.n	8006a38 <HAL_TIM_Base_Start_IT+0x80>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a22      	ldr	r2, [pc, #136]	; (8006a8c <HAL_TIM_Base_Start_IT+0xd4>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d018      	beq.n	8006a38 <HAL_TIM_Base_Start_IT+0x80>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a21      	ldr	r2, [pc, #132]	; (8006a90 <HAL_TIM_Base_Start_IT+0xd8>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d013      	beq.n	8006a38 <HAL_TIM_Base_Start_IT+0x80>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a1f      	ldr	r2, [pc, #124]	; (8006a94 <HAL_TIM_Base_Start_IT+0xdc>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d00e      	beq.n	8006a38 <HAL_TIM_Base_Start_IT+0x80>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a1e      	ldr	r2, [pc, #120]	; (8006a98 <HAL_TIM_Base_Start_IT+0xe0>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d009      	beq.n	8006a38 <HAL_TIM_Base_Start_IT+0x80>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a1c      	ldr	r2, [pc, #112]	; (8006a9c <HAL_TIM_Base_Start_IT+0xe4>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d004      	beq.n	8006a38 <HAL_TIM_Base_Start_IT+0x80>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a1b      	ldr	r2, [pc, #108]	; (8006aa0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d115      	bne.n	8006a64 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689a      	ldr	r2, [r3, #8]
 8006a3e:	4b19      	ldr	r3, [pc, #100]	; (8006aa4 <HAL_TIM_Base_Start_IT+0xec>)
 8006a40:	4013      	ands	r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2b06      	cmp	r3, #6
 8006a48:	d015      	beq.n	8006a76 <HAL_TIM_Base_Start_IT+0xbe>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a50:	d011      	beq.n	8006a76 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f042 0201 	orr.w	r2, r2, #1
 8006a60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a62:	e008      	b.n	8006a76 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0201 	orr.w	r2, r2, #1
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	e000      	b.n	8006a78 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	40010000 	.word	0x40010000
 8006a8c:	40000400 	.word	0x40000400
 8006a90:	40000800 	.word	0x40000800
 8006a94:	40000c00 	.word	0x40000c00
 8006a98:	40010400 	.word	0x40010400
 8006a9c:	40014000 	.word	0x40014000
 8006aa0:	40001800 	.word	0x40001800
 8006aa4:	00010007 	.word	0x00010007

08006aa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	f003 0302 	and.w	r3, r3, #2
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d122      	bne.n	8006b04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	f003 0302 	and.w	r3, r3, #2
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d11b      	bne.n	8006b04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f06f 0202 	mvn.w	r2, #2
 8006ad4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	f003 0303 	and.w	r3, r3, #3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f905 	bl	8006cfa <HAL_TIM_IC_CaptureCallback>
 8006af0:	e005      	b.n	8006afe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f8f7 	bl	8006ce6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 f908 	bl	8006d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	f003 0304 	and.w	r3, r3, #4
 8006b0e:	2b04      	cmp	r3, #4
 8006b10:	d122      	bne.n	8006b58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	f003 0304 	and.w	r3, r3, #4
 8006b1c:	2b04      	cmp	r3, #4
 8006b1e:	d11b      	bne.n	8006b58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f06f 0204 	mvn.w	r2, #4
 8006b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d003      	beq.n	8006b46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f8db 	bl	8006cfa <HAL_TIM_IC_CaptureCallback>
 8006b44:	e005      	b.n	8006b52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f8cd 	bl	8006ce6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f8de 	bl	8006d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	f003 0308 	and.w	r3, r3, #8
 8006b62:	2b08      	cmp	r3, #8
 8006b64:	d122      	bne.n	8006bac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f003 0308 	and.w	r3, r3, #8
 8006b70:	2b08      	cmp	r3, #8
 8006b72:	d11b      	bne.n	8006bac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f06f 0208 	mvn.w	r2, #8
 8006b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2204      	movs	r2, #4
 8006b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	f003 0303 	and.w	r3, r3, #3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d003      	beq.n	8006b9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f8b1 	bl	8006cfa <HAL_TIM_IC_CaptureCallback>
 8006b98:	e005      	b.n	8006ba6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f8a3 	bl	8006ce6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f8b4 	bl	8006d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	f003 0310 	and.w	r3, r3, #16
 8006bb6:	2b10      	cmp	r3, #16
 8006bb8:	d122      	bne.n	8006c00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f003 0310 	and.w	r3, r3, #16
 8006bc4:	2b10      	cmp	r3, #16
 8006bc6:	d11b      	bne.n	8006c00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f06f 0210 	mvn.w	r2, #16
 8006bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2208      	movs	r2, #8
 8006bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d003      	beq.n	8006bee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f887 	bl	8006cfa <HAL_TIM_IC_CaptureCallback>
 8006bec:	e005      	b.n	8006bfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f879 	bl	8006ce6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f88a 	bl	8006d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	f003 0301 	and.w	r3, r3, #1
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d10e      	bne.n	8006c2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d107      	bne.n	8006c2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f06f 0201 	mvn.w	r2, #1
 8006c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7fa ff68 	bl	8001afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c36:	2b80      	cmp	r3, #128	; 0x80
 8006c38:	d10e      	bne.n	8006c58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c44:	2b80      	cmp	r3, #128	; 0x80
 8006c46:	d107      	bne.n	8006c58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f91a 	bl	8006e8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c66:	d10e      	bne.n	8006c86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c72:	2b80      	cmp	r3, #128	; 0x80
 8006c74:	d107      	bne.n	8006c86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f90d 	bl	8006ea0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c90:	2b40      	cmp	r3, #64	; 0x40
 8006c92:	d10e      	bne.n	8006cb2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9e:	2b40      	cmp	r3, #64	; 0x40
 8006ca0:	d107      	bne.n	8006cb2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f838 	bl	8006d22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	f003 0320 	and.w	r3, r3, #32
 8006cbc:	2b20      	cmp	r3, #32
 8006cbe:	d10e      	bne.n	8006cde <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	f003 0320 	and.w	r3, r3, #32
 8006cca:	2b20      	cmp	r3, #32
 8006ccc:	d107      	bne.n	8006cde <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f06f 0220 	mvn.w	r2, #32
 8006cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f8cd 	bl	8006e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cde:	bf00      	nop
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b083      	sub	sp, #12
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cee:	bf00      	nop
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b083      	sub	sp, #12
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d02:	bf00      	nop
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b083      	sub	sp, #12
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d16:	bf00      	nop
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b083      	sub	sp, #12
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d2a:	bf00      	nop
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
	...

08006d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a40      	ldr	r2, [pc, #256]	; (8006e4c <TIM_Base_SetConfig+0x114>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d013      	beq.n	8006d78 <TIM_Base_SetConfig+0x40>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d56:	d00f      	beq.n	8006d78 <TIM_Base_SetConfig+0x40>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a3d      	ldr	r2, [pc, #244]	; (8006e50 <TIM_Base_SetConfig+0x118>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d00b      	beq.n	8006d78 <TIM_Base_SetConfig+0x40>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a3c      	ldr	r2, [pc, #240]	; (8006e54 <TIM_Base_SetConfig+0x11c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d007      	beq.n	8006d78 <TIM_Base_SetConfig+0x40>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a3b      	ldr	r2, [pc, #236]	; (8006e58 <TIM_Base_SetConfig+0x120>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d003      	beq.n	8006d78 <TIM_Base_SetConfig+0x40>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a3a      	ldr	r2, [pc, #232]	; (8006e5c <TIM_Base_SetConfig+0x124>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d108      	bne.n	8006d8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a2f      	ldr	r2, [pc, #188]	; (8006e4c <TIM_Base_SetConfig+0x114>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d02b      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d98:	d027      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a2c      	ldr	r2, [pc, #176]	; (8006e50 <TIM_Base_SetConfig+0x118>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d023      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a2b      	ldr	r2, [pc, #172]	; (8006e54 <TIM_Base_SetConfig+0x11c>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d01f      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a2a      	ldr	r2, [pc, #168]	; (8006e58 <TIM_Base_SetConfig+0x120>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d01b      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a29      	ldr	r2, [pc, #164]	; (8006e5c <TIM_Base_SetConfig+0x124>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d017      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a28      	ldr	r2, [pc, #160]	; (8006e60 <TIM_Base_SetConfig+0x128>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d013      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a27      	ldr	r2, [pc, #156]	; (8006e64 <TIM_Base_SetConfig+0x12c>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d00f      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a26      	ldr	r2, [pc, #152]	; (8006e68 <TIM_Base_SetConfig+0x130>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d00b      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a25      	ldr	r2, [pc, #148]	; (8006e6c <TIM_Base_SetConfig+0x134>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d007      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a24      	ldr	r2, [pc, #144]	; (8006e70 <TIM_Base_SetConfig+0x138>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d003      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a23      	ldr	r2, [pc, #140]	; (8006e74 <TIM_Base_SetConfig+0x13c>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d108      	bne.n	8006dfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	689a      	ldr	r2, [r3, #8]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a0a      	ldr	r2, [pc, #40]	; (8006e4c <TIM_Base_SetConfig+0x114>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d003      	beq.n	8006e30 <TIM_Base_SetConfig+0xf8>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a0c      	ldr	r2, [pc, #48]	; (8006e5c <TIM_Base_SetConfig+0x124>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d103      	bne.n	8006e38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	691a      	ldr	r2, [r3, #16]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	615a      	str	r2, [r3, #20]
}
 8006e3e:	bf00      	nop
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	40010000 	.word	0x40010000
 8006e50:	40000400 	.word	0x40000400
 8006e54:	40000800 	.word	0x40000800
 8006e58:	40000c00 	.word	0x40000c00
 8006e5c:	40010400 	.word	0x40010400
 8006e60:	40014000 	.word	0x40014000
 8006e64:	40014400 	.word	0x40014400
 8006e68:	40014800 	.word	0x40014800
 8006e6c:	40001800 	.word	0x40001800
 8006e70:	40001c00 	.word	0x40001c00
 8006e74:	40002000 	.word	0x40002000

08006e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e040      	b.n	8006f48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d106      	bne.n	8006edc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7fa feac 	bl	8001c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2224      	movs	r2, #36	; 0x24
 8006ee0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 0201 	bic.w	r2, r2, #1
 8006ef0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fbc2 	bl	800767c <UART_SetConfig>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d101      	bne.n	8006f02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e022      	b.n	8006f48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d002      	beq.n	8006f10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fe1a 	bl	8007b44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689a      	ldr	r2, [r3, #8]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f042 0201 	orr.w	r2, r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fea1 	bl	8007c88 <UART_CheckIdleState>
 8006f46:	4603      	mov	r3, r0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b08a      	sub	sp, #40	; 0x28
 8006f54:	af02      	add	r7, sp, #8
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	603b      	str	r3, [r7, #0]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f64:	2b20      	cmp	r3, #32
 8006f66:	d171      	bne.n	800704c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <HAL_UART_Transmit+0x24>
 8006f6e:	88fb      	ldrh	r3, [r7, #6]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e06a      	b.n	800704e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2221      	movs	r2, #33	; 0x21
 8006f84:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f86:	f7fb fac7 	bl	8002518 <HAL_GetTick>
 8006f8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	88fa      	ldrh	r2, [r7, #6]
 8006f90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	88fa      	ldrh	r2, [r7, #6]
 8006f98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa4:	d108      	bne.n	8006fb8 <HAL_UART_Transmit+0x68>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d104      	bne.n	8006fb8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	61bb      	str	r3, [r7, #24]
 8006fb6:	e003      	b.n	8006fc0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006fc0:	e02c      	b.n	800701c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	2180      	movs	r1, #128	; 0x80
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f000 fea8 	bl	8007d22 <UART_WaitOnFlagUntilTimeout>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d001      	beq.n	8006fdc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e038      	b.n	800704e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10b      	bne.n	8006ffa <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ff0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	3302      	adds	r3, #2
 8006ff6:	61bb      	str	r3, [r7, #24]
 8006ff8:	e007      	b.n	800700a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	781a      	ldrb	r2, [r3, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	3301      	adds	r3, #1
 8007008:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007010:	b29b      	uxth	r3, r3
 8007012:	3b01      	subs	r3, #1
 8007014:	b29a      	uxth	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007022:	b29b      	uxth	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1cc      	bne.n	8006fc2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	2200      	movs	r2, #0
 8007030:	2140      	movs	r1, #64	; 0x40
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f000 fe75 	bl	8007d22 <UART_WaitOnFlagUntilTimeout>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e005      	b.n	800704e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2220      	movs	r2, #32
 8007046:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	e000      	b.n	800704e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800704c:	2302      	movs	r3, #2
  }
}
 800704e:	4618      	mov	r0, r3
 8007050:	3720      	adds	r7, #32
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
	...

08007058 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b0ba      	sub	sp, #232	; 0xe8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800707e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007082:	f640 030f 	movw	r3, #2063	; 0x80f
 8007086:	4013      	ands	r3, r2
 8007088:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800708c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007090:	2b00      	cmp	r3, #0
 8007092:	d115      	bne.n	80070c0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007098:	f003 0320 	and.w	r3, r3, #32
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00f      	beq.n	80070c0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80070a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070a4:	f003 0320 	and.w	r3, r3, #32
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d009      	beq.n	80070c0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 82ac 	beq.w	800760e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	4798      	blx	r3
      }
      return;
 80070be:	e2a6      	b.n	800760e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80070c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 8117 	beq.w	80072f8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80070ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d106      	bne.n	80070e4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80070d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80070da:	4b85      	ldr	r3, [pc, #532]	; (80072f0 <HAL_UART_IRQHandler+0x298>)
 80070dc:	4013      	ands	r3, r2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f000 810a 	beq.w	80072f8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d011      	beq.n	8007114 <HAL_UART_IRQHandler+0xbc>
 80070f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00b      	beq.n	8007114 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2201      	movs	r2, #1
 8007102:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800710a:	f043 0201 	orr.w	r2, r3, #1
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007118:	f003 0302 	and.w	r3, r3, #2
 800711c:	2b00      	cmp	r3, #0
 800711e:	d011      	beq.n	8007144 <HAL_UART_IRQHandler+0xec>
 8007120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00b      	beq.n	8007144 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2202      	movs	r2, #2
 8007132:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800713a:	f043 0204 	orr.w	r2, r3, #4
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007148:	f003 0304 	and.w	r3, r3, #4
 800714c:	2b00      	cmp	r3, #0
 800714e:	d011      	beq.n	8007174 <HAL_UART_IRQHandler+0x11c>
 8007150:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007154:	f003 0301 	and.w	r3, r3, #1
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00b      	beq.n	8007174 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2204      	movs	r2, #4
 8007162:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800716a:	f043 0202 	orr.w	r2, r3, #2
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007178:	f003 0308 	and.w	r3, r3, #8
 800717c:	2b00      	cmp	r3, #0
 800717e:	d017      	beq.n	80071b0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007184:	f003 0320 	and.w	r3, r3, #32
 8007188:	2b00      	cmp	r3, #0
 800718a:	d105      	bne.n	8007198 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800718c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007190:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00b      	beq.n	80071b0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2208      	movs	r2, #8
 800719e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071a6:	f043 0208 	orr.w	r2, r3, #8
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80071b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d012      	beq.n	80071e2 <HAL_UART_IRQHandler+0x18a>
 80071bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00c      	beq.n	80071e2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071d8:	f043 0220 	orr.w	r2, r3, #32
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 8212 	beq.w	8007612 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80071ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f2:	f003 0320 	and.w	r3, r3, #32
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00d      	beq.n	8007216 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80071fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071fe:	f003 0320 	and.w	r3, r3, #32
 8007202:	2b00      	cmp	r3, #0
 8007204:	d007      	beq.n	8007216 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800721c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722a:	2b40      	cmp	r3, #64	; 0x40
 800722c:	d005      	beq.n	800723a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800722e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007232:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007236:	2b00      	cmp	r3, #0
 8007238:	d04f      	beq.n	80072da <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fe37 	bl	8007eae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724a:	2b40      	cmp	r3, #64	; 0x40
 800724c:	d141      	bne.n	80072d2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	3308      	adds	r3, #8
 8007254:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007258:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800725c:	e853 3f00 	ldrex	r3, [r3]
 8007260:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007264:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800726c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	3308      	adds	r3, #8
 8007276:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800727a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800727e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007282:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007286:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800728a:	e841 2300 	strex	r3, r2, [r1]
 800728e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007292:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1d9      	bne.n	800724e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d013      	beq.n	80072ca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072a6:	4a13      	ldr	r2, [pc, #76]	; (80072f4 <HAL_UART_IRQHandler+0x29c>)
 80072a8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fc f9be 	bl	8003630 <HAL_DMA_Abort_IT>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d017      	beq.n	80072ea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80072c4:	4610      	mov	r0, r2
 80072c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072c8:	e00f      	b.n	80072ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f9b6 	bl	800763c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d0:	e00b      	b.n	80072ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f9b2 	bl	800763c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d8:	e007      	b.n	80072ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f9ae 	bl	800763c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80072e8:	e193      	b.n	8007612 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ea:	bf00      	nop
    return;
 80072ec:	e191      	b.n	8007612 <HAL_UART_IRQHandler+0x5ba>
 80072ee:	bf00      	nop
 80072f0:	04000120 	.word	0x04000120
 80072f4:	08007f77 	.word	0x08007f77

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	f040 814c 	bne.w	800759a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007306:	f003 0310 	and.w	r3, r3, #16
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 8145 	beq.w	800759a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007314:	f003 0310 	and.w	r3, r3, #16
 8007318:	2b00      	cmp	r3, #0
 800731a:	f000 813e 	beq.w	800759a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2210      	movs	r2, #16
 8007324:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007330:	2b40      	cmp	r3, #64	; 0x40
 8007332:	f040 80b6 	bne.w	80074a2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007342:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 8165 	beq.w	8007616 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007352:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007356:	429a      	cmp	r2, r3
 8007358:	f080 815d 	bcs.w	8007616 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007362:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800736a:	69db      	ldr	r3, [r3, #28]
 800736c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007370:	f000 8086 	beq.w	8007480 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007380:	e853 3f00 	ldrex	r3, [r3]
 8007384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007388:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800738c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007390:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	461a      	mov	r2, r3
 800739a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800739e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80073a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80073aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073ae:	e841 2300 	strex	r3, r2, [r1]
 80073b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80073b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1da      	bne.n	8007374 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	3308      	adds	r3, #8
 80073c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073c8:	e853 3f00 	ldrex	r3, [r3]
 80073cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073d0:	f023 0301 	bic.w	r3, r3, #1
 80073d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	3308      	adds	r3, #8
 80073de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073ee:	e841 2300 	strex	r3, r2, [r1]
 80073f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1e1      	bne.n	80073be <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	3308      	adds	r3, #8
 8007400:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007402:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007404:	e853 3f00 	ldrex	r3, [r3]
 8007408:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800740a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800740c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007410:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	3308      	adds	r3, #8
 800741a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800741e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007420:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007422:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007424:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007426:	e841 2300 	strex	r3, r2, [r1]
 800742a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800742c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1e3      	bne.n	80073fa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2220      	movs	r2, #32
 8007436:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007448:	e853 3f00 	ldrex	r3, [r3]
 800744c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800744e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007450:	f023 0310 	bic.w	r3, r3, #16
 8007454:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	461a      	mov	r2, r3
 800745e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007462:	65bb      	str	r3, [r7, #88]	; 0x58
 8007464:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007466:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007468:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800746a:	e841 2300 	strex	r3, r2, [r1]
 800746e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1e4      	bne.n	8007440 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800747a:	4618      	mov	r0, r3
 800747c:	f7fc f868 	bl	8003550 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2202      	movs	r2, #2
 8007484:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007492:	b29b      	uxth	r3, r3
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	b29b      	uxth	r3, r3
 8007498:	4619      	mov	r1, r3
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f8d8 	bl	8007650 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074a0:	e0b9      	b.n	8007616 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074bc:	b29b      	uxth	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f000 80ab 	beq.w	800761a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80074c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 80a6 	beq.w	800761a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d6:	e853 3f00 	ldrex	r3, [r3]
 80074da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	461a      	mov	r2, r3
 80074ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074f0:	647b      	str	r3, [r7, #68]	; 0x44
 80074f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074f8:	e841 2300 	strex	r3, r2, [r1]
 80074fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1e4      	bne.n	80074ce <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3308      	adds	r3, #8
 800750a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750e:	e853 3f00 	ldrex	r3, [r3]
 8007512:	623b      	str	r3, [r7, #32]
   return(result);
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	f023 0301 	bic.w	r3, r3, #1
 800751a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	3308      	adds	r3, #8
 8007524:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007528:	633a      	str	r2, [r7, #48]	; 0x30
 800752a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800752e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007530:	e841 2300 	strex	r3, r2, [r1]
 8007534:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1e3      	bne.n	8007504 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2220      	movs	r2, #32
 8007540:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	e853 3f00 	ldrex	r3, [r3]
 800755c:	60fb      	str	r3, [r7, #12]
   return(result);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f023 0310 	bic.w	r3, r3, #16
 8007564:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	461a      	mov	r2, r3
 800756e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007572:	61fb      	str	r3, [r7, #28]
 8007574:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007576:	69b9      	ldr	r1, [r7, #24]
 8007578:	69fa      	ldr	r2, [r7, #28]
 800757a:	e841 2300 	strex	r3, r2, [r1]
 800757e:	617b      	str	r3, [r7, #20]
   return(result);
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1e4      	bne.n	8007550 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2202      	movs	r2, #2
 800758a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800758c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007590:	4619      	mov	r1, r3
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f85c 	bl	8007650 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007598:	e03f      	b.n	800761a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800759a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800759e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00e      	beq.n	80075c4 <HAL_UART_IRQHandler+0x56c>
 80075a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d008      	beq.n	80075c4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80075ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 f853 	bl	8007668 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075c2:	e02d      	b.n	8007620 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80075c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00e      	beq.n	80075ee <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80075d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d008      	beq.n	80075ee <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d01c      	beq.n	800761e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	4798      	blx	r3
    }
    return;
 80075ec:	e017      	b.n	800761e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80075ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d012      	beq.n	8007620 <HAL_UART_IRQHandler+0x5c8>
 80075fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00c      	beq.n	8007620 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fccb 	bl	8007fa2 <UART_EndTransmit_IT>
    return;
 800760c:	e008      	b.n	8007620 <HAL_UART_IRQHandler+0x5c8>
      return;
 800760e:	bf00      	nop
 8007610:	e006      	b.n	8007620 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007612:	bf00      	nop
 8007614:	e004      	b.n	8007620 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007616:	bf00      	nop
 8007618:	e002      	b.n	8007620 <HAL_UART_IRQHandler+0x5c8>
      return;
 800761a:	bf00      	nop
 800761c:	e000      	b.n	8007620 <HAL_UART_IRQHandler+0x5c8>
    return;
 800761e:	bf00      	nop
  }

}
 8007620:	37e8      	adds	r7, #232	; 0xe8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop

08007628 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	460b      	mov	r3, r1
 800765a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800765c:	bf00      	nop
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007670:	bf00      	nop
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b088      	sub	sp, #32
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007684:	2300      	movs	r3, #0
 8007686:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	689a      	ldr	r2, [r3, #8]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	431a      	orrs	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	431a      	orrs	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	69db      	ldr	r3, [r3, #28]
 800769c:	4313      	orrs	r3, r2
 800769e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	4ba6      	ldr	r3, [pc, #664]	; (8007940 <UART_SetConfig+0x2c4>)
 80076a8:	4013      	ands	r3, r2
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	6812      	ldr	r2, [r2, #0]
 80076ae:	6979      	ldr	r1, [r7, #20]
 80076b0:	430b      	orrs	r3, r1
 80076b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68da      	ldr	r2, [r3, #12]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	430a      	orrs	r2, r1
 80076c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a1b      	ldr	r3, [r3, #32]
 80076d4:	697a      	ldr	r2, [r7, #20]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	697a      	ldr	r2, [r7, #20]
 80076ea:	430a      	orrs	r2, r1
 80076ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a94      	ldr	r2, [pc, #592]	; (8007944 <UART_SetConfig+0x2c8>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d120      	bne.n	800773a <UART_SetConfig+0xbe>
 80076f8:	4b93      	ldr	r3, [pc, #588]	; (8007948 <UART_SetConfig+0x2cc>)
 80076fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076fe:	f003 0303 	and.w	r3, r3, #3
 8007702:	2b03      	cmp	r3, #3
 8007704:	d816      	bhi.n	8007734 <UART_SetConfig+0xb8>
 8007706:	a201      	add	r2, pc, #4	; (adr r2, 800770c <UART_SetConfig+0x90>)
 8007708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770c:	0800771d 	.word	0x0800771d
 8007710:	08007729 	.word	0x08007729
 8007714:	08007723 	.word	0x08007723
 8007718:	0800772f 	.word	0x0800772f
 800771c:	2301      	movs	r3, #1
 800771e:	77fb      	strb	r3, [r7, #31]
 8007720:	e150      	b.n	80079c4 <UART_SetConfig+0x348>
 8007722:	2302      	movs	r3, #2
 8007724:	77fb      	strb	r3, [r7, #31]
 8007726:	e14d      	b.n	80079c4 <UART_SetConfig+0x348>
 8007728:	2304      	movs	r3, #4
 800772a:	77fb      	strb	r3, [r7, #31]
 800772c:	e14a      	b.n	80079c4 <UART_SetConfig+0x348>
 800772e:	2308      	movs	r3, #8
 8007730:	77fb      	strb	r3, [r7, #31]
 8007732:	e147      	b.n	80079c4 <UART_SetConfig+0x348>
 8007734:	2310      	movs	r3, #16
 8007736:	77fb      	strb	r3, [r7, #31]
 8007738:	e144      	b.n	80079c4 <UART_SetConfig+0x348>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a83      	ldr	r2, [pc, #524]	; (800794c <UART_SetConfig+0x2d0>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d132      	bne.n	80077aa <UART_SetConfig+0x12e>
 8007744:	4b80      	ldr	r3, [pc, #512]	; (8007948 <UART_SetConfig+0x2cc>)
 8007746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800774a:	f003 030c 	and.w	r3, r3, #12
 800774e:	2b0c      	cmp	r3, #12
 8007750:	d828      	bhi.n	80077a4 <UART_SetConfig+0x128>
 8007752:	a201      	add	r2, pc, #4	; (adr r2, 8007758 <UART_SetConfig+0xdc>)
 8007754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007758:	0800778d 	.word	0x0800778d
 800775c:	080077a5 	.word	0x080077a5
 8007760:	080077a5 	.word	0x080077a5
 8007764:	080077a5 	.word	0x080077a5
 8007768:	08007799 	.word	0x08007799
 800776c:	080077a5 	.word	0x080077a5
 8007770:	080077a5 	.word	0x080077a5
 8007774:	080077a5 	.word	0x080077a5
 8007778:	08007793 	.word	0x08007793
 800777c:	080077a5 	.word	0x080077a5
 8007780:	080077a5 	.word	0x080077a5
 8007784:	080077a5 	.word	0x080077a5
 8007788:	0800779f 	.word	0x0800779f
 800778c:	2300      	movs	r3, #0
 800778e:	77fb      	strb	r3, [r7, #31]
 8007790:	e118      	b.n	80079c4 <UART_SetConfig+0x348>
 8007792:	2302      	movs	r3, #2
 8007794:	77fb      	strb	r3, [r7, #31]
 8007796:	e115      	b.n	80079c4 <UART_SetConfig+0x348>
 8007798:	2304      	movs	r3, #4
 800779a:	77fb      	strb	r3, [r7, #31]
 800779c:	e112      	b.n	80079c4 <UART_SetConfig+0x348>
 800779e:	2308      	movs	r3, #8
 80077a0:	77fb      	strb	r3, [r7, #31]
 80077a2:	e10f      	b.n	80079c4 <UART_SetConfig+0x348>
 80077a4:	2310      	movs	r3, #16
 80077a6:	77fb      	strb	r3, [r7, #31]
 80077a8:	e10c      	b.n	80079c4 <UART_SetConfig+0x348>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a68      	ldr	r2, [pc, #416]	; (8007950 <UART_SetConfig+0x2d4>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d120      	bne.n	80077f6 <UART_SetConfig+0x17a>
 80077b4:	4b64      	ldr	r3, [pc, #400]	; (8007948 <UART_SetConfig+0x2cc>)
 80077b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80077be:	2b30      	cmp	r3, #48	; 0x30
 80077c0:	d013      	beq.n	80077ea <UART_SetConfig+0x16e>
 80077c2:	2b30      	cmp	r3, #48	; 0x30
 80077c4:	d814      	bhi.n	80077f0 <UART_SetConfig+0x174>
 80077c6:	2b20      	cmp	r3, #32
 80077c8:	d009      	beq.n	80077de <UART_SetConfig+0x162>
 80077ca:	2b20      	cmp	r3, #32
 80077cc:	d810      	bhi.n	80077f0 <UART_SetConfig+0x174>
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d002      	beq.n	80077d8 <UART_SetConfig+0x15c>
 80077d2:	2b10      	cmp	r3, #16
 80077d4:	d006      	beq.n	80077e4 <UART_SetConfig+0x168>
 80077d6:	e00b      	b.n	80077f0 <UART_SetConfig+0x174>
 80077d8:	2300      	movs	r3, #0
 80077da:	77fb      	strb	r3, [r7, #31]
 80077dc:	e0f2      	b.n	80079c4 <UART_SetConfig+0x348>
 80077de:	2302      	movs	r3, #2
 80077e0:	77fb      	strb	r3, [r7, #31]
 80077e2:	e0ef      	b.n	80079c4 <UART_SetConfig+0x348>
 80077e4:	2304      	movs	r3, #4
 80077e6:	77fb      	strb	r3, [r7, #31]
 80077e8:	e0ec      	b.n	80079c4 <UART_SetConfig+0x348>
 80077ea:	2308      	movs	r3, #8
 80077ec:	77fb      	strb	r3, [r7, #31]
 80077ee:	e0e9      	b.n	80079c4 <UART_SetConfig+0x348>
 80077f0:	2310      	movs	r3, #16
 80077f2:	77fb      	strb	r3, [r7, #31]
 80077f4:	e0e6      	b.n	80079c4 <UART_SetConfig+0x348>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a56      	ldr	r2, [pc, #344]	; (8007954 <UART_SetConfig+0x2d8>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d120      	bne.n	8007842 <UART_SetConfig+0x1c6>
 8007800:	4b51      	ldr	r3, [pc, #324]	; (8007948 <UART_SetConfig+0x2cc>)
 8007802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007806:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800780a:	2bc0      	cmp	r3, #192	; 0xc0
 800780c:	d013      	beq.n	8007836 <UART_SetConfig+0x1ba>
 800780e:	2bc0      	cmp	r3, #192	; 0xc0
 8007810:	d814      	bhi.n	800783c <UART_SetConfig+0x1c0>
 8007812:	2b80      	cmp	r3, #128	; 0x80
 8007814:	d009      	beq.n	800782a <UART_SetConfig+0x1ae>
 8007816:	2b80      	cmp	r3, #128	; 0x80
 8007818:	d810      	bhi.n	800783c <UART_SetConfig+0x1c0>
 800781a:	2b00      	cmp	r3, #0
 800781c:	d002      	beq.n	8007824 <UART_SetConfig+0x1a8>
 800781e:	2b40      	cmp	r3, #64	; 0x40
 8007820:	d006      	beq.n	8007830 <UART_SetConfig+0x1b4>
 8007822:	e00b      	b.n	800783c <UART_SetConfig+0x1c0>
 8007824:	2300      	movs	r3, #0
 8007826:	77fb      	strb	r3, [r7, #31]
 8007828:	e0cc      	b.n	80079c4 <UART_SetConfig+0x348>
 800782a:	2302      	movs	r3, #2
 800782c:	77fb      	strb	r3, [r7, #31]
 800782e:	e0c9      	b.n	80079c4 <UART_SetConfig+0x348>
 8007830:	2304      	movs	r3, #4
 8007832:	77fb      	strb	r3, [r7, #31]
 8007834:	e0c6      	b.n	80079c4 <UART_SetConfig+0x348>
 8007836:	2308      	movs	r3, #8
 8007838:	77fb      	strb	r3, [r7, #31]
 800783a:	e0c3      	b.n	80079c4 <UART_SetConfig+0x348>
 800783c:	2310      	movs	r3, #16
 800783e:	77fb      	strb	r3, [r7, #31]
 8007840:	e0c0      	b.n	80079c4 <UART_SetConfig+0x348>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a44      	ldr	r2, [pc, #272]	; (8007958 <UART_SetConfig+0x2dc>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d125      	bne.n	8007898 <UART_SetConfig+0x21c>
 800784c:	4b3e      	ldr	r3, [pc, #248]	; (8007948 <UART_SetConfig+0x2cc>)
 800784e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007856:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800785a:	d017      	beq.n	800788c <UART_SetConfig+0x210>
 800785c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007860:	d817      	bhi.n	8007892 <UART_SetConfig+0x216>
 8007862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007866:	d00b      	beq.n	8007880 <UART_SetConfig+0x204>
 8007868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800786c:	d811      	bhi.n	8007892 <UART_SetConfig+0x216>
 800786e:	2b00      	cmp	r3, #0
 8007870:	d003      	beq.n	800787a <UART_SetConfig+0x1fe>
 8007872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007876:	d006      	beq.n	8007886 <UART_SetConfig+0x20a>
 8007878:	e00b      	b.n	8007892 <UART_SetConfig+0x216>
 800787a:	2300      	movs	r3, #0
 800787c:	77fb      	strb	r3, [r7, #31]
 800787e:	e0a1      	b.n	80079c4 <UART_SetConfig+0x348>
 8007880:	2302      	movs	r3, #2
 8007882:	77fb      	strb	r3, [r7, #31]
 8007884:	e09e      	b.n	80079c4 <UART_SetConfig+0x348>
 8007886:	2304      	movs	r3, #4
 8007888:	77fb      	strb	r3, [r7, #31]
 800788a:	e09b      	b.n	80079c4 <UART_SetConfig+0x348>
 800788c:	2308      	movs	r3, #8
 800788e:	77fb      	strb	r3, [r7, #31]
 8007890:	e098      	b.n	80079c4 <UART_SetConfig+0x348>
 8007892:	2310      	movs	r3, #16
 8007894:	77fb      	strb	r3, [r7, #31]
 8007896:	e095      	b.n	80079c4 <UART_SetConfig+0x348>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a2f      	ldr	r2, [pc, #188]	; (800795c <UART_SetConfig+0x2e0>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d125      	bne.n	80078ee <UART_SetConfig+0x272>
 80078a2:	4b29      	ldr	r3, [pc, #164]	; (8007948 <UART_SetConfig+0x2cc>)
 80078a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80078ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078b0:	d017      	beq.n	80078e2 <UART_SetConfig+0x266>
 80078b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078b6:	d817      	bhi.n	80078e8 <UART_SetConfig+0x26c>
 80078b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078bc:	d00b      	beq.n	80078d6 <UART_SetConfig+0x25a>
 80078be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078c2:	d811      	bhi.n	80078e8 <UART_SetConfig+0x26c>
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d003      	beq.n	80078d0 <UART_SetConfig+0x254>
 80078c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078cc:	d006      	beq.n	80078dc <UART_SetConfig+0x260>
 80078ce:	e00b      	b.n	80078e8 <UART_SetConfig+0x26c>
 80078d0:	2301      	movs	r3, #1
 80078d2:	77fb      	strb	r3, [r7, #31]
 80078d4:	e076      	b.n	80079c4 <UART_SetConfig+0x348>
 80078d6:	2302      	movs	r3, #2
 80078d8:	77fb      	strb	r3, [r7, #31]
 80078da:	e073      	b.n	80079c4 <UART_SetConfig+0x348>
 80078dc:	2304      	movs	r3, #4
 80078de:	77fb      	strb	r3, [r7, #31]
 80078e0:	e070      	b.n	80079c4 <UART_SetConfig+0x348>
 80078e2:	2308      	movs	r3, #8
 80078e4:	77fb      	strb	r3, [r7, #31]
 80078e6:	e06d      	b.n	80079c4 <UART_SetConfig+0x348>
 80078e8:	2310      	movs	r3, #16
 80078ea:	77fb      	strb	r3, [r7, #31]
 80078ec:	e06a      	b.n	80079c4 <UART_SetConfig+0x348>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a1b      	ldr	r2, [pc, #108]	; (8007960 <UART_SetConfig+0x2e4>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d138      	bne.n	800796a <UART_SetConfig+0x2ee>
 80078f8:	4b13      	ldr	r3, [pc, #76]	; (8007948 <UART_SetConfig+0x2cc>)
 80078fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007902:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007906:	d017      	beq.n	8007938 <UART_SetConfig+0x2bc>
 8007908:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800790c:	d82a      	bhi.n	8007964 <UART_SetConfig+0x2e8>
 800790e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007912:	d00b      	beq.n	800792c <UART_SetConfig+0x2b0>
 8007914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007918:	d824      	bhi.n	8007964 <UART_SetConfig+0x2e8>
 800791a:	2b00      	cmp	r3, #0
 800791c:	d003      	beq.n	8007926 <UART_SetConfig+0x2aa>
 800791e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007922:	d006      	beq.n	8007932 <UART_SetConfig+0x2b6>
 8007924:	e01e      	b.n	8007964 <UART_SetConfig+0x2e8>
 8007926:	2300      	movs	r3, #0
 8007928:	77fb      	strb	r3, [r7, #31]
 800792a:	e04b      	b.n	80079c4 <UART_SetConfig+0x348>
 800792c:	2302      	movs	r3, #2
 800792e:	77fb      	strb	r3, [r7, #31]
 8007930:	e048      	b.n	80079c4 <UART_SetConfig+0x348>
 8007932:	2304      	movs	r3, #4
 8007934:	77fb      	strb	r3, [r7, #31]
 8007936:	e045      	b.n	80079c4 <UART_SetConfig+0x348>
 8007938:	2308      	movs	r3, #8
 800793a:	77fb      	strb	r3, [r7, #31]
 800793c:	e042      	b.n	80079c4 <UART_SetConfig+0x348>
 800793e:	bf00      	nop
 8007940:	efff69f3 	.word	0xefff69f3
 8007944:	40011000 	.word	0x40011000
 8007948:	40023800 	.word	0x40023800
 800794c:	40004400 	.word	0x40004400
 8007950:	40004800 	.word	0x40004800
 8007954:	40004c00 	.word	0x40004c00
 8007958:	40005000 	.word	0x40005000
 800795c:	40011400 	.word	0x40011400
 8007960:	40007800 	.word	0x40007800
 8007964:	2310      	movs	r3, #16
 8007966:	77fb      	strb	r3, [r7, #31]
 8007968:	e02c      	b.n	80079c4 <UART_SetConfig+0x348>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a72      	ldr	r2, [pc, #456]	; (8007b38 <UART_SetConfig+0x4bc>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d125      	bne.n	80079c0 <UART_SetConfig+0x344>
 8007974:	4b71      	ldr	r3, [pc, #452]	; (8007b3c <UART_SetConfig+0x4c0>)
 8007976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800797a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800797e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007982:	d017      	beq.n	80079b4 <UART_SetConfig+0x338>
 8007984:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007988:	d817      	bhi.n	80079ba <UART_SetConfig+0x33e>
 800798a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800798e:	d00b      	beq.n	80079a8 <UART_SetConfig+0x32c>
 8007990:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007994:	d811      	bhi.n	80079ba <UART_SetConfig+0x33e>
 8007996:	2b00      	cmp	r3, #0
 8007998:	d003      	beq.n	80079a2 <UART_SetConfig+0x326>
 800799a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800799e:	d006      	beq.n	80079ae <UART_SetConfig+0x332>
 80079a0:	e00b      	b.n	80079ba <UART_SetConfig+0x33e>
 80079a2:	2300      	movs	r3, #0
 80079a4:	77fb      	strb	r3, [r7, #31]
 80079a6:	e00d      	b.n	80079c4 <UART_SetConfig+0x348>
 80079a8:	2302      	movs	r3, #2
 80079aa:	77fb      	strb	r3, [r7, #31]
 80079ac:	e00a      	b.n	80079c4 <UART_SetConfig+0x348>
 80079ae:	2304      	movs	r3, #4
 80079b0:	77fb      	strb	r3, [r7, #31]
 80079b2:	e007      	b.n	80079c4 <UART_SetConfig+0x348>
 80079b4:	2308      	movs	r3, #8
 80079b6:	77fb      	strb	r3, [r7, #31]
 80079b8:	e004      	b.n	80079c4 <UART_SetConfig+0x348>
 80079ba:	2310      	movs	r3, #16
 80079bc:	77fb      	strb	r3, [r7, #31]
 80079be:	e001      	b.n	80079c4 <UART_SetConfig+0x348>
 80079c0:	2310      	movs	r3, #16
 80079c2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	69db      	ldr	r3, [r3, #28]
 80079c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079cc:	d15b      	bne.n	8007a86 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80079ce:	7ffb      	ldrb	r3, [r7, #31]
 80079d0:	2b08      	cmp	r3, #8
 80079d2:	d828      	bhi.n	8007a26 <UART_SetConfig+0x3aa>
 80079d4:	a201      	add	r2, pc, #4	; (adr r2, 80079dc <UART_SetConfig+0x360>)
 80079d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079da:	bf00      	nop
 80079dc:	08007a01 	.word	0x08007a01
 80079e0:	08007a09 	.word	0x08007a09
 80079e4:	08007a11 	.word	0x08007a11
 80079e8:	08007a27 	.word	0x08007a27
 80079ec:	08007a17 	.word	0x08007a17
 80079f0:	08007a27 	.word	0x08007a27
 80079f4:	08007a27 	.word	0x08007a27
 80079f8:	08007a27 	.word	0x08007a27
 80079fc:	08007a1f 	.word	0x08007a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a00:	f7fe faf6 	bl	8005ff0 <HAL_RCC_GetPCLK1Freq>
 8007a04:	61b8      	str	r0, [r7, #24]
        break;
 8007a06:	e013      	b.n	8007a30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a08:	f7fe fb06 	bl	8006018 <HAL_RCC_GetPCLK2Freq>
 8007a0c:	61b8      	str	r0, [r7, #24]
        break;
 8007a0e:	e00f      	b.n	8007a30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a10:	4b4b      	ldr	r3, [pc, #300]	; (8007b40 <UART_SetConfig+0x4c4>)
 8007a12:	61bb      	str	r3, [r7, #24]
        break;
 8007a14:	e00c      	b.n	8007a30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a16:	f7fe f9d9 	bl	8005dcc <HAL_RCC_GetSysClockFreq>
 8007a1a:	61b8      	str	r0, [r7, #24]
        break;
 8007a1c:	e008      	b.n	8007a30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a22:	61bb      	str	r3, [r7, #24]
        break;
 8007a24:	e004      	b.n	8007a30 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007a26:	2300      	movs	r3, #0
 8007a28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	77bb      	strb	r3, [r7, #30]
        break;
 8007a2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d074      	beq.n	8007b20 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	005a      	lsls	r2, r3, #1
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	085b      	lsrs	r3, r3, #1
 8007a40:	441a      	add	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	2b0f      	cmp	r3, #15
 8007a50:	d916      	bls.n	8007a80 <UART_SetConfig+0x404>
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a58:	d212      	bcs.n	8007a80 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	f023 030f 	bic.w	r3, r3, #15
 8007a62:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	085b      	lsrs	r3, r3, #1
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	f003 0307 	and.w	r3, r3, #7
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	89fb      	ldrh	r3, [r7, #14]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	89fa      	ldrh	r2, [r7, #14]
 8007a7c:	60da      	str	r2, [r3, #12]
 8007a7e:	e04f      	b.n	8007b20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	77bb      	strb	r3, [r7, #30]
 8007a84:	e04c      	b.n	8007b20 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a86:	7ffb      	ldrb	r3, [r7, #31]
 8007a88:	2b08      	cmp	r3, #8
 8007a8a:	d828      	bhi.n	8007ade <UART_SetConfig+0x462>
 8007a8c:	a201      	add	r2, pc, #4	; (adr r2, 8007a94 <UART_SetConfig+0x418>)
 8007a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a92:	bf00      	nop
 8007a94:	08007ab9 	.word	0x08007ab9
 8007a98:	08007ac1 	.word	0x08007ac1
 8007a9c:	08007ac9 	.word	0x08007ac9
 8007aa0:	08007adf 	.word	0x08007adf
 8007aa4:	08007acf 	.word	0x08007acf
 8007aa8:	08007adf 	.word	0x08007adf
 8007aac:	08007adf 	.word	0x08007adf
 8007ab0:	08007adf 	.word	0x08007adf
 8007ab4:	08007ad7 	.word	0x08007ad7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ab8:	f7fe fa9a 	bl	8005ff0 <HAL_RCC_GetPCLK1Freq>
 8007abc:	61b8      	str	r0, [r7, #24]
        break;
 8007abe:	e013      	b.n	8007ae8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ac0:	f7fe faaa 	bl	8006018 <HAL_RCC_GetPCLK2Freq>
 8007ac4:	61b8      	str	r0, [r7, #24]
        break;
 8007ac6:	e00f      	b.n	8007ae8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ac8:	4b1d      	ldr	r3, [pc, #116]	; (8007b40 <UART_SetConfig+0x4c4>)
 8007aca:	61bb      	str	r3, [r7, #24]
        break;
 8007acc:	e00c      	b.n	8007ae8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ace:	f7fe f97d 	bl	8005dcc <HAL_RCC_GetSysClockFreq>
 8007ad2:	61b8      	str	r0, [r7, #24]
        break;
 8007ad4:	e008      	b.n	8007ae8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ada:	61bb      	str	r3, [r7, #24]
        break;
 8007adc:	e004      	b.n	8007ae8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	77bb      	strb	r3, [r7, #30]
        break;
 8007ae6:	bf00      	nop
    }

    if (pclk != 0U)
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d018      	beq.n	8007b20 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	085a      	lsrs	r2, r3, #1
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	441a      	add	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	2b0f      	cmp	r3, #15
 8007b06:	d909      	bls.n	8007b1c <UART_SetConfig+0x4a0>
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b0e:	d205      	bcs.n	8007b1c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	60da      	str	r2, [r3, #12]
 8007b1a:	e001      	b.n	8007b20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007b2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3720      	adds	r7, #32
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	40007c00 	.word	0x40007c00
 8007b3c:	40023800 	.word	0x40023800
 8007b40:	00f42400 	.word	0x00f42400

08007b44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b50:	f003 0301 	and.w	r3, r3, #1
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00a      	beq.n	8007b6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	430a      	orrs	r2, r1
 8007b6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b72:	f003 0302 	and.w	r3, r3, #2
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00a      	beq.n	8007b90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	430a      	orrs	r2, r1
 8007b8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b94:	f003 0304 	and.w	r3, r3, #4
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00a      	beq.n	8007bb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb6:	f003 0308 	and.w	r3, r3, #8
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00a      	beq.n	8007bd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	430a      	orrs	r2, r1
 8007bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd8:	f003 0310 	and.w	r3, r3, #16
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00a      	beq.n	8007bf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfa:	f003 0320 	and.w	r3, r3, #32
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00a      	beq.n	8007c18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	430a      	orrs	r2, r1
 8007c16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d01a      	beq.n	8007c5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	430a      	orrs	r2, r1
 8007c38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c42:	d10a      	bne.n	8007c5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	430a      	orrs	r2, r1
 8007c58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00a      	beq.n	8007c7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	430a      	orrs	r2, r1
 8007c7a:	605a      	str	r2, [r3, #4]
  }
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af02      	add	r7, sp, #8
 8007c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c98:	f7fa fc3e 	bl	8002518 <HAL_GetTick>
 8007c9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0308 	and.w	r3, r3, #8
 8007ca8:	2b08      	cmp	r3, #8
 8007caa:	d10e      	bne.n	8007cca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f831 	bl	8007d22 <UART_WaitOnFlagUntilTimeout>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e027      	b.n	8007d1a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 0304 	and.w	r3, r3, #4
 8007cd4:	2b04      	cmp	r3, #4
 8007cd6:	d10e      	bne.n	8007cf6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cdc:	9300      	str	r3, [sp, #0]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 f81b 	bl	8007d22 <UART_WaitOnFlagUntilTimeout>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d001      	beq.n	8007cf6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e011      	b.n	8007d1a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2220      	movs	r2, #32
 8007cfa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2220      	movs	r2, #32
 8007d00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b09c      	sub	sp, #112	; 0x70
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	60b9      	str	r1, [r7, #8]
 8007d2c:	603b      	str	r3, [r7, #0]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d32:	e0a7      	b.n	8007e84 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3a:	f000 80a3 	beq.w	8007e84 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d3e:	f7fa fbeb 	bl	8002518 <HAL_GetTick>
 8007d42:	4602      	mov	r2, r0
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	1ad3      	subs	r3, r2, r3
 8007d48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d302      	bcc.n	8007d54 <UART_WaitOnFlagUntilTimeout+0x32>
 8007d4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d13f      	bne.n	8007dd4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d5c:	e853 3f00 	ldrex	r3, [r3]
 8007d60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d68:	667b      	str	r3, [r7, #100]	; 0x64
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d74:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d7a:	e841 2300 	strex	r3, r2, [r1]
 8007d7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1e6      	bne.n	8007d54 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	3308      	adds	r3, #8
 8007d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d90:	e853 3f00 	ldrex	r3, [r3]
 8007d94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d98:	f023 0301 	bic.w	r3, r3, #1
 8007d9c:	663b      	str	r3, [r7, #96]	; 0x60
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	3308      	adds	r3, #8
 8007da4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007da6:	64ba      	str	r2, [r7, #72]	; 0x48
 8007da8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007daa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007dac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dae:	e841 2300 	strex	r3, r2, [r1]
 8007db2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1e5      	bne.n	8007d86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2220      	movs	r2, #32
 8007dbe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e068      	b.n	8007ea6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 0304 	and.w	r3, r3, #4
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d050      	beq.n	8007e84 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	69db      	ldr	r3, [r3, #28]
 8007de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007df0:	d148      	bne.n	8007e84 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dfa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e04:	e853 3f00 	ldrex	r3, [r3]
 8007e08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	461a      	mov	r2, r3
 8007e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e1c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e22:	e841 2300 	strex	r3, r2, [r1]
 8007e26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1e6      	bne.n	8007dfc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	3308      	adds	r3, #8
 8007e34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	e853 3f00 	ldrex	r3, [r3]
 8007e3c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	f023 0301 	bic.w	r3, r3, #1
 8007e44:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3308      	adds	r3, #8
 8007e4c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e4e:	623a      	str	r2, [r7, #32]
 8007e50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e52:	69f9      	ldr	r1, [r7, #28]
 8007e54:	6a3a      	ldr	r2, [r7, #32]
 8007e56:	e841 2300 	strex	r3, r2, [r1]
 8007e5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1e5      	bne.n	8007e2e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2220      	movs	r2, #32
 8007e66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2220      	movs	r2, #32
 8007e74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007e80:	2303      	movs	r3, #3
 8007e82:	e010      	b.n	8007ea6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	69da      	ldr	r2, [r3, #28]
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	bf0c      	ite	eq
 8007e94:	2301      	moveq	r3, #1
 8007e96:	2300      	movne	r3, #0
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	79fb      	ldrb	r3, [r7, #7]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	f43f af48 	beq.w	8007d34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3770      	adds	r7, #112	; 0x70
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b095      	sub	sp, #84	; 0x54
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ebe:	e853 3f00 	ldrex	r3, [r3]
 8007ec2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007eca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ed4:	643b      	str	r3, [r7, #64]	; 0x40
 8007ed6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007eda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007edc:	e841 2300 	strex	r3, r2, [r1]
 8007ee0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d1e6      	bne.n	8007eb6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	3308      	adds	r3, #8
 8007eee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef0:	6a3b      	ldr	r3, [r7, #32]
 8007ef2:	e853 3f00 	ldrex	r3, [r3]
 8007ef6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	f023 0301 	bic.w	r3, r3, #1
 8007efe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	3308      	adds	r3, #8
 8007f06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f10:	e841 2300 	strex	r3, r2, [r1]
 8007f14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d1e5      	bne.n	8007ee8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d118      	bne.n	8007f56 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	e853 3f00 	ldrex	r3, [r3]
 8007f30:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	f023 0310 	bic.w	r3, r3, #16
 8007f38:	647b      	str	r3, [r7, #68]	; 0x44
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f42:	61bb      	str	r3, [r7, #24]
 8007f44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f46:	6979      	ldr	r1, [r7, #20]
 8007f48:	69ba      	ldr	r2, [r7, #24]
 8007f4a:	e841 2300 	strex	r3, r2, [r1]
 8007f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1e6      	bne.n	8007f24 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2220      	movs	r2, #32
 8007f5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007f6a:	bf00      	nop
 8007f6c:	3754      	adds	r7, #84	; 0x54
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr

08007f76 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b084      	sub	sp, #16
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f7ff fb51 	bl	800763c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f9a:	bf00      	nop
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b088      	sub	sp, #32
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	e853 3f00 	ldrex	r3, [r3]
 8007fb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fbe:	61fb      	str	r3, [r7, #28]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	61bb      	str	r3, [r7, #24]
 8007fca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fcc:	6979      	ldr	r1, [r7, #20]
 8007fce:	69ba      	ldr	r2, [r7, #24]
 8007fd0:	e841 2300 	strex	r3, r2, [r1]
 8007fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1e6      	bne.n	8007faa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2220      	movs	r2, #32
 8007fe0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f7ff fb1d 	bl	8007628 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fee:	bf00      	nop
 8007ff0:	3720      	adds	r7, #32
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
	...

08007ff8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ff8:	b084      	sub	sp, #16
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b084      	sub	sp, #16
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	f107 001c 	add.w	r0, r7, #28
 8008006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800800a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800c:	2b01      	cmp	r3, #1
 800800e:	d120      	bne.n	8008052 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008014:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	68da      	ldr	r2, [r3, #12]
 8008020:	4b20      	ldr	r3, [pc, #128]	; (80080a4 <USB_CoreInit+0xac>)
 8008022:	4013      	ands	r3, r2
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008036:	2b01      	cmp	r3, #1
 8008038:	d105      	bne.n	8008046 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fa96 	bl	8008578 <USB_CoreReset>
 800804c:	4603      	mov	r3, r0
 800804e:	73fb      	strb	r3, [r7, #15]
 8008050:	e010      	b.n	8008074 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fa8a 	bl	8008578 <USB_CoreReset>
 8008064:	4603      	mov	r3, r0
 8008066:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008076:	2b01      	cmp	r3, #1
 8008078:	d10b      	bne.n	8008092 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	f043 0206 	orr.w	r2, r3, #6
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	f043 0220 	orr.w	r2, r3, #32
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008092:	7bfb      	ldrb	r3, [r7, #15]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800809e:	b004      	add	sp, #16
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	ffbdffbf 	.word	0xffbdffbf

080080a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f023 0201 	bic.w	r2, r3, #1
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b084      	sub	sp, #16
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	460b      	mov	r3, r1
 80080d4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80080d6:	2300      	movs	r3, #0
 80080d8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80080e6:	78fb      	ldrb	r3, [r7, #3]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d115      	bne.n	8008118 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80080f8:	2001      	movs	r0, #1
 80080fa:	f7fa fa19 	bl	8002530 <HAL_Delay>
      ms++;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3301      	adds	r3, #1
 8008102:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fa29 	bl	800855c <USB_GetMode>
 800810a:	4603      	mov	r3, r0
 800810c:	2b01      	cmp	r3, #1
 800810e:	d01e      	beq.n	800814e <USB_SetCurrentMode+0x84>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2b31      	cmp	r3, #49	; 0x31
 8008114:	d9f0      	bls.n	80080f8 <USB_SetCurrentMode+0x2e>
 8008116:	e01a      	b.n	800814e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008118:	78fb      	ldrb	r3, [r7, #3]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d115      	bne.n	800814a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800812a:	2001      	movs	r0, #1
 800812c:	f7fa fa00 	bl	8002530 <HAL_Delay>
      ms++;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	3301      	adds	r3, #1
 8008134:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fa10 	bl	800855c <USB_GetMode>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d005      	beq.n	800814e <USB_SetCurrentMode+0x84>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2b31      	cmp	r3, #49	; 0x31
 8008146:	d9f0      	bls.n	800812a <USB_SetCurrentMode+0x60>
 8008148:	e001      	b.n	800814e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e005      	b.n	800815a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2b32      	cmp	r3, #50	; 0x32
 8008152:	d101      	bne.n	8008158 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e000      	b.n	800815a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
	...

08008164 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008164:	b084      	sub	sp, #16
 8008166:	b580      	push	{r7, lr}
 8008168:	b086      	sub	sp, #24
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008172:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800817e:	2300      	movs	r3, #0
 8008180:	613b      	str	r3, [r7, #16]
 8008182:	e009      	b.n	8008198 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	3340      	adds	r3, #64	; 0x40
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	2200      	movs	r2, #0
 8008190:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	3301      	adds	r3, #1
 8008196:	613b      	str	r3, [r7, #16]
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	2b0e      	cmp	r3, #14
 800819c:	d9f2      	bls.n	8008184 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800819e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d11c      	bne.n	80081de <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081b2:	f043 0302 	orr.w	r3, r3, #2
 80081b6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081bc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	601a      	str	r2, [r3, #0]
 80081dc:	e005      	b.n	80081ea <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081f0:	461a      	mov	r2, r3
 80081f2:	2300      	movs	r3, #0
 80081f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081fc:	4619      	mov	r1, r3
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008204:	461a      	mov	r2, r3
 8008206:	680b      	ldr	r3, [r1, #0]
 8008208:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800820a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820c:	2b01      	cmp	r3, #1
 800820e:	d10c      	bne.n	800822a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008212:	2b00      	cmp	r3, #0
 8008214:	d104      	bne.n	8008220 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008216:	2100      	movs	r1, #0
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 f965 	bl	80084e8 <USB_SetDevSpeed>
 800821e:	e008      	b.n	8008232 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008220:	2101      	movs	r1, #1
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f960 	bl	80084e8 <USB_SetDevSpeed>
 8008228:	e003      	b.n	8008232 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800822a:	2103      	movs	r1, #3
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 f95b 	bl	80084e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008232:	2110      	movs	r1, #16
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f8f3 	bl	8008420 <USB_FlushTxFifo>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d001      	beq.n	8008244 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f91f 	bl	8008488 <USB_FlushRxFifo>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800825a:	461a      	mov	r2, r3
 800825c:	2300      	movs	r3, #0
 800825e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008266:	461a      	mov	r2, r3
 8008268:	2300      	movs	r3, #0
 800826a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008272:	461a      	mov	r2, r3
 8008274:	2300      	movs	r3, #0
 8008276:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008278:	2300      	movs	r3, #0
 800827a:	613b      	str	r3, [r7, #16]
 800827c:	e043      	b.n	8008306 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	015a      	lsls	r2, r3, #5
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	4413      	add	r3, r2
 8008286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008290:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008294:	d118      	bne.n	80082c8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d10a      	bne.n	80082b2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	015a      	lsls	r2, r3, #5
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4413      	add	r3, r2
 80082a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082a8:	461a      	mov	r2, r3
 80082aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80082ae:	6013      	str	r3, [r2, #0]
 80082b0:	e013      	b.n	80082da <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	015a      	lsls	r2, r3, #5
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	4413      	add	r3, r2
 80082ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082be:	461a      	mov	r2, r3
 80082c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80082c4:	6013      	str	r3, [r2, #0]
 80082c6:	e008      	b.n	80082da <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	015a      	lsls	r2, r3, #5
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	4413      	add	r3, r2
 80082d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082d4:	461a      	mov	r2, r3
 80082d6:	2300      	movs	r3, #0
 80082d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	015a      	lsls	r2, r3, #5
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	4413      	add	r3, r2
 80082e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082e6:	461a      	mov	r2, r3
 80082e8:	2300      	movs	r3, #0
 80082ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	015a      	lsls	r2, r3, #5
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	4413      	add	r3, r2
 80082f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082f8:	461a      	mov	r2, r3
 80082fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80082fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	3301      	adds	r3, #1
 8008304:	613b      	str	r3, [r7, #16]
 8008306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008308:	693a      	ldr	r2, [r7, #16]
 800830a:	429a      	cmp	r2, r3
 800830c:	d3b7      	bcc.n	800827e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800830e:	2300      	movs	r3, #0
 8008310:	613b      	str	r3, [r7, #16]
 8008312:	e043      	b.n	800839c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	015a      	lsls	r2, r3, #5
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	4413      	add	r3, r2
 800831c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008326:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800832a:	d118      	bne.n	800835e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d10a      	bne.n	8008348 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	015a      	lsls	r2, r3, #5
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	4413      	add	r3, r2
 800833a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800833e:	461a      	mov	r2, r3
 8008340:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008344:	6013      	str	r3, [r2, #0]
 8008346:	e013      	b.n	8008370 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	015a      	lsls	r2, r3, #5
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	4413      	add	r3, r2
 8008350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008354:	461a      	mov	r2, r3
 8008356:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800835a:	6013      	str	r3, [r2, #0]
 800835c:	e008      	b.n	8008370 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	015a      	lsls	r2, r3, #5
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	4413      	add	r3, r2
 8008366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800836a:	461a      	mov	r2, r3
 800836c:	2300      	movs	r3, #0
 800836e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	015a      	lsls	r2, r3, #5
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	4413      	add	r3, r2
 8008378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800837c:	461a      	mov	r2, r3
 800837e:	2300      	movs	r3, #0
 8008380:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	015a      	lsls	r2, r3, #5
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	4413      	add	r3, r2
 800838a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800838e:	461a      	mov	r2, r3
 8008390:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008394:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	3301      	adds	r3, #1
 800839a:	613b      	str	r3, [r7, #16]
 800839c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839e:	693a      	ldr	r2, [r7, #16]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d3b7      	bcc.n	8008314 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80083c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80083c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d105      	bne.n	80083d8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	f043 0210 	orr.w	r2, r3, #16
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	699a      	ldr	r2, [r3, #24]
 80083dc:	4b0e      	ldr	r3, [pc, #56]	; (8008418 <USB_DevInit+0x2b4>)
 80083de:	4313      	orrs	r3, r2
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80083e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d005      	beq.n	80083f6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	f043 0208 	orr.w	r2, r3, #8
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80083f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d105      	bne.n	8008408 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	699a      	ldr	r2, [r3, #24]
 8008400:	4b06      	ldr	r3, [pc, #24]	; (800841c <USB_DevInit+0x2b8>)
 8008402:	4313      	orrs	r3, r2
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008408:	7dfb      	ldrb	r3, [r7, #23]
}
 800840a:	4618      	mov	r0, r3
 800840c:	3718      	adds	r7, #24
 800840e:	46bd      	mov	sp, r7
 8008410:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008414:	b004      	add	sp, #16
 8008416:	4770      	bx	lr
 8008418:	803c3800 	.word	0x803c3800
 800841c:	40000004 	.word	0x40000004

08008420 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800842a:	2300      	movs	r3, #0
 800842c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	3301      	adds	r3, #1
 8008432:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	4a13      	ldr	r2, [pc, #76]	; (8008484 <USB_FlushTxFifo+0x64>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d901      	bls.n	8008440 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800843c:	2303      	movs	r3, #3
 800843e:	e01b      	b.n	8008478 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	2b00      	cmp	r3, #0
 8008446:	daf2      	bge.n	800842e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008448:	2300      	movs	r3, #0
 800844a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	019b      	lsls	r3, r3, #6
 8008450:	f043 0220 	orr.w	r2, r3, #32
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	3301      	adds	r3, #1
 800845c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	4a08      	ldr	r2, [pc, #32]	; (8008484 <USB_FlushTxFifo+0x64>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d901      	bls.n	800846a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008466:	2303      	movs	r3, #3
 8008468:	e006      	b.n	8008478 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	f003 0320 	and.w	r3, r3, #32
 8008472:	2b20      	cmp	r3, #32
 8008474:	d0f0      	beq.n	8008458 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3714      	adds	r7, #20
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr
 8008484:	00030d40 	.word	0x00030d40

08008488 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008490:	2300      	movs	r3, #0
 8008492:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	3301      	adds	r3, #1
 8008498:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	4a11      	ldr	r2, [pc, #68]	; (80084e4 <USB_FlushRxFifo+0x5c>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d901      	bls.n	80084a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80084a2:	2303      	movs	r3, #3
 80084a4:	e018      	b.n	80084d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	daf2      	bge.n	8008494 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80084ae:	2300      	movs	r3, #0
 80084b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2210      	movs	r2, #16
 80084b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	3301      	adds	r3, #1
 80084bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	4a08      	ldr	r2, [pc, #32]	; (80084e4 <USB_FlushRxFifo+0x5c>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d901      	bls.n	80084ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80084c6:	2303      	movs	r3, #3
 80084c8:	e006      	b.n	80084d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	f003 0310 	and.w	r3, r3, #16
 80084d2:	2b10      	cmp	r3, #16
 80084d4:	d0f0      	beq.n	80084b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3714      	adds	r7, #20
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	00030d40 	.word	0x00030d40

080084e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	460b      	mov	r3, r1
 80084f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	78fb      	ldrb	r3, [r7, #3]
 8008502:	68f9      	ldr	r1, [r7, #12]
 8008504:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008508:	4313      	orrs	r3, r2
 800850a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3714      	adds	r7, #20
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800851a:	b480      	push	{r7}
 800851c:	b085      	sub	sp, #20
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008534:	f023 0303 	bic.w	r3, r3, #3
 8008538:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008548:	f043 0302 	orr.w	r3, r3, #2
 800854c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3714      	adds	r7, #20
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	695b      	ldr	r3, [r3, #20]
 8008568:	f003 0301 	and.w	r3, r3, #1
}
 800856c:	4618      	mov	r0, r3
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008580:	2300      	movs	r3, #0
 8008582:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	3301      	adds	r3, #1
 8008588:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	4a13      	ldr	r2, [pc, #76]	; (80085dc <USB_CoreReset+0x64>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d901      	bls.n	8008596 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008592:	2303      	movs	r3, #3
 8008594:	e01b      	b.n	80085ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	2b00      	cmp	r3, #0
 800859c:	daf2      	bge.n	8008584 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800859e:	2300      	movs	r3, #0
 80085a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	f043 0201 	orr.w	r2, r3, #1
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	3301      	adds	r3, #1
 80085b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	4a09      	ldr	r2, [pc, #36]	; (80085dc <USB_CoreReset+0x64>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d901      	bls.n	80085c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	e006      	b.n	80085ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	f003 0301 	and.w	r3, r3, #1
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d0f0      	beq.n	80085ae <USB_CoreReset+0x36>

  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3714      	adds	r7, #20
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	00030d40 	.word	0x00030d40

080085e0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80085e6:	4b98      	ldr	r3, [pc, #608]	; (8008848 <MX_LWIP_Init+0x268>)
 80085e8:	22c0      	movs	r2, #192	; 0xc0
 80085ea:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80085ec:	4b96      	ldr	r3, [pc, #600]	; (8008848 <MX_LWIP_Init+0x268>)
 80085ee:	22a8      	movs	r2, #168	; 0xa8
 80085f0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80085f2:	4b95      	ldr	r3, [pc, #596]	; (8008848 <MX_LWIP_Init+0x268>)
 80085f4:	2200      	movs	r2, #0
 80085f6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 20;
 80085f8:	4b93      	ldr	r3, [pc, #588]	; (8008848 <MX_LWIP_Init+0x268>)
 80085fa:	2214      	movs	r2, #20
 80085fc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80085fe:	4b93      	ldr	r3, [pc, #588]	; (800884c <MX_LWIP_Init+0x26c>)
 8008600:	22ff      	movs	r2, #255	; 0xff
 8008602:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8008604:	4b91      	ldr	r3, [pc, #580]	; (800884c <MX_LWIP_Init+0x26c>)
 8008606:	22ff      	movs	r2, #255	; 0xff
 8008608:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800860a:	4b90      	ldr	r3, [pc, #576]	; (800884c <MX_LWIP_Init+0x26c>)
 800860c:	22ff      	movs	r2, #255	; 0xff
 800860e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8008610:	4b8e      	ldr	r3, [pc, #568]	; (800884c <MX_LWIP_Init+0x26c>)
 8008612:	2200      	movs	r2, #0
 8008614:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8008616:	4b8e      	ldr	r3, [pc, #568]	; (8008850 <MX_LWIP_Init+0x270>)
 8008618:	2200      	movs	r2, #0
 800861a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800861c:	4b8c      	ldr	r3, [pc, #560]	; (8008850 <MX_LWIP_Init+0x270>)
 800861e:	2200      	movs	r2, #0
 8008620:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8008622:	4b8b      	ldr	r3, [pc, #556]	; (8008850 <MX_LWIP_Init+0x270>)
 8008624:	2200      	movs	r2, #0
 8008626:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8008628:	4b89      	ldr	r3, [pc, #548]	; (8008850 <MX_LWIP_Init+0x270>)
 800862a:	2200      	movs	r2, #0
 800862c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800862e:	2100      	movs	r1, #0
 8008630:	2000      	movs	r0, #0
 8008632:	f004 fe9b 	bl	800d36c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8008636:	4b84      	ldr	r3, [pc, #528]	; (8008848 <MX_LWIP_Init+0x268>)
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	061a      	lsls	r2, r3, #24
 800863c:	4b82      	ldr	r3, [pc, #520]	; (8008848 <MX_LWIP_Init+0x268>)
 800863e:	785b      	ldrb	r3, [r3, #1]
 8008640:	041b      	lsls	r3, r3, #16
 8008642:	431a      	orrs	r2, r3
 8008644:	4b80      	ldr	r3, [pc, #512]	; (8008848 <MX_LWIP_Init+0x268>)
 8008646:	789b      	ldrb	r3, [r3, #2]
 8008648:	021b      	lsls	r3, r3, #8
 800864a:	4313      	orrs	r3, r2
 800864c:	4a7e      	ldr	r2, [pc, #504]	; (8008848 <MX_LWIP_Init+0x268>)
 800864e:	78d2      	ldrb	r2, [r2, #3]
 8008650:	4313      	orrs	r3, r2
 8008652:	061a      	lsls	r2, r3, #24
 8008654:	4b7c      	ldr	r3, [pc, #496]	; (8008848 <MX_LWIP_Init+0x268>)
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	0619      	lsls	r1, r3, #24
 800865a:	4b7b      	ldr	r3, [pc, #492]	; (8008848 <MX_LWIP_Init+0x268>)
 800865c:	785b      	ldrb	r3, [r3, #1]
 800865e:	041b      	lsls	r3, r3, #16
 8008660:	4319      	orrs	r1, r3
 8008662:	4b79      	ldr	r3, [pc, #484]	; (8008848 <MX_LWIP_Init+0x268>)
 8008664:	789b      	ldrb	r3, [r3, #2]
 8008666:	021b      	lsls	r3, r3, #8
 8008668:	430b      	orrs	r3, r1
 800866a:	4977      	ldr	r1, [pc, #476]	; (8008848 <MX_LWIP_Init+0x268>)
 800866c:	78c9      	ldrb	r1, [r1, #3]
 800866e:	430b      	orrs	r3, r1
 8008670:	021b      	lsls	r3, r3, #8
 8008672:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008676:	431a      	orrs	r2, r3
 8008678:	4b73      	ldr	r3, [pc, #460]	; (8008848 <MX_LWIP_Init+0x268>)
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	0619      	lsls	r1, r3, #24
 800867e:	4b72      	ldr	r3, [pc, #456]	; (8008848 <MX_LWIP_Init+0x268>)
 8008680:	785b      	ldrb	r3, [r3, #1]
 8008682:	041b      	lsls	r3, r3, #16
 8008684:	4319      	orrs	r1, r3
 8008686:	4b70      	ldr	r3, [pc, #448]	; (8008848 <MX_LWIP_Init+0x268>)
 8008688:	789b      	ldrb	r3, [r3, #2]
 800868a:	021b      	lsls	r3, r3, #8
 800868c:	430b      	orrs	r3, r1
 800868e:	496e      	ldr	r1, [pc, #440]	; (8008848 <MX_LWIP_Init+0x268>)
 8008690:	78c9      	ldrb	r1, [r1, #3]
 8008692:	430b      	orrs	r3, r1
 8008694:	0a1b      	lsrs	r3, r3, #8
 8008696:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800869a:	431a      	orrs	r2, r3
 800869c:	4b6a      	ldr	r3, [pc, #424]	; (8008848 <MX_LWIP_Init+0x268>)
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	0619      	lsls	r1, r3, #24
 80086a2:	4b69      	ldr	r3, [pc, #420]	; (8008848 <MX_LWIP_Init+0x268>)
 80086a4:	785b      	ldrb	r3, [r3, #1]
 80086a6:	041b      	lsls	r3, r3, #16
 80086a8:	4319      	orrs	r1, r3
 80086aa:	4b67      	ldr	r3, [pc, #412]	; (8008848 <MX_LWIP_Init+0x268>)
 80086ac:	789b      	ldrb	r3, [r3, #2]
 80086ae:	021b      	lsls	r3, r3, #8
 80086b0:	430b      	orrs	r3, r1
 80086b2:	4965      	ldr	r1, [pc, #404]	; (8008848 <MX_LWIP_Init+0x268>)
 80086b4:	78c9      	ldrb	r1, [r1, #3]
 80086b6:	430b      	orrs	r3, r1
 80086b8:	0e1b      	lsrs	r3, r3, #24
 80086ba:	4313      	orrs	r3, r2
 80086bc:	4a65      	ldr	r2, [pc, #404]	; (8008854 <MX_LWIP_Init+0x274>)
 80086be:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80086c0:	4b62      	ldr	r3, [pc, #392]	; (800884c <MX_LWIP_Init+0x26c>)
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	061a      	lsls	r2, r3, #24
 80086c6:	4b61      	ldr	r3, [pc, #388]	; (800884c <MX_LWIP_Init+0x26c>)
 80086c8:	785b      	ldrb	r3, [r3, #1]
 80086ca:	041b      	lsls	r3, r3, #16
 80086cc:	431a      	orrs	r2, r3
 80086ce:	4b5f      	ldr	r3, [pc, #380]	; (800884c <MX_LWIP_Init+0x26c>)
 80086d0:	789b      	ldrb	r3, [r3, #2]
 80086d2:	021b      	lsls	r3, r3, #8
 80086d4:	4313      	orrs	r3, r2
 80086d6:	4a5d      	ldr	r2, [pc, #372]	; (800884c <MX_LWIP_Init+0x26c>)
 80086d8:	78d2      	ldrb	r2, [r2, #3]
 80086da:	4313      	orrs	r3, r2
 80086dc:	061a      	lsls	r2, r3, #24
 80086de:	4b5b      	ldr	r3, [pc, #364]	; (800884c <MX_LWIP_Init+0x26c>)
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	0619      	lsls	r1, r3, #24
 80086e4:	4b59      	ldr	r3, [pc, #356]	; (800884c <MX_LWIP_Init+0x26c>)
 80086e6:	785b      	ldrb	r3, [r3, #1]
 80086e8:	041b      	lsls	r3, r3, #16
 80086ea:	4319      	orrs	r1, r3
 80086ec:	4b57      	ldr	r3, [pc, #348]	; (800884c <MX_LWIP_Init+0x26c>)
 80086ee:	789b      	ldrb	r3, [r3, #2]
 80086f0:	021b      	lsls	r3, r3, #8
 80086f2:	430b      	orrs	r3, r1
 80086f4:	4955      	ldr	r1, [pc, #340]	; (800884c <MX_LWIP_Init+0x26c>)
 80086f6:	78c9      	ldrb	r1, [r1, #3]
 80086f8:	430b      	orrs	r3, r1
 80086fa:	021b      	lsls	r3, r3, #8
 80086fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008700:	431a      	orrs	r2, r3
 8008702:	4b52      	ldr	r3, [pc, #328]	; (800884c <MX_LWIP_Init+0x26c>)
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	0619      	lsls	r1, r3, #24
 8008708:	4b50      	ldr	r3, [pc, #320]	; (800884c <MX_LWIP_Init+0x26c>)
 800870a:	785b      	ldrb	r3, [r3, #1]
 800870c:	041b      	lsls	r3, r3, #16
 800870e:	4319      	orrs	r1, r3
 8008710:	4b4e      	ldr	r3, [pc, #312]	; (800884c <MX_LWIP_Init+0x26c>)
 8008712:	789b      	ldrb	r3, [r3, #2]
 8008714:	021b      	lsls	r3, r3, #8
 8008716:	430b      	orrs	r3, r1
 8008718:	494c      	ldr	r1, [pc, #304]	; (800884c <MX_LWIP_Init+0x26c>)
 800871a:	78c9      	ldrb	r1, [r1, #3]
 800871c:	430b      	orrs	r3, r1
 800871e:	0a1b      	lsrs	r3, r3, #8
 8008720:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008724:	431a      	orrs	r2, r3
 8008726:	4b49      	ldr	r3, [pc, #292]	; (800884c <MX_LWIP_Init+0x26c>)
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	0619      	lsls	r1, r3, #24
 800872c:	4b47      	ldr	r3, [pc, #284]	; (800884c <MX_LWIP_Init+0x26c>)
 800872e:	785b      	ldrb	r3, [r3, #1]
 8008730:	041b      	lsls	r3, r3, #16
 8008732:	4319      	orrs	r1, r3
 8008734:	4b45      	ldr	r3, [pc, #276]	; (800884c <MX_LWIP_Init+0x26c>)
 8008736:	789b      	ldrb	r3, [r3, #2]
 8008738:	021b      	lsls	r3, r3, #8
 800873a:	430b      	orrs	r3, r1
 800873c:	4943      	ldr	r1, [pc, #268]	; (800884c <MX_LWIP_Init+0x26c>)
 800873e:	78c9      	ldrb	r1, [r1, #3]
 8008740:	430b      	orrs	r3, r1
 8008742:	0e1b      	lsrs	r3, r3, #24
 8008744:	4313      	orrs	r3, r2
 8008746:	4a44      	ldr	r2, [pc, #272]	; (8008858 <MX_LWIP_Init+0x278>)
 8008748:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800874a:	4b41      	ldr	r3, [pc, #260]	; (8008850 <MX_LWIP_Init+0x270>)
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	061a      	lsls	r2, r3, #24
 8008750:	4b3f      	ldr	r3, [pc, #252]	; (8008850 <MX_LWIP_Init+0x270>)
 8008752:	785b      	ldrb	r3, [r3, #1]
 8008754:	041b      	lsls	r3, r3, #16
 8008756:	431a      	orrs	r2, r3
 8008758:	4b3d      	ldr	r3, [pc, #244]	; (8008850 <MX_LWIP_Init+0x270>)
 800875a:	789b      	ldrb	r3, [r3, #2]
 800875c:	021b      	lsls	r3, r3, #8
 800875e:	4313      	orrs	r3, r2
 8008760:	4a3b      	ldr	r2, [pc, #236]	; (8008850 <MX_LWIP_Init+0x270>)
 8008762:	78d2      	ldrb	r2, [r2, #3]
 8008764:	4313      	orrs	r3, r2
 8008766:	061a      	lsls	r2, r3, #24
 8008768:	4b39      	ldr	r3, [pc, #228]	; (8008850 <MX_LWIP_Init+0x270>)
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	0619      	lsls	r1, r3, #24
 800876e:	4b38      	ldr	r3, [pc, #224]	; (8008850 <MX_LWIP_Init+0x270>)
 8008770:	785b      	ldrb	r3, [r3, #1]
 8008772:	041b      	lsls	r3, r3, #16
 8008774:	4319      	orrs	r1, r3
 8008776:	4b36      	ldr	r3, [pc, #216]	; (8008850 <MX_LWIP_Init+0x270>)
 8008778:	789b      	ldrb	r3, [r3, #2]
 800877a:	021b      	lsls	r3, r3, #8
 800877c:	430b      	orrs	r3, r1
 800877e:	4934      	ldr	r1, [pc, #208]	; (8008850 <MX_LWIP_Init+0x270>)
 8008780:	78c9      	ldrb	r1, [r1, #3]
 8008782:	430b      	orrs	r3, r1
 8008784:	021b      	lsls	r3, r3, #8
 8008786:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800878a:	431a      	orrs	r2, r3
 800878c:	4b30      	ldr	r3, [pc, #192]	; (8008850 <MX_LWIP_Init+0x270>)
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	0619      	lsls	r1, r3, #24
 8008792:	4b2f      	ldr	r3, [pc, #188]	; (8008850 <MX_LWIP_Init+0x270>)
 8008794:	785b      	ldrb	r3, [r3, #1]
 8008796:	041b      	lsls	r3, r3, #16
 8008798:	4319      	orrs	r1, r3
 800879a:	4b2d      	ldr	r3, [pc, #180]	; (8008850 <MX_LWIP_Init+0x270>)
 800879c:	789b      	ldrb	r3, [r3, #2]
 800879e:	021b      	lsls	r3, r3, #8
 80087a0:	430b      	orrs	r3, r1
 80087a2:	492b      	ldr	r1, [pc, #172]	; (8008850 <MX_LWIP_Init+0x270>)
 80087a4:	78c9      	ldrb	r1, [r1, #3]
 80087a6:	430b      	orrs	r3, r1
 80087a8:	0a1b      	lsrs	r3, r3, #8
 80087aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80087ae:	431a      	orrs	r2, r3
 80087b0:	4b27      	ldr	r3, [pc, #156]	; (8008850 <MX_LWIP_Init+0x270>)
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	0619      	lsls	r1, r3, #24
 80087b6:	4b26      	ldr	r3, [pc, #152]	; (8008850 <MX_LWIP_Init+0x270>)
 80087b8:	785b      	ldrb	r3, [r3, #1]
 80087ba:	041b      	lsls	r3, r3, #16
 80087bc:	4319      	orrs	r1, r3
 80087be:	4b24      	ldr	r3, [pc, #144]	; (8008850 <MX_LWIP_Init+0x270>)
 80087c0:	789b      	ldrb	r3, [r3, #2]
 80087c2:	021b      	lsls	r3, r3, #8
 80087c4:	430b      	orrs	r3, r1
 80087c6:	4922      	ldr	r1, [pc, #136]	; (8008850 <MX_LWIP_Init+0x270>)
 80087c8:	78c9      	ldrb	r1, [r1, #3]
 80087ca:	430b      	orrs	r3, r1
 80087cc:	0e1b      	lsrs	r3, r3, #24
 80087ce:	4313      	orrs	r3, r2
 80087d0:	4a22      	ldr	r2, [pc, #136]	; (800885c <MX_LWIP_Init+0x27c>)
 80087d2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80087d4:	4b22      	ldr	r3, [pc, #136]	; (8008860 <MX_LWIP_Init+0x280>)
 80087d6:	9302      	str	r3, [sp, #8]
 80087d8:	4b22      	ldr	r3, [pc, #136]	; (8008864 <MX_LWIP_Init+0x284>)
 80087da:	9301      	str	r3, [sp, #4]
 80087dc:	2300      	movs	r3, #0
 80087de:	9300      	str	r3, [sp, #0]
 80087e0:	4b1e      	ldr	r3, [pc, #120]	; (800885c <MX_LWIP_Init+0x27c>)
 80087e2:	4a1d      	ldr	r2, [pc, #116]	; (8008858 <MX_LWIP_Init+0x278>)
 80087e4:	491b      	ldr	r1, [pc, #108]	; (8008854 <MX_LWIP_Init+0x274>)
 80087e6:	4820      	ldr	r0, [pc, #128]	; (8008868 <MX_LWIP_Init+0x288>)
 80087e8:	f005 fb8a 	bl	800df00 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80087ec:	481e      	ldr	r0, [pc, #120]	; (8008868 <MX_LWIP_Init+0x288>)
 80087ee:	f005 fd39 	bl	800e264 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80087f2:	4b1d      	ldr	r3, [pc, #116]	; (8008868 <MX_LWIP_Init+0x288>)
 80087f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80087f8:	089b      	lsrs	r3, r3, #2
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	2b00      	cmp	r3, #0
 8008802:	d003      	beq.n	800880c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8008804:	4818      	ldr	r0, [pc, #96]	; (8008868 <MX_LWIP_Init+0x288>)
 8008806:	f005 fd3d 	bl	800e284 <netif_set_up>
 800880a:	e002      	b.n	8008812 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800880c:	4816      	ldr	r0, [pc, #88]	; (8008868 <MX_LWIP_Init+0x288>)
 800880e:	f005 fda5 	bl	800e35c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8008812:	4916      	ldr	r1, [pc, #88]	; (800886c <MX_LWIP_Init+0x28c>)
 8008814:	4814      	ldr	r0, [pc, #80]	; (8008868 <MX_LWIP_Init+0x288>)
 8008816:	f005 fe37 	bl	800e488 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800881a:	2224      	movs	r2, #36	; 0x24
 800881c:	2100      	movs	r1, #0
 800881e:	4814      	ldr	r0, [pc, #80]	; (8008870 <MX_LWIP_Init+0x290>)
 8008820:	f00e fd04 	bl	801722c <memset>
  attributes.name = "EthLink";
 8008824:	4b12      	ldr	r3, [pc, #72]	; (8008870 <MX_LWIP_Init+0x290>)
 8008826:	4a13      	ldr	r2, [pc, #76]	; (8008874 <MX_LWIP_Init+0x294>)
 8008828:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800882a:	4b11      	ldr	r3, [pc, #68]	; (8008870 <MX_LWIP_Init+0x290>)
 800882c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008830:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8008832:	4b0f      	ldr	r3, [pc, #60]	; (8008870 <MX_LWIP_Init+0x290>)
 8008834:	2210      	movs	r2, #16
 8008836:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8008838:	4a0d      	ldr	r2, [pc, #52]	; (8008870 <MX_LWIP_Init+0x290>)
 800883a:	490b      	ldr	r1, [pc, #44]	; (8008868 <MX_LWIP_Init+0x288>)
 800883c:	480e      	ldr	r0, [pc, #56]	; (8008878 <MX_LWIP_Init+0x298>)
 800883e:	f000 fda3 	bl	8009388 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008842:	bf00      	nop
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	200044ec 	.word	0x200044ec
 800884c:	200044f0 	.word	0x200044f0
 8008850:	200044f4 	.word	0x200044f4
 8008854:	200044e0 	.word	0x200044e0
 8008858:	200044e4 	.word	0x200044e4
 800885c:	200044e8 	.word	0x200044e8
 8008860:	0800d2a9 	.word	0x0800d2a9
 8008864:	08008d79 	.word	0x08008d79
 8008868:	200044ac 	.word	0x200044ac
 800886c:	0800887d 	.word	0x0800887d
 8008870:	200044f8 	.word	0x200044f8
 8008874:	08018570 	.word	0x08018570
 8008878:	08009041 	.word	0x08009041

0800887c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8008890:	b480      	push	{r7}
 8008892:	b087      	sub	sp, #28
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80088a2:	2320      	movs	r3, #32
 80088a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80088a6:	f3bf 8f4f 	dsb	sy
}
 80088aa:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 80088ac:	e00b      	b.n	80088c6 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80088ae:	4a0d      	ldr	r2, [pc, #52]	; (80088e4 <SCB_InvalidateDCache_by_Addr+0x54>)
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	4413      	add	r3, r2
 80088bc:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80088be:	697a      	ldr	r2, [r7, #20]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	dcf0      	bgt.n	80088ae <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80088cc:	f3bf 8f4f 	dsb	sy
}
 80088d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80088d2:	f3bf 8f6f 	isb	sy
}
 80088d6:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 80088d8:	bf00      	nop
 80088da:	371c      	adds	r7, #28
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr
 80088e4:	e000ed00 	.word	0xe000ed00

080088e8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80088f0:	4b04      	ldr	r3, [pc, #16]	; (8008904 <HAL_ETH_RxCpltCallback+0x1c>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4618      	mov	r0, r3
 80088f6:	f001 f865 	bl	80099c4 <osSemaphoreRelease>
}
 80088fa:	bf00      	nop
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	20008ea8 	.word	0x20008ea8

08008908 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8008910:	4b04      	ldr	r3, [pc, #16]	; (8008924 <HAL_ETH_TxCpltCallback+0x1c>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4618      	mov	r0, r3
 8008916:	f001 f855 	bl	80099c4 <osSemaphoreRelease>
}
 800891a:	bf00      	nop
 800891c:	3708      	adds	r7, #8
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	20008eac 	.word	0x20008eac

08008928 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f7fb ff19 	bl	8004768 <HAL_ETH_GetDMAError>
 8008936:	4603      	mov	r3, r0
 8008938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800893c:	2b80      	cmp	r3, #128	; 0x80
 800893e:	d104      	bne.n	800894a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8008940:	4b04      	ldr	r3, [pc, #16]	; (8008954 <HAL_ETH_ErrorCallback+0x2c>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4618      	mov	r0, r3
 8008946:	f001 f83d 	bl	80099c4 <osSemaphoreRelease>
  }
}
 800894a:	bf00      	nop
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	20008ea8 	.word	0x20008ea8

08008958 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b0aa      	sub	sp, #168	; 0xa8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8008960:	2300      	movs	r3, #0
 8008962:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8008966:	2300      	movs	r3, #0
 8008968:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 800896c:	2300      	movs	r3, #0
 800896e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8008972:	f107 0310 	add.w	r3, r7, #16
 8008976:	2264      	movs	r2, #100	; 0x64
 8008978:	2100      	movs	r1, #0
 800897a:	4618      	mov	r0, r3
 800897c:	f00e fc56 	bl	801722c <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008980:	4b85      	ldr	r3, [pc, #532]	; (8008b98 <low_level_init+0x240>)
 8008982:	4a86      	ldr	r2, [pc, #536]	; (8008b9c <low_level_init+0x244>)
 8008984:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8008986:	2300      	movs	r3, #0
 8008988:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800898a:	2380      	movs	r3, #128	; 0x80
 800898c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800898e:	23e1      	movs	r3, #225	; 0xe1
 8008990:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8008992:	2300      	movs	r3, #0
 8008994:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8008996:	2300      	movs	r3, #0
 8008998:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800899a:	2300      	movs	r3, #0
 800899c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800899e:	4a7e      	ldr	r2, [pc, #504]	; (8008b98 <low_level_init+0x240>)
 80089a0:	f107 0308 	add.w	r3, r7, #8
 80089a4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80089a6:	4b7c      	ldr	r3, [pc, #496]	; (8008b98 <low_level_init+0x240>)
 80089a8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80089ac:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80089ae:	4b7a      	ldr	r3, [pc, #488]	; (8008b98 <low_level_init+0x240>)
 80089b0:	4a7b      	ldr	r2, [pc, #492]	; (8008ba0 <low_level_init+0x248>)
 80089b2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80089b4:	4b78      	ldr	r3, [pc, #480]	; (8008b98 <low_level_init+0x240>)
 80089b6:	4a7b      	ldr	r2, [pc, #492]	; (8008ba4 <low_level_init+0x24c>)
 80089b8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80089ba:	4b77      	ldr	r3, [pc, #476]	; (8008b98 <low_level_init+0x240>)
 80089bc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80089c0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80089c2:	4875      	ldr	r0, [pc, #468]	; (8008b98 <low_level_init+0x240>)
 80089c4:	f7fb f892 	bl	8003aec <HAL_ETH_Init>
 80089c8:	4603      	mov	r3, r0
 80089ca:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80089ce:	2238      	movs	r2, #56	; 0x38
 80089d0:	2100      	movs	r1, #0
 80089d2:	4875      	ldr	r0, [pc, #468]	; (8008ba8 <low_level_init+0x250>)
 80089d4:	f00e fc2a 	bl	801722c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80089d8:	4b73      	ldr	r3, [pc, #460]	; (8008ba8 <low_level_init+0x250>)
 80089da:	2221      	movs	r2, #33	; 0x21
 80089dc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80089de:	4b72      	ldr	r3, [pc, #456]	; (8008ba8 <low_level_init+0x250>)
 80089e0:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80089e4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80089e6:	4b70      	ldr	r3, [pc, #448]	; (8008ba8 <low_level_init+0x250>)
 80089e8:	2200      	movs	r2, #0
 80089ea:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80089ec:	486f      	ldr	r0, [pc, #444]	; (8008bac <low_level_init+0x254>)
 80089ee:	f005 f941 	bl	800dc74 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2206      	movs	r2, #6
 80089f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80089fa:	4b67      	ldr	r3, [pc, #412]	; (8008b98 <low_level_init+0x240>)
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	781a      	ldrb	r2, [r3, #0]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008a06:	4b64      	ldr	r3, [pc, #400]	; (8008b98 <low_level_init+0x240>)
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	785a      	ldrb	r2, [r3, #1]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008a12:	4b61      	ldr	r3, [pc, #388]	; (8008b98 <low_level_init+0x240>)
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	789a      	ldrb	r2, [r3, #2]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008a1e:	4b5e      	ldr	r3, [pc, #376]	; (8008b98 <low_level_init+0x240>)
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	78da      	ldrb	r2, [r3, #3]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008a2a:	4b5b      	ldr	r3, [pc, #364]	; (8008b98 <low_level_init+0x240>)
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	791a      	ldrb	r2, [r3, #4]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008a36:	4b58      	ldr	r3, [pc, #352]	; (8008b98 <low_level_init+0x240>)
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	795a      	ldrb	r2, [r3, #5]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008a48:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008a50:	f043 030a 	orr.w	r3, r3, #10
 8008a54:	b2da      	uxtb	r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	2101      	movs	r1, #1
 8008a60:	2001      	movs	r0, #1
 8008a62:	f000 fead 	bl	80097c0 <osSemaphoreNew>
 8008a66:	4603      	mov	r3, r0
 8008a68:	4a51      	ldr	r2, [pc, #324]	; (8008bb0 <low_level_init+0x258>)
 8008a6a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	2101      	movs	r1, #1
 8008a70:	2001      	movs	r0, #1
 8008a72:	f000 fea5 	bl	80097c0 <osSemaphoreNew>
 8008a76:	4603      	mov	r3, r0
 8008a78:	4a4e      	ldr	r2, [pc, #312]	; (8008bb4 <low_level_init+0x25c>)
 8008a7a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8008a7c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008a80:	2224      	movs	r2, #36	; 0x24
 8008a82:	2100      	movs	r1, #0
 8008a84:	4618      	mov	r0, r3
 8008a86:	f00e fbd1 	bl	801722c <memset>
  attributes.name = "EthIf";
 8008a8a:	4b4b      	ldr	r3, [pc, #300]	; (8008bb8 <low_level_init+0x260>)
 8008a8c:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8008a8e:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8008a92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 8008a96:	2330      	movs	r3, #48	; 0x30
 8008a98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8008a9c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	6879      	ldr	r1, [r7, #4]
 8008aa4:	4845      	ldr	r0, [pc, #276]	; (8008bbc <low_level_init+0x264>)
 8008aa6:	f000 fc6f 	bl	8009388 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8008aaa:	4945      	ldr	r1, [pc, #276]	; (8008bc0 <low_level_init+0x268>)
 8008aac:	4845      	ldr	r0, [pc, #276]	; (8008bc4 <low_level_init+0x26c>)
 8008aae:	f7f9 fbb0 	bl	8002212 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8008ab2:	4844      	ldr	r0, [pc, #272]	; (8008bc4 <low_level_init+0x26c>)
 8008ab4:	f7f9 fbdf 	bl	8002276 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8008ab8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d164      	bne.n	8008b8a <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008ac0:	4840      	ldr	r0, [pc, #256]	; (8008bc4 <low_level_init+0x26c>)
 8008ac2:	f7f9 fc80 	bl	80023c6 <LAN8742_GetLinkState>
 8008ac6:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8008aca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	dc06      	bgt.n	8008ae0 <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f005 fca8 	bl	800e428 <netif_set_link_down>
      netif_set_down(netif);
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f005 fc3f 	bl	800e35c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008ade:	e056      	b.n	8008b8e <low_level_init+0x236>
      switch (PHYLinkState)
 8008ae0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ae4:	3b02      	subs	r3, #2
 8008ae6:	2b03      	cmp	r3, #3
 8008ae8:	d82a      	bhi.n	8008b40 <low_level_init+0x1e8>
 8008aea:	a201      	add	r2, pc, #4	; (adr r2, 8008af0 <low_level_init+0x198>)
 8008aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af0:	08008b01 	.word	0x08008b01
 8008af4:	08008b13 	.word	0x08008b13
 8008af8:	08008b23 	.word	0x08008b23
 8008afc:	08008b33 	.word	0x08008b33
        duplex = ETH_FULLDUPLEX_MODE;
 8008b00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8008b08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008b0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008b10:	e01f      	b.n	8008b52 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8008b12:	2300      	movs	r3, #0
 8008b14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8008b18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008b1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008b20:	e017      	b.n	8008b52 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8008b22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008b30:	e00f      	b.n	8008b52 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8008b32:	2300      	movs	r3, #0
 8008b34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008b3e:	e008      	b.n	8008b52 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8008b40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8008b48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008b4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008b50:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008b52:	f107 0310 	add.w	r3, r7, #16
 8008b56:	4619      	mov	r1, r3
 8008b58:	480f      	ldr	r0, [pc, #60]	; (8008b98 <low_level_init+0x240>)
 8008b5a:	f7fb fcab 	bl	80044b4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8008b5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008b62:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8008b64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008b6a:	f107 0310 	add.w	r3, r7, #16
 8008b6e:	4619      	mov	r1, r3
 8008b70:	4809      	ldr	r0, [pc, #36]	; (8008b98 <low_level_init+0x240>)
 8008b72:	f7fb fd89 	bl	8004688 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8008b76:	4808      	ldr	r0, [pc, #32]	; (8008b98 <low_level_init+0x240>)
 8008b78:	f7fb f834 	bl	8003be4 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f005 fb81 	bl	800e284 <netif_set_up>
    netif_set_link_up(netif);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f005 fc1c 	bl	800e3c0 <netif_set_link_up>
}
 8008b88:	e001      	b.n	8008b8e <low_level_init+0x236>
    Error_Handler();
 8008b8a:	f7f8 ffc9 	bl	8001b20 <Error_Handler>
}
 8008b8e:	bf00      	nop
 8008b90:	37a8      	adds	r7, #168	; 0xa8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	20008eb0 	.word	0x20008eb0
 8008b9c:	40028000 	.word	0x40028000
 8008ba0:	20000134 	.word	0x20000134
 8008ba4:	20000094 	.word	0x20000094
 8008ba8:	20008f60 	.word	0x20008f60
 8008bac:	0801b100 	.word	0x0801b100
 8008bb0:	20008ea8 	.word	0x20008ea8
 8008bb4:	20008eac 	.word	0x20008eac
 8008bb8:	08018578 	.word	0x08018578
 8008bbc:	08008d25 	.word	0x08008d25
 8008bc0:	2000000c 	.word	0x2000000c
 8008bc4:	20008f98 	.word	0x20008f98

08008bc8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b092      	sub	sp, #72	; 0x48
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8008be0:	f107 030c 	add.w	r3, r7, #12
 8008be4:	2230      	movs	r2, #48	; 0x30
 8008be6:	2100      	movs	r1, #0
 8008be8:	4618      	mov	r0, r3
 8008bea:	f00e fb1f 	bl	801722c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008bee:	f107 030c 	add.w	r3, r7, #12
 8008bf2:	2230      	movs	r2, #48	; 0x30
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f00e fb18 	bl	801722c <memset>

  for(q = p; q != NULL; q = q->next)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	643b      	str	r3, [r7, #64]	; 0x40
 8008c00:	e045      	b.n	8008c8e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8008c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c04:	2b03      	cmp	r3, #3
 8008c06:	d902      	bls.n	8008c0e <low_level_output+0x46>
      return ERR_IF;
 8008c08:	f06f 030b 	mvn.w	r3, #11
 8008c0c:	e065      	b.n	8008cda <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8008c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c10:	6859      	ldr	r1, [r3, #4]
 8008c12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c14:	4613      	mov	r3, r2
 8008c16:	005b      	lsls	r3, r3, #1
 8008c18:	4413      	add	r3, r2
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	3348      	adds	r3, #72	; 0x48
 8008c1e:	443b      	add	r3, r7
 8008c20:	3b3c      	subs	r3, #60	; 0x3c
 8008c22:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8008c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c26:	895b      	ldrh	r3, [r3, #10]
 8008c28:	4619      	mov	r1, r3
 8008c2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	005b      	lsls	r3, r3, #1
 8008c30:	4413      	add	r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	3348      	adds	r3, #72	; 0x48
 8008c36:	443b      	add	r3, r7
 8008c38:	3b38      	subs	r3, #56	; 0x38
 8008c3a:	6019      	str	r1, [r3, #0]

    if(i>0)
 8008c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d011      	beq.n	8008c66 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8008c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c44:	1e5a      	subs	r2, r3, #1
 8008c46:	f107 000c 	add.w	r0, r7, #12
 8008c4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	005b      	lsls	r3, r3, #1
 8008c50:	440b      	add	r3, r1
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	18c1      	adds	r1, r0, r3
 8008c56:	4613      	mov	r3, r2
 8008c58:	005b      	lsls	r3, r3, #1
 8008c5a:	4413      	add	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	3348      	adds	r3, #72	; 0x48
 8008c60:	443b      	add	r3, r7
 8008c62:	3b34      	subs	r3, #52	; 0x34
 8008c64:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8008c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d109      	bne.n	8008c82 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8008c6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c70:	4613      	mov	r3, r2
 8008c72:	005b      	lsls	r3, r3, #1
 8008c74:	4413      	add	r3, r2
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	3348      	adds	r3, #72	; 0x48
 8008c7a:	443b      	add	r3, r7
 8008c7c:	3b34      	subs	r3, #52	; 0x34
 8008c7e:	2200      	movs	r2, #0
 8008c80:	601a      	str	r2, [r3, #0]
    }

    i++;
 8008c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c84:	3301      	adds	r3, #1
 8008c86:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8008c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	643b      	str	r3, [r7, #64]	; 0x40
 8008c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d1b6      	bne.n	8008c02 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	891b      	ldrh	r3, [r3, #8]
 8008c98:	461a      	mov	r2, r3
 8008c9a:	4b12      	ldr	r3, [pc, #72]	; (8008ce4 <low_level_output+0x11c>)
 8008c9c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8008c9e:	4a11      	ldr	r2, [pc, #68]	; (8008ce4 <low_level_output+0x11c>)
 8008ca0:	f107 030c 	add.w	r3, r7, #12
 8008ca4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8008ca6:	4a0f      	ldr	r2, [pc, #60]	; (8008ce4 <low_level_output+0x11c>)
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8008cac:	6838      	ldr	r0, [r7, #0]
 8008cae:	f006 f83f 	bl	800ed30 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8008cb2:	490c      	ldr	r1, [pc, #48]	; (8008ce4 <low_level_output+0x11c>)
 8008cb4:	480c      	ldr	r0, [pc, #48]	; (8008ce8 <low_level_output+0x120>)
 8008cb6:	f7fb f8a3 	bl	8003e00 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8008cba:	bf00      	nop
 8008cbc:	4b0b      	ldr	r3, [pc, #44]	; (8008cec <low_level_output+0x124>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f000 fe17 	bl	80098f8 <osSemaphoreAcquire>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d1f5      	bne.n	8008cbc <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8008cd0:	4805      	ldr	r0, [pc, #20]	; (8008ce8 <low_level_output+0x120>)
 8008cd2:	f7fb fa29 	bl	8004128 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8008cd6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3748      	adds	r7, #72	; 0x48
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	20008f60 	.word	0x20008f60
 8008ce8:	20008eb0 	.word	0x20008eb0
 8008cec:	20008eac 	.word	0x20008eac

08008cf0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8008cfc:	4b07      	ldr	r3, [pc, #28]	; (8008d1c <low_level_input+0x2c>)
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d105      	bne.n	8008d10 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8008d04:	f107 030c 	add.w	r3, r7, #12
 8008d08:	4619      	mov	r1, r3
 8008d0a:	4805      	ldr	r0, [pc, #20]	; (8008d20 <low_level_input+0x30>)
 8008d0c:	f7fb f8d4 	bl	8003eb8 <HAL_ETH_ReadData>
  }

  return p;
 8008d10:	68fb      	ldr	r3, [r7, #12]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	20008ea4 	.word	0x20008ea4
 8008d20:	20008eb0 	.word	0x20008eb0

08008d24 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008d34:	4b0f      	ldr	r3, [pc, #60]	; (8008d74 <ethernetif_input+0x50>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f04f 31ff 	mov.w	r1, #4294967295
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f000 fddb 	bl	80098f8 <osSemaphoreAcquire>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1f5      	bne.n	8008d34 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8008d48:	68b8      	ldr	r0, [r7, #8]
 8008d4a:	f7ff ffd1 	bl	8008cf0 <low_level_input>
 8008d4e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d00a      	beq.n	8008d6c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	68b9      	ldr	r1, [r7, #8]
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	4798      	blx	r3
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d002      	beq.n	8008d6c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f005 ff3c 	bl	800ebe4 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d1ea      	bne.n	8008d48 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008d72:	e7df      	b.n	8008d34 <ethernetif_input+0x10>
 8008d74:	20008ea8 	.word	0x20008ea8

08008d78 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d106      	bne.n	8008d94 <ethernetif_init+0x1c>
 8008d86:	4b0e      	ldr	r3, [pc, #56]	; (8008dc0 <ethernetif_init+0x48>)
 8008d88:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008d8c:	490d      	ldr	r1, [pc, #52]	; (8008dc4 <ethernetif_init+0x4c>)
 8008d8e:	480e      	ldr	r0, [pc, #56]	; (8008dc8 <ethernetif_init+0x50>)
 8008d90:	f00e fa54 	bl	801723c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2273      	movs	r2, #115	; 0x73
 8008d98:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2274      	movs	r2, #116	; 0x74
 8008da0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a09      	ldr	r2, [pc, #36]	; (8008dcc <ethernetif_init+0x54>)
 8008da8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a08      	ldr	r2, [pc, #32]	; (8008dd0 <ethernetif_init+0x58>)
 8008dae:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f7ff fdd1 	bl	8008958 <low_level_init>

  return ERR_OK;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3708      	adds	r7, #8
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	08018580 	.word	0x08018580
 8008dc4:	0801859c 	.word	0x0801859c
 8008dc8:	080185ac 	.word	0x080185ac
 8008dcc:	080152d1 	.word	0x080152d1
 8008dd0:	08008bc9 	.word	0x08008bc9

08008dd4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008de0:	68f9      	ldr	r1, [r7, #12]
 8008de2:	4809      	ldr	r0, [pc, #36]	; (8008e08 <pbuf_free_custom+0x34>)
 8008de4:	f005 f836 	bl	800de54 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8008de8:	4b08      	ldr	r3, [pc, #32]	; (8008e0c <pbuf_free_custom+0x38>)
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d107      	bne.n	8008e00 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8008df0:	4b06      	ldr	r3, [pc, #24]	; (8008e0c <pbuf_free_custom+0x38>)
 8008df2:	2200      	movs	r2, #0
 8008df4:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8008df6:	4b06      	ldr	r3, [pc, #24]	; (8008e10 <pbuf_free_custom+0x3c>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f000 fde2 	bl	80099c4 <osSemaphoreRelease>
  }
}
 8008e00:	bf00      	nop
 8008e02:	3710      	adds	r7, #16
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	0801b100 	.word	0x0801b100
 8008e0c:	20008ea4 	.word	0x20008ea4
 8008e10:	20008ea8 	.word	0x20008ea8

08008e14 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008e18:	f7f9 fb7e 	bl	8002518 <HAL_GetTick>
 8008e1c:	4603      	mov	r3, r0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	bd80      	pop	{r7, pc}
	...

08008e24 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b08e      	sub	sp, #56	; 0x38
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e30:	2200      	movs	r2, #0
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	605a      	str	r2, [r3, #4]
 8008e36:	609a      	str	r2, [r3, #8]
 8008e38:	60da      	str	r2, [r3, #12]
 8008e3a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a52      	ldr	r2, [pc, #328]	; (8008f8c <HAL_ETH_MspInit+0x168>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	f040 809e 	bne.w	8008f84 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8008e48:	4b51      	ldr	r3, [pc, #324]	; (8008f90 <HAL_ETH_MspInit+0x16c>)
 8008e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4c:	4a50      	ldr	r2, [pc, #320]	; (8008f90 <HAL_ETH_MspInit+0x16c>)
 8008e4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008e52:	6313      	str	r3, [r2, #48]	; 0x30
 8008e54:	4b4e      	ldr	r3, [pc, #312]	; (8008f90 <HAL_ETH_MspInit+0x16c>)
 8008e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e5c:	623b      	str	r3, [r7, #32]
 8008e5e:	6a3b      	ldr	r3, [r7, #32]
 8008e60:	4b4b      	ldr	r3, [pc, #300]	; (8008f90 <HAL_ETH_MspInit+0x16c>)
 8008e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e64:	4a4a      	ldr	r2, [pc, #296]	; (8008f90 <HAL_ETH_MspInit+0x16c>)
 8008e66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8008e6c:	4b48      	ldr	r3, [pc, #288]	; (8008f90 <HAL_ETH_MspInit+0x16c>)
 8008e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008e74:	61fb      	str	r3, [r7, #28]
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	4b45      	ldr	r3, [pc, #276]	; (8008f90 <HAL_ETH_MspInit+0x16c>)
 8008e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e7c:	4a44      	ldr	r2, [pc, #272]	; (8008f90 <HAL_ETH_MspInit+0x16c>)
 8008e7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008e82:	6313      	str	r3, [r2, #48]	; 0x30
 8008e84:	4b42      	ldr	r3, [pc, #264]	; (8008f90 <HAL_ETH_MspInit+0x16c>)
 8008e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e8c:	61bb      	str	r3, [r7, #24]
 8008e8e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e90:	4b3f      	ldr	r3, [pc, #252]	; (8008f90 <HAL_ETH_MspInit+0x16c>)
 8008e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e94:	4a3e      	ldr	r2, [pc, #248]	; (8008f90 <HAL_ETH_MspInit+0x16c>)
 8008e96:	f043 0304 	orr.w	r3, r3, #4
 8008e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8008e9c:	4b3c      	ldr	r3, [pc, #240]	; (8008f90 <HAL_ETH_MspInit+0x16c>)
 8008e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea0:	f003 0304 	and.w	r3, r3, #4
 8008ea4:	617b      	str	r3, [r7, #20]
 8008ea6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ea8:	4b39      	ldr	r3, [pc, #228]	; (8008f90 <HAL_ETH_MspInit+0x16c>)
 8008eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eac:	4a38      	ldr	r2, [pc, #224]	; (8008f90 <HAL_ETH_MspInit+0x16c>)
 8008eae:	f043 0301 	orr.w	r3, r3, #1
 8008eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8008eb4:	4b36      	ldr	r3, [pc, #216]	; (8008f90 <HAL_ETH_MspInit+0x16c>)
 8008eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb8:	f003 0301 	and.w	r3, r3, #1
 8008ebc:	613b      	str	r3, [r7, #16]
 8008ebe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ec0:	4b33      	ldr	r3, [pc, #204]	; (8008f90 <HAL_ETH_MspInit+0x16c>)
 8008ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec4:	4a32      	ldr	r2, [pc, #200]	; (8008f90 <HAL_ETH_MspInit+0x16c>)
 8008ec6:	f043 0302 	orr.w	r3, r3, #2
 8008eca:	6313      	str	r3, [r2, #48]	; 0x30
 8008ecc:	4b30      	ldr	r3, [pc, #192]	; (8008f90 <HAL_ETH_MspInit+0x16c>)
 8008ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed0:	f003 0302 	and.w	r3, r3, #2
 8008ed4:	60fb      	str	r3, [r7, #12]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008ed8:	4b2d      	ldr	r3, [pc, #180]	; (8008f90 <HAL_ETH_MspInit+0x16c>)
 8008eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008edc:	4a2c      	ldr	r2, [pc, #176]	; (8008f90 <HAL_ETH_MspInit+0x16c>)
 8008ede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ee2:	6313      	str	r3, [r2, #48]	; 0x30
 8008ee4:	4b2a      	ldr	r3, [pc, #168]	; (8008f90 <HAL_ETH_MspInit+0x16c>)
 8008ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eec:	60bb      	str	r3, [r7, #8]
 8008eee:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8008ef0:	2332      	movs	r3, #50	; 0x32
 8008ef2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008efc:	2303      	movs	r3, #3
 8008efe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008f00:	230b      	movs	r3, #11
 8008f02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f08:	4619      	mov	r1, r3
 8008f0a:	4822      	ldr	r0, [pc, #136]	; (8008f94 <HAL_ETH_MspInit+0x170>)
 8008f0c:	f7fc f83c 	bl	8004f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8008f10:	2386      	movs	r3, #134	; 0x86
 8008f12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f14:	2302      	movs	r3, #2
 8008f16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008f20:	230b      	movs	r3, #11
 8008f22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f28:	4619      	mov	r1, r3
 8008f2a:	481b      	ldr	r0, [pc, #108]	; (8008f98 <HAL_ETH_MspInit+0x174>)
 8008f2c:	f7fc f82c 	bl	8004f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8008f30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f36:	2302      	movs	r3, #2
 8008f38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008f42:	230b      	movs	r3, #11
 8008f44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8008f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	4813      	ldr	r0, [pc, #76]	; (8008f9c <HAL_ETH_MspInit+0x178>)
 8008f4e:	f7fc f81b 	bl	8004f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8008f52:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008f56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f58:	2302      	movs	r3, #2
 8008f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f60:	2303      	movs	r3, #3
 8008f62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008f64:	230b      	movs	r3, #11
 8008f66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	480c      	ldr	r0, [pc, #48]	; (8008fa0 <HAL_ETH_MspInit+0x17c>)
 8008f70:	f7fc f80a 	bl	8004f88 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8008f74:	2200      	movs	r2, #0
 8008f76:	2105      	movs	r1, #5
 8008f78:	203d      	movs	r0, #61	; 0x3d
 8008f7a:	f7fa fa11 	bl	80033a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008f7e:	203d      	movs	r0, #61	; 0x3d
 8008f80:	f7fa fa2a 	bl	80033d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008f84:	bf00      	nop
 8008f86:	3738      	adds	r7, #56	; 0x38
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	40028000 	.word	0x40028000
 8008f90:	40023800 	.word	0x40023800
 8008f94:	40020800 	.word	0x40020800
 8008f98:	40020000 	.word	0x40020000
 8008f9c:	40020400 	.word	0x40020400
 8008fa0:	40021800 	.word	0x40021800

08008fa4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008fa8:	4802      	ldr	r0, [pc, #8]	; (8008fb4 <ETH_PHY_IO_Init+0x10>)
 8008faa:	f7fb fb87 	bl	80046bc <HAL_ETH_SetMDIOClockRange>

  return 0;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	20008eb0 	.word	0x20008eb0

08008fb8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	af00      	add	r7, sp, #0
  return 0;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	68f9      	ldr	r1, [r7, #12]
 8008fda:	4807      	ldr	r0, [pc, #28]	; (8008ff8 <ETH_PHY_IO_ReadReg+0x30>)
 8008fdc:	f7fb f9d6 	bl	800438c <HAL_ETH_ReadPHYRegister>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d002      	beq.n	8008fec <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8008fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8008fea:	e000      	b.n	8008fee <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	20008eb0 	.word	0x20008eb0

08008ffc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	68f9      	ldr	r1, [r7, #12]
 800900e:	4807      	ldr	r0, [pc, #28]	; (800902c <ETH_PHY_IO_WriteReg+0x30>)
 8009010:	f7fb fa07 	bl	8004422 <HAL_ETH_WritePHYRegister>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d002      	beq.n	8009020 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800901a:	f04f 33ff 	mov.w	r3, #4294967295
 800901e:	e000      	b.n	8009022 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	20008eb0 	.word	0x20008eb0

08009030 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009034:	f7f9 fa70 	bl	8002518 <HAL_GetTick>
 8009038:	4603      	mov	r3, r0
}
 800903a:	4618      	mov	r0, r3
 800903c:	bd80      	pop	{r7, pc}
	...

08009040 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b0a0      	sub	sp, #128	; 0x80
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8009048:	f107 0308 	add.w	r3, r7, #8
 800904c:	2264      	movs	r2, #100	; 0x64
 800904e:	2100      	movs	r1, #0
 8009050:	4618      	mov	r0, r3
 8009052:	f00e f8eb 	bl	801722c <memset>
  int32_t PHYLinkState = 0;
 8009056:	2300      	movs	r3, #0
 8009058:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800905a:	2300      	movs	r3, #0
 800905c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800905e:	2300      	movs	r3, #0
 8009060:	67bb      	str	r3, [r7, #120]	; 0x78
 8009062:	2300      	movs	r3, #0
 8009064:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800906a:	483a      	ldr	r0, [pc, #232]	; (8009154 <ethernet_link_thread+0x114>)
 800906c:	f7f9 f9ab 	bl	80023c6 <LAN8742_GetLinkState>
 8009070:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8009072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009074:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009078:	089b      	lsrs	r3, r3, #2
 800907a:	f003 0301 	and.w	r3, r3, #1
 800907e:	b2db      	uxtb	r3, r3
 8009080:	2b00      	cmp	r3, #0
 8009082:	d00c      	beq.n	800909e <ethernet_link_thread+0x5e>
 8009084:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009086:	2b01      	cmp	r3, #1
 8009088:	dc09      	bgt.n	800909e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800908a:	4833      	ldr	r0, [pc, #204]	; (8009158 <ethernet_link_thread+0x118>)
 800908c:	f7fa fe38 	bl	8003d00 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8009090:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009092:	f005 f963 	bl	800e35c <netif_set_down>
    netif_set_link_down(netif);
 8009096:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009098:	f005 f9c6 	bl	800e428 <netif_set_link_down>
 800909c:	e055      	b.n	800914a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800909e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80090a4:	f003 0304 	and.w	r3, r3, #4
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d14e      	bne.n	800914a <ethernet_link_thread+0x10a>
 80090ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	dd4b      	ble.n	800914a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80090b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090b4:	3b02      	subs	r3, #2
 80090b6:	2b03      	cmp	r3, #3
 80090b8:	d82a      	bhi.n	8009110 <ethernet_link_thread+0xd0>
 80090ba:	a201      	add	r2, pc, #4	; (adr r2, 80090c0 <ethernet_link_thread+0x80>)
 80090bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c0:	080090d1 	.word	0x080090d1
 80090c4:	080090e3 	.word	0x080090e3
 80090c8:	080090f3 	.word	0x080090f3
 80090cc:	08009103 	.word	0x08009103
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80090d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090d4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80090d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80090da:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80090dc:	2301      	movs	r3, #1
 80090de:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80090e0:	e017      	b.n	8009112 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80090e2:	2300      	movs	r3, #0
 80090e4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80090e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80090ea:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80090ec:	2301      	movs	r3, #1
 80090ee:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80090f0:	e00f      	b.n	8009112 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80090f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090f6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80090f8:	2300      	movs	r3, #0
 80090fa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80090fc:	2301      	movs	r3, #1
 80090fe:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009100:	e007      	b.n	8009112 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8009102:	2300      	movs	r3, #0
 8009104:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8009106:	2300      	movs	r3, #0
 8009108:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800910a:	2301      	movs	r3, #1
 800910c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800910e:	e000      	b.n	8009112 <ethernet_link_thread+0xd2>
    default:
      break;
 8009110:	bf00      	nop
    }

    if(linkchanged)
 8009112:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009114:	2b00      	cmp	r3, #0
 8009116:	d018      	beq.n	800914a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009118:	f107 0308 	add.w	r3, r7, #8
 800911c:	4619      	mov	r1, r3
 800911e:	480e      	ldr	r0, [pc, #56]	; (8009158 <ethernet_link_thread+0x118>)
 8009120:	f7fb f9c8 	bl	80044b4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8009124:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009126:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8009128:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800912a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800912c:	f107 0308 	add.w	r3, r7, #8
 8009130:	4619      	mov	r1, r3
 8009132:	4809      	ldr	r0, [pc, #36]	; (8009158 <ethernet_link_thread+0x118>)
 8009134:	f7fb faa8 	bl	8004688 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8009138:	4807      	ldr	r0, [pc, #28]	; (8009158 <ethernet_link_thread+0x118>)
 800913a:	f7fa fd53 	bl	8003be4 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800913e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009140:	f005 f8a0 	bl	800e284 <netif_set_up>
      netif_set_link_up(netif);
 8009144:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009146:	f005 f93b 	bl	800e3c0 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800914a:	2064      	movs	r0, #100	; 0x64
 800914c:	f000 f9c2 	bl	80094d4 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009150:	e78b      	b.n	800906a <ethernet_link_thread+0x2a>
 8009152:	bf00      	nop
 8009154:	20008f98 	.word	0x20008f98
 8009158:	20008eb0 	.word	0x20008eb0

0800915c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b086      	sub	sp, #24
 8009160:	af02      	add	r7, sp, #8
 8009162:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009164:	4812      	ldr	r0, [pc, #72]	; (80091b0 <HAL_ETH_RxAllocateCallback+0x54>)
 8009166:	f004 fe01 	bl	800dd6c <memp_malloc_pool>
 800916a:	60f8      	str	r0, [r7, #12]
  if (p)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d014      	beq.n	800919c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f103 0220 	add.w	r2, r3, #32
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	4a0d      	ldr	r2, [pc, #52]	; (80091b4 <HAL_ETH_RxAllocateCallback+0x58>)
 8009180:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800918a:	9201      	str	r2, [sp, #4]
 800918c:	9300      	str	r3, [sp, #0]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2241      	movs	r2, #65	; 0x41
 8009192:	2100      	movs	r1, #0
 8009194:	2000      	movs	r0, #0
 8009196:	f005 fb6b 	bl	800e870 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800919a:	e005      	b.n	80091a8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800919c:	4b06      	ldr	r3, [pc, #24]	; (80091b8 <HAL_ETH_RxAllocateCallback+0x5c>)
 800919e:	2201      	movs	r2, #1
 80091a0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	601a      	str	r2, [r3, #0]
}
 80091a8:	bf00      	nop
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	0801b100 	.word	0x0801b100
 80091b4:	08008dd5 	.word	0x08008dd5
 80091b8:	20008ea4 	.word	0x20008ea4

080091bc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b088      	sub	sp, #32
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	607a      	str	r2, [r7, #4]
 80091c8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80091d2:	2300      	movs	r3, #0
 80091d4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	3b20      	subs	r3, #32
 80091da:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80091dc:	69fb      	ldr	r3, [r7, #28]
 80091de:	2200      	movs	r2, #0
 80091e0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80091e2:	69fb      	ldr	r3, [r7, #28]
 80091e4:	2200      	movs	r2, #0
 80091e6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	887a      	ldrh	r2, [r7, #2]
 80091ec:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d103      	bne.n	80091fe <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	69fa      	ldr	r2, [r7, #28]
 80091fa:	601a      	str	r2, [r3, #0]
 80091fc:	e003      	b.n	8009206 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	69fa      	ldr	r2, [r7, #28]
 8009204:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	69fa      	ldr	r2, [r7, #28]
 800920a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	61fb      	str	r3, [r7, #28]
 8009212:	e009      	b.n	8009228 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	891a      	ldrh	r2, [r3, #8]
 8009218:	887b      	ldrh	r3, [r7, #2]
 800921a:	4413      	add	r3, r2
 800921c:	b29a      	uxth	r2, r3
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	61fb      	str	r3, [r7, #28]
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1f2      	bne.n	8009214 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800922e:	887b      	ldrh	r3, [r7, #2]
 8009230:	4619      	mov	r1, r3
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f7ff fb2c 	bl	8008890 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8009238:	bf00      	nop
 800923a:	3720      	adds	r7, #32
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f005 fccb 	bl	800ebe4 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800924e:	bf00      	nop
 8009250:	3708      	adds	r7, #8
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009256:	b480      	push	{r7}
 8009258:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800925a:	bf00      	nop
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009264:	b480      	push	{r7}
 8009266:	b085      	sub	sp, #20
 8009268:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800926a:	f3ef 8305 	mrs	r3, IPSR
 800926e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009270:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009272:	2b00      	cmp	r3, #0
 8009274:	d10f      	bne.n	8009296 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009276:	f3ef 8310 	mrs	r3, PRIMASK
 800927a:	607b      	str	r3, [r7, #4]
  return(result);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d105      	bne.n	800928e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009282:	f3ef 8311 	mrs	r3, BASEPRI
 8009286:	603b      	str	r3, [r7, #0]
  return(result);
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d007      	beq.n	800929e <osKernelInitialize+0x3a>
 800928e:	4b0e      	ldr	r3, [pc, #56]	; (80092c8 <osKernelInitialize+0x64>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b02      	cmp	r3, #2
 8009294:	d103      	bne.n	800929e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009296:	f06f 0305 	mvn.w	r3, #5
 800929a:	60fb      	str	r3, [r7, #12]
 800929c:	e00c      	b.n	80092b8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800929e:	4b0a      	ldr	r3, [pc, #40]	; (80092c8 <osKernelInitialize+0x64>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d105      	bne.n	80092b2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80092a6:	4b08      	ldr	r3, [pc, #32]	; (80092c8 <osKernelInitialize+0x64>)
 80092a8:	2201      	movs	r2, #1
 80092aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80092ac:	2300      	movs	r3, #0
 80092ae:	60fb      	str	r3, [r7, #12]
 80092b0:	e002      	b.n	80092b8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80092b2:	f04f 33ff 	mov.w	r3, #4294967295
 80092b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80092b8:	68fb      	ldr	r3, [r7, #12]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3714      	adds	r7, #20
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	20008fb8 	.word	0x20008fb8

080092cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092d2:	f3ef 8305 	mrs	r3, IPSR
 80092d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80092d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d10f      	bne.n	80092fe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092de:	f3ef 8310 	mrs	r3, PRIMASK
 80092e2:	607b      	str	r3, [r7, #4]
  return(result);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d105      	bne.n	80092f6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80092ea:	f3ef 8311 	mrs	r3, BASEPRI
 80092ee:	603b      	str	r3, [r7, #0]
  return(result);
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d007      	beq.n	8009306 <osKernelStart+0x3a>
 80092f6:	4b0f      	ldr	r3, [pc, #60]	; (8009334 <osKernelStart+0x68>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d103      	bne.n	8009306 <osKernelStart+0x3a>
    stat = osErrorISR;
 80092fe:	f06f 0305 	mvn.w	r3, #5
 8009302:	60fb      	str	r3, [r7, #12]
 8009304:	e010      	b.n	8009328 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009306:	4b0b      	ldr	r3, [pc, #44]	; (8009334 <osKernelStart+0x68>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2b01      	cmp	r3, #1
 800930c:	d109      	bne.n	8009322 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800930e:	f7ff ffa2 	bl	8009256 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009312:	4b08      	ldr	r3, [pc, #32]	; (8009334 <osKernelStart+0x68>)
 8009314:	2202      	movs	r2, #2
 8009316:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009318:	f002 f8f0 	bl	800b4fc <vTaskStartScheduler>
      stat = osOK;
 800931c:	2300      	movs	r3, #0
 800931e:	60fb      	str	r3, [r7, #12]
 8009320:	e002      	b.n	8009328 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8009322:	f04f 33ff 	mov.w	r3, #4294967295
 8009326:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009328:	68fb      	ldr	r3, [r7, #12]
}
 800932a:	4618      	mov	r0, r3
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	20008fb8 	.word	0x20008fb8

08009338 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800933e:	f3ef 8305 	mrs	r3, IPSR
 8009342:	60bb      	str	r3, [r7, #8]
  return(result);
 8009344:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009346:	2b00      	cmp	r3, #0
 8009348:	d10f      	bne.n	800936a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800934a:	f3ef 8310 	mrs	r3, PRIMASK
 800934e:	607b      	str	r3, [r7, #4]
  return(result);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d105      	bne.n	8009362 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009356:	f3ef 8311 	mrs	r3, BASEPRI
 800935a:	603b      	str	r3, [r7, #0]
  return(result);
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d007      	beq.n	8009372 <osKernelGetTickCount+0x3a>
 8009362:	4b08      	ldr	r3, [pc, #32]	; (8009384 <osKernelGetTickCount+0x4c>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2b02      	cmp	r3, #2
 8009368:	d103      	bne.n	8009372 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800936a:	f002 f9ef 	bl	800b74c <xTaskGetTickCountFromISR>
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	e002      	b.n	8009378 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8009372:	f002 f9db 	bl	800b72c <xTaskGetTickCount>
 8009376:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8009378:	68fb      	ldr	r3, [r7, #12]
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	20008fb8 	.word	0x20008fb8

08009388 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009388:	b580      	push	{r7, lr}
 800938a:	b090      	sub	sp, #64	; 0x40
 800938c:	af04      	add	r7, sp, #16
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009394:	2300      	movs	r3, #0
 8009396:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009398:	f3ef 8305 	mrs	r3, IPSR
 800939c:	61fb      	str	r3, [r7, #28]
  return(result);
 800939e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f040 808f 	bne.w	80094c4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093a6:	f3ef 8310 	mrs	r3, PRIMASK
 80093aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d105      	bne.n	80093be <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80093b2:	f3ef 8311 	mrs	r3, BASEPRI
 80093b6:	617b      	str	r3, [r7, #20]
  return(result);
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d003      	beq.n	80093c6 <osThreadNew+0x3e>
 80093be:	4b44      	ldr	r3, [pc, #272]	; (80094d0 <osThreadNew+0x148>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	d07e      	beq.n	80094c4 <osThreadNew+0x13c>
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d07b      	beq.n	80094c4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80093cc:	2380      	movs	r3, #128	; 0x80
 80093ce:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80093d0:	2318      	movs	r3, #24
 80093d2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80093d4:	2300      	movs	r3, #0
 80093d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80093d8:	f04f 33ff 	mov.w	r3, #4294967295
 80093dc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d045      	beq.n	8009470 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d002      	beq.n	80093f2 <osThreadNew+0x6a>
        name = attr->name;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	699b      	ldr	r3, [r3, #24]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d002      	beq.n	8009400 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	699b      	ldr	r3, [r3, #24]
 80093fe:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009402:	2b00      	cmp	r3, #0
 8009404:	d008      	beq.n	8009418 <osThreadNew+0x90>
 8009406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009408:	2b38      	cmp	r3, #56	; 0x38
 800940a:	d805      	bhi.n	8009418 <osThreadNew+0x90>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	f003 0301 	and.w	r3, r3, #1
 8009414:	2b00      	cmp	r3, #0
 8009416:	d001      	beq.n	800941c <osThreadNew+0x94>
        return (NULL);
 8009418:	2300      	movs	r3, #0
 800941a:	e054      	b.n	80094c6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	695b      	ldr	r3, [r3, #20]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d003      	beq.n	800942c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	695b      	ldr	r3, [r3, #20]
 8009428:	089b      	lsrs	r3, r3, #2
 800942a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00e      	beq.n	8009452 <osThreadNew+0xca>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	2b5b      	cmp	r3, #91	; 0x5b
 800943a:	d90a      	bls.n	8009452 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009440:	2b00      	cmp	r3, #0
 8009442:	d006      	beq.n	8009452 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	695b      	ldr	r3, [r3, #20]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d002      	beq.n	8009452 <osThreadNew+0xca>
        mem = 1;
 800944c:	2301      	movs	r3, #1
 800944e:	623b      	str	r3, [r7, #32]
 8009450:	e010      	b.n	8009474 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d10c      	bne.n	8009474 <osThreadNew+0xec>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d108      	bne.n	8009474 <osThreadNew+0xec>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d104      	bne.n	8009474 <osThreadNew+0xec>
          mem = 0;
 800946a:	2300      	movs	r3, #0
 800946c:	623b      	str	r3, [r7, #32]
 800946e:	e001      	b.n	8009474 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8009470:	2300      	movs	r3, #0
 8009472:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009474:	6a3b      	ldr	r3, [r7, #32]
 8009476:	2b01      	cmp	r3, #1
 8009478:	d110      	bne.n	800949c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009482:	9202      	str	r2, [sp, #8]
 8009484:	9301      	str	r3, [sp, #4]
 8009486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800948e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f001 fe53 	bl	800b13c <xTaskCreateStatic>
 8009496:	4603      	mov	r3, r0
 8009498:	613b      	str	r3, [r7, #16]
 800949a:	e013      	b.n	80094c4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800949c:	6a3b      	ldr	r3, [r7, #32]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d110      	bne.n	80094c4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80094a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	f107 0310 	add.w	r3, r7, #16
 80094aa:	9301      	str	r3, [sp, #4]
 80094ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f001 fea4 	bl	800b202 <xTaskCreate>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d001      	beq.n	80094c4 <osThreadNew+0x13c>
          hTask = NULL;
 80094c0:	2300      	movs	r3, #0
 80094c2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80094c4:	693b      	ldr	r3, [r7, #16]
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3730      	adds	r7, #48	; 0x30
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	20008fb8 	.word	0x20008fb8

080094d4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b086      	sub	sp, #24
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094dc:	f3ef 8305 	mrs	r3, IPSR
 80094e0:	613b      	str	r3, [r7, #16]
  return(result);
 80094e2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d10f      	bne.n	8009508 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094e8:	f3ef 8310 	mrs	r3, PRIMASK
 80094ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d105      	bne.n	8009500 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80094f4:	f3ef 8311 	mrs	r3, BASEPRI
 80094f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d007      	beq.n	8009510 <osDelay+0x3c>
 8009500:	4b0a      	ldr	r3, [pc, #40]	; (800952c <osDelay+0x58>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2b02      	cmp	r3, #2
 8009506:	d103      	bne.n	8009510 <osDelay+0x3c>
    stat = osErrorISR;
 8009508:	f06f 0305 	mvn.w	r3, #5
 800950c:	617b      	str	r3, [r7, #20]
 800950e:	e007      	b.n	8009520 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009510:	2300      	movs	r3, #0
 8009512:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d002      	beq.n	8009520 <osDelay+0x4c>
      vTaskDelay(ticks);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f001 ffb8 	bl	800b490 <vTaskDelay>
    }
  }

  return (stat);
 8009520:	697b      	ldr	r3, [r7, #20]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3718      	adds	r7, #24
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	20008fb8 	.word	0x20008fb8

08009530 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009530:	b580      	push	{r7, lr}
 8009532:	b08a      	sub	sp, #40	; 0x28
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009538:	2300      	movs	r3, #0
 800953a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800953c:	f3ef 8305 	mrs	r3, IPSR
 8009540:	613b      	str	r3, [r7, #16]
  return(result);
 8009542:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8009544:	2b00      	cmp	r3, #0
 8009546:	f040 8085 	bne.w	8009654 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800954a:	f3ef 8310 	mrs	r3, PRIMASK
 800954e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d105      	bne.n	8009562 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009556:	f3ef 8311 	mrs	r3, BASEPRI
 800955a:	60bb      	str	r3, [r7, #8]
  return(result);
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d003      	beq.n	800956a <osMutexNew+0x3a>
 8009562:	4b3f      	ldr	r3, [pc, #252]	; (8009660 <osMutexNew+0x130>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2b02      	cmp	r3, #2
 8009568:	d074      	beq.n	8009654 <osMutexNew+0x124>
    if (attr != NULL) {
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d003      	beq.n	8009578 <osMutexNew+0x48>
      type = attr->attr_bits;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	623b      	str	r3, [r7, #32]
 8009576:	e001      	b.n	800957c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8009578:	2300      	movs	r3, #0
 800957a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800957c:	6a3b      	ldr	r3, [r7, #32]
 800957e:	f003 0301 	and.w	r3, r3, #1
 8009582:	2b00      	cmp	r3, #0
 8009584:	d002      	beq.n	800958c <osMutexNew+0x5c>
      rmtx = 1U;
 8009586:	2301      	movs	r3, #1
 8009588:	61fb      	str	r3, [r7, #28]
 800958a:	e001      	b.n	8009590 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800958c:	2300      	movs	r3, #0
 800958e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009590:	6a3b      	ldr	r3, [r7, #32]
 8009592:	f003 0308 	and.w	r3, r3, #8
 8009596:	2b00      	cmp	r3, #0
 8009598:	d15c      	bne.n	8009654 <osMutexNew+0x124>
      mem = -1;
 800959a:	f04f 33ff 	mov.w	r3, #4294967295
 800959e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d015      	beq.n	80095d2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d006      	beq.n	80095bc <osMutexNew+0x8c>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	2b4f      	cmp	r3, #79	; 0x4f
 80095b4:	d902      	bls.n	80095bc <osMutexNew+0x8c>
          mem = 1;
 80095b6:	2301      	movs	r3, #1
 80095b8:	61bb      	str	r3, [r7, #24]
 80095ba:	e00c      	b.n	80095d6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d108      	bne.n	80095d6 <osMutexNew+0xa6>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d104      	bne.n	80095d6 <osMutexNew+0xa6>
            mem = 0;
 80095cc:	2300      	movs	r3, #0
 80095ce:	61bb      	str	r3, [r7, #24]
 80095d0:	e001      	b.n	80095d6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80095d2:	2300      	movs	r3, #0
 80095d4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d112      	bne.n	8009602 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d007      	beq.n	80095f2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	4619      	mov	r1, r3
 80095e8:	2004      	movs	r0, #4
 80095ea:	f000 fe1a 	bl	800a222 <xQueueCreateMutexStatic>
 80095ee:	6278      	str	r0, [r7, #36]	; 0x24
 80095f0:	e016      	b.n	8009620 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	4619      	mov	r1, r3
 80095f8:	2001      	movs	r0, #1
 80095fa:	f000 fe12 	bl	800a222 <xQueueCreateMutexStatic>
 80095fe:	6278      	str	r0, [r7, #36]	; 0x24
 8009600:	e00e      	b.n	8009620 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d10b      	bne.n	8009620 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d004      	beq.n	8009618 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800960e:	2004      	movs	r0, #4
 8009610:	f000 fdef 	bl	800a1f2 <xQueueCreateMutex>
 8009614:	6278      	str	r0, [r7, #36]	; 0x24
 8009616:	e003      	b.n	8009620 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8009618:	2001      	movs	r0, #1
 800961a:	f000 fdea 	bl	800a1f2 <xQueueCreateMutex>
 800961e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009622:	2b00      	cmp	r3, #0
 8009624:	d00c      	beq.n	8009640 <osMutexNew+0x110>
        if (attr != NULL) {
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d003      	beq.n	8009634 <osMutexNew+0x104>
          name = attr->name;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	617b      	str	r3, [r7, #20]
 8009632:	e001      	b.n	8009638 <osMutexNew+0x108>
        } else {
          name = NULL;
 8009634:	2300      	movs	r3, #0
 8009636:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8009638:	6979      	ldr	r1, [r7, #20]
 800963a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800963c:	f001 fcf6 	bl	800b02c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009642:	2b00      	cmp	r3, #0
 8009644:	d006      	beq.n	8009654 <osMutexNew+0x124>
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d003      	beq.n	8009654 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800964c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964e:	f043 0301 	orr.w	r3, r3, #1
 8009652:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009656:	4618      	mov	r0, r3
 8009658:	3728      	adds	r7, #40	; 0x28
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	20008fb8 	.word	0x20008fb8

08009664 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009664:	b580      	push	{r7, lr}
 8009666:	b088      	sub	sp, #32
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f023 0301 	bic.w	r3, r3, #1
 8009674:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f003 0301 	and.w	r3, r3, #1
 800967c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800967e:	2300      	movs	r3, #0
 8009680:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009682:	f3ef 8305 	mrs	r3, IPSR
 8009686:	613b      	str	r3, [r7, #16]
  return(result);
 8009688:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800968a:	2b00      	cmp	r3, #0
 800968c:	d10f      	bne.n	80096ae <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800968e:	f3ef 8310 	mrs	r3, PRIMASK
 8009692:	60fb      	str	r3, [r7, #12]
  return(result);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d105      	bne.n	80096a6 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800969a:	f3ef 8311 	mrs	r3, BASEPRI
 800969e:	60bb      	str	r3, [r7, #8]
  return(result);
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d007      	beq.n	80096b6 <osMutexAcquire+0x52>
 80096a6:	4b1d      	ldr	r3, [pc, #116]	; (800971c <osMutexAcquire+0xb8>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2b02      	cmp	r3, #2
 80096ac:	d103      	bne.n	80096b6 <osMutexAcquire+0x52>
    stat = osErrorISR;
 80096ae:	f06f 0305 	mvn.w	r3, #5
 80096b2:	61fb      	str	r3, [r7, #28]
 80096b4:	e02c      	b.n	8009710 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d103      	bne.n	80096c4 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80096bc:	f06f 0303 	mvn.w	r3, #3
 80096c0:	61fb      	str	r3, [r7, #28]
 80096c2:	e025      	b.n	8009710 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d011      	beq.n	80096ee <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80096ca:	6839      	ldr	r1, [r7, #0]
 80096cc:	69b8      	ldr	r0, [r7, #24]
 80096ce:	f000 fdf9 	bl	800a2c4 <xQueueTakeMutexRecursive>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d01b      	beq.n	8009710 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d003      	beq.n	80096e6 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80096de:	f06f 0301 	mvn.w	r3, #1
 80096e2:	61fb      	str	r3, [r7, #28]
 80096e4:	e014      	b.n	8009710 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80096e6:	f06f 0302 	mvn.w	r3, #2
 80096ea:	61fb      	str	r3, [r7, #28]
 80096ec:	e010      	b.n	8009710 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80096ee:	6839      	ldr	r1, [r7, #0]
 80096f0:	69b8      	ldr	r0, [r7, #24]
 80096f2:	f001 f9b3 	bl	800aa5c <xQueueSemaphoreTake>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d009      	beq.n	8009710 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d003      	beq.n	800970a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8009702:	f06f 0301 	mvn.w	r3, #1
 8009706:	61fb      	str	r3, [r7, #28]
 8009708:	e002      	b.n	8009710 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800970a:	f06f 0302 	mvn.w	r3, #2
 800970e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009710:	69fb      	ldr	r3, [r7, #28]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3720      	adds	r7, #32
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	20008fb8 	.word	0x20008fb8

08009720 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009720:	b580      	push	{r7, lr}
 8009722:	b088      	sub	sp, #32
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f023 0301 	bic.w	r3, r3, #1
 800972e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f003 0301 	and.w	r3, r3, #1
 8009736:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8009738:	2300      	movs	r3, #0
 800973a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800973c:	f3ef 8305 	mrs	r3, IPSR
 8009740:	613b      	str	r3, [r7, #16]
  return(result);
 8009742:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009744:	2b00      	cmp	r3, #0
 8009746:	d10f      	bne.n	8009768 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009748:	f3ef 8310 	mrs	r3, PRIMASK
 800974c:	60fb      	str	r3, [r7, #12]
  return(result);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d105      	bne.n	8009760 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009754:	f3ef 8311 	mrs	r3, BASEPRI
 8009758:	60bb      	str	r3, [r7, #8]
  return(result);
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d007      	beq.n	8009770 <osMutexRelease+0x50>
 8009760:	4b16      	ldr	r3, [pc, #88]	; (80097bc <osMutexRelease+0x9c>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2b02      	cmp	r3, #2
 8009766:	d103      	bne.n	8009770 <osMutexRelease+0x50>
    stat = osErrorISR;
 8009768:	f06f 0305 	mvn.w	r3, #5
 800976c:	61fb      	str	r3, [r7, #28]
 800976e:	e01f      	b.n	80097b0 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d103      	bne.n	800977e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8009776:	f06f 0303 	mvn.w	r3, #3
 800977a:	61fb      	str	r3, [r7, #28]
 800977c:	e018      	b.n	80097b0 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d009      	beq.n	8009798 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009784:	69b8      	ldr	r0, [r7, #24]
 8009786:	f000 fd67 	bl	800a258 <xQueueGiveMutexRecursive>
 800978a:	4603      	mov	r3, r0
 800978c:	2b01      	cmp	r3, #1
 800978e:	d00f      	beq.n	80097b0 <osMutexRelease+0x90>
        stat = osErrorResource;
 8009790:	f06f 0302 	mvn.w	r3, #2
 8009794:	61fb      	str	r3, [r7, #28]
 8009796:	e00b      	b.n	80097b0 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8009798:	2300      	movs	r3, #0
 800979a:	2200      	movs	r2, #0
 800979c:	2100      	movs	r1, #0
 800979e:	69b8      	ldr	r0, [r7, #24]
 80097a0:	f000 fe3a 	bl	800a418 <xQueueGenericSend>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d002      	beq.n	80097b0 <osMutexRelease+0x90>
        stat = osErrorResource;
 80097aa:	f06f 0302 	mvn.w	r3, #2
 80097ae:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80097b0:	69fb      	ldr	r3, [r7, #28]
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3720      	adds	r7, #32
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	20008fb8 	.word	0x20008fb8

080097c0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b08c      	sub	sp, #48	; 0x30
 80097c4:	af02      	add	r7, sp, #8
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80097cc:	2300      	movs	r3, #0
 80097ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097d0:	f3ef 8305 	mrs	r3, IPSR
 80097d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80097d6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80097d8:	2b00      	cmp	r3, #0
 80097da:	f040 8086 	bne.w	80098ea <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097de:	f3ef 8310 	mrs	r3, PRIMASK
 80097e2:	617b      	str	r3, [r7, #20]
  return(result);
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d105      	bne.n	80097f6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80097ea:	f3ef 8311 	mrs	r3, BASEPRI
 80097ee:	613b      	str	r3, [r7, #16]
  return(result);
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d003      	beq.n	80097fe <osSemaphoreNew+0x3e>
 80097f6:	4b3f      	ldr	r3, [pc, #252]	; (80098f4 <osSemaphoreNew+0x134>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2b02      	cmp	r3, #2
 80097fc:	d075      	beq.n	80098ea <osSemaphoreNew+0x12a>
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d072      	beq.n	80098ea <osSemaphoreNew+0x12a>
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	429a      	cmp	r2, r3
 800980a:	d86e      	bhi.n	80098ea <osSemaphoreNew+0x12a>
    mem = -1;
 800980c:	f04f 33ff 	mov.w	r3, #4294967295
 8009810:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d015      	beq.n	8009844 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d006      	beq.n	800982e <osSemaphoreNew+0x6e>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	2b4f      	cmp	r3, #79	; 0x4f
 8009826:	d902      	bls.n	800982e <osSemaphoreNew+0x6e>
        mem = 1;
 8009828:	2301      	movs	r3, #1
 800982a:	623b      	str	r3, [r7, #32]
 800982c:	e00c      	b.n	8009848 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d108      	bne.n	8009848 <osSemaphoreNew+0x88>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d104      	bne.n	8009848 <osSemaphoreNew+0x88>
          mem = 0;
 800983e:	2300      	movs	r3, #0
 8009840:	623b      	str	r3, [r7, #32]
 8009842:	e001      	b.n	8009848 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8009844:	2300      	movs	r3, #0
 8009846:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8009848:	6a3b      	ldr	r3, [r7, #32]
 800984a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800984e:	d04c      	beq.n	80098ea <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2b01      	cmp	r3, #1
 8009854:	d128      	bne.n	80098a8 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8009856:	6a3b      	ldr	r3, [r7, #32]
 8009858:	2b01      	cmp	r3, #1
 800985a:	d10a      	bne.n	8009872 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	2203      	movs	r2, #3
 8009862:	9200      	str	r2, [sp, #0]
 8009864:	2200      	movs	r2, #0
 8009866:	2100      	movs	r1, #0
 8009868:	2001      	movs	r0, #1
 800986a:	f000 fbc1 	bl	8009ff0 <xQueueGenericCreateStatic>
 800986e:	6278      	str	r0, [r7, #36]	; 0x24
 8009870:	e005      	b.n	800987e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8009872:	2203      	movs	r2, #3
 8009874:	2100      	movs	r1, #0
 8009876:	2001      	movs	r0, #1
 8009878:	f000 fc3c 	bl	800a0f4 <xQueueGenericCreate>
 800987c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800987e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009880:	2b00      	cmp	r3, #0
 8009882:	d022      	beq.n	80098ca <osSemaphoreNew+0x10a>
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d01f      	beq.n	80098ca <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800988a:	2300      	movs	r3, #0
 800988c:	2200      	movs	r2, #0
 800988e:	2100      	movs	r1, #0
 8009890:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009892:	f000 fdc1 	bl	800a418 <xQueueGenericSend>
 8009896:	4603      	mov	r3, r0
 8009898:	2b01      	cmp	r3, #1
 800989a:	d016      	beq.n	80098ca <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800989c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800989e:	f001 fa77 	bl	800ad90 <vQueueDelete>
            hSemaphore = NULL;
 80098a2:	2300      	movs	r3, #0
 80098a4:	627b      	str	r3, [r7, #36]	; 0x24
 80098a6:	e010      	b.n	80098ca <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80098a8:	6a3b      	ldr	r3, [r7, #32]
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d108      	bne.n	80098c0 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	461a      	mov	r2, r3
 80098b4:	68b9      	ldr	r1, [r7, #8]
 80098b6:	68f8      	ldr	r0, [r7, #12]
 80098b8:	f000 fd3c 	bl	800a334 <xQueueCreateCountingSemaphoreStatic>
 80098bc:	6278      	str	r0, [r7, #36]	; 0x24
 80098be:	e004      	b.n	80098ca <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80098c0:	68b9      	ldr	r1, [r7, #8]
 80098c2:	68f8      	ldr	r0, [r7, #12]
 80098c4:	f000 fd71 	bl	800a3aa <xQueueCreateCountingSemaphore>
 80098c8:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80098ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d00c      	beq.n	80098ea <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d003      	beq.n	80098de <osSemaphoreNew+0x11e>
          name = attr->name;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	61fb      	str	r3, [r7, #28]
 80098dc:	e001      	b.n	80098e2 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80098de:	2300      	movs	r3, #0
 80098e0:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80098e2:	69f9      	ldr	r1, [r7, #28]
 80098e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80098e6:	f001 fba1 	bl	800b02c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80098ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3728      	adds	r7, #40	; 0x28
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	20008fb8 	.word	0x20008fb8

080098f8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b088      	sub	sp, #32
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009906:	2300      	movs	r3, #0
 8009908:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d103      	bne.n	8009918 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009910:	f06f 0303 	mvn.w	r3, #3
 8009914:	61fb      	str	r3, [r7, #28]
 8009916:	e04b      	b.n	80099b0 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009918:	f3ef 8305 	mrs	r3, IPSR
 800991c:	617b      	str	r3, [r7, #20]
  return(result);
 800991e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8009920:	2b00      	cmp	r3, #0
 8009922:	d10f      	bne.n	8009944 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009924:	f3ef 8310 	mrs	r3, PRIMASK
 8009928:	613b      	str	r3, [r7, #16]
  return(result);
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d105      	bne.n	800993c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009930:	f3ef 8311 	mrs	r3, BASEPRI
 8009934:	60fb      	str	r3, [r7, #12]
  return(result);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d026      	beq.n	800998a <osSemaphoreAcquire+0x92>
 800993c:	4b1f      	ldr	r3, [pc, #124]	; (80099bc <osSemaphoreAcquire+0xc4>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2b02      	cmp	r3, #2
 8009942:	d122      	bne.n	800998a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d003      	beq.n	8009952 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800994a:	f06f 0303 	mvn.w	r3, #3
 800994e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8009950:	e02d      	b.n	80099ae <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8009952:	2300      	movs	r3, #0
 8009954:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009956:	f107 0308 	add.w	r3, r7, #8
 800995a:	461a      	mov	r2, r3
 800995c:	2100      	movs	r1, #0
 800995e:	69b8      	ldr	r0, [r7, #24]
 8009960:	f001 f990 	bl	800ac84 <xQueueReceiveFromISR>
 8009964:	4603      	mov	r3, r0
 8009966:	2b01      	cmp	r3, #1
 8009968:	d003      	beq.n	8009972 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800996a:	f06f 0302 	mvn.w	r3, #2
 800996e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8009970:	e01d      	b.n	80099ae <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d01a      	beq.n	80099ae <osSemaphoreAcquire+0xb6>
 8009978:	4b11      	ldr	r3, [pc, #68]	; (80099c0 <osSemaphoreAcquire+0xc8>)
 800997a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800997e:	601a      	str	r2, [r3, #0]
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8009988:	e011      	b.n	80099ae <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800998a:	6839      	ldr	r1, [r7, #0]
 800998c:	69b8      	ldr	r0, [r7, #24]
 800998e:	f001 f865 	bl	800aa5c <xQueueSemaphoreTake>
 8009992:	4603      	mov	r3, r0
 8009994:	2b01      	cmp	r3, #1
 8009996:	d00b      	beq.n	80099b0 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d003      	beq.n	80099a6 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800999e:	f06f 0301 	mvn.w	r3, #1
 80099a2:	61fb      	str	r3, [r7, #28]
 80099a4:	e004      	b.n	80099b0 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80099a6:	f06f 0302 	mvn.w	r3, #2
 80099aa:	61fb      	str	r3, [r7, #28]
 80099ac:	e000      	b.n	80099b0 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80099ae:	bf00      	nop
      }
    }
  }

  return (stat);
 80099b0:	69fb      	ldr	r3, [r7, #28]
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3720      	adds	r7, #32
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	20008fb8 	.word	0x20008fb8
 80099c0:	e000ed04 	.word	0xe000ed04

080099c4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b088      	sub	sp, #32
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80099d0:	2300      	movs	r3, #0
 80099d2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80099d4:	69bb      	ldr	r3, [r7, #24]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d103      	bne.n	80099e2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80099da:	f06f 0303 	mvn.w	r3, #3
 80099de:	61fb      	str	r3, [r7, #28]
 80099e0:	e03e      	b.n	8009a60 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099e2:	f3ef 8305 	mrs	r3, IPSR
 80099e6:	617b      	str	r3, [r7, #20]
  return(result);
 80099e8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d10f      	bne.n	8009a0e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099ee:	f3ef 8310 	mrs	r3, PRIMASK
 80099f2:	613b      	str	r3, [r7, #16]
  return(result);
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d105      	bne.n	8009a06 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80099fa:	f3ef 8311 	mrs	r3, BASEPRI
 80099fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d01e      	beq.n	8009a44 <osSemaphoreRelease+0x80>
 8009a06:	4b19      	ldr	r3, [pc, #100]	; (8009a6c <osSemaphoreRelease+0xa8>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d11a      	bne.n	8009a44 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009a12:	f107 0308 	add.w	r3, r7, #8
 8009a16:	4619      	mov	r1, r3
 8009a18:	69b8      	ldr	r0, [r7, #24]
 8009a1a:	f000 fea3 	bl	800a764 <xQueueGiveFromISR>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d003      	beq.n	8009a2c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8009a24:	f06f 0302 	mvn.w	r3, #2
 8009a28:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009a2a:	e018      	b.n	8009a5e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d015      	beq.n	8009a5e <osSemaphoreRelease+0x9a>
 8009a32:	4b0f      	ldr	r3, [pc, #60]	; (8009a70 <osSemaphoreRelease+0xac>)
 8009a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a38:	601a      	str	r2, [r3, #0]
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009a42:	e00c      	b.n	8009a5e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009a44:	2300      	movs	r3, #0
 8009a46:	2200      	movs	r2, #0
 8009a48:	2100      	movs	r1, #0
 8009a4a:	69b8      	ldr	r0, [r7, #24]
 8009a4c:	f000 fce4 	bl	800a418 <xQueueGenericSend>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d004      	beq.n	8009a60 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8009a56:	f06f 0302 	mvn.w	r3, #2
 8009a5a:	61fb      	str	r3, [r7, #28]
 8009a5c:	e000      	b.n	8009a60 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009a5e:	bf00      	nop
    }
  }

  return (stat);
 8009a60:	69fb      	ldr	r3, [r7, #28]
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3720      	adds	r7, #32
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	20008fb8 	.word	0x20008fb8
 8009a70:	e000ed04 	.word	0xe000ed04

08009a74 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b08c      	sub	sp, #48	; 0x30
 8009a78:	af02      	add	r7, sp, #8
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009a80:	2300      	movs	r3, #0
 8009a82:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a84:	f3ef 8305 	mrs	r3, IPSR
 8009a88:	61bb      	str	r3, [r7, #24]
  return(result);
 8009a8a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d16f      	bne.n	8009b70 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a90:	f3ef 8310 	mrs	r3, PRIMASK
 8009a94:	617b      	str	r3, [r7, #20]
  return(result);
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d105      	bne.n	8009aa8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009a9c:	f3ef 8311 	mrs	r3, BASEPRI
 8009aa0:	613b      	str	r3, [r7, #16]
  return(result);
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d003      	beq.n	8009ab0 <osMessageQueueNew+0x3c>
 8009aa8:	4b34      	ldr	r3, [pc, #208]	; (8009b7c <osMessageQueueNew+0x108>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	d05f      	beq.n	8009b70 <osMessageQueueNew+0xfc>
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d05c      	beq.n	8009b70 <osMessageQueueNew+0xfc>
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d059      	beq.n	8009b70 <osMessageQueueNew+0xfc>
    mem = -1;
 8009abc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ac0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d029      	beq.n	8009b1c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d012      	beq.n	8009af6 <osMessageQueueNew+0x82>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	2b4f      	cmp	r3, #79	; 0x4f
 8009ad6:	d90e      	bls.n	8009af6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00a      	beq.n	8009af6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	695a      	ldr	r2, [r3, #20]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	68b9      	ldr	r1, [r7, #8]
 8009ae8:	fb01 f303 	mul.w	r3, r1, r3
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d302      	bcc.n	8009af6 <osMessageQueueNew+0x82>
        mem = 1;
 8009af0:	2301      	movs	r3, #1
 8009af2:	623b      	str	r3, [r7, #32]
 8009af4:	e014      	b.n	8009b20 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d110      	bne.n	8009b20 <osMessageQueueNew+0xac>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d10c      	bne.n	8009b20 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d108      	bne.n	8009b20 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	695b      	ldr	r3, [r3, #20]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d104      	bne.n	8009b20 <osMessageQueueNew+0xac>
          mem = 0;
 8009b16:	2300      	movs	r3, #0
 8009b18:	623b      	str	r3, [r7, #32]
 8009b1a:	e001      	b.n	8009b20 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009b20:	6a3b      	ldr	r3, [r7, #32]
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d10b      	bne.n	8009b3e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	691a      	ldr	r2, [r3, #16]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	2100      	movs	r1, #0
 8009b30:	9100      	str	r1, [sp, #0]
 8009b32:	68b9      	ldr	r1, [r7, #8]
 8009b34:	68f8      	ldr	r0, [r7, #12]
 8009b36:	f000 fa5b 	bl	8009ff0 <xQueueGenericCreateStatic>
 8009b3a:	6278      	str	r0, [r7, #36]	; 0x24
 8009b3c:	e008      	b.n	8009b50 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8009b3e:	6a3b      	ldr	r3, [r7, #32]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d105      	bne.n	8009b50 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8009b44:	2200      	movs	r2, #0
 8009b46:	68b9      	ldr	r1, [r7, #8]
 8009b48:	68f8      	ldr	r0, [r7, #12]
 8009b4a:	f000 fad3 	bl	800a0f4 <xQueueGenericCreate>
 8009b4e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00c      	beq.n	8009b70 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d003      	beq.n	8009b64 <osMessageQueueNew+0xf0>
        name = attr->name;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	61fb      	str	r3, [r7, #28]
 8009b62:	e001      	b.n	8009b68 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8009b64:	2300      	movs	r3, #0
 8009b66:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8009b68:	69f9      	ldr	r1, [r7, #28]
 8009b6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b6c:	f001 fa5e 	bl	800b02c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3728      	adds	r7, #40	; 0x28
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	20008fb8 	.word	0x20008fb8

08009b80 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b08a      	sub	sp, #40	; 0x28
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	603b      	str	r3, [r7, #0]
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009b94:	2300      	movs	r3, #0
 8009b96:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b98:	f3ef 8305 	mrs	r3, IPSR
 8009b9c:	61fb      	str	r3, [r7, #28]
  return(result);
 8009b9e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d10f      	bne.n	8009bc4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ba4:	f3ef 8310 	mrs	r3, PRIMASK
 8009ba8:	61bb      	str	r3, [r7, #24]
  return(result);
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d105      	bne.n	8009bbc <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009bb0:	f3ef 8311 	mrs	r3, BASEPRI
 8009bb4:	617b      	str	r3, [r7, #20]
  return(result);
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d02c      	beq.n	8009c16 <osMessageQueuePut+0x96>
 8009bbc:	4b28      	ldr	r3, [pc, #160]	; (8009c60 <osMessageQueuePut+0xe0>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2b02      	cmp	r3, #2
 8009bc2:	d128      	bne.n	8009c16 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009bc4:	6a3b      	ldr	r3, [r7, #32]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d005      	beq.n	8009bd6 <osMessageQueuePut+0x56>
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d002      	beq.n	8009bd6 <osMessageQueuePut+0x56>
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d003      	beq.n	8009bde <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8009bd6:	f06f 0303 	mvn.w	r3, #3
 8009bda:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009bdc:	e039      	b.n	8009c52 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8009bde:	2300      	movs	r3, #0
 8009be0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009be2:	f107 0210 	add.w	r2, r7, #16
 8009be6:	2300      	movs	r3, #0
 8009be8:	68b9      	ldr	r1, [r7, #8]
 8009bea:	6a38      	ldr	r0, [r7, #32]
 8009bec:	f000 fd1a 	bl	800a624 <xQueueGenericSendFromISR>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d003      	beq.n	8009bfe <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8009bf6:	f06f 0302 	mvn.w	r3, #2
 8009bfa:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009bfc:	e029      	b.n	8009c52 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d026      	beq.n	8009c52 <osMessageQueuePut+0xd2>
 8009c04:	4b17      	ldr	r3, [pc, #92]	; (8009c64 <osMessageQueuePut+0xe4>)
 8009c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c0a:	601a      	str	r2, [r3, #0]
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c14:	e01d      	b.n	8009c52 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009c16:	6a3b      	ldr	r3, [r7, #32]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d002      	beq.n	8009c22 <osMessageQueuePut+0xa2>
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d103      	bne.n	8009c2a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8009c22:	f06f 0303 	mvn.w	r3, #3
 8009c26:	627b      	str	r3, [r7, #36]	; 0x24
 8009c28:	e014      	b.n	8009c54 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	683a      	ldr	r2, [r7, #0]
 8009c2e:	68b9      	ldr	r1, [r7, #8]
 8009c30:	6a38      	ldr	r0, [r7, #32]
 8009c32:	f000 fbf1 	bl	800a418 <xQueueGenericSend>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d00b      	beq.n	8009c54 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d003      	beq.n	8009c4a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8009c42:	f06f 0301 	mvn.w	r3, #1
 8009c46:	627b      	str	r3, [r7, #36]	; 0x24
 8009c48:	e004      	b.n	8009c54 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8009c4a:	f06f 0302 	mvn.w	r3, #2
 8009c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8009c50:	e000      	b.n	8009c54 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c52:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3728      	adds	r7, #40	; 0x28
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	20008fb8 	.word	0x20008fb8
 8009c64:	e000ed04 	.word	0xe000ed04

08009c68 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b08a      	sub	sp, #40	; 0x28
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	607a      	str	r2, [r7, #4]
 8009c74:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c7e:	f3ef 8305 	mrs	r3, IPSR
 8009c82:	61fb      	str	r3, [r7, #28]
  return(result);
 8009c84:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d10f      	bne.n	8009caa <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8009c8e:	61bb      	str	r3, [r7, #24]
  return(result);
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d105      	bne.n	8009ca2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009c96:	f3ef 8311 	mrs	r3, BASEPRI
 8009c9a:	617b      	str	r3, [r7, #20]
  return(result);
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d02c      	beq.n	8009cfc <osMessageQueueGet+0x94>
 8009ca2:	4b28      	ldr	r3, [pc, #160]	; (8009d44 <osMessageQueueGet+0xdc>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d128      	bne.n	8009cfc <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009caa:	6a3b      	ldr	r3, [r7, #32]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d005      	beq.n	8009cbc <osMessageQueueGet+0x54>
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d002      	beq.n	8009cbc <osMessageQueueGet+0x54>
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d003      	beq.n	8009cc4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8009cbc:	f06f 0303 	mvn.w	r3, #3
 8009cc0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009cc2:	e038      	b.n	8009d36 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009cc8:	f107 0310 	add.w	r3, r7, #16
 8009ccc:	461a      	mov	r2, r3
 8009cce:	68b9      	ldr	r1, [r7, #8]
 8009cd0:	6a38      	ldr	r0, [r7, #32]
 8009cd2:	f000 ffd7 	bl	800ac84 <xQueueReceiveFromISR>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d003      	beq.n	8009ce4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8009cdc:	f06f 0302 	mvn.w	r3, #2
 8009ce0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009ce2:	e028      	b.n	8009d36 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d025      	beq.n	8009d36 <osMessageQueueGet+0xce>
 8009cea:	4b17      	ldr	r3, [pc, #92]	; (8009d48 <osMessageQueueGet+0xe0>)
 8009cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cf0:	601a      	str	r2, [r3, #0]
 8009cf2:	f3bf 8f4f 	dsb	sy
 8009cf6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009cfa:	e01c      	b.n	8009d36 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009cfc:	6a3b      	ldr	r3, [r7, #32]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d002      	beq.n	8009d08 <osMessageQueueGet+0xa0>
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d103      	bne.n	8009d10 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8009d08:	f06f 0303 	mvn.w	r3, #3
 8009d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8009d0e:	e013      	b.n	8009d38 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009d10:	683a      	ldr	r2, [r7, #0]
 8009d12:	68b9      	ldr	r1, [r7, #8]
 8009d14:	6a38      	ldr	r0, [r7, #32]
 8009d16:	f000 fdbb 	bl	800a890 <xQueueReceive>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d00b      	beq.n	8009d38 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d003      	beq.n	8009d2e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8009d26:	f06f 0301 	mvn.w	r3, #1
 8009d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8009d2c:	e004      	b.n	8009d38 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8009d2e:	f06f 0302 	mvn.w	r3, #2
 8009d32:	627b      	str	r3, [r7, #36]	; 0x24
 8009d34:	e000      	b.n	8009d38 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009d36:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3728      	adds	r7, #40	; 0x28
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	20008fb8 	.word	0x20008fb8
 8009d48:	e000ed04 	.word	0xe000ed04

08009d4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009d4c:	b480      	push	{r7}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	4a07      	ldr	r2, [pc, #28]	; (8009d78 <vApplicationGetIdleTaskMemory+0x2c>)
 8009d5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	4a06      	ldr	r2, [pc, #24]	; (8009d7c <vApplicationGetIdleTaskMemory+0x30>)
 8009d62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2280      	movs	r2, #128	; 0x80
 8009d68:	601a      	str	r2, [r3, #0]
}
 8009d6a:	bf00      	nop
 8009d6c:	3714      	adds	r7, #20
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	20008fbc 	.word	0x20008fbc
 8009d7c:	20009018 	.word	0x20009018

08009d80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009d80:	b480      	push	{r7}
 8009d82:	b085      	sub	sp, #20
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	4a07      	ldr	r2, [pc, #28]	; (8009dac <vApplicationGetTimerTaskMemory+0x2c>)
 8009d90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	4a06      	ldr	r2, [pc, #24]	; (8009db0 <vApplicationGetTimerTaskMemory+0x30>)
 8009d96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d9e:	601a      	str	r2, [r3, #0]
}
 8009da0:	bf00      	nop
 8009da2:	3714      	adds	r7, #20
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr
 8009dac:	20009218 	.word	0x20009218
 8009db0:	20009274 	.word	0x20009274

08009db4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f103 0208 	add.w	r2, r3, #8
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8009dcc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f103 0208 	add.w	r2, r3, #8
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f103 0208 	add.w	r2, r3, #8
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009de8:	bf00      	nop
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e02:	bf00      	nop
 8009e04:	370c      	adds	r7, #12
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr

08009e0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e0e:	b480      	push	{r7}
 8009e10:	b085      	sub	sp, #20
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	689a      	ldr	r2, [r3, #8]
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	683a      	ldr	r2, [r7, #0]
 8009e32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	683a      	ldr	r2, [r7, #0]
 8009e38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	1c5a      	adds	r2, r3, #1
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	601a      	str	r2, [r3, #0]
}
 8009e4a:	bf00      	nop
 8009e4c:	3714      	adds	r7, #20
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e54:	4770      	bx	lr

08009e56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e56:	b480      	push	{r7}
 8009e58:	b085      	sub	sp, #20
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
 8009e5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e6c:	d103      	bne.n	8009e76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	691b      	ldr	r3, [r3, #16]
 8009e72:	60fb      	str	r3, [r7, #12]
 8009e74:	e00c      	b.n	8009e90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	3308      	adds	r3, #8
 8009e7a:	60fb      	str	r3, [r7, #12]
 8009e7c:	e002      	b.n	8009e84 <vListInsert+0x2e>
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	60fb      	str	r3, [r7, #12]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68ba      	ldr	r2, [r7, #8]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d2f6      	bcs.n	8009e7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	685a      	ldr	r2, [r3, #4]
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	683a      	ldr	r2, [r7, #0]
 8009e9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	68fa      	ldr	r2, [r7, #12]
 8009ea4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	683a      	ldr	r2, [r7, #0]
 8009eaa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	1c5a      	adds	r2, r3, #1
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	601a      	str	r2, [r3, #0]
}
 8009ebc:	bf00      	nop
 8009ebe:	3714      	adds	r7, #20
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	691b      	ldr	r3, [r3, #16]
 8009ed4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	6892      	ldr	r2, [r2, #8]
 8009ede:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	6852      	ldr	r2, [r2, #4]
 8009ee8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d103      	bne.n	8009efc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	689a      	ldr	r2, [r3, #8]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	1e5a      	subs	r2, r3, #1
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3714      	adds	r7, #20
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d10c      	bne.n	8009f4a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f34:	b672      	cpsid	i
 8009f36:	f383 8811 	msr	BASEPRI, r3
 8009f3a:	f3bf 8f6f 	isb	sy
 8009f3e:	f3bf 8f4f 	dsb	sy
 8009f42:	b662      	cpsie	i
 8009f44:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009f46:	bf00      	nop
 8009f48:	e7fe      	b.n	8009f48 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8009f4a:	f002 fda7 	bl	800ca9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f56:	68f9      	ldr	r1, [r7, #12]
 8009f58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f5a:	fb01 f303 	mul.w	r3, r1, r3
 8009f5e:	441a      	add	r2, r3
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2200      	movs	r2, #0
 8009f68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	68f9      	ldr	r1, [r7, #12]
 8009f7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f80:	fb01 f303 	mul.w	r3, r1, r3
 8009f84:	441a      	add	r2, r3
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	22ff      	movs	r2, #255	; 0xff
 8009f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	22ff      	movs	r2, #255	; 0xff
 8009f96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d114      	bne.n	8009fca <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	691b      	ldr	r3, [r3, #16]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d01a      	beq.n	8009fde <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	3310      	adds	r3, #16
 8009fac:	4618      	mov	r0, r3
 8009fae:	f001 fd4f 	bl	800ba50 <xTaskRemoveFromEventList>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d012      	beq.n	8009fde <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009fb8:	4b0c      	ldr	r3, [pc, #48]	; (8009fec <xQueueGenericReset+0xd0>)
 8009fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fbe:	601a      	str	r2, [r3, #0]
 8009fc0:	f3bf 8f4f 	dsb	sy
 8009fc4:	f3bf 8f6f 	isb	sy
 8009fc8:	e009      	b.n	8009fde <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	3310      	adds	r3, #16
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7ff fef0 	bl	8009db4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	3324      	adds	r3, #36	; 0x24
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7ff feeb 	bl	8009db4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009fde:	f002 fd91 	bl	800cb04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009fe2:	2301      	movs	r3, #1
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3710      	adds	r7, #16
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	e000ed04 	.word	0xe000ed04

08009ff0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b08e      	sub	sp, #56	; 0x38
 8009ff4:	af02      	add	r7, sp, #8
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
 8009ffc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d10c      	bne.n	800a01e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800a004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a008:	b672      	cpsid	i
 800a00a:	f383 8811 	msr	BASEPRI, r3
 800a00e:	f3bf 8f6f 	isb	sy
 800a012:	f3bf 8f4f 	dsb	sy
 800a016:	b662      	cpsie	i
 800a018:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a01a:	bf00      	nop
 800a01c:	e7fe      	b.n	800a01c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d10c      	bne.n	800a03e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800a024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a028:	b672      	cpsid	i
 800a02a:	f383 8811 	msr	BASEPRI, r3
 800a02e:	f3bf 8f6f 	isb	sy
 800a032:	f3bf 8f4f 	dsb	sy
 800a036:	b662      	cpsie	i
 800a038:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a03a:	bf00      	nop
 800a03c:	e7fe      	b.n	800a03c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d002      	beq.n	800a04a <xQueueGenericCreateStatic+0x5a>
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d001      	beq.n	800a04e <xQueueGenericCreateStatic+0x5e>
 800a04a:	2301      	movs	r3, #1
 800a04c:	e000      	b.n	800a050 <xQueueGenericCreateStatic+0x60>
 800a04e:	2300      	movs	r3, #0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d10c      	bne.n	800a06e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800a054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a058:	b672      	cpsid	i
 800a05a:	f383 8811 	msr	BASEPRI, r3
 800a05e:	f3bf 8f6f 	isb	sy
 800a062:	f3bf 8f4f 	dsb	sy
 800a066:	b662      	cpsie	i
 800a068:	623b      	str	r3, [r7, #32]
}
 800a06a:	bf00      	nop
 800a06c:	e7fe      	b.n	800a06c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d102      	bne.n	800a07a <xQueueGenericCreateStatic+0x8a>
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d101      	bne.n	800a07e <xQueueGenericCreateStatic+0x8e>
 800a07a:	2301      	movs	r3, #1
 800a07c:	e000      	b.n	800a080 <xQueueGenericCreateStatic+0x90>
 800a07e:	2300      	movs	r3, #0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d10c      	bne.n	800a09e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800a084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a088:	b672      	cpsid	i
 800a08a:	f383 8811 	msr	BASEPRI, r3
 800a08e:	f3bf 8f6f 	isb	sy
 800a092:	f3bf 8f4f 	dsb	sy
 800a096:	b662      	cpsie	i
 800a098:	61fb      	str	r3, [r7, #28]
}
 800a09a:	bf00      	nop
 800a09c:	e7fe      	b.n	800a09c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a09e:	2350      	movs	r3, #80	; 0x50
 800a0a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	2b50      	cmp	r3, #80	; 0x50
 800a0a6:	d00c      	beq.n	800a0c2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800a0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ac:	b672      	cpsid	i
 800a0ae:	f383 8811 	msr	BASEPRI, r3
 800a0b2:	f3bf 8f6f 	isb	sy
 800a0b6:	f3bf 8f4f 	dsb	sy
 800a0ba:	b662      	cpsie	i
 800a0bc:	61bb      	str	r3, [r7, #24]
}
 800a0be:	bf00      	nop
 800a0c0:	e7fe      	b.n	800a0c0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a0c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d00d      	beq.n	800a0ea <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a0d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0dc:	9300      	str	r3, [sp, #0]
 800a0de:	4613      	mov	r3, r2
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	68b9      	ldr	r1, [r7, #8]
 800a0e4:	68f8      	ldr	r0, [r7, #12]
 800a0e6:	f000 f847 	bl	800a178 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3730      	adds	r7, #48	; 0x30
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b08a      	sub	sp, #40	; 0x28
 800a0f8:	af02      	add	r7, sp, #8
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	4613      	mov	r3, r2
 800a100:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d10c      	bne.n	800a122 <xQueueGenericCreate+0x2e>
	__asm volatile
 800a108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10c:	b672      	cpsid	i
 800a10e:	f383 8811 	msr	BASEPRI, r3
 800a112:	f3bf 8f6f 	isb	sy
 800a116:	f3bf 8f4f 	dsb	sy
 800a11a:	b662      	cpsie	i
 800a11c:	613b      	str	r3, [r7, #16]
}
 800a11e:	bf00      	nop
 800a120:	e7fe      	b.n	800a120 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d102      	bne.n	800a12e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a128:	2300      	movs	r3, #0
 800a12a:	61fb      	str	r3, [r7, #28]
 800a12c:	e004      	b.n	800a138 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	68ba      	ldr	r2, [r7, #8]
 800a132:	fb02 f303 	mul.w	r3, r2, r3
 800a136:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a138:	69fb      	ldr	r3, [r7, #28]
 800a13a:	3350      	adds	r3, #80	; 0x50
 800a13c:	4618      	mov	r0, r3
 800a13e:	f002 fdd9 	bl	800ccf4 <pvPortMalloc>
 800a142:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d011      	beq.n	800a16e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	3350      	adds	r3, #80	; 0x50
 800a152:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	2200      	movs	r2, #0
 800a158:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a15c:	79fa      	ldrb	r2, [r7, #7]
 800a15e:	69bb      	ldr	r3, [r7, #24]
 800a160:	9300      	str	r3, [sp, #0]
 800a162:	4613      	mov	r3, r2
 800a164:	697a      	ldr	r2, [r7, #20]
 800a166:	68b9      	ldr	r1, [r7, #8]
 800a168:	68f8      	ldr	r0, [r7, #12]
 800a16a:	f000 f805 	bl	800a178 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a16e:	69bb      	ldr	r3, [r7, #24]
	}
 800a170:	4618      	mov	r0, r3
 800a172:	3720      	adds	r7, #32
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	607a      	str	r2, [r7, #4]
 800a184:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d103      	bne.n	800a194 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	69ba      	ldr	r2, [r7, #24]
 800a190:	601a      	str	r2, [r3, #0]
 800a192:	e002      	b.n	800a19a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a194:	69bb      	ldr	r3, [r7, #24]
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	68fa      	ldr	r2, [r7, #12]
 800a19e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	68ba      	ldr	r2, [r7, #8]
 800a1a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a1a6:	2101      	movs	r1, #1
 800a1a8:	69b8      	ldr	r0, [r7, #24]
 800a1aa:	f7ff feb7 	bl	8009f1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	78fa      	ldrb	r2, [r7, #3]
 800a1b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a1b6:	bf00      	nop
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b082      	sub	sp, #8
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d00e      	beq.n	800a1ea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a1de:	2300      	movs	r3, #0
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 f917 	bl	800a418 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a1ea:	bf00      	nop
 800a1ec:	3708      	adds	r7, #8
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b086      	sub	sp, #24
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	617b      	str	r3, [r7, #20]
 800a200:	2300      	movs	r3, #0
 800a202:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a204:	79fb      	ldrb	r3, [r7, #7]
 800a206:	461a      	mov	r2, r3
 800a208:	6939      	ldr	r1, [r7, #16]
 800a20a:	6978      	ldr	r0, [r7, #20]
 800a20c:	f7ff ff72 	bl	800a0f4 <xQueueGenericCreate>
 800a210:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f7ff ffd3 	bl	800a1be <prvInitialiseMutex>

		return xNewQueue;
 800a218:	68fb      	ldr	r3, [r7, #12]
	}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3718      	adds	r7, #24
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a222:	b580      	push	{r7, lr}
 800a224:	b088      	sub	sp, #32
 800a226:	af02      	add	r7, sp, #8
 800a228:	4603      	mov	r3, r0
 800a22a:	6039      	str	r1, [r7, #0]
 800a22c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a22e:	2301      	movs	r3, #1
 800a230:	617b      	str	r3, [r7, #20]
 800a232:	2300      	movs	r3, #0
 800a234:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a236:	79fb      	ldrb	r3, [r7, #7]
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	2200      	movs	r2, #0
 800a23e:	6939      	ldr	r1, [r7, #16]
 800a240:	6978      	ldr	r0, [r7, #20]
 800a242:	f7ff fed5 	bl	8009ff0 <xQueueGenericCreateStatic>
 800a246:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f7ff ffb8 	bl	800a1be <prvInitialiseMutex>

		return xNewQueue;
 800a24e:	68fb      	ldr	r3, [r7, #12]
	}
 800a250:	4618      	mov	r0, r3
 800a252:	3718      	adds	r7, #24
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a258:	b590      	push	{r4, r7, lr}
 800a25a:	b087      	sub	sp, #28
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10c      	bne.n	800a284 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 800a26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26e:	b672      	cpsid	i
 800a270:	f383 8811 	msr	BASEPRI, r3
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	f3bf 8f4f 	dsb	sy
 800a27c:	b662      	cpsie	i
 800a27e:	60fb      	str	r3, [r7, #12]
}
 800a280:	bf00      	nop
 800a282:	e7fe      	b.n	800a282 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	689c      	ldr	r4, [r3, #8]
 800a288:	f001 fda8 	bl	800bddc <xTaskGetCurrentTaskHandle>
 800a28c:	4603      	mov	r3, r0
 800a28e:	429c      	cmp	r4, r3
 800a290:	d111      	bne.n	800a2b6 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	1e5a      	subs	r2, r3, #1
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d105      	bne.n	800a2b0 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	2100      	movs	r1, #0
 800a2aa:	6938      	ldr	r0, [r7, #16]
 800a2ac:	f000 f8b4 	bl	800a418 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	617b      	str	r3, [r7, #20]
 800a2b4:	e001      	b.n	800a2ba <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a2ba:	697b      	ldr	r3, [r7, #20]
	}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	371c      	adds	r7, #28
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd90      	pop	{r4, r7, pc}

0800a2c4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a2c4:	b590      	push	{r4, r7, lr}
 800a2c6:	b087      	sub	sp, #28
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d10c      	bne.n	800a2f2 <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 800a2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2dc:	b672      	cpsid	i
 800a2de:	f383 8811 	msr	BASEPRI, r3
 800a2e2:	f3bf 8f6f 	isb	sy
 800a2e6:	f3bf 8f4f 	dsb	sy
 800a2ea:	b662      	cpsie	i
 800a2ec:	60fb      	str	r3, [r7, #12]
}
 800a2ee:	bf00      	nop
 800a2f0:	e7fe      	b.n	800a2f0 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	689c      	ldr	r4, [r3, #8]
 800a2f6:	f001 fd71 	bl	800bddc <xTaskGetCurrentTaskHandle>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	429c      	cmp	r4, r3
 800a2fe:	d107      	bne.n	800a310 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	1c5a      	adds	r2, r3, #1
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a30a:	2301      	movs	r3, #1
 800a30c:	617b      	str	r3, [r7, #20]
 800a30e:	e00c      	b.n	800a32a <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a310:	6839      	ldr	r1, [r7, #0]
 800a312:	6938      	ldr	r0, [r7, #16]
 800a314:	f000 fba2 	bl	800aa5c <xQueueSemaphoreTake>
 800a318:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d004      	beq.n	800a32a <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	1c5a      	adds	r2, r3, #1
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a32a:	697b      	ldr	r3, [r7, #20]
	}
 800a32c:	4618      	mov	r0, r3
 800a32e:	371c      	adds	r7, #28
 800a330:	46bd      	mov	sp, r7
 800a332:	bd90      	pop	{r4, r7, pc}

0800a334 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a334:	b580      	push	{r7, lr}
 800a336:	b08a      	sub	sp, #40	; 0x28
 800a338:	af02      	add	r7, sp, #8
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d10c      	bne.n	800a360 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800a346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34a:	b672      	cpsid	i
 800a34c:	f383 8811 	msr	BASEPRI, r3
 800a350:	f3bf 8f6f 	isb	sy
 800a354:	f3bf 8f4f 	dsb	sy
 800a358:	b662      	cpsie	i
 800a35a:	61bb      	str	r3, [r7, #24]
}
 800a35c:	bf00      	nop
 800a35e:	e7fe      	b.n	800a35e <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a360:	68ba      	ldr	r2, [r7, #8]
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	429a      	cmp	r2, r3
 800a366:	d90c      	bls.n	800a382 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800a368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36c:	b672      	cpsid	i
 800a36e:	f383 8811 	msr	BASEPRI, r3
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	f3bf 8f4f 	dsb	sy
 800a37a:	b662      	cpsie	i
 800a37c:	617b      	str	r3, [r7, #20]
}
 800a37e:	bf00      	nop
 800a380:	e7fe      	b.n	800a380 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a382:	2302      	movs	r3, #2
 800a384:	9300      	str	r3, [sp, #0]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	2100      	movs	r1, #0
 800a38c:	68f8      	ldr	r0, [r7, #12]
 800a38e:	f7ff fe2f 	bl	8009ff0 <xQueueGenericCreateStatic>
 800a392:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d002      	beq.n	800a3a0 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	68ba      	ldr	r2, [r7, #8]
 800a39e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a3a0:	69fb      	ldr	r3, [r7, #28]
	}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3720      	adds	r7, #32
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b086      	sub	sp, #24
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
 800a3b2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d10c      	bne.n	800a3d4 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800a3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3be:	b672      	cpsid	i
 800a3c0:	f383 8811 	msr	BASEPRI, r3
 800a3c4:	f3bf 8f6f 	isb	sy
 800a3c8:	f3bf 8f4f 	dsb	sy
 800a3cc:	b662      	cpsie	i
 800a3ce:	613b      	str	r3, [r7, #16]
}
 800a3d0:	bf00      	nop
 800a3d2:	e7fe      	b.n	800a3d2 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a3d4:	683a      	ldr	r2, [r7, #0]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d90c      	bls.n	800a3f6 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800a3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e0:	b672      	cpsid	i
 800a3e2:	f383 8811 	msr	BASEPRI, r3
 800a3e6:	f3bf 8f6f 	isb	sy
 800a3ea:	f3bf 8f4f 	dsb	sy
 800a3ee:	b662      	cpsie	i
 800a3f0:	60fb      	str	r3, [r7, #12]
}
 800a3f2:	bf00      	nop
 800a3f4:	e7fe      	b.n	800a3f4 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a3f6:	2202      	movs	r2, #2
 800a3f8:	2100      	movs	r1, #0
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f7ff fe7a 	bl	800a0f4 <xQueueGenericCreate>
 800a400:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d002      	beq.n	800a40e <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	683a      	ldr	r2, [r7, #0]
 800a40c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a40e:	697b      	ldr	r3, [r7, #20]
	}
 800a410:	4618      	mov	r0, r3
 800a412:	3718      	adds	r7, #24
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b08e      	sub	sp, #56	; 0x38
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	607a      	str	r2, [r7, #4]
 800a424:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a426:	2300      	movs	r3, #0
 800a428:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10c      	bne.n	800a44e <xQueueGenericSend+0x36>
	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a438:	b672      	cpsid	i
 800a43a:	f383 8811 	msr	BASEPRI, r3
 800a43e:	f3bf 8f6f 	isb	sy
 800a442:	f3bf 8f4f 	dsb	sy
 800a446:	b662      	cpsie	i
 800a448:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a44a:	bf00      	nop
 800a44c:	e7fe      	b.n	800a44c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d103      	bne.n	800a45c <xQueueGenericSend+0x44>
 800a454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d101      	bne.n	800a460 <xQueueGenericSend+0x48>
 800a45c:	2301      	movs	r3, #1
 800a45e:	e000      	b.n	800a462 <xQueueGenericSend+0x4a>
 800a460:	2300      	movs	r3, #0
 800a462:	2b00      	cmp	r3, #0
 800a464:	d10c      	bne.n	800a480 <xQueueGenericSend+0x68>
	__asm volatile
 800a466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46a:	b672      	cpsid	i
 800a46c:	f383 8811 	msr	BASEPRI, r3
 800a470:	f3bf 8f6f 	isb	sy
 800a474:	f3bf 8f4f 	dsb	sy
 800a478:	b662      	cpsie	i
 800a47a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a47c:	bf00      	nop
 800a47e:	e7fe      	b.n	800a47e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	2b02      	cmp	r3, #2
 800a484:	d103      	bne.n	800a48e <xQueueGenericSend+0x76>
 800a486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d101      	bne.n	800a492 <xQueueGenericSend+0x7a>
 800a48e:	2301      	movs	r3, #1
 800a490:	e000      	b.n	800a494 <xQueueGenericSend+0x7c>
 800a492:	2300      	movs	r3, #0
 800a494:	2b00      	cmp	r3, #0
 800a496:	d10c      	bne.n	800a4b2 <xQueueGenericSend+0x9a>
	__asm volatile
 800a498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49c:	b672      	cpsid	i
 800a49e:	f383 8811 	msr	BASEPRI, r3
 800a4a2:	f3bf 8f6f 	isb	sy
 800a4a6:	f3bf 8f4f 	dsb	sy
 800a4aa:	b662      	cpsie	i
 800a4ac:	623b      	str	r3, [r7, #32]
}
 800a4ae:	bf00      	nop
 800a4b0:	e7fe      	b.n	800a4b0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4b2:	f001 fca3 	bl	800bdfc <xTaskGetSchedulerState>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d102      	bne.n	800a4c2 <xQueueGenericSend+0xaa>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d101      	bne.n	800a4c6 <xQueueGenericSend+0xae>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e000      	b.n	800a4c8 <xQueueGenericSend+0xb0>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d10c      	bne.n	800a4e6 <xQueueGenericSend+0xce>
	__asm volatile
 800a4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d0:	b672      	cpsid	i
 800a4d2:	f383 8811 	msr	BASEPRI, r3
 800a4d6:	f3bf 8f6f 	isb	sy
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	b662      	cpsie	i
 800a4e0:	61fb      	str	r3, [r7, #28]
}
 800a4e2:	bf00      	nop
 800a4e4:	e7fe      	b.n	800a4e4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4e6:	f002 fad9 	bl	800ca9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d302      	bcc.n	800a4fc <xQueueGenericSend+0xe4>
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	2b02      	cmp	r3, #2
 800a4fa:	d129      	bne.n	800a550 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a4fc:	683a      	ldr	r2, [r7, #0]
 800a4fe:	68b9      	ldr	r1, [r7, #8]
 800a500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a502:	f000 fc82 	bl	800ae0a <prvCopyDataToQueue>
 800a506:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d010      	beq.n	800a532 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a512:	3324      	adds	r3, #36	; 0x24
 800a514:	4618      	mov	r0, r3
 800a516:	f001 fa9b 	bl	800ba50 <xTaskRemoveFromEventList>
 800a51a:	4603      	mov	r3, r0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d013      	beq.n	800a548 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a520:	4b3f      	ldr	r3, [pc, #252]	; (800a620 <xQueueGenericSend+0x208>)
 800a522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a526:	601a      	str	r2, [r3, #0]
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	e00a      	b.n	800a548 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a534:	2b00      	cmp	r3, #0
 800a536:	d007      	beq.n	800a548 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a538:	4b39      	ldr	r3, [pc, #228]	; (800a620 <xQueueGenericSend+0x208>)
 800a53a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a53e:	601a      	str	r2, [r3, #0]
 800a540:	f3bf 8f4f 	dsb	sy
 800a544:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a548:	f002 fadc 	bl	800cb04 <vPortExitCritical>
				return pdPASS;
 800a54c:	2301      	movs	r3, #1
 800a54e:	e063      	b.n	800a618 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d103      	bne.n	800a55e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a556:	f002 fad5 	bl	800cb04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a55a:	2300      	movs	r3, #0
 800a55c:	e05c      	b.n	800a618 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a55e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a560:	2b00      	cmp	r3, #0
 800a562:	d106      	bne.n	800a572 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a564:	f107 0314 	add.w	r3, r7, #20
 800a568:	4618      	mov	r0, r3
 800a56a:	f001 fad7 	bl	800bb1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a56e:	2301      	movs	r3, #1
 800a570:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a572:	f002 fac7 	bl	800cb04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a576:	f001 f82b 	bl	800b5d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a57a:	f002 fa8f 	bl	800ca9c <vPortEnterCritical>
 800a57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a580:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a584:	b25b      	sxtb	r3, r3
 800a586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a58a:	d103      	bne.n	800a594 <xQueueGenericSend+0x17c>
 800a58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58e:	2200      	movs	r2, #0
 800a590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a596:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a59a:	b25b      	sxtb	r3, r3
 800a59c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a0:	d103      	bne.n	800a5aa <xQueueGenericSend+0x192>
 800a5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5aa:	f002 faab 	bl	800cb04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5ae:	1d3a      	adds	r2, r7, #4
 800a5b0:	f107 0314 	add.w	r3, r7, #20
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f001 fac6 	bl	800bb48 <xTaskCheckForTimeOut>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d124      	bne.n	800a60c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a5c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5c4:	f000 fd19 	bl	800affa <prvIsQueueFull>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d018      	beq.n	800a600 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d0:	3310      	adds	r3, #16
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f001 f9e6 	bl	800b9a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a5dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5de:	f000 fca4 	bl	800af2a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a5e2:	f001 f803 	bl	800b5ec <xTaskResumeAll>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f47f af7c 	bne.w	800a4e6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800a5ee:	4b0c      	ldr	r3, [pc, #48]	; (800a620 <xQueueGenericSend+0x208>)
 800a5f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5f4:	601a      	str	r2, [r3, #0]
 800a5f6:	f3bf 8f4f 	dsb	sy
 800a5fa:	f3bf 8f6f 	isb	sy
 800a5fe:	e772      	b.n	800a4e6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a600:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a602:	f000 fc92 	bl	800af2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a606:	f000 fff1 	bl	800b5ec <xTaskResumeAll>
 800a60a:	e76c      	b.n	800a4e6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a60c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a60e:	f000 fc8c 	bl	800af2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a612:	f000 ffeb 	bl	800b5ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a616:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3738      	adds	r7, #56	; 0x38
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	e000ed04 	.word	0xe000ed04

0800a624 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b08e      	sub	sp, #56	; 0x38
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	607a      	str	r2, [r7, #4]
 800a630:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d10c      	bne.n	800a656 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800a63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a640:	b672      	cpsid	i
 800a642:	f383 8811 	msr	BASEPRI, r3
 800a646:	f3bf 8f6f 	isb	sy
 800a64a:	f3bf 8f4f 	dsb	sy
 800a64e:	b662      	cpsie	i
 800a650:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a652:	bf00      	nop
 800a654:	e7fe      	b.n	800a654 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d103      	bne.n	800a664 <xQueueGenericSendFromISR+0x40>
 800a65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a660:	2b00      	cmp	r3, #0
 800a662:	d101      	bne.n	800a668 <xQueueGenericSendFromISR+0x44>
 800a664:	2301      	movs	r3, #1
 800a666:	e000      	b.n	800a66a <xQueueGenericSendFromISR+0x46>
 800a668:	2300      	movs	r3, #0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d10c      	bne.n	800a688 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800a66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a672:	b672      	cpsid	i
 800a674:	f383 8811 	msr	BASEPRI, r3
 800a678:	f3bf 8f6f 	isb	sy
 800a67c:	f3bf 8f4f 	dsb	sy
 800a680:	b662      	cpsie	i
 800a682:	623b      	str	r3, [r7, #32]
}
 800a684:	bf00      	nop
 800a686:	e7fe      	b.n	800a686 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	2b02      	cmp	r3, #2
 800a68c:	d103      	bne.n	800a696 <xQueueGenericSendFromISR+0x72>
 800a68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a692:	2b01      	cmp	r3, #1
 800a694:	d101      	bne.n	800a69a <xQueueGenericSendFromISR+0x76>
 800a696:	2301      	movs	r3, #1
 800a698:	e000      	b.n	800a69c <xQueueGenericSendFromISR+0x78>
 800a69a:	2300      	movs	r3, #0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d10c      	bne.n	800a6ba <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800a6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a4:	b672      	cpsid	i
 800a6a6:	f383 8811 	msr	BASEPRI, r3
 800a6aa:	f3bf 8f6f 	isb	sy
 800a6ae:	f3bf 8f4f 	dsb	sy
 800a6b2:	b662      	cpsie	i
 800a6b4:	61fb      	str	r3, [r7, #28]
}
 800a6b6:	bf00      	nop
 800a6b8:	e7fe      	b.n	800a6b8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a6ba:	f002 fad7 	bl	800cc6c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a6be:	f3ef 8211 	mrs	r2, BASEPRI
 800a6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c6:	b672      	cpsid	i
 800a6c8:	f383 8811 	msr	BASEPRI, r3
 800a6cc:	f3bf 8f6f 	isb	sy
 800a6d0:	f3bf 8f4f 	dsb	sy
 800a6d4:	b662      	cpsie	i
 800a6d6:	61ba      	str	r2, [r7, #24]
 800a6d8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a6da:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a6dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d302      	bcc.n	800a6f0 <xQueueGenericSendFromISR+0xcc>
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	2b02      	cmp	r3, #2
 800a6ee:	d12c      	bne.n	800a74a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	68b9      	ldr	r1, [r7, #8]
 800a6fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a700:	f000 fb83 	bl	800ae0a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a704:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a70c:	d112      	bne.n	800a734 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a712:	2b00      	cmp	r3, #0
 800a714:	d016      	beq.n	800a744 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a718:	3324      	adds	r3, #36	; 0x24
 800a71a:	4618      	mov	r0, r3
 800a71c:	f001 f998 	bl	800ba50 <xTaskRemoveFromEventList>
 800a720:	4603      	mov	r3, r0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d00e      	beq.n	800a744 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d00b      	beq.n	800a744 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2201      	movs	r2, #1
 800a730:	601a      	str	r2, [r3, #0]
 800a732:	e007      	b.n	800a744 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a734:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a738:	3301      	adds	r3, #1
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	b25a      	sxtb	r2, r3
 800a73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a744:	2301      	movs	r3, #1
 800a746:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a748:	e001      	b.n	800a74e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a74a:	2300      	movs	r3, #0
 800a74c:	637b      	str	r3, [r7, #52]	; 0x34
 800a74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a750:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a758:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a75a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3738      	adds	r7, #56	; 0x38
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b08e      	sub	sp, #56	; 0x38
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a774:	2b00      	cmp	r3, #0
 800a776:	d10c      	bne.n	800a792 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800a778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77c:	b672      	cpsid	i
 800a77e:	f383 8811 	msr	BASEPRI, r3
 800a782:	f3bf 8f6f 	isb	sy
 800a786:	f3bf 8f4f 	dsb	sy
 800a78a:	b662      	cpsie	i
 800a78c:	623b      	str	r3, [r7, #32]
}
 800a78e:	bf00      	nop
 800a790:	e7fe      	b.n	800a790 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00c      	beq.n	800a7b4 <xQueueGiveFromISR+0x50>
	__asm volatile
 800a79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79e:	b672      	cpsid	i
 800a7a0:	f383 8811 	msr	BASEPRI, r3
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	b662      	cpsie	i
 800a7ae:	61fb      	str	r3, [r7, #28]
}
 800a7b0:	bf00      	nop
 800a7b2:	e7fe      	b.n	800a7b2 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d103      	bne.n	800a7c4 <xQueueGiveFromISR+0x60>
 800a7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7be:	689b      	ldr	r3, [r3, #8]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d101      	bne.n	800a7c8 <xQueueGiveFromISR+0x64>
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	e000      	b.n	800a7ca <xQueueGiveFromISR+0x66>
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d10c      	bne.n	800a7e8 <xQueueGiveFromISR+0x84>
	__asm volatile
 800a7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d2:	b672      	cpsid	i
 800a7d4:	f383 8811 	msr	BASEPRI, r3
 800a7d8:	f3bf 8f6f 	isb	sy
 800a7dc:	f3bf 8f4f 	dsb	sy
 800a7e0:	b662      	cpsie	i
 800a7e2:	61bb      	str	r3, [r7, #24]
}
 800a7e4:	bf00      	nop
 800a7e6:	e7fe      	b.n	800a7e6 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7e8:	f002 fa40 	bl	800cc6c <vPortValidateInterruptPriority>
	__asm volatile
 800a7ec:	f3ef 8211 	mrs	r2, BASEPRI
 800a7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f4:	b672      	cpsid	i
 800a7f6:	f383 8811 	msr	BASEPRI, r3
 800a7fa:	f3bf 8f6f 	isb	sy
 800a7fe:	f3bf 8f4f 	dsb	sy
 800a802:	b662      	cpsie	i
 800a804:	617a      	str	r2, [r7, #20]
 800a806:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a808:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a80a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a810:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a818:	429a      	cmp	r2, r3
 800a81a:	d22b      	bcs.n	800a874 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a828:	1c5a      	adds	r2, r3, #1
 800a82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a82e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a832:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a836:	d112      	bne.n	800a85e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d016      	beq.n	800a86e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a842:	3324      	adds	r3, #36	; 0x24
 800a844:	4618      	mov	r0, r3
 800a846:	f001 f903 	bl	800ba50 <xTaskRemoveFromEventList>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00e      	beq.n	800a86e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00b      	beq.n	800a86e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	2201      	movs	r2, #1
 800a85a:	601a      	str	r2, [r3, #0]
 800a85c:	e007      	b.n	800a86e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a85e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a862:	3301      	adds	r3, #1
 800a864:	b2db      	uxtb	r3, r3
 800a866:	b25a      	sxtb	r2, r3
 800a868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a86e:	2301      	movs	r3, #1
 800a870:	637b      	str	r3, [r7, #52]	; 0x34
 800a872:	e001      	b.n	800a878 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a874:	2300      	movs	r3, #0
 800a876:	637b      	str	r3, [r7, #52]	; 0x34
 800a878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a87a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f383 8811 	msr	BASEPRI, r3
}
 800a882:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a886:	4618      	mov	r0, r3
 800a888:	3738      	adds	r7, #56	; 0x38
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
	...

0800a890 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b08c      	sub	sp, #48	; 0x30
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	60b9      	str	r1, [r7, #8]
 800a89a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a89c:	2300      	movs	r3, #0
 800a89e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d10c      	bne.n	800a8c4 <xQueueReceive+0x34>
	__asm volatile
 800a8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ae:	b672      	cpsid	i
 800a8b0:	f383 8811 	msr	BASEPRI, r3
 800a8b4:	f3bf 8f6f 	isb	sy
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	b662      	cpsie	i
 800a8be:	623b      	str	r3, [r7, #32]
}
 800a8c0:	bf00      	nop
 800a8c2:	e7fe      	b.n	800a8c2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d103      	bne.n	800a8d2 <xQueueReceive+0x42>
 800a8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d101      	bne.n	800a8d6 <xQueueReceive+0x46>
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e000      	b.n	800a8d8 <xQueueReceive+0x48>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d10c      	bne.n	800a8f6 <xQueueReceive+0x66>
	__asm volatile
 800a8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e0:	b672      	cpsid	i
 800a8e2:	f383 8811 	msr	BASEPRI, r3
 800a8e6:	f3bf 8f6f 	isb	sy
 800a8ea:	f3bf 8f4f 	dsb	sy
 800a8ee:	b662      	cpsie	i
 800a8f0:	61fb      	str	r3, [r7, #28]
}
 800a8f2:	bf00      	nop
 800a8f4:	e7fe      	b.n	800a8f4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8f6:	f001 fa81 	bl	800bdfc <xTaskGetSchedulerState>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d102      	bne.n	800a906 <xQueueReceive+0x76>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d101      	bne.n	800a90a <xQueueReceive+0x7a>
 800a906:	2301      	movs	r3, #1
 800a908:	e000      	b.n	800a90c <xQueueReceive+0x7c>
 800a90a:	2300      	movs	r3, #0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d10c      	bne.n	800a92a <xQueueReceive+0x9a>
	__asm volatile
 800a910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a914:	b672      	cpsid	i
 800a916:	f383 8811 	msr	BASEPRI, r3
 800a91a:	f3bf 8f6f 	isb	sy
 800a91e:	f3bf 8f4f 	dsb	sy
 800a922:	b662      	cpsie	i
 800a924:	61bb      	str	r3, [r7, #24]
}
 800a926:	bf00      	nop
 800a928:	e7fe      	b.n	800a928 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a92a:	f002 f8b7 	bl	800ca9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a932:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a936:	2b00      	cmp	r3, #0
 800a938:	d01f      	beq.n	800a97a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a93a:	68b9      	ldr	r1, [r7, #8]
 800a93c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a93e:	f000 face 	bl	800aede <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a944:	1e5a      	subs	r2, r3, #1
 800a946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a948:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00f      	beq.n	800a972 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a954:	3310      	adds	r3, #16
 800a956:	4618      	mov	r0, r3
 800a958:	f001 f87a 	bl	800ba50 <xTaskRemoveFromEventList>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d007      	beq.n	800a972 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a962:	4b3d      	ldr	r3, [pc, #244]	; (800aa58 <xQueueReceive+0x1c8>)
 800a964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a968:	601a      	str	r2, [r3, #0]
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a972:	f002 f8c7 	bl	800cb04 <vPortExitCritical>
				return pdPASS;
 800a976:	2301      	movs	r3, #1
 800a978:	e069      	b.n	800aa4e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d103      	bne.n	800a988 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a980:	f002 f8c0 	bl	800cb04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a984:	2300      	movs	r3, #0
 800a986:	e062      	b.n	800aa4e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d106      	bne.n	800a99c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a98e:	f107 0310 	add.w	r3, r7, #16
 800a992:	4618      	mov	r0, r3
 800a994:	f001 f8c2 	bl	800bb1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a998:	2301      	movs	r3, #1
 800a99a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a99c:	f002 f8b2 	bl	800cb04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9a0:	f000 fe16 	bl	800b5d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9a4:	f002 f87a 	bl	800ca9c <vPortEnterCritical>
 800a9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9ae:	b25b      	sxtb	r3, r3
 800a9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b4:	d103      	bne.n	800a9be <xQueueReceive+0x12e>
 800a9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9c4:	b25b      	sxtb	r3, r3
 800a9c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ca:	d103      	bne.n	800a9d4 <xQueueReceive+0x144>
 800a9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9d4:	f002 f896 	bl	800cb04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9d8:	1d3a      	adds	r2, r7, #4
 800a9da:	f107 0310 	add.w	r3, r7, #16
 800a9de:	4611      	mov	r1, r2
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f001 f8b1 	bl	800bb48 <xTaskCheckForTimeOut>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d123      	bne.n	800aa34 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9ee:	f000 faee 	bl	800afce <prvIsQueueEmpty>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d017      	beq.n	800aa28 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fa:	3324      	adds	r3, #36	; 0x24
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	4611      	mov	r1, r2
 800aa00:	4618      	mov	r0, r3
 800aa02:	f000 ffd1 	bl	800b9a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa08:	f000 fa8f 	bl	800af2a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa0c:	f000 fdee 	bl	800b5ec <xTaskResumeAll>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d189      	bne.n	800a92a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800aa16:	4b10      	ldr	r3, [pc, #64]	; (800aa58 <xQueueReceive+0x1c8>)
 800aa18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa1c:	601a      	str	r2, [r3, #0]
 800aa1e:	f3bf 8f4f 	dsb	sy
 800aa22:	f3bf 8f6f 	isb	sy
 800aa26:	e780      	b.n	800a92a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aa28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa2a:	f000 fa7e 	bl	800af2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa2e:	f000 fddd 	bl	800b5ec <xTaskResumeAll>
 800aa32:	e77a      	b.n	800a92a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aa34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa36:	f000 fa78 	bl	800af2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa3a:	f000 fdd7 	bl	800b5ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa40:	f000 fac5 	bl	800afce <prvIsQueueEmpty>
 800aa44:	4603      	mov	r3, r0
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	f43f af6f 	beq.w	800a92a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3730      	adds	r7, #48	; 0x30
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	e000ed04 	.word	0xe000ed04

0800aa5c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b08e      	sub	sp, #56	; 0x38
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa66:	2300      	movs	r3, #0
 800aa68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d10c      	bne.n	800aa92 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800aa78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7c:	b672      	cpsid	i
 800aa7e:	f383 8811 	msr	BASEPRI, r3
 800aa82:	f3bf 8f6f 	isb	sy
 800aa86:	f3bf 8f4f 	dsb	sy
 800aa8a:	b662      	cpsie	i
 800aa8c:	623b      	str	r3, [r7, #32]
}
 800aa8e:	bf00      	nop
 800aa90:	e7fe      	b.n	800aa90 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800aa92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00c      	beq.n	800aab4 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800aa9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9e:	b672      	cpsid	i
 800aaa0:	f383 8811 	msr	BASEPRI, r3
 800aaa4:	f3bf 8f6f 	isb	sy
 800aaa8:	f3bf 8f4f 	dsb	sy
 800aaac:	b662      	cpsie	i
 800aaae:	61fb      	str	r3, [r7, #28]
}
 800aab0:	bf00      	nop
 800aab2:	e7fe      	b.n	800aab2 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aab4:	f001 f9a2 	bl	800bdfc <xTaskGetSchedulerState>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d102      	bne.n	800aac4 <xQueueSemaphoreTake+0x68>
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d101      	bne.n	800aac8 <xQueueSemaphoreTake+0x6c>
 800aac4:	2301      	movs	r3, #1
 800aac6:	e000      	b.n	800aaca <xQueueSemaphoreTake+0x6e>
 800aac8:	2300      	movs	r3, #0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d10c      	bne.n	800aae8 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800aace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad2:	b672      	cpsid	i
 800aad4:	f383 8811 	msr	BASEPRI, r3
 800aad8:	f3bf 8f6f 	isb	sy
 800aadc:	f3bf 8f4f 	dsb	sy
 800aae0:	b662      	cpsie	i
 800aae2:	61bb      	str	r3, [r7, #24]
}
 800aae4:	bf00      	nop
 800aae6:	e7fe      	b.n	800aae6 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aae8:	f001 ffd8 	bl	800ca9c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800aaec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800aaf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d024      	beq.n	800ab42 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800aaf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafa:	1e5a      	subs	r2, r3, #1
 800aafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d104      	bne.n	800ab12 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ab08:	f001 faf6 	bl	800c0f8 <pvTaskIncrementMutexHeldCount>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab10:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab14:	691b      	ldr	r3, [r3, #16]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d00f      	beq.n	800ab3a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1c:	3310      	adds	r3, #16
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f000 ff96 	bl	800ba50 <xTaskRemoveFromEventList>
 800ab24:	4603      	mov	r3, r0
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d007      	beq.n	800ab3a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab2a:	4b55      	ldr	r3, [pc, #340]	; (800ac80 <xQueueSemaphoreTake+0x224>)
 800ab2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab30:	601a      	str	r2, [r3, #0]
 800ab32:	f3bf 8f4f 	dsb	sy
 800ab36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab3a:	f001 ffe3 	bl	800cb04 <vPortExitCritical>
				return pdPASS;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e099      	b.n	800ac76 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d113      	bne.n	800ab70 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ab48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d00c      	beq.n	800ab68 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800ab4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab52:	b672      	cpsid	i
 800ab54:	f383 8811 	msr	BASEPRI, r3
 800ab58:	f3bf 8f6f 	isb	sy
 800ab5c:	f3bf 8f4f 	dsb	sy
 800ab60:	b662      	cpsie	i
 800ab62:	617b      	str	r3, [r7, #20]
}
 800ab64:	bf00      	nop
 800ab66:	e7fe      	b.n	800ab66 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ab68:	f001 ffcc 	bl	800cb04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	e082      	b.n	800ac76 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d106      	bne.n	800ab84 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab76:	f107 030c 	add.w	r3, r7, #12
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f000 ffce 	bl	800bb1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab80:	2301      	movs	r3, #1
 800ab82:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab84:	f001 ffbe 	bl	800cb04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab88:	f000 fd22 	bl	800b5d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab8c:	f001 ff86 	bl	800ca9c <vPortEnterCritical>
 800ab90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab96:	b25b      	sxtb	r3, r3
 800ab98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab9c:	d103      	bne.n	800aba6 <xQueueSemaphoreTake+0x14a>
 800ab9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba0:	2200      	movs	r2, #0
 800aba2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abac:	b25b      	sxtb	r3, r3
 800abae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb2:	d103      	bne.n	800abbc <xQueueSemaphoreTake+0x160>
 800abb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb6:	2200      	movs	r2, #0
 800abb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abbc:	f001 ffa2 	bl	800cb04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abc0:	463a      	mov	r2, r7
 800abc2:	f107 030c 	add.w	r3, r7, #12
 800abc6:	4611      	mov	r1, r2
 800abc8:	4618      	mov	r0, r3
 800abca:	f000 ffbd 	bl	800bb48 <xTaskCheckForTimeOut>
 800abce:	4603      	mov	r3, r0
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d132      	bne.n	800ac3a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800abd6:	f000 f9fa 	bl	800afce <prvIsQueueEmpty>
 800abda:	4603      	mov	r3, r0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d026      	beq.n	800ac2e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800abe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d109      	bne.n	800abfc <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800abe8:	f001 ff58 	bl	800ca9c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800abec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abee:	689b      	ldr	r3, [r3, #8]
 800abf0:	4618      	mov	r0, r3
 800abf2:	f001 f921 	bl	800be38 <xTaskPriorityInherit>
 800abf6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800abf8:	f001 ff84 	bl	800cb04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800abfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abfe:	3324      	adds	r3, #36	; 0x24
 800ac00:	683a      	ldr	r2, [r7, #0]
 800ac02:	4611      	mov	r1, r2
 800ac04:	4618      	mov	r0, r3
 800ac06:	f000 fecf 	bl	800b9a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ac0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac0c:	f000 f98d 	bl	800af2a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ac10:	f000 fcec 	bl	800b5ec <xTaskResumeAll>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f47f af66 	bne.w	800aae8 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800ac1c:	4b18      	ldr	r3, [pc, #96]	; (800ac80 <xQueueSemaphoreTake+0x224>)
 800ac1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac22:	601a      	str	r2, [r3, #0]
 800ac24:	f3bf 8f4f 	dsb	sy
 800ac28:	f3bf 8f6f 	isb	sy
 800ac2c:	e75c      	b.n	800aae8 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ac2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac30:	f000 f97b 	bl	800af2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac34:	f000 fcda 	bl	800b5ec <xTaskResumeAll>
 800ac38:	e756      	b.n	800aae8 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ac3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac3c:	f000 f975 	bl	800af2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac40:	f000 fcd4 	bl	800b5ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac46:	f000 f9c2 	bl	800afce <prvIsQueueEmpty>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	f43f af4b 	beq.w	800aae8 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ac52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d00d      	beq.n	800ac74 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800ac58:	f001 ff20 	bl	800ca9c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ac5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac5e:	f000 f8bc 	bl	800adda <prvGetDisinheritPriorityAfterTimeout>
 800ac62:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ac64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac66:	689b      	ldr	r3, [r3, #8]
 800ac68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f001 f9be 	bl	800bfec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ac70:	f001 ff48 	bl	800cb04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3738      	adds	r7, #56	; 0x38
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	e000ed04 	.word	0xe000ed04

0800ac84 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b08e      	sub	sp, #56	; 0x38
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ac94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d10c      	bne.n	800acb4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800ac9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9e:	b672      	cpsid	i
 800aca0:	f383 8811 	msr	BASEPRI, r3
 800aca4:	f3bf 8f6f 	isb	sy
 800aca8:	f3bf 8f4f 	dsb	sy
 800acac:	b662      	cpsie	i
 800acae:	623b      	str	r3, [r7, #32]
}
 800acb0:	bf00      	nop
 800acb2:	e7fe      	b.n	800acb2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d103      	bne.n	800acc2 <xQueueReceiveFromISR+0x3e>
 800acba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d101      	bne.n	800acc6 <xQueueReceiveFromISR+0x42>
 800acc2:	2301      	movs	r3, #1
 800acc4:	e000      	b.n	800acc8 <xQueueReceiveFromISR+0x44>
 800acc6:	2300      	movs	r3, #0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10c      	bne.n	800ace6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800accc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd0:	b672      	cpsid	i
 800acd2:	f383 8811 	msr	BASEPRI, r3
 800acd6:	f3bf 8f6f 	isb	sy
 800acda:	f3bf 8f4f 	dsb	sy
 800acde:	b662      	cpsie	i
 800ace0:	61fb      	str	r3, [r7, #28]
}
 800ace2:	bf00      	nop
 800ace4:	e7fe      	b.n	800ace4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ace6:	f001 ffc1 	bl	800cc6c <vPortValidateInterruptPriority>
	__asm volatile
 800acea:	f3ef 8211 	mrs	r2, BASEPRI
 800acee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf2:	b672      	cpsid	i
 800acf4:	f383 8811 	msr	BASEPRI, r3
 800acf8:	f3bf 8f6f 	isb	sy
 800acfc:	f3bf 8f4f 	dsb	sy
 800ad00:	b662      	cpsie	i
 800ad02:	61ba      	str	r2, [r7, #24]
 800ad04:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ad06:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ad08:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad0e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d02f      	beq.n	800ad76 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ad16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad20:	68b9      	ldr	r1, [r7, #8]
 800ad22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad24:	f000 f8db 	bl	800aede <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2a:	1e5a      	subs	r2, r3, #1
 800ad2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ad30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad38:	d112      	bne.n	800ad60 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3c:	691b      	ldr	r3, [r3, #16]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d016      	beq.n	800ad70 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad44:	3310      	adds	r3, #16
 800ad46:	4618      	mov	r0, r3
 800ad48:	f000 fe82 	bl	800ba50 <xTaskRemoveFromEventList>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00e      	beq.n	800ad70 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00b      	beq.n	800ad70 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	601a      	str	r2, [r3, #0]
 800ad5e:	e007      	b.n	800ad70 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ad60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad64:	3301      	adds	r3, #1
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	b25a      	sxtb	r2, r3
 800ad6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ad70:	2301      	movs	r3, #1
 800ad72:	637b      	str	r3, [r7, #52]	; 0x34
 800ad74:	e001      	b.n	800ad7a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800ad76:	2300      	movs	r3, #0
 800ad78:	637b      	str	r3, [r7, #52]	; 0x34
 800ad7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad7c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	f383 8811 	msr	BASEPRI, r3
}
 800ad84:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ad86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3738      	adds	r7, #56	; 0x38
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d10c      	bne.n	800adbc <vQueueDelete+0x2c>
	__asm volatile
 800ada2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada6:	b672      	cpsid	i
 800ada8:	f383 8811 	msr	BASEPRI, r3
 800adac:	f3bf 8f6f 	isb	sy
 800adb0:	f3bf 8f4f 	dsb	sy
 800adb4:	b662      	cpsie	i
 800adb6:	60bb      	str	r3, [r7, #8]
}
 800adb8:	bf00      	nop
 800adba:	e7fe      	b.n	800adba <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800adbc:	68f8      	ldr	r0, [r7, #12]
 800adbe:	f000 f95f 	bl	800b080 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d102      	bne.n	800add2 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800adcc:	68f8      	ldr	r0, [r7, #12]
 800adce:	f002 f85b 	bl	800ce88 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800add2:	bf00      	nop
 800add4:	3710      	adds	r7, #16
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}

0800adda <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800adda:	b480      	push	{r7}
 800addc:	b085      	sub	sp, #20
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d006      	beq.n	800adf8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800adf4:	60fb      	str	r3, [r7, #12]
 800adf6:	e001      	b.n	800adfc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800adf8:	2300      	movs	r3, #0
 800adfa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800adfc:	68fb      	ldr	r3, [r7, #12]
	}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3714      	adds	r7, #20
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr

0800ae0a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b086      	sub	sp, #24
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	60f8      	str	r0, [r7, #12]
 800ae12:	60b9      	str	r1, [r7, #8]
 800ae14:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ae16:	2300      	movs	r3, #0
 800ae18:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae1e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d10d      	bne.n	800ae44 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d14d      	bne.n	800aecc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	4618      	mov	r0, r3
 800ae36:	f001 f867 	bl	800bf08 <xTaskPriorityDisinherit>
 800ae3a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	609a      	str	r2, [r3, #8]
 800ae42:	e043      	b.n	800aecc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d119      	bne.n	800ae7e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	6858      	ldr	r0, [r3, #4]
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae52:	461a      	mov	r2, r3
 800ae54:	68b9      	ldr	r1, [r7, #8]
 800ae56:	f00c f9db 	bl	8017210 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	685a      	ldr	r2, [r3, #4]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae62:	441a      	add	r2, r3
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	685a      	ldr	r2, [r3, #4]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d32b      	bcc.n	800aecc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	605a      	str	r2, [r3, #4]
 800ae7c:	e026      	b.n	800aecc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	68d8      	ldr	r0, [r3, #12]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae86:	461a      	mov	r2, r3
 800ae88:	68b9      	ldr	r1, [r7, #8]
 800ae8a:	f00c f9c1 	bl	8017210 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	68da      	ldr	r2, [r3, #12]
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae96:	425b      	negs	r3, r3
 800ae98:	441a      	add	r2, r3
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	68da      	ldr	r2, [r3, #12]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d207      	bcs.n	800aeba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	689a      	ldr	r2, [r3, #8]
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb2:	425b      	negs	r3, r3
 800aeb4:	441a      	add	r2, r3
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2b02      	cmp	r3, #2
 800aebe:	d105      	bne.n	800aecc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d002      	beq.n	800aecc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	3b01      	subs	r3, #1
 800aeca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	1c5a      	adds	r2, r3, #1
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aed4:	697b      	ldr	r3, [r7, #20]
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3718      	adds	r7, #24
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b082      	sub	sp, #8
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
 800aee6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d018      	beq.n	800af22 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	68da      	ldr	r2, [r3, #12]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef8:	441a      	add	r2, r3
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	68da      	ldr	r2, [r3, #12]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	689b      	ldr	r3, [r3, #8]
 800af06:	429a      	cmp	r2, r3
 800af08:	d303      	bcc.n	800af12 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	68d9      	ldr	r1, [r3, #12]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af1a:	461a      	mov	r2, r3
 800af1c:	6838      	ldr	r0, [r7, #0]
 800af1e:	f00c f977 	bl	8017210 <memcpy>
	}
}
 800af22:	bf00      	nop
 800af24:	3708      	adds	r7, #8
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}

0800af2a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800af2a:	b580      	push	{r7, lr}
 800af2c:	b084      	sub	sp, #16
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af32:	f001 fdb3 	bl	800ca9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af3c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af3e:	e011      	b.n	800af64 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af44:	2b00      	cmp	r3, #0
 800af46:	d012      	beq.n	800af6e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	3324      	adds	r3, #36	; 0x24
 800af4c:	4618      	mov	r0, r3
 800af4e:	f000 fd7f 	bl	800ba50 <xTaskRemoveFromEventList>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d001      	beq.n	800af5c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800af58:	f000 fe5c 	bl	800bc14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800af5c:	7bfb      	ldrb	r3, [r7, #15]
 800af5e:	3b01      	subs	r3, #1
 800af60:	b2db      	uxtb	r3, r3
 800af62:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	dce9      	bgt.n	800af40 <prvUnlockQueue+0x16>
 800af6c:	e000      	b.n	800af70 <prvUnlockQueue+0x46>
					break;
 800af6e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	22ff      	movs	r2, #255	; 0xff
 800af74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800af78:	f001 fdc4 	bl	800cb04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800af7c:	f001 fd8e 	bl	800ca9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af86:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af88:	e011      	b.n	800afae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	691b      	ldr	r3, [r3, #16]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d012      	beq.n	800afb8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	3310      	adds	r3, #16
 800af96:	4618      	mov	r0, r3
 800af98:	f000 fd5a 	bl	800ba50 <xTaskRemoveFromEventList>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d001      	beq.n	800afa6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800afa2:	f000 fe37 	bl	800bc14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800afa6:	7bbb      	ldrb	r3, [r7, #14]
 800afa8:	3b01      	subs	r3, #1
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	dce9      	bgt.n	800af8a <prvUnlockQueue+0x60>
 800afb6:	e000      	b.n	800afba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800afb8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	22ff      	movs	r2, #255	; 0xff
 800afbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800afc2:	f001 fd9f 	bl	800cb04 <vPortExitCritical>
}
 800afc6:	bf00      	nop
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800afce:	b580      	push	{r7, lr}
 800afd0:	b084      	sub	sp, #16
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800afd6:	f001 fd61 	bl	800ca9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d102      	bne.n	800afe8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800afe2:	2301      	movs	r3, #1
 800afe4:	60fb      	str	r3, [r7, #12]
 800afe6:	e001      	b.n	800afec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800afe8:	2300      	movs	r3, #0
 800afea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800afec:	f001 fd8a 	bl	800cb04 <vPortExitCritical>

	return xReturn;
 800aff0:	68fb      	ldr	r3, [r7, #12]
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3710      	adds	r7, #16
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}

0800affa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b084      	sub	sp, #16
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b002:	f001 fd4b 	bl	800ca9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b00e:	429a      	cmp	r2, r3
 800b010:	d102      	bne.n	800b018 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b012:	2301      	movs	r3, #1
 800b014:	60fb      	str	r3, [r7, #12]
 800b016:	e001      	b.n	800b01c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b018:	2300      	movs	r3, #0
 800b01a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b01c:	f001 fd72 	bl	800cb04 <vPortExitCritical>

	return xReturn;
 800b020:	68fb      	ldr	r3, [r7, #12]
}
 800b022:	4618      	mov	r0, r3
 800b024:	3710      	adds	r7, #16
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
	...

0800b02c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b02c:	b480      	push	{r7}
 800b02e:	b085      	sub	sp, #20
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b036:	2300      	movs	r3, #0
 800b038:	60fb      	str	r3, [r7, #12]
 800b03a:	e014      	b.n	800b066 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b03c:	4a0f      	ldr	r2, [pc, #60]	; (800b07c <vQueueAddToRegistry+0x50>)
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d10b      	bne.n	800b060 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b048:	490c      	ldr	r1, [pc, #48]	; (800b07c <vQueueAddToRegistry+0x50>)
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	683a      	ldr	r2, [r7, #0]
 800b04e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b052:	4a0a      	ldr	r2, [pc, #40]	; (800b07c <vQueueAddToRegistry+0x50>)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	00db      	lsls	r3, r3, #3
 800b058:	4413      	add	r3, r2
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b05e:	e006      	b.n	800b06e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	3301      	adds	r3, #1
 800b064:	60fb      	str	r3, [r7, #12]
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	2b07      	cmp	r3, #7
 800b06a:	d9e7      	bls.n	800b03c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b06c:	bf00      	nop
 800b06e:	bf00      	nop
 800b070:	3714      	adds	r7, #20
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr
 800b07a:	bf00      	nop
 800b07c:	20009674 	.word	0x20009674

0800b080 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b080:	b480      	push	{r7}
 800b082:	b085      	sub	sp, #20
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b088:	2300      	movs	r3, #0
 800b08a:	60fb      	str	r3, [r7, #12]
 800b08c:	e016      	b.n	800b0bc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b08e:	4a10      	ldr	r2, [pc, #64]	; (800b0d0 <vQueueUnregisterQueue+0x50>)
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	00db      	lsls	r3, r3, #3
 800b094:	4413      	add	r3, r2
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d10b      	bne.n	800b0b6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b09e:	4a0c      	ldr	r2, [pc, #48]	; (800b0d0 <vQueueUnregisterQueue+0x50>)
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2100      	movs	r1, #0
 800b0a4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b0a8:	4a09      	ldr	r2, [pc, #36]	; (800b0d0 <vQueueUnregisterQueue+0x50>)
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	00db      	lsls	r3, r3, #3
 800b0ae:	4413      	add	r3, r2
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	605a      	str	r2, [r3, #4]
				break;
 800b0b4:	e006      	b.n	800b0c4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	60fb      	str	r3, [r7, #12]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2b07      	cmp	r3, #7
 800b0c0:	d9e5      	bls.n	800b08e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b0c2:	bf00      	nop
 800b0c4:	bf00      	nop
 800b0c6:	3714      	adds	r7, #20
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr
 800b0d0:	20009674 	.word	0x20009674

0800b0d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b086      	sub	sp, #24
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b0e4:	f001 fcda 	bl	800ca9c <vPortEnterCritical>
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0ee:	b25b      	sxtb	r3, r3
 800b0f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f4:	d103      	bne.n	800b0fe <vQueueWaitForMessageRestricted+0x2a>
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b104:	b25b      	sxtb	r3, r3
 800b106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b10a:	d103      	bne.n	800b114 <vQueueWaitForMessageRestricted+0x40>
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	2200      	movs	r2, #0
 800b110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b114:	f001 fcf6 	bl	800cb04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d106      	bne.n	800b12e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	3324      	adds	r3, #36	; 0x24
 800b124:	687a      	ldr	r2, [r7, #4]
 800b126:	68b9      	ldr	r1, [r7, #8]
 800b128:	4618      	mov	r0, r3
 800b12a:	f000 fc63 	bl	800b9f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b12e:	6978      	ldr	r0, [r7, #20]
 800b130:	f7ff fefb 	bl	800af2a <prvUnlockQueue>
	}
 800b134:	bf00      	nop
 800b136:	3718      	adds	r7, #24
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b08e      	sub	sp, #56	; 0x38
 800b140:	af04      	add	r7, sp, #16
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	607a      	str	r2, [r7, #4]
 800b148:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d10c      	bne.n	800b16a <xTaskCreateStatic+0x2e>
	__asm volatile
 800b150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b154:	b672      	cpsid	i
 800b156:	f383 8811 	msr	BASEPRI, r3
 800b15a:	f3bf 8f6f 	isb	sy
 800b15e:	f3bf 8f4f 	dsb	sy
 800b162:	b662      	cpsie	i
 800b164:	623b      	str	r3, [r7, #32]
}
 800b166:	bf00      	nop
 800b168:	e7fe      	b.n	800b168 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d10c      	bne.n	800b18a <xTaskCreateStatic+0x4e>
	__asm volatile
 800b170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b174:	b672      	cpsid	i
 800b176:	f383 8811 	msr	BASEPRI, r3
 800b17a:	f3bf 8f6f 	isb	sy
 800b17e:	f3bf 8f4f 	dsb	sy
 800b182:	b662      	cpsie	i
 800b184:	61fb      	str	r3, [r7, #28]
}
 800b186:	bf00      	nop
 800b188:	e7fe      	b.n	800b188 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b18a:	235c      	movs	r3, #92	; 0x5c
 800b18c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	2b5c      	cmp	r3, #92	; 0x5c
 800b192:	d00c      	beq.n	800b1ae <xTaskCreateStatic+0x72>
	__asm volatile
 800b194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b198:	b672      	cpsid	i
 800b19a:	f383 8811 	msr	BASEPRI, r3
 800b19e:	f3bf 8f6f 	isb	sy
 800b1a2:	f3bf 8f4f 	dsb	sy
 800b1a6:	b662      	cpsie	i
 800b1a8:	61bb      	str	r3, [r7, #24]
}
 800b1aa:	bf00      	nop
 800b1ac:	e7fe      	b.n	800b1ac <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b1ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d01e      	beq.n	800b1f4 <xTaskCreateStatic+0xb8>
 800b1b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d01b      	beq.n	800b1f4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c8:	2202      	movs	r2, #2
 800b1ca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	9303      	str	r3, [sp, #12]
 800b1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d4:	9302      	str	r3, [sp, #8]
 800b1d6:	f107 0314 	add.w	r3, r7, #20
 800b1da:	9301      	str	r3, [sp, #4]
 800b1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1de:	9300      	str	r3, [sp, #0]
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	68b9      	ldr	r1, [r7, #8]
 800b1e6:	68f8      	ldr	r0, [r7, #12]
 800b1e8:	f000 f850 	bl	800b28c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1ee:	f000 f8df 	bl	800b3b0 <prvAddNewTaskToReadyList>
 800b1f2:	e001      	b.n	800b1f8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b1f8:	697b      	ldr	r3, [r7, #20]
	}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3728      	adds	r7, #40	; 0x28
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b202:	b580      	push	{r7, lr}
 800b204:	b08c      	sub	sp, #48	; 0x30
 800b206:	af04      	add	r7, sp, #16
 800b208:	60f8      	str	r0, [r7, #12]
 800b20a:	60b9      	str	r1, [r7, #8]
 800b20c:	603b      	str	r3, [r7, #0]
 800b20e:	4613      	mov	r3, r2
 800b210:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b212:	88fb      	ldrh	r3, [r7, #6]
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	4618      	mov	r0, r3
 800b218:	f001 fd6c 	bl	800ccf4 <pvPortMalloc>
 800b21c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d00e      	beq.n	800b242 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b224:	205c      	movs	r0, #92	; 0x5c
 800b226:	f001 fd65 	bl	800ccf4 <pvPortMalloc>
 800b22a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b22c:	69fb      	ldr	r3, [r7, #28]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d003      	beq.n	800b23a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	697a      	ldr	r2, [r7, #20]
 800b236:	631a      	str	r2, [r3, #48]	; 0x30
 800b238:	e005      	b.n	800b246 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b23a:	6978      	ldr	r0, [r7, #20]
 800b23c:	f001 fe24 	bl	800ce88 <vPortFree>
 800b240:	e001      	b.n	800b246 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b242:	2300      	movs	r3, #0
 800b244:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b246:	69fb      	ldr	r3, [r7, #28]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d017      	beq.n	800b27c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	2200      	movs	r2, #0
 800b250:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b254:	88fa      	ldrh	r2, [r7, #6]
 800b256:	2300      	movs	r3, #0
 800b258:	9303      	str	r3, [sp, #12]
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	9302      	str	r3, [sp, #8]
 800b25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b260:	9301      	str	r3, [sp, #4]
 800b262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b264:	9300      	str	r3, [sp, #0]
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	68b9      	ldr	r1, [r7, #8]
 800b26a:	68f8      	ldr	r0, [r7, #12]
 800b26c:	f000 f80e 	bl	800b28c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b270:	69f8      	ldr	r0, [r7, #28]
 800b272:	f000 f89d 	bl	800b3b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b276:	2301      	movs	r3, #1
 800b278:	61bb      	str	r3, [r7, #24]
 800b27a:	e002      	b.n	800b282 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b27c:	f04f 33ff 	mov.w	r3, #4294967295
 800b280:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b282:	69bb      	ldr	r3, [r7, #24]
	}
 800b284:	4618      	mov	r0, r3
 800b286:	3720      	adds	r7, #32
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b088      	sub	sp, #32
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	607a      	str	r2, [r7, #4]
 800b298:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b29c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	21a5      	movs	r1, #165	; 0xa5
 800b2a6:	f00b ffc1 	bl	801722c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2ae:	6879      	ldr	r1, [r7, #4]
 800b2b0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b2b4:	440b      	add	r3, r1
 800b2b6:	009b      	lsls	r3, r3, #2
 800b2b8:	4413      	add	r3, r2
 800b2ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	f023 0307 	bic.w	r3, r3, #7
 800b2c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	f003 0307 	and.w	r3, r3, #7
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d00c      	beq.n	800b2e8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800b2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d2:	b672      	cpsid	i
 800b2d4:	f383 8811 	msr	BASEPRI, r3
 800b2d8:	f3bf 8f6f 	isb	sy
 800b2dc:	f3bf 8f4f 	dsb	sy
 800b2e0:	b662      	cpsie	i
 800b2e2:	617b      	str	r3, [r7, #20]
}
 800b2e4:	bf00      	nop
 800b2e6:	e7fe      	b.n	800b2e6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d01f      	beq.n	800b32e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	61fb      	str	r3, [r7, #28]
 800b2f2:	e012      	b.n	800b31a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b2f4:	68ba      	ldr	r2, [r7, #8]
 800b2f6:	69fb      	ldr	r3, [r7, #28]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	7819      	ldrb	r1, [r3, #0]
 800b2fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	4413      	add	r3, r2
 800b302:	3334      	adds	r3, #52	; 0x34
 800b304:	460a      	mov	r2, r1
 800b306:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b308:	68ba      	ldr	r2, [r7, #8]
 800b30a:	69fb      	ldr	r3, [r7, #28]
 800b30c:	4413      	add	r3, r2
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d006      	beq.n	800b322 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	3301      	adds	r3, #1
 800b318:	61fb      	str	r3, [r7, #28]
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	2b0f      	cmp	r3, #15
 800b31e:	d9e9      	bls.n	800b2f4 <prvInitialiseNewTask+0x68>
 800b320:	e000      	b.n	800b324 <prvInitialiseNewTask+0x98>
			{
				break;
 800b322:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b326:	2200      	movs	r2, #0
 800b328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b32c:	e003      	b.n	800b336 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b330:	2200      	movs	r2, #0
 800b332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b338:	2b37      	cmp	r3, #55	; 0x37
 800b33a:	d901      	bls.n	800b340 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b33c:	2337      	movs	r3, #55	; 0x37
 800b33e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b344:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b34a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34e:	2200      	movs	r2, #0
 800b350:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b354:	3304      	adds	r3, #4
 800b356:	4618      	mov	r0, r3
 800b358:	f7fe fd4c 	bl	8009df4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35e:	3318      	adds	r3, #24
 800b360:	4618      	mov	r0, r3
 800b362:	f7fe fd47 	bl	8009df4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b36a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b374:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b37a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37e:	2200      	movs	r2, #0
 800b380:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b384:	2200      	movs	r2, #0
 800b386:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b38a:	683a      	ldr	r2, [r7, #0]
 800b38c:	68f9      	ldr	r1, [r7, #12]
 800b38e:	69b8      	ldr	r0, [r7, #24]
 800b390:	f001 fa76 	bl	800c880 <pxPortInitialiseStack>
 800b394:	4602      	mov	r2, r0
 800b396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b398:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d002      	beq.n	800b3a6 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3a6:	bf00      	nop
 800b3a8:	3720      	adds	r7, #32
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
	...

0800b3b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b3b8:	f001 fb70 	bl	800ca9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b3bc:	4b2d      	ldr	r3, [pc, #180]	; (800b474 <prvAddNewTaskToReadyList+0xc4>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	4a2c      	ldr	r2, [pc, #176]	; (800b474 <prvAddNewTaskToReadyList+0xc4>)
 800b3c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b3c6:	4b2c      	ldr	r3, [pc, #176]	; (800b478 <prvAddNewTaskToReadyList+0xc8>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d109      	bne.n	800b3e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b3ce:	4a2a      	ldr	r2, [pc, #168]	; (800b478 <prvAddNewTaskToReadyList+0xc8>)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b3d4:	4b27      	ldr	r3, [pc, #156]	; (800b474 <prvAddNewTaskToReadyList+0xc4>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d110      	bne.n	800b3fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b3dc:	f000 fc3e 	bl	800bc5c <prvInitialiseTaskLists>
 800b3e0:	e00d      	b.n	800b3fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b3e2:	4b26      	ldr	r3, [pc, #152]	; (800b47c <prvAddNewTaskToReadyList+0xcc>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d109      	bne.n	800b3fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b3ea:	4b23      	ldr	r3, [pc, #140]	; (800b478 <prvAddNewTaskToReadyList+0xc8>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d802      	bhi.n	800b3fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b3f8:	4a1f      	ldr	r2, [pc, #124]	; (800b478 <prvAddNewTaskToReadyList+0xc8>)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b3fe:	4b20      	ldr	r3, [pc, #128]	; (800b480 <prvAddNewTaskToReadyList+0xd0>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	3301      	adds	r3, #1
 800b404:	4a1e      	ldr	r2, [pc, #120]	; (800b480 <prvAddNewTaskToReadyList+0xd0>)
 800b406:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b408:	4b1d      	ldr	r3, [pc, #116]	; (800b480 <prvAddNewTaskToReadyList+0xd0>)
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b414:	4b1b      	ldr	r3, [pc, #108]	; (800b484 <prvAddNewTaskToReadyList+0xd4>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	429a      	cmp	r2, r3
 800b41a:	d903      	bls.n	800b424 <prvAddNewTaskToReadyList+0x74>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b420:	4a18      	ldr	r2, [pc, #96]	; (800b484 <prvAddNewTaskToReadyList+0xd4>)
 800b422:	6013      	str	r3, [r2, #0]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b428:	4613      	mov	r3, r2
 800b42a:	009b      	lsls	r3, r3, #2
 800b42c:	4413      	add	r3, r2
 800b42e:	009b      	lsls	r3, r3, #2
 800b430:	4a15      	ldr	r2, [pc, #84]	; (800b488 <prvAddNewTaskToReadyList+0xd8>)
 800b432:	441a      	add	r2, r3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	3304      	adds	r3, #4
 800b438:	4619      	mov	r1, r3
 800b43a:	4610      	mov	r0, r2
 800b43c:	f7fe fce7 	bl	8009e0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b440:	f001 fb60 	bl	800cb04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b444:	4b0d      	ldr	r3, [pc, #52]	; (800b47c <prvAddNewTaskToReadyList+0xcc>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d00e      	beq.n	800b46a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b44c:	4b0a      	ldr	r3, [pc, #40]	; (800b478 <prvAddNewTaskToReadyList+0xc8>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b456:	429a      	cmp	r2, r3
 800b458:	d207      	bcs.n	800b46a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b45a:	4b0c      	ldr	r3, [pc, #48]	; (800b48c <prvAddNewTaskToReadyList+0xdc>)
 800b45c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b460:	601a      	str	r2, [r3, #0]
 800b462:	f3bf 8f4f 	dsb	sy
 800b466:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b46a:	bf00      	nop
 800b46c:	3708      	adds	r7, #8
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	20009b88 	.word	0x20009b88
 800b478:	200096b4 	.word	0x200096b4
 800b47c:	20009b94 	.word	0x20009b94
 800b480:	20009ba4 	.word	0x20009ba4
 800b484:	20009b90 	.word	0x20009b90
 800b488:	200096b8 	.word	0x200096b8
 800b48c:	e000ed04 	.word	0xe000ed04

0800b490 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b498:	2300      	movs	r3, #0
 800b49a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d019      	beq.n	800b4d6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b4a2:	4b14      	ldr	r3, [pc, #80]	; (800b4f4 <vTaskDelay+0x64>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d00c      	beq.n	800b4c4 <vTaskDelay+0x34>
	__asm volatile
 800b4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ae:	b672      	cpsid	i
 800b4b0:	f383 8811 	msr	BASEPRI, r3
 800b4b4:	f3bf 8f6f 	isb	sy
 800b4b8:	f3bf 8f4f 	dsb	sy
 800b4bc:	b662      	cpsie	i
 800b4be:	60bb      	str	r3, [r7, #8]
}
 800b4c0:	bf00      	nop
 800b4c2:	e7fe      	b.n	800b4c2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800b4c4:	f000 f884 	bl	800b5d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b4c8:	2100      	movs	r1, #0
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 fe28 	bl	800c120 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b4d0:	f000 f88c 	bl	800b5ec <xTaskResumeAll>
 800b4d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d107      	bne.n	800b4ec <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800b4dc:	4b06      	ldr	r3, [pc, #24]	; (800b4f8 <vTaskDelay+0x68>)
 800b4de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4e2:	601a      	str	r2, [r3, #0]
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b4ec:	bf00      	nop
 800b4ee:	3710      	adds	r7, #16
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}
 800b4f4:	20009bb0 	.word	0x20009bb0
 800b4f8:	e000ed04 	.word	0xe000ed04

0800b4fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b08a      	sub	sp, #40	; 0x28
 800b500:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b502:	2300      	movs	r3, #0
 800b504:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b506:	2300      	movs	r3, #0
 800b508:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b50a:	463a      	mov	r2, r7
 800b50c:	1d39      	adds	r1, r7, #4
 800b50e:	f107 0308 	add.w	r3, r7, #8
 800b512:	4618      	mov	r0, r3
 800b514:	f7fe fc1a 	bl	8009d4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b518:	6839      	ldr	r1, [r7, #0]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	68ba      	ldr	r2, [r7, #8]
 800b51e:	9202      	str	r2, [sp, #8]
 800b520:	9301      	str	r3, [sp, #4]
 800b522:	2300      	movs	r3, #0
 800b524:	9300      	str	r3, [sp, #0]
 800b526:	2300      	movs	r3, #0
 800b528:	460a      	mov	r2, r1
 800b52a:	4923      	ldr	r1, [pc, #140]	; (800b5b8 <vTaskStartScheduler+0xbc>)
 800b52c:	4823      	ldr	r0, [pc, #140]	; (800b5bc <vTaskStartScheduler+0xc0>)
 800b52e:	f7ff fe05 	bl	800b13c <xTaskCreateStatic>
 800b532:	4603      	mov	r3, r0
 800b534:	4a22      	ldr	r2, [pc, #136]	; (800b5c0 <vTaskStartScheduler+0xc4>)
 800b536:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b538:	4b21      	ldr	r3, [pc, #132]	; (800b5c0 <vTaskStartScheduler+0xc4>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d002      	beq.n	800b546 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b540:	2301      	movs	r3, #1
 800b542:	617b      	str	r3, [r7, #20]
 800b544:	e001      	b.n	800b54a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b546:	2300      	movs	r3, #0
 800b548:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d102      	bne.n	800b556 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b550:	f000 fe3a 	bl	800c1c8 <xTimerCreateTimerTask>
 800b554:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d118      	bne.n	800b58e <vTaskStartScheduler+0x92>
	__asm volatile
 800b55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b560:	b672      	cpsid	i
 800b562:	f383 8811 	msr	BASEPRI, r3
 800b566:	f3bf 8f6f 	isb	sy
 800b56a:	f3bf 8f4f 	dsb	sy
 800b56e:	b662      	cpsie	i
 800b570:	613b      	str	r3, [r7, #16]
}
 800b572:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b574:	4b13      	ldr	r3, [pc, #76]	; (800b5c4 <vTaskStartScheduler+0xc8>)
 800b576:	f04f 32ff 	mov.w	r2, #4294967295
 800b57a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b57c:	4b12      	ldr	r3, [pc, #72]	; (800b5c8 <vTaskStartScheduler+0xcc>)
 800b57e:	2201      	movs	r2, #1
 800b580:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b582:	4b12      	ldr	r3, [pc, #72]	; (800b5cc <vTaskStartScheduler+0xd0>)
 800b584:	2200      	movs	r2, #0
 800b586:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b588:	f001 fa0a 	bl	800c9a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b58c:	e010      	b.n	800b5b0 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b594:	d10c      	bne.n	800b5b0 <vTaskStartScheduler+0xb4>
	__asm volatile
 800b596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b59a:	b672      	cpsid	i
 800b59c:	f383 8811 	msr	BASEPRI, r3
 800b5a0:	f3bf 8f6f 	isb	sy
 800b5a4:	f3bf 8f4f 	dsb	sy
 800b5a8:	b662      	cpsie	i
 800b5aa:	60fb      	str	r3, [r7, #12]
}
 800b5ac:	bf00      	nop
 800b5ae:	e7fe      	b.n	800b5ae <vTaskStartScheduler+0xb2>
}
 800b5b0:	bf00      	nop
 800b5b2:	3718      	adds	r7, #24
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}
 800b5b8:	080185d4 	.word	0x080185d4
 800b5bc:	0800bc2d 	.word	0x0800bc2d
 800b5c0:	20009bac 	.word	0x20009bac
 800b5c4:	20009ba8 	.word	0x20009ba8
 800b5c8:	20009b94 	.word	0x20009b94
 800b5cc:	20009b8c 	.word	0x20009b8c

0800b5d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b5d4:	4b04      	ldr	r3, [pc, #16]	; (800b5e8 <vTaskSuspendAll+0x18>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	3301      	adds	r3, #1
 800b5da:	4a03      	ldr	r2, [pc, #12]	; (800b5e8 <vTaskSuspendAll+0x18>)
 800b5dc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b5de:	bf00      	nop
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr
 800b5e8:	20009bb0 	.word	0x20009bb0

0800b5ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b5fa:	4b43      	ldr	r3, [pc, #268]	; (800b708 <xTaskResumeAll+0x11c>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d10c      	bne.n	800b61c <xTaskResumeAll+0x30>
	__asm volatile
 800b602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b606:	b672      	cpsid	i
 800b608:	f383 8811 	msr	BASEPRI, r3
 800b60c:	f3bf 8f6f 	isb	sy
 800b610:	f3bf 8f4f 	dsb	sy
 800b614:	b662      	cpsie	i
 800b616:	603b      	str	r3, [r7, #0]
}
 800b618:	bf00      	nop
 800b61a:	e7fe      	b.n	800b61a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b61c:	f001 fa3e 	bl	800ca9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b620:	4b39      	ldr	r3, [pc, #228]	; (800b708 <xTaskResumeAll+0x11c>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	3b01      	subs	r3, #1
 800b626:	4a38      	ldr	r2, [pc, #224]	; (800b708 <xTaskResumeAll+0x11c>)
 800b628:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b62a:	4b37      	ldr	r3, [pc, #220]	; (800b708 <xTaskResumeAll+0x11c>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d162      	bne.n	800b6f8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b632:	4b36      	ldr	r3, [pc, #216]	; (800b70c <xTaskResumeAll+0x120>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d05e      	beq.n	800b6f8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b63a:	e02f      	b.n	800b69c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b63c:	4b34      	ldr	r3, [pc, #208]	; (800b710 <xTaskResumeAll+0x124>)
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	68db      	ldr	r3, [r3, #12]
 800b642:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	3318      	adds	r3, #24
 800b648:	4618      	mov	r0, r3
 800b64a:	f7fe fc3d 	bl	8009ec8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	3304      	adds	r3, #4
 800b652:	4618      	mov	r0, r3
 800b654:	f7fe fc38 	bl	8009ec8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b65c:	4b2d      	ldr	r3, [pc, #180]	; (800b714 <xTaskResumeAll+0x128>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	429a      	cmp	r2, r3
 800b662:	d903      	bls.n	800b66c <xTaskResumeAll+0x80>
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b668:	4a2a      	ldr	r2, [pc, #168]	; (800b714 <xTaskResumeAll+0x128>)
 800b66a:	6013      	str	r3, [r2, #0]
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b670:	4613      	mov	r3, r2
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	4413      	add	r3, r2
 800b676:	009b      	lsls	r3, r3, #2
 800b678:	4a27      	ldr	r2, [pc, #156]	; (800b718 <xTaskResumeAll+0x12c>)
 800b67a:	441a      	add	r2, r3
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	3304      	adds	r3, #4
 800b680:	4619      	mov	r1, r3
 800b682:	4610      	mov	r0, r2
 800b684:	f7fe fbc3 	bl	8009e0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b68c:	4b23      	ldr	r3, [pc, #140]	; (800b71c <xTaskResumeAll+0x130>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b692:	429a      	cmp	r2, r3
 800b694:	d302      	bcc.n	800b69c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800b696:	4b22      	ldr	r3, [pc, #136]	; (800b720 <xTaskResumeAll+0x134>)
 800b698:	2201      	movs	r2, #1
 800b69a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b69c:	4b1c      	ldr	r3, [pc, #112]	; (800b710 <xTaskResumeAll+0x124>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d1cb      	bne.n	800b63c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d001      	beq.n	800b6ae <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b6aa:	f000 fb77 	bl	800bd9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b6ae:	4b1d      	ldr	r3, [pc, #116]	; (800b724 <xTaskResumeAll+0x138>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d010      	beq.n	800b6dc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b6ba:	f000 f859 	bl	800b770 <xTaskIncrementTick>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d002      	beq.n	800b6ca <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800b6c4:	4b16      	ldr	r3, [pc, #88]	; (800b720 <xTaskResumeAll+0x134>)
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	3b01      	subs	r3, #1
 800b6ce:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d1f1      	bne.n	800b6ba <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800b6d6:	4b13      	ldr	r3, [pc, #76]	; (800b724 <xTaskResumeAll+0x138>)
 800b6d8:	2200      	movs	r2, #0
 800b6da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b6dc:	4b10      	ldr	r3, [pc, #64]	; (800b720 <xTaskResumeAll+0x134>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d009      	beq.n	800b6f8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b6e8:	4b0f      	ldr	r3, [pc, #60]	; (800b728 <xTaskResumeAll+0x13c>)
 800b6ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6ee:	601a      	str	r2, [r3, #0]
 800b6f0:	f3bf 8f4f 	dsb	sy
 800b6f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b6f8:	f001 fa04 	bl	800cb04 <vPortExitCritical>

	return xAlreadyYielded;
 800b6fc:	68bb      	ldr	r3, [r7, #8]
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3710      	adds	r7, #16
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	20009bb0 	.word	0x20009bb0
 800b70c:	20009b88 	.word	0x20009b88
 800b710:	20009b48 	.word	0x20009b48
 800b714:	20009b90 	.word	0x20009b90
 800b718:	200096b8 	.word	0x200096b8
 800b71c:	200096b4 	.word	0x200096b4
 800b720:	20009b9c 	.word	0x20009b9c
 800b724:	20009b98 	.word	0x20009b98
 800b728:	e000ed04 	.word	0xe000ed04

0800b72c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b72c:	b480      	push	{r7}
 800b72e:	b083      	sub	sp, #12
 800b730:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b732:	4b05      	ldr	r3, [pc, #20]	; (800b748 <xTaskGetTickCount+0x1c>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b738:	687b      	ldr	r3, [r7, #4]
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	370c      	adds	r7, #12
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr
 800b746:	bf00      	nop
 800b748:	20009b8c 	.word	0x20009b8c

0800b74c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b082      	sub	sp, #8
 800b750:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b752:	f001 fa8b 	bl	800cc6c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b756:	2300      	movs	r3, #0
 800b758:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b75a:	4b04      	ldr	r3, [pc, #16]	; (800b76c <xTaskGetTickCountFromISR+0x20>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b760:	683b      	ldr	r3, [r7, #0]
}
 800b762:	4618      	mov	r0, r3
 800b764:	3708      	adds	r7, #8
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
 800b76a:	bf00      	nop
 800b76c:	20009b8c 	.word	0x20009b8c

0800b770 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b086      	sub	sp, #24
 800b774:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b776:	2300      	movs	r3, #0
 800b778:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b77a:	4b50      	ldr	r3, [pc, #320]	; (800b8bc <xTaskIncrementTick+0x14c>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	f040 808b 	bne.w	800b89a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b784:	4b4e      	ldr	r3, [pc, #312]	; (800b8c0 <xTaskIncrementTick+0x150>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	3301      	adds	r3, #1
 800b78a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b78c:	4a4c      	ldr	r2, [pc, #304]	; (800b8c0 <xTaskIncrementTick+0x150>)
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d122      	bne.n	800b7de <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800b798:	4b4a      	ldr	r3, [pc, #296]	; (800b8c4 <xTaskIncrementTick+0x154>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d00c      	beq.n	800b7bc <xTaskIncrementTick+0x4c>
	__asm volatile
 800b7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a6:	b672      	cpsid	i
 800b7a8:	f383 8811 	msr	BASEPRI, r3
 800b7ac:	f3bf 8f6f 	isb	sy
 800b7b0:	f3bf 8f4f 	dsb	sy
 800b7b4:	b662      	cpsie	i
 800b7b6:	603b      	str	r3, [r7, #0]
}
 800b7b8:	bf00      	nop
 800b7ba:	e7fe      	b.n	800b7ba <xTaskIncrementTick+0x4a>
 800b7bc:	4b41      	ldr	r3, [pc, #260]	; (800b8c4 <xTaskIncrementTick+0x154>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	60fb      	str	r3, [r7, #12]
 800b7c2:	4b41      	ldr	r3, [pc, #260]	; (800b8c8 <xTaskIncrementTick+0x158>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4a3f      	ldr	r2, [pc, #252]	; (800b8c4 <xTaskIncrementTick+0x154>)
 800b7c8:	6013      	str	r3, [r2, #0]
 800b7ca:	4a3f      	ldr	r2, [pc, #252]	; (800b8c8 <xTaskIncrementTick+0x158>)
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	6013      	str	r3, [r2, #0]
 800b7d0:	4b3e      	ldr	r3, [pc, #248]	; (800b8cc <xTaskIncrementTick+0x15c>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	4a3d      	ldr	r2, [pc, #244]	; (800b8cc <xTaskIncrementTick+0x15c>)
 800b7d8:	6013      	str	r3, [r2, #0]
 800b7da:	f000 fadf 	bl	800bd9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b7de:	4b3c      	ldr	r3, [pc, #240]	; (800b8d0 <xTaskIncrementTick+0x160>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	693a      	ldr	r2, [r7, #16]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d349      	bcc.n	800b87c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7e8:	4b36      	ldr	r3, [pc, #216]	; (800b8c4 <xTaskIncrementTick+0x154>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d104      	bne.n	800b7fc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7f2:	4b37      	ldr	r3, [pc, #220]	; (800b8d0 <xTaskIncrementTick+0x160>)
 800b7f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b7f8:	601a      	str	r2, [r3, #0]
					break;
 800b7fa:	e03f      	b.n	800b87c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7fc:	4b31      	ldr	r3, [pc, #196]	; (800b8c4 <xTaskIncrementTick+0x154>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	68db      	ldr	r3, [r3, #12]
 800b802:	68db      	ldr	r3, [r3, #12]
 800b804:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b80c:	693a      	ldr	r2, [r7, #16]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	429a      	cmp	r2, r3
 800b812:	d203      	bcs.n	800b81c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b814:	4a2e      	ldr	r2, [pc, #184]	; (800b8d0 <xTaskIncrementTick+0x160>)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b81a:	e02f      	b.n	800b87c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	3304      	adds	r3, #4
 800b820:	4618      	mov	r0, r3
 800b822:	f7fe fb51 	bl	8009ec8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d004      	beq.n	800b838 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	3318      	adds	r3, #24
 800b832:	4618      	mov	r0, r3
 800b834:	f7fe fb48 	bl	8009ec8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b83c:	4b25      	ldr	r3, [pc, #148]	; (800b8d4 <xTaskIncrementTick+0x164>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	429a      	cmp	r2, r3
 800b842:	d903      	bls.n	800b84c <xTaskIncrementTick+0xdc>
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b848:	4a22      	ldr	r2, [pc, #136]	; (800b8d4 <xTaskIncrementTick+0x164>)
 800b84a:	6013      	str	r3, [r2, #0]
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b850:	4613      	mov	r3, r2
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	4413      	add	r3, r2
 800b856:	009b      	lsls	r3, r3, #2
 800b858:	4a1f      	ldr	r2, [pc, #124]	; (800b8d8 <xTaskIncrementTick+0x168>)
 800b85a:	441a      	add	r2, r3
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	3304      	adds	r3, #4
 800b860:	4619      	mov	r1, r3
 800b862:	4610      	mov	r0, r2
 800b864:	f7fe fad3 	bl	8009e0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b86c:	4b1b      	ldr	r3, [pc, #108]	; (800b8dc <xTaskIncrementTick+0x16c>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b872:	429a      	cmp	r2, r3
 800b874:	d3b8      	bcc.n	800b7e8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800b876:	2301      	movs	r3, #1
 800b878:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b87a:	e7b5      	b.n	800b7e8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b87c:	4b17      	ldr	r3, [pc, #92]	; (800b8dc <xTaskIncrementTick+0x16c>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b882:	4915      	ldr	r1, [pc, #84]	; (800b8d8 <xTaskIncrementTick+0x168>)
 800b884:	4613      	mov	r3, r2
 800b886:	009b      	lsls	r3, r3, #2
 800b888:	4413      	add	r3, r2
 800b88a:	009b      	lsls	r3, r3, #2
 800b88c:	440b      	add	r3, r1
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	2b01      	cmp	r3, #1
 800b892:	d907      	bls.n	800b8a4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800b894:	2301      	movs	r3, #1
 800b896:	617b      	str	r3, [r7, #20]
 800b898:	e004      	b.n	800b8a4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b89a:	4b11      	ldr	r3, [pc, #68]	; (800b8e0 <xTaskIncrementTick+0x170>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	3301      	adds	r3, #1
 800b8a0:	4a0f      	ldr	r2, [pc, #60]	; (800b8e0 <xTaskIncrementTick+0x170>)
 800b8a2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b8a4:	4b0f      	ldr	r3, [pc, #60]	; (800b8e4 <xTaskIncrementTick+0x174>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d001      	beq.n	800b8b0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b8b0:	697b      	ldr	r3, [r7, #20]
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3718      	adds	r7, #24
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	20009bb0 	.word	0x20009bb0
 800b8c0:	20009b8c 	.word	0x20009b8c
 800b8c4:	20009b40 	.word	0x20009b40
 800b8c8:	20009b44 	.word	0x20009b44
 800b8cc:	20009ba0 	.word	0x20009ba0
 800b8d0:	20009ba8 	.word	0x20009ba8
 800b8d4:	20009b90 	.word	0x20009b90
 800b8d8:	200096b8 	.word	0x200096b8
 800b8dc:	200096b4 	.word	0x200096b4
 800b8e0:	20009b98 	.word	0x20009b98
 800b8e4:	20009b9c 	.word	0x20009b9c

0800b8e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b085      	sub	sp, #20
 800b8ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b8ee:	4b29      	ldr	r3, [pc, #164]	; (800b994 <vTaskSwitchContext+0xac>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d003      	beq.n	800b8fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b8f6:	4b28      	ldr	r3, [pc, #160]	; (800b998 <vTaskSwitchContext+0xb0>)
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b8fc:	e043      	b.n	800b986 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800b8fe:	4b26      	ldr	r3, [pc, #152]	; (800b998 <vTaskSwitchContext+0xb0>)
 800b900:	2200      	movs	r2, #0
 800b902:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b904:	4b25      	ldr	r3, [pc, #148]	; (800b99c <vTaskSwitchContext+0xb4>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	60fb      	str	r3, [r7, #12]
 800b90a:	e012      	b.n	800b932 <vTaskSwitchContext+0x4a>
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d10c      	bne.n	800b92c <vTaskSwitchContext+0x44>
	__asm volatile
 800b912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b916:	b672      	cpsid	i
 800b918:	f383 8811 	msr	BASEPRI, r3
 800b91c:	f3bf 8f6f 	isb	sy
 800b920:	f3bf 8f4f 	dsb	sy
 800b924:	b662      	cpsie	i
 800b926:	607b      	str	r3, [r7, #4]
}
 800b928:	bf00      	nop
 800b92a:	e7fe      	b.n	800b92a <vTaskSwitchContext+0x42>
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	3b01      	subs	r3, #1
 800b930:	60fb      	str	r3, [r7, #12]
 800b932:	491b      	ldr	r1, [pc, #108]	; (800b9a0 <vTaskSwitchContext+0xb8>)
 800b934:	68fa      	ldr	r2, [r7, #12]
 800b936:	4613      	mov	r3, r2
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	4413      	add	r3, r2
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	440b      	add	r3, r1
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d0e2      	beq.n	800b90c <vTaskSwitchContext+0x24>
 800b946:	68fa      	ldr	r2, [r7, #12]
 800b948:	4613      	mov	r3, r2
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	4413      	add	r3, r2
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	4a13      	ldr	r2, [pc, #76]	; (800b9a0 <vTaskSwitchContext+0xb8>)
 800b952:	4413      	add	r3, r2
 800b954:	60bb      	str	r3, [r7, #8]
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	685a      	ldr	r2, [r3, #4]
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	605a      	str	r2, [r3, #4]
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	685a      	ldr	r2, [r3, #4]
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	3308      	adds	r3, #8
 800b968:	429a      	cmp	r2, r3
 800b96a:	d104      	bne.n	800b976 <vTaskSwitchContext+0x8e>
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	685a      	ldr	r2, [r3, #4]
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	605a      	str	r2, [r3, #4]
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	68db      	ldr	r3, [r3, #12]
 800b97c:	4a09      	ldr	r2, [pc, #36]	; (800b9a4 <vTaskSwitchContext+0xbc>)
 800b97e:	6013      	str	r3, [r2, #0]
 800b980:	4a06      	ldr	r2, [pc, #24]	; (800b99c <vTaskSwitchContext+0xb4>)
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	6013      	str	r3, [r2, #0]
}
 800b986:	bf00      	nop
 800b988:	3714      	adds	r7, #20
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr
 800b992:	bf00      	nop
 800b994:	20009bb0 	.word	0x20009bb0
 800b998:	20009b9c 	.word	0x20009b9c
 800b99c:	20009b90 	.word	0x20009b90
 800b9a0:	200096b8 	.word	0x200096b8
 800b9a4:	200096b4 	.word	0x200096b4

0800b9a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d10c      	bne.n	800b9d2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800b9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9bc:	b672      	cpsid	i
 800b9be:	f383 8811 	msr	BASEPRI, r3
 800b9c2:	f3bf 8f6f 	isb	sy
 800b9c6:	f3bf 8f4f 	dsb	sy
 800b9ca:	b662      	cpsie	i
 800b9cc:	60fb      	str	r3, [r7, #12]
}
 800b9ce:	bf00      	nop
 800b9d0:	e7fe      	b.n	800b9d0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b9d2:	4b07      	ldr	r3, [pc, #28]	; (800b9f0 <vTaskPlaceOnEventList+0x48>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	3318      	adds	r3, #24
 800b9d8:	4619      	mov	r1, r3
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f7fe fa3b 	bl	8009e56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b9e0:	2101      	movs	r1, #1
 800b9e2:	6838      	ldr	r0, [r7, #0]
 800b9e4:	f000 fb9c 	bl	800c120 <prvAddCurrentTaskToDelayedList>
}
 800b9e8:	bf00      	nop
 800b9ea:	3710      	adds	r7, #16
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}
 800b9f0:	200096b4 	.word	0x200096b4

0800b9f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b086      	sub	sp, #24
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	60f8      	str	r0, [r7, #12]
 800b9fc:	60b9      	str	r1, [r7, #8]
 800b9fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d10c      	bne.n	800ba20 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800ba06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0a:	b672      	cpsid	i
 800ba0c:	f383 8811 	msr	BASEPRI, r3
 800ba10:	f3bf 8f6f 	isb	sy
 800ba14:	f3bf 8f4f 	dsb	sy
 800ba18:	b662      	cpsie	i
 800ba1a:	617b      	str	r3, [r7, #20]
}
 800ba1c:	bf00      	nop
 800ba1e:	e7fe      	b.n	800ba1e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba20:	4b0a      	ldr	r3, [pc, #40]	; (800ba4c <vTaskPlaceOnEventListRestricted+0x58>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	3318      	adds	r3, #24
 800ba26:	4619      	mov	r1, r3
 800ba28:	68f8      	ldr	r0, [r7, #12]
 800ba2a:	f7fe f9f0 	bl	8009e0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d002      	beq.n	800ba3a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800ba34:	f04f 33ff 	mov.w	r3, #4294967295
 800ba38:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ba3a:	6879      	ldr	r1, [r7, #4]
 800ba3c:	68b8      	ldr	r0, [r7, #8]
 800ba3e:	f000 fb6f 	bl	800c120 <prvAddCurrentTaskToDelayedList>
	}
 800ba42:	bf00      	nop
 800ba44:	3718      	adds	r7, #24
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	200096b4 	.word	0x200096b4

0800ba50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b086      	sub	sp, #24
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	68db      	ldr	r3, [r3, #12]
 800ba5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d10c      	bne.n	800ba80 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800ba66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba6a:	b672      	cpsid	i
 800ba6c:	f383 8811 	msr	BASEPRI, r3
 800ba70:	f3bf 8f6f 	isb	sy
 800ba74:	f3bf 8f4f 	dsb	sy
 800ba78:	b662      	cpsie	i
 800ba7a:	60fb      	str	r3, [r7, #12]
}
 800ba7c:	bf00      	nop
 800ba7e:	e7fe      	b.n	800ba7e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	3318      	adds	r3, #24
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7fe fa1f 	bl	8009ec8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba8a:	4b1e      	ldr	r3, [pc, #120]	; (800bb04 <xTaskRemoveFromEventList+0xb4>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d11d      	bne.n	800bace <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	3304      	adds	r3, #4
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7fe fa16 	bl	8009ec8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baa0:	4b19      	ldr	r3, [pc, #100]	; (800bb08 <xTaskRemoveFromEventList+0xb8>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d903      	bls.n	800bab0 <xTaskRemoveFromEventList+0x60>
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baac:	4a16      	ldr	r2, [pc, #88]	; (800bb08 <xTaskRemoveFromEventList+0xb8>)
 800baae:	6013      	str	r3, [r2, #0]
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab4:	4613      	mov	r3, r2
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	4413      	add	r3, r2
 800baba:	009b      	lsls	r3, r3, #2
 800babc:	4a13      	ldr	r2, [pc, #76]	; (800bb0c <xTaskRemoveFromEventList+0xbc>)
 800babe:	441a      	add	r2, r3
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	3304      	adds	r3, #4
 800bac4:	4619      	mov	r1, r3
 800bac6:	4610      	mov	r0, r2
 800bac8:	f7fe f9a1 	bl	8009e0e <vListInsertEnd>
 800bacc:	e005      	b.n	800bada <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	3318      	adds	r3, #24
 800bad2:	4619      	mov	r1, r3
 800bad4:	480e      	ldr	r0, [pc, #56]	; (800bb10 <xTaskRemoveFromEventList+0xc0>)
 800bad6:	f7fe f99a 	bl	8009e0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bade:	4b0d      	ldr	r3, [pc, #52]	; (800bb14 <xTaskRemoveFromEventList+0xc4>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d905      	bls.n	800baf4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bae8:	2301      	movs	r3, #1
 800baea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800baec:	4b0a      	ldr	r3, [pc, #40]	; (800bb18 <xTaskRemoveFromEventList+0xc8>)
 800baee:	2201      	movs	r2, #1
 800baf0:	601a      	str	r2, [r3, #0]
 800baf2:	e001      	b.n	800baf8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800baf4:	2300      	movs	r3, #0
 800baf6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800baf8:	697b      	ldr	r3, [r7, #20]
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3718      	adds	r7, #24
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop
 800bb04:	20009bb0 	.word	0x20009bb0
 800bb08:	20009b90 	.word	0x20009b90
 800bb0c:	200096b8 	.word	0x200096b8
 800bb10:	20009b48 	.word	0x20009b48
 800bb14:	200096b4 	.word	0x200096b4
 800bb18:	20009b9c 	.word	0x20009b9c

0800bb1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b083      	sub	sp, #12
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bb24:	4b06      	ldr	r3, [pc, #24]	; (800bb40 <vTaskInternalSetTimeOutState+0x24>)
 800bb26:	681a      	ldr	r2, [r3, #0]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bb2c:	4b05      	ldr	r3, [pc, #20]	; (800bb44 <vTaskInternalSetTimeOutState+0x28>)
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	605a      	str	r2, [r3, #4]
}
 800bb34:	bf00      	nop
 800bb36:	370c      	adds	r7, #12
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr
 800bb40:	20009ba0 	.word	0x20009ba0
 800bb44:	20009b8c 	.word	0x20009b8c

0800bb48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b088      	sub	sp, #32
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d10c      	bne.n	800bb72 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800bb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5c:	b672      	cpsid	i
 800bb5e:	f383 8811 	msr	BASEPRI, r3
 800bb62:	f3bf 8f6f 	isb	sy
 800bb66:	f3bf 8f4f 	dsb	sy
 800bb6a:	b662      	cpsie	i
 800bb6c:	613b      	str	r3, [r7, #16]
}
 800bb6e:	bf00      	nop
 800bb70:	e7fe      	b.n	800bb70 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d10c      	bne.n	800bb92 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800bb78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7c:	b672      	cpsid	i
 800bb7e:	f383 8811 	msr	BASEPRI, r3
 800bb82:	f3bf 8f6f 	isb	sy
 800bb86:	f3bf 8f4f 	dsb	sy
 800bb8a:	b662      	cpsie	i
 800bb8c:	60fb      	str	r3, [r7, #12]
}
 800bb8e:	bf00      	nop
 800bb90:	e7fe      	b.n	800bb90 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800bb92:	f000 ff83 	bl	800ca9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bb96:	4b1d      	ldr	r3, [pc, #116]	; (800bc0c <xTaskCheckForTimeOut+0xc4>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	69ba      	ldr	r2, [r7, #24]
 800bba2:	1ad3      	subs	r3, r2, r3
 800bba4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbae:	d102      	bne.n	800bbb6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	61fb      	str	r3, [r7, #28]
 800bbb4:	e023      	b.n	800bbfe <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	4b15      	ldr	r3, [pc, #84]	; (800bc10 <xTaskCheckForTimeOut+0xc8>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d007      	beq.n	800bbd2 <xTaskCheckForTimeOut+0x8a>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	69ba      	ldr	r2, [r7, #24]
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d302      	bcc.n	800bbd2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bbcc:	2301      	movs	r3, #1
 800bbce:	61fb      	str	r3, [r7, #28]
 800bbd0:	e015      	b.n	800bbfe <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	697a      	ldr	r2, [r7, #20]
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d20b      	bcs.n	800bbf4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	1ad2      	subs	r2, r2, r3
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f7ff ff97 	bl	800bb1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	61fb      	str	r3, [r7, #28]
 800bbf2:	e004      	b.n	800bbfe <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bbfe:	f000 ff81 	bl	800cb04 <vPortExitCritical>

	return xReturn;
 800bc02:	69fb      	ldr	r3, [r7, #28]
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3720      	adds	r7, #32
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}
 800bc0c:	20009b8c 	.word	0x20009b8c
 800bc10:	20009ba0 	.word	0x20009ba0

0800bc14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bc14:	b480      	push	{r7}
 800bc16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bc18:	4b03      	ldr	r3, [pc, #12]	; (800bc28 <vTaskMissedYield+0x14>)
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	601a      	str	r2, [r3, #0]
}
 800bc1e:	bf00      	nop
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr
 800bc28:	20009b9c 	.word	0x20009b9c

0800bc2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bc34:	f000 f852 	bl	800bcdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bc38:	4b06      	ldr	r3, [pc, #24]	; (800bc54 <prvIdleTask+0x28>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d9f9      	bls.n	800bc34 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bc40:	4b05      	ldr	r3, [pc, #20]	; (800bc58 <prvIdleTask+0x2c>)
 800bc42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc46:	601a      	str	r2, [r3, #0]
 800bc48:	f3bf 8f4f 	dsb	sy
 800bc4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bc50:	e7f0      	b.n	800bc34 <prvIdleTask+0x8>
 800bc52:	bf00      	nop
 800bc54:	200096b8 	.word	0x200096b8
 800bc58:	e000ed04 	.word	0xe000ed04

0800bc5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc62:	2300      	movs	r3, #0
 800bc64:	607b      	str	r3, [r7, #4]
 800bc66:	e00c      	b.n	800bc82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bc68:	687a      	ldr	r2, [r7, #4]
 800bc6a:	4613      	mov	r3, r2
 800bc6c:	009b      	lsls	r3, r3, #2
 800bc6e:	4413      	add	r3, r2
 800bc70:	009b      	lsls	r3, r3, #2
 800bc72:	4a12      	ldr	r2, [pc, #72]	; (800bcbc <prvInitialiseTaskLists+0x60>)
 800bc74:	4413      	add	r3, r2
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7fe f89c 	bl	8009db4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	3301      	adds	r3, #1
 800bc80:	607b      	str	r3, [r7, #4]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2b37      	cmp	r3, #55	; 0x37
 800bc86:	d9ef      	bls.n	800bc68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bc88:	480d      	ldr	r0, [pc, #52]	; (800bcc0 <prvInitialiseTaskLists+0x64>)
 800bc8a:	f7fe f893 	bl	8009db4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bc8e:	480d      	ldr	r0, [pc, #52]	; (800bcc4 <prvInitialiseTaskLists+0x68>)
 800bc90:	f7fe f890 	bl	8009db4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bc94:	480c      	ldr	r0, [pc, #48]	; (800bcc8 <prvInitialiseTaskLists+0x6c>)
 800bc96:	f7fe f88d 	bl	8009db4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bc9a:	480c      	ldr	r0, [pc, #48]	; (800bccc <prvInitialiseTaskLists+0x70>)
 800bc9c:	f7fe f88a 	bl	8009db4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bca0:	480b      	ldr	r0, [pc, #44]	; (800bcd0 <prvInitialiseTaskLists+0x74>)
 800bca2:	f7fe f887 	bl	8009db4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bca6:	4b0b      	ldr	r3, [pc, #44]	; (800bcd4 <prvInitialiseTaskLists+0x78>)
 800bca8:	4a05      	ldr	r2, [pc, #20]	; (800bcc0 <prvInitialiseTaskLists+0x64>)
 800bcaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bcac:	4b0a      	ldr	r3, [pc, #40]	; (800bcd8 <prvInitialiseTaskLists+0x7c>)
 800bcae:	4a05      	ldr	r2, [pc, #20]	; (800bcc4 <prvInitialiseTaskLists+0x68>)
 800bcb0:	601a      	str	r2, [r3, #0]
}
 800bcb2:	bf00      	nop
 800bcb4:	3708      	adds	r7, #8
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	200096b8 	.word	0x200096b8
 800bcc0:	20009b18 	.word	0x20009b18
 800bcc4:	20009b2c 	.word	0x20009b2c
 800bcc8:	20009b48 	.word	0x20009b48
 800bccc:	20009b5c 	.word	0x20009b5c
 800bcd0:	20009b74 	.word	0x20009b74
 800bcd4:	20009b40 	.word	0x20009b40
 800bcd8:	20009b44 	.word	0x20009b44

0800bcdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b082      	sub	sp, #8
 800bce0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bce2:	e019      	b.n	800bd18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bce4:	f000 feda 	bl	800ca9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bce8:	4b10      	ldr	r3, [pc, #64]	; (800bd2c <prvCheckTasksWaitingTermination+0x50>)
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	68db      	ldr	r3, [r3, #12]
 800bcee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	3304      	adds	r3, #4
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f7fe f8e7 	bl	8009ec8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bcfa:	4b0d      	ldr	r3, [pc, #52]	; (800bd30 <prvCheckTasksWaitingTermination+0x54>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	3b01      	subs	r3, #1
 800bd00:	4a0b      	ldr	r2, [pc, #44]	; (800bd30 <prvCheckTasksWaitingTermination+0x54>)
 800bd02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bd04:	4b0b      	ldr	r3, [pc, #44]	; (800bd34 <prvCheckTasksWaitingTermination+0x58>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	3b01      	subs	r3, #1
 800bd0a:	4a0a      	ldr	r2, [pc, #40]	; (800bd34 <prvCheckTasksWaitingTermination+0x58>)
 800bd0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bd0e:	f000 fef9 	bl	800cb04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 f810 	bl	800bd38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd18:	4b06      	ldr	r3, [pc, #24]	; (800bd34 <prvCheckTasksWaitingTermination+0x58>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d1e1      	bne.n	800bce4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bd20:	bf00      	nop
 800bd22:	bf00      	nop
 800bd24:	3708      	adds	r7, #8
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
 800bd2a:	bf00      	nop
 800bd2c:	20009b5c 	.word	0x20009b5c
 800bd30:	20009b88 	.word	0x20009b88
 800bd34:	20009b70 	.word	0x20009b70

0800bd38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b084      	sub	sp, #16
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d108      	bne.n	800bd5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f001 f89a 	bl	800ce88 <vPortFree>
				vPortFree( pxTCB );
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f001 f897 	bl	800ce88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bd5a:	e01a      	b.n	800bd92 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bd62:	2b01      	cmp	r3, #1
 800bd64:	d103      	bne.n	800bd6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f001 f88e 	bl	800ce88 <vPortFree>
	}
 800bd6c:	e011      	b.n	800bd92 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bd74:	2b02      	cmp	r3, #2
 800bd76:	d00c      	beq.n	800bd92 <prvDeleteTCB+0x5a>
	__asm volatile
 800bd78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7c:	b672      	cpsid	i
 800bd7e:	f383 8811 	msr	BASEPRI, r3
 800bd82:	f3bf 8f6f 	isb	sy
 800bd86:	f3bf 8f4f 	dsb	sy
 800bd8a:	b662      	cpsie	i
 800bd8c:	60fb      	str	r3, [r7, #12]
}
 800bd8e:	bf00      	nop
 800bd90:	e7fe      	b.n	800bd90 <prvDeleteTCB+0x58>
	}
 800bd92:	bf00      	nop
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
	...

0800bd9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b083      	sub	sp, #12
 800bda0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bda2:	4b0c      	ldr	r3, [pc, #48]	; (800bdd4 <prvResetNextTaskUnblockTime+0x38>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d104      	bne.n	800bdb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bdac:	4b0a      	ldr	r3, [pc, #40]	; (800bdd8 <prvResetNextTaskUnblockTime+0x3c>)
 800bdae:	f04f 32ff 	mov.w	r2, #4294967295
 800bdb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bdb4:	e008      	b.n	800bdc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdb6:	4b07      	ldr	r3, [pc, #28]	; (800bdd4 <prvResetNextTaskUnblockTime+0x38>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	4a04      	ldr	r2, [pc, #16]	; (800bdd8 <prvResetNextTaskUnblockTime+0x3c>)
 800bdc6:	6013      	str	r3, [r2, #0]
}
 800bdc8:	bf00      	nop
 800bdca:	370c      	adds	r7, #12
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr
 800bdd4:	20009b40 	.word	0x20009b40
 800bdd8:	20009ba8 	.word	0x20009ba8

0800bddc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800bde2:	4b05      	ldr	r3, [pc, #20]	; (800bdf8 <xTaskGetCurrentTaskHandle+0x1c>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800bde8:	687b      	ldr	r3, [r7, #4]
	}
 800bdea:	4618      	mov	r0, r3
 800bdec:	370c      	adds	r7, #12
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr
 800bdf6:	bf00      	nop
 800bdf8:	200096b4 	.word	0x200096b4

0800bdfc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800be02:	4b0b      	ldr	r3, [pc, #44]	; (800be30 <xTaskGetSchedulerState+0x34>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d102      	bne.n	800be10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800be0a:	2301      	movs	r3, #1
 800be0c:	607b      	str	r3, [r7, #4]
 800be0e:	e008      	b.n	800be22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be10:	4b08      	ldr	r3, [pc, #32]	; (800be34 <xTaskGetSchedulerState+0x38>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d102      	bne.n	800be1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800be18:	2302      	movs	r3, #2
 800be1a:	607b      	str	r3, [r7, #4]
 800be1c:	e001      	b.n	800be22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800be1e:	2300      	movs	r3, #0
 800be20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800be22:	687b      	ldr	r3, [r7, #4]
	}
 800be24:	4618      	mov	r0, r3
 800be26:	370c      	adds	r7, #12
 800be28:	46bd      	mov	sp, r7
 800be2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2e:	4770      	bx	lr
 800be30:	20009b94 	.word	0x20009b94
 800be34:	20009bb0 	.word	0x20009bb0

0800be38 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800be44:	2300      	movs	r3, #0
 800be46:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d051      	beq.n	800bef2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be52:	4b2a      	ldr	r3, [pc, #168]	; (800befc <xTaskPriorityInherit+0xc4>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be58:	429a      	cmp	r2, r3
 800be5a:	d241      	bcs.n	800bee0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	699b      	ldr	r3, [r3, #24]
 800be60:	2b00      	cmp	r3, #0
 800be62:	db06      	blt.n	800be72 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be64:	4b25      	ldr	r3, [pc, #148]	; (800befc <xTaskPriorityInherit+0xc4>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	6959      	ldr	r1, [r3, #20]
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be7a:	4613      	mov	r3, r2
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	4413      	add	r3, r2
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	4a1f      	ldr	r2, [pc, #124]	; (800bf00 <xTaskPriorityInherit+0xc8>)
 800be84:	4413      	add	r3, r2
 800be86:	4299      	cmp	r1, r3
 800be88:	d122      	bne.n	800bed0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	3304      	adds	r3, #4
 800be8e:	4618      	mov	r0, r3
 800be90:	f7fe f81a 	bl	8009ec8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800be94:	4b19      	ldr	r3, [pc, #100]	; (800befc <xTaskPriorityInherit+0xc4>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bea2:	4b18      	ldr	r3, [pc, #96]	; (800bf04 <xTaskPriorityInherit+0xcc>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d903      	bls.n	800beb2 <xTaskPriorityInherit+0x7a>
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beae:	4a15      	ldr	r2, [pc, #84]	; (800bf04 <xTaskPriorityInherit+0xcc>)
 800beb0:	6013      	str	r3, [r2, #0]
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beb6:	4613      	mov	r3, r2
 800beb8:	009b      	lsls	r3, r3, #2
 800beba:	4413      	add	r3, r2
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	4a10      	ldr	r2, [pc, #64]	; (800bf00 <xTaskPriorityInherit+0xc8>)
 800bec0:	441a      	add	r2, r3
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	3304      	adds	r3, #4
 800bec6:	4619      	mov	r1, r3
 800bec8:	4610      	mov	r0, r2
 800beca:	f7fd ffa0 	bl	8009e0e <vListInsertEnd>
 800bece:	e004      	b.n	800beda <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bed0:	4b0a      	ldr	r3, [pc, #40]	; (800befc <xTaskPriorityInherit+0xc4>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800beda:	2301      	movs	r3, #1
 800bedc:	60fb      	str	r3, [r7, #12]
 800bede:	e008      	b.n	800bef2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bee4:	4b05      	ldr	r3, [pc, #20]	; (800befc <xTaskPriorityInherit+0xc4>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beea:	429a      	cmp	r2, r3
 800beec:	d201      	bcs.n	800bef2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800beee:	2301      	movs	r3, #1
 800bef0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bef2:	68fb      	ldr	r3, [r7, #12]
	}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3710      	adds	r7, #16
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}
 800befc:	200096b4 	.word	0x200096b4
 800bf00:	200096b8 	.word	0x200096b8
 800bf04:	20009b90 	.word	0x20009b90

0800bf08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b086      	sub	sp, #24
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bf14:	2300      	movs	r3, #0
 800bf16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d05a      	beq.n	800bfd4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bf1e:	4b30      	ldr	r3, [pc, #192]	; (800bfe0 <xTaskPriorityDisinherit+0xd8>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	693a      	ldr	r2, [r7, #16]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d00c      	beq.n	800bf42 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800bf28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf2c:	b672      	cpsid	i
 800bf2e:	f383 8811 	msr	BASEPRI, r3
 800bf32:	f3bf 8f6f 	isb	sy
 800bf36:	f3bf 8f4f 	dsb	sy
 800bf3a:	b662      	cpsie	i
 800bf3c:	60fb      	str	r3, [r7, #12]
}
 800bf3e:	bf00      	nop
 800bf40:	e7fe      	b.n	800bf40 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d10c      	bne.n	800bf64 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800bf4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf4e:	b672      	cpsid	i
 800bf50:	f383 8811 	msr	BASEPRI, r3
 800bf54:	f3bf 8f6f 	isb	sy
 800bf58:	f3bf 8f4f 	dsb	sy
 800bf5c:	b662      	cpsie	i
 800bf5e:	60bb      	str	r3, [r7, #8]
}
 800bf60:	bf00      	nop
 800bf62:	e7fe      	b.n	800bf62 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf68:	1e5a      	subs	r2, r3, #1
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d02c      	beq.n	800bfd4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d128      	bne.n	800bfd4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	3304      	adds	r3, #4
 800bf86:	4618      	mov	r0, r3
 800bf88:	f7fd ff9e 	bl	8009ec8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf90:	693b      	ldr	r3, [r7, #16]
 800bf92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfa4:	4b0f      	ldr	r3, [pc, #60]	; (800bfe4 <xTaskPriorityDisinherit+0xdc>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d903      	bls.n	800bfb4 <xTaskPriorityDisinherit+0xac>
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfb0:	4a0c      	ldr	r2, [pc, #48]	; (800bfe4 <xTaskPriorityDisinherit+0xdc>)
 800bfb2:	6013      	str	r3, [r2, #0]
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfb8:	4613      	mov	r3, r2
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	4413      	add	r3, r2
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	4a09      	ldr	r2, [pc, #36]	; (800bfe8 <xTaskPriorityDisinherit+0xe0>)
 800bfc2:	441a      	add	r2, r3
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	3304      	adds	r3, #4
 800bfc8:	4619      	mov	r1, r3
 800bfca:	4610      	mov	r0, r2
 800bfcc:	f7fd ff1f 	bl	8009e0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bfd4:	697b      	ldr	r3, [r7, #20]
	}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3718      	adds	r7, #24
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	200096b4 	.word	0x200096b4
 800bfe4:	20009b90 	.word	0x20009b90
 800bfe8:	200096b8 	.word	0x200096b8

0800bfec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b088      	sub	sp, #32
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bffa:	2301      	movs	r3, #1
 800bffc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d06e      	beq.n	800c0e2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c004:	69bb      	ldr	r3, [r7, #24]
 800c006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d10c      	bne.n	800c026 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800c00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c010:	b672      	cpsid	i
 800c012:	f383 8811 	msr	BASEPRI, r3
 800c016:	f3bf 8f6f 	isb	sy
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	b662      	cpsie	i
 800c020:	60fb      	str	r3, [r7, #12]
}
 800c022:	bf00      	nop
 800c024:	e7fe      	b.n	800c024 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c026:	69bb      	ldr	r3, [r7, #24]
 800c028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c02a:	683a      	ldr	r2, [r7, #0]
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d902      	bls.n	800c036 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	61fb      	str	r3, [r7, #28]
 800c034:	e002      	b.n	800c03c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c036:	69bb      	ldr	r3, [r7, #24]
 800c038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c03a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c040:	69fa      	ldr	r2, [r7, #28]
 800c042:	429a      	cmp	r2, r3
 800c044:	d04d      	beq.n	800c0e2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c046:	69bb      	ldr	r3, [r7, #24]
 800c048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c04a:	697a      	ldr	r2, [r7, #20]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d148      	bne.n	800c0e2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c050:	4b26      	ldr	r3, [pc, #152]	; (800c0ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	69ba      	ldr	r2, [r7, #24]
 800c056:	429a      	cmp	r2, r3
 800c058:	d10c      	bne.n	800c074 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800c05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c05e:	b672      	cpsid	i
 800c060:	f383 8811 	msr	BASEPRI, r3
 800c064:	f3bf 8f6f 	isb	sy
 800c068:	f3bf 8f4f 	dsb	sy
 800c06c:	b662      	cpsie	i
 800c06e:	60bb      	str	r3, [r7, #8]
}
 800c070:	bf00      	nop
 800c072:	e7fe      	b.n	800c072 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c074:	69bb      	ldr	r3, [r7, #24]
 800c076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c078:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c07a:	69bb      	ldr	r3, [r7, #24]
 800c07c:	69fa      	ldr	r2, [r7, #28]
 800c07e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c080:	69bb      	ldr	r3, [r7, #24]
 800c082:	699b      	ldr	r3, [r3, #24]
 800c084:	2b00      	cmp	r3, #0
 800c086:	db04      	blt.n	800c092 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c088:	69fb      	ldr	r3, [r7, #28]
 800c08a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c08e:	69bb      	ldr	r3, [r7, #24]
 800c090:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c092:	69bb      	ldr	r3, [r7, #24]
 800c094:	6959      	ldr	r1, [r3, #20]
 800c096:	693a      	ldr	r2, [r7, #16]
 800c098:	4613      	mov	r3, r2
 800c09a:	009b      	lsls	r3, r3, #2
 800c09c:	4413      	add	r3, r2
 800c09e:	009b      	lsls	r3, r3, #2
 800c0a0:	4a13      	ldr	r2, [pc, #76]	; (800c0f0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c0a2:	4413      	add	r3, r2
 800c0a4:	4299      	cmp	r1, r3
 800c0a6:	d11c      	bne.n	800c0e2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0a8:	69bb      	ldr	r3, [r7, #24]
 800c0aa:	3304      	adds	r3, #4
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f7fd ff0b 	bl	8009ec8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c0b2:	69bb      	ldr	r3, [r7, #24]
 800c0b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0b6:	4b0f      	ldr	r3, [pc, #60]	; (800c0f4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d903      	bls.n	800c0c6 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800c0be:	69bb      	ldr	r3, [r7, #24]
 800c0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0c2:	4a0c      	ldr	r2, [pc, #48]	; (800c0f4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800c0c4:	6013      	str	r3, [r2, #0]
 800c0c6:	69bb      	ldr	r3, [r7, #24]
 800c0c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ca:	4613      	mov	r3, r2
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	4413      	add	r3, r2
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	4a07      	ldr	r2, [pc, #28]	; (800c0f0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c0d4:	441a      	add	r2, r3
 800c0d6:	69bb      	ldr	r3, [r7, #24]
 800c0d8:	3304      	adds	r3, #4
 800c0da:	4619      	mov	r1, r3
 800c0dc:	4610      	mov	r0, r2
 800c0de:	f7fd fe96 	bl	8009e0e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c0e2:	bf00      	nop
 800c0e4:	3720      	adds	r7, #32
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	bf00      	nop
 800c0ec:	200096b4 	.word	0x200096b4
 800c0f0:	200096b8 	.word	0x200096b8
 800c0f4:	20009b90 	.word	0x20009b90

0800c0f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c0f8:	b480      	push	{r7}
 800c0fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c0fc:	4b07      	ldr	r3, [pc, #28]	; (800c11c <pvTaskIncrementMutexHeldCount+0x24>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d004      	beq.n	800c10e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c104:	4b05      	ldr	r3, [pc, #20]	; (800c11c <pvTaskIncrementMutexHeldCount+0x24>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c10a:	3201      	adds	r2, #1
 800c10c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c10e:	4b03      	ldr	r3, [pc, #12]	; (800c11c <pvTaskIncrementMutexHeldCount+0x24>)
 800c110:	681b      	ldr	r3, [r3, #0]
	}
 800c112:	4618      	mov	r0, r3
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr
 800c11c:	200096b4 	.word	0x200096b4

0800c120 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c12a:	4b21      	ldr	r3, [pc, #132]	; (800c1b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c130:	4b20      	ldr	r3, [pc, #128]	; (800c1b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	3304      	adds	r3, #4
 800c136:	4618      	mov	r0, r3
 800c138:	f7fd fec6 	bl	8009ec8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c142:	d10a      	bne.n	800c15a <prvAddCurrentTaskToDelayedList+0x3a>
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d007      	beq.n	800c15a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c14a:	4b1a      	ldr	r3, [pc, #104]	; (800c1b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	3304      	adds	r3, #4
 800c150:	4619      	mov	r1, r3
 800c152:	4819      	ldr	r0, [pc, #100]	; (800c1b8 <prvAddCurrentTaskToDelayedList+0x98>)
 800c154:	f7fd fe5b 	bl	8009e0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c158:	e026      	b.n	800c1a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c15a:	68fa      	ldr	r2, [r7, #12]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	4413      	add	r3, r2
 800c160:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c162:	4b14      	ldr	r3, [pc, #80]	; (800c1b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	68ba      	ldr	r2, [r7, #8]
 800c168:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c16a:	68ba      	ldr	r2, [r7, #8]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	429a      	cmp	r2, r3
 800c170:	d209      	bcs.n	800c186 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c172:	4b12      	ldr	r3, [pc, #72]	; (800c1bc <prvAddCurrentTaskToDelayedList+0x9c>)
 800c174:	681a      	ldr	r2, [r3, #0]
 800c176:	4b0f      	ldr	r3, [pc, #60]	; (800c1b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	3304      	adds	r3, #4
 800c17c:	4619      	mov	r1, r3
 800c17e:	4610      	mov	r0, r2
 800c180:	f7fd fe69 	bl	8009e56 <vListInsert>
}
 800c184:	e010      	b.n	800c1a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c186:	4b0e      	ldr	r3, [pc, #56]	; (800c1c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c188:	681a      	ldr	r2, [r3, #0]
 800c18a:	4b0a      	ldr	r3, [pc, #40]	; (800c1b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	3304      	adds	r3, #4
 800c190:	4619      	mov	r1, r3
 800c192:	4610      	mov	r0, r2
 800c194:	f7fd fe5f 	bl	8009e56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c198:	4b0a      	ldr	r3, [pc, #40]	; (800c1c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	68ba      	ldr	r2, [r7, #8]
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d202      	bcs.n	800c1a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c1a2:	4a08      	ldr	r2, [pc, #32]	; (800c1c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	6013      	str	r3, [r2, #0]
}
 800c1a8:	bf00      	nop
 800c1aa:	3710      	adds	r7, #16
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}
 800c1b0:	20009b8c 	.word	0x20009b8c
 800c1b4:	200096b4 	.word	0x200096b4
 800c1b8:	20009b74 	.word	0x20009b74
 800c1bc:	20009b44 	.word	0x20009b44
 800c1c0:	20009b40 	.word	0x20009b40
 800c1c4:	20009ba8 	.word	0x20009ba8

0800c1c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b08a      	sub	sp, #40	; 0x28
 800c1cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c1d2:	f000 fb15 	bl	800c800 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c1d6:	4b1d      	ldr	r3, [pc, #116]	; (800c24c <xTimerCreateTimerTask+0x84>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d021      	beq.n	800c222 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c1e6:	1d3a      	adds	r2, r7, #4
 800c1e8:	f107 0108 	add.w	r1, r7, #8
 800c1ec:	f107 030c 	add.w	r3, r7, #12
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f7fd fdc5 	bl	8009d80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c1f6:	6879      	ldr	r1, [r7, #4]
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	68fa      	ldr	r2, [r7, #12]
 800c1fc:	9202      	str	r2, [sp, #8]
 800c1fe:	9301      	str	r3, [sp, #4]
 800c200:	2302      	movs	r3, #2
 800c202:	9300      	str	r3, [sp, #0]
 800c204:	2300      	movs	r3, #0
 800c206:	460a      	mov	r2, r1
 800c208:	4911      	ldr	r1, [pc, #68]	; (800c250 <xTimerCreateTimerTask+0x88>)
 800c20a:	4812      	ldr	r0, [pc, #72]	; (800c254 <xTimerCreateTimerTask+0x8c>)
 800c20c:	f7fe ff96 	bl	800b13c <xTaskCreateStatic>
 800c210:	4603      	mov	r3, r0
 800c212:	4a11      	ldr	r2, [pc, #68]	; (800c258 <xTimerCreateTimerTask+0x90>)
 800c214:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c216:	4b10      	ldr	r3, [pc, #64]	; (800c258 <xTimerCreateTimerTask+0x90>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d001      	beq.n	800c222 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c21e:	2301      	movs	r3, #1
 800c220:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d10c      	bne.n	800c242 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800c228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c22c:	b672      	cpsid	i
 800c22e:	f383 8811 	msr	BASEPRI, r3
 800c232:	f3bf 8f6f 	isb	sy
 800c236:	f3bf 8f4f 	dsb	sy
 800c23a:	b662      	cpsie	i
 800c23c:	613b      	str	r3, [r7, #16]
}
 800c23e:	bf00      	nop
 800c240:	e7fe      	b.n	800c240 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800c242:	697b      	ldr	r3, [r7, #20]
}
 800c244:	4618      	mov	r0, r3
 800c246:	3718      	adds	r7, #24
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}
 800c24c:	20009be4 	.word	0x20009be4
 800c250:	080185dc 	.word	0x080185dc
 800c254:	0800c399 	.word	0x0800c399
 800c258:	20009be8 	.word	0x20009be8

0800c25c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b08a      	sub	sp, #40	; 0x28
 800c260:	af00      	add	r7, sp, #0
 800c262:	60f8      	str	r0, [r7, #12]
 800c264:	60b9      	str	r1, [r7, #8]
 800c266:	607a      	str	r2, [r7, #4]
 800c268:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c26a:	2300      	movs	r3, #0
 800c26c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d10c      	bne.n	800c28e <xTimerGenericCommand+0x32>
	__asm volatile
 800c274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c278:	b672      	cpsid	i
 800c27a:	f383 8811 	msr	BASEPRI, r3
 800c27e:	f3bf 8f6f 	isb	sy
 800c282:	f3bf 8f4f 	dsb	sy
 800c286:	b662      	cpsie	i
 800c288:	623b      	str	r3, [r7, #32]
}
 800c28a:	bf00      	nop
 800c28c:	e7fe      	b.n	800c28c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c28e:	4b1a      	ldr	r3, [pc, #104]	; (800c2f8 <xTimerGenericCommand+0x9c>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d02a      	beq.n	800c2ec <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	2b05      	cmp	r3, #5
 800c2a6:	dc18      	bgt.n	800c2da <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c2a8:	f7ff fda8 	bl	800bdfc <xTaskGetSchedulerState>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	2b02      	cmp	r3, #2
 800c2b0:	d109      	bne.n	800c2c6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c2b2:	4b11      	ldr	r3, [pc, #68]	; (800c2f8 <xTimerGenericCommand+0x9c>)
 800c2b4:	6818      	ldr	r0, [r3, #0]
 800c2b6:	f107 0110 	add.w	r1, r7, #16
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2be:	f7fe f8ab 	bl	800a418 <xQueueGenericSend>
 800c2c2:	6278      	str	r0, [r7, #36]	; 0x24
 800c2c4:	e012      	b.n	800c2ec <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c2c6:	4b0c      	ldr	r3, [pc, #48]	; (800c2f8 <xTimerGenericCommand+0x9c>)
 800c2c8:	6818      	ldr	r0, [r3, #0]
 800c2ca:	f107 0110 	add.w	r1, r7, #16
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	f7fe f8a1 	bl	800a418 <xQueueGenericSend>
 800c2d6:	6278      	str	r0, [r7, #36]	; 0x24
 800c2d8:	e008      	b.n	800c2ec <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c2da:	4b07      	ldr	r3, [pc, #28]	; (800c2f8 <xTimerGenericCommand+0x9c>)
 800c2dc:	6818      	ldr	r0, [r3, #0]
 800c2de:	f107 0110 	add.w	r1, r7, #16
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	683a      	ldr	r2, [r7, #0]
 800c2e6:	f7fe f99d 	bl	800a624 <xQueueGenericSendFromISR>
 800c2ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3728      	adds	r7, #40	; 0x28
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	20009be4 	.word	0x20009be4

0800c2fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b088      	sub	sp, #32
 800c300:	af02      	add	r7, sp, #8
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c306:	4b23      	ldr	r3, [pc, #140]	; (800c394 <prvProcessExpiredTimer+0x98>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	68db      	ldr	r3, [r3, #12]
 800c30c:	68db      	ldr	r3, [r3, #12]
 800c30e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	3304      	adds	r3, #4
 800c314:	4618      	mov	r0, r3
 800c316:	f7fd fdd7 	bl	8009ec8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c320:	f003 0304 	and.w	r3, r3, #4
 800c324:	2b00      	cmp	r3, #0
 800c326:	d024      	beq.n	800c372 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	699a      	ldr	r2, [r3, #24]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	18d1      	adds	r1, r2, r3
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	683a      	ldr	r2, [r7, #0]
 800c334:	6978      	ldr	r0, [r7, #20]
 800c336:	f000 f8d3 	bl	800c4e0 <prvInsertTimerInActiveList>
 800c33a:	4603      	mov	r3, r0
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d021      	beq.n	800c384 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c340:	2300      	movs	r3, #0
 800c342:	9300      	str	r3, [sp, #0]
 800c344:	2300      	movs	r3, #0
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	2100      	movs	r1, #0
 800c34a:	6978      	ldr	r0, [r7, #20]
 800c34c:	f7ff ff86 	bl	800c25c <xTimerGenericCommand>
 800c350:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d115      	bne.n	800c384 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800c358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c35c:	b672      	cpsid	i
 800c35e:	f383 8811 	msr	BASEPRI, r3
 800c362:	f3bf 8f6f 	isb	sy
 800c366:	f3bf 8f4f 	dsb	sy
 800c36a:	b662      	cpsie	i
 800c36c:	60fb      	str	r3, [r7, #12]
}
 800c36e:	bf00      	nop
 800c370:	e7fe      	b.n	800c370 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c378:	f023 0301 	bic.w	r3, r3, #1
 800c37c:	b2da      	uxtb	r2, r3
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	6a1b      	ldr	r3, [r3, #32]
 800c388:	6978      	ldr	r0, [r7, #20]
 800c38a:	4798      	blx	r3
}
 800c38c:	bf00      	nop
 800c38e:	3718      	adds	r7, #24
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}
 800c394:	20009bdc 	.word	0x20009bdc

0800c398 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c3a0:	f107 0308 	add.w	r3, r7, #8
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f000 f857 	bl	800c458 <prvGetNextExpireTime>
 800c3aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	68f8      	ldr	r0, [r7, #12]
 800c3b2:	f000 f803 	bl	800c3bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c3b6:	f000 f8d5 	bl	800c564 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c3ba:	e7f1      	b.n	800c3a0 <prvTimerTask+0x8>

0800c3bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c3c6:	f7ff f903 	bl	800b5d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c3ca:	f107 0308 	add.w	r3, r7, #8
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f000 f866 	bl	800c4a0 <prvSampleTimeNow>
 800c3d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d130      	bne.n	800c43e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d10a      	bne.n	800c3f8 <prvProcessTimerOrBlockTask+0x3c>
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d806      	bhi.n	800c3f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c3ea:	f7ff f8ff 	bl	800b5ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c3ee:	68f9      	ldr	r1, [r7, #12]
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f7ff ff83 	bl	800c2fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c3f6:	e024      	b.n	800c442 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d008      	beq.n	800c410 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c3fe:	4b13      	ldr	r3, [pc, #76]	; (800c44c <prvProcessTimerOrBlockTask+0x90>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d101      	bne.n	800c40c <prvProcessTimerOrBlockTask+0x50>
 800c408:	2301      	movs	r3, #1
 800c40a:	e000      	b.n	800c40e <prvProcessTimerOrBlockTask+0x52>
 800c40c:	2300      	movs	r3, #0
 800c40e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c410:	4b0f      	ldr	r3, [pc, #60]	; (800c450 <prvProcessTimerOrBlockTask+0x94>)
 800c412:	6818      	ldr	r0, [r3, #0]
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	1ad3      	subs	r3, r2, r3
 800c41a:	683a      	ldr	r2, [r7, #0]
 800c41c:	4619      	mov	r1, r3
 800c41e:	f7fe fe59 	bl	800b0d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c422:	f7ff f8e3 	bl	800b5ec <xTaskResumeAll>
 800c426:	4603      	mov	r3, r0
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d10a      	bne.n	800c442 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c42c:	4b09      	ldr	r3, [pc, #36]	; (800c454 <prvProcessTimerOrBlockTask+0x98>)
 800c42e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c432:	601a      	str	r2, [r3, #0]
 800c434:	f3bf 8f4f 	dsb	sy
 800c438:	f3bf 8f6f 	isb	sy
}
 800c43c:	e001      	b.n	800c442 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c43e:	f7ff f8d5 	bl	800b5ec <xTaskResumeAll>
}
 800c442:	bf00      	nop
 800c444:	3710      	adds	r7, #16
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	bf00      	nop
 800c44c:	20009be0 	.word	0x20009be0
 800c450:	20009be4 	.word	0x20009be4
 800c454:	e000ed04 	.word	0xe000ed04

0800c458 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c458:	b480      	push	{r7}
 800c45a:	b085      	sub	sp, #20
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c460:	4b0e      	ldr	r3, [pc, #56]	; (800c49c <prvGetNextExpireTime+0x44>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d101      	bne.n	800c46e <prvGetNextExpireTime+0x16>
 800c46a:	2201      	movs	r2, #1
 800c46c:	e000      	b.n	800c470 <prvGetNextExpireTime+0x18>
 800c46e:	2200      	movs	r2, #0
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d105      	bne.n	800c488 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c47c:	4b07      	ldr	r3, [pc, #28]	; (800c49c <prvGetNextExpireTime+0x44>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	68db      	ldr	r3, [r3, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	60fb      	str	r3, [r7, #12]
 800c486:	e001      	b.n	800c48c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c488:	2300      	movs	r3, #0
 800c48a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c48c:	68fb      	ldr	r3, [r7, #12]
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3714      	adds	r7, #20
 800c492:	46bd      	mov	sp, r7
 800c494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c498:	4770      	bx	lr
 800c49a:	bf00      	nop
 800c49c:	20009bdc 	.word	0x20009bdc

0800c4a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c4a8:	f7ff f940 	bl	800b72c <xTaskGetTickCount>
 800c4ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c4ae:	4b0b      	ldr	r3, [pc, #44]	; (800c4dc <prvSampleTimeNow+0x3c>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	68fa      	ldr	r2, [r7, #12]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d205      	bcs.n	800c4c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c4b8:	f000 f93c 	bl	800c734 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2201      	movs	r2, #1
 800c4c0:	601a      	str	r2, [r3, #0]
 800c4c2:	e002      	b.n	800c4ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c4ca:	4a04      	ldr	r2, [pc, #16]	; (800c4dc <prvSampleTimeNow+0x3c>)
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3710      	adds	r7, #16
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}
 800c4da:	bf00      	nop
 800c4dc:	20009bec 	.word	0x20009bec

0800c4e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b086      	sub	sp, #24
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	60f8      	str	r0, [r7, #12]
 800c4e8:	60b9      	str	r1, [r7, #8]
 800c4ea:	607a      	str	r2, [r7, #4]
 800c4ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	68ba      	ldr	r2, [r7, #8]
 800c4f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	68fa      	ldr	r2, [r7, #12]
 800c4fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c4fe:	68ba      	ldr	r2, [r7, #8]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	429a      	cmp	r2, r3
 800c504:	d812      	bhi.n	800c52c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c506:	687a      	ldr	r2, [r7, #4]
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	1ad2      	subs	r2, r2, r3
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	699b      	ldr	r3, [r3, #24]
 800c510:	429a      	cmp	r2, r3
 800c512:	d302      	bcc.n	800c51a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c514:	2301      	movs	r3, #1
 800c516:	617b      	str	r3, [r7, #20]
 800c518:	e01b      	b.n	800c552 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c51a:	4b10      	ldr	r3, [pc, #64]	; (800c55c <prvInsertTimerInActiveList+0x7c>)
 800c51c:	681a      	ldr	r2, [r3, #0]
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	3304      	adds	r3, #4
 800c522:	4619      	mov	r1, r3
 800c524:	4610      	mov	r0, r2
 800c526:	f7fd fc96 	bl	8009e56 <vListInsert>
 800c52a:	e012      	b.n	800c552 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	429a      	cmp	r2, r3
 800c532:	d206      	bcs.n	800c542 <prvInsertTimerInActiveList+0x62>
 800c534:	68ba      	ldr	r2, [r7, #8]
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	429a      	cmp	r2, r3
 800c53a:	d302      	bcc.n	800c542 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c53c:	2301      	movs	r3, #1
 800c53e:	617b      	str	r3, [r7, #20]
 800c540:	e007      	b.n	800c552 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c542:	4b07      	ldr	r3, [pc, #28]	; (800c560 <prvInsertTimerInActiveList+0x80>)
 800c544:	681a      	ldr	r2, [r3, #0]
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	3304      	adds	r3, #4
 800c54a:	4619      	mov	r1, r3
 800c54c:	4610      	mov	r0, r2
 800c54e:	f7fd fc82 	bl	8009e56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c552:	697b      	ldr	r3, [r7, #20]
}
 800c554:	4618      	mov	r0, r3
 800c556:	3718      	adds	r7, #24
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}
 800c55c:	20009be0 	.word	0x20009be0
 800c560:	20009bdc 	.word	0x20009bdc

0800c564 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b08e      	sub	sp, #56	; 0x38
 800c568:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c56a:	e0d0      	b.n	800c70e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	da1a      	bge.n	800c5a8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c572:	1d3b      	adds	r3, r7, #4
 800c574:	3304      	adds	r3, #4
 800c576:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d10c      	bne.n	800c598 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800c57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c582:	b672      	cpsid	i
 800c584:	f383 8811 	msr	BASEPRI, r3
 800c588:	f3bf 8f6f 	isb	sy
 800c58c:	f3bf 8f4f 	dsb	sy
 800c590:	b662      	cpsie	i
 800c592:	61fb      	str	r3, [r7, #28]
}
 800c594:	bf00      	nop
 800c596:	e7fe      	b.n	800c596 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c59e:	6850      	ldr	r0, [r2, #4]
 800c5a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5a2:	6892      	ldr	r2, [r2, #8]
 800c5a4:	4611      	mov	r1, r2
 800c5a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	f2c0 80ae 	blt.w	800c70c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b6:	695b      	ldr	r3, [r3, #20]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d004      	beq.n	800c5c6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5be:	3304      	adds	r3, #4
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7fd fc81 	bl	8009ec8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c5c6:	463b      	mov	r3, r7
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7ff ff69 	bl	800c4a0 <prvSampleTimeNow>
 800c5ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2b09      	cmp	r3, #9
 800c5d4:	f200 809b 	bhi.w	800c70e <prvProcessReceivedCommands+0x1aa>
 800c5d8:	a201      	add	r2, pc, #4	; (adr r2, 800c5e0 <prvProcessReceivedCommands+0x7c>)
 800c5da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5de:	bf00      	nop
 800c5e0:	0800c609 	.word	0x0800c609
 800c5e4:	0800c609 	.word	0x0800c609
 800c5e8:	0800c609 	.word	0x0800c609
 800c5ec:	0800c681 	.word	0x0800c681
 800c5f0:	0800c695 	.word	0x0800c695
 800c5f4:	0800c6e3 	.word	0x0800c6e3
 800c5f8:	0800c609 	.word	0x0800c609
 800c5fc:	0800c609 	.word	0x0800c609
 800c600:	0800c681 	.word	0x0800c681
 800c604:	0800c695 	.word	0x0800c695
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c60e:	f043 0301 	orr.w	r3, r3, #1
 800c612:	b2da      	uxtb	r2, r3
 800c614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c616:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c61a:	68ba      	ldr	r2, [r7, #8]
 800c61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c61e:	699b      	ldr	r3, [r3, #24]
 800c620:	18d1      	adds	r1, r2, r3
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c628:	f7ff ff5a 	bl	800c4e0 <prvInsertTimerInActiveList>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d06d      	beq.n	800c70e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c634:	6a1b      	ldr	r3, [r3, #32]
 800c636:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c638:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c63c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c640:	f003 0304 	and.w	r3, r3, #4
 800c644:	2b00      	cmp	r3, #0
 800c646:	d062      	beq.n	800c70e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c648:	68ba      	ldr	r2, [r7, #8]
 800c64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c64c:	699b      	ldr	r3, [r3, #24]
 800c64e:	441a      	add	r2, r3
 800c650:	2300      	movs	r3, #0
 800c652:	9300      	str	r3, [sp, #0]
 800c654:	2300      	movs	r3, #0
 800c656:	2100      	movs	r1, #0
 800c658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c65a:	f7ff fdff 	bl	800c25c <xTimerGenericCommand>
 800c65e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c660:	6a3b      	ldr	r3, [r7, #32]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d153      	bne.n	800c70e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800c666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66a:	b672      	cpsid	i
 800c66c:	f383 8811 	msr	BASEPRI, r3
 800c670:	f3bf 8f6f 	isb	sy
 800c674:	f3bf 8f4f 	dsb	sy
 800c678:	b662      	cpsie	i
 800c67a:	61bb      	str	r3, [r7, #24]
}
 800c67c:	bf00      	nop
 800c67e:	e7fe      	b.n	800c67e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c682:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c686:	f023 0301 	bic.w	r3, r3, #1
 800c68a:	b2da      	uxtb	r2, r3
 800c68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c68e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c692:	e03c      	b.n	800c70e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c696:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c69a:	f043 0301 	orr.w	r3, r3, #1
 800c69e:	b2da      	uxtb	r2, r3
 800c6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c6a6:	68ba      	ldr	r2, [r7, #8]
 800c6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ae:	699b      	ldr	r3, [r3, #24]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d10c      	bne.n	800c6ce <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800c6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b8:	b672      	cpsid	i
 800c6ba:	f383 8811 	msr	BASEPRI, r3
 800c6be:	f3bf 8f6f 	isb	sy
 800c6c2:	f3bf 8f4f 	dsb	sy
 800c6c6:	b662      	cpsie	i
 800c6c8:	617b      	str	r3, [r7, #20]
}
 800c6ca:	bf00      	nop
 800c6cc:	e7fe      	b.n	800c6cc <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d0:	699a      	ldr	r2, [r3, #24]
 800c6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d4:	18d1      	adds	r1, r2, r3
 800c6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6dc:	f7ff ff00 	bl	800c4e0 <prvInsertTimerInActiveList>
					break;
 800c6e0:	e015      	b.n	800c70e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6e8:	f003 0302 	and.w	r3, r3, #2
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d103      	bne.n	800c6f8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800c6f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6f2:	f000 fbc9 	bl	800ce88 <vPortFree>
 800c6f6:	e00a      	b.n	800c70e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6fe:	f023 0301 	bic.w	r3, r3, #1
 800c702:	b2da      	uxtb	r2, r3
 800c704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c706:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c70a:	e000      	b.n	800c70e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c70c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c70e:	4b08      	ldr	r3, [pc, #32]	; (800c730 <prvProcessReceivedCommands+0x1cc>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	1d39      	adds	r1, r7, #4
 800c714:	2200      	movs	r2, #0
 800c716:	4618      	mov	r0, r3
 800c718:	f7fe f8ba 	bl	800a890 <xQueueReceive>
 800c71c:	4603      	mov	r3, r0
 800c71e:	2b00      	cmp	r3, #0
 800c720:	f47f af24 	bne.w	800c56c <prvProcessReceivedCommands+0x8>
	}
}
 800c724:	bf00      	nop
 800c726:	bf00      	nop
 800c728:	3730      	adds	r7, #48	; 0x30
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}
 800c72e:	bf00      	nop
 800c730:	20009be4 	.word	0x20009be4

0800c734 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b088      	sub	sp, #32
 800c738:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c73a:	e04a      	b.n	800c7d2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c73c:	4b2e      	ldr	r3, [pc, #184]	; (800c7f8 <prvSwitchTimerLists+0xc4>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	68db      	ldr	r3, [r3, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c746:	4b2c      	ldr	r3, [pc, #176]	; (800c7f8 <prvSwitchTimerLists+0xc4>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	68db      	ldr	r3, [r3, #12]
 800c74c:	68db      	ldr	r3, [r3, #12]
 800c74e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	3304      	adds	r3, #4
 800c754:	4618      	mov	r0, r3
 800c756:	f7fd fbb7 	bl	8009ec8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	6a1b      	ldr	r3, [r3, #32]
 800c75e:	68f8      	ldr	r0, [r7, #12]
 800c760:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c768:	f003 0304 	and.w	r3, r3, #4
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d030      	beq.n	800c7d2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	699b      	ldr	r3, [r3, #24]
 800c774:	693a      	ldr	r2, [r7, #16]
 800c776:	4413      	add	r3, r2
 800c778:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c77a:	68ba      	ldr	r2, [r7, #8]
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	429a      	cmp	r2, r3
 800c780:	d90e      	bls.n	800c7a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	68ba      	ldr	r2, [r7, #8]
 800c786:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	68fa      	ldr	r2, [r7, #12]
 800c78c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c78e:	4b1a      	ldr	r3, [pc, #104]	; (800c7f8 <prvSwitchTimerLists+0xc4>)
 800c790:	681a      	ldr	r2, [r3, #0]
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	3304      	adds	r3, #4
 800c796:	4619      	mov	r1, r3
 800c798:	4610      	mov	r0, r2
 800c79a:	f7fd fb5c 	bl	8009e56 <vListInsert>
 800c79e:	e018      	b.n	800c7d2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	9300      	str	r3, [sp, #0]
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	693a      	ldr	r2, [r7, #16]
 800c7a8:	2100      	movs	r1, #0
 800c7aa:	68f8      	ldr	r0, [r7, #12]
 800c7ac:	f7ff fd56 	bl	800c25c <xTimerGenericCommand>
 800c7b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d10c      	bne.n	800c7d2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800c7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7bc:	b672      	cpsid	i
 800c7be:	f383 8811 	msr	BASEPRI, r3
 800c7c2:	f3bf 8f6f 	isb	sy
 800c7c6:	f3bf 8f4f 	dsb	sy
 800c7ca:	b662      	cpsie	i
 800c7cc:	603b      	str	r3, [r7, #0]
}
 800c7ce:	bf00      	nop
 800c7d0:	e7fe      	b.n	800c7d0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c7d2:	4b09      	ldr	r3, [pc, #36]	; (800c7f8 <prvSwitchTimerLists+0xc4>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d1af      	bne.n	800c73c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c7dc:	4b06      	ldr	r3, [pc, #24]	; (800c7f8 <prvSwitchTimerLists+0xc4>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c7e2:	4b06      	ldr	r3, [pc, #24]	; (800c7fc <prvSwitchTimerLists+0xc8>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4a04      	ldr	r2, [pc, #16]	; (800c7f8 <prvSwitchTimerLists+0xc4>)
 800c7e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c7ea:	4a04      	ldr	r2, [pc, #16]	; (800c7fc <prvSwitchTimerLists+0xc8>)
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	6013      	str	r3, [r2, #0]
}
 800c7f0:	bf00      	nop
 800c7f2:	3718      	adds	r7, #24
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}
 800c7f8:	20009bdc 	.word	0x20009bdc
 800c7fc:	20009be0 	.word	0x20009be0

0800c800 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c806:	f000 f949 	bl	800ca9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c80a:	4b15      	ldr	r3, [pc, #84]	; (800c860 <prvCheckForValidListAndQueue+0x60>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d120      	bne.n	800c854 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c812:	4814      	ldr	r0, [pc, #80]	; (800c864 <prvCheckForValidListAndQueue+0x64>)
 800c814:	f7fd face 	bl	8009db4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c818:	4813      	ldr	r0, [pc, #76]	; (800c868 <prvCheckForValidListAndQueue+0x68>)
 800c81a:	f7fd facb 	bl	8009db4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c81e:	4b13      	ldr	r3, [pc, #76]	; (800c86c <prvCheckForValidListAndQueue+0x6c>)
 800c820:	4a10      	ldr	r2, [pc, #64]	; (800c864 <prvCheckForValidListAndQueue+0x64>)
 800c822:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c824:	4b12      	ldr	r3, [pc, #72]	; (800c870 <prvCheckForValidListAndQueue+0x70>)
 800c826:	4a10      	ldr	r2, [pc, #64]	; (800c868 <prvCheckForValidListAndQueue+0x68>)
 800c828:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c82a:	2300      	movs	r3, #0
 800c82c:	9300      	str	r3, [sp, #0]
 800c82e:	4b11      	ldr	r3, [pc, #68]	; (800c874 <prvCheckForValidListAndQueue+0x74>)
 800c830:	4a11      	ldr	r2, [pc, #68]	; (800c878 <prvCheckForValidListAndQueue+0x78>)
 800c832:	2110      	movs	r1, #16
 800c834:	200a      	movs	r0, #10
 800c836:	f7fd fbdb 	bl	8009ff0 <xQueueGenericCreateStatic>
 800c83a:	4603      	mov	r3, r0
 800c83c:	4a08      	ldr	r2, [pc, #32]	; (800c860 <prvCheckForValidListAndQueue+0x60>)
 800c83e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c840:	4b07      	ldr	r3, [pc, #28]	; (800c860 <prvCheckForValidListAndQueue+0x60>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d005      	beq.n	800c854 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c848:	4b05      	ldr	r3, [pc, #20]	; (800c860 <prvCheckForValidListAndQueue+0x60>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	490b      	ldr	r1, [pc, #44]	; (800c87c <prvCheckForValidListAndQueue+0x7c>)
 800c84e:	4618      	mov	r0, r3
 800c850:	f7fe fbec 	bl	800b02c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c854:	f000 f956 	bl	800cb04 <vPortExitCritical>
}
 800c858:	bf00      	nop
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	20009be4 	.word	0x20009be4
 800c864:	20009bb4 	.word	0x20009bb4
 800c868:	20009bc8 	.word	0x20009bc8
 800c86c:	20009bdc 	.word	0x20009bdc
 800c870:	20009be0 	.word	0x20009be0
 800c874:	20009c90 	.word	0x20009c90
 800c878:	20009bf0 	.word	0x20009bf0
 800c87c:	080185e4 	.word	0x080185e4

0800c880 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c880:	b480      	push	{r7}
 800c882:	b085      	sub	sp, #20
 800c884:	af00      	add	r7, sp, #0
 800c886:	60f8      	str	r0, [r7, #12]
 800c888:	60b9      	str	r1, [r7, #8]
 800c88a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	3b04      	subs	r3, #4
 800c890:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	3b04      	subs	r3, #4
 800c89e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	f023 0201 	bic.w	r2, r3, #1
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	3b04      	subs	r3, #4
 800c8ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c8b0:	4a0c      	ldr	r2, [pc, #48]	; (800c8e4 <pxPortInitialiseStack+0x64>)
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	3b14      	subs	r3, #20
 800c8ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	3b04      	subs	r3, #4
 800c8c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f06f 0202 	mvn.w	r2, #2
 800c8ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	3b20      	subs	r3, #32
 800c8d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3714      	adds	r7, #20
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr
 800c8e4:	0800c8e9 	.word	0x0800c8e9

0800c8e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b085      	sub	sp, #20
 800c8ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c8f2:	4b14      	ldr	r3, [pc, #80]	; (800c944 <prvTaskExitError+0x5c>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8fa:	d00c      	beq.n	800c916 <prvTaskExitError+0x2e>
	__asm volatile
 800c8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c900:	b672      	cpsid	i
 800c902:	f383 8811 	msr	BASEPRI, r3
 800c906:	f3bf 8f6f 	isb	sy
 800c90a:	f3bf 8f4f 	dsb	sy
 800c90e:	b662      	cpsie	i
 800c910:	60fb      	str	r3, [r7, #12]
}
 800c912:	bf00      	nop
 800c914:	e7fe      	b.n	800c914 <prvTaskExitError+0x2c>
	__asm volatile
 800c916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c91a:	b672      	cpsid	i
 800c91c:	f383 8811 	msr	BASEPRI, r3
 800c920:	f3bf 8f6f 	isb	sy
 800c924:	f3bf 8f4f 	dsb	sy
 800c928:	b662      	cpsie	i
 800c92a:	60bb      	str	r3, [r7, #8]
}
 800c92c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c92e:	bf00      	nop
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d0fc      	beq.n	800c930 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c936:	bf00      	nop
 800c938:	bf00      	nop
 800c93a:	3714      	adds	r7, #20
 800c93c:	46bd      	mov	sp, r7
 800c93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c942:	4770      	bx	lr
 800c944:	20000020 	.word	0x20000020
	...

0800c950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c950:	4b07      	ldr	r3, [pc, #28]	; (800c970 <pxCurrentTCBConst2>)
 800c952:	6819      	ldr	r1, [r3, #0]
 800c954:	6808      	ldr	r0, [r1, #0]
 800c956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c95a:	f380 8809 	msr	PSP, r0
 800c95e:	f3bf 8f6f 	isb	sy
 800c962:	f04f 0000 	mov.w	r0, #0
 800c966:	f380 8811 	msr	BASEPRI, r0
 800c96a:	4770      	bx	lr
 800c96c:	f3af 8000 	nop.w

0800c970 <pxCurrentTCBConst2>:
 800c970:	200096b4 	.word	0x200096b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c974:	bf00      	nop
 800c976:	bf00      	nop

0800c978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c978:	4808      	ldr	r0, [pc, #32]	; (800c99c <prvPortStartFirstTask+0x24>)
 800c97a:	6800      	ldr	r0, [r0, #0]
 800c97c:	6800      	ldr	r0, [r0, #0]
 800c97e:	f380 8808 	msr	MSP, r0
 800c982:	f04f 0000 	mov.w	r0, #0
 800c986:	f380 8814 	msr	CONTROL, r0
 800c98a:	b662      	cpsie	i
 800c98c:	b661      	cpsie	f
 800c98e:	f3bf 8f4f 	dsb	sy
 800c992:	f3bf 8f6f 	isb	sy
 800c996:	df00      	svc	0
 800c998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c99a:	bf00      	nop
 800c99c:	e000ed08 	.word	0xe000ed08

0800c9a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b084      	sub	sp, #16
 800c9a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c9a6:	4b37      	ldr	r3, [pc, #220]	; (800ca84 <xPortStartScheduler+0xe4>)
 800c9a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	b2db      	uxtb	r3, r3
 800c9b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	22ff      	movs	r2, #255	; 0xff
 800c9b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	b2db      	uxtb	r3, r3
 800c9be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c9c0:	78fb      	ldrb	r3, [r7, #3]
 800c9c2:	b2db      	uxtb	r3, r3
 800c9c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c9c8:	b2da      	uxtb	r2, r3
 800c9ca:	4b2f      	ldr	r3, [pc, #188]	; (800ca88 <xPortStartScheduler+0xe8>)
 800c9cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c9ce:	4b2f      	ldr	r3, [pc, #188]	; (800ca8c <xPortStartScheduler+0xec>)
 800c9d0:	2207      	movs	r2, #7
 800c9d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c9d4:	e009      	b.n	800c9ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c9d6:	4b2d      	ldr	r3, [pc, #180]	; (800ca8c <xPortStartScheduler+0xec>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	4a2b      	ldr	r2, [pc, #172]	; (800ca8c <xPortStartScheduler+0xec>)
 800c9de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c9e0:	78fb      	ldrb	r3, [r7, #3]
 800c9e2:	b2db      	uxtb	r3, r3
 800c9e4:	005b      	lsls	r3, r3, #1
 800c9e6:	b2db      	uxtb	r3, r3
 800c9e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c9ea:	78fb      	ldrb	r3, [r7, #3]
 800c9ec:	b2db      	uxtb	r3, r3
 800c9ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9f2:	2b80      	cmp	r3, #128	; 0x80
 800c9f4:	d0ef      	beq.n	800c9d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c9f6:	4b25      	ldr	r3, [pc, #148]	; (800ca8c <xPortStartScheduler+0xec>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f1c3 0307 	rsb	r3, r3, #7
 800c9fe:	2b04      	cmp	r3, #4
 800ca00:	d00c      	beq.n	800ca1c <xPortStartScheduler+0x7c>
	__asm volatile
 800ca02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca06:	b672      	cpsid	i
 800ca08:	f383 8811 	msr	BASEPRI, r3
 800ca0c:	f3bf 8f6f 	isb	sy
 800ca10:	f3bf 8f4f 	dsb	sy
 800ca14:	b662      	cpsie	i
 800ca16:	60bb      	str	r3, [r7, #8]
}
 800ca18:	bf00      	nop
 800ca1a:	e7fe      	b.n	800ca1a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ca1c:	4b1b      	ldr	r3, [pc, #108]	; (800ca8c <xPortStartScheduler+0xec>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	021b      	lsls	r3, r3, #8
 800ca22:	4a1a      	ldr	r2, [pc, #104]	; (800ca8c <xPortStartScheduler+0xec>)
 800ca24:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ca26:	4b19      	ldr	r3, [pc, #100]	; (800ca8c <xPortStartScheduler+0xec>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ca2e:	4a17      	ldr	r2, [pc, #92]	; (800ca8c <xPortStartScheduler+0xec>)
 800ca30:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	b2da      	uxtb	r2, r3
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ca3a:	4b15      	ldr	r3, [pc, #84]	; (800ca90 <xPortStartScheduler+0xf0>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	4a14      	ldr	r2, [pc, #80]	; (800ca90 <xPortStartScheduler+0xf0>)
 800ca40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ca44:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ca46:	4b12      	ldr	r3, [pc, #72]	; (800ca90 <xPortStartScheduler+0xf0>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4a11      	ldr	r2, [pc, #68]	; (800ca90 <xPortStartScheduler+0xf0>)
 800ca4c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ca50:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ca52:	f000 f8dd 	bl	800cc10 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ca56:	4b0f      	ldr	r3, [pc, #60]	; (800ca94 <xPortStartScheduler+0xf4>)
 800ca58:	2200      	movs	r2, #0
 800ca5a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ca5c:	f000 f8fc 	bl	800cc58 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ca60:	4b0d      	ldr	r3, [pc, #52]	; (800ca98 <xPortStartScheduler+0xf8>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4a0c      	ldr	r2, [pc, #48]	; (800ca98 <xPortStartScheduler+0xf8>)
 800ca66:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ca6a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ca6c:	f7ff ff84 	bl	800c978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ca70:	f7fe ff3a 	bl	800b8e8 <vTaskSwitchContext>
	prvTaskExitError();
 800ca74:	f7ff ff38 	bl	800c8e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ca78:	2300      	movs	r3, #0
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3710      	adds	r7, #16
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop
 800ca84:	e000e400 	.word	0xe000e400
 800ca88:	20009ce0 	.word	0x20009ce0
 800ca8c:	20009ce4 	.word	0x20009ce4
 800ca90:	e000ed20 	.word	0xe000ed20
 800ca94:	20000020 	.word	0x20000020
 800ca98:	e000ef34 	.word	0xe000ef34

0800ca9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b083      	sub	sp, #12
 800caa0:	af00      	add	r7, sp, #0
	__asm volatile
 800caa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa6:	b672      	cpsid	i
 800caa8:	f383 8811 	msr	BASEPRI, r3
 800caac:	f3bf 8f6f 	isb	sy
 800cab0:	f3bf 8f4f 	dsb	sy
 800cab4:	b662      	cpsie	i
 800cab6:	607b      	str	r3, [r7, #4]
}
 800cab8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800caba:	4b10      	ldr	r3, [pc, #64]	; (800cafc <vPortEnterCritical+0x60>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	3301      	adds	r3, #1
 800cac0:	4a0e      	ldr	r2, [pc, #56]	; (800cafc <vPortEnterCritical+0x60>)
 800cac2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cac4:	4b0d      	ldr	r3, [pc, #52]	; (800cafc <vPortEnterCritical+0x60>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	2b01      	cmp	r3, #1
 800caca:	d111      	bne.n	800caf0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cacc:	4b0c      	ldr	r3, [pc, #48]	; (800cb00 <vPortEnterCritical+0x64>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	b2db      	uxtb	r3, r3
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d00c      	beq.n	800caf0 <vPortEnterCritical+0x54>
	__asm volatile
 800cad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cada:	b672      	cpsid	i
 800cadc:	f383 8811 	msr	BASEPRI, r3
 800cae0:	f3bf 8f6f 	isb	sy
 800cae4:	f3bf 8f4f 	dsb	sy
 800cae8:	b662      	cpsie	i
 800caea:	603b      	str	r3, [r7, #0]
}
 800caec:	bf00      	nop
 800caee:	e7fe      	b.n	800caee <vPortEnterCritical+0x52>
	}
}
 800caf0:	bf00      	nop
 800caf2:	370c      	adds	r7, #12
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr
 800cafc:	20000020 	.word	0x20000020
 800cb00:	e000ed04 	.word	0xe000ed04

0800cb04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cb04:	b480      	push	{r7}
 800cb06:	b083      	sub	sp, #12
 800cb08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cb0a:	4b13      	ldr	r3, [pc, #76]	; (800cb58 <vPortExitCritical+0x54>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d10c      	bne.n	800cb2c <vPortExitCritical+0x28>
	__asm volatile
 800cb12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb16:	b672      	cpsid	i
 800cb18:	f383 8811 	msr	BASEPRI, r3
 800cb1c:	f3bf 8f6f 	isb	sy
 800cb20:	f3bf 8f4f 	dsb	sy
 800cb24:	b662      	cpsie	i
 800cb26:	607b      	str	r3, [r7, #4]
}
 800cb28:	bf00      	nop
 800cb2a:	e7fe      	b.n	800cb2a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800cb2c:	4b0a      	ldr	r3, [pc, #40]	; (800cb58 <vPortExitCritical+0x54>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	3b01      	subs	r3, #1
 800cb32:	4a09      	ldr	r2, [pc, #36]	; (800cb58 <vPortExitCritical+0x54>)
 800cb34:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cb36:	4b08      	ldr	r3, [pc, #32]	; (800cb58 <vPortExitCritical+0x54>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d105      	bne.n	800cb4a <vPortExitCritical+0x46>
 800cb3e:	2300      	movs	r3, #0
 800cb40:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	f383 8811 	msr	BASEPRI, r3
}
 800cb48:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cb4a:	bf00      	nop
 800cb4c:	370c      	adds	r7, #12
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb54:	4770      	bx	lr
 800cb56:	bf00      	nop
 800cb58:	20000020 	.word	0x20000020
 800cb5c:	00000000 	.word	0x00000000

0800cb60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cb60:	f3ef 8009 	mrs	r0, PSP
 800cb64:	f3bf 8f6f 	isb	sy
 800cb68:	4b15      	ldr	r3, [pc, #84]	; (800cbc0 <pxCurrentTCBConst>)
 800cb6a:	681a      	ldr	r2, [r3, #0]
 800cb6c:	f01e 0f10 	tst.w	lr, #16
 800cb70:	bf08      	it	eq
 800cb72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cb76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb7a:	6010      	str	r0, [r2, #0]
 800cb7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cb80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cb84:	b672      	cpsid	i
 800cb86:	f380 8811 	msr	BASEPRI, r0
 800cb8a:	f3bf 8f4f 	dsb	sy
 800cb8e:	f3bf 8f6f 	isb	sy
 800cb92:	b662      	cpsie	i
 800cb94:	f7fe fea8 	bl	800b8e8 <vTaskSwitchContext>
 800cb98:	f04f 0000 	mov.w	r0, #0
 800cb9c:	f380 8811 	msr	BASEPRI, r0
 800cba0:	bc09      	pop	{r0, r3}
 800cba2:	6819      	ldr	r1, [r3, #0]
 800cba4:	6808      	ldr	r0, [r1, #0]
 800cba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbaa:	f01e 0f10 	tst.w	lr, #16
 800cbae:	bf08      	it	eq
 800cbb0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cbb4:	f380 8809 	msr	PSP, r0
 800cbb8:	f3bf 8f6f 	isb	sy
 800cbbc:	4770      	bx	lr
 800cbbe:	bf00      	nop

0800cbc0 <pxCurrentTCBConst>:
 800cbc0:	200096b4 	.word	0x200096b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cbc4:	bf00      	nop
 800cbc6:	bf00      	nop

0800cbc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b082      	sub	sp, #8
 800cbcc:	af00      	add	r7, sp, #0
	__asm volatile
 800cbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd2:	b672      	cpsid	i
 800cbd4:	f383 8811 	msr	BASEPRI, r3
 800cbd8:	f3bf 8f6f 	isb	sy
 800cbdc:	f3bf 8f4f 	dsb	sy
 800cbe0:	b662      	cpsie	i
 800cbe2:	607b      	str	r3, [r7, #4]
}
 800cbe4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cbe6:	f7fe fdc3 	bl	800b770 <xTaskIncrementTick>
 800cbea:	4603      	mov	r3, r0
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d003      	beq.n	800cbf8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cbf0:	4b06      	ldr	r3, [pc, #24]	; (800cc0c <SysTick_Handler+0x44>)
 800cbf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbf6:	601a      	str	r2, [r3, #0]
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	f383 8811 	msr	BASEPRI, r3
}
 800cc02:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cc04:	bf00      	nop
 800cc06:	3708      	adds	r7, #8
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	e000ed04 	.word	0xe000ed04

0800cc10 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cc10:	b480      	push	{r7}
 800cc12:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cc14:	4b0b      	ldr	r3, [pc, #44]	; (800cc44 <vPortSetupTimerInterrupt+0x34>)
 800cc16:	2200      	movs	r2, #0
 800cc18:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cc1a:	4b0b      	ldr	r3, [pc, #44]	; (800cc48 <vPortSetupTimerInterrupt+0x38>)
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cc20:	4b0a      	ldr	r3, [pc, #40]	; (800cc4c <vPortSetupTimerInterrupt+0x3c>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	4a0a      	ldr	r2, [pc, #40]	; (800cc50 <vPortSetupTimerInterrupt+0x40>)
 800cc26:	fba2 2303 	umull	r2, r3, r2, r3
 800cc2a:	099b      	lsrs	r3, r3, #6
 800cc2c:	4a09      	ldr	r2, [pc, #36]	; (800cc54 <vPortSetupTimerInterrupt+0x44>)
 800cc2e:	3b01      	subs	r3, #1
 800cc30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cc32:	4b04      	ldr	r3, [pc, #16]	; (800cc44 <vPortSetupTimerInterrupt+0x34>)
 800cc34:	2207      	movs	r2, #7
 800cc36:	601a      	str	r2, [r3, #0]
}
 800cc38:	bf00      	nop
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr
 800cc42:	bf00      	nop
 800cc44:	e000e010 	.word	0xe000e010
 800cc48:	e000e018 	.word	0xe000e018
 800cc4c:	20000000 	.word	0x20000000
 800cc50:	10624dd3 	.word	0x10624dd3
 800cc54:	e000e014 	.word	0xe000e014

0800cc58 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cc58:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cc68 <vPortEnableVFP+0x10>
 800cc5c:	6801      	ldr	r1, [r0, #0]
 800cc5e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cc62:	6001      	str	r1, [r0, #0]
 800cc64:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cc66:	bf00      	nop
 800cc68:	e000ed88 	.word	0xe000ed88

0800cc6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b085      	sub	sp, #20
 800cc70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cc72:	f3ef 8305 	mrs	r3, IPSR
 800cc76:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2b0f      	cmp	r3, #15
 800cc7c:	d916      	bls.n	800ccac <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cc7e:	4a19      	ldr	r2, [pc, #100]	; (800cce4 <vPortValidateInterruptPriority+0x78>)
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	4413      	add	r3, r2
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cc88:	4b17      	ldr	r3, [pc, #92]	; (800cce8 <vPortValidateInterruptPriority+0x7c>)
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	7afa      	ldrb	r2, [r7, #11]
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	d20c      	bcs.n	800ccac <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800cc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc96:	b672      	cpsid	i
 800cc98:	f383 8811 	msr	BASEPRI, r3
 800cc9c:	f3bf 8f6f 	isb	sy
 800cca0:	f3bf 8f4f 	dsb	sy
 800cca4:	b662      	cpsie	i
 800cca6:	607b      	str	r3, [r7, #4]
}
 800cca8:	bf00      	nop
 800ccaa:	e7fe      	b.n	800ccaa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ccac:	4b0f      	ldr	r3, [pc, #60]	; (800ccec <vPortValidateInterruptPriority+0x80>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ccb4:	4b0e      	ldr	r3, [pc, #56]	; (800ccf0 <vPortValidateInterruptPriority+0x84>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	d90c      	bls.n	800ccd6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ccbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc0:	b672      	cpsid	i
 800ccc2:	f383 8811 	msr	BASEPRI, r3
 800ccc6:	f3bf 8f6f 	isb	sy
 800ccca:	f3bf 8f4f 	dsb	sy
 800ccce:	b662      	cpsie	i
 800ccd0:	603b      	str	r3, [r7, #0]
}
 800ccd2:	bf00      	nop
 800ccd4:	e7fe      	b.n	800ccd4 <vPortValidateInterruptPriority+0x68>
	}
 800ccd6:	bf00      	nop
 800ccd8:	3714      	adds	r7, #20
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce0:	4770      	bx	lr
 800cce2:	bf00      	nop
 800cce4:	e000e3f0 	.word	0xe000e3f0
 800cce8:	20009ce0 	.word	0x20009ce0
 800ccec:	e000ed0c 	.word	0xe000ed0c
 800ccf0:	20009ce4 	.word	0x20009ce4

0800ccf4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b08a      	sub	sp, #40	; 0x28
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cd00:	f7fe fc66 	bl	800b5d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cd04:	4b5b      	ldr	r3, [pc, #364]	; (800ce74 <pvPortMalloc+0x180>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d101      	bne.n	800cd10 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cd0c:	f000 f91a 	bl	800cf44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cd10:	4b59      	ldr	r3, [pc, #356]	; (800ce78 <pvPortMalloc+0x184>)
 800cd12:	681a      	ldr	r2, [r3, #0]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	4013      	ands	r3, r2
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	f040 8092 	bne.w	800ce42 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d01f      	beq.n	800cd64 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800cd24:	2208      	movs	r2, #8
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	4413      	add	r3, r2
 800cd2a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f003 0307 	and.w	r3, r3, #7
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d016      	beq.n	800cd64 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f023 0307 	bic.w	r3, r3, #7
 800cd3c:	3308      	adds	r3, #8
 800cd3e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f003 0307 	and.w	r3, r3, #7
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d00c      	beq.n	800cd64 <pvPortMalloc+0x70>
	__asm volatile
 800cd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4e:	b672      	cpsid	i
 800cd50:	f383 8811 	msr	BASEPRI, r3
 800cd54:	f3bf 8f6f 	isb	sy
 800cd58:	f3bf 8f4f 	dsb	sy
 800cd5c:	b662      	cpsie	i
 800cd5e:	617b      	str	r3, [r7, #20]
}
 800cd60:	bf00      	nop
 800cd62:	e7fe      	b.n	800cd62 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d06b      	beq.n	800ce42 <pvPortMalloc+0x14e>
 800cd6a:	4b44      	ldr	r3, [pc, #272]	; (800ce7c <pvPortMalloc+0x188>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	687a      	ldr	r2, [r7, #4]
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d866      	bhi.n	800ce42 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cd74:	4b42      	ldr	r3, [pc, #264]	; (800ce80 <pvPortMalloc+0x18c>)
 800cd76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cd78:	4b41      	ldr	r3, [pc, #260]	; (800ce80 <pvPortMalloc+0x18c>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd7e:	e004      	b.n	800cd8a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800cd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d903      	bls.n	800cd9c <pvPortMalloc+0xa8>
 800cd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d1f1      	bne.n	800cd80 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cd9c:	4b35      	ldr	r3, [pc, #212]	; (800ce74 <pvPortMalloc+0x180>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d04d      	beq.n	800ce42 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cda6:	6a3b      	ldr	r3, [r7, #32]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	2208      	movs	r2, #8
 800cdac:	4413      	add	r3, r2
 800cdae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb2:	681a      	ldr	r2, [r3, #0]
 800cdb4:	6a3b      	ldr	r3, [r7, #32]
 800cdb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdba:	685a      	ldr	r2, [r3, #4]
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	1ad2      	subs	r2, r2, r3
 800cdc0:	2308      	movs	r3, #8
 800cdc2:	005b      	lsls	r3, r3, #1
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d921      	bls.n	800ce0c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cdc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	4413      	add	r3, r2
 800cdce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cdd0:	69bb      	ldr	r3, [r7, #24]
 800cdd2:	f003 0307 	and.w	r3, r3, #7
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d00c      	beq.n	800cdf4 <pvPortMalloc+0x100>
	__asm volatile
 800cdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdde:	b672      	cpsid	i
 800cde0:	f383 8811 	msr	BASEPRI, r3
 800cde4:	f3bf 8f6f 	isb	sy
 800cde8:	f3bf 8f4f 	dsb	sy
 800cdec:	b662      	cpsie	i
 800cdee:	613b      	str	r3, [r7, #16]
}
 800cdf0:	bf00      	nop
 800cdf2:	e7fe      	b.n	800cdf2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf6:	685a      	ldr	r2, [r3, #4]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	1ad2      	subs	r2, r2, r3
 800cdfc:	69bb      	ldr	r3, [r7, #24]
 800cdfe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ce00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ce06:	69b8      	ldr	r0, [r7, #24]
 800ce08:	f000 f8fe 	bl	800d008 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ce0c:	4b1b      	ldr	r3, [pc, #108]	; (800ce7c <pvPortMalloc+0x188>)
 800ce0e:	681a      	ldr	r2, [r3, #0]
 800ce10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce12:	685b      	ldr	r3, [r3, #4]
 800ce14:	1ad3      	subs	r3, r2, r3
 800ce16:	4a19      	ldr	r2, [pc, #100]	; (800ce7c <pvPortMalloc+0x188>)
 800ce18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ce1a:	4b18      	ldr	r3, [pc, #96]	; (800ce7c <pvPortMalloc+0x188>)
 800ce1c:	681a      	ldr	r2, [r3, #0]
 800ce1e:	4b19      	ldr	r3, [pc, #100]	; (800ce84 <pvPortMalloc+0x190>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d203      	bcs.n	800ce2e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ce26:	4b15      	ldr	r3, [pc, #84]	; (800ce7c <pvPortMalloc+0x188>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4a16      	ldr	r2, [pc, #88]	; (800ce84 <pvPortMalloc+0x190>)
 800ce2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ce2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce30:	685a      	ldr	r2, [r3, #4]
 800ce32:	4b11      	ldr	r3, [pc, #68]	; (800ce78 <pvPortMalloc+0x184>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	431a      	orrs	r2, r3
 800ce38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ce3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3e:	2200      	movs	r2, #0
 800ce40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ce42:	f7fe fbd3 	bl	800b5ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce46:	69fb      	ldr	r3, [r7, #28]
 800ce48:	f003 0307 	and.w	r3, r3, #7
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d00c      	beq.n	800ce6a <pvPortMalloc+0x176>
	__asm volatile
 800ce50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce54:	b672      	cpsid	i
 800ce56:	f383 8811 	msr	BASEPRI, r3
 800ce5a:	f3bf 8f6f 	isb	sy
 800ce5e:	f3bf 8f4f 	dsb	sy
 800ce62:	b662      	cpsie	i
 800ce64:	60fb      	str	r3, [r7, #12]
}
 800ce66:	bf00      	nop
 800ce68:	e7fe      	b.n	800ce68 <pvPortMalloc+0x174>
	return pvReturn;
 800ce6a:	69fb      	ldr	r3, [r7, #28]
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3728      	adds	r7, #40	; 0x28
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	2000d8f0 	.word	0x2000d8f0
 800ce78:	2000d8fc 	.word	0x2000d8fc
 800ce7c:	2000d8f4 	.word	0x2000d8f4
 800ce80:	2000d8e8 	.word	0x2000d8e8
 800ce84:	2000d8f8 	.word	0x2000d8f8

0800ce88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b086      	sub	sp, #24
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d04c      	beq.n	800cf34 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ce9a:	2308      	movs	r3, #8
 800ce9c:	425b      	negs	r3, r3
 800ce9e:	697a      	ldr	r2, [r7, #20]
 800cea0:	4413      	add	r3, r2
 800cea2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	685a      	ldr	r2, [r3, #4]
 800ceac:	4b23      	ldr	r3, [pc, #140]	; (800cf3c <vPortFree+0xb4>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4013      	ands	r3, r2
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d10c      	bne.n	800ced0 <vPortFree+0x48>
	__asm volatile
 800ceb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceba:	b672      	cpsid	i
 800cebc:	f383 8811 	msr	BASEPRI, r3
 800cec0:	f3bf 8f6f 	isb	sy
 800cec4:	f3bf 8f4f 	dsb	sy
 800cec8:	b662      	cpsie	i
 800ceca:	60fb      	str	r3, [r7, #12]
}
 800cecc:	bf00      	nop
 800cece:	e7fe      	b.n	800cece <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ced0:	693b      	ldr	r3, [r7, #16]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d00c      	beq.n	800cef2 <vPortFree+0x6a>
	__asm volatile
 800ced8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cedc:	b672      	cpsid	i
 800cede:	f383 8811 	msr	BASEPRI, r3
 800cee2:	f3bf 8f6f 	isb	sy
 800cee6:	f3bf 8f4f 	dsb	sy
 800ceea:	b662      	cpsie	i
 800ceec:	60bb      	str	r3, [r7, #8]
}
 800ceee:	bf00      	nop
 800cef0:	e7fe      	b.n	800cef0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	685a      	ldr	r2, [r3, #4]
 800cef6:	4b11      	ldr	r3, [pc, #68]	; (800cf3c <vPortFree+0xb4>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	4013      	ands	r3, r2
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d019      	beq.n	800cf34 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d115      	bne.n	800cf34 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	685a      	ldr	r2, [r3, #4]
 800cf0c:	4b0b      	ldr	r3, [pc, #44]	; (800cf3c <vPortFree+0xb4>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	43db      	mvns	r3, r3
 800cf12:	401a      	ands	r2, r3
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cf18:	f7fe fb5a 	bl	800b5d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cf1c:	693b      	ldr	r3, [r7, #16]
 800cf1e:	685a      	ldr	r2, [r3, #4]
 800cf20:	4b07      	ldr	r3, [pc, #28]	; (800cf40 <vPortFree+0xb8>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4413      	add	r3, r2
 800cf26:	4a06      	ldr	r2, [pc, #24]	; (800cf40 <vPortFree+0xb8>)
 800cf28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cf2a:	6938      	ldr	r0, [r7, #16]
 800cf2c:	f000 f86c 	bl	800d008 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cf30:	f7fe fb5c 	bl	800b5ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cf34:	bf00      	nop
 800cf36:	3718      	adds	r7, #24
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}
 800cf3c:	2000d8fc 	.word	0x2000d8fc
 800cf40:	2000d8f4 	.word	0x2000d8f4

0800cf44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cf44:	b480      	push	{r7}
 800cf46:	b085      	sub	sp, #20
 800cf48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cf4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cf4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cf50:	4b27      	ldr	r3, [pc, #156]	; (800cff0 <prvHeapInit+0xac>)
 800cf52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	f003 0307 	and.w	r3, r3, #7
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d00c      	beq.n	800cf78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	3307      	adds	r3, #7
 800cf62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	f023 0307 	bic.w	r3, r3, #7
 800cf6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cf6c:	68ba      	ldr	r2, [r7, #8]
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	1ad3      	subs	r3, r2, r3
 800cf72:	4a1f      	ldr	r2, [pc, #124]	; (800cff0 <prvHeapInit+0xac>)
 800cf74:	4413      	add	r3, r2
 800cf76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cf7c:	4a1d      	ldr	r2, [pc, #116]	; (800cff4 <prvHeapInit+0xb0>)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cf82:	4b1c      	ldr	r3, [pc, #112]	; (800cff4 <prvHeapInit+0xb0>)
 800cf84:	2200      	movs	r2, #0
 800cf86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	68ba      	ldr	r2, [r7, #8]
 800cf8c:	4413      	add	r3, r2
 800cf8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cf90:	2208      	movs	r2, #8
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	1a9b      	subs	r3, r3, r2
 800cf96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	f023 0307 	bic.w	r3, r3, #7
 800cf9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	4a15      	ldr	r2, [pc, #84]	; (800cff8 <prvHeapInit+0xb4>)
 800cfa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cfa6:	4b14      	ldr	r3, [pc, #80]	; (800cff8 <prvHeapInit+0xb4>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cfae:	4b12      	ldr	r3, [pc, #72]	; (800cff8 <prvHeapInit+0xb4>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	68fa      	ldr	r2, [r7, #12]
 800cfbe:	1ad2      	subs	r2, r2, r3
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cfc4:	4b0c      	ldr	r3, [pc, #48]	; (800cff8 <prvHeapInit+0xb4>)
 800cfc6:	681a      	ldr	r2, [r3, #0]
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	4a0a      	ldr	r2, [pc, #40]	; (800cffc <prvHeapInit+0xb8>)
 800cfd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	685b      	ldr	r3, [r3, #4]
 800cfd8:	4a09      	ldr	r2, [pc, #36]	; (800d000 <prvHeapInit+0xbc>)
 800cfda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cfdc:	4b09      	ldr	r3, [pc, #36]	; (800d004 <prvHeapInit+0xc0>)
 800cfde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cfe2:	601a      	str	r2, [r3, #0]
}
 800cfe4:	bf00      	nop
 800cfe6:	3714      	adds	r7, #20
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr
 800cff0:	20009ce8 	.word	0x20009ce8
 800cff4:	2000d8e8 	.word	0x2000d8e8
 800cff8:	2000d8f0 	.word	0x2000d8f0
 800cffc:	2000d8f8 	.word	0x2000d8f8
 800d000:	2000d8f4 	.word	0x2000d8f4
 800d004:	2000d8fc 	.word	0x2000d8fc

0800d008 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d008:	b480      	push	{r7}
 800d00a:	b085      	sub	sp, #20
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d010:	4b28      	ldr	r3, [pc, #160]	; (800d0b4 <prvInsertBlockIntoFreeList+0xac>)
 800d012:	60fb      	str	r3, [r7, #12]
 800d014:	e002      	b.n	800d01c <prvInsertBlockIntoFreeList+0x14>
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	60fb      	str	r3, [r7, #12]
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	687a      	ldr	r2, [r7, #4]
 800d022:	429a      	cmp	r2, r3
 800d024:	d8f7      	bhi.n	800d016 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	68ba      	ldr	r2, [r7, #8]
 800d030:	4413      	add	r3, r2
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	429a      	cmp	r2, r3
 800d036:	d108      	bne.n	800d04a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	685a      	ldr	r2, [r3, #4]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	685b      	ldr	r3, [r3, #4]
 800d040:	441a      	add	r2, r3
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	685b      	ldr	r3, [r3, #4]
 800d052:	68ba      	ldr	r2, [r7, #8]
 800d054:	441a      	add	r2, r3
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d118      	bne.n	800d090 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	681a      	ldr	r2, [r3, #0]
 800d062:	4b15      	ldr	r3, [pc, #84]	; (800d0b8 <prvInsertBlockIntoFreeList+0xb0>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	429a      	cmp	r2, r3
 800d068:	d00d      	beq.n	800d086 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	685a      	ldr	r2, [r3, #4]
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	441a      	add	r2, r3
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	681a      	ldr	r2, [r3, #0]
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	601a      	str	r2, [r3, #0]
 800d084:	e008      	b.n	800d098 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d086:	4b0c      	ldr	r3, [pc, #48]	; (800d0b8 <prvInsertBlockIntoFreeList+0xb0>)
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	601a      	str	r2, [r3, #0]
 800d08e:	e003      	b.n	800d098 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681a      	ldr	r2, [r3, #0]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d098:	68fa      	ldr	r2, [r7, #12]
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d002      	beq.n	800d0a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	687a      	ldr	r2, [r7, #4]
 800d0a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d0a6:	bf00      	nop
 800d0a8:	3714      	adds	r7, #20
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b0:	4770      	bx	lr
 800d0b2:	bf00      	nop
 800d0b4:	2000d8e8 	.word	0x2000d8e8
 800d0b8:	2000d8f0 	.word	0x2000d8f0

0800d0bc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b084      	sub	sp, #16
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800d0c6:	f007 fac5 	bl	8014654 <sys_timeouts_sleeptime>
 800d0ca:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0d2:	d10b      	bne.n	800d0ec <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800d0d4:	4813      	ldr	r0, [pc, #76]	; (800d124 <tcpip_timeouts_mbox_fetch+0x68>)
 800d0d6:	f00a f81c 	bl	8017112 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800d0da:	2200      	movs	r2, #0
 800d0dc:	6839      	ldr	r1, [r7, #0]
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f009 ffa4 	bl	801702c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800d0e4:	480f      	ldr	r0, [pc, #60]	; (800d124 <tcpip_timeouts_mbox_fetch+0x68>)
 800d0e6:	f00a f805 	bl	80170f4 <sys_mutex_lock>
    return;
 800d0ea:	e018      	b.n	800d11e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d102      	bne.n	800d0f8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800d0f2:	f007 fa75 	bl	80145e0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d0f6:	e7e6      	b.n	800d0c6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800d0f8:	480a      	ldr	r0, [pc, #40]	; (800d124 <tcpip_timeouts_mbox_fetch+0x68>)
 800d0fa:	f00a f80a 	bl	8017112 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800d0fe:	68fa      	ldr	r2, [r7, #12]
 800d100:	6839      	ldr	r1, [r7, #0]
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f009 ff92 	bl	801702c <sys_arch_mbox_fetch>
 800d108:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800d10a:	4806      	ldr	r0, [pc, #24]	; (800d124 <tcpip_timeouts_mbox_fetch+0x68>)
 800d10c:	f009 fff2 	bl	80170f4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d116:	d102      	bne.n	800d11e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800d118:	f007 fa62 	bl	80145e0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d11c:	e7d3      	b.n	800d0c6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800d11e:	3710      	adds	r7, #16
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}
 800d124:	2000d90c 	.word	0x2000d90c

0800d128 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b084      	sub	sp, #16
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800d130:	4810      	ldr	r0, [pc, #64]	; (800d174 <tcpip_thread+0x4c>)
 800d132:	f009 ffdf 	bl	80170f4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800d136:	4b10      	ldr	r3, [pc, #64]	; (800d178 <tcpip_thread+0x50>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d005      	beq.n	800d14a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800d13e:	4b0e      	ldr	r3, [pc, #56]	; (800d178 <tcpip_thread+0x50>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	4a0e      	ldr	r2, [pc, #56]	; (800d17c <tcpip_thread+0x54>)
 800d144:	6812      	ldr	r2, [r2, #0]
 800d146:	4610      	mov	r0, r2
 800d148:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d14a:	f107 030c 	add.w	r3, r7, #12
 800d14e:	4619      	mov	r1, r3
 800d150:	480b      	ldr	r0, [pc, #44]	; (800d180 <tcpip_thread+0x58>)
 800d152:	f7ff ffb3 	bl	800d0bc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d106      	bne.n	800d16a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d15c:	4b09      	ldr	r3, [pc, #36]	; (800d184 <tcpip_thread+0x5c>)
 800d15e:	2291      	movs	r2, #145	; 0x91
 800d160:	4909      	ldr	r1, [pc, #36]	; (800d188 <tcpip_thread+0x60>)
 800d162:	480a      	ldr	r0, [pc, #40]	; (800d18c <tcpip_thread+0x64>)
 800d164:	f00a f86a 	bl	801723c <iprintf>
      continue;
 800d168:	e003      	b.n	800d172 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	4618      	mov	r0, r3
 800d16e:	f000 f80f 	bl	800d190 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d172:	e7ea      	b.n	800d14a <tcpip_thread+0x22>
 800d174:	2000d90c 	.word	0x2000d90c
 800d178:	2000d900 	.word	0x2000d900
 800d17c:	2000d904 	.word	0x2000d904
 800d180:	2000d908 	.word	0x2000d908
 800d184:	080185ec 	.word	0x080185ec
 800d188:	0801861c 	.word	0x0801861c
 800d18c:	0801863c 	.word	0x0801863c

0800d190 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b082      	sub	sp, #8
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	2b02      	cmp	r3, #2
 800d19e:	d026      	beq.n	800d1ee <tcpip_thread_handle_msg+0x5e>
 800d1a0:	2b02      	cmp	r3, #2
 800d1a2:	dc2b      	bgt.n	800d1fc <tcpip_thread_handle_msg+0x6c>
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d002      	beq.n	800d1ae <tcpip_thread_handle_msg+0x1e>
 800d1a8:	2b01      	cmp	r3, #1
 800d1aa:	d015      	beq.n	800d1d8 <tcpip_thread_handle_msg+0x48>
 800d1ac:	e026      	b.n	800d1fc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	68db      	ldr	r3, [r3, #12]
 800d1b2:	687a      	ldr	r2, [r7, #4]
 800d1b4:	6850      	ldr	r0, [r2, #4]
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	6892      	ldr	r2, [r2, #8]
 800d1ba:	4611      	mov	r1, r2
 800d1bc:	4798      	blx	r3
 800d1be:	4603      	mov	r3, r0
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d004      	beq.n	800d1ce <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	685b      	ldr	r3, [r3, #4]
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f001 fd0b 	bl	800ebe4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d1ce:	6879      	ldr	r1, [r7, #4]
 800d1d0:	2009      	movs	r0, #9
 800d1d2:	f000 fe63 	bl	800de9c <memp_free>
      break;
 800d1d6:	e018      	b.n	800d20a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	685b      	ldr	r3, [r3, #4]
 800d1dc:	687a      	ldr	r2, [r7, #4]
 800d1de:	6892      	ldr	r2, [r2, #8]
 800d1e0:	4610      	mov	r0, r2
 800d1e2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800d1e4:	6879      	ldr	r1, [r7, #4]
 800d1e6:	2008      	movs	r0, #8
 800d1e8:	f000 fe58 	bl	800de9c <memp_free>
      break;
 800d1ec:	e00d      	b.n	800d20a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	687a      	ldr	r2, [r7, #4]
 800d1f4:	6892      	ldr	r2, [r2, #8]
 800d1f6:	4610      	mov	r0, r2
 800d1f8:	4798      	blx	r3
      break;
 800d1fa:	e006      	b.n	800d20a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d1fc:	4b05      	ldr	r3, [pc, #20]	; (800d214 <tcpip_thread_handle_msg+0x84>)
 800d1fe:	22cf      	movs	r2, #207	; 0xcf
 800d200:	4905      	ldr	r1, [pc, #20]	; (800d218 <tcpip_thread_handle_msg+0x88>)
 800d202:	4806      	ldr	r0, [pc, #24]	; (800d21c <tcpip_thread_handle_msg+0x8c>)
 800d204:	f00a f81a 	bl	801723c <iprintf>
      break;
 800d208:	bf00      	nop
  }
}
 800d20a:	bf00      	nop
 800d20c:	3708      	adds	r7, #8
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
 800d212:	bf00      	nop
 800d214:	080185ec 	.word	0x080185ec
 800d218:	0801861c 	.word	0x0801861c
 800d21c:	0801863c 	.word	0x0801863c

0800d220 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b086      	sub	sp, #24
 800d224:	af00      	add	r7, sp, #0
 800d226:	60f8      	str	r0, [r7, #12]
 800d228:	60b9      	str	r1, [r7, #8]
 800d22a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d22c:	481a      	ldr	r0, [pc, #104]	; (800d298 <tcpip_inpkt+0x78>)
 800d22e:	f009 ff2e 	bl	801708e <sys_mbox_valid>
 800d232:	4603      	mov	r3, r0
 800d234:	2b00      	cmp	r3, #0
 800d236:	d105      	bne.n	800d244 <tcpip_inpkt+0x24>
 800d238:	4b18      	ldr	r3, [pc, #96]	; (800d29c <tcpip_inpkt+0x7c>)
 800d23a:	22fc      	movs	r2, #252	; 0xfc
 800d23c:	4918      	ldr	r1, [pc, #96]	; (800d2a0 <tcpip_inpkt+0x80>)
 800d23e:	4819      	ldr	r0, [pc, #100]	; (800d2a4 <tcpip_inpkt+0x84>)
 800d240:	f009 fffc 	bl	801723c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800d244:	2009      	movs	r0, #9
 800d246:	f000 fdb3 	bl	800ddb0 <memp_malloc>
 800d24a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d102      	bne.n	800d258 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800d252:	f04f 33ff 	mov.w	r3, #4294967295
 800d256:	e01a      	b.n	800d28e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	2200      	movs	r2, #0
 800d25c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	68fa      	ldr	r2, [r7, #12]
 800d262:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	68ba      	ldr	r2, [r7, #8]
 800d268:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	687a      	ldr	r2, [r7, #4]
 800d26e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d270:	6979      	ldr	r1, [r7, #20]
 800d272:	4809      	ldr	r0, [pc, #36]	; (800d298 <tcpip_inpkt+0x78>)
 800d274:	f009 fec0 	bl	8016ff8 <sys_mbox_trypost>
 800d278:	4603      	mov	r3, r0
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d006      	beq.n	800d28c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d27e:	6979      	ldr	r1, [r7, #20]
 800d280:	2009      	movs	r0, #9
 800d282:	f000 fe0b 	bl	800de9c <memp_free>
    return ERR_MEM;
 800d286:	f04f 33ff 	mov.w	r3, #4294967295
 800d28a:	e000      	b.n	800d28e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800d28c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3718      	adds	r7, #24
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
 800d296:	bf00      	nop
 800d298:	2000d908 	.word	0x2000d908
 800d29c:	080185ec 	.word	0x080185ec
 800d2a0:	08018664 	.word	0x08018664
 800d2a4:	0801863c 	.word	0x0801863c

0800d2a8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b082      	sub	sp, #8
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
 800d2b0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d2b8:	f003 0318 	and.w	r3, r3, #24
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d006      	beq.n	800d2ce <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d2c0:	4a08      	ldr	r2, [pc, #32]	; (800d2e4 <tcpip_input+0x3c>)
 800d2c2:	6839      	ldr	r1, [r7, #0]
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f7ff ffab 	bl	800d220 <tcpip_inpkt>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	e005      	b.n	800d2da <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d2ce:	4a06      	ldr	r2, [pc, #24]	; (800d2e8 <tcpip_input+0x40>)
 800d2d0:	6839      	ldr	r1, [r7, #0]
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f7ff ffa4 	bl	800d220 <tcpip_inpkt>
 800d2d8:	4603      	mov	r3, r0
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3708      	adds	r7, #8
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	08016e19 	.word	0x08016e19
 800d2e8:	08015d21 	.word	0x08015d21

0800d2ec <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b084      	sub	sp, #16
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d2f6:	4819      	ldr	r0, [pc, #100]	; (800d35c <tcpip_try_callback+0x70>)
 800d2f8:	f009 fec9 	bl	801708e <sys_mbox_valid>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d106      	bne.n	800d310 <tcpip_try_callback+0x24>
 800d302:	4b17      	ldr	r3, [pc, #92]	; (800d360 <tcpip_try_callback+0x74>)
 800d304:	f240 125d 	movw	r2, #349	; 0x15d
 800d308:	4916      	ldr	r1, [pc, #88]	; (800d364 <tcpip_try_callback+0x78>)
 800d30a:	4817      	ldr	r0, [pc, #92]	; (800d368 <tcpip_try_callback+0x7c>)
 800d30c:	f009 ff96 	bl	801723c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d310:	2008      	movs	r0, #8
 800d312:	f000 fd4d 	bl	800ddb0 <memp_malloc>
 800d316:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d102      	bne.n	800d324 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800d31e:	f04f 33ff 	mov.w	r3, #4294967295
 800d322:	e017      	b.n	800d354 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	2201      	movs	r2, #1
 800d328:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	683a      	ldr	r2, [r7, #0]
 800d334:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d336:	68f9      	ldr	r1, [r7, #12]
 800d338:	4808      	ldr	r0, [pc, #32]	; (800d35c <tcpip_try_callback+0x70>)
 800d33a:	f009 fe5d 	bl	8016ff8 <sys_mbox_trypost>
 800d33e:	4603      	mov	r3, r0
 800d340:	2b00      	cmp	r3, #0
 800d342:	d006      	beq.n	800d352 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800d344:	68f9      	ldr	r1, [r7, #12]
 800d346:	2008      	movs	r0, #8
 800d348:	f000 fda8 	bl	800de9c <memp_free>
    return ERR_MEM;
 800d34c:	f04f 33ff 	mov.w	r3, #4294967295
 800d350:	e000      	b.n	800d354 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800d352:	2300      	movs	r3, #0
}
 800d354:	4618      	mov	r0, r3
 800d356:	3710      	adds	r7, #16
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	2000d908 	.word	0x2000d908
 800d360:	080185ec 	.word	0x080185ec
 800d364:	08018664 	.word	0x08018664
 800d368:	0801863c 	.word	0x0801863c

0800d36c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af02      	add	r7, sp, #8
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	6039      	str	r1, [r7, #0]
  lwip_init();
 800d376:	f000 f871 	bl	800d45c <lwip_init>

  tcpip_init_done = initfunc;
 800d37a:	4a17      	ldr	r2, [pc, #92]	; (800d3d8 <tcpip_init+0x6c>)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800d380:	4a16      	ldr	r2, [pc, #88]	; (800d3dc <tcpip_init+0x70>)
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800d386:	2106      	movs	r1, #6
 800d388:	4815      	ldr	r0, [pc, #84]	; (800d3e0 <tcpip_init+0x74>)
 800d38a:	f009 fe1b 	bl	8016fc4 <sys_mbox_new>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	d006      	beq.n	800d3a2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800d394:	4b13      	ldr	r3, [pc, #76]	; (800d3e4 <tcpip_init+0x78>)
 800d396:	f240 2261 	movw	r2, #609	; 0x261
 800d39a:	4913      	ldr	r1, [pc, #76]	; (800d3e8 <tcpip_init+0x7c>)
 800d39c:	4813      	ldr	r0, [pc, #76]	; (800d3ec <tcpip_init+0x80>)
 800d39e:	f009 ff4d 	bl	801723c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800d3a2:	4813      	ldr	r0, [pc, #76]	; (800d3f0 <tcpip_init+0x84>)
 800d3a4:	f009 fe90 	bl	80170c8 <sys_mutex_new>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d006      	beq.n	800d3bc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800d3ae:	4b0d      	ldr	r3, [pc, #52]	; (800d3e4 <tcpip_init+0x78>)
 800d3b0:	f240 2265 	movw	r2, #613	; 0x265
 800d3b4:	490f      	ldr	r1, [pc, #60]	; (800d3f4 <tcpip_init+0x88>)
 800d3b6:	480d      	ldr	r0, [pc, #52]	; (800d3ec <tcpip_init+0x80>)
 800d3b8:	f009 ff40 	bl	801723c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d3bc:	2318      	movs	r3, #24
 800d3be:	9300      	str	r3, [sp, #0]
 800d3c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	490c      	ldr	r1, [pc, #48]	; (800d3f8 <tcpip_init+0x8c>)
 800d3c8:	480c      	ldr	r0, [pc, #48]	; (800d3fc <tcpip_init+0x90>)
 800d3ca:	f009 feaf 	bl	801712c <sys_thread_new>
}
 800d3ce:	bf00      	nop
 800d3d0:	3708      	adds	r7, #8
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}
 800d3d6:	bf00      	nop
 800d3d8:	2000d900 	.word	0x2000d900
 800d3dc:	2000d904 	.word	0x2000d904
 800d3e0:	2000d908 	.word	0x2000d908
 800d3e4:	080185ec 	.word	0x080185ec
 800d3e8:	08018674 	.word	0x08018674
 800d3ec:	0801863c 	.word	0x0801863c
 800d3f0:	2000d90c 	.word	0x2000d90c
 800d3f4:	08018698 	.word	0x08018698
 800d3f8:	0800d129 	.word	0x0800d129
 800d3fc:	080186bc 	.word	0x080186bc

0800d400 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d400:	b480      	push	{r7}
 800d402:	b083      	sub	sp, #12
 800d404:	af00      	add	r7, sp, #0
 800d406:	4603      	mov	r3, r0
 800d408:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d40a:	88fb      	ldrh	r3, [r7, #6]
 800d40c:	021b      	lsls	r3, r3, #8
 800d40e:	b21a      	sxth	r2, r3
 800d410:	88fb      	ldrh	r3, [r7, #6]
 800d412:	0a1b      	lsrs	r3, r3, #8
 800d414:	b29b      	uxth	r3, r3
 800d416:	b21b      	sxth	r3, r3
 800d418:	4313      	orrs	r3, r2
 800d41a:	b21b      	sxth	r3, r3
 800d41c:	b29b      	uxth	r3, r3
}
 800d41e:	4618      	mov	r0, r3
 800d420:	370c      	adds	r7, #12
 800d422:	46bd      	mov	sp, r7
 800d424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d428:	4770      	bx	lr

0800d42a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d42a:	b480      	push	{r7}
 800d42c:	b083      	sub	sp, #12
 800d42e:	af00      	add	r7, sp, #0
 800d430:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	061a      	lsls	r2, r3, #24
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	021b      	lsls	r3, r3, #8
 800d43a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d43e:	431a      	orrs	r2, r3
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	0a1b      	lsrs	r3, r3, #8
 800d444:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d448:	431a      	orrs	r2, r3
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	0e1b      	lsrs	r3, r3, #24
 800d44e:	4313      	orrs	r3, r2
}
 800d450:	4618      	mov	r0, r3
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d462:	2300      	movs	r3, #0
 800d464:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d466:	f009 fe23 	bl	80170b0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d46a:	f000 f8d5 	bl	800d618 <mem_init>
  memp_init();
 800d46e:	f000 fc31 	bl	800dcd4 <memp_init>
  pbuf_init();
  netif_init();
 800d472:	f000 fd3d 	bl	800def0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d476:	f007 f925 	bl	80146c4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d47a:	f001 fe4d 	bl	800f118 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d47e:	f007 f867 	bl	8014550 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d482:	bf00      	nop
 800d484:	3708      	adds	r7, #8
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
	...

0800d48c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d48c:	b480      	push	{r7}
 800d48e:	b083      	sub	sp, #12
 800d490:	af00      	add	r7, sp, #0
 800d492:	4603      	mov	r3, r0
 800d494:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d496:	4b05      	ldr	r3, [pc, #20]	; (800d4ac <ptr_to_mem+0x20>)
 800d498:	681a      	ldr	r2, [r3, #0]
 800d49a:	88fb      	ldrh	r3, [r7, #6]
 800d49c:	4413      	add	r3, r2
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	370c      	adds	r7, #12
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a8:	4770      	bx	lr
 800d4aa:	bf00      	nop
 800d4ac:	2000df7c 	.word	0x2000df7c

0800d4b0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b083      	sub	sp, #12
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d4b8:	4b05      	ldr	r3, [pc, #20]	; (800d4d0 <mem_to_ptr+0x20>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	687a      	ldr	r2, [r7, #4]
 800d4be:	1ad3      	subs	r3, r2, r3
 800d4c0:	b29b      	uxth	r3, r3
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	370c      	adds	r7, #12
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4cc:	4770      	bx	lr
 800d4ce:	bf00      	nop
 800d4d0:	2000df7c 	.word	0x2000df7c

0800d4d4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d4d4:	b590      	push	{r4, r7, lr}
 800d4d6:	b085      	sub	sp, #20
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d4dc:	4b45      	ldr	r3, [pc, #276]	; (800d5f4 <plug_holes+0x120>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	687a      	ldr	r2, [r7, #4]
 800d4e2:	429a      	cmp	r2, r3
 800d4e4:	d206      	bcs.n	800d4f4 <plug_holes+0x20>
 800d4e6:	4b44      	ldr	r3, [pc, #272]	; (800d5f8 <plug_holes+0x124>)
 800d4e8:	f240 12df 	movw	r2, #479	; 0x1df
 800d4ec:	4943      	ldr	r1, [pc, #268]	; (800d5fc <plug_holes+0x128>)
 800d4ee:	4844      	ldr	r0, [pc, #272]	; (800d600 <plug_holes+0x12c>)
 800d4f0:	f009 fea4 	bl	801723c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d4f4:	4b43      	ldr	r3, [pc, #268]	; (800d604 <plug_holes+0x130>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	687a      	ldr	r2, [r7, #4]
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d306      	bcc.n	800d50c <plug_holes+0x38>
 800d4fe:	4b3e      	ldr	r3, [pc, #248]	; (800d5f8 <plug_holes+0x124>)
 800d500:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d504:	4940      	ldr	r1, [pc, #256]	; (800d608 <plug_holes+0x134>)
 800d506:	483e      	ldr	r0, [pc, #248]	; (800d600 <plug_holes+0x12c>)
 800d508:	f009 fe98 	bl	801723c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	791b      	ldrb	r3, [r3, #4]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d006      	beq.n	800d522 <plug_holes+0x4e>
 800d514:	4b38      	ldr	r3, [pc, #224]	; (800d5f8 <plug_holes+0x124>)
 800d516:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d51a:	493c      	ldr	r1, [pc, #240]	; (800d60c <plug_holes+0x138>)
 800d51c:	4838      	ldr	r0, [pc, #224]	; (800d600 <plug_holes+0x12c>)
 800d51e:	f009 fe8d 	bl	801723c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	881b      	ldrh	r3, [r3, #0]
 800d526:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d52a:	d906      	bls.n	800d53a <plug_holes+0x66>
 800d52c:	4b32      	ldr	r3, [pc, #200]	; (800d5f8 <plug_holes+0x124>)
 800d52e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d532:	4937      	ldr	r1, [pc, #220]	; (800d610 <plug_holes+0x13c>)
 800d534:	4832      	ldr	r0, [pc, #200]	; (800d600 <plug_holes+0x12c>)
 800d536:	f009 fe81 	bl	801723c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	881b      	ldrh	r3, [r3, #0]
 800d53e:	4618      	mov	r0, r3
 800d540:	f7ff ffa4 	bl	800d48c <ptr_to_mem>
 800d544:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d546:	687a      	ldr	r2, [r7, #4]
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d024      	beq.n	800d598 <plug_holes+0xc4>
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	791b      	ldrb	r3, [r3, #4]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d120      	bne.n	800d598 <plug_holes+0xc4>
 800d556:	4b2b      	ldr	r3, [pc, #172]	; (800d604 <plug_holes+0x130>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	68fa      	ldr	r2, [r7, #12]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d01b      	beq.n	800d598 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d560:	4b2c      	ldr	r3, [pc, #176]	; (800d614 <plug_holes+0x140>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	68fa      	ldr	r2, [r7, #12]
 800d566:	429a      	cmp	r2, r3
 800d568:	d102      	bne.n	800d570 <plug_holes+0x9c>
      lfree = mem;
 800d56a:	4a2a      	ldr	r2, [pc, #168]	; (800d614 <plug_holes+0x140>)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	881a      	ldrh	r2, [r3, #0]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	881b      	ldrh	r3, [r3, #0]
 800d57c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d580:	d00a      	beq.n	800d598 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	881b      	ldrh	r3, [r3, #0]
 800d586:	4618      	mov	r0, r3
 800d588:	f7ff ff80 	bl	800d48c <ptr_to_mem>
 800d58c:	4604      	mov	r4, r0
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f7ff ff8e 	bl	800d4b0 <mem_to_ptr>
 800d594:	4603      	mov	r3, r0
 800d596:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	885b      	ldrh	r3, [r3, #2]
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7ff ff75 	bl	800d48c <ptr_to_mem>
 800d5a2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d5a4:	68ba      	ldr	r2, [r7, #8]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	d01f      	beq.n	800d5ec <plug_holes+0x118>
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	791b      	ldrb	r3, [r3, #4]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d11b      	bne.n	800d5ec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d5b4:	4b17      	ldr	r3, [pc, #92]	; (800d614 <plug_holes+0x140>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	687a      	ldr	r2, [r7, #4]
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d102      	bne.n	800d5c4 <plug_holes+0xf0>
      lfree = pmem;
 800d5be:	4a15      	ldr	r2, [pc, #84]	; (800d614 <plug_holes+0x140>)
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	881a      	ldrh	r2, [r3, #0]
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	881b      	ldrh	r3, [r3, #0]
 800d5d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d5d4:	d00a      	beq.n	800d5ec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	881b      	ldrh	r3, [r3, #0]
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f7ff ff56 	bl	800d48c <ptr_to_mem>
 800d5e0:	4604      	mov	r4, r0
 800d5e2:	68b8      	ldr	r0, [r7, #8]
 800d5e4:	f7ff ff64 	bl	800d4b0 <mem_to_ptr>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d5ec:	bf00      	nop
 800d5ee:	3714      	adds	r7, #20
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd90      	pop	{r4, r7, pc}
 800d5f4:	2000df7c 	.word	0x2000df7c
 800d5f8:	080186cc 	.word	0x080186cc
 800d5fc:	080186fc 	.word	0x080186fc
 800d600:	08018714 	.word	0x08018714
 800d604:	2000df80 	.word	0x2000df80
 800d608:	0801873c 	.word	0x0801873c
 800d60c:	08018758 	.word	0x08018758
 800d610:	08018774 	.word	0x08018774
 800d614:	2000df88 	.word	0x2000df88

0800d618 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b082      	sub	sp, #8
 800d61c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d61e:	4b1f      	ldr	r3, [pc, #124]	; (800d69c <mem_init+0x84>)
 800d620:	3303      	adds	r3, #3
 800d622:	f023 0303 	bic.w	r3, r3, #3
 800d626:	461a      	mov	r2, r3
 800d628:	4b1d      	ldr	r3, [pc, #116]	; (800d6a0 <mem_init+0x88>)
 800d62a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d62c:	4b1c      	ldr	r3, [pc, #112]	; (800d6a0 <mem_init+0x88>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d638:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2200      	movs	r2, #0
 800d63e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2200      	movs	r2, #0
 800d644:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d646:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800d64a:	f7ff ff1f 	bl	800d48c <ptr_to_mem>
 800d64e:	4603      	mov	r3, r0
 800d650:	4a14      	ldr	r2, [pc, #80]	; (800d6a4 <mem_init+0x8c>)
 800d652:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d654:	4b13      	ldr	r3, [pc, #76]	; (800d6a4 <mem_init+0x8c>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	2201      	movs	r2, #1
 800d65a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d65c:	4b11      	ldr	r3, [pc, #68]	; (800d6a4 <mem_init+0x8c>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d664:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d666:	4b0f      	ldr	r3, [pc, #60]	; (800d6a4 <mem_init+0x8c>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d66e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d670:	4b0b      	ldr	r3, [pc, #44]	; (800d6a0 <mem_init+0x88>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	4a0c      	ldr	r2, [pc, #48]	; (800d6a8 <mem_init+0x90>)
 800d676:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d678:	480c      	ldr	r0, [pc, #48]	; (800d6ac <mem_init+0x94>)
 800d67a:	f009 fd25 	bl	80170c8 <sys_mutex_new>
 800d67e:	4603      	mov	r3, r0
 800d680:	2b00      	cmp	r3, #0
 800d682:	d006      	beq.n	800d692 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d684:	4b0a      	ldr	r3, [pc, #40]	; (800d6b0 <mem_init+0x98>)
 800d686:	f240 221f 	movw	r2, #543	; 0x21f
 800d68a:	490a      	ldr	r1, [pc, #40]	; (800d6b4 <mem_init+0x9c>)
 800d68c:	480a      	ldr	r0, [pc, #40]	; (800d6b8 <mem_init+0xa0>)
 800d68e:	f009 fdd5 	bl	801723c <iprintf>
  }
}
 800d692:	bf00      	nop
 800d694:	3708      	adds	r7, #8
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}
 800d69a:	bf00      	nop
 800d69c:	2000d928 	.word	0x2000d928
 800d6a0:	2000df7c 	.word	0x2000df7c
 800d6a4:	2000df80 	.word	0x2000df80
 800d6a8:	2000df88 	.word	0x2000df88
 800d6ac:	2000df84 	.word	0x2000df84
 800d6b0:	080186cc 	.word	0x080186cc
 800d6b4:	080187a0 	.word	0x080187a0
 800d6b8:	08018714 	.word	0x08018714

0800d6bc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b086      	sub	sp, #24
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f7ff fef3 	bl	800d4b0 <mem_to_ptr>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	881b      	ldrh	r3, [r3, #0]
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f7ff feda 	bl	800d48c <ptr_to_mem>
 800d6d8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	885b      	ldrh	r3, [r3, #2]
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7ff fed4 	bl	800d48c <ptr_to_mem>
 800d6e4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	881b      	ldrh	r3, [r3, #0]
 800d6ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d6ee:	d818      	bhi.n	800d722 <mem_link_valid+0x66>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	885b      	ldrh	r3, [r3, #2]
 800d6f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d6f8:	d813      	bhi.n	800d722 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d6fe:	8afa      	ldrh	r2, [r7, #22]
 800d700:	429a      	cmp	r2, r3
 800d702:	d004      	beq.n	800d70e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	881b      	ldrh	r3, [r3, #0]
 800d708:	8afa      	ldrh	r2, [r7, #22]
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d109      	bne.n	800d722 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d70e:	4b08      	ldr	r3, [pc, #32]	; (800d730 <mem_link_valid+0x74>)
 800d710:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d712:	693a      	ldr	r2, [r7, #16]
 800d714:	429a      	cmp	r2, r3
 800d716:	d006      	beq.n	800d726 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	885b      	ldrh	r3, [r3, #2]
 800d71c:	8afa      	ldrh	r2, [r7, #22]
 800d71e:	429a      	cmp	r2, r3
 800d720:	d001      	beq.n	800d726 <mem_link_valid+0x6a>
    return 0;
 800d722:	2300      	movs	r3, #0
 800d724:	e000      	b.n	800d728 <mem_link_valid+0x6c>
  }
  return 1;
 800d726:	2301      	movs	r3, #1
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3718      	adds	r7, #24
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}
 800d730:	2000df80 	.word	0x2000df80

0800d734 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b088      	sub	sp, #32
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d070      	beq.n	800d824 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f003 0303 	and.w	r3, r3, #3
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d00d      	beq.n	800d768 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d74c:	4b37      	ldr	r3, [pc, #220]	; (800d82c <mem_free+0xf8>)
 800d74e:	f240 2273 	movw	r2, #627	; 0x273
 800d752:	4937      	ldr	r1, [pc, #220]	; (800d830 <mem_free+0xfc>)
 800d754:	4837      	ldr	r0, [pc, #220]	; (800d834 <mem_free+0x100>)
 800d756:	f009 fd71 	bl	801723c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d75a:	f009 fd07 	bl	801716c <sys_arch_protect>
 800d75e:	60f8      	str	r0, [r7, #12]
 800d760:	68f8      	ldr	r0, [r7, #12]
 800d762:	f009 fd11 	bl	8017188 <sys_arch_unprotect>
    return;
 800d766:	e05e      	b.n	800d826 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	3b08      	subs	r3, #8
 800d76c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d76e:	4b32      	ldr	r3, [pc, #200]	; (800d838 <mem_free+0x104>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	69fa      	ldr	r2, [r7, #28]
 800d774:	429a      	cmp	r2, r3
 800d776:	d306      	bcc.n	800d786 <mem_free+0x52>
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f103 020c 	add.w	r2, r3, #12
 800d77e:	4b2f      	ldr	r3, [pc, #188]	; (800d83c <mem_free+0x108>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	429a      	cmp	r2, r3
 800d784:	d90d      	bls.n	800d7a2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d786:	4b29      	ldr	r3, [pc, #164]	; (800d82c <mem_free+0xf8>)
 800d788:	f240 227f 	movw	r2, #639	; 0x27f
 800d78c:	492c      	ldr	r1, [pc, #176]	; (800d840 <mem_free+0x10c>)
 800d78e:	4829      	ldr	r0, [pc, #164]	; (800d834 <mem_free+0x100>)
 800d790:	f009 fd54 	bl	801723c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d794:	f009 fcea 	bl	801716c <sys_arch_protect>
 800d798:	6138      	str	r0, [r7, #16]
 800d79a:	6938      	ldr	r0, [r7, #16]
 800d79c:	f009 fcf4 	bl	8017188 <sys_arch_unprotect>
    return;
 800d7a0:	e041      	b.n	800d826 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d7a2:	4828      	ldr	r0, [pc, #160]	; (800d844 <mem_free+0x110>)
 800d7a4:	f009 fca6 	bl	80170f4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d7a8:	69fb      	ldr	r3, [r7, #28]
 800d7aa:	791b      	ldrb	r3, [r3, #4]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d110      	bne.n	800d7d2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d7b0:	4b1e      	ldr	r3, [pc, #120]	; (800d82c <mem_free+0xf8>)
 800d7b2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d7b6:	4924      	ldr	r1, [pc, #144]	; (800d848 <mem_free+0x114>)
 800d7b8:	481e      	ldr	r0, [pc, #120]	; (800d834 <mem_free+0x100>)
 800d7ba:	f009 fd3f 	bl	801723c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d7be:	4821      	ldr	r0, [pc, #132]	; (800d844 <mem_free+0x110>)
 800d7c0:	f009 fca7 	bl	8017112 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d7c4:	f009 fcd2 	bl	801716c <sys_arch_protect>
 800d7c8:	6178      	str	r0, [r7, #20]
 800d7ca:	6978      	ldr	r0, [r7, #20]
 800d7cc:	f009 fcdc 	bl	8017188 <sys_arch_unprotect>
    return;
 800d7d0:	e029      	b.n	800d826 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d7d2:	69f8      	ldr	r0, [r7, #28]
 800d7d4:	f7ff ff72 	bl	800d6bc <mem_link_valid>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d110      	bne.n	800d800 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d7de:	4b13      	ldr	r3, [pc, #76]	; (800d82c <mem_free+0xf8>)
 800d7e0:	f240 2295 	movw	r2, #661	; 0x295
 800d7e4:	4919      	ldr	r1, [pc, #100]	; (800d84c <mem_free+0x118>)
 800d7e6:	4813      	ldr	r0, [pc, #76]	; (800d834 <mem_free+0x100>)
 800d7e8:	f009 fd28 	bl	801723c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d7ec:	4815      	ldr	r0, [pc, #84]	; (800d844 <mem_free+0x110>)
 800d7ee:	f009 fc90 	bl	8017112 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d7f2:	f009 fcbb 	bl	801716c <sys_arch_protect>
 800d7f6:	61b8      	str	r0, [r7, #24]
 800d7f8:	69b8      	ldr	r0, [r7, #24]
 800d7fa:	f009 fcc5 	bl	8017188 <sys_arch_unprotect>
    return;
 800d7fe:	e012      	b.n	800d826 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d800:	69fb      	ldr	r3, [r7, #28]
 800d802:	2200      	movs	r2, #0
 800d804:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d806:	4b12      	ldr	r3, [pc, #72]	; (800d850 <mem_free+0x11c>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	69fa      	ldr	r2, [r7, #28]
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d202      	bcs.n	800d816 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d810:	4a0f      	ldr	r2, [pc, #60]	; (800d850 <mem_free+0x11c>)
 800d812:	69fb      	ldr	r3, [r7, #28]
 800d814:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d816:	69f8      	ldr	r0, [r7, #28]
 800d818:	f7ff fe5c 	bl	800d4d4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d81c:	4809      	ldr	r0, [pc, #36]	; (800d844 <mem_free+0x110>)
 800d81e:	f009 fc78 	bl	8017112 <sys_mutex_unlock>
 800d822:	e000      	b.n	800d826 <mem_free+0xf2>
    return;
 800d824:	bf00      	nop
}
 800d826:	3720      	adds	r7, #32
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}
 800d82c:	080186cc 	.word	0x080186cc
 800d830:	080187bc 	.word	0x080187bc
 800d834:	08018714 	.word	0x08018714
 800d838:	2000df7c 	.word	0x2000df7c
 800d83c:	2000df80 	.word	0x2000df80
 800d840:	080187e0 	.word	0x080187e0
 800d844:	2000df84 	.word	0x2000df84
 800d848:	080187fc 	.word	0x080187fc
 800d84c:	08018824 	.word	0x08018824
 800d850:	2000df88 	.word	0x2000df88

0800d854 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b088      	sub	sp, #32
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
 800d85c:	460b      	mov	r3, r1
 800d85e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d860:	887b      	ldrh	r3, [r7, #2]
 800d862:	3303      	adds	r3, #3
 800d864:	b29b      	uxth	r3, r3
 800d866:	f023 0303 	bic.w	r3, r3, #3
 800d86a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d86c:	8bfb      	ldrh	r3, [r7, #30]
 800d86e:	2b0b      	cmp	r3, #11
 800d870:	d801      	bhi.n	800d876 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d872:	230c      	movs	r3, #12
 800d874:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d876:	8bfb      	ldrh	r3, [r7, #30]
 800d878:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d87c:	d803      	bhi.n	800d886 <mem_trim+0x32>
 800d87e:	8bfa      	ldrh	r2, [r7, #30]
 800d880:	887b      	ldrh	r3, [r7, #2]
 800d882:	429a      	cmp	r2, r3
 800d884:	d201      	bcs.n	800d88a <mem_trim+0x36>
    return NULL;
 800d886:	2300      	movs	r3, #0
 800d888:	e0d8      	b.n	800da3c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d88a:	4b6e      	ldr	r3, [pc, #440]	; (800da44 <mem_trim+0x1f0>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	687a      	ldr	r2, [r7, #4]
 800d890:	429a      	cmp	r2, r3
 800d892:	d304      	bcc.n	800d89e <mem_trim+0x4a>
 800d894:	4b6c      	ldr	r3, [pc, #432]	; (800da48 <mem_trim+0x1f4>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	687a      	ldr	r2, [r7, #4]
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d306      	bcc.n	800d8ac <mem_trim+0x58>
 800d89e:	4b6b      	ldr	r3, [pc, #428]	; (800da4c <mem_trim+0x1f8>)
 800d8a0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d8a4:	496a      	ldr	r1, [pc, #424]	; (800da50 <mem_trim+0x1fc>)
 800d8a6:	486b      	ldr	r0, [pc, #428]	; (800da54 <mem_trim+0x200>)
 800d8a8:	f009 fcc8 	bl	801723c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d8ac:	4b65      	ldr	r3, [pc, #404]	; (800da44 <mem_trim+0x1f0>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	687a      	ldr	r2, [r7, #4]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d304      	bcc.n	800d8c0 <mem_trim+0x6c>
 800d8b6:	4b64      	ldr	r3, [pc, #400]	; (800da48 <mem_trim+0x1f4>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	687a      	ldr	r2, [r7, #4]
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d307      	bcc.n	800d8d0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d8c0:	f009 fc54 	bl	801716c <sys_arch_protect>
 800d8c4:	60b8      	str	r0, [r7, #8]
 800d8c6:	68b8      	ldr	r0, [r7, #8]
 800d8c8:	f009 fc5e 	bl	8017188 <sys_arch_unprotect>
    return rmem;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	e0b5      	b.n	800da3c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	3b08      	subs	r3, #8
 800d8d4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d8d6:	69b8      	ldr	r0, [r7, #24]
 800d8d8:	f7ff fdea 	bl	800d4b0 <mem_to_ptr>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d8e0:	69bb      	ldr	r3, [r7, #24]
 800d8e2:	881a      	ldrh	r2, [r3, #0]
 800d8e4:	8afb      	ldrh	r3, [r7, #22]
 800d8e6:	1ad3      	subs	r3, r2, r3
 800d8e8:	b29b      	uxth	r3, r3
 800d8ea:	3b08      	subs	r3, #8
 800d8ec:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d8ee:	8bfa      	ldrh	r2, [r7, #30]
 800d8f0:	8abb      	ldrh	r3, [r7, #20]
 800d8f2:	429a      	cmp	r2, r3
 800d8f4:	d906      	bls.n	800d904 <mem_trim+0xb0>
 800d8f6:	4b55      	ldr	r3, [pc, #340]	; (800da4c <mem_trim+0x1f8>)
 800d8f8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d8fc:	4956      	ldr	r1, [pc, #344]	; (800da58 <mem_trim+0x204>)
 800d8fe:	4855      	ldr	r0, [pc, #340]	; (800da54 <mem_trim+0x200>)
 800d900:	f009 fc9c 	bl	801723c <iprintf>
  if (newsize > size) {
 800d904:	8bfa      	ldrh	r2, [r7, #30]
 800d906:	8abb      	ldrh	r3, [r7, #20]
 800d908:	429a      	cmp	r2, r3
 800d90a:	d901      	bls.n	800d910 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d90c:	2300      	movs	r3, #0
 800d90e:	e095      	b.n	800da3c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d910:	8bfa      	ldrh	r2, [r7, #30]
 800d912:	8abb      	ldrh	r3, [r7, #20]
 800d914:	429a      	cmp	r2, r3
 800d916:	d101      	bne.n	800d91c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	e08f      	b.n	800da3c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d91c:	484f      	ldr	r0, [pc, #316]	; (800da5c <mem_trim+0x208>)
 800d91e:	f009 fbe9 	bl	80170f4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d922:	69bb      	ldr	r3, [r7, #24]
 800d924:	881b      	ldrh	r3, [r3, #0]
 800d926:	4618      	mov	r0, r3
 800d928:	f7ff fdb0 	bl	800d48c <ptr_to_mem>
 800d92c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	791b      	ldrb	r3, [r3, #4]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d13f      	bne.n	800d9b6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d936:	69bb      	ldr	r3, [r7, #24]
 800d938:	881b      	ldrh	r3, [r3, #0]
 800d93a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d93e:	d106      	bne.n	800d94e <mem_trim+0xfa>
 800d940:	4b42      	ldr	r3, [pc, #264]	; (800da4c <mem_trim+0x1f8>)
 800d942:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d946:	4946      	ldr	r1, [pc, #280]	; (800da60 <mem_trim+0x20c>)
 800d948:	4842      	ldr	r0, [pc, #264]	; (800da54 <mem_trim+0x200>)
 800d94a:	f009 fc77 	bl	801723c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d94e:	693b      	ldr	r3, [r7, #16]
 800d950:	881b      	ldrh	r3, [r3, #0]
 800d952:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d954:	8afa      	ldrh	r2, [r7, #22]
 800d956:	8bfb      	ldrh	r3, [r7, #30]
 800d958:	4413      	add	r3, r2
 800d95a:	b29b      	uxth	r3, r3
 800d95c:	3308      	adds	r3, #8
 800d95e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d960:	4b40      	ldr	r3, [pc, #256]	; (800da64 <mem_trim+0x210>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	693a      	ldr	r2, [r7, #16]
 800d966:	429a      	cmp	r2, r3
 800d968:	d106      	bne.n	800d978 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d96a:	89fb      	ldrh	r3, [r7, #14]
 800d96c:	4618      	mov	r0, r3
 800d96e:	f7ff fd8d 	bl	800d48c <ptr_to_mem>
 800d972:	4603      	mov	r3, r0
 800d974:	4a3b      	ldr	r2, [pc, #236]	; (800da64 <mem_trim+0x210>)
 800d976:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d978:	89fb      	ldrh	r3, [r7, #14]
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7ff fd86 	bl	800d48c <ptr_to_mem>
 800d980:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	2200      	movs	r2, #0
 800d986:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	89ba      	ldrh	r2, [r7, #12]
 800d98c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	8afa      	ldrh	r2, [r7, #22]
 800d992:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d994:	69bb      	ldr	r3, [r7, #24]
 800d996:	89fa      	ldrh	r2, [r7, #14]
 800d998:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	881b      	ldrh	r3, [r3, #0]
 800d99e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d9a2:	d047      	beq.n	800da34 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	881b      	ldrh	r3, [r3, #0]
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f7ff fd6f 	bl	800d48c <ptr_to_mem>
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	89fb      	ldrh	r3, [r7, #14]
 800d9b2:	8053      	strh	r3, [r2, #2]
 800d9b4:	e03e      	b.n	800da34 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d9b6:	8bfb      	ldrh	r3, [r7, #30]
 800d9b8:	f103 0214 	add.w	r2, r3, #20
 800d9bc:	8abb      	ldrh	r3, [r7, #20]
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d838      	bhi.n	800da34 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d9c2:	8afa      	ldrh	r2, [r7, #22]
 800d9c4:	8bfb      	ldrh	r3, [r7, #30]
 800d9c6:	4413      	add	r3, r2
 800d9c8:	b29b      	uxth	r3, r3
 800d9ca:	3308      	adds	r3, #8
 800d9cc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d9ce:	69bb      	ldr	r3, [r7, #24]
 800d9d0:	881b      	ldrh	r3, [r3, #0]
 800d9d2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d9d6:	d106      	bne.n	800d9e6 <mem_trim+0x192>
 800d9d8:	4b1c      	ldr	r3, [pc, #112]	; (800da4c <mem_trim+0x1f8>)
 800d9da:	f240 3216 	movw	r2, #790	; 0x316
 800d9de:	4920      	ldr	r1, [pc, #128]	; (800da60 <mem_trim+0x20c>)
 800d9e0:	481c      	ldr	r0, [pc, #112]	; (800da54 <mem_trim+0x200>)
 800d9e2:	f009 fc2b 	bl	801723c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d9e6:	89fb      	ldrh	r3, [r7, #14]
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f7ff fd4f 	bl	800d48c <ptr_to_mem>
 800d9ee:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d9f0:	4b1c      	ldr	r3, [pc, #112]	; (800da64 <mem_trim+0x210>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	693a      	ldr	r2, [r7, #16]
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d202      	bcs.n	800da00 <mem_trim+0x1ac>
      lfree = mem2;
 800d9fa:	4a1a      	ldr	r2, [pc, #104]	; (800da64 <mem_trim+0x210>)
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	2200      	movs	r2, #0
 800da04:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800da06:	69bb      	ldr	r3, [r7, #24]
 800da08:	881a      	ldrh	r2, [r3, #0]
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	8afa      	ldrh	r2, [r7, #22]
 800da12:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800da14:	69bb      	ldr	r3, [r7, #24]
 800da16:	89fa      	ldrh	r2, [r7, #14]
 800da18:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	881b      	ldrh	r3, [r3, #0]
 800da1e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800da22:	d007      	beq.n	800da34 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800da24:	693b      	ldr	r3, [r7, #16]
 800da26:	881b      	ldrh	r3, [r3, #0]
 800da28:	4618      	mov	r0, r3
 800da2a:	f7ff fd2f 	bl	800d48c <ptr_to_mem>
 800da2e:	4602      	mov	r2, r0
 800da30:	89fb      	ldrh	r3, [r7, #14]
 800da32:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800da34:	4809      	ldr	r0, [pc, #36]	; (800da5c <mem_trim+0x208>)
 800da36:	f009 fb6c 	bl	8017112 <sys_mutex_unlock>
  return rmem;
 800da3a:	687b      	ldr	r3, [r7, #4]
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3720      	adds	r7, #32
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}
 800da44:	2000df7c 	.word	0x2000df7c
 800da48:	2000df80 	.word	0x2000df80
 800da4c:	080186cc 	.word	0x080186cc
 800da50:	08018858 	.word	0x08018858
 800da54:	08018714 	.word	0x08018714
 800da58:	08018870 	.word	0x08018870
 800da5c:	2000df84 	.word	0x2000df84
 800da60:	08018890 	.word	0x08018890
 800da64:	2000df88 	.word	0x2000df88

0800da68 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b088      	sub	sp, #32
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	4603      	mov	r3, r0
 800da70:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800da72:	88fb      	ldrh	r3, [r7, #6]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d101      	bne.n	800da7c <mem_malloc+0x14>
    return NULL;
 800da78:	2300      	movs	r3, #0
 800da7a:	e0e2      	b.n	800dc42 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800da7c:	88fb      	ldrh	r3, [r7, #6]
 800da7e:	3303      	adds	r3, #3
 800da80:	b29b      	uxth	r3, r3
 800da82:	f023 0303 	bic.w	r3, r3, #3
 800da86:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800da88:	8bbb      	ldrh	r3, [r7, #28]
 800da8a:	2b0b      	cmp	r3, #11
 800da8c:	d801      	bhi.n	800da92 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800da8e:	230c      	movs	r3, #12
 800da90:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800da92:	8bbb      	ldrh	r3, [r7, #28]
 800da94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800da98:	d803      	bhi.n	800daa2 <mem_malloc+0x3a>
 800da9a:	8bba      	ldrh	r2, [r7, #28]
 800da9c:	88fb      	ldrh	r3, [r7, #6]
 800da9e:	429a      	cmp	r2, r3
 800daa0:	d201      	bcs.n	800daa6 <mem_malloc+0x3e>
    return NULL;
 800daa2:	2300      	movs	r3, #0
 800daa4:	e0cd      	b.n	800dc42 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800daa6:	4869      	ldr	r0, [pc, #420]	; (800dc4c <mem_malloc+0x1e4>)
 800daa8:	f009 fb24 	bl	80170f4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800daac:	4b68      	ldr	r3, [pc, #416]	; (800dc50 <mem_malloc+0x1e8>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4618      	mov	r0, r3
 800dab2:	f7ff fcfd 	bl	800d4b0 <mem_to_ptr>
 800dab6:	4603      	mov	r3, r0
 800dab8:	83fb      	strh	r3, [r7, #30]
 800daba:	e0b7      	b.n	800dc2c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800dabc:	8bfb      	ldrh	r3, [r7, #30]
 800dabe:	4618      	mov	r0, r3
 800dac0:	f7ff fce4 	bl	800d48c <ptr_to_mem>
 800dac4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	791b      	ldrb	r3, [r3, #4]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	f040 80a7 	bne.w	800dc1e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	881b      	ldrh	r3, [r3, #0]
 800dad4:	461a      	mov	r2, r3
 800dad6:	8bfb      	ldrh	r3, [r7, #30]
 800dad8:	1ad3      	subs	r3, r2, r3
 800dada:	f1a3 0208 	sub.w	r2, r3, #8
 800dade:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800dae0:	429a      	cmp	r2, r3
 800dae2:	f0c0 809c 	bcc.w	800dc1e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800dae6:	697b      	ldr	r3, [r7, #20]
 800dae8:	881b      	ldrh	r3, [r3, #0]
 800daea:	461a      	mov	r2, r3
 800daec:	8bfb      	ldrh	r3, [r7, #30]
 800daee:	1ad3      	subs	r3, r2, r3
 800daf0:	f1a3 0208 	sub.w	r2, r3, #8
 800daf4:	8bbb      	ldrh	r3, [r7, #28]
 800daf6:	3314      	adds	r3, #20
 800daf8:	429a      	cmp	r2, r3
 800dafa:	d333      	bcc.n	800db64 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800dafc:	8bfa      	ldrh	r2, [r7, #30]
 800dafe:	8bbb      	ldrh	r3, [r7, #28]
 800db00:	4413      	add	r3, r2
 800db02:	b29b      	uxth	r3, r3
 800db04:	3308      	adds	r3, #8
 800db06:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800db08:	8a7b      	ldrh	r3, [r7, #18]
 800db0a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800db0e:	d106      	bne.n	800db1e <mem_malloc+0xb6>
 800db10:	4b50      	ldr	r3, [pc, #320]	; (800dc54 <mem_malloc+0x1ec>)
 800db12:	f240 3287 	movw	r2, #903	; 0x387
 800db16:	4950      	ldr	r1, [pc, #320]	; (800dc58 <mem_malloc+0x1f0>)
 800db18:	4850      	ldr	r0, [pc, #320]	; (800dc5c <mem_malloc+0x1f4>)
 800db1a:	f009 fb8f 	bl	801723c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800db1e:	8a7b      	ldrh	r3, [r7, #18]
 800db20:	4618      	mov	r0, r3
 800db22:	f7ff fcb3 	bl	800d48c <ptr_to_mem>
 800db26:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	2200      	movs	r2, #0
 800db2c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	881a      	ldrh	r2, [r3, #0]
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	8bfa      	ldrh	r2, [r7, #30]
 800db3a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	8a7a      	ldrh	r2, [r7, #18]
 800db40:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	2201      	movs	r2, #1
 800db46:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	881b      	ldrh	r3, [r3, #0]
 800db4c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800db50:	d00b      	beq.n	800db6a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	881b      	ldrh	r3, [r3, #0]
 800db56:	4618      	mov	r0, r3
 800db58:	f7ff fc98 	bl	800d48c <ptr_to_mem>
 800db5c:	4602      	mov	r2, r0
 800db5e:	8a7b      	ldrh	r3, [r7, #18]
 800db60:	8053      	strh	r3, [r2, #2]
 800db62:	e002      	b.n	800db6a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	2201      	movs	r2, #1
 800db68:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800db6a:	4b39      	ldr	r3, [pc, #228]	; (800dc50 <mem_malloc+0x1e8>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	697a      	ldr	r2, [r7, #20]
 800db70:	429a      	cmp	r2, r3
 800db72:	d127      	bne.n	800dbc4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800db74:	4b36      	ldr	r3, [pc, #216]	; (800dc50 <mem_malloc+0x1e8>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800db7a:	e005      	b.n	800db88 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800db7c:	69bb      	ldr	r3, [r7, #24]
 800db7e:	881b      	ldrh	r3, [r3, #0]
 800db80:	4618      	mov	r0, r3
 800db82:	f7ff fc83 	bl	800d48c <ptr_to_mem>
 800db86:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800db88:	69bb      	ldr	r3, [r7, #24]
 800db8a:	791b      	ldrb	r3, [r3, #4]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d004      	beq.n	800db9a <mem_malloc+0x132>
 800db90:	4b33      	ldr	r3, [pc, #204]	; (800dc60 <mem_malloc+0x1f8>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	69ba      	ldr	r2, [r7, #24]
 800db96:	429a      	cmp	r2, r3
 800db98:	d1f0      	bne.n	800db7c <mem_malloc+0x114>
          }
          lfree = cur;
 800db9a:	4a2d      	ldr	r2, [pc, #180]	; (800dc50 <mem_malloc+0x1e8>)
 800db9c:	69bb      	ldr	r3, [r7, #24]
 800db9e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800dba0:	4b2b      	ldr	r3, [pc, #172]	; (800dc50 <mem_malloc+0x1e8>)
 800dba2:	681a      	ldr	r2, [r3, #0]
 800dba4:	4b2e      	ldr	r3, [pc, #184]	; (800dc60 <mem_malloc+0x1f8>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	d00b      	beq.n	800dbc4 <mem_malloc+0x15c>
 800dbac:	4b28      	ldr	r3, [pc, #160]	; (800dc50 <mem_malloc+0x1e8>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	791b      	ldrb	r3, [r3, #4]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d006      	beq.n	800dbc4 <mem_malloc+0x15c>
 800dbb6:	4b27      	ldr	r3, [pc, #156]	; (800dc54 <mem_malloc+0x1ec>)
 800dbb8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800dbbc:	4929      	ldr	r1, [pc, #164]	; (800dc64 <mem_malloc+0x1fc>)
 800dbbe:	4827      	ldr	r0, [pc, #156]	; (800dc5c <mem_malloc+0x1f4>)
 800dbc0:	f009 fb3c 	bl	801723c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800dbc4:	4821      	ldr	r0, [pc, #132]	; (800dc4c <mem_malloc+0x1e4>)
 800dbc6:	f009 faa4 	bl	8017112 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800dbca:	8bba      	ldrh	r2, [r7, #28]
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	4413      	add	r3, r2
 800dbd0:	3308      	adds	r3, #8
 800dbd2:	4a23      	ldr	r2, [pc, #140]	; (800dc60 <mem_malloc+0x1f8>)
 800dbd4:	6812      	ldr	r2, [r2, #0]
 800dbd6:	4293      	cmp	r3, r2
 800dbd8:	d906      	bls.n	800dbe8 <mem_malloc+0x180>
 800dbda:	4b1e      	ldr	r3, [pc, #120]	; (800dc54 <mem_malloc+0x1ec>)
 800dbdc:	f240 32b9 	movw	r2, #953	; 0x3b9
 800dbe0:	4921      	ldr	r1, [pc, #132]	; (800dc68 <mem_malloc+0x200>)
 800dbe2:	481e      	ldr	r0, [pc, #120]	; (800dc5c <mem_malloc+0x1f4>)
 800dbe4:	f009 fb2a 	bl	801723c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	f003 0303 	and.w	r3, r3, #3
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d006      	beq.n	800dc00 <mem_malloc+0x198>
 800dbf2:	4b18      	ldr	r3, [pc, #96]	; (800dc54 <mem_malloc+0x1ec>)
 800dbf4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800dbf8:	491c      	ldr	r1, [pc, #112]	; (800dc6c <mem_malloc+0x204>)
 800dbfa:	4818      	ldr	r0, [pc, #96]	; (800dc5c <mem_malloc+0x1f4>)
 800dbfc:	f009 fb1e 	bl	801723c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	f003 0303 	and.w	r3, r3, #3
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d006      	beq.n	800dc18 <mem_malloc+0x1b0>
 800dc0a:	4b12      	ldr	r3, [pc, #72]	; (800dc54 <mem_malloc+0x1ec>)
 800dc0c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800dc10:	4917      	ldr	r1, [pc, #92]	; (800dc70 <mem_malloc+0x208>)
 800dc12:	4812      	ldr	r0, [pc, #72]	; (800dc5c <mem_malloc+0x1f4>)
 800dc14:	f009 fb12 	bl	801723c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	3308      	adds	r3, #8
 800dc1c:	e011      	b.n	800dc42 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800dc1e:	8bfb      	ldrh	r3, [r7, #30]
 800dc20:	4618      	mov	r0, r3
 800dc22:	f7ff fc33 	bl	800d48c <ptr_to_mem>
 800dc26:	4603      	mov	r3, r0
 800dc28:	881b      	ldrh	r3, [r3, #0]
 800dc2a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800dc2c:	8bfa      	ldrh	r2, [r7, #30]
 800dc2e:	8bbb      	ldrh	r3, [r7, #28]
 800dc30:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800dc34:	429a      	cmp	r2, r3
 800dc36:	f4ff af41 	bcc.w	800dabc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800dc3a:	4804      	ldr	r0, [pc, #16]	; (800dc4c <mem_malloc+0x1e4>)
 800dc3c:	f009 fa69 	bl	8017112 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800dc40:	2300      	movs	r3, #0
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3720      	adds	r7, #32
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}
 800dc4a:	bf00      	nop
 800dc4c:	2000df84 	.word	0x2000df84
 800dc50:	2000df88 	.word	0x2000df88
 800dc54:	080186cc 	.word	0x080186cc
 800dc58:	08018890 	.word	0x08018890
 800dc5c:	08018714 	.word	0x08018714
 800dc60:	2000df80 	.word	0x2000df80
 800dc64:	080188a4 	.word	0x080188a4
 800dc68:	080188c0 	.word	0x080188c0
 800dc6c:	080188f0 	.word	0x080188f0
 800dc70:	08018920 	.word	0x08018920

0800dc74 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800dc74:	b480      	push	{r7}
 800dc76:	b085      	sub	sp, #20
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	689b      	ldr	r3, [r3, #8]
 800dc80:	2200      	movs	r2, #0
 800dc82:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	685b      	ldr	r3, [r3, #4]
 800dc88:	3303      	adds	r3, #3
 800dc8a:	f023 0303 	bic.w	r3, r3, #3
 800dc8e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800dc90:	2300      	movs	r3, #0
 800dc92:	60fb      	str	r3, [r7, #12]
 800dc94:	e011      	b.n	800dcba <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	689b      	ldr	r3, [r3, #8]
 800dc9a:	681a      	ldr	r2, [r3, #0]
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	689b      	ldr	r3, [r3, #8]
 800dca4:	68ba      	ldr	r2, [r7, #8]
 800dca6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	881b      	ldrh	r3, [r3, #0]
 800dcac:	461a      	mov	r2, r3
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	4413      	add	r3, r2
 800dcb2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	3301      	adds	r3, #1
 800dcb8:	60fb      	str	r3, [r7, #12]
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	885b      	ldrh	r3, [r3, #2]
 800dcbe:	461a      	mov	r2, r3
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	dbe7      	blt.n	800dc96 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800dcc6:	bf00      	nop
 800dcc8:	bf00      	nop
 800dcca:	3714      	adds	r7, #20
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr

0800dcd4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b082      	sub	sp, #8
 800dcd8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800dcda:	2300      	movs	r3, #0
 800dcdc:	80fb      	strh	r3, [r7, #6]
 800dcde:	e009      	b.n	800dcf4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800dce0:	88fb      	ldrh	r3, [r7, #6]
 800dce2:	4a08      	ldr	r2, [pc, #32]	; (800dd04 <memp_init+0x30>)
 800dce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dce8:	4618      	mov	r0, r3
 800dcea:	f7ff ffc3 	bl	800dc74 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800dcee:	88fb      	ldrh	r3, [r7, #6]
 800dcf0:	3301      	adds	r3, #1
 800dcf2:	80fb      	strh	r3, [r7, #6]
 800dcf4:	88fb      	ldrh	r3, [r7, #6]
 800dcf6:	2b0c      	cmp	r3, #12
 800dcf8:	d9f2      	bls.n	800dce0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800dcfa:	bf00      	nop
 800dcfc:	bf00      	nop
 800dcfe:	3708      	adds	r7, #8
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}
 800dd04:	0801b1a8 	.word	0x0801b1a8

0800dd08 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b084      	sub	sp, #16
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800dd10:	f009 fa2c 	bl	801716c <sys_arch_protect>
 800dd14:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	689b      	ldr	r3, [r3, #8]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d015      	beq.n	800dd50 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	689b      	ldr	r3, [r3, #8]
 800dd28:	68ba      	ldr	r2, [r7, #8]
 800dd2a:	6812      	ldr	r2, [r2, #0]
 800dd2c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	f003 0303 	and.w	r3, r3, #3
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d006      	beq.n	800dd46 <do_memp_malloc_pool+0x3e>
 800dd38:	4b09      	ldr	r3, [pc, #36]	; (800dd60 <do_memp_malloc_pool+0x58>)
 800dd3a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800dd3e:	4909      	ldr	r1, [pc, #36]	; (800dd64 <do_memp_malloc_pool+0x5c>)
 800dd40:	4809      	ldr	r0, [pc, #36]	; (800dd68 <do_memp_malloc_pool+0x60>)
 800dd42:	f009 fa7b 	bl	801723c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800dd46:	68f8      	ldr	r0, [r7, #12]
 800dd48:	f009 fa1e 	bl	8017188 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	e003      	b.n	800dd58 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800dd50:	68f8      	ldr	r0, [r7, #12]
 800dd52:	f009 fa19 	bl	8017188 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800dd56:	2300      	movs	r3, #0
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3710      	adds	r7, #16
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}
 800dd60:	08018944 	.word	0x08018944
 800dd64:	08018974 	.word	0x08018974
 800dd68:	08018998 	.word	0x08018998

0800dd6c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b082      	sub	sp, #8
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d106      	bne.n	800dd88 <memp_malloc_pool+0x1c>
 800dd7a:	4b0a      	ldr	r3, [pc, #40]	; (800dda4 <memp_malloc_pool+0x38>)
 800dd7c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800dd80:	4909      	ldr	r1, [pc, #36]	; (800dda8 <memp_malloc_pool+0x3c>)
 800dd82:	480a      	ldr	r0, [pc, #40]	; (800ddac <memp_malloc_pool+0x40>)
 800dd84:	f009 fa5a 	bl	801723c <iprintf>
  if (desc == NULL) {
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d101      	bne.n	800dd92 <memp_malloc_pool+0x26>
    return NULL;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	e003      	b.n	800dd9a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f7ff ffb8 	bl	800dd08 <do_memp_malloc_pool>
 800dd98:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3708      	adds	r7, #8
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
 800dda2:	bf00      	nop
 800dda4:	08018944 	.word	0x08018944
 800dda8:	080189c0 	.word	0x080189c0
 800ddac:	08018998 	.word	0x08018998

0800ddb0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ddba:	79fb      	ldrb	r3, [r7, #7]
 800ddbc:	2b0c      	cmp	r3, #12
 800ddbe:	d908      	bls.n	800ddd2 <memp_malloc+0x22>
 800ddc0:	4b0a      	ldr	r3, [pc, #40]	; (800ddec <memp_malloc+0x3c>)
 800ddc2:	f240 1257 	movw	r2, #343	; 0x157
 800ddc6:	490a      	ldr	r1, [pc, #40]	; (800ddf0 <memp_malloc+0x40>)
 800ddc8:	480a      	ldr	r0, [pc, #40]	; (800ddf4 <memp_malloc+0x44>)
 800ddca:	f009 fa37 	bl	801723c <iprintf>
 800ddce:	2300      	movs	r3, #0
 800ddd0:	e008      	b.n	800dde4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ddd2:	79fb      	ldrb	r3, [r7, #7]
 800ddd4:	4a08      	ldr	r2, [pc, #32]	; (800ddf8 <memp_malloc+0x48>)
 800ddd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7ff ff94 	bl	800dd08 <do_memp_malloc_pool>
 800dde0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800dde2:	68fb      	ldr	r3, [r7, #12]
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	3710      	adds	r7, #16
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}
 800ddec:	08018944 	.word	0x08018944
 800ddf0:	080189d4 	.word	0x080189d4
 800ddf4:	08018998 	.word	0x08018998
 800ddf8:	0801b1a8 	.word	0x0801b1a8

0800ddfc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b084      	sub	sp, #16
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
 800de04:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	f003 0303 	and.w	r3, r3, #3
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d006      	beq.n	800de1e <do_memp_free_pool+0x22>
 800de10:	4b0d      	ldr	r3, [pc, #52]	; (800de48 <do_memp_free_pool+0x4c>)
 800de12:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800de16:	490d      	ldr	r1, [pc, #52]	; (800de4c <do_memp_free_pool+0x50>)
 800de18:	480d      	ldr	r0, [pc, #52]	; (800de50 <do_memp_free_pool+0x54>)
 800de1a:	f009 fa0f 	bl	801723c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800de22:	f009 f9a3 	bl	801716c <sys_arch_protect>
 800de26:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	689b      	ldr	r3, [r3, #8]
 800de2c:	681a      	ldr	r2, [r3, #0]
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	689b      	ldr	r3, [r3, #8]
 800de36:	68fa      	ldr	r2, [r7, #12]
 800de38:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800de3a:	68b8      	ldr	r0, [r7, #8]
 800de3c:	f009 f9a4 	bl	8017188 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800de40:	bf00      	nop
 800de42:	3710      	adds	r7, #16
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}
 800de48:	08018944 	.word	0x08018944
 800de4c:	080189f4 	.word	0x080189f4
 800de50:	08018998 	.word	0x08018998

0800de54 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b082      	sub	sp, #8
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
 800de5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d106      	bne.n	800de72 <memp_free_pool+0x1e>
 800de64:	4b0a      	ldr	r3, [pc, #40]	; (800de90 <memp_free_pool+0x3c>)
 800de66:	f240 1295 	movw	r2, #405	; 0x195
 800de6a:	490a      	ldr	r1, [pc, #40]	; (800de94 <memp_free_pool+0x40>)
 800de6c:	480a      	ldr	r0, [pc, #40]	; (800de98 <memp_free_pool+0x44>)
 800de6e:	f009 f9e5 	bl	801723c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d007      	beq.n	800de88 <memp_free_pool+0x34>
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d004      	beq.n	800de88 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800de7e:	6839      	ldr	r1, [r7, #0]
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f7ff ffbb 	bl	800ddfc <do_memp_free_pool>
 800de86:	e000      	b.n	800de8a <memp_free_pool+0x36>
    return;
 800de88:	bf00      	nop
}
 800de8a:	3708      	adds	r7, #8
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	08018944 	.word	0x08018944
 800de94:	080189c0 	.word	0x080189c0
 800de98:	08018998 	.word	0x08018998

0800de9c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b082      	sub	sp, #8
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	4603      	mov	r3, r0
 800dea4:	6039      	str	r1, [r7, #0]
 800dea6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800dea8:	79fb      	ldrb	r3, [r7, #7]
 800deaa:	2b0c      	cmp	r3, #12
 800deac:	d907      	bls.n	800debe <memp_free+0x22>
 800deae:	4b0c      	ldr	r3, [pc, #48]	; (800dee0 <memp_free+0x44>)
 800deb0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800deb4:	490b      	ldr	r1, [pc, #44]	; (800dee4 <memp_free+0x48>)
 800deb6:	480c      	ldr	r0, [pc, #48]	; (800dee8 <memp_free+0x4c>)
 800deb8:	f009 f9c0 	bl	801723c <iprintf>
 800debc:	e00c      	b.n	800ded8 <memp_free+0x3c>

  if (mem == NULL) {
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d008      	beq.n	800ded6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800dec4:	79fb      	ldrb	r3, [r7, #7]
 800dec6:	4a09      	ldr	r2, [pc, #36]	; (800deec <memp_free+0x50>)
 800dec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800decc:	6839      	ldr	r1, [r7, #0]
 800dece:	4618      	mov	r0, r3
 800ded0:	f7ff ff94 	bl	800ddfc <do_memp_free_pool>
 800ded4:	e000      	b.n	800ded8 <memp_free+0x3c>
    return;
 800ded6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ded8:	3708      	adds	r7, #8
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
 800dede:	bf00      	nop
 800dee0:	08018944 	.word	0x08018944
 800dee4:	08018a14 	.word	0x08018a14
 800dee8:	08018998 	.word	0x08018998
 800deec:	0801b1a8 	.word	0x0801b1a8

0800def0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800def0:	b480      	push	{r7}
 800def2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800def4:	bf00      	nop
 800def6:	46bd      	mov	sp, r7
 800def8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defc:	4770      	bx	lr
	...

0800df00 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b086      	sub	sp, #24
 800df04:	af00      	add	r7, sp, #0
 800df06:	60f8      	str	r0, [r7, #12]
 800df08:	60b9      	str	r1, [r7, #8]
 800df0a:	607a      	str	r2, [r7, #4]
 800df0c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d108      	bne.n	800df26 <netif_add+0x26>
 800df14:	4b57      	ldr	r3, [pc, #348]	; (800e074 <netif_add+0x174>)
 800df16:	f240 1227 	movw	r2, #295	; 0x127
 800df1a:	4957      	ldr	r1, [pc, #348]	; (800e078 <netif_add+0x178>)
 800df1c:	4857      	ldr	r0, [pc, #348]	; (800e07c <netif_add+0x17c>)
 800df1e:	f009 f98d 	bl	801723c <iprintf>
 800df22:	2300      	movs	r3, #0
 800df24:	e0a2      	b.n	800e06c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800df26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d108      	bne.n	800df3e <netif_add+0x3e>
 800df2c:	4b51      	ldr	r3, [pc, #324]	; (800e074 <netif_add+0x174>)
 800df2e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800df32:	4953      	ldr	r1, [pc, #332]	; (800e080 <netif_add+0x180>)
 800df34:	4851      	ldr	r0, [pc, #324]	; (800e07c <netif_add+0x17c>)
 800df36:	f009 f981 	bl	801723c <iprintf>
 800df3a:	2300      	movs	r3, #0
 800df3c:	e096      	b.n	800e06c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d101      	bne.n	800df48 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800df44:	4b4f      	ldr	r3, [pc, #316]	; (800e084 <netif_add+0x184>)
 800df46:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d101      	bne.n	800df52 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800df4e:	4b4d      	ldr	r3, [pc, #308]	; (800e084 <netif_add+0x184>)
 800df50:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d101      	bne.n	800df5c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800df58:	4b4a      	ldr	r3, [pc, #296]	; (800e084 <netif_add+0x184>)
 800df5a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	2200      	movs	r2, #0
 800df60:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	2200      	movs	r2, #0
 800df66:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	2200      	movs	r2, #0
 800df6c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	4a45      	ldr	r2, [pc, #276]	; (800e088 <netif_add+0x188>)
 800df72:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	2200      	movs	r2, #0
 800df78:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	2200      	movs	r2, #0
 800df7e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	2200      	movs	r2, #0
 800df86:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	6a3a      	ldr	r2, [r7, #32]
 800df8c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800df8e:	4b3f      	ldr	r3, [pc, #252]	; (800e08c <netif_add+0x18c>)
 800df90:	781a      	ldrb	r2, [r3, #0]
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df9c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	687a      	ldr	r2, [r7, #4]
 800dfa2:	68b9      	ldr	r1, [r7, #8]
 800dfa4:	68f8      	ldr	r0, [r7, #12]
 800dfa6:	f000 f913 	bl	800e1d0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800dfaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfac:	68f8      	ldr	r0, [r7, #12]
 800dfae:	4798      	blx	r3
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d001      	beq.n	800dfba <netif_add+0xba>
    return NULL;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	e058      	b.n	800e06c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dfc0:	2bff      	cmp	r3, #255	; 0xff
 800dfc2:	d103      	bne.n	800dfcc <netif_add+0xcc>
        netif->num = 0;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dfd0:	4b2f      	ldr	r3, [pc, #188]	; (800e090 <netif_add+0x190>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	617b      	str	r3, [r7, #20]
 800dfd6:	e02b      	b.n	800e030 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800dfd8:	697a      	ldr	r2, [r7, #20]
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	429a      	cmp	r2, r3
 800dfde:	d106      	bne.n	800dfee <netif_add+0xee>
 800dfe0:	4b24      	ldr	r3, [pc, #144]	; (800e074 <netif_add+0x174>)
 800dfe2:	f240 128b 	movw	r2, #395	; 0x18b
 800dfe6:	492b      	ldr	r1, [pc, #172]	; (800e094 <netif_add+0x194>)
 800dfe8:	4824      	ldr	r0, [pc, #144]	; (800e07c <netif_add+0x17c>)
 800dfea:	f009 f927 	bl	801723c <iprintf>
        num_netifs++;
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	3301      	adds	r3, #1
 800dff2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	2bff      	cmp	r3, #255	; 0xff
 800dff8:	dd06      	ble.n	800e008 <netif_add+0x108>
 800dffa:	4b1e      	ldr	r3, [pc, #120]	; (800e074 <netif_add+0x174>)
 800dffc:	f240 128d 	movw	r2, #397	; 0x18d
 800e000:	4925      	ldr	r1, [pc, #148]	; (800e098 <netif_add+0x198>)
 800e002:	481e      	ldr	r0, [pc, #120]	; (800e07c <netif_add+0x17c>)
 800e004:	f009 f91a 	bl	801723c <iprintf>
        if (netif2->num == netif->num) {
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e014:	429a      	cmp	r2, r3
 800e016:	d108      	bne.n	800e02a <netif_add+0x12a>
          netif->num++;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e01e:	3301      	adds	r3, #1
 800e020:	b2da      	uxtb	r2, r3
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800e028:	e005      	b.n	800e036 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	617b      	str	r3, [r7, #20]
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d1d0      	bne.n	800dfd8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d1be      	bne.n	800dfba <netif_add+0xba>
  }
  if (netif->num == 254) {
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e042:	2bfe      	cmp	r3, #254	; 0xfe
 800e044:	d103      	bne.n	800e04e <netif_add+0x14e>
    netif_num = 0;
 800e046:	4b11      	ldr	r3, [pc, #68]	; (800e08c <netif_add+0x18c>)
 800e048:	2200      	movs	r2, #0
 800e04a:	701a      	strb	r2, [r3, #0]
 800e04c:	e006      	b.n	800e05c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e054:	3301      	adds	r3, #1
 800e056:	b2da      	uxtb	r2, r3
 800e058:	4b0c      	ldr	r3, [pc, #48]	; (800e08c <netif_add+0x18c>)
 800e05a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e05c:	4b0c      	ldr	r3, [pc, #48]	; (800e090 <netif_add+0x190>)
 800e05e:	681a      	ldr	r2, [r3, #0]
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e064:	4a0a      	ldr	r2, [pc, #40]	; (800e090 <netif_add+0x190>)
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e06a:	68fb      	ldr	r3, [r7, #12]
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3718      	adds	r7, #24
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}
 800e074:	08018a30 	.word	0x08018a30
 800e078:	08018ac4 	.word	0x08018ac4
 800e07c:	08018a80 	.word	0x08018a80
 800e080:	08018ae0 	.word	0x08018ae0
 800e084:	0801b21c 	.word	0x0801b21c
 800e088:	0800e4ab 	.word	0x0800e4ab
 800e08c:	20011060 	.word	0x20011060
 800e090:	20011058 	.word	0x20011058
 800e094:	08018b04 	.word	0x08018b04
 800e098:	08018b18 	.word	0x08018b18

0800e09c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b082      	sub	sp, #8
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
 800e0a4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e0a6:	6839      	ldr	r1, [r7, #0]
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f002 fb7d 	bl	80107a8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e0ae:	6839      	ldr	r1, [r7, #0]
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f006 fc91 	bl	80149d8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e0b6:	bf00      	nop
 800e0b8:	3708      	adds	r7, #8
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}
	...

0800e0c0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b086      	sub	sp, #24
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	60f8      	str	r0, [r7, #12]
 800e0c8:	60b9      	str	r1, [r7, #8]
 800e0ca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d106      	bne.n	800e0e0 <netif_do_set_ipaddr+0x20>
 800e0d2:	4b1d      	ldr	r3, [pc, #116]	; (800e148 <netif_do_set_ipaddr+0x88>)
 800e0d4:	f240 12cb 	movw	r2, #459	; 0x1cb
 800e0d8:	491c      	ldr	r1, [pc, #112]	; (800e14c <netif_do_set_ipaddr+0x8c>)
 800e0da:	481d      	ldr	r0, [pc, #116]	; (800e150 <netif_do_set_ipaddr+0x90>)
 800e0dc:	f009 f8ae 	bl	801723c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d106      	bne.n	800e0f4 <netif_do_set_ipaddr+0x34>
 800e0e6:	4b18      	ldr	r3, [pc, #96]	; (800e148 <netif_do_set_ipaddr+0x88>)
 800e0e8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800e0ec:	4917      	ldr	r1, [pc, #92]	; (800e14c <netif_do_set_ipaddr+0x8c>)
 800e0ee:	4818      	ldr	r0, [pc, #96]	; (800e150 <netif_do_set_ipaddr+0x90>)
 800e0f0:	f009 f8a4 	bl	801723c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	681a      	ldr	r2, [r3, #0]
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	3304      	adds	r3, #4
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d01c      	beq.n	800e13c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	3304      	adds	r3, #4
 800e10c:	681a      	ldr	r2, [r3, #0]
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e112:	f107 0314 	add.w	r3, r7, #20
 800e116:	4619      	mov	r1, r3
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f7ff ffbf 	bl	800e09c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d002      	beq.n	800e12a <netif_do_set_ipaddr+0x6a>
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	e000      	b.n	800e12c <netif_do_set_ipaddr+0x6c>
 800e12a:	2300      	movs	r3, #0
 800e12c:	68fa      	ldr	r2, [r7, #12]
 800e12e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e130:	2101      	movs	r1, #1
 800e132:	68f8      	ldr	r0, [r7, #12]
 800e134:	f000 f8d2 	bl	800e2dc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800e138:	2301      	movs	r3, #1
 800e13a:	e000      	b.n	800e13e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800e13c:	2300      	movs	r3, #0
}
 800e13e:	4618      	mov	r0, r3
 800e140:	3718      	adds	r7, #24
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}
 800e146:	bf00      	nop
 800e148:	08018a30 	.word	0x08018a30
 800e14c:	08018b48 	.word	0x08018b48
 800e150:	08018a80 	.word	0x08018a80

0800e154 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e154:	b480      	push	{r7}
 800e156:	b085      	sub	sp, #20
 800e158:	af00      	add	r7, sp, #0
 800e15a:	60f8      	str	r0, [r7, #12]
 800e15c:	60b9      	str	r1, [r7, #8]
 800e15e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	681a      	ldr	r2, [r3, #0]
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	3308      	adds	r3, #8
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	429a      	cmp	r2, r3
 800e16c:	d00a      	beq.n	800e184 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d002      	beq.n	800e17a <netif_do_set_netmask+0x26>
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	e000      	b.n	800e17c <netif_do_set_netmask+0x28>
 800e17a:	2300      	movs	r3, #0
 800e17c:	68fa      	ldr	r2, [r7, #12]
 800e17e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e180:	2301      	movs	r3, #1
 800e182:	e000      	b.n	800e186 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800e184:	2300      	movs	r3, #0
}
 800e186:	4618      	mov	r0, r3
 800e188:	3714      	adds	r7, #20
 800e18a:	46bd      	mov	sp, r7
 800e18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e190:	4770      	bx	lr

0800e192 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e192:	b480      	push	{r7}
 800e194:	b085      	sub	sp, #20
 800e196:	af00      	add	r7, sp, #0
 800e198:	60f8      	str	r0, [r7, #12]
 800e19a:	60b9      	str	r1, [r7, #8]
 800e19c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	681a      	ldr	r2, [r3, #0]
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	330c      	adds	r3, #12
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d00a      	beq.n	800e1c2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d002      	beq.n	800e1b8 <netif_do_set_gw+0x26>
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	e000      	b.n	800e1ba <netif_do_set_gw+0x28>
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	68fa      	ldr	r2, [r7, #12]
 800e1bc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e1be:	2301      	movs	r3, #1
 800e1c0:	e000      	b.n	800e1c4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800e1c2:	2300      	movs	r3, #0
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	3714      	adds	r7, #20
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr

0800e1d0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b088      	sub	sp, #32
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	60f8      	str	r0, [r7, #12]
 800e1d8:	60b9      	str	r1, [r7, #8]
 800e1da:	607a      	str	r2, [r7, #4]
 800e1dc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d101      	bne.n	800e1f0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e1ec:	4b1c      	ldr	r3, [pc, #112]	; (800e260 <netif_set_addr+0x90>)
 800e1ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d101      	bne.n	800e1fa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e1f6:	4b1a      	ldr	r3, [pc, #104]	; (800e260 <netif_set_addr+0x90>)
 800e1f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d101      	bne.n	800e204 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e200:	4b17      	ldr	r3, [pc, #92]	; (800e260 <netif_set_addr+0x90>)
 800e202:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d003      	beq.n	800e212 <netif_set_addr+0x42>
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d101      	bne.n	800e216 <netif_set_addr+0x46>
 800e212:	2301      	movs	r3, #1
 800e214:	e000      	b.n	800e218 <netif_set_addr+0x48>
 800e216:	2300      	movs	r3, #0
 800e218:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e21a:	697b      	ldr	r3, [r7, #20]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d006      	beq.n	800e22e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e220:	f107 0310 	add.w	r3, r7, #16
 800e224:	461a      	mov	r2, r3
 800e226:	68b9      	ldr	r1, [r7, #8]
 800e228:	68f8      	ldr	r0, [r7, #12]
 800e22a:	f7ff ff49 	bl	800e0c0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e22e:	69fa      	ldr	r2, [r7, #28]
 800e230:	6879      	ldr	r1, [r7, #4]
 800e232:	68f8      	ldr	r0, [r7, #12]
 800e234:	f7ff ff8e 	bl	800e154 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e238:	69ba      	ldr	r2, [r7, #24]
 800e23a:	6839      	ldr	r1, [r7, #0]
 800e23c:	68f8      	ldr	r0, [r7, #12]
 800e23e:	f7ff ffa8 	bl	800e192 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d106      	bne.n	800e256 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e248:	f107 0310 	add.w	r3, r7, #16
 800e24c:	461a      	mov	r2, r3
 800e24e:	68b9      	ldr	r1, [r7, #8]
 800e250:	68f8      	ldr	r0, [r7, #12]
 800e252:	f7ff ff35 	bl	800e0c0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e256:	bf00      	nop
 800e258:	3720      	adds	r7, #32
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
 800e25e:	bf00      	nop
 800e260:	0801b21c 	.word	0x0801b21c

0800e264 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e264:	b480      	push	{r7}
 800e266:	b083      	sub	sp, #12
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e26c:	4a04      	ldr	r2, [pc, #16]	; (800e280 <netif_set_default+0x1c>)
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e272:	bf00      	nop
 800e274:	370c      	adds	r7, #12
 800e276:	46bd      	mov	sp, r7
 800e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27c:	4770      	bx	lr
 800e27e:	bf00      	nop
 800e280:	2001105c 	.word	0x2001105c

0800e284 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b082      	sub	sp, #8
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d107      	bne.n	800e2a2 <netif_set_up+0x1e>
 800e292:	4b0f      	ldr	r3, [pc, #60]	; (800e2d0 <netif_set_up+0x4c>)
 800e294:	f44f 7254 	mov.w	r2, #848	; 0x350
 800e298:	490e      	ldr	r1, [pc, #56]	; (800e2d4 <netif_set_up+0x50>)
 800e29a:	480f      	ldr	r0, [pc, #60]	; (800e2d8 <netif_set_up+0x54>)
 800e29c:	f008 ffce 	bl	801723c <iprintf>
 800e2a0:	e013      	b.n	800e2ca <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e2a8:	f003 0301 	and.w	r3, r3, #1
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d10c      	bne.n	800e2ca <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e2b6:	f043 0301 	orr.w	r3, r3, #1
 800e2ba:	b2da      	uxtb	r2, r3
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e2c2:	2103      	movs	r1, #3
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f000 f809 	bl	800e2dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e2ca:	3708      	adds	r7, #8
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}
 800e2d0:	08018a30 	.word	0x08018a30
 800e2d4:	08018bb8 	.word	0x08018bb8
 800e2d8:	08018a80 	.word	0x08018a80

0800e2dc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b082      	sub	sp, #8
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	460b      	mov	r3, r1
 800e2e6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d106      	bne.n	800e2fc <netif_issue_reports+0x20>
 800e2ee:	4b18      	ldr	r3, [pc, #96]	; (800e350 <netif_issue_reports+0x74>)
 800e2f0:	f240 326d 	movw	r2, #877	; 0x36d
 800e2f4:	4917      	ldr	r1, [pc, #92]	; (800e354 <netif_issue_reports+0x78>)
 800e2f6:	4818      	ldr	r0, [pc, #96]	; (800e358 <netif_issue_reports+0x7c>)
 800e2f8:	f008 ffa0 	bl	801723c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e302:	f003 0304 	and.w	r3, r3, #4
 800e306:	2b00      	cmp	r3, #0
 800e308:	d01e      	beq.n	800e348 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e310:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e314:	2b00      	cmp	r3, #0
 800e316:	d017      	beq.n	800e348 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e318:	78fb      	ldrb	r3, [r7, #3]
 800e31a:	f003 0301 	and.w	r3, r3, #1
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d013      	beq.n	800e34a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	3304      	adds	r3, #4
 800e326:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d00e      	beq.n	800e34a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e332:	f003 0308 	and.w	r3, r3, #8
 800e336:	2b00      	cmp	r3, #0
 800e338:	d007      	beq.n	800e34a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	3304      	adds	r3, #4
 800e33e:	4619      	mov	r1, r3
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f007 fab3 	bl	80158ac <etharp_request>
 800e346:	e000      	b.n	800e34a <netif_issue_reports+0x6e>
    return;
 800e348:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e34a:	3708      	adds	r7, #8
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}
 800e350:	08018a30 	.word	0x08018a30
 800e354:	08018bd4 	.word	0x08018bd4
 800e358:	08018a80 	.word	0x08018a80

0800e35c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b082      	sub	sp, #8
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d107      	bne.n	800e37a <netif_set_down+0x1e>
 800e36a:	4b12      	ldr	r3, [pc, #72]	; (800e3b4 <netif_set_down+0x58>)
 800e36c:	f240 329b 	movw	r2, #923	; 0x39b
 800e370:	4911      	ldr	r1, [pc, #68]	; (800e3b8 <netif_set_down+0x5c>)
 800e372:	4812      	ldr	r0, [pc, #72]	; (800e3bc <netif_set_down+0x60>)
 800e374:	f008 ff62 	bl	801723c <iprintf>
 800e378:	e019      	b.n	800e3ae <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e380:	f003 0301 	and.w	r3, r3, #1
 800e384:	2b00      	cmp	r3, #0
 800e386:	d012      	beq.n	800e3ae <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e38e:	f023 0301 	bic.w	r3, r3, #1
 800e392:	b2da      	uxtb	r2, r3
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e3a0:	f003 0308 	and.w	r3, r3, #8
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d002      	beq.n	800e3ae <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f006 fe3d 	bl	8015028 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e3ae:	3708      	adds	r7, #8
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}
 800e3b4:	08018a30 	.word	0x08018a30
 800e3b8:	08018bf8 	.word	0x08018bf8
 800e3bc:	08018a80 	.word	0x08018a80

0800e3c0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b082      	sub	sp, #8
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d107      	bne.n	800e3de <netif_set_link_up+0x1e>
 800e3ce:	4b13      	ldr	r3, [pc, #76]	; (800e41c <netif_set_link_up+0x5c>)
 800e3d0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800e3d4:	4912      	ldr	r1, [pc, #72]	; (800e420 <netif_set_link_up+0x60>)
 800e3d6:	4813      	ldr	r0, [pc, #76]	; (800e424 <netif_set_link_up+0x64>)
 800e3d8:	f008 ff30 	bl	801723c <iprintf>
 800e3dc:	e01b      	b.n	800e416 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e3e4:	f003 0304 	and.w	r3, r3, #4
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d114      	bne.n	800e416 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e3f2:	f043 0304 	orr.w	r3, r3, #4
 800e3f6:	b2da      	uxtb	r2, r3
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e3fe:	2103      	movs	r1, #3
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f7ff ff6b 	bl	800e2dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	69db      	ldr	r3, [r3, #28]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d003      	beq.n	800e416 <netif_set_link_up+0x56>
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	69db      	ldr	r3, [r3, #28]
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e416:	3708      	adds	r7, #8
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}
 800e41c:	08018a30 	.word	0x08018a30
 800e420:	08018c18 	.word	0x08018c18
 800e424:	08018a80 	.word	0x08018a80

0800e428 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b082      	sub	sp, #8
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d107      	bne.n	800e446 <netif_set_link_down+0x1e>
 800e436:	4b11      	ldr	r3, [pc, #68]	; (800e47c <netif_set_link_down+0x54>)
 800e438:	f240 4206 	movw	r2, #1030	; 0x406
 800e43c:	4910      	ldr	r1, [pc, #64]	; (800e480 <netif_set_link_down+0x58>)
 800e43e:	4811      	ldr	r0, [pc, #68]	; (800e484 <netif_set_link_down+0x5c>)
 800e440:	f008 fefc 	bl	801723c <iprintf>
 800e444:	e017      	b.n	800e476 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e44c:	f003 0304 	and.w	r3, r3, #4
 800e450:	2b00      	cmp	r3, #0
 800e452:	d010      	beq.n	800e476 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e45a:	f023 0304 	bic.w	r3, r3, #4
 800e45e:	b2da      	uxtb	r2, r3
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	69db      	ldr	r3, [r3, #28]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d003      	beq.n	800e476 <netif_set_link_down+0x4e>
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	69db      	ldr	r3, [r3, #28]
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e476:	3708      	adds	r7, #8
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}
 800e47c:	08018a30 	.word	0x08018a30
 800e480:	08018c3c 	.word	0x08018c3c
 800e484:	08018a80 	.word	0x08018a80

0800e488 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e488:	b480      	push	{r7}
 800e48a:	b083      	sub	sp, #12
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
 800e490:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d002      	beq.n	800e49e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	683a      	ldr	r2, [r7, #0]
 800e49c:	61da      	str	r2, [r3, #28]
  }
}
 800e49e:	bf00      	nop
 800e4a0:	370c      	adds	r7, #12
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a8:	4770      	bx	lr

0800e4aa <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e4aa:	b480      	push	{r7}
 800e4ac:	b085      	sub	sp, #20
 800e4ae:	af00      	add	r7, sp, #0
 800e4b0:	60f8      	str	r0, [r7, #12]
 800e4b2:	60b9      	str	r1, [r7, #8]
 800e4b4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e4b6:	f06f 030b 	mvn.w	r3, #11
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3714      	adds	r7, #20
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c4:	4770      	bx	lr
	...

0800e4c8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e4c8:	b480      	push	{r7}
 800e4ca:	b085      	sub	sp, #20
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e4d2:	79fb      	ldrb	r3, [r7, #7]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d013      	beq.n	800e500 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e4d8:	4b0d      	ldr	r3, [pc, #52]	; (800e510 <netif_get_by_index+0x48>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	60fb      	str	r3, [r7, #12]
 800e4de:	e00c      	b.n	800e4fa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e4e6:	3301      	adds	r3, #1
 800e4e8:	b2db      	uxtb	r3, r3
 800e4ea:	79fa      	ldrb	r2, [r7, #7]
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d101      	bne.n	800e4f4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	e006      	b.n	800e502 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	60fb      	str	r3, [r7, #12]
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d1ef      	bne.n	800e4e0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e500:	2300      	movs	r3, #0
}
 800e502:	4618      	mov	r0, r3
 800e504:	3714      	adds	r7, #20
 800e506:	46bd      	mov	sp, r7
 800e508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50c:	4770      	bx	lr
 800e50e:	bf00      	nop
 800e510:	20011058 	.word	0x20011058

0800e514 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b082      	sub	sp, #8
 800e518:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e51a:	f008 fe27 	bl	801716c <sys_arch_protect>
 800e51e:	6038      	str	r0, [r7, #0]
 800e520:	4b0d      	ldr	r3, [pc, #52]	; (800e558 <pbuf_free_ooseq+0x44>)
 800e522:	2200      	movs	r2, #0
 800e524:	701a      	strb	r2, [r3, #0]
 800e526:	6838      	ldr	r0, [r7, #0]
 800e528:	f008 fe2e 	bl	8017188 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e52c:	4b0b      	ldr	r3, [pc, #44]	; (800e55c <pbuf_free_ooseq+0x48>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	607b      	str	r3, [r7, #4]
 800e532:	e00a      	b.n	800e54a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d003      	beq.n	800e544 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f002 f971 	bl	8010824 <tcp_free_ooseq>
      return;
 800e542:	e005      	b.n	800e550 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	68db      	ldr	r3, [r3, #12]
 800e548:	607b      	str	r3, [r7, #4]
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d1f1      	bne.n	800e534 <pbuf_free_ooseq+0x20>
    }
  }
}
 800e550:	3708      	adds	r7, #8
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}
 800e556:	bf00      	nop
 800e558:	20011061 	.word	0x20011061
 800e55c:	20011070 	.word	0x20011070

0800e560 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b082      	sub	sp, #8
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e568:	f7ff ffd4 	bl	800e514 <pbuf_free_ooseq>
}
 800e56c:	bf00      	nop
 800e56e:	3708      	adds	r7, #8
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}

0800e574 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b082      	sub	sp, #8
 800e578:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e57a:	f008 fdf7 	bl	801716c <sys_arch_protect>
 800e57e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e580:	4b0f      	ldr	r3, [pc, #60]	; (800e5c0 <pbuf_pool_is_empty+0x4c>)
 800e582:	781b      	ldrb	r3, [r3, #0]
 800e584:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e586:	4b0e      	ldr	r3, [pc, #56]	; (800e5c0 <pbuf_pool_is_empty+0x4c>)
 800e588:	2201      	movs	r2, #1
 800e58a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f008 fdfb 	bl	8017188 <sys_arch_unprotect>

  if (!queued) {
 800e592:	78fb      	ldrb	r3, [r7, #3]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d10f      	bne.n	800e5b8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e598:	2100      	movs	r1, #0
 800e59a:	480a      	ldr	r0, [pc, #40]	; (800e5c4 <pbuf_pool_is_empty+0x50>)
 800e59c:	f7fe fea6 	bl	800d2ec <tcpip_try_callback>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d008      	beq.n	800e5b8 <pbuf_pool_is_empty+0x44>
 800e5a6:	f008 fde1 	bl	801716c <sys_arch_protect>
 800e5aa:	6078      	str	r0, [r7, #4]
 800e5ac:	4b04      	ldr	r3, [pc, #16]	; (800e5c0 <pbuf_pool_is_empty+0x4c>)
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	701a      	strb	r2, [r3, #0]
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f008 fde8 	bl	8017188 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e5b8:	bf00      	nop
 800e5ba:	3708      	adds	r7, #8
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}
 800e5c0:	20011061 	.word	0x20011061
 800e5c4:	0800e561 	.word	0x0800e561

0800e5c8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e5c8:	b480      	push	{r7}
 800e5ca:	b085      	sub	sp, #20
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	60f8      	str	r0, [r7, #12]
 800e5d0:	60b9      	str	r1, [r7, #8]
 800e5d2:	4611      	mov	r1, r2
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	460b      	mov	r3, r1
 800e5d8:	80fb      	strh	r3, [r7, #6]
 800e5da:	4613      	mov	r3, r2
 800e5dc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	68ba      	ldr	r2, [r7, #8]
 800e5e8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	88fa      	ldrh	r2, [r7, #6]
 800e5ee:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	88ba      	ldrh	r2, [r7, #4]
 800e5f4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e5f6:	8b3b      	ldrh	r3, [r7, #24]
 800e5f8:	b2da      	uxtb	r2, r3
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	7f3a      	ldrb	r2, [r7, #28]
 800e602:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	2201      	movs	r2, #1
 800e608:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	2200      	movs	r2, #0
 800e60e:	73da      	strb	r2, [r3, #15]
}
 800e610:	bf00      	nop
 800e612:	3714      	adds	r7, #20
 800e614:	46bd      	mov	sp, r7
 800e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61a:	4770      	bx	lr

0800e61c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b08c      	sub	sp, #48	; 0x30
 800e620:	af02      	add	r7, sp, #8
 800e622:	4603      	mov	r3, r0
 800e624:	71fb      	strb	r3, [r7, #7]
 800e626:	460b      	mov	r3, r1
 800e628:	80bb      	strh	r3, [r7, #4]
 800e62a:	4613      	mov	r3, r2
 800e62c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e62e:	79fb      	ldrb	r3, [r7, #7]
 800e630:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e632:	887b      	ldrh	r3, [r7, #2]
 800e634:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e638:	d07f      	beq.n	800e73a <pbuf_alloc+0x11e>
 800e63a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e63e:	f300 80c8 	bgt.w	800e7d2 <pbuf_alloc+0x1b6>
 800e642:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e646:	d010      	beq.n	800e66a <pbuf_alloc+0x4e>
 800e648:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e64c:	f300 80c1 	bgt.w	800e7d2 <pbuf_alloc+0x1b6>
 800e650:	2b01      	cmp	r3, #1
 800e652:	d002      	beq.n	800e65a <pbuf_alloc+0x3e>
 800e654:	2b41      	cmp	r3, #65	; 0x41
 800e656:	f040 80bc 	bne.w	800e7d2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e65a:	887a      	ldrh	r2, [r7, #2]
 800e65c:	88bb      	ldrh	r3, [r7, #4]
 800e65e:	4619      	mov	r1, r3
 800e660:	2000      	movs	r0, #0
 800e662:	f000 f8d1 	bl	800e808 <pbuf_alloc_reference>
 800e666:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e668:	e0bd      	b.n	800e7e6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e66a:	2300      	movs	r3, #0
 800e66c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e66e:	2300      	movs	r3, #0
 800e670:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e672:	88bb      	ldrh	r3, [r7, #4]
 800e674:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e676:	200c      	movs	r0, #12
 800e678:	f7ff fb9a 	bl	800ddb0 <memp_malloc>
 800e67c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e67e:	693b      	ldr	r3, [r7, #16]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d109      	bne.n	800e698 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e684:	f7ff ff76 	bl	800e574 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d002      	beq.n	800e694 <pbuf_alloc+0x78>
            pbuf_free(p);
 800e68e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e690:	f000 faa8 	bl	800ebe4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e694:	2300      	movs	r3, #0
 800e696:	e0a7      	b.n	800e7e8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e698:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e69a:	3303      	adds	r3, #3
 800e69c:	b29b      	uxth	r3, r3
 800e69e:	f023 0303 	bic.w	r3, r3, #3
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e6a8:	b29b      	uxth	r3, r3
 800e6aa:	8b7a      	ldrh	r2, [r7, #26]
 800e6ac:	4293      	cmp	r3, r2
 800e6ae:	bf28      	it	cs
 800e6b0:	4613      	movcs	r3, r2
 800e6b2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e6b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e6b6:	3310      	adds	r3, #16
 800e6b8:	693a      	ldr	r2, [r7, #16]
 800e6ba:	4413      	add	r3, r2
 800e6bc:	3303      	adds	r3, #3
 800e6be:	f023 0303 	bic.w	r3, r3, #3
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	89f9      	ldrh	r1, [r7, #14]
 800e6c6:	8b7a      	ldrh	r2, [r7, #26]
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	9301      	str	r3, [sp, #4]
 800e6cc:	887b      	ldrh	r3, [r7, #2]
 800e6ce:	9300      	str	r3, [sp, #0]
 800e6d0:	460b      	mov	r3, r1
 800e6d2:	4601      	mov	r1, r0
 800e6d4:	6938      	ldr	r0, [r7, #16]
 800e6d6:	f7ff ff77 	bl	800e5c8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	685b      	ldr	r3, [r3, #4]
 800e6de:	f003 0303 	and.w	r3, r3, #3
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d006      	beq.n	800e6f4 <pbuf_alloc+0xd8>
 800e6e6:	4b42      	ldr	r3, [pc, #264]	; (800e7f0 <pbuf_alloc+0x1d4>)
 800e6e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e6ec:	4941      	ldr	r1, [pc, #260]	; (800e7f4 <pbuf_alloc+0x1d8>)
 800e6ee:	4842      	ldr	r0, [pc, #264]	; (800e7f8 <pbuf_alloc+0x1dc>)
 800e6f0:	f008 fda4 	bl	801723c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e6f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e6f6:	3303      	adds	r3, #3
 800e6f8:	f023 0303 	bic.w	r3, r3, #3
 800e6fc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e700:	d106      	bne.n	800e710 <pbuf_alloc+0xf4>
 800e702:	4b3b      	ldr	r3, [pc, #236]	; (800e7f0 <pbuf_alloc+0x1d4>)
 800e704:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e708:	493c      	ldr	r1, [pc, #240]	; (800e7fc <pbuf_alloc+0x1e0>)
 800e70a:	483b      	ldr	r0, [pc, #236]	; (800e7f8 <pbuf_alloc+0x1dc>)
 800e70c:	f008 fd96 	bl	801723c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e712:	2b00      	cmp	r3, #0
 800e714:	d102      	bne.n	800e71c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	627b      	str	r3, [r7, #36]	; 0x24
 800e71a:	e002      	b.n	800e722 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e71c:	69fb      	ldr	r3, [r7, #28]
 800e71e:	693a      	ldr	r2, [r7, #16]
 800e720:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e722:	693b      	ldr	r3, [r7, #16]
 800e724:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e726:	8b7a      	ldrh	r2, [r7, #26]
 800e728:	89fb      	ldrh	r3, [r7, #14]
 800e72a:	1ad3      	subs	r3, r2, r3
 800e72c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e72e:	2300      	movs	r3, #0
 800e730:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e732:	8b7b      	ldrh	r3, [r7, #26]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d19e      	bne.n	800e676 <pbuf_alloc+0x5a>
      break;
 800e738:	e055      	b.n	800e7e6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e73a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e73c:	3303      	adds	r3, #3
 800e73e:	b29b      	uxth	r3, r3
 800e740:	f023 0303 	bic.w	r3, r3, #3
 800e744:	b29a      	uxth	r2, r3
 800e746:	88bb      	ldrh	r3, [r7, #4]
 800e748:	3303      	adds	r3, #3
 800e74a:	b29b      	uxth	r3, r3
 800e74c:	f023 0303 	bic.w	r3, r3, #3
 800e750:	b29b      	uxth	r3, r3
 800e752:	4413      	add	r3, r2
 800e754:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e756:	8b3b      	ldrh	r3, [r7, #24]
 800e758:	3310      	adds	r3, #16
 800e75a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e75c:	8b3a      	ldrh	r2, [r7, #24]
 800e75e:	88bb      	ldrh	r3, [r7, #4]
 800e760:	3303      	adds	r3, #3
 800e762:	f023 0303 	bic.w	r3, r3, #3
 800e766:	429a      	cmp	r2, r3
 800e768:	d306      	bcc.n	800e778 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e76a:	8afa      	ldrh	r2, [r7, #22]
 800e76c:	88bb      	ldrh	r3, [r7, #4]
 800e76e:	3303      	adds	r3, #3
 800e770:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e774:	429a      	cmp	r2, r3
 800e776:	d201      	bcs.n	800e77c <pbuf_alloc+0x160>
        return NULL;
 800e778:	2300      	movs	r3, #0
 800e77a:	e035      	b.n	800e7e8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e77c:	8afb      	ldrh	r3, [r7, #22]
 800e77e:	4618      	mov	r0, r3
 800e780:	f7ff f972 	bl	800da68 <mem_malloc>
 800e784:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d101      	bne.n	800e790 <pbuf_alloc+0x174>
        return NULL;
 800e78c:	2300      	movs	r3, #0
 800e78e:	e02b      	b.n	800e7e8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e790:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e792:	3310      	adds	r3, #16
 800e794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e796:	4413      	add	r3, r2
 800e798:	3303      	adds	r3, #3
 800e79a:	f023 0303 	bic.w	r3, r3, #3
 800e79e:	4618      	mov	r0, r3
 800e7a0:	88b9      	ldrh	r1, [r7, #4]
 800e7a2:	88ba      	ldrh	r2, [r7, #4]
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	9301      	str	r3, [sp, #4]
 800e7a8:	887b      	ldrh	r3, [r7, #2]
 800e7aa:	9300      	str	r3, [sp, #0]
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	4601      	mov	r1, r0
 800e7b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7b2:	f7ff ff09 	bl	800e5c8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b8:	685b      	ldr	r3, [r3, #4]
 800e7ba:	f003 0303 	and.w	r3, r3, #3
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d010      	beq.n	800e7e4 <pbuf_alloc+0x1c8>
 800e7c2:	4b0b      	ldr	r3, [pc, #44]	; (800e7f0 <pbuf_alloc+0x1d4>)
 800e7c4:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e7c8:	490d      	ldr	r1, [pc, #52]	; (800e800 <pbuf_alloc+0x1e4>)
 800e7ca:	480b      	ldr	r0, [pc, #44]	; (800e7f8 <pbuf_alloc+0x1dc>)
 800e7cc:	f008 fd36 	bl	801723c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e7d0:	e008      	b.n	800e7e4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e7d2:	4b07      	ldr	r3, [pc, #28]	; (800e7f0 <pbuf_alloc+0x1d4>)
 800e7d4:	f240 1227 	movw	r2, #295	; 0x127
 800e7d8:	490a      	ldr	r1, [pc, #40]	; (800e804 <pbuf_alloc+0x1e8>)
 800e7da:	4807      	ldr	r0, [pc, #28]	; (800e7f8 <pbuf_alloc+0x1dc>)
 800e7dc:	f008 fd2e 	bl	801723c <iprintf>
      return NULL;
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	e001      	b.n	800e7e8 <pbuf_alloc+0x1cc>
      break;
 800e7e4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3728      	adds	r7, #40	; 0x28
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}
 800e7f0:	08018c60 	.word	0x08018c60
 800e7f4:	08018c90 	.word	0x08018c90
 800e7f8:	08018cc0 	.word	0x08018cc0
 800e7fc:	08018ce8 	.word	0x08018ce8
 800e800:	08018d1c 	.word	0x08018d1c
 800e804:	08018d48 	.word	0x08018d48

0800e808 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b086      	sub	sp, #24
 800e80c:	af02      	add	r7, sp, #8
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	460b      	mov	r3, r1
 800e812:	807b      	strh	r3, [r7, #2]
 800e814:	4613      	mov	r3, r2
 800e816:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e818:	883b      	ldrh	r3, [r7, #0]
 800e81a:	2b41      	cmp	r3, #65	; 0x41
 800e81c:	d009      	beq.n	800e832 <pbuf_alloc_reference+0x2a>
 800e81e:	883b      	ldrh	r3, [r7, #0]
 800e820:	2b01      	cmp	r3, #1
 800e822:	d006      	beq.n	800e832 <pbuf_alloc_reference+0x2a>
 800e824:	4b0f      	ldr	r3, [pc, #60]	; (800e864 <pbuf_alloc_reference+0x5c>)
 800e826:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e82a:	490f      	ldr	r1, [pc, #60]	; (800e868 <pbuf_alloc_reference+0x60>)
 800e82c:	480f      	ldr	r0, [pc, #60]	; (800e86c <pbuf_alloc_reference+0x64>)
 800e82e:	f008 fd05 	bl	801723c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e832:	200b      	movs	r0, #11
 800e834:	f7ff fabc 	bl	800ddb0 <memp_malloc>
 800e838:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d101      	bne.n	800e844 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e840:	2300      	movs	r3, #0
 800e842:	e00b      	b.n	800e85c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e844:	8879      	ldrh	r1, [r7, #2]
 800e846:	887a      	ldrh	r2, [r7, #2]
 800e848:	2300      	movs	r3, #0
 800e84a:	9301      	str	r3, [sp, #4]
 800e84c:	883b      	ldrh	r3, [r7, #0]
 800e84e:	9300      	str	r3, [sp, #0]
 800e850:	460b      	mov	r3, r1
 800e852:	6879      	ldr	r1, [r7, #4]
 800e854:	68f8      	ldr	r0, [r7, #12]
 800e856:	f7ff feb7 	bl	800e5c8 <pbuf_init_alloced_pbuf>
  return p;
 800e85a:	68fb      	ldr	r3, [r7, #12]
}
 800e85c:	4618      	mov	r0, r3
 800e85e:	3710      	adds	r7, #16
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}
 800e864:	08018c60 	.word	0x08018c60
 800e868:	08018d64 	.word	0x08018d64
 800e86c:	08018cc0 	.word	0x08018cc0

0800e870 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b088      	sub	sp, #32
 800e874:	af02      	add	r7, sp, #8
 800e876:	607b      	str	r3, [r7, #4]
 800e878:	4603      	mov	r3, r0
 800e87a:	73fb      	strb	r3, [r7, #15]
 800e87c:	460b      	mov	r3, r1
 800e87e:	81bb      	strh	r3, [r7, #12]
 800e880:	4613      	mov	r3, r2
 800e882:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e884:	7bfb      	ldrb	r3, [r7, #15]
 800e886:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e888:	8a7b      	ldrh	r3, [r7, #18]
 800e88a:	3303      	adds	r3, #3
 800e88c:	f023 0203 	bic.w	r2, r3, #3
 800e890:	89bb      	ldrh	r3, [r7, #12]
 800e892:	441a      	add	r2, r3
 800e894:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e896:	429a      	cmp	r2, r3
 800e898:	d901      	bls.n	800e89e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e89a:	2300      	movs	r3, #0
 800e89c:	e018      	b.n	800e8d0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e89e:	6a3b      	ldr	r3, [r7, #32]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d007      	beq.n	800e8b4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e8a4:	8a7b      	ldrh	r3, [r7, #18]
 800e8a6:	3303      	adds	r3, #3
 800e8a8:	f023 0303 	bic.w	r3, r3, #3
 800e8ac:	6a3a      	ldr	r2, [r7, #32]
 800e8ae:	4413      	add	r3, r2
 800e8b0:	617b      	str	r3, [r7, #20]
 800e8b2:	e001      	b.n	800e8b8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	89b9      	ldrh	r1, [r7, #12]
 800e8bc:	89ba      	ldrh	r2, [r7, #12]
 800e8be:	2302      	movs	r3, #2
 800e8c0:	9301      	str	r3, [sp, #4]
 800e8c2:	897b      	ldrh	r3, [r7, #10]
 800e8c4:	9300      	str	r3, [sp, #0]
 800e8c6:	460b      	mov	r3, r1
 800e8c8:	6979      	ldr	r1, [r7, #20]
 800e8ca:	f7ff fe7d 	bl	800e5c8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e8ce:	687b      	ldr	r3, [r7, #4]
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	3718      	adds	r7, #24
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}

0800e8d8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b084      	sub	sp, #16
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
 800e8e0:	460b      	mov	r3, r1
 800e8e2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d106      	bne.n	800e8f8 <pbuf_realloc+0x20>
 800e8ea:	4b3a      	ldr	r3, [pc, #232]	; (800e9d4 <pbuf_realloc+0xfc>)
 800e8ec:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e8f0:	4939      	ldr	r1, [pc, #228]	; (800e9d8 <pbuf_realloc+0x100>)
 800e8f2:	483a      	ldr	r0, [pc, #232]	; (800e9dc <pbuf_realloc+0x104>)
 800e8f4:	f008 fca2 	bl	801723c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	891b      	ldrh	r3, [r3, #8]
 800e8fc:	887a      	ldrh	r2, [r7, #2]
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d263      	bcs.n	800e9ca <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	891a      	ldrh	r2, [r3, #8]
 800e906:	887b      	ldrh	r3, [r7, #2]
 800e908:	1ad3      	subs	r3, r2, r3
 800e90a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e90c:	887b      	ldrh	r3, [r7, #2]
 800e90e:	817b      	strh	r3, [r7, #10]
  q = p;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e914:	e018      	b.n	800e948 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	895b      	ldrh	r3, [r3, #10]
 800e91a:	897a      	ldrh	r2, [r7, #10]
 800e91c:	1ad3      	subs	r3, r2, r3
 800e91e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	891a      	ldrh	r2, [r3, #8]
 800e924:	893b      	ldrh	r3, [r7, #8]
 800e926:	1ad3      	subs	r3, r2, r3
 800e928:	b29a      	uxth	r2, r3
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d106      	bne.n	800e948 <pbuf_realloc+0x70>
 800e93a:	4b26      	ldr	r3, [pc, #152]	; (800e9d4 <pbuf_realloc+0xfc>)
 800e93c:	f240 12af 	movw	r2, #431	; 0x1af
 800e940:	4927      	ldr	r1, [pc, #156]	; (800e9e0 <pbuf_realloc+0x108>)
 800e942:	4826      	ldr	r0, [pc, #152]	; (800e9dc <pbuf_realloc+0x104>)
 800e944:	f008 fc7a 	bl	801723c <iprintf>
  while (rem_len > q->len) {
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	895b      	ldrh	r3, [r3, #10]
 800e94c:	897a      	ldrh	r2, [r7, #10]
 800e94e:	429a      	cmp	r2, r3
 800e950:	d8e1      	bhi.n	800e916 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	7b1b      	ldrb	r3, [r3, #12]
 800e956:	f003 030f 	and.w	r3, r3, #15
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d121      	bne.n	800e9a2 <pbuf_realloc+0xca>
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	895b      	ldrh	r3, [r3, #10]
 800e962:	897a      	ldrh	r2, [r7, #10]
 800e964:	429a      	cmp	r2, r3
 800e966:	d01c      	beq.n	800e9a2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	7b5b      	ldrb	r3, [r3, #13]
 800e96c:	f003 0302 	and.w	r3, r3, #2
 800e970:	2b00      	cmp	r3, #0
 800e972:	d116      	bne.n	800e9a2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	685a      	ldr	r2, [r3, #4]
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	1ad3      	subs	r3, r2, r3
 800e97c:	b29a      	uxth	r2, r3
 800e97e:	897b      	ldrh	r3, [r7, #10]
 800e980:	4413      	add	r3, r2
 800e982:	b29b      	uxth	r3, r3
 800e984:	4619      	mov	r1, r3
 800e986:	68f8      	ldr	r0, [r7, #12]
 800e988:	f7fe ff64 	bl	800d854 <mem_trim>
 800e98c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d106      	bne.n	800e9a2 <pbuf_realloc+0xca>
 800e994:	4b0f      	ldr	r3, [pc, #60]	; (800e9d4 <pbuf_realloc+0xfc>)
 800e996:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e99a:	4912      	ldr	r1, [pc, #72]	; (800e9e4 <pbuf_realloc+0x10c>)
 800e99c:	480f      	ldr	r0, [pc, #60]	; (800e9dc <pbuf_realloc+0x104>)
 800e99e:	f008 fc4d 	bl	801723c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	897a      	ldrh	r2, [r7, #10]
 800e9a6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	895a      	ldrh	r2, [r3, #10]
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d004      	beq.n	800e9c2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f000 f911 	bl	800ebe4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	601a      	str	r2, [r3, #0]
 800e9c8:	e000      	b.n	800e9cc <pbuf_realloc+0xf4>
    return;
 800e9ca:	bf00      	nop

}
 800e9cc:	3710      	adds	r7, #16
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}
 800e9d2:	bf00      	nop
 800e9d4:	08018c60 	.word	0x08018c60
 800e9d8:	08018d78 	.word	0x08018d78
 800e9dc:	08018cc0 	.word	0x08018cc0
 800e9e0:	08018d90 	.word	0x08018d90
 800e9e4:	08018da8 	.word	0x08018da8

0800e9e8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b086      	sub	sp, #24
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	60f8      	str	r0, [r7, #12]
 800e9f0:	60b9      	str	r1, [r7, #8]
 800e9f2:	4613      	mov	r3, r2
 800e9f4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d106      	bne.n	800ea0a <pbuf_add_header_impl+0x22>
 800e9fc:	4b2b      	ldr	r3, [pc, #172]	; (800eaac <pbuf_add_header_impl+0xc4>)
 800e9fe:	f240 12df 	movw	r2, #479	; 0x1df
 800ea02:	492b      	ldr	r1, [pc, #172]	; (800eab0 <pbuf_add_header_impl+0xc8>)
 800ea04:	482b      	ldr	r0, [pc, #172]	; (800eab4 <pbuf_add_header_impl+0xcc>)
 800ea06:	f008 fc19 	bl	801723c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d003      	beq.n	800ea18 <pbuf_add_header_impl+0x30>
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea16:	d301      	bcc.n	800ea1c <pbuf_add_header_impl+0x34>
    return 1;
 800ea18:	2301      	movs	r3, #1
 800ea1a:	e043      	b.n	800eaa4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d101      	bne.n	800ea26 <pbuf_add_header_impl+0x3e>
    return 0;
 800ea22:	2300      	movs	r3, #0
 800ea24:	e03e      	b.n	800eaa4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	891a      	ldrh	r2, [r3, #8]
 800ea2e:	8a7b      	ldrh	r3, [r7, #18]
 800ea30:	4413      	add	r3, r2
 800ea32:	b29b      	uxth	r3, r3
 800ea34:	8a7a      	ldrh	r2, [r7, #18]
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d901      	bls.n	800ea3e <pbuf_add_header_impl+0x56>
    return 1;
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	e032      	b.n	800eaa4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	7b1b      	ldrb	r3, [r3, #12]
 800ea42:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ea44:	8a3b      	ldrh	r3, [r7, #16]
 800ea46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d00c      	beq.n	800ea68 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	685a      	ldr	r2, [r3, #4]
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	425b      	negs	r3, r3
 800ea56:	4413      	add	r3, r2
 800ea58:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	3310      	adds	r3, #16
 800ea5e:	697a      	ldr	r2, [r7, #20]
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d20d      	bcs.n	800ea80 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ea64:	2301      	movs	r3, #1
 800ea66:	e01d      	b.n	800eaa4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ea68:	79fb      	ldrb	r3, [r7, #7]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d006      	beq.n	800ea7c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	685a      	ldr	r2, [r3, #4]
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	425b      	negs	r3, r3
 800ea76:	4413      	add	r3, r2
 800ea78:	617b      	str	r3, [r7, #20]
 800ea7a:	e001      	b.n	800ea80 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	e011      	b.n	800eaa4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	697a      	ldr	r2, [r7, #20]
 800ea84:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	895a      	ldrh	r2, [r3, #10]
 800ea8a:	8a7b      	ldrh	r3, [r7, #18]
 800ea8c:	4413      	add	r3, r2
 800ea8e:	b29a      	uxth	r2, r3
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	891a      	ldrh	r2, [r3, #8]
 800ea98:	8a7b      	ldrh	r3, [r7, #18]
 800ea9a:	4413      	add	r3, r2
 800ea9c:	b29a      	uxth	r2, r3
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	811a      	strh	r2, [r3, #8]


  return 0;
 800eaa2:	2300      	movs	r3, #0
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3718      	adds	r7, #24
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}
 800eaac:	08018c60 	.word	0x08018c60
 800eab0:	08018dc4 	.word	0x08018dc4
 800eab4:	08018cc0 	.word	0x08018cc0

0800eab8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800eac2:	2200      	movs	r2, #0
 800eac4:	6839      	ldr	r1, [r7, #0]
 800eac6:	6878      	ldr	r0, [r7, #4]
 800eac8:	f7ff ff8e 	bl	800e9e8 <pbuf_add_header_impl>
 800eacc:	4603      	mov	r3, r0
}
 800eace:	4618      	mov	r0, r3
 800ead0:	3708      	adds	r7, #8
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}
	...

0800ead8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b084      	sub	sp, #16
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
 800eae0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d106      	bne.n	800eaf6 <pbuf_remove_header+0x1e>
 800eae8:	4b20      	ldr	r3, [pc, #128]	; (800eb6c <pbuf_remove_header+0x94>)
 800eaea:	f240 224b 	movw	r2, #587	; 0x24b
 800eaee:	4920      	ldr	r1, [pc, #128]	; (800eb70 <pbuf_remove_header+0x98>)
 800eaf0:	4820      	ldr	r0, [pc, #128]	; (800eb74 <pbuf_remove_header+0x9c>)
 800eaf2:	f008 fba3 	bl	801723c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d003      	beq.n	800eb04 <pbuf_remove_header+0x2c>
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb02:	d301      	bcc.n	800eb08 <pbuf_remove_header+0x30>
    return 1;
 800eb04:	2301      	movs	r3, #1
 800eb06:	e02c      	b.n	800eb62 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d101      	bne.n	800eb12 <pbuf_remove_header+0x3a>
    return 0;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	e027      	b.n	800eb62 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	895b      	ldrh	r3, [r3, #10]
 800eb1a:	89fa      	ldrh	r2, [r7, #14]
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	d908      	bls.n	800eb32 <pbuf_remove_header+0x5a>
 800eb20:	4b12      	ldr	r3, [pc, #72]	; (800eb6c <pbuf_remove_header+0x94>)
 800eb22:	f240 2255 	movw	r2, #597	; 0x255
 800eb26:	4914      	ldr	r1, [pc, #80]	; (800eb78 <pbuf_remove_header+0xa0>)
 800eb28:	4812      	ldr	r0, [pc, #72]	; (800eb74 <pbuf_remove_header+0x9c>)
 800eb2a:	f008 fb87 	bl	801723c <iprintf>
 800eb2e:	2301      	movs	r3, #1
 800eb30:	e017      	b.n	800eb62 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	685b      	ldr	r3, [r3, #4]
 800eb36:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	685a      	ldr	r2, [r3, #4]
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	441a      	add	r2, r3
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	895a      	ldrh	r2, [r3, #10]
 800eb48:	89fb      	ldrh	r3, [r7, #14]
 800eb4a:	1ad3      	subs	r3, r2, r3
 800eb4c:	b29a      	uxth	r2, r3
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	891a      	ldrh	r2, [r3, #8]
 800eb56:	89fb      	ldrh	r3, [r7, #14]
 800eb58:	1ad3      	subs	r3, r2, r3
 800eb5a:	b29a      	uxth	r2, r3
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800eb60:	2300      	movs	r3, #0
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	3710      	adds	r7, #16
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}
 800eb6a:	bf00      	nop
 800eb6c:	08018c60 	.word	0x08018c60
 800eb70:	08018dc4 	.word	0x08018dc4
 800eb74:	08018cc0 	.word	0x08018cc0
 800eb78:	08018dd0 	.word	0x08018dd0

0800eb7c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b082      	sub	sp, #8
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	460b      	mov	r3, r1
 800eb86:	807b      	strh	r3, [r7, #2]
 800eb88:	4613      	mov	r3, r2
 800eb8a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800eb8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	da08      	bge.n	800eba6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800eb94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800eb98:	425b      	negs	r3, r3
 800eb9a:	4619      	mov	r1, r3
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f7ff ff9b 	bl	800ead8 <pbuf_remove_header>
 800eba2:	4603      	mov	r3, r0
 800eba4:	e007      	b.n	800ebb6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800eba6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ebaa:	787a      	ldrb	r2, [r7, #1]
 800ebac:	4619      	mov	r1, r3
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	f7ff ff1a 	bl	800e9e8 <pbuf_add_header_impl>
 800ebb4:	4603      	mov	r3, r0
  }
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	3708      	adds	r7, #8
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}

0800ebbe <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ebbe:	b580      	push	{r7, lr}
 800ebc0:	b082      	sub	sp, #8
 800ebc2:	af00      	add	r7, sp, #0
 800ebc4:	6078      	str	r0, [r7, #4]
 800ebc6:	460b      	mov	r3, r1
 800ebc8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ebca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ebce:	2201      	movs	r2, #1
 800ebd0:	4619      	mov	r1, r3
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f7ff ffd2 	bl	800eb7c <pbuf_header_impl>
 800ebd8:	4603      	mov	r3, r0
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3708      	adds	r7, #8
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}
	...

0800ebe4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b088      	sub	sp, #32
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d10b      	bne.n	800ec0a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d106      	bne.n	800ec06 <pbuf_free+0x22>
 800ebf8:	4b3b      	ldr	r3, [pc, #236]	; (800ece8 <pbuf_free+0x104>)
 800ebfa:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ebfe:	493b      	ldr	r1, [pc, #236]	; (800ecec <pbuf_free+0x108>)
 800ec00:	483b      	ldr	r0, [pc, #236]	; (800ecf0 <pbuf_free+0x10c>)
 800ec02:	f008 fb1b 	bl	801723c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ec06:	2300      	movs	r3, #0
 800ec08:	e069      	b.n	800ecde <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ec0e:	e062      	b.n	800ecd6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ec10:	f008 faac 	bl	801716c <sys_arch_protect>
 800ec14:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	7b9b      	ldrb	r3, [r3, #14]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d106      	bne.n	800ec2c <pbuf_free+0x48>
 800ec1e:	4b32      	ldr	r3, [pc, #200]	; (800ece8 <pbuf_free+0x104>)
 800ec20:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ec24:	4933      	ldr	r1, [pc, #204]	; (800ecf4 <pbuf_free+0x110>)
 800ec26:	4832      	ldr	r0, [pc, #200]	; (800ecf0 <pbuf_free+0x10c>)
 800ec28:	f008 fb08 	bl	801723c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	7b9b      	ldrb	r3, [r3, #14]
 800ec30:	3b01      	subs	r3, #1
 800ec32:	b2da      	uxtb	r2, r3
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	739a      	strb	r2, [r3, #14]
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	7b9b      	ldrb	r3, [r3, #14]
 800ec3c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800ec3e:	69b8      	ldr	r0, [r7, #24]
 800ec40:	f008 faa2 	bl	8017188 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ec44:	7dfb      	ldrb	r3, [r7, #23]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d143      	bne.n	800ecd2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	7b1b      	ldrb	r3, [r3, #12]
 800ec54:	f003 030f 	and.w	r3, r3, #15
 800ec58:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	7b5b      	ldrb	r3, [r3, #13]
 800ec5e:	f003 0302 	and.w	r3, r3, #2
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d011      	beq.n	800ec8a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	691b      	ldr	r3, [r3, #16]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d106      	bne.n	800ec80 <pbuf_free+0x9c>
 800ec72:	4b1d      	ldr	r3, [pc, #116]	; (800ece8 <pbuf_free+0x104>)
 800ec74:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ec78:	491f      	ldr	r1, [pc, #124]	; (800ecf8 <pbuf_free+0x114>)
 800ec7a:	481d      	ldr	r0, [pc, #116]	; (800ecf0 <pbuf_free+0x10c>)
 800ec7c:	f008 fade 	bl	801723c <iprintf>
        pc->custom_free_function(p);
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	691b      	ldr	r3, [r3, #16]
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	4798      	blx	r3
 800ec88:	e01d      	b.n	800ecc6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ec8a:	7bfb      	ldrb	r3, [r7, #15]
 800ec8c:	2b02      	cmp	r3, #2
 800ec8e:	d104      	bne.n	800ec9a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ec90:	6879      	ldr	r1, [r7, #4]
 800ec92:	200c      	movs	r0, #12
 800ec94:	f7ff f902 	bl	800de9c <memp_free>
 800ec98:	e015      	b.n	800ecc6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ec9a:	7bfb      	ldrb	r3, [r7, #15]
 800ec9c:	2b01      	cmp	r3, #1
 800ec9e:	d104      	bne.n	800ecaa <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800eca0:	6879      	ldr	r1, [r7, #4]
 800eca2:	200b      	movs	r0, #11
 800eca4:	f7ff f8fa 	bl	800de9c <memp_free>
 800eca8:	e00d      	b.n	800ecc6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ecaa:	7bfb      	ldrb	r3, [r7, #15]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d103      	bne.n	800ecb8 <pbuf_free+0xd4>
          mem_free(p);
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f7fe fd3f 	bl	800d734 <mem_free>
 800ecb6:	e006      	b.n	800ecc6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ecb8:	4b0b      	ldr	r3, [pc, #44]	; (800ece8 <pbuf_free+0x104>)
 800ecba:	f240 320f 	movw	r2, #783	; 0x30f
 800ecbe:	490f      	ldr	r1, [pc, #60]	; (800ecfc <pbuf_free+0x118>)
 800ecc0:	480b      	ldr	r0, [pc, #44]	; (800ecf0 <pbuf_free+0x10c>)
 800ecc2:	f008 fabb 	bl	801723c <iprintf>
        }
      }
      count++;
 800ecc6:	7ffb      	ldrb	r3, [r7, #31]
 800ecc8:	3301      	adds	r3, #1
 800ecca:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	607b      	str	r3, [r7, #4]
 800ecd0:	e001      	b.n	800ecd6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d199      	bne.n	800ec10 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ecdc:	7ffb      	ldrb	r3, [r7, #31]
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3720      	adds	r7, #32
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
 800ece6:	bf00      	nop
 800ece8:	08018c60 	.word	0x08018c60
 800ecec:	08018dc4 	.word	0x08018dc4
 800ecf0:	08018cc0 	.word	0x08018cc0
 800ecf4:	08018df0 	.word	0x08018df0
 800ecf8:	08018e08 	.word	0x08018e08
 800ecfc:	08018e2c 	.word	0x08018e2c

0800ed00 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ed00:	b480      	push	{r7}
 800ed02:	b085      	sub	sp, #20
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ed0c:	e005      	b.n	800ed1a <pbuf_clen+0x1a>
    ++len;
 800ed0e:	89fb      	ldrh	r3, [r7, #14]
 800ed10:	3301      	adds	r3, #1
 800ed12:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d1f6      	bne.n	800ed0e <pbuf_clen+0xe>
  }
  return len;
 800ed20:	89fb      	ldrh	r3, [r7, #14]
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	3714      	adds	r7, #20
 800ed26:	46bd      	mov	sp, r7
 800ed28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2c:	4770      	bx	lr
	...

0800ed30 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b084      	sub	sp, #16
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d016      	beq.n	800ed6c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800ed3e:	f008 fa15 	bl	801716c <sys_arch_protect>
 800ed42:	60f8      	str	r0, [r7, #12]
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	7b9b      	ldrb	r3, [r3, #14]
 800ed48:	3301      	adds	r3, #1
 800ed4a:	b2da      	uxtb	r2, r3
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	739a      	strb	r2, [r3, #14]
 800ed50:	68f8      	ldr	r0, [r7, #12]
 800ed52:	f008 fa19 	bl	8017188 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	7b9b      	ldrb	r3, [r3, #14]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d106      	bne.n	800ed6c <pbuf_ref+0x3c>
 800ed5e:	4b05      	ldr	r3, [pc, #20]	; (800ed74 <pbuf_ref+0x44>)
 800ed60:	f240 3242 	movw	r2, #834	; 0x342
 800ed64:	4904      	ldr	r1, [pc, #16]	; (800ed78 <pbuf_ref+0x48>)
 800ed66:	4805      	ldr	r0, [pc, #20]	; (800ed7c <pbuf_ref+0x4c>)
 800ed68:	f008 fa68 	bl	801723c <iprintf>
  }
}
 800ed6c:	bf00      	nop
 800ed6e:	3710      	adds	r7, #16
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}
 800ed74:	08018c60 	.word	0x08018c60
 800ed78:	08018e40 	.word	0x08018e40
 800ed7c:	08018cc0 	.word	0x08018cc0

0800ed80 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b084      	sub	sp, #16
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
 800ed88:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d002      	beq.n	800ed96 <pbuf_cat+0x16>
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d107      	bne.n	800eda6 <pbuf_cat+0x26>
 800ed96:	4b20      	ldr	r3, [pc, #128]	; (800ee18 <pbuf_cat+0x98>)
 800ed98:	f240 3259 	movw	r2, #857	; 0x359
 800ed9c:	491f      	ldr	r1, [pc, #124]	; (800ee1c <pbuf_cat+0x9c>)
 800ed9e:	4820      	ldr	r0, [pc, #128]	; (800ee20 <pbuf_cat+0xa0>)
 800eda0:	f008 fa4c 	bl	801723c <iprintf>
 800eda4:	e034      	b.n	800ee10 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	60fb      	str	r3, [r7, #12]
 800edaa:	e00a      	b.n	800edc2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	891a      	ldrh	r2, [r3, #8]
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	891b      	ldrh	r3, [r3, #8]
 800edb4:	4413      	add	r3, r2
 800edb6:	b29a      	uxth	r2, r3
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	60fb      	str	r3, [r7, #12]
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d1f0      	bne.n	800edac <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	891a      	ldrh	r2, [r3, #8]
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	895b      	ldrh	r3, [r3, #10]
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d006      	beq.n	800ede4 <pbuf_cat+0x64>
 800edd6:	4b10      	ldr	r3, [pc, #64]	; (800ee18 <pbuf_cat+0x98>)
 800edd8:	f240 3262 	movw	r2, #866	; 0x362
 800eddc:	4911      	ldr	r1, [pc, #68]	; (800ee24 <pbuf_cat+0xa4>)
 800edde:	4810      	ldr	r0, [pc, #64]	; (800ee20 <pbuf_cat+0xa0>)
 800ede0:	f008 fa2c 	bl	801723c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d006      	beq.n	800edfa <pbuf_cat+0x7a>
 800edec:	4b0a      	ldr	r3, [pc, #40]	; (800ee18 <pbuf_cat+0x98>)
 800edee:	f240 3263 	movw	r2, #867	; 0x363
 800edf2:	490d      	ldr	r1, [pc, #52]	; (800ee28 <pbuf_cat+0xa8>)
 800edf4:	480a      	ldr	r0, [pc, #40]	; (800ee20 <pbuf_cat+0xa0>)
 800edf6:	f008 fa21 	bl	801723c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	891a      	ldrh	r2, [r3, #8]
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	891b      	ldrh	r3, [r3, #8]
 800ee02:	4413      	add	r3, r2
 800ee04:	b29a      	uxth	r2, r3
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	683a      	ldr	r2, [r7, #0]
 800ee0e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ee10:	3710      	adds	r7, #16
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}
 800ee16:	bf00      	nop
 800ee18:	08018c60 	.word	0x08018c60
 800ee1c:	08018e54 	.word	0x08018e54
 800ee20:	08018cc0 	.word	0x08018cc0
 800ee24:	08018e8c 	.word	0x08018e8c
 800ee28:	08018ebc 	.word	0x08018ebc

0800ee2c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b086      	sub	sp, #24
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
 800ee34:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ee36:	2300      	movs	r3, #0
 800ee38:	617b      	str	r3, [r7, #20]
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d008      	beq.n	800ee56 <pbuf_copy+0x2a>
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d005      	beq.n	800ee56 <pbuf_copy+0x2a>
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	891a      	ldrh	r2, [r3, #8]
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	891b      	ldrh	r3, [r3, #8]
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d209      	bcs.n	800ee6a <pbuf_copy+0x3e>
 800ee56:	4b57      	ldr	r3, [pc, #348]	; (800efb4 <pbuf_copy+0x188>)
 800ee58:	f240 32c9 	movw	r2, #969	; 0x3c9
 800ee5c:	4956      	ldr	r1, [pc, #344]	; (800efb8 <pbuf_copy+0x18c>)
 800ee5e:	4857      	ldr	r0, [pc, #348]	; (800efbc <pbuf_copy+0x190>)
 800ee60:	f008 f9ec 	bl	801723c <iprintf>
 800ee64:	f06f 030f 	mvn.w	r3, #15
 800ee68:	e09f      	b.n	800efaa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	895b      	ldrh	r3, [r3, #10]
 800ee6e:	461a      	mov	r2, r3
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	1ad2      	subs	r2, r2, r3
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	895b      	ldrh	r3, [r3, #10]
 800ee78:	4619      	mov	r1, r3
 800ee7a:	693b      	ldr	r3, [r7, #16]
 800ee7c:	1acb      	subs	r3, r1, r3
 800ee7e:	429a      	cmp	r2, r3
 800ee80:	d306      	bcc.n	800ee90 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	895b      	ldrh	r3, [r3, #10]
 800ee86:	461a      	mov	r2, r3
 800ee88:	693b      	ldr	r3, [r7, #16]
 800ee8a:	1ad3      	subs	r3, r2, r3
 800ee8c:	60fb      	str	r3, [r7, #12]
 800ee8e:	e005      	b.n	800ee9c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	895b      	ldrh	r3, [r3, #10]
 800ee94:	461a      	mov	r2, r3
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	1ad3      	subs	r3, r2, r3
 800ee9a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	685a      	ldr	r2, [r3, #4]
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	18d0      	adds	r0, r2, r3
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	685a      	ldr	r2, [r3, #4]
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	4413      	add	r3, r2
 800eeac:	68fa      	ldr	r2, [r7, #12]
 800eeae:	4619      	mov	r1, r3
 800eeb0:	f008 f9ae 	bl	8017210 <memcpy>
    offset_to += len;
 800eeb4:	697a      	ldr	r2, [r7, #20]
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	4413      	add	r3, r2
 800eeba:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800eebc:	693a      	ldr	r2, [r7, #16]
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	4413      	add	r3, r2
 800eec2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	895b      	ldrh	r3, [r3, #10]
 800eec8:	461a      	mov	r2, r3
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	4293      	cmp	r3, r2
 800eece:	d906      	bls.n	800eede <pbuf_copy+0xb2>
 800eed0:	4b38      	ldr	r3, [pc, #224]	; (800efb4 <pbuf_copy+0x188>)
 800eed2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800eed6:	493a      	ldr	r1, [pc, #232]	; (800efc0 <pbuf_copy+0x194>)
 800eed8:	4838      	ldr	r0, [pc, #224]	; (800efbc <pbuf_copy+0x190>)
 800eeda:	f008 f9af 	bl	801723c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	895b      	ldrh	r3, [r3, #10]
 800eee2:	461a      	mov	r2, r3
 800eee4:	693b      	ldr	r3, [r7, #16]
 800eee6:	4293      	cmp	r3, r2
 800eee8:	d906      	bls.n	800eef8 <pbuf_copy+0xcc>
 800eeea:	4b32      	ldr	r3, [pc, #200]	; (800efb4 <pbuf_copy+0x188>)
 800eeec:	f240 32da 	movw	r2, #986	; 0x3da
 800eef0:	4934      	ldr	r1, [pc, #208]	; (800efc4 <pbuf_copy+0x198>)
 800eef2:	4832      	ldr	r0, [pc, #200]	; (800efbc <pbuf_copy+0x190>)
 800eef4:	f008 f9a2 	bl	801723c <iprintf>
    if (offset_from >= p_from->len) {
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	895b      	ldrh	r3, [r3, #10]
 800eefc:	461a      	mov	r2, r3
 800eefe:	693b      	ldr	r3, [r7, #16]
 800ef00:	4293      	cmp	r3, r2
 800ef02:	d304      	bcc.n	800ef0e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ef04:	2300      	movs	r3, #0
 800ef06:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	895b      	ldrh	r3, [r3, #10]
 800ef12:	461a      	mov	r2, r3
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	4293      	cmp	r3, r2
 800ef18:	d114      	bne.n	800ef44 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d10c      	bne.n	800ef44 <pbuf_copy+0x118>
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d009      	beq.n	800ef44 <pbuf_copy+0x118>
 800ef30:	4b20      	ldr	r3, [pc, #128]	; (800efb4 <pbuf_copy+0x188>)
 800ef32:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800ef36:	4924      	ldr	r1, [pc, #144]	; (800efc8 <pbuf_copy+0x19c>)
 800ef38:	4820      	ldr	r0, [pc, #128]	; (800efbc <pbuf_copy+0x190>)
 800ef3a:	f008 f97f 	bl	801723c <iprintf>
 800ef3e:	f06f 030f 	mvn.w	r3, #15
 800ef42:	e032      	b.n	800efaa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d013      	beq.n	800ef72 <pbuf_copy+0x146>
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	895a      	ldrh	r2, [r3, #10]
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	891b      	ldrh	r3, [r3, #8]
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d10d      	bne.n	800ef72 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ef56:	683b      	ldr	r3, [r7, #0]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d009      	beq.n	800ef72 <pbuf_copy+0x146>
 800ef5e:	4b15      	ldr	r3, [pc, #84]	; (800efb4 <pbuf_copy+0x188>)
 800ef60:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ef64:	4919      	ldr	r1, [pc, #100]	; (800efcc <pbuf_copy+0x1a0>)
 800ef66:	4815      	ldr	r0, [pc, #84]	; (800efbc <pbuf_copy+0x190>)
 800ef68:	f008 f968 	bl	801723c <iprintf>
 800ef6c:	f06f 0305 	mvn.w	r3, #5
 800ef70:	e01b      	b.n	800efaa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d013      	beq.n	800efa0 <pbuf_copy+0x174>
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	895a      	ldrh	r2, [r3, #10]
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	891b      	ldrh	r3, [r3, #8]
 800ef80:	429a      	cmp	r2, r3
 800ef82:	d10d      	bne.n	800efa0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d009      	beq.n	800efa0 <pbuf_copy+0x174>
 800ef8c:	4b09      	ldr	r3, [pc, #36]	; (800efb4 <pbuf_copy+0x188>)
 800ef8e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ef92:	490e      	ldr	r1, [pc, #56]	; (800efcc <pbuf_copy+0x1a0>)
 800ef94:	4809      	ldr	r0, [pc, #36]	; (800efbc <pbuf_copy+0x190>)
 800ef96:	f008 f951 	bl	801723c <iprintf>
 800ef9a:	f06f 0305 	mvn.w	r3, #5
 800ef9e:	e004      	b.n	800efaa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	f47f af61 	bne.w	800ee6a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800efa8:	2300      	movs	r3, #0
}
 800efaa:	4618      	mov	r0, r3
 800efac:	3718      	adds	r7, #24
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}
 800efb2:	bf00      	nop
 800efb4:	08018c60 	.word	0x08018c60
 800efb8:	08018f08 	.word	0x08018f08
 800efbc:	08018cc0 	.word	0x08018cc0
 800efc0:	08018f38 	.word	0x08018f38
 800efc4:	08018f50 	.word	0x08018f50
 800efc8:	08018f6c 	.word	0x08018f6c
 800efcc:	08018f7c 	.word	0x08018f7c

0800efd0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b088      	sub	sp, #32
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	60f8      	str	r0, [r7, #12]
 800efd8:	60b9      	str	r1, [r7, #8]
 800efda:	4611      	mov	r1, r2
 800efdc:	461a      	mov	r2, r3
 800efde:	460b      	mov	r3, r1
 800efe0:	80fb      	strh	r3, [r7, #6]
 800efe2:	4613      	mov	r3, r2
 800efe4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800efe6:	2300      	movs	r3, #0
 800efe8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800efea:	2300      	movs	r3, #0
 800efec:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d108      	bne.n	800f006 <pbuf_copy_partial+0x36>
 800eff4:	4b2b      	ldr	r3, [pc, #172]	; (800f0a4 <pbuf_copy_partial+0xd4>)
 800eff6:	f240 420a 	movw	r2, #1034	; 0x40a
 800effa:	492b      	ldr	r1, [pc, #172]	; (800f0a8 <pbuf_copy_partial+0xd8>)
 800effc:	482b      	ldr	r0, [pc, #172]	; (800f0ac <pbuf_copy_partial+0xdc>)
 800effe:	f008 f91d 	bl	801723c <iprintf>
 800f002:	2300      	movs	r3, #0
 800f004:	e04a      	b.n	800f09c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d108      	bne.n	800f01e <pbuf_copy_partial+0x4e>
 800f00c:	4b25      	ldr	r3, [pc, #148]	; (800f0a4 <pbuf_copy_partial+0xd4>)
 800f00e:	f240 420b 	movw	r2, #1035	; 0x40b
 800f012:	4927      	ldr	r1, [pc, #156]	; (800f0b0 <pbuf_copy_partial+0xe0>)
 800f014:	4825      	ldr	r0, [pc, #148]	; (800f0ac <pbuf_copy_partial+0xdc>)
 800f016:	f008 f911 	bl	801723c <iprintf>
 800f01a:	2300      	movs	r3, #0
 800f01c:	e03e      	b.n	800f09c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	61fb      	str	r3, [r7, #28]
 800f022:	e034      	b.n	800f08e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f024:	88bb      	ldrh	r3, [r7, #4]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d00a      	beq.n	800f040 <pbuf_copy_partial+0x70>
 800f02a:	69fb      	ldr	r3, [r7, #28]
 800f02c:	895b      	ldrh	r3, [r3, #10]
 800f02e:	88ba      	ldrh	r2, [r7, #4]
 800f030:	429a      	cmp	r2, r3
 800f032:	d305      	bcc.n	800f040 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f034:	69fb      	ldr	r3, [r7, #28]
 800f036:	895b      	ldrh	r3, [r3, #10]
 800f038:	88ba      	ldrh	r2, [r7, #4]
 800f03a:	1ad3      	subs	r3, r2, r3
 800f03c:	80bb      	strh	r3, [r7, #4]
 800f03e:	e023      	b.n	800f088 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f040:	69fb      	ldr	r3, [r7, #28]
 800f042:	895a      	ldrh	r2, [r3, #10]
 800f044:	88bb      	ldrh	r3, [r7, #4]
 800f046:	1ad3      	subs	r3, r2, r3
 800f048:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f04a:	8b3a      	ldrh	r2, [r7, #24]
 800f04c:	88fb      	ldrh	r3, [r7, #6]
 800f04e:	429a      	cmp	r2, r3
 800f050:	d901      	bls.n	800f056 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f052:	88fb      	ldrh	r3, [r7, #6]
 800f054:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f056:	8b7b      	ldrh	r3, [r7, #26]
 800f058:	68ba      	ldr	r2, [r7, #8]
 800f05a:	18d0      	adds	r0, r2, r3
 800f05c:	69fb      	ldr	r3, [r7, #28]
 800f05e:	685a      	ldr	r2, [r3, #4]
 800f060:	88bb      	ldrh	r3, [r7, #4]
 800f062:	4413      	add	r3, r2
 800f064:	8b3a      	ldrh	r2, [r7, #24]
 800f066:	4619      	mov	r1, r3
 800f068:	f008 f8d2 	bl	8017210 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f06c:	8afa      	ldrh	r2, [r7, #22]
 800f06e:	8b3b      	ldrh	r3, [r7, #24]
 800f070:	4413      	add	r3, r2
 800f072:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f074:	8b7a      	ldrh	r2, [r7, #26]
 800f076:	8b3b      	ldrh	r3, [r7, #24]
 800f078:	4413      	add	r3, r2
 800f07a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f07c:	88fa      	ldrh	r2, [r7, #6]
 800f07e:	8b3b      	ldrh	r3, [r7, #24]
 800f080:	1ad3      	subs	r3, r2, r3
 800f082:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f084:	2300      	movs	r3, #0
 800f086:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f088:	69fb      	ldr	r3, [r7, #28]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	61fb      	str	r3, [r7, #28]
 800f08e:	88fb      	ldrh	r3, [r7, #6]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d002      	beq.n	800f09a <pbuf_copy_partial+0xca>
 800f094:	69fb      	ldr	r3, [r7, #28]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d1c4      	bne.n	800f024 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f09a:	8afb      	ldrh	r3, [r7, #22]
}
 800f09c:	4618      	mov	r0, r3
 800f09e:	3720      	adds	r7, #32
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}
 800f0a4:	08018c60 	.word	0x08018c60
 800f0a8:	08018fa8 	.word	0x08018fa8
 800f0ac:	08018cc0 	.word	0x08018cc0
 800f0b0:	08018fc8 	.word	0x08018fc8

0800f0b4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b084      	sub	sp, #16
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	603a      	str	r2, [r7, #0]
 800f0be:	71fb      	strb	r3, [r7, #7]
 800f0c0:	460b      	mov	r3, r1
 800f0c2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	8919      	ldrh	r1, [r3, #8]
 800f0c8:	88ba      	ldrh	r2, [r7, #4]
 800f0ca:	79fb      	ldrb	r3, [r7, #7]
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f7ff faa5 	bl	800e61c <pbuf_alloc>
 800f0d2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d101      	bne.n	800f0de <pbuf_clone+0x2a>
    return NULL;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	e011      	b.n	800f102 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800f0de:	6839      	ldr	r1, [r7, #0]
 800f0e0:	68f8      	ldr	r0, [r7, #12]
 800f0e2:	f7ff fea3 	bl	800ee2c <pbuf_copy>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800f0ea:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d006      	beq.n	800f100 <pbuf_clone+0x4c>
 800f0f2:	4b06      	ldr	r3, [pc, #24]	; (800f10c <pbuf_clone+0x58>)
 800f0f4:	f240 5224 	movw	r2, #1316	; 0x524
 800f0f8:	4905      	ldr	r1, [pc, #20]	; (800f110 <pbuf_clone+0x5c>)
 800f0fa:	4806      	ldr	r0, [pc, #24]	; (800f114 <pbuf_clone+0x60>)
 800f0fc:	f008 f89e 	bl	801723c <iprintf>
  return q;
 800f100:	68fb      	ldr	r3, [r7, #12]
}
 800f102:	4618      	mov	r0, r3
 800f104:	3710      	adds	r7, #16
 800f106:	46bd      	mov	sp, r7
 800f108:	bd80      	pop	{r7, pc}
 800f10a:	bf00      	nop
 800f10c:	08018c60 	.word	0x08018c60
 800f110:	080190d4 	.word	0x080190d4
 800f114:	08018cc0 	.word	0x08018cc0

0800f118 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f11c:	f008 f91c 	bl	8017358 <rand>
 800f120:	4603      	mov	r3, r0
 800f122:	b29b      	uxth	r3, r3
 800f124:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f128:	b29b      	uxth	r3, r3
 800f12a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f12e:	b29a      	uxth	r2, r3
 800f130:	4b01      	ldr	r3, [pc, #4]	; (800f138 <tcp_init+0x20>)
 800f132:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f134:	bf00      	nop
 800f136:	bd80      	pop	{r7, pc}
 800f138:	20000024 	.word	0x20000024

0800f13c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b082      	sub	sp, #8
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	7d1b      	ldrb	r3, [r3, #20]
 800f148:	2b01      	cmp	r3, #1
 800f14a:	d105      	bne.n	800f158 <tcp_free+0x1c>
 800f14c:	4b06      	ldr	r3, [pc, #24]	; (800f168 <tcp_free+0x2c>)
 800f14e:	22d4      	movs	r2, #212	; 0xd4
 800f150:	4906      	ldr	r1, [pc, #24]	; (800f16c <tcp_free+0x30>)
 800f152:	4807      	ldr	r0, [pc, #28]	; (800f170 <tcp_free+0x34>)
 800f154:	f008 f872 	bl	801723c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800f158:	6879      	ldr	r1, [r7, #4]
 800f15a:	2001      	movs	r0, #1
 800f15c:	f7fe fe9e 	bl	800de9c <memp_free>
}
 800f160:	bf00      	nop
 800f162:	3708      	adds	r7, #8
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}
 800f168:	08019160 	.word	0x08019160
 800f16c:	08019190 	.word	0x08019190
 800f170:	080191a4 	.word	0x080191a4

0800f174 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b082      	sub	sp, #8
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	7d1b      	ldrb	r3, [r3, #20]
 800f180:	2b01      	cmp	r3, #1
 800f182:	d105      	bne.n	800f190 <tcp_free_listen+0x1c>
 800f184:	4b06      	ldr	r3, [pc, #24]	; (800f1a0 <tcp_free_listen+0x2c>)
 800f186:	22df      	movs	r2, #223	; 0xdf
 800f188:	4906      	ldr	r1, [pc, #24]	; (800f1a4 <tcp_free_listen+0x30>)
 800f18a:	4807      	ldr	r0, [pc, #28]	; (800f1a8 <tcp_free_listen+0x34>)
 800f18c:	f008 f856 	bl	801723c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800f190:	6879      	ldr	r1, [r7, #4]
 800f192:	2002      	movs	r0, #2
 800f194:	f7fe fe82 	bl	800de9c <memp_free>
}
 800f198:	bf00      	nop
 800f19a:	3708      	adds	r7, #8
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}
 800f1a0:	08019160 	.word	0x08019160
 800f1a4:	080191cc 	.word	0x080191cc
 800f1a8:	080191a4 	.word	0x080191a4

0800f1ac <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f1b0:	f000 fea2 	bl	800fef8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f1b4:	4b07      	ldr	r3, [pc, #28]	; (800f1d4 <tcp_tmr+0x28>)
 800f1b6:	781b      	ldrb	r3, [r3, #0]
 800f1b8:	3301      	adds	r3, #1
 800f1ba:	b2da      	uxtb	r2, r3
 800f1bc:	4b05      	ldr	r3, [pc, #20]	; (800f1d4 <tcp_tmr+0x28>)
 800f1be:	701a      	strb	r2, [r3, #0]
 800f1c0:	4b04      	ldr	r3, [pc, #16]	; (800f1d4 <tcp_tmr+0x28>)
 800f1c2:	781b      	ldrb	r3, [r3, #0]
 800f1c4:	f003 0301 	and.w	r3, r3, #1
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d001      	beq.n	800f1d0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f1cc:	f000 fb54 	bl	800f878 <tcp_slowtmr>
  }
}
 800f1d0:	bf00      	nop
 800f1d2:	bd80      	pop	{r7, pc}
 800f1d4:	20011079 	.word	0x20011079

0800f1d8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b084      	sub	sp, #16
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
 800f1e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d105      	bne.n	800f1f4 <tcp_remove_listener+0x1c>
 800f1e8:	4b0d      	ldr	r3, [pc, #52]	; (800f220 <tcp_remove_listener+0x48>)
 800f1ea:	22ff      	movs	r2, #255	; 0xff
 800f1ec:	490d      	ldr	r1, [pc, #52]	; (800f224 <tcp_remove_listener+0x4c>)
 800f1ee:	480e      	ldr	r0, [pc, #56]	; (800f228 <tcp_remove_listener+0x50>)
 800f1f0:	f008 f824 	bl	801723c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	60fb      	str	r3, [r7, #12]
 800f1f8:	e00a      	b.n	800f210 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1fe:	683a      	ldr	r2, [r7, #0]
 800f200:	429a      	cmp	r2, r3
 800f202:	d102      	bne.n	800f20a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	2200      	movs	r2, #0
 800f208:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	68db      	ldr	r3, [r3, #12]
 800f20e:	60fb      	str	r3, [r7, #12]
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d1f1      	bne.n	800f1fa <tcp_remove_listener+0x22>
    }
  }
}
 800f216:	bf00      	nop
 800f218:	bf00      	nop
 800f21a:	3710      	adds	r7, #16
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bd80      	pop	{r7, pc}
 800f220:	08019160 	.word	0x08019160
 800f224:	080191e8 	.word	0x080191e8
 800f228:	080191a4 	.word	0x080191a4

0800f22c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b084      	sub	sp, #16
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d106      	bne.n	800f248 <tcp_listen_closed+0x1c>
 800f23a:	4b14      	ldr	r3, [pc, #80]	; (800f28c <tcp_listen_closed+0x60>)
 800f23c:	f240 1211 	movw	r2, #273	; 0x111
 800f240:	4913      	ldr	r1, [pc, #76]	; (800f290 <tcp_listen_closed+0x64>)
 800f242:	4814      	ldr	r0, [pc, #80]	; (800f294 <tcp_listen_closed+0x68>)
 800f244:	f007 fffa 	bl	801723c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	7d1b      	ldrb	r3, [r3, #20]
 800f24c:	2b01      	cmp	r3, #1
 800f24e:	d006      	beq.n	800f25e <tcp_listen_closed+0x32>
 800f250:	4b0e      	ldr	r3, [pc, #56]	; (800f28c <tcp_listen_closed+0x60>)
 800f252:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f256:	4910      	ldr	r1, [pc, #64]	; (800f298 <tcp_listen_closed+0x6c>)
 800f258:	480e      	ldr	r0, [pc, #56]	; (800f294 <tcp_listen_closed+0x68>)
 800f25a:	f007 ffef 	bl	801723c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f25e:	2301      	movs	r3, #1
 800f260:	60fb      	str	r3, [r7, #12]
 800f262:	e00b      	b.n	800f27c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f264:	4a0d      	ldr	r2, [pc, #52]	; (800f29c <tcp_listen_closed+0x70>)
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	6879      	ldr	r1, [r7, #4]
 800f270:	4618      	mov	r0, r3
 800f272:	f7ff ffb1 	bl	800f1d8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	3301      	adds	r3, #1
 800f27a:	60fb      	str	r3, [r7, #12]
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	2b03      	cmp	r3, #3
 800f280:	d9f0      	bls.n	800f264 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f282:	bf00      	nop
 800f284:	bf00      	nop
 800f286:	3710      	adds	r7, #16
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}
 800f28c:	08019160 	.word	0x08019160
 800f290:	08019210 	.word	0x08019210
 800f294:	080191a4 	.word	0x080191a4
 800f298:	0801921c 	.word	0x0801921c
 800f29c:	0801b1f4 	.word	0x0801b1f4

0800f2a0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f2a0:	b5b0      	push	{r4, r5, r7, lr}
 800f2a2:	b088      	sub	sp, #32
 800f2a4:	af04      	add	r7, sp, #16
 800f2a6:	6078      	str	r0, [r7, #4]
 800f2a8:	460b      	mov	r3, r1
 800f2aa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d106      	bne.n	800f2c0 <tcp_close_shutdown+0x20>
 800f2b2:	4b63      	ldr	r3, [pc, #396]	; (800f440 <tcp_close_shutdown+0x1a0>)
 800f2b4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f2b8:	4962      	ldr	r1, [pc, #392]	; (800f444 <tcp_close_shutdown+0x1a4>)
 800f2ba:	4863      	ldr	r0, [pc, #396]	; (800f448 <tcp_close_shutdown+0x1a8>)
 800f2bc:	f007 ffbe 	bl	801723c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f2c0:	78fb      	ldrb	r3, [r7, #3]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d066      	beq.n	800f394 <tcp_close_shutdown+0xf4>
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	7d1b      	ldrb	r3, [r3, #20]
 800f2ca:	2b04      	cmp	r3, #4
 800f2cc:	d003      	beq.n	800f2d6 <tcp_close_shutdown+0x36>
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	7d1b      	ldrb	r3, [r3, #20]
 800f2d2:	2b07      	cmp	r3, #7
 800f2d4:	d15e      	bne.n	800f394 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d104      	bne.n	800f2e8 <tcp_close_shutdown+0x48>
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f2e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f2e6:	d055      	beq.n	800f394 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	8b5b      	ldrh	r3, [r3, #26]
 800f2ec:	f003 0310 	and.w	r3, r3, #16
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d106      	bne.n	800f302 <tcp_close_shutdown+0x62>
 800f2f4:	4b52      	ldr	r3, [pc, #328]	; (800f440 <tcp_close_shutdown+0x1a0>)
 800f2f6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800f2fa:	4954      	ldr	r1, [pc, #336]	; (800f44c <tcp_close_shutdown+0x1ac>)
 800f2fc:	4852      	ldr	r0, [pc, #328]	; (800f448 <tcp_close_shutdown+0x1a8>)
 800f2fe:	f007 ff9d 	bl	801723c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f30a:	687d      	ldr	r5, [r7, #4]
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	3304      	adds	r3, #4
 800f310:	687a      	ldr	r2, [r7, #4]
 800f312:	8ad2      	ldrh	r2, [r2, #22]
 800f314:	6879      	ldr	r1, [r7, #4]
 800f316:	8b09      	ldrh	r1, [r1, #24]
 800f318:	9102      	str	r1, [sp, #8]
 800f31a:	9201      	str	r2, [sp, #4]
 800f31c:	9300      	str	r3, [sp, #0]
 800f31e:	462b      	mov	r3, r5
 800f320:	4622      	mov	r2, r4
 800f322:	4601      	mov	r1, r0
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f004 fe91 	bl	801404c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f001 f8c6 	bl	80104bc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f330:	4b47      	ldr	r3, [pc, #284]	; (800f450 <tcp_close_shutdown+0x1b0>)
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	687a      	ldr	r2, [r7, #4]
 800f336:	429a      	cmp	r2, r3
 800f338:	d105      	bne.n	800f346 <tcp_close_shutdown+0xa6>
 800f33a:	4b45      	ldr	r3, [pc, #276]	; (800f450 <tcp_close_shutdown+0x1b0>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	68db      	ldr	r3, [r3, #12]
 800f340:	4a43      	ldr	r2, [pc, #268]	; (800f450 <tcp_close_shutdown+0x1b0>)
 800f342:	6013      	str	r3, [r2, #0]
 800f344:	e013      	b.n	800f36e <tcp_close_shutdown+0xce>
 800f346:	4b42      	ldr	r3, [pc, #264]	; (800f450 <tcp_close_shutdown+0x1b0>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	60fb      	str	r3, [r7, #12]
 800f34c:	e00c      	b.n	800f368 <tcp_close_shutdown+0xc8>
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	68db      	ldr	r3, [r3, #12]
 800f352:	687a      	ldr	r2, [r7, #4]
 800f354:	429a      	cmp	r2, r3
 800f356:	d104      	bne.n	800f362 <tcp_close_shutdown+0xc2>
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	68da      	ldr	r2, [r3, #12]
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	60da      	str	r2, [r3, #12]
 800f360:	e005      	b.n	800f36e <tcp_close_shutdown+0xce>
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	68db      	ldr	r3, [r3, #12]
 800f366:	60fb      	str	r3, [r7, #12]
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d1ef      	bne.n	800f34e <tcp_close_shutdown+0xae>
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	2200      	movs	r2, #0
 800f372:	60da      	str	r2, [r3, #12]
 800f374:	4b37      	ldr	r3, [pc, #220]	; (800f454 <tcp_close_shutdown+0x1b4>)
 800f376:	2201      	movs	r2, #1
 800f378:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f37a:	4b37      	ldr	r3, [pc, #220]	; (800f458 <tcp_close_shutdown+0x1b8>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	687a      	ldr	r2, [r7, #4]
 800f380:	429a      	cmp	r2, r3
 800f382:	d102      	bne.n	800f38a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f384:	f003 fd5e 	bl	8012e44 <tcp_trigger_input_pcb_close>
 800f388:	e002      	b.n	800f390 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f7ff fed6 	bl	800f13c <tcp_free>
      }
      return ERR_OK;
 800f390:	2300      	movs	r3, #0
 800f392:	e050      	b.n	800f436 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	7d1b      	ldrb	r3, [r3, #20]
 800f398:	2b02      	cmp	r3, #2
 800f39a:	d03b      	beq.n	800f414 <tcp_close_shutdown+0x174>
 800f39c:	2b02      	cmp	r3, #2
 800f39e:	dc44      	bgt.n	800f42a <tcp_close_shutdown+0x18a>
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d002      	beq.n	800f3aa <tcp_close_shutdown+0x10a>
 800f3a4:	2b01      	cmp	r3, #1
 800f3a6:	d02a      	beq.n	800f3fe <tcp_close_shutdown+0x15e>
 800f3a8:	e03f      	b.n	800f42a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	8adb      	ldrh	r3, [r3, #22]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d021      	beq.n	800f3f6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f3b2:	4b2a      	ldr	r3, [pc, #168]	; (800f45c <tcp_close_shutdown+0x1bc>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	687a      	ldr	r2, [r7, #4]
 800f3b8:	429a      	cmp	r2, r3
 800f3ba:	d105      	bne.n	800f3c8 <tcp_close_shutdown+0x128>
 800f3bc:	4b27      	ldr	r3, [pc, #156]	; (800f45c <tcp_close_shutdown+0x1bc>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	68db      	ldr	r3, [r3, #12]
 800f3c2:	4a26      	ldr	r2, [pc, #152]	; (800f45c <tcp_close_shutdown+0x1bc>)
 800f3c4:	6013      	str	r3, [r2, #0]
 800f3c6:	e013      	b.n	800f3f0 <tcp_close_shutdown+0x150>
 800f3c8:	4b24      	ldr	r3, [pc, #144]	; (800f45c <tcp_close_shutdown+0x1bc>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	60bb      	str	r3, [r7, #8]
 800f3ce:	e00c      	b.n	800f3ea <tcp_close_shutdown+0x14a>
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	68db      	ldr	r3, [r3, #12]
 800f3d4:	687a      	ldr	r2, [r7, #4]
 800f3d6:	429a      	cmp	r2, r3
 800f3d8:	d104      	bne.n	800f3e4 <tcp_close_shutdown+0x144>
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	68da      	ldr	r2, [r3, #12]
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	60da      	str	r2, [r3, #12]
 800f3e2:	e005      	b.n	800f3f0 <tcp_close_shutdown+0x150>
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	68db      	ldr	r3, [r3, #12]
 800f3e8:	60bb      	str	r3, [r7, #8]
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d1ef      	bne.n	800f3d0 <tcp_close_shutdown+0x130>
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f3f6:	6878      	ldr	r0, [r7, #4]
 800f3f8:	f7ff fea0 	bl	800f13c <tcp_free>
      break;
 800f3fc:	e01a      	b.n	800f434 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f7ff ff14 	bl	800f22c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f404:	6879      	ldr	r1, [r7, #4]
 800f406:	4816      	ldr	r0, [pc, #88]	; (800f460 <tcp_close_shutdown+0x1c0>)
 800f408:	f001 f8a8 	bl	801055c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f7ff feb1 	bl	800f174 <tcp_free_listen>
      break;
 800f412:	e00f      	b.n	800f434 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f414:	6879      	ldr	r1, [r7, #4]
 800f416:	480e      	ldr	r0, [pc, #56]	; (800f450 <tcp_close_shutdown+0x1b0>)
 800f418:	f001 f8a0 	bl	801055c <tcp_pcb_remove>
 800f41c:	4b0d      	ldr	r3, [pc, #52]	; (800f454 <tcp_close_shutdown+0x1b4>)
 800f41e:	2201      	movs	r2, #1
 800f420:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	f7ff fe8a 	bl	800f13c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f428:	e004      	b.n	800f434 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f000 f81a 	bl	800f464 <tcp_close_shutdown_fin>
 800f430:	4603      	mov	r3, r0
 800f432:	e000      	b.n	800f436 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800f434:	2300      	movs	r3, #0
}
 800f436:	4618      	mov	r0, r3
 800f438:	3710      	adds	r7, #16
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bdb0      	pop	{r4, r5, r7, pc}
 800f43e:	bf00      	nop
 800f440:	08019160 	.word	0x08019160
 800f444:	08019234 	.word	0x08019234
 800f448:	080191a4 	.word	0x080191a4
 800f44c:	08019254 	.word	0x08019254
 800f450:	20011070 	.word	0x20011070
 800f454:	20011078 	.word	0x20011078
 800f458:	200110b0 	.word	0x200110b0
 800f45c:	20011068 	.word	0x20011068
 800f460:	2001106c 	.word	0x2001106c

0800f464 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b084      	sub	sp, #16
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d106      	bne.n	800f480 <tcp_close_shutdown_fin+0x1c>
 800f472:	4b2e      	ldr	r3, [pc, #184]	; (800f52c <tcp_close_shutdown_fin+0xc8>)
 800f474:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f478:	492d      	ldr	r1, [pc, #180]	; (800f530 <tcp_close_shutdown_fin+0xcc>)
 800f47a:	482e      	ldr	r0, [pc, #184]	; (800f534 <tcp_close_shutdown_fin+0xd0>)
 800f47c:	f007 fede 	bl	801723c <iprintf>

  switch (pcb->state) {
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	7d1b      	ldrb	r3, [r3, #20]
 800f484:	2b07      	cmp	r3, #7
 800f486:	d020      	beq.n	800f4ca <tcp_close_shutdown_fin+0x66>
 800f488:	2b07      	cmp	r3, #7
 800f48a:	dc2b      	bgt.n	800f4e4 <tcp_close_shutdown_fin+0x80>
 800f48c:	2b03      	cmp	r3, #3
 800f48e:	d002      	beq.n	800f496 <tcp_close_shutdown_fin+0x32>
 800f490:	2b04      	cmp	r3, #4
 800f492:	d00d      	beq.n	800f4b0 <tcp_close_shutdown_fin+0x4c>
 800f494:	e026      	b.n	800f4e4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f003 fee6 	bl	8013268 <tcp_send_fin>
 800f49c:	4603      	mov	r3, r0
 800f49e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f4a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d11f      	bne.n	800f4e8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2205      	movs	r2, #5
 800f4ac:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f4ae:	e01b      	b.n	800f4e8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f003 fed9 	bl	8013268 <tcp_send_fin>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f4ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d114      	bne.n	800f4ec <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	2205      	movs	r2, #5
 800f4c6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f4c8:	e010      	b.n	800f4ec <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f4ca:	6878      	ldr	r0, [r7, #4]
 800f4cc:	f003 fecc 	bl	8013268 <tcp_send_fin>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f4d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d109      	bne.n	800f4f0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2209      	movs	r2, #9
 800f4e0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f4e2:	e005      	b.n	800f4f0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	e01c      	b.n	800f522 <tcp_close_shutdown_fin+0xbe>
      break;
 800f4e8:	bf00      	nop
 800f4ea:	e002      	b.n	800f4f2 <tcp_close_shutdown_fin+0x8e>
      break;
 800f4ec:	bf00      	nop
 800f4ee:	e000      	b.n	800f4f2 <tcp_close_shutdown_fin+0x8e>
      break;
 800f4f0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f4f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d103      	bne.n	800f502 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	f003 fff2 	bl	80134e4 <tcp_output>
 800f500:	e00d      	b.n	800f51e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f50a:	d108      	bne.n	800f51e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	8b5b      	ldrh	r3, [r3, #26]
 800f510:	f043 0308 	orr.w	r3, r3, #8
 800f514:	b29a      	uxth	r2, r3
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f51a:	2300      	movs	r3, #0
 800f51c:	e001      	b.n	800f522 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f51e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f522:	4618      	mov	r0, r3
 800f524:	3710      	adds	r7, #16
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}
 800f52a:	bf00      	nop
 800f52c:	08019160 	.word	0x08019160
 800f530:	08019210 	.word	0x08019210
 800f534:	080191a4 	.word	0x080191a4

0800f538 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b082      	sub	sp, #8
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d109      	bne.n	800f55a <tcp_close+0x22>
 800f546:	4b0f      	ldr	r3, [pc, #60]	; (800f584 <tcp_close+0x4c>)
 800f548:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f54c:	490e      	ldr	r1, [pc, #56]	; (800f588 <tcp_close+0x50>)
 800f54e:	480f      	ldr	r0, [pc, #60]	; (800f58c <tcp_close+0x54>)
 800f550:	f007 fe74 	bl	801723c <iprintf>
 800f554:	f06f 030f 	mvn.w	r3, #15
 800f558:	e00f      	b.n	800f57a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	7d1b      	ldrb	r3, [r3, #20]
 800f55e:	2b01      	cmp	r3, #1
 800f560:	d006      	beq.n	800f570 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	8b5b      	ldrh	r3, [r3, #26]
 800f566:	f043 0310 	orr.w	r3, r3, #16
 800f56a:	b29a      	uxth	r2, r3
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f570:	2101      	movs	r1, #1
 800f572:	6878      	ldr	r0, [r7, #4]
 800f574:	f7ff fe94 	bl	800f2a0 <tcp_close_shutdown>
 800f578:	4603      	mov	r3, r0
}
 800f57a:	4618      	mov	r0, r3
 800f57c:	3708      	adds	r7, #8
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}
 800f582:	bf00      	nop
 800f584:	08019160 	.word	0x08019160
 800f588:	08019270 	.word	0x08019270
 800f58c:	080191a4 	.word	0x080191a4

0800f590 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b08e      	sub	sp, #56	; 0x38
 800f594:	af04      	add	r7, sp, #16
 800f596:	6078      	str	r0, [r7, #4]
 800f598:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d107      	bne.n	800f5b0 <tcp_abandon+0x20>
 800f5a0:	4b52      	ldr	r3, [pc, #328]	; (800f6ec <tcp_abandon+0x15c>)
 800f5a2:	f240 223d 	movw	r2, #573	; 0x23d
 800f5a6:	4952      	ldr	r1, [pc, #328]	; (800f6f0 <tcp_abandon+0x160>)
 800f5a8:	4852      	ldr	r0, [pc, #328]	; (800f6f4 <tcp_abandon+0x164>)
 800f5aa:	f007 fe47 	bl	801723c <iprintf>
 800f5ae:	e099      	b.n	800f6e4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	7d1b      	ldrb	r3, [r3, #20]
 800f5b4:	2b01      	cmp	r3, #1
 800f5b6:	d106      	bne.n	800f5c6 <tcp_abandon+0x36>
 800f5b8:	4b4c      	ldr	r3, [pc, #304]	; (800f6ec <tcp_abandon+0x15c>)
 800f5ba:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f5be:	494e      	ldr	r1, [pc, #312]	; (800f6f8 <tcp_abandon+0x168>)
 800f5c0:	484c      	ldr	r0, [pc, #304]	; (800f6f4 <tcp_abandon+0x164>)
 800f5c2:	f007 fe3b 	bl	801723c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	7d1b      	ldrb	r3, [r3, #20]
 800f5ca:	2b0a      	cmp	r3, #10
 800f5cc:	d107      	bne.n	800f5de <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f5ce:	6879      	ldr	r1, [r7, #4]
 800f5d0:	484a      	ldr	r0, [pc, #296]	; (800f6fc <tcp_abandon+0x16c>)
 800f5d2:	f000 ffc3 	bl	801055c <tcp_pcb_remove>
    tcp_free(pcb);
 800f5d6:	6878      	ldr	r0, [r7, #4]
 800f5d8:	f7ff fdb0 	bl	800f13c <tcp_free>
 800f5dc:	e082      	b.n	800f6e4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5ea:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5f0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f5f8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	691b      	ldr	r3, [r3, #16]
 800f5fe:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	7d1b      	ldrb	r3, [r3, #20]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d126      	bne.n	800f656 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	8adb      	ldrh	r3, [r3, #22]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d02e      	beq.n	800f66e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f610:	4b3b      	ldr	r3, [pc, #236]	; (800f700 <tcp_abandon+0x170>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	687a      	ldr	r2, [r7, #4]
 800f616:	429a      	cmp	r2, r3
 800f618:	d105      	bne.n	800f626 <tcp_abandon+0x96>
 800f61a:	4b39      	ldr	r3, [pc, #228]	; (800f700 <tcp_abandon+0x170>)
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	68db      	ldr	r3, [r3, #12]
 800f620:	4a37      	ldr	r2, [pc, #220]	; (800f700 <tcp_abandon+0x170>)
 800f622:	6013      	str	r3, [r2, #0]
 800f624:	e013      	b.n	800f64e <tcp_abandon+0xbe>
 800f626:	4b36      	ldr	r3, [pc, #216]	; (800f700 <tcp_abandon+0x170>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	61fb      	str	r3, [r7, #28]
 800f62c:	e00c      	b.n	800f648 <tcp_abandon+0xb8>
 800f62e:	69fb      	ldr	r3, [r7, #28]
 800f630:	68db      	ldr	r3, [r3, #12]
 800f632:	687a      	ldr	r2, [r7, #4]
 800f634:	429a      	cmp	r2, r3
 800f636:	d104      	bne.n	800f642 <tcp_abandon+0xb2>
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	68da      	ldr	r2, [r3, #12]
 800f63c:	69fb      	ldr	r3, [r7, #28]
 800f63e:	60da      	str	r2, [r3, #12]
 800f640:	e005      	b.n	800f64e <tcp_abandon+0xbe>
 800f642:	69fb      	ldr	r3, [r7, #28]
 800f644:	68db      	ldr	r3, [r3, #12]
 800f646:	61fb      	str	r3, [r7, #28]
 800f648:	69fb      	ldr	r3, [r7, #28]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d1ef      	bne.n	800f62e <tcp_abandon+0x9e>
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	2200      	movs	r2, #0
 800f652:	60da      	str	r2, [r3, #12]
 800f654:	e00b      	b.n	800f66e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	8adb      	ldrh	r3, [r3, #22]
 800f65e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f660:	6879      	ldr	r1, [r7, #4]
 800f662:	4828      	ldr	r0, [pc, #160]	; (800f704 <tcp_abandon+0x174>)
 800f664:	f000 ff7a 	bl	801055c <tcp_pcb_remove>
 800f668:	4b27      	ldr	r3, [pc, #156]	; (800f708 <tcp_abandon+0x178>)
 800f66a:	2201      	movs	r2, #1
 800f66c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f672:	2b00      	cmp	r3, #0
 800f674:	d004      	beq.n	800f680 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f67a:	4618      	mov	r0, r3
 800f67c:	f000 fd1c 	bl	80100b8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f684:	2b00      	cmp	r3, #0
 800f686:	d004      	beq.n	800f692 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f68c:	4618      	mov	r0, r3
 800f68e:	f000 fd13 	bl	80100b8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f696:	2b00      	cmp	r3, #0
 800f698:	d004      	beq.n	800f6a4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f000 fd0a 	bl	80100b8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d00e      	beq.n	800f6c8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f6aa:	6879      	ldr	r1, [r7, #4]
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	3304      	adds	r3, #4
 800f6b0:	687a      	ldr	r2, [r7, #4]
 800f6b2:	8b12      	ldrh	r2, [r2, #24]
 800f6b4:	9202      	str	r2, [sp, #8]
 800f6b6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f6b8:	9201      	str	r2, [sp, #4]
 800f6ba:	9300      	str	r3, [sp, #0]
 800f6bc:	460b      	mov	r3, r1
 800f6be:	697a      	ldr	r2, [r7, #20]
 800f6c0:	69b9      	ldr	r1, [r7, #24]
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f004 fcc2 	bl	801404c <tcp_rst>
    }
    last_state = pcb->state;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	7d1b      	ldrb	r3, [r3, #20]
 800f6cc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f6ce:	6878      	ldr	r0, [r7, #4]
 800f6d0:	f7ff fd34 	bl	800f13c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f6d4:	693b      	ldr	r3, [r7, #16]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d004      	beq.n	800f6e4 <tcp_abandon+0x154>
 800f6da:	693b      	ldr	r3, [r7, #16]
 800f6dc:	f06f 010c 	mvn.w	r1, #12
 800f6e0:	68f8      	ldr	r0, [r7, #12]
 800f6e2:	4798      	blx	r3
  }
}
 800f6e4:	3728      	adds	r7, #40	; 0x28
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd80      	pop	{r7, pc}
 800f6ea:	bf00      	nop
 800f6ec:	08019160 	.word	0x08019160
 800f6f0:	080192a4 	.word	0x080192a4
 800f6f4:	080191a4 	.word	0x080191a4
 800f6f8:	080192c0 	.word	0x080192c0
 800f6fc:	20011074 	.word	0x20011074
 800f700:	20011068 	.word	0x20011068
 800f704:	20011070 	.word	0x20011070
 800f708:	20011078 	.word	0x20011078

0800f70c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b082      	sub	sp, #8
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f714:	2101      	movs	r1, #1
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	f7ff ff3a 	bl	800f590 <tcp_abandon>
}
 800f71c:	bf00      	nop
 800f71e:	3708      	adds	r7, #8
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}

0800f724 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b084      	sub	sp, #16
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d106      	bne.n	800f740 <tcp_update_rcv_ann_wnd+0x1c>
 800f732:	4b25      	ldr	r3, [pc, #148]	; (800f7c8 <tcp_update_rcv_ann_wnd+0xa4>)
 800f734:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f738:	4924      	ldr	r1, [pc, #144]	; (800f7cc <tcp_update_rcv_ann_wnd+0xa8>)
 800f73a:	4825      	ldr	r0, [pc, #148]	; (800f7d0 <tcp_update_rcv_ann_wnd+0xac>)
 800f73c:	f007 fd7e 	bl	801723c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f744:	687a      	ldr	r2, [r7, #4]
 800f746:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f748:	4413      	add	r3, r2
 800f74a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f750:	687a      	ldr	r2, [r7, #4]
 800f752:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f754:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f758:	bf28      	it	cs
 800f75a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f75e:	b292      	uxth	r2, r2
 800f760:	4413      	add	r3, r2
 800f762:	68fa      	ldr	r2, [r7, #12]
 800f764:	1ad3      	subs	r3, r2, r3
 800f766:	2b00      	cmp	r3, #0
 800f768:	db08      	blt.n	800f77c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f776:	68fa      	ldr	r2, [r7, #12]
 800f778:	1ad3      	subs	r3, r2, r3
 800f77a:	e020      	b.n	800f7be <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f784:	1ad3      	subs	r3, r2, r3
 800f786:	2b00      	cmp	r3, #0
 800f788:	dd03      	ble.n	800f792 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2200      	movs	r2, #0
 800f78e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f790:	e014      	b.n	800f7bc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f79a:	1ad3      	subs	r3, r2, r3
 800f79c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f79e:	68bb      	ldr	r3, [r7, #8]
 800f7a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7a4:	d306      	bcc.n	800f7b4 <tcp_update_rcv_ann_wnd+0x90>
 800f7a6:	4b08      	ldr	r3, [pc, #32]	; (800f7c8 <tcp_update_rcv_ann_wnd+0xa4>)
 800f7a8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f7ac:	4909      	ldr	r1, [pc, #36]	; (800f7d4 <tcp_update_rcv_ann_wnd+0xb0>)
 800f7ae:	4808      	ldr	r0, [pc, #32]	; (800f7d0 <tcp_update_rcv_ann_wnd+0xac>)
 800f7b0:	f007 fd44 	bl	801723c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	b29a      	uxth	r2, r3
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f7bc:	2300      	movs	r3, #0
  }
}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	3710      	adds	r7, #16
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}
 800f7c6:	bf00      	nop
 800f7c8:	08019160 	.word	0x08019160
 800f7cc:	080193bc 	.word	0x080193bc
 800f7d0:	080191a4 	.word	0x080191a4
 800f7d4:	080193e0 	.word	0x080193e0

0800f7d8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b084      	sub	sp, #16
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	460b      	mov	r3, r1
 800f7e2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d107      	bne.n	800f7fa <tcp_recved+0x22>
 800f7ea:	4b1f      	ldr	r3, [pc, #124]	; (800f868 <tcp_recved+0x90>)
 800f7ec:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f7f0:	491e      	ldr	r1, [pc, #120]	; (800f86c <tcp_recved+0x94>)
 800f7f2:	481f      	ldr	r0, [pc, #124]	; (800f870 <tcp_recved+0x98>)
 800f7f4:	f007 fd22 	bl	801723c <iprintf>
 800f7f8:	e032      	b.n	800f860 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	7d1b      	ldrb	r3, [r3, #20]
 800f7fe:	2b01      	cmp	r3, #1
 800f800:	d106      	bne.n	800f810 <tcp_recved+0x38>
 800f802:	4b19      	ldr	r3, [pc, #100]	; (800f868 <tcp_recved+0x90>)
 800f804:	f240 32d2 	movw	r2, #978	; 0x3d2
 800f808:	491a      	ldr	r1, [pc, #104]	; (800f874 <tcp_recved+0x9c>)
 800f80a:	4819      	ldr	r0, [pc, #100]	; (800f870 <tcp_recved+0x98>)
 800f80c:	f007 fd16 	bl	801723c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f814:	887b      	ldrh	r3, [r7, #2]
 800f816:	4413      	add	r3, r2
 800f818:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f81a:	89fb      	ldrh	r3, [r7, #14]
 800f81c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f820:	d804      	bhi.n	800f82c <tcp_recved+0x54>
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f826:	89fa      	ldrh	r2, [r7, #14]
 800f828:	429a      	cmp	r2, r3
 800f82a:	d204      	bcs.n	800f836 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f832:	851a      	strh	r2, [r3, #40]	; 0x28
 800f834:	e002      	b.n	800f83c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	89fa      	ldrh	r2, [r7, #14]
 800f83a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f7ff ff71 	bl	800f724 <tcp_update_rcv_ann_wnd>
 800f842:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f844:	68bb      	ldr	r3, [r7, #8]
 800f846:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f84a:	d309      	bcc.n	800f860 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	8b5b      	ldrh	r3, [r3, #26]
 800f850:	f043 0302 	orr.w	r3, r3, #2
 800f854:	b29a      	uxth	r2, r3
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f85a:	6878      	ldr	r0, [r7, #4]
 800f85c:	f003 fe42 	bl	80134e4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f860:	3710      	adds	r7, #16
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}
 800f866:	bf00      	nop
 800f868:	08019160 	.word	0x08019160
 800f86c:	080193fc 	.word	0x080193fc
 800f870:	080191a4 	.word	0x080191a4
 800f874:	08019414 	.word	0x08019414

0800f878 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f878:	b5b0      	push	{r4, r5, r7, lr}
 800f87a:	b090      	sub	sp, #64	; 0x40
 800f87c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f87e:	2300      	movs	r3, #0
 800f880:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f884:	4b94      	ldr	r3, [pc, #592]	; (800fad8 <tcp_slowtmr+0x260>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	3301      	adds	r3, #1
 800f88a:	4a93      	ldr	r2, [pc, #588]	; (800fad8 <tcp_slowtmr+0x260>)
 800f88c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f88e:	4b93      	ldr	r3, [pc, #588]	; (800fadc <tcp_slowtmr+0x264>)
 800f890:	781b      	ldrb	r3, [r3, #0]
 800f892:	3301      	adds	r3, #1
 800f894:	b2da      	uxtb	r2, r3
 800f896:	4b91      	ldr	r3, [pc, #580]	; (800fadc <tcp_slowtmr+0x264>)
 800f898:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f89a:	2300      	movs	r3, #0
 800f89c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f89e:	4b90      	ldr	r3, [pc, #576]	; (800fae0 <tcp_slowtmr+0x268>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f8a4:	e29d      	b.n	800fde2 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a8:	7d1b      	ldrb	r3, [r3, #20]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d106      	bne.n	800f8bc <tcp_slowtmr+0x44>
 800f8ae:	4b8d      	ldr	r3, [pc, #564]	; (800fae4 <tcp_slowtmr+0x26c>)
 800f8b0:	f240 42be 	movw	r2, #1214	; 0x4be
 800f8b4:	498c      	ldr	r1, [pc, #560]	; (800fae8 <tcp_slowtmr+0x270>)
 800f8b6:	488d      	ldr	r0, [pc, #564]	; (800faec <tcp_slowtmr+0x274>)
 800f8b8:	f007 fcc0 	bl	801723c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8be:	7d1b      	ldrb	r3, [r3, #20]
 800f8c0:	2b01      	cmp	r3, #1
 800f8c2:	d106      	bne.n	800f8d2 <tcp_slowtmr+0x5a>
 800f8c4:	4b87      	ldr	r3, [pc, #540]	; (800fae4 <tcp_slowtmr+0x26c>)
 800f8c6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f8ca:	4989      	ldr	r1, [pc, #548]	; (800faf0 <tcp_slowtmr+0x278>)
 800f8cc:	4887      	ldr	r0, [pc, #540]	; (800faec <tcp_slowtmr+0x274>)
 800f8ce:	f007 fcb5 	bl	801723c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d4:	7d1b      	ldrb	r3, [r3, #20]
 800f8d6:	2b0a      	cmp	r3, #10
 800f8d8:	d106      	bne.n	800f8e8 <tcp_slowtmr+0x70>
 800f8da:	4b82      	ldr	r3, [pc, #520]	; (800fae4 <tcp_slowtmr+0x26c>)
 800f8dc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f8e0:	4984      	ldr	r1, [pc, #528]	; (800faf4 <tcp_slowtmr+0x27c>)
 800f8e2:	4882      	ldr	r0, [pc, #520]	; (800faec <tcp_slowtmr+0x274>)
 800f8e4:	f007 fcaa 	bl	801723c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ea:	7f9a      	ldrb	r2, [r3, #30]
 800f8ec:	4b7b      	ldr	r3, [pc, #492]	; (800fadc <tcp_slowtmr+0x264>)
 800f8ee:	781b      	ldrb	r3, [r3, #0]
 800f8f0:	429a      	cmp	r2, r3
 800f8f2:	d105      	bne.n	800f900 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8fa:	68db      	ldr	r3, [r3, #12]
 800f8fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f8fe:	e270      	b.n	800fde2 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f900:	4b76      	ldr	r3, [pc, #472]	; (800fadc <tcp_slowtmr+0x264>)
 800f902:	781a      	ldrb	r2, [r3, #0]
 800f904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f906:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f908:	2300      	movs	r3, #0
 800f90a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f90e:	2300      	movs	r3, #0
 800f910:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f916:	7d1b      	ldrb	r3, [r3, #20]
 800f918:	2b02      	cmp	r3, #2
 800f91a:	d10a      	bne.n	800f932 <tcp_slowtmr+0xba>
 800f91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f91e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f922:	2b05      	cmp	r3, #5
 800f924:	d905      	bls.n	800f932 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f92a:	3301      	adds	r3, #1
 800f92c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f930:	e11e      	b.n	800fb70 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f934:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f938:	2b0b      	cmp	r3, #11
 800f93a:	d905      	bls.n	800f948 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f93c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f940:	3301      	adds	r3, #1
 800f942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f946:	e113      	b.n	800fb70 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f94a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d075      	beq.n	800fa3e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f956:	2b00      	cmp	r3, #0
 800f958:	d006      	beq.n	800f968 <tcp_slowtmr+0xf0>
 800f95a:	4b62      	ldr	r3, [pc, #392]	; (800fae4 <tcp_slowtmr+0x26c>)
 800f95c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f960:	4965      	ldr	r1, [pc, #404]	; (800faf8 <tcp_slowtmr+0x280>)
 800f962:	4862      	ldr	r0, [pc, #392]	; (800faec <tcp_slowtmr+0x274>)
 800f964:	f007 fc6a 	bl	801723c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f96a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d106      	bne.n	800f97e <tcp_slowtmr+0x106>
 800f970:	4b5c      	ldr	r3, [pc, #368]	; (800fae4 <tcp_slowtmr+0x26c>)
 800f972:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f976:	4961      	ldr	r1, [pc, #388]	; (800fafc <tcp_slowtmr+0x284>)
 800f978:	485c      	ldr	r0, [pc, #368]	; (800faec <tcp_slowtmr+0x274>)
 800f97a:	f007 fc5f 	bl	801723c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f980:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f984:	2b0b      	cmp	r3, #11
 800f986:	d905      	bls.n	800f994 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f98c:	3301      	adds	r3, #1
 800f98e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f992:	e0ed      	b.n	800fb70 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f996:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f99a:	3b01      	subs	r3, #1
 800f99c:	4a58      	ldr	r2, [pc, #352]	; (800fb00 <tcp_slowtmr+0x288>)
 800f99e:	5cd3      	ldrb	r3, [r2, r3]
 800f9a0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f9a8:	7c7a      	ldrb	r2, [r7, #17]
 800f9aa:	429a      	cmp	r2, r3
 800f9ac:	d907      	bls.n	800f9be <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f9b4:	3301      	adds	r3, #1
 800f9b6:	b2da      	uxtb	r2, r3
 800f9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ba:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f9c4:	7c7a      	ldrb	r2, [r7, #17]
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	f200 80d2 	bhi.w	800fb70 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d108      	bne.n	800f9ec <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f9da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9dc:	f004 fc2a 	bl	8014234 <tcp_zero_window_probe>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d014      	beq.n	800fa10 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	623b      	str	r3, [r7, #32]
 800f9ea:	e011      	b.n	800fa10 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f9f2:	4619      	mov	r1, r3
 800f9f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9f6:	f003 faef 	bl	8012fd8 <tcp_split_unsent_seg>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d107      	bne.n	800fa10 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800fa00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa02:	f003 fd6f 	bl	80134e4 <tcp_output>
 800fa06:	4603      	mov	r3, r0
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d101      	bne.n	800fa10 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800fa10:	6a3b      	ldr	r3, [r7, #32]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	f000 80ac 	beq.w	800fb70 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800fa18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800fa20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa22:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fa26:	2b06      	cmp	r3, #6
 800fa28:	f200 80a2 	bhi.w	800fb70 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800fa2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa2e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fa32:	3301      	adds	r3, #1
 800fa34:	b2da      	uxtb	r2, r3
 800fa36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa38:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800fa3c:	e098      	b.n	800fb70 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800fa3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa40:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	db0f      	blt.n	800fa68 <tcp_slowtmr+0x1f0>
 800fa48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa4a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fa4e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fa52:	4293      	cmp	r3, r2
 800fa54:	d008      	beq.n	800fa68 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800fa56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa58:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fa5c:	b29b      	uxth	r3, r3
 800fa5e:	3301      	adds	r3, #1
 800fa60:	b29b      	uxth	r3, r3
 800fa62:	b21a      	sxth	r2, r3
 800fa64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa66:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800fa68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa6a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800fa6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa70:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fa74:	429a      	cmp	r2, r3
 800fa76:	db7b      	blt.n	800fb70 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800fa78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa7a:	f004 f825 	bl	8013ac8 <tcp_rexmit_rto_prepare>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d007      	beq.n	800fa94 <tcp_slowtmr+0x21c>
 800fa84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d171      	bne.n	800fb70 <tcp_slowtmr+0x2f8>
 800fa8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d06d      	beq.n	800fb70 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800fa94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa96:	7d1b      	ldrb	r3, [r3, #20]
 800fa98:	2b02      	cmp	r3, #2
 800fa9a:	d03a      	beq.n	800fb12 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800fa9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800faa2:	2b0c      	cmp	r3, #12
 800faa4:	bf28      	it	cs
 800faa6:	230c      	movcs	r3, #12
 800faa8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800faaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fab0:	10db      	asrs	r3, r3, #3
 800fab2:	b21b      	sxth	r3, r3
 800fab4:	461a      	mov	r2, r3
 800fab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fab8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fabc:	4413      	add	r3, r2
 800fabe:	7efa      	ldrb	r2, [r7, #27]
 800fac0:	4910      	ldr	r1, [pc, #64]	; (800fb04 <tcp_slowtmr+0x28c>)
 800fac2:	5c8a      	ldrb	r2, [r1, r2]
 800fac4:	4093      	lsls	r3, r2
 800fac6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800fac8:	697b      	ldr	r3, [r7, #20]
 800faca:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800face:	4293      	cmp	r3, r2
 800fad0:	dc1a      	bgt.n	800fb08 <tcp_slowtmr+0x290>
 800fad2:	697b      	ldr	r3, [r7, #20]
 800fad4:	b21a      	sxth	r2, r3
 800fad6:	e019      	b.n	800fb0c <tcp_slowtmr+0x294>
 800fad8:	20011064 	.word	0x20011064
 800fadc:	2001107a 	.word	0x2001107a
 800fae0:	20011070 	.word	0x20011070
 800fae4:	08019160 	.word	0x08019160
 800fae8:	080194a4 	.word	0x080194a4
 800faec:	080191a4 	.word	0x080191a4
 800faf0:	080194d0 	.word	0x080194d0
 800faf4:	080194fc 	.word	0x080194fc
 800faf8:	0801952c 	.word	0x0801952c
 800fafc:	08019560 	.word	0x08019560
 800fb00:	0801b1ec 	.word	0x0801b1ec
 800fb04:	0801b1dc 	.word	0x0801b1dc
 800fb08:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800fb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb14:	2200      	movs	r2, #0
 800fb16:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800fb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fb1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb20:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fb24:	4293      	cmp	r3, r2
 800fb26:	bf28      	it	cs
 800fb28:	4613      	movcs	r3, r2
 800fb2a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800fb2c:	8a7b      	ldrh	r3, [r7, #18]
 800fb2e:	085b      	lsrs	r3, r3, #1
 800fb30:	b29a      	uxth	r2, r3
 800fb32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb34:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb3a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb42:	005b      	lsls	r3, r3, #1
 800fb44:	b29b      	uxth	r3, r3
 800fb46:	429a      	cmp	r2, r3
 800fb48:	d206      	bcs.n	800fb58 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800fb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb4e:	005b      	lsls	r3, r3, #1
 800fb50:	b29a      	uxth	r2, r3
 800fb52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb54:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800fb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb5a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800fb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb64:	2200      	movs	r2, #0
 800fb66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800fb6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb6c:	f004 f81c 	bl	8013ba8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800fb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb72:	7d1b      	ldrb	r3, [r3, #20]
 800fb74:	2b06      	cmp	r3, #6
 800fb76:	d111      	bne.n	800fb9c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800fb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb7a:	8b5b      	ldrh	r3, [r3, #26]
 800fb7c:	f003 0310 	and.w	r3, r3, #16
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d00b      	beq.n	800fb9c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fb84:	4b9c      	ldr	r3, [pc, #624]	; (800fdf8 <tcp_slowtmr+0x580>)
 800fb86:	681a      	ldr	r2, [r3, #0]
 800fb88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb8a:	6a1b      	ldr	r3, [r3, #32]
 800fb8c:	1ad3      	subs	r3, r2, r3
 800fb8e:	2b28      	cmp	r3, #40	; 0x28
 800fb90:	d904      	bls.n	800fb9c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800fb92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb96:	3301      	adds	r3, #1
 800fb98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb9e:	7a5b      	ldrb	r3, [r3, #9]
 800fba0:	f003 0308 	and.w	r3, r3, #8
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d04a      	beq.n	800fc3e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800fba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbaa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fbac:	2b04      	cmp	r3, #4
 800fbae:	d003      	beq.n	800fbb8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800fbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800fbb4:	2b07      	cmp	r3, #7
 800fbb6:	d142      	bne.n	800fc3e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fbb8:	4b8f      	ldr	r3, [pc, #572]	; (800fdf8 <tcp_slowtmr+0x580>)
 800fbba:	681a      	ldr	r2, [r3, #0]
 800fbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbbe:	6a1b      	ldr	r3, [r3, #32]
 800fbc0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800fbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fbc8:	4b8c      	ldr	r3, [pc, #560]	; (800fdfc <tcp_slowtmr+0x584>)
 800fbca:	440b      	add	r3, r1
 800fbcc:	498c      	ldr	r1, [pc, #560]	; (800fe00 <tcp_slowtmr+0x588>)
 800fbce:	fba1 1303 	umull	r1, r3, r1, r3
 800fbd2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d90a      	bls.n	800fbee <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800fbd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbdc:	3301      	adds	r3, #1
 800fbde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800fbe2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fbe6:	3301      	adds	r3, #1
 800fbe8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fbec:	e027      	b.n	800fc3e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fbee:	4b82      	ldr	r3, [pc, #520]	; (800fdf8 <tcp_slowtmr+0x580>)
 800fbf0:	681a      	ldr	r2, [r3, #0]
 800fbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf4:	6a1b      	ldr	r3, [r3, #32]
 800fbf6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800fbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbfa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc00:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fc04:	4618      	mov	r0, r3
 800fc06:	4b7f      	ldr	r3, [pc, #508]	; (800fe04 <tcp_slowtmr+0x58c>)
 800fc08:	fb00 f303 	mul.w	r3, r0, r3
 800fc0c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800fc0e:	497c      	ldr	r1, [pc, #496]	; (800fe00 <tcp_slowtmr+0x588>)
 800fc10:	fba1 1303 	umull	r1, r3, r1, r3
 800fc14:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fc16:	429a      	cmp	r2, r3
 800fc18:	d911      	bls.n	800fc3e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800fc1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc1c:	f004 faca 	bl	80141b4 <tcp_keepalive>
 800fc20:	4603      	mov	r3, r0
 800fc22:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800fc26:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d107      	bne.n	800fc3e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800fc2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc30:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fc34:	3301      	adds	r3, #1
 800fc36:	b2da      	uxtb	r2, r3
 800fc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc3a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800fc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d011      	beq.n	800fc6a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800fc46:	4b6c      	ldr	r3, [pc, #432]	; (800fdf8 <tcp_slowtmr+0x580>)
 800fc48:	681a      	ldr	r2, [r3, #0]
 800fc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc4c:	6a1b      	ldr	r3, [r3, #32]
 800fc4e:	1ad2      	subs	r2, r2, r3
 800fc50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc52:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fc56:	4619      	mov	r1, r3
 800fc58:	460b      	mov	r3, r1
 800fc5a:	005b      	lsls	r3, r3, #1
 800fc5c:	440b      	add	r3, r1
 800fc5e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800fc60:	429a      	cmp	r2, r3
 800fc62:	d302      	bcc.n	800fc6a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800fc64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc66:	f000 fddd 	bl	8010824 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800fc6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc6c:	7d1b      	ldrb	r3, [r3, #20]
 800fc6e:	2b03      	cmp	r3, #3
 800fc70:	d10b      	bne.n	800fc8a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fc72:	4b61      	ldr	r3, [pc, #388]	; (800fdf8 <tcp_slowtmr+0x580>)
 800fc74:	681a      	ldr	r2, [r3, #0]
 800fc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc78:	6a1b      	ldr	r3, [r3, #32]
 800fc7a:	1ad3      	subs	r3, r2, r3
 800fc7c:	2b28      	cmp	r3, #40	; 0x28
 800fc7e:	d904      	bls.n	800fc8a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800fc80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc84:	3301      	adds	r3, #1
 800fc86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800fc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc8c:	7d1b      	ldrb	r3, [r3, #20]
 800fc8e:	2b09      	cmp	r3, #9
 800fc90:	d10b      	bne.n	800fcaa <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fc92:	4b59      	ldr	r3, [pc, #356]	; (800fdf8 <tcp_slowtmr+0x580>)
 800fc94:	681a      	ldr	r2, [r3, #0]
 800fc96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc98:	6a1b      	ldr	r3, [r3, #32]
 800fc9a:	1ad3      	subs	r3, r2, r3
 800fc9c:	2bf0      	cmp	r3, #240	; 0xf0
 800fc9e:	d904      	bls.n	800fcaa <tcp_slowtmr+0x432>
        ++pcb_remove;
 800fca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fca4:	3301      	adds	r3, #1
 800fca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fcaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d060      	beq.n	800fd74 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800fcb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fcb8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800fcba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fcbc:	f000 fbfe 	bl	80104bc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800fcc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d010      	beq.n	800fce8 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fcc6:	4b50      	ldr	r3, [pc, #320]	; (800fe08 <tcp_slowtmr+0x590>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fccc:	429a      	cmp	r2, r3
 800fcce:	d106      	bne.n	800fcde <tcp_slowtmr+0x466>
 800fcd0:	4b4e      	ldr	r3, [pc, #312]	; (800fe0c <tcp_slowtmr+0x594>)
 800fcd2:	f240 526d 	movw	r2, #1389	; 0x56d
 800fcd6:	494e      	ldr	r1, [pc, #312]	; (800fe10 <tcp_slowtmr+0x598>)
 800fcd8:	484e      	ldr	r0, [pc, #312]	; (800fe14 <tcp_slowtmr+0x59c>)
 800fcda:	f007 faaf 	bl	801723c <iprintf>
        prev->next = pcb->next;
 800fcde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fce0:	68da      	ldr	r2, [r3, #12]
 800fce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fce4:	60da      	str	r2, [r3, #12]
 800fce6:	e00f      	b.n	800fd08 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800fce8:	4b47      	ldr	r3, [pc, #284]	; (800fe08 <tcp_slowtmr+0x590>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d006      	beq.n	800fd00 <tcp_slowtmr+0x488>
 800fcf2:	4b46      	ldr	r3, [pc, #280]	; (800fe0c <tcp_slowtmr+0x594>)
 800fcf4:	f240 5271 	movw	r2, #1393	; 0x571
 800fcf8:	4947      	ldr	r1, [pc, #284]	; (800fe18 <tcp_slowtmr+0x5a0>)
 800fcfa:	4846      	ldr	r0, [pc, #280]	; (800fe14 <tcp_slowtmr+0x59c>)
 800fcfc:	f007 fa9e 	bl	801723c <iprintf>
        tcp_active_pcbs = pcb->next;
 800fd00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd02:	68db      	ldr	r3, [r3, #12]
 800fd04:	4a40      	ldr	r2, [pc, #256]	; (800fe08 <tcp_slowtmr+0x590>)
 800fd06:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800fd08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d013      	beq.n	800fd38 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd12:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fd14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd16:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fd18:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800fd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd1c:	3304      	adds	r3, #4
 800fd1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd20:	8ad2      	ldrh	r2, [r2, #22]
 800fd22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd24:	8b09      	ldrh	r1, [r1, #24]
 800fd26:	9102      	str	r1, [sp, #8]
 800fd28:	9201      	str	r2, [sp, #4]
 800fd2a:	9300      	str	r3, [sp, #0]
 800fd2c:	462b      	mov	r3, r5
 800fd2e:	4622      	mov	r2, r4
 800fd30:	4601      	mov	r1, r0
 800fd32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd34:	f004 f98a 	bl	801404c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800fd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd3a:	691b      	ldr	r3, [r3, #16]
 800fd3c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800fd3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd40:	7d1b      	ldrb	r3, [r3, #20]
 800fd42:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800fd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd46:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800fd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd4a:	68db      	ldr	r3, [r3, #12]
 800fd4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fd4e:	6838      	ldr	r0, [r7, #0]
 800fd50:	f7ff f9f4 	bl	800f13c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800fd54:	4b31      	ldr	r3, [pc, #196]	; (800fe1c <tcp_slowtmr+0x5a4>)
 800fd56:	2200      	movs	r2, #0
 800fd58:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d004      	beq.n	800fd6a <tcp_slowtmr+0x4f2>
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	f06f 010c 	mvn.w	r1, #12
 800fd66:	68b8      	ldr	r0, [r7, #8]
 800fd68:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800fd6a:	4b2c      	ldr	r3, [pc, #176]	; (800fe1c <tcp_slowtmr+0x5a4>)
 800fd6c:	781b      	ldrb	r3, [r3, #0]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d037      	beq.n	800fde2 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800fd72:	e592      	b.n	800f89a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800fd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd76:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd7a:	68db      	ldr	r3, [r3, #12]
 800fd7c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800fd7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd80:	7f1b      	ldrb	r3, [r3, #28]
 800fd82:	3301      	adds	r3, #1
 800fd84:	b2da      	uxtb	r2, r3
 800fd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd88:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800fd8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd8c:	7f1a      	ldrb	r2, [r3, #28]
 800fd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd90:	7f5b      	ldrb	r3, [r3, #29]
 800fd92:	429a      	cmp	r2, r3
 800fd94:	d325      	bcc.n	800fde2 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800fd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd98:	2200      	movs	r2, #0
 800fd9a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800fd9c:	4b1f      	ldr	r3, [pc, #124]	; (800fe1c <tcp_slowtmr+0x5a4>)
 800fd9e:	2200      	movs	r2, #0
 800fda0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800fda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d00b      	beq.n	800fdc4 <tcp_slowtmr+0x54c>
 800fdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fdb4:	6912      	ldr	r2, [r2, #16]
 800fdb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fdb8:	4610      	mov	r0, r2
 800fdba:	4798      	blx	r3
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800fdc2:	e002      	b.n	800fdca <tcp_slowtmr+0x552>
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800fdca:	4b14      	ldr	r3, [pc, #80]	; (800fe1c <tcp_slowtmr+0x5a4>)
 800fdcc:	781b      	ldrb	r3, [r3, #0]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d000      	beq.n	800fdd4 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800fdd2:	e562      	b.n	800f89a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800fdd4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d102      	bne.n	800fde2 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800fddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdde:	f003 fb81 	bl	80134e4 <tcp_output>
  while (pcb != NULL) {
 800fde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	f47f ad5e 	bne.w	800f8a6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800fdea:	2300      	movs	r3, #0
 800fdec:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800fdee:	4b0c      	ldr	r3, [pc, #48]	; (800fe20 <tcp_slowtmr+0x5a8>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fdf4:	e069      	b.n	800feca <tcp_slowtmr+0x652>
 800fdf6:	bf00      	nop
 800fdf8:	20011064 	.word	0x20011064
 800fdfc:	000a4cb8 	.word	0x000a4cb8
 800fe00:	10624dd3 	.word	0x10624dd3
 800fe04:	000124f8 	.word	0x000124f8
 800fe08:	20011070 	.word	0x20011070
 800fe0c:	08019160 	.word	0x08019160
 800fe10:	08019598 	.word	0x08019598
 800fe14:	080191a4 	.word	0x080191a4
 800fe18:	080195c4 	.word	0x080195c4
 800fe1c:	20011078 	.word	0x20011078
 800fe20:	20011074 	.word	0x20011074
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fe24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe26:	7d1b      	ldrb	r3, [r3, #20]
 800fe28:	2b0a      	cmp	r3, #10
 800fe2a:	d006      	beq.n	800fe3a <tcp_slowtmr+0x5c2>
 800fe2c:	4b2b      	ldr	r3, [pc, #172]	; (800fedc <tcp_slowtmr+0x664>)
 800fe2e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800fe32:	492b      	ldr	r1, [pc, #172]	; (800fee0 <tcp_slowtmr+0x668>)
 800fe34:	482b      	ldr	r0, [pc, #172]	; (800fee4 <tcp_slowtmr+0x66c>)
 800fe36:	f007 fa01 	bl	801723c <iprintf>
    pcb_remove = 0;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fe40:	4b29      	ldr	r3, [pc, #164]	; (800fee8 <tcp_slowtmr+0x670>)
 800fe42:	681a      	ldr	r2, [r3, #0]
 800fe44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe46:	6a1b      	ldr	r3, [r3, #32]
 800fe48:	1ad3      	subs	r3, r2, r3
 800fe4a:	2bf0      	cmp	r3, #240	; 0xf0
 800fe4c:	d904      	bls.n	800fe58 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800fe4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe52:	3301      	adds	r3, #1
 800fe54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fe58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d02f      	beq.n	800fec0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800fe60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe62:	f000 fb2b 	bl	80104bc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800fe66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d010      	beq.n	800fe8e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800fe6c:	4b1f      	ldr	r3, [pc, #124]	; (800feec <tcp_slowtmr+0x674>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe72:	429a      	cmp	r2, r3
 800fe74:	d106      	bne.n	800fe84 <tcp_slowtmr+0x60c>
 800fe76:	4b19      	ldr	r3, [pc, #100]	; (800fedc <tcp_slowtmr+0x664>)
 800fe78:	f240 52af 	movw	r2, #1455	; 0x5af
 800fe7c:	491c      	ldr	r1, [pc, #112]	; (800fef0 <tcp_slowtmr+0x678>)
 800fe7e:	4819      	ldr	r0, [pc, #100]	; (800fee4 <tcp_slowtmr+0x66c>)
 800fe80:	f007 f9dc 	bl	801723c <iprintf>
        prev->next = pcb->next;
 800fe84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe86:	68da      	ldr	r2, [r3, #12]
 800fe88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe8a:	60da      	str	r2, [r3, #12]
 800fe8c:	e00f      	b.n	800feae <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800fe8e:	4b17      	ldr	r3, [pc, #92]	; (800feec <tcp_slowtmr+0x674>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe94:	429a      	cmp	r2, r3
 800fe96:	d006      	beq.n	800fea6 <tcp_slowtmr+0x62e>
 800fe98:	4b10      	ldr	r3, [pc, #64]	; (800fedc <tcp_slowtmr+0x664>)
 800fe9a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800fe9e:	4915      	ldr	r1, [pc, #84]	; (800fef4 <tcp_slowtmr+0x67c>)
 800fea0:	4810      	ldr	r0, [pc, #64]	; (800fee4 <tcp_slowtmr+0x66c>)
 800fea2:	f007 f9cb 	bl	801723c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800fea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fea8:	68db      	ldr	r3, [r3, #12]
 800feaa:	4a10      	ldr	r2, [pc, #64]	; (800feec <tcp_slowtmr+0x674>)
 800feac:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800feae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feb0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800feb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feb4:	68db      	ldr	r3, [r3, #12]
 800feb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800feb8:	69f8      	ldr	r0, [r7, #28]
 800feba:	f7ff f93f 	bl	800f13c <tcp_free>
 800febe:	e004      	b.n	800feca <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800fec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fec2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fec6:	68db      	ldr	r3, [r3, #12]
 800fec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800feca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d1a9      	bne.n	800fe24 <tcp_slowtmr+0x5ac>
    }
  }
}
 800fed0:	bf00      	nop
 800fed2:	bf00      	nop
 800fed4:	3730      	adds	r7, #48	; 0x30
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bdb0      	pop	{r4, r5, r7, pc}
 800feda:	bf00      	nop
 800fedc:	08019160 	.word	0x08019160
 800fee0:	080195f0 	.word	0x080195f0
 800fee4:	080191a4 	.word	0x080191a4
 800fee8:	20011064 	.word	0x20011064
 800feec:	20011074 	.word	0x20011074
 800fef0:	08019620 	.word	0x08019620
 800fef4:	08019648 	.word	0x08019648

0800fef8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b082      	sub	sp, #8
 800fefc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800fefe:	4b2d      	ldr	r3, [pc, #180]	; (800ffb4 <tcp_fasttmr+0xbc>)
 800ff00:	781b      	ldrb	r3, [r3, #0]
 800ff02:	3301      	adds	r3, #1
 800ff04:	b2da      	uxtb	r2, r3
 800ff06:	4b2b      	ldr	r3, [pc, #172]	; (800ffb4 <tcp_fasttmr+0xbc>)
 800ff08:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ff0a:	4b2b      	ldr	r3, [pc, #172]	; (800ffb8 <tcp_fasttmr+0xc0>)
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ff10:	e048      	b.n	800ffa4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	7f9a      	ldrb	r2, [r3, #30]
 800ff16:	4b27      	ldr	r3, [pc, #156]	; (800ffb4 <tcp_fasttmr+0xbc>)
 800ff18:	781b      	ldrb	r3, [r3, #0]
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	d03f      	beq.n	800ff9e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ff1e:	4b25      	ldr	r3, [pc, #148]	; (800ffb4 <tcp_fasttmr+0xbc>)
 800ff20:	781a      	ldrb	r2, [r3, #0]
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	8b5b      	ldrh	r3, [r3, #26]
 800ff2a:	f003 0301 	and.w	r3, r3, #1
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d010      	beq.n	800ff54 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	8b5b      	ldrh	r3, [r3, #26]
 800ff36:	f043 0302 	orr.w	r3, r3, #2
 800ff3a:	b29a      	uxth	r2, r3
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f003 facf 	bl	80134e4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	8b5b      	ldrh	r3, [r3, #26]
 800ff4a:	f023 0303 	bic.w	r3, r3, #3
 800ff4e:	b29a      	uxth	r2, r3
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	8b5b      	ldrh	r3, [r3, #26]
 800ff58:	f003 0308 	and.w	r3, r3, #8
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d009      	beq.n	800ff74 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	8b5b      	ldrh	r3, [r3, #26]
 800ff64:	f023 0308 	bic.w	r3, r3, #8
 800ff68:	b29a      	uxth	r2, r3
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ff6e:	6878      	ldr	r0, [r7, #4]
 800ff70:	f7ff fa78 	bl	800f464 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	68db      	ldr	r3, [r3, #12]
 800ff78:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d00a      	beq.n	800ff98 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ff82:	4b0e      	ldr	r3, [pc, #56]	; (800ffbc <tcp_fasttmr+0xc4>)
 800ff84:	2200      	movs	r2, #0
 800ff86:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f000 f819 	bl	800ffc0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ff8e:	4b0b      	ldr	r3, [pc, #44]	; (800ffbc <tcp_fasttmr+0xc4>)
 800ff90:	781b      	ldrb	r3, [r3, #0]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d000      	beq.n	800ff98 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ff96:	e7b8      	b.n	800ff0a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	607b      	str	r3, [r7, #4]
 800ff9c:	e002      	b.n	800ffa4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	68db      	ldr	r3, [r3, #12]
 800ffa2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d1b3      	bne.n	800ff12 <tcp_fasttmr+0x1a>
    }
  }
}
 800ffaa:	bf00      	nop
 800ffac:	bf00      	nop
 800ffae:	3708      	adds	r7, #8
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bd80      	pop	{r7, pc}
 800ffb4:	2001107a 	.word	0x2001107a
 800ffb8:	20011070 	.word	0x20011070
 800ffbc:	20011078 	.word	0x20011078

0800ffc0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ffc0:	b590      	push	{r4, r7, lr}
 800ffc2:	b085      	sub	sp, #20
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d109      	bne.n	800ffe2 <tcp_process_refused_data+0x22>
 800ffce:	4b37      	ldr	r3, [pc, #220]	; (80100ac <tcp_process_refused_data+0xec>)
 800ffd0:	f240 6209 	movw	r2, #1545	; 0x609
 800ffd4:	4936      	ldr	r1, [pc, #216]	; (80100b0 <tcp_process_refused_data+0xf0>)
 800ffd6:	4837      	ldr	r0, [pc, #220]	; (80100b4 <tcp_process_refused_data+0xf4>)
 800ffd8:	f007 f930 	bl	801723c <iprintf>
 800ffdc:	f06f 030f 	mvn.w	r3, #15
 800ffe0:	e060      	b.n	80100a4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ffe6:	7b5b      	ldrb	r3, [r3, #13]
 800ffe8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ffee:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2200      	movs	r2, #0
 800fff4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d00b      	beq.n	8010018 <tcp_process_refused_data+0x58>
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6918      	ldr	r0, [r3, #16]
 801000a:	2300      	movs	r3, #0
 801000c:	68ba      	ldr	r2, [r7, #8]
 801000e:	6879      	ldr	r1, [r7, #4]
 8010010:	47a0      	blx	r4
 8010012:	4603      	mov	r3, r0
 8010014:	73fb      	strb	r3, [r7, #15]
 8010016:	e007      	b.n	8010028 <tcp_process_refused_data+0x68>
 8010018:	2300      	movs	r3, #0
 801001a:	68ba      	ldr	r2, [r7, #8]
 801001c:	6879      	ldr	r1, [r7, #4]
 801001e:	2000      	movs	r0, #0
 8010020:	f000 f8a4 	bl	801016c <tcp_recv_null>
 8010024:	4603      	mov	r3, r0
 8010026:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d12a      	bne.n	8010086 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010030:	7bbb      	ldrb	r3, [r7, #14]
 8010032:	f003 0320 	and.w	r3, r3, #32
 8010036:	2b00      	cmp	r3, #0
 8010038:	d033      	beq.n	80100a2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801003e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010042:	d005      	beq.n	8010050 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010048:	3301      	adds	r3, #1
 801004a:	b29a      	uxth	r2, r3
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010056:	2b00      	cmp	r3, #0
 8010058:	d00b      	beq.n	8010072 <tcp_process_refused_data+0xb2>
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	6918      	ldr	r0, [r3, #16]
 8010064:	2300      	movs	r3, #0
 8010066:	2200      	movs	r2, #0
 8010068:	6879      	ldr	r1, [r7, #4]
 801006a:	47a0      	blx	r4
 801006c:	4603      	mov	r3, r0
 801006e:	73fb      	strb	r3, [r7, #15]
 8010070:	e001      	b.n	8010076 <tcp_process_refused_data+0xb6>
 8010072:	2300      	movs	r3, #0
 8010074:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801007a:	f113 0f0d 	cmn.w	r3, #13
 801007e:	d110      	bne.n	80100a2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8010080:	f06f 030c 	mvn.w	r3, #12
 8010084:	e00e      	b.n	80100a4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8010086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801008a:	f113 0f0d 	cmn.w	r3, #13
 801008e:	d102      	bne.n	8010096 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010090:	f06f 030c 	mvn.w	r3, #12
 8010094:	e006      	b.n	80100a4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	68ba      	ldr	r2, [r7, #8]
 801009a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801009c:	f06f 0304 	mvn.w	r3, #4
 80100a0:	e000      	b.n	80100a4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80100a2:	2300      	movs	r3, #0
}
 80100a4:	4618      	mov	r0, r3
 80100a6:	3714      	adds	r7, #20
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bd90      	pop	{r4, r7, pc}
 80100ac:	08019160 	.word	0x08019160
 80100b0:	08019670 	.word	0x08019670
 80100b4:	080191a4 	.word	0x080191a4

080100b8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b084      	sub	sp, #16
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80100c0:	e007      	b.n	80100d2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80100c8:	6878      	ldr	r0, [r7, #4]
 80100ca:	f000 f80a 	bl	80100e2 <tcp_seg_free>
    seg = next;
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d1f4      	bne.n	80100c2 <tcp_segs_free+0xa>
  }
}
 80100d8:	bf00      	nop
 80100da:	bf00      	nop
 80100dc:	3710      	adds	r7, #16
 80100de:	46bd      	mov	sp, r7
 80100e0:	bd80      	pop	{r7, pc}

080100e2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80100e2:	b580      	push	{r7, lr}
 80100e4:	b082      	sub	sp, #8
 80100e6:	af00      	add	r7, sp, #0
 80100e8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d00c      	beq.n	801010a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	685b      	ldr	r3, [r3, #4]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d004      	beq.n	8010102 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	685b      	ldr	r3, [r3, #4]
 80100fc:	4618      	mov	r0, r3
 80100fe:	f7fe fd71 	bl	800ebe4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8010102:	6879      	ldr	r1, [r7, #4]
 8010104:	2003      	movs	r0, #3
 8010106:	f7fd fec9 	bl	800de9c <memp_free>
  }
}
 801010a:	bf00      	nop
 801010c:	3708      	adds	r7, #8
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}
	...

08010114 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b084      	sub	sp, #16
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d106      	bne.n	8010130 <tcp_seg_copy+0x1c>
 8010122:	4b0f      	ldr	r3, [pc, #60]	; (8010160 <tcp_seg_copy+0x4c>)
 8010124:	f240 6282 	movw	r2, #1666	; 0x682
 8010128:	490e      	ldr	r1, [pc, #56]	; (8010164 <tcp_seg_copy+0x50>)
 801012a:	480f      	ldr	r0, [pc, #60]	; (8010168 <tcp_seg_copy+0x54>)
 801012c:	f007 f886 	bl	801723c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010130:	2003      	movs	r0, #3
 8010132:	f7fd fe3d 	bl	800ddb0 <memp_malloc>
 8010136:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d101      	bne.n	8010142 <tcp_seg_copy+0x2e>
    return NULL;
 801013e:	2300      	movs	r3, #0
 8010140:	e00a      	b.n	8010158 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010142:	2210      	movs	r2, #16
 8010144:	6879      	ldr	r1, [r7, #4]
 8010146:	68f8      	ldr	r0, [r7, #12]
 8010148:	f007 f862 	bl	8017210 <memcpy>
  pbuf_ref(cseg->p);
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	685b      	ldr	r3, [r3, #4]
 8010150:	4618      	mov	r0, r3
 8010152:	f7fe fded 	bl	800ed30 <pbuf_ref>
  return cseg;
 8010156:	68fb      	ldr	r3, [r7, #12]
}
 8010158:	4618      	mov	r0, r3
 801015a:	3710      	adds	r7, #16
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}
 8010160:	08019160 	.word	0x08019160
 8010164:	080196b4 	.word	0x080196b4
 8010168:	080191a4 	.word	0x080191a4

0801016c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b084      	sub	sp, #16
 8010170:	af00      	add	r7, sp, #0
 8010172:	60f8      	str	r0, [r7, #12]
 8010174:	60b9      	str	r1, [r7, #8]
 8010176:	607a      	str	r2, [r7, #4]
 8010178:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d109      	bne.n	8010194 <tcp_recv_null+0x28>
 8010180:	4b12      	ldr	r3, [pc, #72]	; (80101cc <tcp_recv_null+0x60>)
 8010182:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010186:	4912      	ldr	r1, [pc, #72]	; (80101d0 <tcp_recv_null+0x64>)
 8010188:	4812      	ldr	r0, [pc, #72]	; (80101d4 <tcp_recv_null+0x68>)
 801018a:	f007 f857 	bl	801723c <iprintf>
 801018e:	f06f 030f 	mvn.w	r3, #15
 8010192:	e016      	b.n	80101c2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d009      	beq.n	80101ae <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	891b      	ldrh	r3, [r3, #8]
 801019e:	4619      	mov	r1, r3
 80101a0:	68b8      	ldr	r0, [r7, #8]
 80101a2:	f7ff fb19 	bl	800f7d8 <tcp_recved>
    pbuf_free(p);
 80101a6:	6878      	ldr	r0, [r7, #4]
 80101a8:	f7fe fd1c 	bl	800ebe4 <pbuf_free>
 80101ac:	e008      	b.n	80101c0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80101ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d104      	bne.n	80101c0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80101b6:	68b8      	ldr	r0, [r7, #8]
 80101b8:	f7ff f9be 	bl	800f538 <tcp_close>
 80101bc:	4603      	mov	r3, r0
 80101be:	e000      	b.n	80101c2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80101c0:	2300      	movs	r3, #0
}
 80101c2:	4618      	mov	r0, r3
 80101c4:	3710      	adds	r7, #16
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}
 80101ca:	bf00      	nop
 80101cc:	08019160 	.word	0x08019160
 80101d0:	080196d0 	.word	0x080196d0
 80101d4:	080191a4 	.word	0x080191a4

080101d8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b086      	sub	sp, #24
 80101dc:	af00      	add	r7, sp, #0
 80101de:	4603      	mov	r3, r0
 80101e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80101e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	db01      	blt.n	80101ee <tcp_kill_prio+0x16>
 80101ea:	79fb      	ldrb	r3, [r7, #7]
 80101ec:	e000      	b.n	80101f0 <tcp_kill_prio+0x18>
 80101ee:	237f      	movs	r3, #127	; 0x7f
 80101f0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80101f2:	7afb      	ldrb	r3, [r7, #11]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d034      	beq.n	8010262 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80101f8:	7afb      	ldrb	r3, [r7, #11]
 80101fa:	3b01      	subs	r3, #1
 80101fc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80101fe:	2300      	movs	r3, #0
 8010200:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010202:	2300      	movs	r3, #0
 8010204:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010206:	4b19      	ldr	r3, [pc, #100]	; (801026c <tcp_kill_prio+0x94>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	617b      	str	r3, [r7, #20]
 801020c:	e01f      	b.n	801024e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801020e:	697b      	ldr	r3, [r7, #20]
 8010210:	7d5b      	ldrb	r3, [r3, #21]
 8010212:	7afa      	ldrb	r2, [r7, #11]
 8010214:	429a      	cmp	r2, r3
 8010216:	d80c      	bhi.n	8010232 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010218:	697b      	ldr	r3, [r7, #20]
 801021a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801021c:	7afa      	ldrb	r2, [r7, #11]
 801021e:	429a      	cmp	r2, r3
 8010220:	d112      	bne.n	8010248 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010222:	4b13      	ldr	r3, [pc, #76]	; (8010270 <tcp_kill_prio+0x98>)
 8010224:	681a      	ldr	r2, [r3, #0]
 8010226:	697b      	ldr	r3, [r7, #20]
 8010228:	6a1b      	ldr	r3, [r3, #32]
 801022a:	1ad3      	subs	r3, r2, r3
 801022c:	68fa      	ldr	r2, [r7, #12]
 801022e:	429a      	cmp	r2, r3
 8010230:	d80a      	bhi.n	8010248 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010232:	4b0f      	ldr	r3, [pc, #60]	; (8010270 <tcp_kill_prio+0x98>)
 8010234:	681a      	ldr	r2, [r3, #0]
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	6a1b      	ldr	r3, [r3, #32]
 801023a:	1ad3      	subs	r3, r2, r3
 801023c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801023e:	697b      	ldr	r3, [r7, #20]
 8010240:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010242:	697b      	ldr	r3, [r7, #20]
 8010244:	7d5b      	ldrb	r3, [r3, #21]
 8010246:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010248:	697b      	ldr	r3, [r7, #20]
 801024a:	68db      	ldr	r3, [r3, #12]
 801024c:	617b      	str	r3, [r7, #20]
 801024e:	697b      	ldr	r3, [r7, #20]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d1dc      	bne.n	801020e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010254:	693b      	ldr	r3, [r7, #16]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d004      	beq.n	8010264 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801025a:	6938      	ldr	r0, [r7, #16]
 801025c:	f7ff fa56 	bl	800f70c <tcp_abort>
 8010260:	e000      	b.n	8010264 <tcp_kill_prio+0x8c>
    return;
 8010262:	bf00      	nop
  }
}
 8010264:	3718      	adds	r7, #24
 8010266:	46bd      	mov	sp, r7
 8010268:	bd80      	pop	{r7, pc}
 801026a:	bf00      	nop
 801026c:	20011070 	.word	0x20011070
 8010270:	20011064 	.word	0x20011064

08010274 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b086      	sub	sp, #24
 8010278:	af00      	add	r7, sp, #0
 801027a:	4603      	mov	r3, r0
 801027c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801027e:	79fb      	ldrb	r3, [r7, #7]
 8010280:	2b08      	cmp	r3, #8
 8010282:	d009      	beq.n	8010298 <tcp_kill_state+0x24>
 8010284:	79fb      	ldrb	r3, [r7, #7]
 8010286:	2b09      	cmp	r3, #9
 8010288:	d006      	beq.n	8010298 <tcp_kill_state+0x24>
 801028a:	4b1a      	ldr	r3, [pc, #104]	; (80102f4 <tcp_kill_state+0x80>)
 801028c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010290:	4919      	ldr	r1, [pc, #100]	; (80102f8 <tcp_kill_state+0x84>)
 8010292:	481a      	ldr	r0, [pc, #104]	; (80102fc <tcp_kill_state+0x88>)
 8010294:	f006 ffd2 	bl	801723c <iprintf>

  inactivity = 0;
 8010298:	2300      	movs	r3, #0
 801029a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801029c:	2300      	movs	r3, #0
 801029e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80102a0:	4b17      	ldr	r3, [pc, #92]	; (8010300 <tcp_kill_state+0x8c>)
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	617b      	str	r3, [r7, #20]
 80102a6:	e017      	b.n	80102d8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80102a8:	697b      	ldr	r3, [r7, #20]
 80102aa:	7d1b      	ldrb	r3, [r3, #20]
 80102ac:	79fa      	ldrb	r2, [r7, #7]
 80102ae:	429a      	cmp	r2, r3
 80102b0:	d10f      	bne.n	80102d2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80102b2:	4b14      	ldr	r3, [pc, #80]	; (8010304 <tcp_kill_state+0x90>)
 80102b4:	681a      	ldr	r2, [r3, #0]
 80102b6:	697b      	ldr	r3, [r7, #20]
 80102b8:	6a1b      	ldr	r3, [r3, #32]
 80102ba:	1ad3      	subs	r3, r2, r3
 80102bc:	68fa      	ldr	r2, [r7, #12]
 80102be:	429a      	cmp	r2, r3
 80102c0:	d807      	bhi.n	80102d2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80102c2:	4b10      	ldr	r3, [pc, #64]	; (8010304 <tcp_kill_state+0x90>)
 80102c4:	681a      	ldr	r2, [r3, #0]
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	6a1b      	ldr	r3, [r3, #32]
 80102ca:	1ad3      	subs	r3, r2, r3
 80102cc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80102ce:	697b      	ldr	r3, [r7, #20]
 80102d0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	68db      	ldr	r3, [r3, #12]
 80102d6:	617b      	str	r3, [r7, #20]
 80102d8:	697b      	ldr	r3, [r7, #20]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d1e4      	bne.n	80102a8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80102de:	693b      	ldr	r3, [r7, #16]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d003      	beq.n	80102ec <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80102e4:	2100      	movs	r1, #0
 80102e6:	6938      	ldr	r0, [r7, #16]
 80102e8:	f7ff f952 	bl	800f590 <tcp_abandon>
  }
}
 80102ec:	bf00      	nop
 80102ee:	3718      	adds	r7, #24
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}
 80102f4:	08019160 	.word	0x08019160
 80102f8:	080196ec 	.word	0x080196ec
 80102fc:	080191a4 	.word	0x080191a4
 8010300:	20011070 	.word	0x20011070
 8010304:	20011064 	.word	0x20011064

08010308 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b084      	sub	sp, #16
 801030c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801030e:	2300      	movs	r3, #0
 8010310:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010312:	2300      	movs	r3, #0
 8010314:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010316:	4b12      	ldr	r3, [pc, #72]	; (8010360 <tcp_kill_timewait+0x58>)
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	60fb      	str	r3, [r7, #12]
 801031c:	e012      	b.n	8010344 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801031e:	4b11      	ldr	r3, [pc, #68]	; (8010364 <tcp_kill_timewait+0x5c>)
 8010320:	681a      	ldr	r2, [r3, #0]
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	6a1b      	ldr	r3, [r3, #32]
 8010326:	1ad3      	subs	r3, r2, r3
 8010328:	687a      	ldr	r2, [r7, #4]
 801032a:	429a      	cmp	r2, r3
 801032c:	d807      	bhi.n	801033e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801032e:	4b0d      	ldr	r3, [pc, #52]	; (8010364 <tcp_kill_timewait+0x5c>)
 8010330:	681a      	ldr	r2, [r3, #0]
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	6a1b      	ldr	r3, [r3, #32]
 8010336:	1ad3      	subs	r3, r2, r3
 8010338:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	68db      	ldr	r3, [r3, #12]
 8010342:	60fb      	str	r3, [r7, #12]
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d1e9      	bne.n	801031e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801034a:	68bb      	ldr	r3, [r7, #8]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d002      	beq.n	8010356 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010350:	68b8      	ldr	r0, [r7, #8]
 8010352:	f7ff f9db 	bl	800f70c <tcp_abort>
  }
}
 8010356:	bf00      	nop
 8010358:	3710      	adds	r7, #16
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}
 801035e:	bf00      	nop
 8010360:	20011074 	.word	0x20011074
 8010364:	20011064 	.word	0x20011064

08010368 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b082      	sub	sp, #8
 801036c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801036e:	4b10      	ldr	r3, [pc, #64]	; (80103b0 <tcp_handle_closepend+0x48>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010374:	e014      	b.n	80103a0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	68db      	ldr	r3, [r3, #12]
 801037a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	8b5b      	ldrh	r3, [r3, #26]
 8010380:	f003 0308 	and.w	r3, r3, #8
 8010384:	2b00      	cmp	r3, #0
 8010386:	d009      	beq.n	801039c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	8b5b      	ldrh	r3, [r3, #26]
 801038c:	f023 0308 	bic.w	r3, r3, #8
 8010390:	b29a      	uxth	r2, r3
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f7ff f864 	bl	800f464 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d1e7      	bne.n	8010376 <tcp_handle_closepend+0xe>
  }
}
 80103a6:	bf00      	nop
 80103a8:	bf00      	nop
 80103aa:	3708      	adds	r7, #8
 80103ac:	46bd      	mov	sp, r7
 80103ae:	bd80      	pop	{r7, pc}
 80103b0:	20011070 	.word	0x20011070

080103b4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b084      	sub	sp, #16
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	4603      	mov	r3, r0
 80103bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80103be:	2001      	movs	r0, #1
 80103c0:	f7fd fcf6 	bl	800ddb0 <memp_malloc>
 80103c4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d126      	bne.n	801041a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80103cc:	f7ff ffcc 	bl	8010368 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80103d0:	f7ff ff9a 	bl	8010308 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80103d4:	2001      	movs	r0, #1
 80103d6:	f7fd fceb 	bl	800ddb0 <memp_malloc>
 80103da:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d11b      	bne.n	801041a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80103e2:	2009      	movs	r0, #9
 80103e4:	f7ff ff46 	bl	8010274 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80103e8:	2001      	movs	r0, #1
 80103ea:	f7fd fce1 	bl	800ddb0 <memp_malloc>
 80103ee:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d111      	bne.n	801041a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80103f6:	2008      	movs	r0, #8
 80103f8:	f7ff ff3c 	bl	8010274 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80103fc:	2001      	movs	r0, #1
 80103fe:	f7fd fcd7 	bl	800ddb0 <memp_malloc>
 8010402:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d107      	bne.n	801041a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801040a:	79fb      	ldrb	r3, [r7, #7]
 801040c:	4618      	mov	r0, r3
 801040e:	f7ff fee3 	bl	80101d8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010412:	2001      	movs	r0, #1
 8010414:	f7fd fccc 	bl	800ddb0 <memp_malloc>
 8010418:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d03f      	beq.n	80104a0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010420:	229c      	movs	r2, #156	; 0x9c
 8010422:	2100      	movs	r1, #0
 8010424:	68f8      	ldr	r0, [r7, #12]
 8010426:	f006 ff01 	bl	801722c <memset>
    pcb->prio = prio;
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	79fa      	ldrb	r2, [r7, #7]
 801042e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010436:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010440:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	22ff      	movs	r2, #255	; 0xff
 801044e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010456:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	2206      	movs	r2, #6
 801045c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	2206      	movs	r2, #6
 8010464:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801046c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	2201      	movs	r2, #1
 8010472:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010476:	4b0d      	ldr	r3, [pc, #52]	; (80104ac <tcp_alloc+0xf8>)
 8010478:	681a      	ldr	r2, [r3, #0]
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801047e:	4b0c      	ldr	r3, [pc, #48]	; (80104b0 <tcp_alloc+0xfc>)
 8010480:	781a      	ldrb	r2, [r3, #0]
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801048c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	4a08      	ldr	r2, [pc, #32]	; (80104b4 <tcp_alloc+0x100>)
 8010494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	4a07      	ldr	r2, [pc, #28]	; (80104b8 <tcp_alloc+0x104>)
 801049c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80104a0:	68fb      	ldr	r3, [r7, #12]
}
 80104a2:	4618      	mov	r0, r3
 80104a4:	3710      	adds	r7, #16
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}
 80104aa:	bf00      	nop
 80104ac:	20011064 	.word	0x20011064
 80104b0:	2001107a 	.word	0x2001107a
 80104b4:	0801016d 	.word	0x0801016d
 80104b8:	006ddd00 	.word	0x006ddd00

080104bc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b082      	sub	sp, #8
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d107      	bne.n	80104da <tcp_pcb_purge+0x1e>
 80104ca:	4b21      	ldr	r3, [pc, #132]	; (8010550 <tcp_pcb_purge+0x94>)
 80104cc:	f640 0251 	movw	r2, #2129	; 0x851
 80104d0:	4920      	ldr	r1, [pc, #128]	; (8010554 <tcp_pcb_purge+0x98>)
 80104d2:	4821      	ldr	r0, [pc, #132]	; (8010558 <tcp_pcb_purge+0x9c>)
 80104d4:	f006 feb2 	bl	801723c <iprintf>
 80104d8:	e037      	b.n	801054a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	7d1b      	ldrb	r3, [r3, #20]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d033      	beq.n	801054a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80104e6:	2b0a      	cmp	r3, #10
 80104e8:	d02f      	beq.n	801054a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80104ee:	2b01      	cmp	r3, #1
 80104f0:	d02b      	beq.n	801054a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d007      	beq.n	801050a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80104fe:	4618      	mov	r0, r3
 8010500:	f7fe fb70 	bl	800ebe4 <pbuf_free>
      pcb->refused_data = NULL;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2200      	movs	r2, #0
 8010508:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801050e:	2b00      	cmp	r3, #0
 8010510:	d002      	beq.n	8010518 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010512:	6878      	ldr	r0, [r7, #4]
 8010514:	f000 f986 	bl	8010824 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801051e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010524:	4618      	mov	r0, r3
 8010526:	f7ff fdc7 	bl	80100b8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801052e:	4618      	mov	r0, r3
 8010530:	f7ff fdc2 	bl	80100b8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2200      	movs	r2, #0
 8010538:	66da      	str	r2, [r3, #108]	; 0x6c
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2200      	movs	r2, #0
 8010546:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801054a:	3708      	adds	r7, #8
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}
 8010550:	08019160 	.word	0x08019160
 8010554:	080197ac 	.word	0x080197ac
 8010558:	080191a4 	.word	0x080191a4

0801055c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b084      	sub	sp, #16
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
 8010564:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d106      	bne.n	801057a <tcp_pcb_remove+0x1e>
 801056c:	4b3e      	ldr	r3, [pc, #248]	; (8010668 <tcp_pcb_remove+0x10c>)
 801056e:	f640 0283 	movw	r2, #2179	; 0x883
 8010572:	493e      	ldr	r1, [pc, #248]	; (801066c <tcp_pcb_remove+0x110>)
 8010574:	483e      	ldr	r0, [pc, #248]	; (8010670 <tcp_pcb_remove+0x114>)
 8010576:	f006 fe61 	bl	801723c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d106      	bne.n	801058e <tcp_pcb_remove+0x32>
 8010580:	4b39      	ldr	r3, [pc, #228]	; (8010668 <tcp_pcb_remove+0x10c>)
 8010582:	f640 0284 	movw	r2, #2180	; 0x884
 8010586:	493b      	ldr	r1, [pc, #236]	; (8010674 <tcp_pcb_remove+0x118>)
 8010588:	4839      	ldr	r0, [pc, #228]	; (8010670 <tcp_pcb_remove+0x114>)
 801058a:	f006 fe57 	bl	801723c <iprintf>

  TCP_RMV(pcblist, pcb);
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	683a      	ldr	r2, [r7, #0]
 8010594:	429a      	cmp	r2, r3
 8010596:	d105      	bne.n	80105a4 <tcp_pcb_remove+0x48>
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	68da      	ldr	r2, [r3, #12]
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	601a      	str	r2, [r3, #0]
 80105a2:	e013      	b.n	80105cc <tcp_pcb_remove+0x70>
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	60fb      	str	r3, [r7, #12]
 80105aa:	e00c      	b.n	80105c6 <tcp_pcb_remove+0x6a>
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	68db      	ldr	r3, [r3, #12]
 80105b0:	683a      	ldr	r2, [r7, #0]
 80105b2:	429a      	cmp	r2, r3
 80105b4:	d104      	bne.n	80105c0 <tcp_pcb_remove+0x64>
 80105b6:	683b      	ldr	r3, [r7, #0]
 80105b8:	68da      	ldr	r2, [r3, #12]
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	60da      	str	r2, [r3, #12]
 80105be:	e005      	b.n	80105cc <tcp_pcb_remove+0x70>
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	68db      	ldr	r3, [r3, #12]
 80105c4:	60fb      	str	r3, [r7, #12]
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d1ef      	bne.n	80105ac <tcp_pcb_remove+0x50>
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	2200      	movs	r2, #0
 80105d0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80105d2:	6838      	ldr	r0, [r7, #0]
 80105d4:	f7ff ff72 	bl	80104bc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	7d1b      	ldrb	r3, [r3, #20]
 80105dc:	2b0a      	cmp	r3, #10
 80105de:	d013      	beq.n	8010608 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80105e4:	2b01      	cmp	r3, #1
 80105e6:	d00f      	beq.n	8010608 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	8b5b      	ldrh	r3, [r3, #26]
 80105ec:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d009      	beq.n	8010608 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	8b5b      	ldrh	r3, [r3, #26]
 80105f8:	f043 0302 	orr.w	r3, r3, #2
 80105fc:	b29a      	uxth	r2, r3
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010602:	6838      	ldr	r0, [r7, #0]
 8010604:	f002 ff6e 	bl	80134e4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010608:	683b      	ldr	r3, [r7, #0]
 801060a:	7d1b      	ldrb	r3, [r3, #20]
 801060c:	2b01      	cmp	r3, #1
 801060e:	d020      	beq.n	8010652 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010614:	2b00      	cmp	r3, #0
 8010616:	d006      	beq.n	8010626 <tcp_pcb_remove+0xca>
 8010618:	4b13      	ldr	r3, [pc, #76]	; (8010668 <tcp_pcb_remove+0x10c>)
 801061a:	f640 0293 	movw	r2, #2195	; 0x893
 801061e:	4916      	ldr	r1, [pc, #88]	; (8010678 <tcp_pcb_remove+0x11c>)
 8010620:	4813      	ldr	r0, [pc, #76]	; (8010670 <tcp_pcb_remove+0x114>)
 8010622:	f006 fe0b 	bl	801723c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801062a:	2b00      	cmp	r3, #0
 801062c:	d006      	beq.n	801063c <tcp_pcb_remove+0xe0>
 801062e:	4b0e      	ldr	r3, [pc, #56]	; (8010668 <tcp_pcb_remove+0x10c>)
 8010630:	f640 0294 	movw	r2, #2196	; 0x894
 8010634:	4911      	ldr	r1, [pc, #68]	; (801067c <tcp_pcb_remove+0x120>)
 8010636:	480e      	ldr	r0, [pc, #56]	; (8010670 <tcp_pcb_remove+0x114>)
 8010638:	f006 fe00 	bl	801723c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010640:	2b00      	cmp	r3, #0
 8010642:	d006      	beq.n	8010652 <tcp_pcb_remove+0xf6>
 8010644:	4b08      	ldr	r3, [pc, #32]	; (8010668 <tcp_pcb_remove+0x10c>)
 8010646:	f640 0296 	movw	r2, #2198	; 0x896
 801064a:	490d      	ldr	r1, [pc, #52]	; (8010680 <tcp_pcb_remove+0x124>)
 801064c:	4808      	ldr	r0, [pc, #32]	; (8010670 <tcp_pcb_remove+0x114>)
 801064e:	f006 fdf5 	bl	801723c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	2200      	movs	r2, #0
 8010656:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010658:	683b      	ldr	r3, [r7, #0]
 801065a:	2200      	movs	r2, #0
 801065c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801065e:	bf00      	nop
 8010660:	3710      	adds	r7, #16
 8010662:	46bd      	mov	sp, r7
 8010664:	bd80      	pop	{r7, pc}
 8010666:	bf00      	nop
 8010668:	08019160 	.word	0x08019160
 801066c:	080197c8 	.word	0x080197c8
 8010670:	080191a4 	.word	0x080191a4
 8010674:	080197e4 	.word	0x080197e4
 8010678:	08019804 	.word	0x08019804
 801067c:	0801981c 	.word	0x0801981c
 8010680:	08019838 	.word	0x08019838

08010684 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b082      	sub	sp, #8
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d106      	bne.n	80106a0 <tcp_next_iss+0x1c>
 8010692:	4b0a      	ldr	r3, [pc, #40]	; (80106bc <tcp_next_iss+0x38>)
 8010694:	f640 02af 	movw	r2, #2223	; 0x8af
 8010698:	4909      	ldr	r1, [pc, #36]	; (80106c0 <tcp_next_iss+0x3c>)
 801069a:	480a      	ldr	r0, [pc, #40]	; (80106c4 <tcp_next_iss+0x40>)
 801069c:	f006 fdce 	bl	801723c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80106a0:	4b09      	ldr	r3, [pc, #36]	; (80106c8 <tcp_next_iss+0x44>)
 80106a2:	681a      	ldr	r2, [r3, #0]
 80106a4:	4b09      	ldr	r3, [pc, #36]	; (80106cc <tcp_next_iss+0x48>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	4413      	add	r3, r2
 80106aa:	4a07      	ldr	r2, [pc, #28]	; (80106c8 <tcp_next_iss+0x44>)
 80106ac:	6013      	str	r3, [r2, #0]
  return iss;
 80106ae:	4b06      	ldr	r3, [pc, #24]	; (80106c8 <tcp_next_iss+0x44>)
 80106b0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	3708      	adds	r7, #8
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}
 80106ba:	bf00      	nop
 80106bc:	08019160 	.word	0x08019160
 80106c0:	08019850 	.word	0x08019850
 80106c4:	080191a4 	.word	0x080191a4
 80106c8:	20000028 	.word	0x20000028
 80106cc:	20011064 	.word	0x20011064

080106d0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b086      	sub	sp, #24
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	4603      	mov	r3, r0
 80106d8:	60b9      	str	r1, [r7, #8]
 80106da:	607a      	str	r2, [r7, #4]
 80106dc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d106      	bne.n	80106f2 <tcp_eff_send_mss_netif+0x22>
 80106e4:	4b14      	ldr	r3, [pc, #80]	; (8010738 <tcp_eff_send_mss_netif+0x68>)
 80106e6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80106ea:	4914      	ldr	r1, [pc, #80]	; (801073c <tcp_eff_send_mss_netif+0x6c>)
 80106ec:	4814      	ldr	r0, [pc, #80]	; (8010740 <tcp_eff_send_mss_netif+0x70>)
 80106ee:	f006 fda5 	bl	801723c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80106f2:	68bb      	ldr	r3, [r7, #8]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d101      	bne.n	80106fc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80106f8:	89fb      	ldrh	r3, [r7, #14]
 80106fa:	e019      	b.n	8010730 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80106fc:	68bb      	ldr	r3, [r7, #8]
 80106fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010700:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010702:	8afb      	ldrh	r3, [r7, #22]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d012      	beq.n	801072e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010708:	2328      	movs	r3, #40	; 0x28
 801070a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801070c:	8afa      	ldrh	r2, [r7, #22]
 801070e:	8abb      	ldrh	r3, [r7, #20]
 8010710:	429a      	cmp	r2, r3
 8010712:	d904      	bls.n	801071e <tcp_eff_send_mss_netif+0x4e>
 8010714:	8afa      	ldrh	r2, [r7, #22]
 8010716:	8abb      	ldrh	r3, [r7, #20]
 8010718:	1ad3      	subs	r3, r2, r3
 801071a:	b29b      	uxth	r3, r3
 801071c:	e000      	b.n	8010720 <tcp_eff_send_mss_netif+0x50>
 801071e:	2300      	movs	r3, #0
 8010720:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010722:	8a7a      	ldrh	r2, [r7, #18]
 8010724:	89fb      	ldrh	r3, [r7, #14]
 8010726:	4293      	cmp	r3, r2
 8010728:	bf28      	it	cs
 801072a:	4613      	movcs	r3, r2
 801072c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801072e:	89fb      	ldrh	r3, [r7, #14]
}
 8010730:	4618      	mov	r0, r3
 8010732:	3718      	adds	r7, #24
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}
 8010738:	08019160 	.word	0x08019160
 801073c:	0801986c 	.word	0x0801986c
 8010740:	080191a4 	.word	0x080191a4

08010744 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b084      	sub	sp, #16
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
 801074c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d119      	bne.n	801078c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010758:	4b10      	ldr	r3, [pc, #64]	; (801079c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801075a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801075e:	4910      	ldr	r1, [pc, #64]	; (80107a0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010760:	4810      	ldr	r0, [pc, #64]	; (80107a4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8010762:	f006 fd6b 	bl	801723c <iprintf>

  while (pcb != NULL) {
 8010766:	e011      	b.n	801078c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	681a      	ldr	r2, [r3, #0]
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	429a      	cmp	r2, r3
 8010772:	d108      	bne.n	8010786 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	68db      	ldr	r3, [r3, #12]
 8010778:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801077a:	68f8      	ldr	r0, [r7, #12]
 801077c:	f7fe ffc6 	bl	800f70c <tcp_abort>
      pcb = next;
 8010780:	68bb      	ldr	r3, [r7, #8]
 8010782:	60fb      	str	r3, [r7, #12]
 8010784:	e002      	b.n	801078c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	68db      	ldr	r3, [r3, #12]
 801078a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d1ea      	bne.n	8010768 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010792:	bf00      	nop
 8010794:	bf00      	nop
 8010796:	3710      	adds	r7, #16
 8010798:	46bd      	mov	sp, r7
 801079a:	bd80      	pop	{r7, pc}
 801079c:	08019160 	.word	0x08019160
 80107a0:	08019894 	.word	0x08019894
 80107a4:	080191a4 	.word	0x080191a4

080107a8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b084      	sub	sp, #16
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
 80107b0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d02a      	beq.n	801080e <tcp_netif_ip_addr_changed+0x66>
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d026      	beq.n	801080e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80107c0:	4b15      	ldr	r3, [pc, #84]	; (8010818 <tcp_netif_ip_addr_changed+0x70>)
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	4619      	mov	r1, r3
 80107c6:	6878      	ldr	r0, [r7, #4]
 80107c8:	f7ff ffbc 	bl	8010744 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80107cc:	4b13      	ldr	r3, [pc, #76]	; (801081c <tcp_netif_ip_addr_changed+0x74>)
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	4619      	mov	r1, r3
 80107d2:	6878      	ldr	r0, [r7, #4]
 80107d4:	f7ff ffb6 	bl	8010744 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80107d8:	683b      	ldr	r3, [r7, #0]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d017      	beq.n	801080e <tcp_netif_ip_addr_changed+0x66>
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d013      	beq.n	801080e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80107e6:	4b0e      	ldr	r3, [pc, #56]	; (8010820 <tcp_netif_ip_addr_changed+0x78>)
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	60fb      	str	r3, [r7, #12]
 80107ec:	e00c      	b.n	8010808 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	681a      	ldr	r2, [r3, #0]
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	429a      	cmp	r2, r3
 80107f8:	d103      	bne.n	8010802 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	681a      	ldr	r2, [r3, #0]
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	68db      	ldr	r3, [r3, #12]
 8010806:	60fb      	str	r3, [r7, #12]
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d1ef      	bne.n	80107ee <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801080e:	bf00      	nop
 8010810:	3710      	adds	r7, #16
 8010812:	46bd      	mov	sp, r7
 8010814:	bd80      	pop	{r7, pc}
 8010816:	bf00      	nop
 8010818:	20011070 	.word	0x20011070
 801081c:	20011068 	.word	0x20011068
 8010820:	2001106c 	.word	0x2001106c

08010824 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b082      	sub	sp, #8
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010830:	2b00      	cmp	r3, #0
 8010832:	d007      	beq.n	8010844 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010838:	4618      	mov	r0, r3
 801083a:	f7ff fc3d 	bl	80100b8 <tcp_segs_free>
    pcb->ooseq = NULL;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2200      	movs	r2, #0
 8010842:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010844:	bf00      	nop
 8010846:	3708      	adds	r7, #8
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}

0801084c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801084c:	b590      	push	{r4, r7, lr}
 801084e:	b08d      	sub	sp, #52	; 0x34
 8010850:	af04      	add	r7, sp, #16
 8010852:	6078      	str	r0, [r7, #4]
 8010854:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d105      	bne.n	8010868 <tcp_input+0x1c>
 801085c:	4b9b      	ldr	r3, [pc, #620]	; (8010acc <tcp_input+0x280>)
 801085e:	2283      	movs	r2, #131	; 0x83
 8010860:	499b      	ldr	r1, [pc, #620]	; (8010ad0 <tcp_input+0x284>)
 8010862:	489c      	ldr	r0, [pc, #624]	; (8010ad4 <tcp_input+0x288>)
 8010864:	f006 fcea 	bl	801723c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	685b      	ldr	r3, [r3, #4]
 801086c:	4a9a      	ldr	r2, [pc, #616]	; (8010ad8 <tcp_input+0x28c>)
 801086e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	895b      	ldrh	r3, [r3, #10]
 8010874:	2b13      	cmp	r3, #19
 8010876:	f240 83d1 	bls.w	801101c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801087a:	4b98      	ldr	r3, [pc, #608]	; (8010adc <tcp_input+0x290>)
 801087c:	695b      	ldr	r3, [r3, #20]
 801087e:	4a97      	ldr	r2, [pc, #604]	; (8010adc <tcp_input+0x290>)
 8010880:	6812      	ldr	r2, [r2, #0]
 8010882:	4611      	mov	r1, r2
 8010884:	4618      	mov	r0, r3
 8010886:	f005 fc47 	bl	8016118 <ip4_addr_isbroadcast_u32>
 801088a:	4603      	mov	r3, r0
 801088c:	2b00      	cmp	r3, #0
 801088e:	f040 83c7 	bne.w	8011020 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010892:	4b92      	ldr	r3, [pc, #584]	; (8010adc <tcp_input+0x290>)
 8010894:	695b      	ldr	r3, [r3, #20]
 8010896:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801089a:	2be0      	cmp	r3, #224	; 0xe0
 801089c:	f000 83c0 	beq.w	8011020 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80108a0:	4b8d      	ldr	r3, [pc, #564]	; (8010ad8 <tcp_input+0x28c>)
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	899b      	ldrh	r3, [r3, #12]
 80108a6:	b29b      	uxth	r3, r3
 80108a8:	4618      	mov	r0, r3
 80108aa:	f7fc fda9 	bl	800d400 <lwip_htons>
 80108ae:	4603      	mov	r3, r0
 80108b0:	0b1b      	lsrs	r3, r3, #12
 80108b2:	b29b      	uxth	r3, r3
 80108b4:	b2db      	uxtb	r3, r3
 80108b6:	009b      	lsls	r3, r3, #2
 80108b8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80108ba:	7cbb      	ldrb	r3, [r7, #18]
 80108bc:	2b13      	cmp	r3, #19
 80108be:	f240 83b1 	bls.w	8011024 <tcp_input+0x7d8>
 80108c2:	7cbb      	ldrb	r3, [r7, #18]
 80108c4:	b29a      	uxth	r2, r3
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	891b      	ldrh	r3, [r3, #8]
 80108ca:	429a      	cmp	r2, r3
 80108cc:	f200 83aa 	bhi.w	8011024 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80108d0:	7cbb      	ldrb	r3, [r7, #18]
 80108d2:	b29b      	uxth	r3, r3
 80108d4:	3b14      	subs	r3, #20
 80108d6:	b29a      	uxth	r2, r3
 80108d8:	4b81      	ldr	r3, [pc, #516]	; (8010ae0 <tcp_input+0x294>)
 80108da:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80108dc:	4b81      	ldr	r3, [pc, #516]	; (8010ae4 <tcp_input+0x298>)
 80108de:	2200      	movs	r2, #0
 80108e0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	895a      	ldrh	r2, [r3, #10]
 80108e6:	7cbb      	ldrb	r3, [r7, #18]
 80108e8:	b29b      	uxth	r3, r3
 80108ea:	429a      	cmp	r2, r3
 80108ec:	d309      	bcc.n	8010902 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80108ee:	4b7c      	ldr	r3, [pc, #496]	; (8010ae0 <tcp_input+0x294>)
 80108f0:	881a      	ldrh	r2, [r3, #0]
 80108f2:	4b7d      	ldr	r3, [pc, #500]	; (8010ae8 <tcp_input+0x29c>)
 80108f4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80108f6:	7cbb      	ldrb	r3, [r7, #18]
 80108f8:	4619      	mov	r1, r3
 80108fa:	6878      	ldr	r0, [r7, #4]
 80108fc:	f7fe f8ec 	bl	800ead8 <pbuf_remove_header>
 8010900:	e04e      	b.n	80109a0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d105      	bne.n	8010916 <tcp_input+0xca>
 801090a:	4b70      	ldr	r3, [pc, #448]	; (8010acc <tcp_input+0x280>)
 801090c:	22c2      	movs	r2, #194	; 0xc2
 801090e:	4977      	ldr	r1, [pc, #476]	; (8010aec <tcp_input+0x2a0>)
 8010910:	4870      	ldr	r0, [pc, #448]	; (8010ad4 <tcp_input+0x288>)
 8010912:	f006 fc93 	bl	801723c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010916:	2114      	movs	r1, #20
 8010918:	6878      	ldr	r0, [r7, #4]
 801091a:	f7fe f8dd 	bl	800ead8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	895a      	ldrh	r2, [r3, #10]
 8010922:	4b71      	ldr	r3, [pc, #452]	; (8010ae8 <tcp_input+0x29c>)
 8010924:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010926:	4b6e      	ldr	r3, [pc, #440]	; (8010ae0 <tcp_input+0x294>)
 8010928:	881a      	ldrh	r2, [r3, #0]
 801092a:	4b6f      	ldr	r3, [pc, #444]	; (8010ae8 <tcp_input+0x29c>)
 801092c:	881b      	ldrh	r3, [r3, #0]
 801092e:	1ad3      	subs	r3, r2, r3
 8010930:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010932:	4b6d      	ldr	r3, [pc, #436]	; (8010ae8 <tcp_input+0x29c>)
 8010934:	881b      	ldrh	r3, [r3, #0]
 8010936:	4619      	mov	r1, r3
 8010938:	6878      	ldr	r0, [r7, #4]
 801093a:	f7fe f8cd 	bl	800ead8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	895b      	ldrh	r3, [r3, #10]
 8010944:	8a3a      	ldrh	r2, [r7, #16]
 8010946:	429a      	cmp	r2, r3
 8010948:	f200 836e 	bhi.w	8011028 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	685b      	ldr	r3, [r3, #4]
 8010952:	4a64      	ldr	r2, [pc, #400]	; (8010ae4 <tcp_input+0x298>)
 8010954:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	8a3a      	ldrh	r2, [r7, #16]
 801095c:	4611      	mov	r1, r2
 801095e:	4618      	mov	r0, r3
 8010960:	f7fe f8ba 	bl	800ead8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	891a      	ldrh	r2, [r3, #8]
 8010968:	8a3b      	ldrh	r3, [r7, #16]
 801096a:	1ad3      	subs	r3, r2, r3
 801096c:	b29a      	uxth	r2, r3
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	895b      	ldrh	r3, [r3, #10]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d005      	beq.n	8010986 <tcp_input+0x13a>
 801097a:	4b54      	ldr	r3, [pc, #336]	; (8010acc <tcp_input+0x280>)
 801097c:	22df      	movs	r2, #223	; 0xdf
 801097e:	495c      	ldr	r1, [pc, #368]	; (8010af0 <tcp_input+0x2a4>)
 8010980:	4854      	ldr	r0, [pc, #336]	; (8010ad4 <tcp_input+0x288>)
 8010982:	f006 fc5b 	bl	801723c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	891a      	ldrh	r2, [r3, #8]
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	891b      	ldrh	r3, [r3, #8]
 8010990:	429a      	cmp	r2, r3
 8010992:	d005      	beq.n	80109a0 <tcp_input+0x154>
 8010994:	4b4d      	ldr	r3, [pc, #308]	; (8010acc <tcp_input+0x280>)
 8010996:	22e0      	movs	r2, #224	; 0xe0
 8010998:	4956      	ldr	r1, [pc, #344]	; (8010af4 <tcp_input+0x2a8>)
 801099a:	484e      	ldr	r0, [pc, #312]	; (8010ad4 <tcp_input+0x288>)
 801099c:	f006 fc4e 	bl	801723c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80109a0:	4b4d      	ldr	r3, [pc, #308]	; (8010ad8 <tcp_input+0x28c>)
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	881b      	ldrh	r3, [r3, #0]
 80109a6:	b29b      	uxth	r3, r3
 80109a8:	4a4b      	ldr	r2, [pc, #300]	; (8010ad8 <tcp_input+0x28c>)
 80109aa:	6814      	ldr	r4, [r2, #0]
 80109ac:	4618      	mov	r0, r3
 80109ae:	f7fc fd27 	bl	800d400 <lwip_htons>
 80109b2:	4603      	mov	r3, r0
 80109b4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80109b6:	4b48      	ldr	r3, [pc, #288]	; (8010ad8 <tcp_input+0x28c>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	885b      	ldrh	r3, [r3, #2]
 80109bc:	b29b      	uxth	r3, r3
 80109be:	4a46      	ldr	r2, [pc, #280]	; (8010ad8 <tcp_input+0x28c>)
 80109c0:	6814      	ldr	r4, [r2, #0]
 80109c2:	4618      	mov	r0, r3
 80109c4:	f7fc fd1c 	bl	800d400 <lwip_htons>
 80109c8:	4603      	mov	r3, r0
 80109ca:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80109cc:	4b42      	ldr	r3, [pc, #264]	; (8010ad8 <tcp_input+0x28c>)
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	685b      	ldr	r3, [r3, #4]
 80109d2:	4a41      	ldr	r2, [pc, #260]	; (8010ad8 <tcp_input+0x28c>)
 80109d4:	6814      	ldr	r4, [r2, #0]
 80109d6:	4618      	mov	r0, r3
 80109d8:	f7fc fd27 	bl	800d42a <lwip_htonl>
 80109dc:	4603      	mov	r3, r0
 80109de:	6063      	str	r3, [r4, #4]
 80109e0:	6863      	ldr	r3, [r4, #4]
 80109e2:	4a45      	ldr	r2, [pc, #276]	; (8010af8 <tcp_input+0x2ac>)
 80109e4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80109e6:	4b3c      	ldr	r3, [pc, #240]	; (8010ad8 <tcp_input+0x28c>)
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	689b      	ldr	r3, [r3, #8]
 80109ec:	4a3a      	ldr	r2, [pc, #232]	; (8010ad8 <tcp_input+0x28c>)
 80109ee:	6814      	ldr	r4, [r2, #0]
 80109f0:	4618      	mov	r0, r3
 80109f2:	f7fc fd1a 	bl	800d42a <lwip_htonl>
 80109f6:	4603      	mov	r3, r0
 80109f8:	60a3      	str	r3, [r4, #8]
 80109fa:	68a3      	ldr	r3, [r4, #8]
 80109fc:	4a3f      	ldr	r2, [pc, #252]	; (8010afc <tcp_input+0x2b0>)
 80109fe:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010a00:	4b35      	ldr	r3, [pc, #212]	; (8010ad8 <tcp_input+0x28c>)
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	89db      	ldrh	r3, [r3, #14]
 8010a06:	b29b      	uxth	r3, r3
 8010a08:	4a33      	ldr	r2, [pc, #204]	; (8010ad8 <tcp_input+0x28c>)
 8010a0a:	6814      	ldr	r4, [r2, #0]
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f7fc fcf7 	bl	800d400 <lwip_htons>
 8010a12:	4603      	mov	r3, r0
 8010a14:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010a16:	4b30      	ldr	r3, [pc, #192]	; (8010ad8 <tcp_input+0x28c>)
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	899b      	ldrh	r3, [r3, #12]
 8010a1c:	b29b      	uxth	r3, r3
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f7fc fcee 	bl	800d400 <lwip_htons>
 8010a24:	4603      	mov	r3, r0
 8010a26:	b2db      	uxtb	r3, r3
 8010a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010a2c:	b2da      	uxtb	r2, r3
 8010a2e:	4b34      	ldr	r3, [pc, #208]	; (8010b00 <tcp_input+0x2b4>)
 8010a30:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	891a      	ldrh	r2, [r3, #8]
 8010a36:	4b33      	ldr	r3, [pc, #204]	; (8010b04 <tcp_input+0x2b8>)
 8010a38:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010a3a:	4b31      	ldr	r3, [pc, #196]	; (8010b00 <tcp_input+0x2b4>)
 8010a3c:	781b      	ldrb	r3, [r3, #0]
 8010a3e:	f003 0303 	and.w	r3, r3, #3
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d00c      	beq.n	8010a60 <tcp_input+0x214>
    tcplen++;
 8010a46:	4b2f      	ldr	r3, [pc, #188]	; (8010b04 <tcp_input+0x2b8>)
 8010a48:	881b      	ldrh	r3, [r3, #0]
 8010a4a:	3301      	adds	r3, #1
 8010a4c:	b29a      	uxth	r2, r3
 8010a4e:	4b2d      	ldr	r3, [pc, #180]	; (8010b04 <tcp_input+0x2b8>)
 8010a50:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	891a      	ldrh	r2, [r3, #8]
 8010a56:	4b2b      	ldr	r3, [pc, #172]	; (8010b04 <tcp_input+0x2b8>)
 8010a58:	881b      	ldrh	r3, [r3, #0]
 8010a5a:	429a      	cmp	r2, r3
 8010a5c:	f200 82e6 	bhi.w	801102c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010a60:	2300      	movs	r3, #0
 8010a62:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010a64:	4b28      	ldr	r3, [pc, #160]	; (8010b08 <tcp_input+0x2bc>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	61fb      	str	r3, [r7, #28]
 8010a6a:	e09d      	b.n	8010ba8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010a6c:	69fb      	ldr	r3, [r7, #28]
 8010a6e:	7d1b      	ldrb	r3, [r3, #20]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d105      	bne.n	8010a80 <tcp_input+0x234>
 8010a74:	4b15      	ldr	r3, [pc, #84]	; (8010acc <tcp_input+0x280>)
 8010a76:	22fb      	movs	r2, #251	; 0xfb
 8010a78:	4924      	ldr	r1, [pc, #144]	; (8010b0c <tcp_input+0x2c0>)
 8010a7a:	4816      	ldr	r0, [pc, #88]	; (8010ad4 <tcp_input+0x288>)
 8010a7c:	f006 fbde 	bl	801723c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010a80:	69fb      	ldr	r3, [r7, #28]
 8010a82:	7d1b      	ldrb	r3, [r3, #20]
 8010a84:	2b0a      	cmp	r3, #10
 8010a86:	d105      	bne.n	8010a94 <tcp_input+0x248>
 8010a88:	4b10      	ldr	r3, [pc, #64]	; (8010acc <tcp_input+0x280>)
 8010a8a:	22fc      	movs	r2, #252	; 0xfc
 8010a8c:	4920      	ldr	r1, [pc, #128]	; (8010b10 <tcp_input+0x2c4>)
 8010a8e:	4811      	ldr	r0, [pc, #68]	; (8010ad4 <tcp_input+0x288>)
 8010a90:	f006 fbd4 	bl	801723c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010a94:	69fb      	ldr	r3, [r7, #28]
 8010a96:	7d1b      	ldrb	r3, [r3, #20]
 8010a98:	2b01      	cmp	r3, #1
 8010a9a:	d105      	bne.n	8010aa8 <tcp_input+0x25c>
 8010a9c:	4b0b      	ldr	r3, [pc, #44]	; (8010acc <tcp_input+0x280>)
 8010a9e:	22fd      	movs	r2, #253	; 0xfd
 8010aa0:	491c      	ldr	r1, [pc, #112]	; (8010b14 <tcp_input+0x2c8>)
 8010aa2:	480c      	ldr	r0, [pc, #48]	; (8010ad4 <tcp_input+0x288>)
 8010aa4:	f006 fbca 	bl	801723c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010aa8:	69fb      	ldr	r3, [r7, #28]
 8010aaa:	7a1b      	ldrb	r3, [r3, #8]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d033      	beq.n	8010b18 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010ab0:	69fb      	ldr	r3, [r7, #28]
 8010ab2:	7a1a      	ldrb	r2, [r3, #8]
 8010ab4:	4b09      	ldr	r3, [pc, #36]	; (8010adc <tcp_input+0x290>)
 8010ab6:	685b      	ldr	r3, [r3, #4]
 8010ab8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010abc:	3301      	adds	r3, #1
 8010abe:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	d029      	beq.n	8010b18 <tcp_input+0x2cc>
      prev = pcb;
 8010ac4:	69fb      	ldr	r3, [r7, #28]
 8010ac6:	61bb      	str	r3, [r7, #24]
      continue;
 8010ac8:	e06b      	b.n	8010ba2 <tcp_input+0x356>
 8010aca:	bf00      	nop
 8010acc:	080198c8 	.word	0x080198c8
 8010ad0:	080198fc 	.word	0x080198fc
 8010ad4:	08019914 	.word	0x08019914
 8010ad8:	2001108c 	.word	0x2001108c
 8010adc:	2000d910 	.word	0x2000d910
 8010ae0:	20011090 	.word	0x20011090
 8010ae4:	20011094 	.word	0x20011094
 8010ae8:	20011092 	.word	0x20011092
 8010aec:	0801993c 	.word	0x0801993c
 8010af0:	0801994c 	.word	0x0801994c
 8010af4:	08019958 	.word	0x08019958
 8010af8:	2001109c 	.word	0x2001109c
 8010afc:	200110a0 	.word	0x200110a0
 8010b00:	200110a8 	.word	0x200110a8
 8010b04:	200110a6 	.word	0x200110a6
 8010b08:	20011070 	.word	0x20011070
 8010b0c:	08019978 	.word	0x08019978
 8010b10:	080199a0 	.word	0x080199a0
 8010b14:	080199cc 	.word	0x080199cc
    }

    if (pcb->remote_port == tcphdr->src &&
 8010b18:	69fb      	ldr	r3, [r7, #28]
 8010b1a:	8b1a      	ldrh	r2, [r3, #24]
 8010b1c:	4b72      	ldr	r3, [pc, #456]	; (8010ce8 <tcp_input+0x49c>)
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	881b      	ldrh	r3, [r3, #0]
 8010b22:	b29b      	uxth	r3, r3
 8010b24:	429a      	cmp	r2, r3
 8010b26:	d13a      	bne.n	8010b9e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010b28:	69fb      	ldr	r3, [r7, #28]
 8010b2a:	8ada      	ldrh	r2, [r3, #22]
 8010b2c:	4b6e      	ldr	r3, [pc, #440]	; (8010ce8 <tcp_input+0x49c>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	885b      	ldrh	r3, [r3, #2]
 8010b32:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010b34:	429a      	cmp	r2, r3
 8010b36:	d132      	bne.n	8010b9e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010b38:	69fb      	ldr	r3, [r7, #28]
 8010b3a:	685a      	ldr	r2, [r3, #4]
 8010b3c:	4b6b      	ldr	r3, [pc, #428]	; (8010cec <tcp_input+0x4a0>)
 8010b3e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010b40:	429a      	cmp	r2, r3
 8010b42:	d12c      	bne.n	8010b9e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010b44:	69fb      	ldr	r3, [r7, #28]
 8010b46:	681a      	ldr	r2, [r3, #0]
 8010b48:	4b68      	ldr	r3, [pc, #416]	; (8010cec <tcp_input+0x4a0>)
 8010b4a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010b4c:	429a      	cmp	r2, r3
 8010b4e:	d126      	bne.n	8010b9e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010b50:	69fb      	ldr	r3, [r7, #28]
 8010b52:	68db      	ldr	r3, [r3, #12]
 8010b54:	69fa      	ldr	r2, [r7, #28]
 8010b56:	429a      	cmp	r2, r3
 8010b58:	d106      	bne.n	8010b68 <tcp_input+0x31c>
 8010b5a:	4b65      	ldr	r3, [pc, #404]	; (8010cf0 <tcp_input+0x4a4>)
 8010b5c:	f240 120d 	movw	r2, #269	; 0x10d
 8010b60:	4964      	ldr	r1, [pc, #400]	; (8010cf4 <tcp_input+0x4a8>)
 8010b62:	4865      	ldr	r0, [pc, #404]	; (8010cf8 <tcp_input+0x4ac>)
 8010b64:	f006 fb6a 	bl	801723c <iprintf>
      if (prev != NULL) {
 8010b68:	69bb      	ldr	r3, [r7, #24]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d00a      	beq.n	8010b84 <tcp_input+0x338>
        prev->next = pcb->next;
 8010b6e:	69fb      	ldr	r3, [r7, #28]
 8010b70:	68da      	ldr	r2, [r3, #12]
 8010b72:	69bb      	ldr	r3, [r7, #24]
 8010b74:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010b76:	4b61      	ldr	r3, [pc, #388]	; (8010cfc <tcp_input+0x4b0>)
 8010b78:	681a      	ldr	r2, [r3, #0]
 8010b7a:	69fb      	ldr	r3, [r7, #28]
 8010b7c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010b7e:	4a5f      	ldr	r2, [pc, #380]	; (8010cfc <tcp_input+0x4b0>)
 8010b80:	69fb      	ldr	r3, [r7, #28]
 8010b82:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010b84:	69fb      	ldr	r3, [r7, #28]
 8010b86:	68db      	ldr	r3, [r3, #12]
 8010b88:	69fa      	ldr	r2, [r7, #28]
 8010b8a:	429a      	cmp	r2, r3
 8010b8c:	d111      	bne.n	8010bb2 <tcp_input+0x366>
 8010b8e:	4b58      	ldr	r3, [pc, #352]	; (8010cf0 <tcp_input+0x4a4>)
 8010b90:	f240 1215 	movw	r2, #277	; 0x115
 8010b94:	495a      	ldr	r1, [pc, #360]	; (8010d00 <tcp_input+0x4b4>)
 8010b96:	4858      	ldr	r0, [pc, #352]	; (8010cf8 <tcp_input+0x4ac>)
 8010b98:	f006 fb50 	bl	801723c <iprintf>
      break;
 8010b9c:	e009      	b.n	8010bb2 <tcp_input+0x366>
    }
    prev = pcb;
 8010b9e:	69fb      	ldr	r3, [r7, #28]
 8010ba0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ba2:	69fb      	ldr	r3, [r7, #28]
 8010ba4:	68db      	ldr	r3, [r3, #12]
 8010ba6:	61fb      	str	r3, [r7, #28]
 8010ba8:	69fb      	ldr	r3, [r7, #28]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	f47f af5e 	bne.w	8010a6c <tcp_input+0x220>
 8010bb0:	e000      	b.n	8010bb4 <tcp_input+0x368>
      break;
 8010bb2:	bf00      	nop
  }

  if (pcb == NULL) {
 8010bb4:	69fb      	ldr	r3, [r7, #28]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	f040 80aa 	bne.w	8010d10 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010bbc:	4b51      	ldr	r3, [pc, #324]	; (8010d04 <tcp_input+0x4b8>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	61fb      	str	r3, [r7, #28]
 8010bc2:	e03f      	b.n	8010c44 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010bc4:	69fb      	ldr	r3, [r7, #28]
 8010bc6:	7d1b      	ldrb	r3, [r3, #20]
 8010bc8:	2b0a      	cmp	r3, #10
 8010bca:	d006      	beq.n	8010bda <tcp_input+0x38e>
 8010bcc:	4b48      	ldr	r3, [pc, #288]	; (8010cf0 <tcp_input+0x4a4>)
 8010bce:	f240 121f 	movw	r2, #287	; 0x11f
 8010bd2:	494d      	ldr	r1, [pc, #308]	; (8010d08 <tcp_input+0x4bc>)
 8010bd4:	4848      	ldr	r0, [pc, #288]	; (8010cf8 <tcp_input+0x4ac>)
 8010bd6:	f006 fb31 	bl	801723c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010bda:	69fb      	ldr	r3, [r7, #28]
 8010bdc:	7a1b      	ldrb	r3, [r3, #8]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d009      	beq.n	8010bf6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010be2:	69fb      	ldr	r3, [r7, #28]
 8010be4:	7a1a      	ldrb	r2, [r3, #8]
 8010be6:	4b41      	ldr	r3, [pc, #260]	; (8010cec <tcp_input+0x4a0>)
 8010be8:	685b      	ldr	r3, [r3, #4]
 8010bea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010bee:	3301      	adds	r3, #1
 8010bf0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010bf2:	429a      	cmp	r2, r3
 8010bf4:	d122      	bne.n	8010c3c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010bf6:	69fb      	ldr	r3, [r7, #28]
 8010bf8:	8b1a      	ldrh	r2, [r3, #24]
 8010bfa:	4b3b      	ldr	r3, [pc, #236]	; (8010ce8 <tcp_input+0x49c>)
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	881b      	ldrh	r3, [r3, #0]
 8010c00:	b29b      	uxth	r3, r3
 8010c02:	429a      	cmp	r2, r3
 8010c04:	d11b      	bne.n	8010c3e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010c06:	69fb      	ldr	r3, [r7, #28]
 8010c08:	8ada      	ldrh	r2, [r3, #22]
 8010c0a:	4b37      	ldr	r3, [pc, #220]	; (8010ce8 <tcp_input+0x49c>)
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	885b      	ldrh	r3, [r3, #2]
 8010c10:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010c12:	429a      	cmp	r2, r3
 8010c14:	d113      	bne.n	8010c3e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010c16:	69fb      	ldr	r3, [r7, #28]
 8010c18:	685a      	ldr	r2, [r3, #4]
 8010c1a:	4b34      	ldr	r3, [pc, #208]	; (8010cec <tcp_input+0x4a0>)
 8010c1c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010c1e:	429a      	cmp	r2, r3
 8010c20:	d10d      	bne.n	8010c3e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010c22:	69fb      	ldr	r3, [r7, #28]
 8010c24:	681a      	ldr	r2, [r3, #0]
 8010c26:	4b31      	ldr	r3, [pc, #196]	; (8010cec <tcp_input+0x4a0>)
 8010c28:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010c2a:	429a      	cmp	r2, r3
 8010c2c:	d107      	bne.n	8010c3e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010c2e:	69f8      	ldr	r0, [r7, #28]
 8010c30:	f000 fb56 	bl	80112e0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	f7fd ffd5 	bl	800ebe4 <pbuf_free>
        return;
 8010c3a:	e1fd      	b.n	8011038 <tcp_input+0x7ec>
        continue;
 8010c3c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c3e:	69fb      	ldr	r3, [r7, #28]
 8010c40:	68db      	ldr	r3, [r3, #12]
 8010c42:	61fb      	str	r3, [r7, #28]
 8010c44:	69fb      	ldr	r3, [r7, #28]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d1bc      	bne.n	8010bc4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010c4e:	4b2f      	ldr	r3, [pc, #188]	; (8010d0c <tcp_input+0x4c0>)
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	617b      	str	r3, [r7, #20]
 8010c54:	e02a      	b.n	8010cac <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010c56:	697b      	ldr	r3, [r7, #20]
 8010c58:	7a1b      	ldrb	r3, [r3, #8]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d00c      	beq.n	8010c78 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010c5e:	697b      	ldr	r3, [r7, #20]
 8010c60:	7a1a      	ldrb	r2, [r3, #8]
 8010c62:	4b22      	ldr	r3, [pc, #136]	; (8010cec <tcp_input+0x4a0>)
 8010c64:	685b      	ldr	r3, [r3, #4]
 8010c66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c6a:	3301      	adds	r3, #1
 8010c6c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010c6e:	429a      	cmp	r2, r3
 8010c70:	d002      	beq.n	8010c78 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010c72:	697b      	ldr	r3, [r7, #20]
 8010c74:	61bb      	str	r3, [r7, #24]
        continue;
 8010c76:	e016      	b.n	8010ca6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010c78:	697b      	ldr	r3, [r7, #20]
 8010c7a:	8ada      	ldrh	r2, [r3, #22]
 8010c7c:	4b1a      	ldr	r3, [pc, #104]	; (8010ce8 <tcp_input+0x49c>)
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	885b      	ldrh	r3, [r3, #2]
 8010c82:	b29b      	uxth	r3, r3
 8010c84:	429a      	cmp	r2, r3
 8010c86:	d10c      	bne.n	8010ca2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010c88:	697b      	ldr	r3, [r7, #20]
 8010c8a:	681a      	ldr	r2, [r3, #0]
 8010c8c:	4b17      	ldr	r3, [pc, #92]	; (8010cec <tcp_input+0x4a0>)
 8010c8e:	695b      	ldr	r3, [r3, #20]
 8010c90:	429a      	cmp	r2, r3
 8010c92:	d00f      	beq.n	8010cb4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010c94:	697b      	ldr	r3, [r7, #20]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d00d      	beq.n	8010cb6 <tcp_input+0x46a>
 8010c9a:	697b      	ldr	r3, [r7, #20]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d009      	beq.n	8010cb6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010ca2:	697b      	ldr	r3, [r7, #20]
 8010ca4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010ca6:	697b      	ldr	r3, [r7, #20]
 8010ca8:	68db      	ldr	r3, [r3, #12]
 8010caa:	617b      	str	r3, [r7, #20]
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d1d1      	bne.n	8010c56 <tcp_input+0x40a>
 8010cb2:	e000      	b.n	8010cb6 <tcp_input+0x46a>
            break;
 8010cb4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010cb6:	697b      	ldr	r3, [r7, #20]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d029      	beq.n	8010d10 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010cbc:	69bb      	ldr	r3, [r7, #24]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d00a      	beq.n	8010cd8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010cc2:	697b      	ldr	r3, [r7, #20]
 8010cc4:	68da      	ldr	r2, [r3, #12]
 8010cc6:	69bb      	ldr	r3, [r7, #24]
 8010cc8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010cca:	4b10      	ldr	r3, [pc, #64]	; (8010d0c <tcp_input+0x4c0>)
 8010ccc:	681a      	ldr	r2, [r3, #0]
 8010cce:	697b      	ldr	r3, [r7, #20]
 8010cd0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010cd2:	4a0e      	ldr	r2, [pc, #56]	; (8010d0c <tcp_input+0x4c0>)
 8010cd4:	697b      	ldr	r3, [r7, #20]
 8010cd6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010cd8:	6978      	ldr	r0, [r7, #20]
 8010cda:	f000 fa03 	bl	80110e4 <tcp_listen_input>
      }
      pbuf_free(p);
 8010cde:	6878      	ldr	r0, [r7, #4]
 8010ce0:	f7fd ff80 	bl	800ebe4 <pbuf_free>
      return;
 8010ce4:	e1a8      	b.n	8011038 <tcp_input+0x7ec>
 8010ce6:	bf00      	nop
 8010ce8:	2001108c 	.word	0x2001108c
 8010cec:	2000d910 	.word	0x2000d910
 8010cf0:	080198c8 	.word	0x080198c8
 8010cf4:	080199f4 	.word	0x080199f4
 8010cf8:	08019914 	.word	0x08019914
 8010cfc:	20011070 	.word	0x20011070
 8010d00:	08019a20 	.word	0x08019a20
 8010d04:	20011074 	.word	0x20011074
 8010d08:	08019a4c 	.word	0x08019a4c
 8010d0c:	2001106c 	.word	0x2001106c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010d10:	69fb      	ldr	r3, [r7, #28]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	f000 8158 	beq.w	8010fc8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010d18:	4b95      	ldr	r3, [pc, #596]	; (8010f70 <tcp_input+0x724>)
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	891a      	ldrh	r2, [r3, #8]
 8010d22:	4b93      	ldr	r3, [pc, #588]	; (8010f70 <tcp_input+0x724>)
 8010d24:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010d26:	4a92      	ldr	r2, [pc, #584]	; (8010f70 <tcp_input+0x724>)
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010d2c:	4b91      	ldr	r3, [pc, #580]	; (8010f74 <tcp_input+0x728>)
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	4a8f      	ldr	r2, [pc, #572]	; (8010f70 <tcp_input+0x724>)
 8010d32:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010d34:	4b90      	ldr	r3, [pc, #576]	; (8010f78 <tcp_input+0x72c>)
 8010d36:	2200      	movs	r2, #0
 8010d38:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010d3a:	4b90      	ldr	r3, [pc, #576]	; (8010f7c <tcp_input+0x730>)
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010d40:	4b8f      	ldr	r3, [pc, #572]	; (8010f80 <tcp_input+0x734>)
 8010d42:	2200      	movs	r2, #0
 8010d44:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010d46:	4b8f      	ldr	r3, [pc, #572]	; (8010f84 <tcp_input+0x738>)
 8010d48:	781b      	ldrb	r3, [r3, #0]
 8010d4a:	f003 0308 	and.w	r3, r3, #8
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d006      	beq.n	8010d60 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	7b5b      	ldrb	r3, [r3, #13]
 8010d56:	f043 0301 	orr.w	r3, r3, #1
 8010d5a:	b2da      	uxtb	r2, r3
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010d60:	69fb      	ldr	r3, [r7, #28]
 8010d62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d017      	beq.n	8010d98 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010d68:	69f8      	ldr	r0, [r7, #28]
 8010d6a:	f7ff f929 	bl	800ffc0 <tcp_process_refused_data>
 8010d6e:	4603      	mov	r3, r0
 8010d70:	f113 0f0d 	cmn.w	r3, #13
 8010d74:	d007      	beq.n	8010d86 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010d76:	69fb      	ldr	r3, [r7, #28]
 8010d78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d00c      	beq.n	8010d98 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010d7e:	4b82      	ldr	r3, [pc, #520]	; (8010f88 <tcp_input+0x73c>)
 8010d80:	881b      	ldrh	r3, [r3, #0]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d008      	beq.n	8010d98 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010d86:	69fb      	ldr	r3, [r7, #28]
 8010d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	f040 80e3 	bne.w	8010f56 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010d90:	69f8      	ldr	r0, [r7, #28]
 8010d92:	f003 f9ad 	bl	80140f0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010d96:	e0de      	b.n	8010f56 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8010d98:	4a7c      	ldr	r2, [pc, #496]	; (8010f8c <tcp_input+0x740>)
 8010d9a:	69fb      	ldr	r3, [r7, #28]
 8010d9c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010d9e:	69f8      	ldr	r0, [r7, #28]
 8010da0:	f000 fb18 	bl	80113d4 <tcp_process>
 8010da4:	4603      	mov	r3, r0
 8010da6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010da8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010dac:	f113 0f0d 	cmn.w	r3, #13
 8010db0:	f000 80d3 	beq.w	8010f5a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8010db4:	4b71      	ldr	r3, [pc, #452]	; (8010f7c <tcp_input+0x730>)
 8010db6:	781b      	ldrb	r3, [r3, #0]
 8010db8:	f003 0308 	and.w	r3, r3, #8
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d015      	beq.n	8010dec <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010dc0:	69fb      	ldr	r3, [r7, #28]
 8010dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d008      	beq.n	8010ddc <tcp_input+0x590>
 8010dca:	69fb      	ldr	r3, [r7, #28]
 8010dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010dd0:	69fa      	ldr	r2, [r7, #28]
 8010dd2:	6912      	ldr	r2, [r2, #16]
 8010dd4:	f06f 010d 	mvn.w	r1, #13
 8010dd8:	4610      	mov	r0, r2
 8010dda:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010ddc:	69f9      	ldr	r1, [r7, #28]
 8010dde:	486c      	ldr	r0, [pc, #432]	; (8010f90 <tcp_input+0x744>)
 8010de0:	f7ff fbbc 	bl	801055c <tcp_pcb_remove>
        tcp_free(pcb);
 8010de4:	69f8      	ldr	r0, [r7, #28]
 8010de6:	f7fe f9a9 	bl	800f13c <tcp_free>
 8010dea:	e0da      	b.n	8010fa2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8010dec:	2300      	movs	r3, #0
 8010dee:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010df0:	4b63      	ldr	r3, [pc, #396]	; (8010f80 <tcp_input+0x734>)
 8010df2:	881b      	ldrh	r3, [r3, #0]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d01d      	beq.n	8010e34 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010df8:	4b61      	ldr	r3, [pc, #388]	; (8010f80 <tcp_input+0x734>)
 8010dfa:	881b      	ldrh	r3, [r3, #0]
 8010dfc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010dfe:	69fb      	ldr	r3, [r7, #28]
 8010e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d00a      	beq.n	8010e1e <tcp_input+0x5d2>
 8010e08:	69fb      	ldr	r3, [r7, #28]
 8010e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e0e:	69fa      	ldr	r2, [r7, #28]
 8010e10:	6910      	ldr	r0, [r2, #16]
 8010e12:	89fa      	ldrh	r2, [r7, #14]
 8010e14:	69f9      	ldr	r1, [r7, #28]
 8010e16:	4798      	blx	r3
 8010e18:	4603      	mov	r3, r0
 8010e1a:	74fb      	strb	r3, [r7, #19]
 8010e1c:	e001      	b.n	8010e22 <tcp_input+0x5d6>
 8010e1e:	2300      	movs	r3, #0
 8010e20:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010e22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010e26:	f113 0f0d 	cmn.w	r3, #13
 8010e2a:	f000 8098 	beq.w	8010f5e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010e2e:	4b54      	ldr	r3, [pc, #336]	; (8010f80 <tcp_input+0x734>)
 8010e30:	2200      	movs	r2, #0
 8010e32:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010e34:	69f8      	ldr	r0, [r7, #28]
 8010e36:	f000 f915 	bl	8011064 <tcp_input_delayed_close>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	f040 8090 	bne.w	8010f62 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010e42:	4b4d      	ldr	r3, [pc, #308]	; (8010f78 <tcp_input+0x72c>)
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d041      	beq.n	8010ece <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010e4a:	69fb      	ldr	r3, [r7, #28]
 8010e4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d006      	beq.n	8010e60 <tcp_input+0x614>
 8010e52:	4b50      	ldr	r3, [pc, #320]	; (8010f94 <tcp_input+0x748>)
 8010e54:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010e58:	494f      	ldr	r1, [pc, #316]	; (8010f98 <tcp_input+0x74c>)
 8010e5a:	4850      	ldr	r0, [pc, #320]	; (8010f9c <tcp_input+0x750>)
 8010e5c:	f006 f9ee 	bl	801723c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010e60:	69fb      	ldr	r3, [r7, #28]
 8010e62:	8b5b      	ldrh	r3, [r3, #26]
 8010e64:	f003 0310 	and.w	r3, r3, #16
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d008      	beq.n	8010e7e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010e6c:	4b42      	ldr	r3, [pc, #264]	; (8010f78 <tcp_input+0x72c>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	4618      	mov	r0, r3
 8010e72:	f7fd feb7 	bl	800ebe4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010e76:	69f8      	ldr	r0, [r7, #28]
 8010e78:	f7fe fc48 	bl	800f70c <tcp_abort>
            goto aborted;
 8010e7c:	e091      	b.n	8010fa2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010e7e:	69fb      	ldr	r3, [r7, #28]
 8010e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d00c      	beq.n	8010ea2 <tcp_input+0x656>
 8010e88:	69fb      	ldr	r3, [r7, #28]
 8010e8a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010e8e:	69fb      	ldr	r3, [r7, #28]
 8010e90:	6918      	ldr	r0, [r3, #16]
 8010e92:	4b39      	ldr	r3, [pc, #228]	; (8010f78 <tcp_input+0x72c>)
 8010e94:	681a      	ldr	r2, [r3, #0]
 8010e96:	2300      	movs	r3, #0
 8010e98:	69f9      	ldr	r1, [r7, #28]
 8010e9a:	47a0      	blx	r4
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	74fb      	strb	r3, [r7, #19]
 8010ea0:	e008      	b.n	8010eb4 <tcp_input+0x668>
 8010ea2:	4b35      	ldr	r3, [pc, #212]	; (8010f78 <tcp_input+0x72c>)
 8010ea4:	681a      	ldr	r2, [r3, #0]
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	69f9      	ldr	r1, [r7, #28]
 8010eaa:	2000      	movs	r0, #0
 8010eac:	f7ff f95e 	bl	801016c <tcp_recv_null>
 8010eb0:	4603      	mov	r3, r0
 8010eb2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010eb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010eb8:	f113 0f0d 	cmn.w	r3, #13
 8010ebc:	d053      	beq.n	8010f66 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010ebe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d003      	beq.n	8010ece <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010ec6:	4b2c      	ldr	r3, [pc, #176]	; (8010f78 <tcp_input+0x72c>)
 8010ec8:	681a      	ldr	r2, [r3, #0]
 8010eca:	69fb      	ldr	r3, [r7, #28]
 8010ecc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010ece:	4b2b      	ldr	r3, [pc, #172]	; (8010f7c <tcp_input+0x730>)
 8010ed0:	781b      	ldrb	r3, [r3, #0]
 8010ed2:	f003 0320 	and.w	r3, r3, #32
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d030      	beq.n	8010f3c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8010eda:	69fb      	ldr	r3, [r7, #28]
 8010edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d009      	beq.n	8010ef6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010ee2:	69fb      	ldr	r3, [r7, #28]
 8010ee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ee6:	7b5a      	ldrb	r2, [r3, #13]
 8010ee8:	69fb      	ldr	r3, [r7, #28]
 8010eea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010eec:	f042 0220 	orr.w	r2, r2, #32
 8010ef0:	b2d2      	uxtb	r2, r2
 8010ef2:	735a      	strb	r2, [r3, #13]
 8010ef4:	e022      	b.n	8010f3c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010ef6:	69fb      	ldr	r3, [r7, #28]
 8010ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010efa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010efe:	d005      	beq.n	8010f0c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8010f00:	69fb      	ldr	r3, [r7, #28]
 8010f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010f04:	3301      	adds	r3, #1
 8010f06:	b29a      	uxth	r2, r3
 8010f08:	69fb      	ldr	r3, [r7, #28]
 8010f0a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010f0c:	69fb      	ldr	r3, [r7, #28]
 8010f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d00b      	beq.n	8010f2e <tcp_input+0x6e2>
 8010f16:	69fb      	ldr	r3, [r7, #28]
 8010f18:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010f1c:	69fb      	ldr	r3, [r7, #28]
 8010f1e:	6918      	ldr	r0, [r3, #16]
 8010f20:	2300      	movs	r3, #0
 8010f22:	2200      	movs	r2, #0
 8010f24:	69f9      	ldr	r1, [r7, #28]
 8010f26:	47a0      	blx	r4
 8010f28:	4603      	mov	r3, r0
 8010f2a:	74fb      	strb	r3, [r7, #19]
 8010f2c:	e001      	b.n	8010f32 <tcp_input+0x6e6>
 8010f2e:	2300      	movs	r3, #0
 8010f30:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010f32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010f36:	f113 0f0d 	cmn.w	r3, #13
 8010f3a:	d016      	beq.n	8010f6a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010f3c:	4b13      	ldr	r3, [pc, #76]	; (8010f8c <tcp_input+0x740>)
 8010f3e:	2200      	movs	r2, #0
 8010f40:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010f42:	69f8      	ldr	r0, [r7, #28]
 8010f44:	f000 f88e 	bl	8011064 <tcp_input_delayed_close>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d128      	bne.n	8010fa0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010f4e:	69f8      	ldr	r0, [r7, #28]
 8010f50:	f002 fac8 	bl	80134e4 <tcp_output>
 8010f54:	e025      	b.n	8010fa2 <tcp_input+0x756>
        goto aborted;
 8010f56:	bf00      	nop
 8010f58:	e023      	b.n	8010fa2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010f5a:	bf00      	nop
 8010f5c:	e021      	b.n	8010fa2 <tcp_input+0x756>
              goto aborted;
 8010f5e:	bf00      	nop
 8010f60:	e01f      	b.n	8010fa2 <tcp_input+0x756>
          goto aborted;
 8010f62:	bf00      	nop
 8010f64:	e01d      	b.n	8010fa2 <tcp_input+0x756>
            goto aborted;
 8010f66:	bf00      	nop
 8010f68:	e01b      	b.n	8010fa2 <tcp_input+0x756>
              goto aborted;
 8010f6a:	bf00      	nop
 8010f6c:	e019      	b.n	8010fa2 <tcp_input+0x756>
 8010f6e:	bf00      	nop
 8010f70:	2001107c 	.word	0x2001107c
 8010f74:	2001108c 	.word	0x2001108c
 8010f78:	200110ac 	.word	0x200110ac
 8010f7c:	200110a9 	.word	0x200110a9
 8010f80:	200110a4 	.word	0x200110a4
 8010f84:	200110a8 	.word	0x200110a8
 8010f88:	200110a6 	.word	0x200110a6
 8010f8c:	200110b0 	.word	0x200110b0
 8010f90:	20011070 	.word	0x20011070
 8010f94:	080198c8 	.word	0x080198c8
 8010f98:	08019a7c 	.word	0x08019a7c
 8010f9c:	08019914 	.word	0x08019914
          goto aborted;
 8010fa0:	bf00      	nop
    tcp_input_pcb = NULL;
 8010fa2:	4b27      	ldr	r3, [pc, #156]	; (8011040 <tcp_input+0x7f4>)
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010fa8:	4b26      	ldr	r3, [pc, #152]	; (8011044 <tcp_input+0x7f8>)
 8010faa:	2200      	movs	r2, #0
 8010fac:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010fae:	4b26      	ldr	r3, [pc, #152]	; (8011048 <tcp_input+0x7fc>)
 8010fb0:	685b      	ldr	r3, [r3, #4]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d03f      	beq.n	8011036 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8010fb6:	4b24      	ldr	r3, [pc, #144]	; (8011048 <tcp_input+0x7fc>)
 8010fb8:	685b      	ldr	r3, [r3, #4]
 8010fba:	4618      	mov	r0, r3
 8010fbc:	f7fd fe12 	bl	800ebe4 <pbuf_free>
      inseg.p = NULL;
 8010fc0:	4b21      	ldr	r3, [pc, #132]	; (8011048 <tcp_input+0x7fc>)
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010fc6:	e036      	b.n	8011036 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010fc8:	4b20      	ldr	r3, [pc, #128]	; (801104c <tcp_input+0x800>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	899b      	ldrh	r3, [r3, #12]
 8010fce:	b29b      	uxth	r3, r3
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	f7fc fa15 	bl	800d400 <lwip_htons>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	b2db      	uxtb	r3, r3
 8010fda:	f003 0304 	and.w	r3, r3, #4
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d118      	bne.n	8011014 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010fe2:	4b1b      	ldr	r3, [pc, #108]	; (8011050 <tcp_input+0x804>)
 8010fe4:	6819      	ldr	r1, [r3, #0]
 8010fe6:	4b1b      	ldr	r3, [pc, #108]	; (8011054 <tcp_input+0x808>)
 8010fe8:	881b      	ldrh	r3, [r3, #0]
 8010fea:	461a      	mov	r2, r3
 8010fec:	4b1a      	ldr	r3, [pc, #104]	; (8011058 <tcp_input+0x80c>)
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ff2:	4b16      	ldr	r3, [pc, #88]	; (801104c <tcp_input+0x800>)
 8010ff4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ff6:	885b      	ldrh	r3, [r3, #2]
 8010ff8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ffa:	4a14      	ldr	r2, [pc, #80]	; (801104c <tcp_input+0x800>)
 8010ffc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ffe:	8812      	ldrh	r2, [r2, #0]
 8011000:	b292      	uxth	r2, r2
 8011002:	9202      	str	r2, [sp, #8]
 8011004:	9301      	str	r3, [sp, #4]
 8011006:	4b15      	ldr	r3, [pc, #84]	; (801105c <tcp_input+0x810>)
 8011008:	9300      	str	r3, [sp, #0]
 801100a:	4b15      	ldr	r3, [pc, #84]	; (8011060 <tcp_input+0x814>)
 801100c:	4602      	mov	r2, r0
 801100e:	2000      	movs	r0, #0
 8011010:	f003 f81c 	bl	801404c <tcp_rst>
    pbuf_free(p);
 8011014:	6878      	ldr	r0, [r7, #4]
 8011016:	f7fd fde5 	bl	800ebe4 <pbuf_free>
  return;
 801101a:	e00c      	b.n	8011036 <tcp_input+0x7ea>
    goto dropped;
 801101c:	bf00      	nop
 801101e:	e006      	b.n	801102e <tcp_input+0x7e2>
    goto dropped;
 8011020:	bf00      	nop
 8011022:	e004      	b.n	801102e <tcp_input+0x7e2>
    goto dropped;
 8011024:	bf00      	nop
 8011026:	e002      	b.n	801102e <tcp_input+0x7e2>
      goto dropped;
 8011028:	bf00      	nop
 801102a:	e000      	b.n	801102e <tcp_input+0x7e2>
      goto dropped;
 801102c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f7fd fdd8 	bl	800ebe4 <pbuf_free>
 8011034:	e000      	b.n	8011038 <tcp_input+0x7ec>
  return;
 8011036:	bf00      	nop
}
 8011038:	3724      	adds	r7, #36	; 0x24
 801103a:	46bd      	mov	sp, r7
 801103c:	bd90      	pop	{r4, r7, pc}
 801103e:	bf00      	nop
 8011040:	200110b0 	.word	0x200110b0
 8011044:	200110ac 	.word	0x200110ac
 8011048:	2001107c 	.word	0x2001107c
 801104c:	2001108c 	.word	0x2001108c
 8011050:	200110a0 	.word	0x200110a0
 8011054:	200110a6 	.word	0x200110a6
 8011058:	2001109c 	.word	0x2001109c
 801105c:	2000d920 	.word	0x2000d920
 8011060:	2000d924 	.word	0x2000d924

08011064 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b082      	sub	sp, #8
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d106      	bne.n	8011080 <tcp_input_delayed_close+0x1c>
 8011072:	4b17      	ldr	r3, [pc, #92]	; (80110d0 <tcp_input_delayed_close+0x6c>)
 8011074:	f240 225a 	movw	r2, #602	; 0x25a
 8011078:	4916      	ldr	r1, [pc, #88]	; (80110d4 <tcp_input_delayed_close+0x70>)
 801107a:	4817      	ldr	r0, [pc, #92]	; (80110d8 <tcp_input_delayed_close+0x74>)
 801107c:	f006 f8de 	bl	801723c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011080:	4b16      	ldr	r3, [pc, #88]	; (80110dc <tcp_input_delayed_close+0x78>)
 8011082:	781b      	ldrb	r3, [r3, #0]
 8011084:	f003 0310 	and.w	r3, r3, #16
 8011088:	2b00      	cmp	r3, #0
 801108a:	d01c      	beq.n	80110c6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	8b5b      	ldrh	r3, [r3, #26]
 8011090:	f003 0310 	and.w	r3, r3, #16
 8011094:	2b00      	cmp	r3, #0
 8011096:	d10d      	bne.n	80110b4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d008      	beq.n	80110b4 <tcp_input_delayed_close+0x50>
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110a8:	687a      	ldr	r2, [r7, #4]
 80110aa:	6912      	ldr	r2, [r2, #16]
 80110ac:	f06f 010e 	mvn.w	r1, #14
 80110b0:	4610      	mov	r0, r2
 80110b2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80110b4:	6879      	ldr	r1, [r7, #4]
 80110b6:	480a      	ldr	r0, [pc, #40]	; (80110e0 <tcp_input_delayed_close+0x7c>)
 80110b8:	f7ff fa50 	bl	801055c <tcp_pcb_remove>
    tcp_free(pcb);
 80110bc:	6878      	ldr	r0, [r7, #4]
 80110be:	f7fe f83d 	bl	800f13c <tcp_free>
    return 1;
 80110c2:	2301      	movs	r3, #1
 80110c4:	e000      	b.n	80110c8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80110c6:	2300      	movs	r3, #0
}
 80110c8:	4618      	mov	r0, r3
 80110ca:	3708      	adds	r7, #8
 80110cc:	46bd      	mov	sp, r7
 80110ce:	bd80      	pop	{r7, pc}
 80110d0:	080198c8 	.word	0x080198c8
 80110d4:	08019a98 	.word	0x08019a98
 80110d8:	08019914 	.word	0x08019914
 80110dc:	200110a9 	.word	0x200110a9
 80110e0:	20011070 	.word	0x20011070

080110e4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80110e4:	b590      	push	{r4, r7, lr}
 80110e6:	b08b      	sub	sp, #44	; 0x2c
 80110e8:	af04      	add	r7, sp, #16
 80110ea:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80110ec:	4b6f      	ldr	r3, [pc, #444]	; (80112ac <tcp_listen_input+0x1c8>)
 80110ee:	781b      	ldrb	r3, [r3, #0]
 80110f0:	f003 0304 	and.w	r3, r3, #4
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	f040 80d2 	bne.w	801129e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d106      	bne.n	801110e <tcp_listen_input+0x2a>
 8011100:	4b6b      	ldr	r3, [pc, #428]	; (80112b0 <tcp_listen_input+0x1cc>)
 8011102:	f240 2281 	movw	r2, #641	; 0x281
 8011106:	496b      	ldr	r1, [pc, #428]	; (80112b4 <tcp_listen_input+0x1d0>)
 8011108:	486b      	ldr	r0, [pc, #428]	; (80112b8 <tcp_listen_input+0x1d4>)
 801110a:	f006 f897 	bl	801723c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801110e:	4b67      	ldr	r3, [pc, #412]	; (80112ac <tcp_listen_input+0x1c8>)
 8011110:	781b      	ldrb	r3, [r3, #0]
 8011112:	f003 0310 	and.w	r3, r3, #16
 8011116:	2b00      	cmp	r3, #0
 8011118:	d019      	beq.n	801114e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801111a:	4b68      	ldr	r3, [pc, #416]	; (80112bc <tcp_listen_input+0x1d8>)
 801111c:	6819      	ldr	r1, [r3, #0]
 801111e:	4b68      	ldr	r3, [pc, #416]	; (80112c0 <tcp_listen_input+0x1dc>)
 8011120:	881b      	ldrh	r3, [r3, #0]
 8011122:	461a      	mov	r2, r3
 8011124:	4b67      	ldr	r3, [pc, #412]	; (80112c4 <tcp_listen_input+0x1e0>)
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801112a:	4b67      	ldr	r3, [pc, #412]	; (80112c8 <tcp_listen_input+0x1e4>)
 801112c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801112e:	885b      	ldrh	r3, [r3, #2]
 8011130:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011132:	4a65      	ldr	r2, [pc, #404]	; (80112c8 <tcp_listen_input+0x1e4>)
 8011134:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011136:	8812      	ldrh	r2, [r2, #0]
 8011138:	b292      	uxth	r2, r2
 801113a:	9202      	str	r2, [sp, #8]
 801113c:	9301      	str	r3, [sp, #4]
 801113e:	4b63      	ldr	r3, [pc, #396]	; (80112cc <tcp_listen_input+0x1e8>)
 8011140:	9300      	str	r3, [sp, #0]
 8011142:	4b63      	ldr	r3, [pc, #396]	; (80112d0 <tcp_listen_input+0x1ec>)
 8011144:	4602      	mov	r2, r0
 8011146:	6878      	ldr	r0, [r7, #4]
 8011148:	f002 ff80 	bl	801404c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801114c:	e0a9      	b.n	80112a2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801114e:	4b57      	ldr	r3, [pc, #348]	; (80112ac <tcp_listen_input+0x1c8>)
 8011150:	781b      	ldrb	r3, [r3, #0]
 8011152:	f003 0302 	and.w	r3, r3, #2
 8011156:	2b00      	cmp	r3, #0
 8011158:	f000 80a3 	beq.w	80112a2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	7d5b      	ldrb	r3, [r3, #21]
 8011160:	4618      	mov	r0, r3
 8011162:	f7ff f927 	bl	80103b4 <tcp_alloc>
 8011166:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011168:	697b      	ldr	r3, [r7, #20]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d111      	bne.n	8011192 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	699b      	ldr	r3, [r3, #24]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d00a      	beq.n	801118c <tcp_listen_input+0xa8>
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	699b      	ldr	r3, [r3, #24]
 801117a:	687a      	ldr	r2, [r7, #4]
 801117c:	6910      	ldr	r0, [r2, #16]
 801117e:	f04f 32ff 	mov.w	r2, #4294967295
 8011182:	2100      	movs	r1, #0
 8011184:	4798      	blx	r3
 8011186:	4603      	mov	r3, r0
 8011188:	73bb      	strb	r3, [r7, #14]
      return;
 801118a:	e08b      	b.n	80112a4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801118c:	23f0      	movs	r3, #240	; 0xf0
 801118e:	73bb      	strb	r3, [r7, #14]
      return;
 8011190:	e088      	b.n	80112a4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011192:	4b50      	ldr	r3, [pc, #320]	; (80112d4 <tcp_listen_input+0x1f0>)
 8011194:	695a      	ldr	r2, [r3, #20]
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801119a:	4b4e      	ldr	r3, [pc, #312]	; (80112d4 <tcp_listen_input+0x1f0>)
 801119c:	691a      	ldr	r2, [r3, #16]
 801119e:	697b      	ldr	r3, [r7, #20]
 80111a0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	8ada      	ldrh	r2, [r3, #22]
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80111aa:	4b47      	ldr	r3, [pc, #284]	; (80112c8 <tcp_listen_input+0x1e4>)
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	881b      	ldrh	r3, [r3, #0]
 80111b0:	b29a      	uxth	r2, r3
 80111b2:	697b      	ldr	r3, [r7, #20]
 80111b4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	2203      	movs	r2, #3
 80111ba:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80111bc:	4b41      	ldr	r3, [pc, #260]	; (80112c4 <tcp_listen_input+0x1e0>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	1c5a      	adds	r2, r3, #1
 80111c2:	697b      	ldr	r3, [r7, #20]
 80111c4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80111c6:	697b      	ldr	r3, [r7, #20]
 80111c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80111ca:	697b      	ldr	r3, [r7, #20]
 80111cc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80111ce:	6978      	ldr	r0, [r7, #20]
 80111d0:	f7ff fa58 	bl	8010684 <tcp_next_iss>
 80111d4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80111d6:	697b      	ldr	r3, [r7, #20]
 80111d8:	693a      	ldr	r2, [r7, #16]
 80111da:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80111dc:	697b      	ldr	r3, [r7, #20]
 80111de:	693a      	ldr	r2, [r7, #16]
 80111e0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80111e2:	697b      	ldr	r3, [r7, #20]
 80111e4:	693a      	ldr	r2, [r7, #16]
 80111e6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80111e8:	697b      	ldr	r3, [r7, #20]
 80111ea:	693a      	ldr	r2, [r7, #16]
 80111ec:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80111ee:	4b35      	ldr	r3, [pc, #212]	; (80112c4 <tcp_listen_input+0x1e0>)
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	1e5a      	subs	r2, r3, #1
 80111f4:	697b      	ldr	r3, [r7, #20]
 80111f6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	691a      	ldr	r2, [r3, #16]
 80111fc:	697b      	ldr	r3, [r7, #20]
 80111fe:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011200:	697b      	ldr	r3, [r7, #20]
 8011202:	687a      	ldr	r2, [r7, #4]
 8011204:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	7a5b      	ldrb	r3, [r3, #9]
 801120a:	f003 030c 	and.w	r3, r3, #12
 801120e:	b2da      	uxtb	r2, r3
 8011210:	697b      	ldr	r3, [r7, #20]
 8011212:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	7a1a      	ldrb	r2, [r3, #8]
 8011218:	697b      	ldr	r3, [r7, #20]
 801121a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801121c:	4b2e      	ldr	r3, [pc, #184]	; (80112d8 <tcp_listen_input+0x1f4>)
 801121e:	681a      	ldr	r2, [r3, #0]
 8011220:	697b      	ldr	r3, [r7, #20]
 8011222:	60da      	str	r2, [r3, #12]
 8011224:	4a2c      	ldr	r2, [pc, #176]	; (80112d8 <tcp_listen_input+0x1f4>)
 8011226:	697b      	ldr	r3, [r7, #20]
 8011228:	6013      	str	r3, [r2, #0]
 801122a:	f003 f8d1 	bl	80143d0 <tcp_timer_needed>
 801122e:	4b2b      	ldr	r3, [pc, #172]	; (80112dc <tcp_listen_input+0x1f8>)
 8011230:	2201      	movs	r2, #1
 8011232:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011234:	6978      	ldr	r0, [r7, #20]
 8011236:	f001 fd8f 	bl	8012d58 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801123a:	4b23      	ldr	r3, [pc, #140]	; (80112c8 <tcp_listen_input+0x1e4>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	89db      	ldrh	r3, [r3, #14]
 8011240:	b29a      	uxth	r2, r3
 8011242:	697b      	ldr	r3, [r7, #20]
 8011244:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011248:	697b      	ldr	r3, [r7, #20]
 801124a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801124e:	697b      	ldr	r3, [r7, #20]
 8011250:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011254:	697b      	ldr	r3, [r7, #20]
 8011256:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011258:	697b      	ldr	r3, [r7, #20]
 801125a:	3304      	adds	r3, #4
 801125c:	4618      	mov	r0, r3
 801125e:	f004 fcc5 	bl	8015bec <ip4_route>
 8011262:	4601      	mov	r1, r0
 8011264:	697b      	ldr	r3, [r7, #20]
 8011266:	3304      	adds	r3, #4
 8011268:	461a      	mov	r2, r3
 801126a:	4620      	mov	r0, r4
 801126c:	f7ff fa30 	bl	80106d0 <tcp_eff_send_mss_netif>
 8011270:	4603      	mov	r3, r0
 8011272:	461a      	mov	r2, r3
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011278:	2112      	movs	r1, #18
 801127a:	6978      	ldr	r0, [r7, #20]
 801127c:	f002 f844 	bl	8013308 <tcp_enqueue_flags>
 8011280:	4603      	mov	r3, r0
 8011282:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011284:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d004      	beq.n	8011296 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801128c:	2100      	movs	r1, #0
 801128e:	6978      	ldr	r0, [r7, #20]
 8011290:	f7fe f97e 	bl	800f590 <tcp_abandon>
      return;
 8011294:	e006      	b.n	80112a4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8011296:	6978      	ldr	r0, [r7, #20]
 8011298:	f002 f924 	bl	80134e4 <tcp_output>
  return;
 801129c:	e001      	b.n	80112a2 <tcp_listen_input+0x1be>
    return;
 801129e:	bf00      	nop
 80112a0:	e000      	b.n	80112a4 <tcp_listen_input+0x1c0>
  return;
 80112a2:	bf00      	nop
}
 80112a4:	371c      	adds	r7, #28
 80112a6:	46bd      	mov	sp, r7
 80112a8:	bd90      	pop	{r4, r7, pc}
 80112aa:	bf00      	nop
 80112ac:	200110a8 	.word	0x200110a8
 80112b0:	080198c8 	.word	0x080198c8
 80112b4:	08019ac0 	.word	0x08019ac0
 80112b8:	08019914 	.word	0x08019914
 80112bc:	200110a0 	.word	0x200110a0
 80112c0:	200110a6 	.word	0x200110a6
 80112c4:	2001109c 	.word	0x2001109c
 80112c8:	2001108c 	.word	0x2001108c
 80112cc:	2000d920 	.word	0x2000d920
 80112d0:	2000d924 	.word	0x2000d924
 80112d4:	2000d910 	.word	0x2000d910
 80112d8:	20011070 	.word	0x20011070
 80112dc:	20011078 	.word	0x20011078

080112e0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b086      	sub	sp, #24
 80112e4:	af04      	add	r7, sp, #16
 80112e6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80112e8:	4b2f      	ldr	r3, [pc, #188]	; (80113a8 <tcp_timewait_input+0xc8>)
 80112ea:	781b      	ldrb	r3, [r3, #0]
 80112ec:	f003 0304 	and.w	r3, r3, #4
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d153      	bne.n	801139c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d106      	bne.n	8011308 <tcp_timewait_input+0x28>
 80112fa:	4b2c      	ldr	r3, [pc, #176]	; (80113ac <tcp_timewait_input+0xcc>)
 80112fc:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011300:	492b      	ldr	r1, [pc, #172]	; (80113b0 <tcp_timewait_input+0xd0>)
 8011302:	482c      	ldr	r0, [pc, #176]	; (80113b4 <tcp_timewait_input+0xd4>)
 8011304:	f005 ff9a 	bl	801723c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011308:	4b27      	ldr	r3, [pc, #156]	; (80113a8 <tcp_timewait_input+0xc8>)
 801130a:	781b      	ldrb	r3, [r3, #0]
 801130c:	f003 0302 	and.w	r3, r3, #2
 8011310:	2b00      	cmp	r3, #0
 8011312:	d02a      	beq.n	801136a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011314:	4b28      	ldr	r3, [pc, #160]	; (80113b8 <tcp_timewait_input+0xd8>)
 8011316:	681a      	ldr	r2, [r3, #0]
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801131c:	1ad3      	subs	r3, r2, r3
 801131e:	2b00      	cmp	r3, #0
 8011320:	db2d      	blt.n	801137e <tcp_timewait_input+0x9e>
 8011322:	4b25      	ldr	r3, [pc, #148]	; (80113b8 <tcp_timewait_input+0xd8>)
 8011324:	681a      	ldr	r2, [r3, #0]
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801132a:	6879      	ldr	r1, [r7, #4]
 801132c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801132e:	440b      	add	r3, r1
 8011330:	1ad3      	subs	r3, r2, r3
 8011332:	2b00      	cmp	r3, #0
 8011334:	dc23      	bgt.n	801137e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011336:	4b21      	ldr	r3, [pc, #132]	; (80113bc <tcp_timewait_input+0xdc>)
 8011338:	6819      	ldr	r1, [r3, #0]
 801133a:	4b21      	ldr	r3, [pc, #132]	; (80113c0 <tcp_timewait_input+0xe0>)
 801133c:	881b      	ldrh	r3, [r3, #0]
 801133e:	461a      	mov	r2, r3
 8011340:	4b1d      	ldr	r3, [pc, #116]	; (80113b8 <tcp_timewait_input+0xd8>)
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011346:	4b1f      	ldr	r3, [pc, #124]	; (80113c4 <tcp_timewait_input+0xe4>)
 8011348:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801134a:	885b      	ldrh	r3, [r3, #2]
 801134c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801134e:	4a1d      	ldr	r2, [pc, #116]	; (80113c4 <tcp_timewait_input+0xe4>)
 8011350:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011352:	8812      	ldrh	r2, [r2, #0]
 8011354:	b292      	uxth	r2, r2
 8011356:	9202      	str	r2, [sp, #8]
 8011358:	9301      	str	r3, [sp, #4]
 801135a:	4b1b      	ldr	r3, [pc, #108]	; (80113c8 <tcp_timewait_input+0xe8>)
 801135c:	9300      	str	r3, [sp, #0]
 801135e:	4b1b      	ldr	r3, [pc, #108]	; (80113cc <tcp_timewait_input+0xec>)
 8011360:	4602      	mov	r2, r0
 8011362:	6878      	ldr	r0, [r7, #4]
 8011364:	f002 fe72 	bl	801404c <tcp_rst>
      return;
 8011368:	e01b      	b.n	80113a2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801136a:	4b0f      	ldr	r3, [pc, #60]	; (80113a8 <tcp_timewait_input+0xc8>)
 801136c:	781b      	ldrb	r3, [r3, #0]
 801136e:	f003 0301 	and.w	r3, r3, #1
 8011372:	2b00      	cmp	r3, #0
 8011374:	d003      	beq.n	801137e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011376:	4b16      	ldr	r3, [pc, #88]	; (80113d0 <tcp_timewait_input+0xf0>)
 8011378:	681a      	ldr	r2, [r3, #0]
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801137e:	4b10      	ldr	r3, [pc, #64]	; (80113c0 <tcp_timewait_input+0xe0>)
 8011380:	881b      	ldrh	r3, [r3, #0]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d00c      	beq.n	80113a0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	8b5b      	ldrh	r3, [r3, #26]
 801138a:	f043 0302 	orr.w	r3, r3, #2
 801138e:	b29a      	uxth	r2, r3
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011394:	6878      	ldr	r0, [r7, #4]
 8011396:	f002 f8a5 	bl	80134e4 <tcp_output>
  }
  return;
 801139a:	e001      	b.n	80113a0 <tcp_timewait_input+0xc0>
    return;
 801139c:	bf00      	nop
 801139e:	e000      	b.n	80113a2 <tcp_timewait_input+0xc2>
  return;
 80113a0:	bf00      	nop
}
 80113a2:	3708      	adds	r7, #8
 80113a4:	46bd      	mov	sp, r7
 80113a6:	bd80      	pop	{r7, pc}
 80113a8:	200110a8 	.word	0x200110a8
 80113ac:	080198c8 	.word	0x080198c8
 80113b0:	08019ae0 	.word	0x08019ae0
 80113b4:	08019914 	.word	0x08019914
 80113b8:	2001109c 	.word	0x2001109c
 80113bc:	200110a0 	.word	0x200110a0
 80113c0:	200110a6 	.word	0x200110a6
 80113c4:	2001108c 	.word	0x2001108c
 80113c8:	2000d920 	.word	0x2000d920
 80113cc:	2000d924 	.word	0x2000d924
 80113d0:	20011064 	.word	0x20011064

080113d4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80113d4:	b590      	push	{r4, r7, lr}
 80113d6:	b08d      	sub	sp, #52	; 0x34
 80113d8:	af04      	add	r7, sp, #16
 80113da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80113dc:	2300      	movs	r3, #0
 80113de:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80113e0:	2300      	movs	r3, #0
 80113e2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d106      	bne.n	80113f8 <tcp_process+0x24>
 80113ea:	4b9d      	ldr	r3, [pc, #628]	; (8011660 <tcp_process+0x28c>)
 80113ec:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80113f0:	499c      	ldr	r1, [pc, #624]	; (8011664 <tcp_process+0x290>)
 80113f2:	489d      	ldr	r0, [pc, #628]	; (8011668 <tcp_process+0x294>)
 80113f4:	f005 ff22 	bl	801723c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80113f8:	4b9c      	ldr	r3, [pc, #624]	; (801166c <tcp_process+0x298>)
 80113fa:	781b      	ldrb	r3, [r3, #0]
 80113fc:	f003 0304 	and.w	r3, r3, #4
 8011400:	2b00      	cmp	r3, #0
 8011402:	d04e      	beq.n	80114a2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	7d1b      	ldrb	r3, [r3, #20]
 8011408:	2b02      	cmp	r3, #2
 801140a:	d108      	bne.n	801141e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011410:	4b97      	ldr	r3, [pc, #604]	; (8011670 <tcp_process+0x29c>)
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	429a      	cmp	r2, r3
 8011416:	d123      	bne.n	8011460 <tcp_process+0x8c>
        acceptable = 1;
 8011418:	2301      	movs	r3, #1
 801141a:	76fb      	strb	r3, [r7, #27]
 801141c:	e020      	b.n	8011460 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011422:	4b94      	ldr	r3, [pc, #592]	; (8011674 <tcp_process+0x2a0>)
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	429a      	cmp	r2, r3
 8011428:	d102      	bne.n	8011430 <tcp_process+0x5c>
        acceptable = 1;
 801142a:	2301      	movs	r3, #1
 801142c:	76fb      	strb	r3, [r7, #27]
 801142e:	e017      	b.n	8011460 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011430:	4b90      	ldr	r3, [pc, #576]	; (8011674 <tcp_process+0x2a0>)
 8011432:	681a      	ldr	r2, [r3, #0]
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011438:	1ad3      	subs	r3, r2, r3
 801143a:	2b00      	cmp	r3, #0
 801143c:	db10      	blt.n	8011460 <tcp_process+0x8c>
 801143e:	4b8d      	ldr	r3, [pc, #564]	; (8011674 <tcp_process+0x2a0>)
 8011440:	681a      	ldr	r2, [r3, #0]
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011446:	6879      	ldr	r1, [r7, #4]
 8011448:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801144a:	440b      	add	r3, r1
 801144c:	1ad3      	subs	r3, r2, r3
 801144e:	2b00      	cmp	r3, #0
 8011450:	dc06      	bgt.n	8011460 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	8b5b      	ldrh	r3, [r3, #26]
 8011456:	f043 0302 	orr.w	r3, r3, #2
 801145a:	b29a      	uxth	r2, r3
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011460:	7efb      	ldrb	r3, [r7, #27]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d01b      	beq.n	801149e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	7d1b      	ldrb	r3, [r3, #20]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d106      	bne.n	801147c <tcp_process+0xa8>
 801146e:	4b7c      	ldr	r3, [pc, #496]	; (8011660 <tcp_process+0x28c>)
 8011470:	f44f 724e 	mov.w	r2, #824	; 0x338
 8011474:	4980      	ldr	r1, [pc, #512]	; (8011678 <tcp_process+0x2a4>)
 8011476:	487c      	ldr	r0, [pc, #496]	; (8011668 <tcp_process+0x294>)
 8011478:	f005 fee0 	bl	801723c <iprintf>
      recv_flags |= TF_RESET;
 801147c:	4b7f      	ldr	r3, [pc, #508]	; (801167c <tcp_process+0x2a8>)
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	f043 0308 	orr.w	r3, r3, #8
 8011484:	b2da      	uxtb	r2, r3
 8011486:	4b7d      	ldr	r3, [pc, #500]	; (801167c <tcp_process+0x2a8>)
 8011488:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	8b5b      	ldrh	r3, [r3, #26]
 801148e:	f023 0301 	bic.w	r3, r3, #1
 8011492:	b29a      	uxth	r2, r3
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011498:	f06f 030d 	mvn.w	r3, #13
 801149c:	e37a      	b.n	8011b94 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801149e:	2300      	movs	r3, #0
 80114a0:	e378      	b.n	8011b94 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80114a2:	4b72      	ldr	r3, [pc, #456]	; (801166c <tcp_process+0x298>)
 80114a4:	781b      	ldrb	r3, [r3, #0]
 80114a6:	f003 0302 	and.w	r3, r3, #2
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d010      	beq.n	80114d0 <tcp_process+0xfc>
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	7d1b      	ldrb	r3, [r3, #20]
 80114b2:	2b02      	cmp	r3, #2
 80114b4:	d00c      	beq.n	80114d0 <tcp_process+0xfc>
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	7d1b      	ldrb	r3, [r3, #20]
 80114ba:	2b03      	cmp	r3, #3
 80114bc:	d008      	beq.n	80114d0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	8b5b      	ldrh	r3, [r3, #26]
 80114c2:	f043 0302 	orr.w	r3, r3, #2
 80114c6:	b29a      	uxth	r2, r3
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80114cc:	2300      	movs	r3, #0
 80114ce:	e361      	b.n	8011b94 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	8b5b      	ldrh	r3, [r3, #26]
 80114d4:	f003 0310 	and.w	r3, r3, #16
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d103      	bne.n	80114e4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80114dc:	4b68      	ldr	r3, [pc, #416]	; (8011680 <tcp_process+0x2ac>)
 80114de:	681a      	ldr	r2, [r3, #0]
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	2200      	movs	r2, #0
 80114e8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	2200      	movs	r2, #0
 80114f0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80114f4:	6878      	ldr	r0, [r7, #4]
 80114f6:	f001 fc2f 	bl	8012d58 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	7d1b      	ldrb	r3, [r3, #20]
 80114fe:	3b02      	subs	r3, #2
 8011500:	2b07      	cmp	r3, #7
 8011502:	f200 8337 	bhi.w	8011b74 <tcp_process+0x7a0>
 8011506:	a201      	add	r2, pc, #4	; (adr r2, 801150c <tcp_process+0x138>)
 8011508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801150c:	0801152d 	.word	0x0801152d
 8011510:	0801175d 	.word	0x0801175d
 8011514:	080118d5 	.word	0x080118d5
 8011518:	080118ff 	.word	0x080118ff
 801151c:	08011a23 	.word	0x08011a23
 8011520:	080118d5 	.word	0x080118d5
 8011524:	08011aaf 	.word	0x08011aaf
 8011528:	08011b3f 	.word	0x08011b3f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801152c:	4b4f      	ldr	r3, [pc, #316]	; (801166c <tcp_process+0x298>)
 801152e:	781b      	ldrb	r3, [r3, #0]
 8011530:	f003 0310 	and.w	r3, r3, #16
 8011534:	2b00      	cmp	r3, #0
 8011536:	f000 80e4 	beq.w	8011702 <tcp_process+0x32e>
 801153a:	4b4c      	ldr	r3, [pc, #304]	; (801166c <tcp_process+0x298>)
 801153c:	781b      	ldrb	r3, [r3, #0]
 801153e:	f003 0302 	and.w	r3, r3, #2
 8011542:	2b00      	cmp	r3, #0
 8011544:	f000 80dd 	beq.w	8011702 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801154c:	1c5a      	adds	r2, r3, #1
 801154e:	4b48      	ldr	r3, [pc, #288]	; (8011670 <tcp_process+0x29c>)
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	429a      	cmp	r2, r3
 8011554:	f040 80d5 	bne.w	8011702 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011558:	4b46      	ldr	r3, [pc, #280]	; (8011674 <tcp_process+0x2a0>)
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	1c5a      	adds	r2, r3, #1
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801156a:	4b41      	ldr	r3, [pc, #260]	; (8011670 <tcp_process+0x29c>)
 801156c:	681a      	ldr	r2, [r3, #0]
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8011572:	4b44      	ldr	r3, [pc, #272]	; (8011684 <tcp_process+0x2b0>)
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	89db      	ldrh	r3, [r3, #14]
 8011578:	b29a      	uxth	r2, r3
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801158c:	4b39      	ldr	r3, [pc, #228]	; (8011674 <tcp_process+0x2a0>)
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	1e5a      	subs	r2, r3, #1
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	2204      	movs	r2, #4
 801159a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	3304      	adds	r3, #4
 80115a4:	4618      	mov	r0, r3
 80115a6:	f004 fb21 	bl	8015bec <ip4_route>
 80115aa:	4601      	mov	r1, r0
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	3304      	adds	r3, #4
 80115b0:	461a      	mov	r2, r3
 80115b2:	4620      	mov	r0, r4
 80115b4:	f7ff f88c 	bl	80106d0 <tcp_eff_send_mss_netif>
 80115b8:	4603      	mov	r3, r0
 80115ba:	461a      	mov	r2, r3
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115c4:	009a      	lsls	r2, r3, #2
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115ca:	005b      	lsls	r3, r3, #1
 80115cc:	f241 111c 	movw	r1, #4380	; 0x111c
 80115d0:	428b      	cmp	r3, r1
 80115d2:	bf38      	it	cc
 80115d4:	460b      	movcc	r3, r1
 80115d6:	429a      	cmp	r2, r3
 80115d8:	d204      	bcs.n	80115e4 <tcp_process+0x210>
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115de:	009b      	lsls	r3, r3, #2
 80115e0:	b29b      	uxth	r3, r3
 80115e2:	e00d      	b.n	8011600 <tcp_process+0x22c>
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115e8:	005b      	lsls	r3, r3, #1
 80115ea:	f241 121c 	movw	r2, #4380	; 0x111c
 80115ee:	4293      	cmp	r3, r2
 80115f0:	d904      	bls.n	80115fc <tcp_process+0x228>
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115f6:	005b      	lsls	r3, r3, #1
 80115f8:	b29b      	uxth	r3, r3
 80115fa:	e001      	b.n	8011600 <tcp_process+0x22c>
 80115fc:	f241 131c 	movw	r3, #4380	; 0x111c
 8011600:	687a      	ldr	r2, [r7, #4]
 8011602:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801160c:	2b00      	cmp	r3, #0
 801160e:	d106      	bne.n	801161e <tcp_process+0x24a>
 8011610:	4b13      	ldr	r3, [pc, #76]	; (8011660 <tcp_process+0x28c>)
 8011612:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8011616:	491c      	ldr	r1, [pc, #112]	; (8011688 <tcp_process+0x2b4>)
 8011618:	4813      	ldr	r0, [pc, #76]	; (8011668 <tcp_process+0x294>)
 801161a:	f005 fe0f 	bl	801723c <iprintf>
        --pcb->snd_queuelen;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011624:	3b01      	subs	r3, #1
 8011626:	b29a      	uxth	r2, r3
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011632:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8011634:	69fb      	ldr	r3, [r7, #28]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d12a      	bne.n	8011690 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801163e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011640:	69fb      	ldr	r3, [r7, #28]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d106      	bne.n	8011654 <tcp_process+0x280>
 8011646:	4b06      	ldr	r3, [pc, #24]	; (8011660 <tcp_process+0x28c>)
 8011648:	f44f 725d 	mov.w	r2, #884	; 0x374
 801164c:	490f      	ldr	r1, [pc, #60]	; (801168c <tcp_process+0x2b8>)
 801164e:	4806      	ldr	r0, [pc, #24]	; (8011668 <tcp_process+0x294>)
 8011650:	f005 fdf4 	bl	801723c <iprintf>
          pcb->unsent = rseg->next;
 8011654:	69fb      	ldr	r3, [r7, #28]
 8011656:	681a      	ldr	r2, [r3, #0]
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	66da      	str	r2, [r3, #108]	; 0x6c
 801165c:	e01c      	b.n	8011698 <tcp_process+0x2c4>
 801165e:	bf00      	nop
 8011660:	080198c8 	.word	0x080198c8
 8011664:	08019b00 	.word	0x08019b00
 8011668:	08019914 	.word	0x08019914
 801166c:	200110a8 	.word	0x200110a8
 8011670:	200110a0 	.word	0x200110a0
 8011674:	2001109c 	.word	0x2001109c
 8011678:	08019b1c 	.word	0x08019b1c
 801167c:	200110a9 	.word	0x200110a9
 8011680:	20011064 	.word	0x20011064
 8011684:	2001108c 	.word	0x2001108c
 8011688:	08019b3c 	.word	0x08019b3c
 801168c:	08019b54 	.word	0x08019b54
        } else {
          pcb->unacked = rseg->next;
 8011690:	69fb      	ldr	r3, [r7, #28]
 8011692:	681a      	ldr	r2, [r3, #0]
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011698:	69f8      	ldr	r0, [r7, #28]
 801169a:	f7fe fd22 	bl	80100e2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d104      	bne.n	80116b0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80116ac:	861a      	strh	r2, [r3, #48]	; 0x30
 80116ae:	e006      	b.n	80116be <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2200      	movs	r2, #0
 80116b4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	2200      	movs	r2, #0
 80116ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d00a      	beq.n	80116de <tcp_process+0x30a>
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80116ce:	687a      	ldr	r2, [r7, #4]
 80116d0:	6910      	ldr	r0, [r2, #16]
 80116d2:	2200      	movs	r2, #0
 80116d4:	6879      	ldr	r1, [r7, #4]
 80116d6:	4798      	blx	r3
 80116d8:	4603      	mov	r3, r0
 80116da:	76bb      	strb	r3, [r7, #26]
 80116dc:	e001      	b.n	80116e2 <tcp_process+0x30e>
 80116de:	2300      	movs	r3, #0
 80116e0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80116e2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80116e6:	f113 0f0d 	cmn.w	r3, #13
 80116ea:	d102      	bne.n	80116f2 <tcp_process+0x31e>
          return ERR_ABRT;
 80116ec:	f06f 030c 	mvn.w	r3, #12
 80116f0:	e250      	b.n	8011b94 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	8b5b      	ldrh	r3, [r3, #26]
 80116f6:	f043 0302 	orr.w	r3, r3, #2
 80116fa:	b29a      	uxth	r2, r3
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011700:	e23a      	b.n	8011b78 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8011702:	4b98      	ldr	r3, [pc, #608]	; (8011964 <tcp_process+0x590>)
 8011704:	781b      	ldrb	r3, [r3, #0]
 8011706:	f003 0310 	and.w	r3, r3, #16
 801170a:	2b00      	cmp	r3, #0
 801170c:	f000 8234 	beq.w	8011b78 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011710:	4b95      	ldr	r3, [pc, #596]	; (8011968 <tcp_process+0x594>)
 8011712:	6819      	ldr	r1, [r3, #0]
 8011714:	4b95      	ldr	r3, [pc, #596]	; (801196c <tcp_process+0x598>)
 8011716:	881b      	ldrh	r3, [r3, #0]
 8011718:	461a      	mov	r2, r3
 801171a:	4b95      	ldr	r3, [pc, #596]	; (8011970 <tcp_process+0x59c>)
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011720:	4b94      	ldr	r3, [pc, #592]	; (8011974 <tcp_process+0x5a0>)
 8011722:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011724:	885b      	ldrh	r3, [r3, #2]
 8011726:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011728:	4a92      	ldr	r2, [pc, #584]	; (8011974 <tcp_process+0x5a0>)
 801172a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801172c:	8812      	ldrh	r2, [r2, #0]
 801172e:	b292      	uxth	r2, r2
 8011730:	9202      	str	r2, [sp, #8]
 8011732:	9301      	str	r3, [sp, #4]
 8011734:	4b90      	ldr	r3, [pc, #576]	; (8011978 <tcp_process+0x5a4>)
 8011736:	9300      	str	r3, [sp, #0]
 8011738:	4b90      	ldr	r3, [pc, #576]	; (801197c <tcp_process+0x5a8>)
 801173a:	4602      	mov	r2, r0
 801173c:	6878      	ldr	r0, [r7, #4]
 801173e:	f002 fc85 	bl	801404c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011748:	2b05      	cmp	r3, #5
 801174a:	f200 8215 	bhi.w	8011b78 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	2200      	movs	r2, #0
 8011752:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8011754:	6878      	ldr	r0, [r7, #4]
 8011756:	f002 fa4f 	bl	8013bf8 <tcp_rexmit_rto>
      break;
 801175a:	e20d      	b.n	8011b78 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801175c:	4b81      	ldr	r3, [pc, #516]	; (8011964 <tcp_process+0x590>)
 801175e:	781b      	ldrb	r3, [r3, #0]
 8011760:	f003 0310 	and.w	r3, r3, #16
 8011764:	2b00      	cmp	r3, #0
 8011766:	f000 80a1 	beq.w	80118ac <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801176a:	4b7f      	ldr	r3, [pc, #508]	; (8011968 <tcp_process+0x594>)
 801176c:	681a      	ldr	r2, [r3, #0]
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011772:	1ad3      	subs	r3, r2, r3
 8011774:	3b01      	subs	r3, #1
 8011776:	2b00      	cmp	r3, #0
 8011778:	db7e      	blt.n	8011878 <tcp_process+0x4a4>
 801177a:	4b7b      	ldr	r3, [pc, #492]	; (8011968 <tcp_process+0x594>)
 801177c:	681a      	ldr	r2, [r3, #0]
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011782:	1ad3      	subs	r3, r2, r3
 8011784:	2b00      	cmp	r3, #0
 8011786:	dc77      	bgt.n	8011878 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2204      	movs	r2, #4
 801178c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011792:	2b00      	cmp	r3, #0
 8011794:	d102      	bne.n	801179c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011796:	23fa      	movs	r3, #250	; 0xfa
 8011798:	76bb      	strb	r3, [r7, #26]
 801179a:	e01d      	b.n	80117d8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80117a0:	699b      	ldr	r3, [r3, #24]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d106      	bne.n	80117b4 <tcp_process+0x3e0>
 80117a6:	4b76      	ldr	r3, [pc, #472]	; (8011980 <tcp_process+0x5ac>)
 80117a8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80117ac:	4975      	ldr	r1, [pc, #468]	; (8011984 <tcp_process+0x5b0>)
 80117ae:	4876      	ldr	r0, [pc, #472]	; (8011988 <tcp_process+0x5b4>)
 80117b0:	f005 fd44 	bl	801723c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80117b8:	699b      	ldr	r3, [r3, #24]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d00a      	beq.n	80117d4 <tcp_process+0x400>
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80117c2:	699b      	ldr	r3, [r3, #24]
 80117c4:	687a      	ldr	r2, [r7, #4]
 80117c6:	6910      	ldr	r0, [r2, #16]
 80117c8:	2200      	movs	r2, #0
 80117ca:	6879      	ldr	r1, [r7, #4]
 80117cc:	4798      	blx	r3
 80117ce:	4603      	mov	r3, r0
 80117d0:	76bb      	strb	r3, [r7, #26]
 80117d2:	e001      	b.n	80117d8 <tcp_process+0x404>
 80117d4:	23f0      	movs	r3, #240	; 0xf0
 80117d6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80117d8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d00a      	beq.n	80117f6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80117e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80117e4:	f113 0f0d 	cmn.w	r3, #13
 80117e8:	d002      	beq.n	80117f0 <tcp_process+0x41c>
              tcp_abort(pcb);
 80117ea:	6878      	ldr	r0, [r7, #4]
 80117ec:	f7fd ff8e 	bl	800f70c <tcp_abort>
            }
            return ERR_ABRT;
 80117f0:	f06f 030c 	mvn.w	r3, #12
 80117f4:	e1ce      	b.n	8011b94 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	f000 fae0 	bl	8011dbc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80117fc:	4b63      	ldr	r3, [pc, #396]	; (801198c <tcp_process+0x5b8>)
 80117fe:	881b      	ldrh	r3, [r3, #0]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d005      	beq.n	8011810 <tcp_process+0x43c>
            recv_acked--;
 8011804:	4b61      	ldr	r3, [pc, #388]	; (801198c <tcp_process+0x5b8>)
 8011806:	881b      	ldrh	r3, [r3, #0]
 8011808:	3b01      	subs	r3, #1
 801180a:	b29a      	uxth	r2, r3
 801180c:	4b5f      	ldr	r3, [pc, #380]	; (801198c <tcp_process+0x5b8>)
 801180e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011814:	009a      	lsls	r2, r3, #2
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801181a:	005b      	lsls	r3, r3, #1
 801181c:	f241 111c 	movw	r1, #4380	; 0x111c
 8011820:	428b      	cmp	r3, r1
 8011822:	bf38      	it	cc
 8011824:	460b      	movcc	r3, r1
 8011826:	429a      	cmp	r2, r3
 8011828:	d204      	bcs.n	8011834 <tcp_process+0x460>
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801182e:	009b      	lsls	r3, r3, #2
 8011830:	b29b      	uxth	r3, r3
 8011832:	e00d      	b.n	8011850 <tcp_process+0x47c>
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011838:	005b      	lsls	r3, r3, #1
 801183a:	f241 121c 	movw	r2, #4380	; 0x111c
 801183e:	4293      	cmp	r3, r2
 8011840:	d904      	bls.n	801184c <tcp_process+0x478>
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011846:	005b      	lsls	r3, r3, #1
 8011848:	b29b      	uxth	r3, r3
 801184a:	e001      	b.n	8011850 <tcp_process+0x47c>
 801184c:	f241 131c 	movw	r3, #4380	; 0x111c
 8011850:	687a      	ldr	r2, [r7, #4]
 8011852:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011856:	4b4e      	ldr	r3, [pc, #312]	; (8011990 <tcp_process+0x5bc>)
 8011858:	781b      	ldrb	r3, [r3, #0]
 801185a:	f003 0320 	and.w	r3, r3, #32
 801185e:	2b00      	cmp	r3, #0
 8011860:	d037      	beq.n	80118d2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	8b5b      	ldrh	r3, [r3, #26]
 8011866:	f043 0302 	orr.w	r3, r3, #2
 801186a:	b29a      	uxth	r2, r3
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	2207      	movs	r2, #7
 8011874:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011876:	e02c      	b.n	80118d2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011878:	4b3b      	ldr	r3, [pc, #236]	; (8011968 <tcp_process+0x594>)
 801187a:	6819      	ldr	r1, [r3, #0]
 801187c:	4b3b      	ldr	r3, [pc, #236]	; (801196c <tcp_process+0x598>)
 801187e:	881b      	ldrh	r3, [r3, #0]
 8011880:	461a      	mov	r2, r3
 8011882:	4b3b      	ldr	r3, [pc, #236]	; (8011970 <tcp_process+0x59c>)
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011888:	4b3a      	ldr	r3, [pc, #232]	; (8011974 <tcp_process+0x5a0>)
 801188a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801188c:	885b      	ldrh	r3, [r3, #2]
 801188e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011890:	4a38      	ldr	r2, [pc, #224]	; (8011974 <tcp_process+0x5a0>)
 8011892:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011894:	8812      	ldrh	r2, [r2, #0]
 8011896:	b292      	uxth	r2, r2
 8011898:	9202      	str	r2, [sp, #8]
 801189a:	9301      	str	r3, [sp, #4]
 801189c:	4b36      	ldr	r3, [pc, #216]	; (8011978 <tcp_process+0x5a4>)
 801189e:	9300      	str	r3, [sp, #0]
 80118a0:	4b36      	ldr	r3, [pc, #216]	; (801197c <tcp_process+0x5a8>)
 80118a2:	4602      	mov	r2, r0
 80118a4:	6878      	ldr	r0, [r7, #4]
 80118a6:	f002 fbd1 	bl	801404c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80118aa:	e167      	b.n	8011b7c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80118ac:	4b2d      	ldr	r3, [pc, #180]	; (8011964 <tcp_process+0x590>)
 80118ae:	781b      	ldrb	r3, [r3, #0]
 80118b0:	f003 0302 	and.w	r3, r3, #2
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	f000 8161 	beq.w	8011b7c <tcp_process+0x7a8>
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118be:	1e5a      	subs	r2, r3, #1
 80118c0:	4b2b      	ldr	r3, [pc, #172]	; (8011970 <tcp_process+0x59c>)
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	429a      	cmp	r2, r3
 80118c6:	f040 8159 	bne.w	8011b7c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80118ca:	6878      	ldr	r0, [r7, #4]
 80118cc:	f002 f9b6 	bl	8013c3c <tcp_rexmit>
      break;
 80118d0:	e154      	b.n	8011b7c <tcp_process+0x7a8>
 80118d2:	e153      	b.n	8011b7c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80118d4:	6878      	ldr	r0, [r7, #4]
 80118d6:	f000 fa71 	bl	8011dbc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80118da:	4b2d      	ldr	r3, [pc, #180]	; (8011990 <tcp_process+0x5bc>)
 80118dc:	781b      	ldrb	r3, [r3, #0]
 80118de:	f003 0320 	and.w	r3, r3, #32
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	f000 814c 	beq.w	8011b80 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	8b5b      	ldrh	r3, [r3, #26]
 80118ec:	f043 0302 	orr.w	r3, r3, #2
 80118f0:	b29a      	uxth	r2, r3
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	2207      	movs	r2, #7
 80118fa:	751a      	strb	r2, [r3, #20]
      }
      break;
 80118fc:	e140      	b.n	8011b80 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80118fe:	6878      	ldr	r0, [r7, #4]
 8011900:	f000 fa5c 	bl	8011dbc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011904:	4b22      	ldr	r3, [pc, #136]	; (8011990 <tcp_process+0x5bc>)
 8011906:	781b      	ldrb	r3, [r3, #0]
 8011908:	f003 0320 	and.w	r3, r3, #32
 801190c:	2b00      	cmp	r3, #0
 801190e:	d071      	beq.n	80119f4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011910:	4b14      	ldr	r3, [pc, #80]	; (8011964 <tcp_process+0x590>)
 8011912:	781b      	ldrb	r3, [r3, #0]
 8011914:	f003 0310 	and.w	r3, r3, #16
 8011918:	2b00      	cmp	r3, #0
 801191a:	d060      	beq.n	80119de <tcp_process+0x60a>
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011920:	4b11      	ldr	r3, [pc, #68]	; (8011968 <tcp_process+0x594>)
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	429a      	cmp	r2, r3
 8011926:	d15a      	bne.n	80119de <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801192c:	2b00      	cmp	r3, #0
 801192e:	d156      	bne.n	80119de <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	8b5b      	ldrh	r3, [r3, #26]
 8011934:	f043 0302 	orr.w	r3, r3, #2
 8011938:	b29a      	uxth	r2, r3
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801193e:	6878      	ldr	r0, [r7, #4]
 8011940:	f7fe fdbc 	bl	80104bc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011944:	4b13      	ldr	r3, [pc, #76]	; (8011994 <tcp_process+0x5c0>)
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	687a      	ldr	r2, [r7, #4]
 801194a:	429a      	cmp	r2, r3
 801194c:	d105      	bne.n	801195a <tcp_process+0x586>
 801194e:	4b11      	ldr	r3, [pc, #68]	; (8011994 <tcp_process+0x5c0>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	68db      	ldr	r3, [r3, #12]
 8011954:	4a0f      	ldr	r2, [pc, #60]	; (8011994 <tcp_process+0x5c0>)
 8011956:	6013      	str	r3, [r2, #0]
 8011958:	e02e      	b.n	80119b8 <tcp_process+0x5e4>
 801195a:	4b0e      	ldr	r3, [pc, #56]	; (8011994 <tcp_process+0x5c0>)
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	617b      	str	r3, [r7, #20]
 8011960:	e027      	b.n	80119b2 <tcp_process+0x5de>
 8011962:	bf00      	nop
 8011964:	200110a8 	.word	0x200110a8
 8011968:	200110a0 	.word	0x200110a0
 801196c:	200110a6 	.word	0x200110a6
 8011970:	2001109c 	.word	0x2001109c
 8011974:	2001108c 	.word	0x2001108c
 8011978:	2000d920 	.word	0x2000d920
 801197c:	2000d924 	.word	0x2000d924
 8011980:	080198c8 	.word	0x080198c8
 8011984:	08019b68 	.word	0x08019b68
 8011988:	08019914 	.word	0x08019914
 801198c:	200110a4 	.word	0x200110a4
 8011990:	200110a9 	.word	0x200110a9
 8011994:	20011070 	.word	0x20011070
 8011998:	697b      	ldr	r3, [r7, #20]
 801199a:	68db      	ldr	r3, [r3, #12]
 801199c:	687a      	ldr	r2, [r7, #4]
 801199e:	429a      	cmp	r2, r3
 80119a0:	d104      	bne.n	80119ac <tcp_process+0x5d8>
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	68da      	ldr	r2, [r3, #12]
 80119a6:	697b      	ldr	r3, [r7, #20]
 80119a8:	60da      	str	r2, [r3, #12]
 80119aa:	e005      	b.n	80119b8 <tcp_process+0x5e4>
 80119ac:	697b      	ldr	r3, [r7, #20]
 80119ae:	68db      	ldr	r3, [r3, #12]
 80119b0:	617b      	str	r3, [r7, #20]
 80119b2:	697b      	ldr	r3, [r7, #20]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d1ef      	bne.n	8011998 <tcp_process+0x5c4>
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	2200      	movs	r2, #0
 80119bc:	60da      	str	r2, [r3, #12]
 80119be:	4b77      	ldr	r3, [pc, #476]	; (8011b9c <tcp_process+0x7c8>)
 80119c0:	2201      	movs	r2, #1
 80119c2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	220a      	movs	r2, #10
 80119c8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80119ca:	4b75      	ldr	r3, [pc, #468]	; (8011ba0 <tcp_process+0x7cc>)
 80119cc:	681a      	ldr	r2, [r3, #0]
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	60da      	str	r2, [r3, #12]
 80119d2:	4a73      	ldr	r2, [pc, #460]	; (8011ba0 <tcp_process+0x7cc>)
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	6013      	str	r3, [r2, #0]
 80119d8:	f002 fcfa 	bl	80143d0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80119dc:	e0d2      	b.n	8011b84 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	8b5b      	ldrh	r3, [r3, #26]
 80119e2:	f043 0302 	orr.w	r3, r3, #2
 80119e6:	b29a      	uxth	r2, r3
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	2208      	movs	r2, #8
 80119f0:	751a      	strb	r2, [r3, #20]
      break;
 80119f2:	e0c7      	b.n	8011b84 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80119f4:	4b6b      	ldr	r3, [pc, #428]	; (8011ba4 <tcp_process+0x7d0>)
 80119f6:	781b      	ldrb	r3, [r3, #0]
 80119f8:	f003 0310 	and.w	r3, r3, #16
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	f000 80c1 	beq.w	8011b84 <tcp_process+0x7b0>
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011a06:	4b68      	ldr	r3, [pc, #416]	; (8011ba8 <tcp_process+0x7d4>)
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	429a      	cmp	r2, r3
 8011a0c:	f040 80ba 	bne.w	8011b84 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	f040 80b5 	bne.w	8011b84 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	2206      	movs	r2, #6
 8011a1e:	751a      	strb	r2, [r3, #20]
      break;
 8011a20:	e0b0      	b.n	8011b84 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	f000 f9ca 	bl	8011dbc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011a28:	4b60      	ldr	r3, [pc, #384]	; (8011bac <tcp_process+0x7d8>)
 8011a2a:	781b      	ldrb	r3, [r3, #0]
 8011a2c:	f003 0320 	and.w	r3, r3, #32
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	f000 80a9 	beq.w	8011b88 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	8b5b      	ldrh	r3, [r3, #26]
 8011a3a:	f043 0302 	orr.w	r3, r3, #2
 8011a3e:	b29a      	uxth	r2, r3
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	f7fe fd39 	bl	80104bc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011a4a:	4b59      	ldr	r3, [pc, #356]	; (8011bb0 <tcp_process+0x7dc>)
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	687a      	ldr	r2, [r7, #4]
 8011a50:	429a      	cmp	r2, r3
 8011a52:	d105      	bne.n	8011a60 <tcp_process+0x68c>
 8011a54:	4b56      	ldr	r3, [pc, #344]	; (8011bb0 <tcp_process+0x7dc>)
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	68db      	ldr	r3, [r3, #12]
 8011a5a:	4a55      	ldr	r2, [pc, #340]	; (8011bb0 <tcp_process+0x7dc>)
 8011a5c:	6013      	str	r3, [r2, #0]
 8011a5e:	e013      	b.n	8011a88 <tcp_process+0x6b4>
 8011a60:	4b53      	ldr	r3, [pc, #332]	; (8011bb0 <tcp_process+0x7dc>)
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	613b      	str	r3, [r7, #16]
 8011a66:	e00c      	b.n	8011a82 <tcp_process+0x6ae>
 8011a68:	693b      	ldr	r3, [r7, #16]
 8011a6a:	68db      	ldr	r3, [r3, #12]
 8011a6c:	687a      	ldr	r2, [r7, #4]
 8011a6e:	429a      	cmp	r2, r3
 8011a70:	d104      	bne.n	8011a7c <tcp_process+0x6a8>
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	68da      	ldr	r2, [r3, #12]
 8011a76:	693b      	ldr	r3, [r7, #16]
 8011a78:	60da      	str	r2, [r3, #12]
 8011a7a:	e005      	b.n	8011a88 <tcp_process+0x6b4>
 8011a7c:	693b      	ldr	r3, [r7, #16]
 8011a7e:	68db      	ldr	r3, [r3, #12]
 8011a80:	613b      	str	r3, [r7, #16]
 8011a82:	693b      	ldr	r3, [r7, #16]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d1ef      	bne.n	8011a68 <tcp_process+0x694>
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	60da      	str	r2, [r3, #12]
 8011a8e:	4b43      	ldr	r3, [pc, #268]	; (8011b9c <tcp_process+0x7c8>)
 8011a90:	2201      	movs	r2, #1
 8011a92:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	220a      	movs	r2, #10
 8011a98:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011a9a:	4b41      	ldr	r3, [pc, #260]	; (8011ba0 <tcp_process+0x7cc>)
 8011a9c:	681a      	ldr	r2, [r3, #0]
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	60da      	str	r2, [r3, #12]
 8011aa2:	4a3f      	ldr	r2, [pc, #252]	; (8011ba0 <tcp_process+0x7cc>)
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	6013      	str	r3, [r2, #0]
 8011aa8:	f002 fc92 	bl	80143d0 <tcp_timer_needed>
      }
      break;
 8011aac:	e06c      	b.n	8011b88 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011aae:	6878      	ldr	r0, [r7, #4]
 8011ab0:	f000 f984 	bl	8011dbc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011ab4:	4b3b      	ldr	r3, [pc, #236]	; (8011ba4 <tcp_process+0x7d0>)
 8011ab6:	781b      	ldrb	r3, [r3, #0]
 8011ab8:	f003 0310 	and.w	r3, r3, #16
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d065      	beq.n	8011b8c <tcp_process+0x7b8>
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011ac4:	4b38      	ldr	r3, [pc, #224]	; (8011ba8 <tcp_process+0x7d4>)
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	429a      	cmp	r2, r3
 8011aca:	d15f      	bne.n	8011b8c <tcp_process+0x7b8>
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d15b      	bne.n	8011b8c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011ad4:	6878      	ldr	r0, [r7, #4]
 8011ad6:	f7fe fcf1 	bl	80104bc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011ada:	4b35      	ldr	r3, [pc, #212]	; (8011bb0 <tcp_process+0x7dc>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	687a      	ldr	r2, [r7, #4]
 8011ae0:	429a      	cmp	r2, r3
 8011ae2:	d105      	bne.n	8011af0 <tcp_process+0x71c>
 8011ae4:	4b32      	ldr	r3, [pc, #200]	; (8011bb0 <tcp_process+0x7dc>)
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	68db      	ldr	r3, [r3, #12]
 8011aea:	4a31      	ldr	r2, [pc, #196]	; (8011bb0 <tcp_process+0x7dc>)
 8011aec:	6013      	str	r3, [r2, #0]
 8011aee:	e013      	b.n	8011b18 <tcp_process+0x744>
 8011af0:	4b2f      	ldr	r3, [pc, #188]	; (8011bb0 <tcp_process+0x7dc>)
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	60fb      	str	r3, [r7, #12]
 8011af6:	e00c      	b.n	8011b12 <tcp_process+0x73e>
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	68db      	ldr	r3, [r3, #12]
 8011afc:	687a      	ldr	r2, [r7, #4]
 8011afe:	429a      	cmp	r2, r3
 8011b00:	d104      	bne.n	8011b0c <tcp_process+0x738>
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	68da      	ldr	r2, [r3, #12]
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	60da      	str	r2, [r3, #12]
 8011b0a:	e005      	b.n	8011b18 <tcp_process+0x744>
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	68db      	ldr	r3, [r3, #12]
 8011b10:	60fb      	str	r3, [r7, #12]
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d1ef      	bne.n	8011af8 <tcp_process+0x724>
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	60da      	str	r2, [r3, #12]
 8011b1e:	4b1f      	ldr	r3, [pc, #124]	; (8011b9c <tcp_process+0x7c8>)
 8011b20:	2201      	movs	r2, #1
 8011b22:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	220a      	movs	r2, #10
 8011b28:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011b2a:	4b1d      	ldr	r3, [pc, #116]	; (8011ba0 <tcp_process+0x7cc>)
 8011b2c:	681a      	ldr	r2, [r3, #0]
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	60da      	str	r2, [r3, #12]
 8011b32:	4a1b      	ldr	r2, [pc, #108]	; (8011ba0 <tcp_process+0x7cc>)
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	6013      	str	r3, [r2, #0]
 8011b38:	f002 fc4a 	bl	80143d0 <tcp_timer_needed>
      }
      break;
 8011b3c:	e026      	b.n	8011b8c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011b3e:	6878      	ldr	r0, [r7, #4]
 8011b40:	f000 f93c 	bl	8011dbc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011b44:	4b17      	ldr	r3, [pc, #92]	; (8011ba4 <tcp_process+0x7d0>)
 8011b46:	781b      	ldrb	r3, [r3, #0]
 8011b48:	f003 0310 	and.w	r3, r3, #16
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d01f      	beq.n	8011b90 <tcp_process+0x7bc>
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011b54:	4b14      	ldr	r3, [pc, #80]	; (8011ba8 <tcp_process+0x7d4>)
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	429a      	cmp	r2, r3
 8011b5a:	d119      	bne.n	8011b90 <tcp_process+0x7bc>
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d115      	bne.n	8011b90 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011b64:	4b11      	ldr	r3, [pc, #68]	; (8011bac <tcp_process+0x7d8>)
 8011b66:	781b      	ldrb	r3, [r3, #0]
 8011b68:	f043 0310 	orr.w	r3, r3, #16
 8011b6c:	b2da      	uxtb	r2, r3
 8011b6e:	4b0f      	ldr	r3, [pc, #60]	; (8011bac <tcp_process+0x7d8>)
 8011b70:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011b72:	e00d      	b.n	8011b90 <tcp_process+0x7bc>
    default:
      break;
 8011b74:	bf00      	nop
 8011b76:	e00c      	b.n	8011b92 <tcp_process+0x7be>
      break;
 8011b78:	bf00      	nop
 8011b7a:	e00a      	b.n	8011b92 <tcp_process+0x7be>
      break;
 8011b7c:	bf00      	nop
 8011b7e:	e008      	b.n	8011b92 <tcp_process+0x7be>
      break;
 8011b80:	bf00      	nop
 8011b82:	e006      	b.n	8011b92 <tcp_process+0x7be>
      break;
 8011b84:	bf00      	nop
 8011b86:	e004      	b.n	8011b92 <tcp_process+0x7be>
      break;
 8011b88:	bf00      	nop
 8011b8a:	e002      	b.n	8011b92 <tcp_process+0x7be>
      break;
 8011b8c:	bf00      	nop
 8011b8e:	e000      	b.n	8011b92 <tcp_process+0x7be>
      break;
 8011b90:	bf00      	nop
  }
  return ERR_OK;
 8011b92:	2300      	movs	r3, #0
}
 8011b94:	4618      	mov	r0, r3
 8011b96:	3724      	adds	r7, #36	; 0x24
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	bd90      	pop	{r4, r7, pc}
 8011b9c:	20011078 	.word	0x20011078
 8011ba0:	20011074 	.word	0x20011074
 8011ba4:	200110a8 	.word	0x200110a8
 8011ba8:	200110a0 	.word	0x200110a0
 8011bac:	200110a9 	.word	0x200110a9
 8011bb0:	20011070 	.word	0x20011070

08011bb4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011bb4:	b590      	push	{r4, r7, lr}
 8011bb6:	b085      	sub	sp, #20
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
 8011bbc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d106      	bne.n	8011bd2 <tcp_oos_insert_segment+0x1e>
 8011bc4:	4b3b      	ldr	r3, [pc, #236]	; (8011cb4 <tcp_oos_insert_segment+0x100>)
 8011bc6:	f240 421f 	movw	r2, #1055	; 0x41f
 8011bca:	493b      	ldr	r1, [pc, #236]	; (8011cb8 <tcp_oos_insert_segment+0x104>)
 8011bcc:	483b      	ldr	r0, [pc, #236]	; (8011cbc <tcp_oos_insert_segment+0x108>)
 8011bce:	f005 fb35 	bl	801723c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	68db      	ldr	r3, [r3, #12]
 8011bd6:	899b      	ldrh	r3, [r3, #12]
 8011bd8:	b29b      	uxth	r3, r3
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f7fb fc10 	bl	800d400 <lwip_htons>
 8011be0:	4603      	mov	r3, r0
 8011be2:	b2db      	uxtb	r3, r3
 8011be4:	f003 0301 	and.w	r3, r3, #1
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d028      	beq.n	8011c3e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011bec:	6838      	ldr	r0, [r7, #0]
 8011bee:	f7fe fa63 	bl	80100b8 <tcp_segs_free>
    next = NULL;
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	603b      	str	r3, [r7, #0]
 8011bf6:	e056      	b.n	8011ca6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011bf8:	683b      	ldr	r3, [r7, #0]
 8011bfa:	68db      	ldr	r3, [r3, #12]
 8011bfc:	899b      	ldrh	r3, [r3, #12]
 8011bfe:	b29b      	uxth	r3, r3
 8011c00:	4618      	mov	r0, r3
 8011c02:	f7fb fbfd 	bl	800d400 <lwip_htons>
 8011c06:	4603      	mov	r3, r0
 8011c08:	b2db      	uxtb	r3, r3
 8011c0a:	f003 0301 	and.w	r3, r3, #1
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d00d      	beq.n	8011c2e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	68db      	ldr	r3, [r3, #12]
 8011c16:	899b      	ldrh	r3, [r3, #12]
 8011c18:	b29c      	uxth	r4, r3
 8011c1a:	2001      	movs	r0, #1
 8011c1c:	f7fb fbf0 	bl	800d400 <lwip_htons>
 8011c20:	4603      	mov	r3, r0
 8011c22:	461a      	mov	r2, r3
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	68db      	ldr	r3, [r3, #12]
 8011c28:	4322      	orrs	r2, r4
 8011c2a:	b292      	uxth	r2, r2
 8011c2c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011c2e:	683b      	ldr	r3, [r7, #0]
 8011c30:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011c32:	683b      	ldr	r3, [r7, #0]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011c38:	68f8      	ldr	r0, [r7, #12]
 8011c3a:	f7fe fa52 	bl	80100e2 <tcp_seg_free>
    while (next &&
 8011c3e:	683b      	ldr	r3, [r7, #0]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d00e      	beq.n	8011c62 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	891b      	ldrh	r3, [r3, #8]
 8011c48:	461a      	mov	r2, r3
 8011c4a:	4b1d      	ldr	r3, [pc, #116]	; (8011cc0 <tcp_oos_insert_segment+0x10c>)
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	441a      	add	r2, r3
 8011c50:	683b      	ldr	r3, [r7, #0]
 8011c52:	68db      	ldr	r3, [r3, #12]
 8011c54:	685b      	ldr	r3, [r3, #4]
 8011c56:	6839      	ldr	r1, [r7, #0]
 8011c58:	8909      	ldrh	r1, [r1, #8]
 8011c5a:	440b      	add	r3, r1
 8011c5c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	daca      	bge.n	8011bf8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d01e      	beq.n	8011ca6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	891b      	ldrh	r3, [r3, #8]
 8011c6c:	461a      	mov	r2, r3
 8011c6e:	4b14      	ldr	r3, [pc, #80]	; (8011cc0 <tcp_oos_insert_segment+0x10c>)
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	441a      	add	r2, r3
 8011c74:	683b      	ldr	r3, [r7, #0]
 8011c76:	68db      	ldr	r3, [r3, #12]
 8011c78:	685b      	ldr	r3, [r3, #4]
 8011c7a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	dd12      	ble.n	8011ca6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011c80:	683b      	ldr	r3, [r7, #0]
 8011c82:	68db      	ldr	r3, [r3, #12]
 8011c84:	685b      	ldr	r3, [r3, #4]
 8011c86:	b29a      	uxth	r2, r3
 8011c88:	4b0d      	ldr	r3, [pc, #52]	; (8011cc0 <tcp_oos_insert_segment+0x10c>)
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	b29b      	uxth	r3, r3
 8011c8e:	1ad3      	subs	r3, r2, r3
 8011c90:	b29a      	uxth	r2, r3
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	685a      	ldr	r2, [r3, #4]
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	891b      	ldrh	r3, [r3, #8]
 8011c9e:	4619      	mov	r1, r3
 8011ca0:	4610      	mov	r0, r2
 8011ca2:	f7fc fe19 	bl	800e8d8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	683a      	ldr	r2, [r7, #0]
 8011caa:	601a      	str	r2, [r3, #0]
}
 8011cac:	bf00      	nop
 8011cae:	3714      	adds	r7, #20
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bd90      	pop	{r4, r7, pc}
 8011cb4:	080198c8 	.word	0x080198c8
 8011cb8:	08019b88 	.word	0x08019b88
 8011cbc:	08019914 	.word	0x08019914
 8011cc0:	2001109c 	.word	0x2001109c

08011cc4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011cc4:	b5b0      	push	{r4, r5, r7, lr}
 8011cc6:	b086      	sub	sp, #24
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	60f8      	str	r0, [r7, #12]
 8011ccc:	60b9      	str	r1, [r7, #8]
 8011cce:	607a      	str	r2, [r7, #4]
 8011cd0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011cd2:	e03e      	b.n	8011d52 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011cd4:	68bb      	ldr	r3, [r7, #8]
 8011cd6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011cd8:	68bb      	ldr	r3, [r7, #8]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011cde:	697b      	ldr	r3, [r7, #20]
 8011ce0:	685b      	ldr	r3, [r3, #4]
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	f7fd f80c 	bl	800ed00 <pbuf_clen>
 8011ce8:	4603      	mov	r3, r0
 8011cea:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011cf2:	8a7a      	ldrh	r2, [r7, #18]
 8011cf4:	429a      	cmp	r2, r3
 8011cf6:	d906      	bls.n	8011d06 <tcp_free_acked_segments+0x42>
 8011cf8:	4b2a      	ldr	r3, [pc, #168]	; (8011da4 <tcp_free_acked_segments+0xe0>)
 8011cfa:	f240 4257 	movw	r2, #1111	; 0x457
 8011cfe:	492a      	ldr	r1, [pc, #168]	; (8011da8 <tcp_free_acked_segments+0xe4>)
 8011d00:	482a      	ldr	r0, [pc, #168]	; (8011dac <tcp_free_acked_segments+0xe8>)
 8011d02:	f005 fa9b 	bl	801723c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011d0c:	8a7b      	ldrh	r3, [r7, #18]
 8011d0e:	1ad3      	subs	r3, r2, r3
 8011d10:	b29a      	uxth	r2, r3
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011d18:	697b      	ldr	r3, [r7, #20]
 8011d1a:	891a      	ldrh	r2, [r3, #8]
 8011d1c:	4b24      	ldr	r3, [pc, #144]	; (8011db0 <tcp_free_acked_segments+0xec>)
 8011d1e:	881b      	ldrh	r3, [r3, #0]
 8011d20:	4413      	add	r3, r2
 8011d22:	b29a      	uxth	r2, r3
 8011d24:	4b22      	ldr	r3, [pc, #136]	; (8011db0 <tcp_free_acked_segments+0xec>)
 8011d26:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011d28:	6978      	ldr	r0, [r7, #20]
 8011d2a:	f7fe f9da 	bl	80100e2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d00c      	beq.n	8011d52 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011d38:	68bb      	ldr	r3, [r7, #8]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d109      	bne.n	8011d52 <tcp_free_acked_segments+0x8e>
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d106      	bne.n	8011d52 <tcp_free_acked_segments+0x8e>
 8011d44:	4b17      	ldr	r3, [pc, #92]	; (8011da4 <tcp_free_acked_segments+0xe0>)
 8011d46:	f240 4261 	movw	r2, #1121	; 0x461
 8011d4a:	491a      	ldr	r1, [pc, #104]	; (8011db4 <tcp_free_acked_segments+0xf0>)
 8011d4c:	4817      	ldr	r0, [pc, #92]	; (8011dac <tcp_free_acked_segments+0xe8>)
 8011d4e:	f005 fa75 	bl	801723c <iprintf>
  while (seg_list != NULL &&
 8011d52:	68bb      	ldr	r3, [r7, #8]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d020      	beq.n	8011d9a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011d58:	68bb      	ldr	r3, [r7, #8]
 8011d5a:	68db      	ldr	r3, [r3, #12]
 8011d5c:	685b      	ldr	r3, [r3, #4]
 8011d5e:	4618      	mov	r0, r3
 8011d60:	f7fb fb63 	bl	800d42a <lwip_htonl>
 8011d64:	4604      	mov	r4, r0
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	891b      	ldrh	r3, [r3, #8]
 8011d6a:	461d      	mov	r5, r3
 8011d6c:	68bb      	ldr	r3, [r7, #8]
 8011d6e:	68db      	ldr	r3, [r3, #12]
 8011d70:	899b      	ldrh	r3, [r3, #12]
 8011d72:	b29b      	uxth	r3, r3
 8011d74:	4618      	mov	r0, r3
 8011d76:	f7fb fb43 	bl	800d400 <lwip_htons>
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	b2db      	uxtb	r3, r3
 8011d7e:	f003 0303 	and.w	r3, r3, #3
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d001      	beq.n	8011d8a <tcp_free_acked_segments+0xc6>
 8011d86:	2301      	movs	r3, #1
 8011d88:	e000      	b.n	8011d8c <tcp_free_acked_segments+0xc8>
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	442b      	add	r3, r5
 8011d8e:	18e2      	adds	r2, r4, r3
 8011d90:	4b09      	ldr	r3, [pc, #36]	; (8011db8 <tcp_free_acked_segments+0xf4>)
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	dd9c      	ble.n	8011cd4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011d9a:	68bb      	ldr	r3, [r7, #8]
}
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	3718      	adds	r7, #24
 8011da0:	46bd      	mov	sp, r7
 8011da2:	bdb0      	pop	{r4, r5, r7, pc}
 8011da4:	080198c8 	.word	0x080198c8
 8011da8:	08019bb0 	.word	0x08019bb0
 8011dac:	08019914 	.word	0x08019914
 8011db0:	200110a4 	.word	0x200110a4
 8011db4:	08019bd8 	.word	0x08019bd8
 8011db8:	200110a0 	.word	0x200110a0

08011dbc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011dbc:	b5b0      	push	{r4, r5, r7, lr}
 8011dbe:	b094      	sub	sp, #80	; 0x50
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d106      	bne.n	8011ddc <tcp_receive+0x20>
 8011dce:	4b91      	ldr	r3, [pc, #580]	; (8012014 <tcp_receive+0x258>)
 8011dd0:	f240 427b 	movw	r2, #1147	; 0x47b
 8011dd4:	4990      	ldr	r1, [pc, #576]	; (8012018 <tcp_receive+0x25c>)
 8011dd6:	4891      	ldr	r0, [pc, #580]	; (801201c <tcp_receive+0x260>)
 8011dd8:	f005 fa30 	bl	801723c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	7d1b      	ldrb	r3, [r3, #20]
 8011de0:	2b03      	cmp	r3, #3
 8011de2:	d806      	bhi.n	8011df2 <tcp_receive+0x36>
 8011de4:	4b8b      	ldr	r3, [pc, #556]	; (8012014 <tcp_receive+0x258>)
 8011de6:	f240 427c 	movw	r2, #1148	; 0x47c
 8011dea:	498d      	ldr	r1, [pc, #564]	; (8012020 <tcp_receive+0x264>)
 8011dec:	488b      	ldr	r0, [pc, #556]	; (801201c <tcp_receive+0x260>)
 8011dee:	f005 fa25 	bl	801723c <iprintf>

  if (flags & TCP_ACK) {
 8011df2:	4b8c      	ldr	r3, [pc, #560]	; (8012024 <tcp_receive+0x268>)
 8011df4:	781b      	ldrb	r3, [r3, #0]
 8011df6:	f003 0310 	and.w	r3, r3, #16
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	f000 8264 	beq.w	80122c8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011e06:	461a      	mov	r2, r3
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e0c:	4413      	add	r3, r2
 8011e0e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011e14:	4b84      	ldr	r3, [pc, #528]	; (8012028 <tcp_receive+0x26c>)
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	1ad3      	subs	r3, r2, r3
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	db1b      	blt.n	8011e56 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011e22:	4b81      	ldr	r3, [pc, #516]	; (8012028 <tcp_receive+0x26c>)
 8011e24:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011e26:	429a      	cmp	r2, r3
 8011e28:	d106      	bne.n	8011e38 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011e2e:	4b7f      	ldr	r3, [pc, #508]	; (801202c <tcp_receive+0x270>)
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	1ad3      	subs	r3, r2, r3
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	db0e      	blt.n	8011e56 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011e3c:	4b7b      	ldr	r3, [pc, #492]	; (801202c <tcp_receive+0x270>)
 8011e3e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011e40:	429a      	cmp	r2, r3
 8011e42:	d125      	bne.n	8011e90 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011e44:	4b7a      	ldr	r3, [pc, #488]	; (8012030 <tcp_receive+0x274>)
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	89db      	ldrh	r3, [r3, #14]
 8011e4a:	b29a      	uxth	r2, r3
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011e52:	429a      	cmp	r2, r3
 8011e54:	d91c      	bls.n	8011e90 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011e56:	4b76      	ldr	r3, [pc, #472]	; (8012030 <tcp_receive+0x274>)
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	89db      	ldrh	r3, [r3, #14]
 8011e5c:	b29a      	uxth	r2, r3
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011e70:	429a      	cmp	r2, r3
 8011e72:	d205      	bcs.n	8011e80 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011e80:	4b69      	ldr	r3, [pc, #420]	; (8012028 <tcp_receive+0x26c>)
 8011e82:	681a      	ldr	r2, [r3, #0]
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011e88:	4b68      	ldr	r3, [pc, #416]	; (801202c <tcp_receive+0x270>)
 8011e8a:	681a      	ldr	r2, [r3, #0]
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011e90:	4b66      	ldr	r3, [pc, #408]	; (801202c <tcp_receive+0x270>)
 8011e92:	681a      	ldr	r2, [r3, #0]
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e98:	1ad3      	subs	r3, r2, r3
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	dc58      	bgt.n	8011f50 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8011e9e:	4b65      	ldr	r3, [pc, #404]	; (8012034 <tcp_receive+0x278>)
 8011ea0:	881b      	ldrh	r3, [r3, #0]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d14b      	bne.n	8011f3e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011eaa:	687a      	ldr	r2, [r7, #4]
 8011eac:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011eb0:	4413      	add	r3, r2
 8011eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011eb4:	429a      	cmp	r2, r3
 8011eb6:	d142      	bne.n	8011f3e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	db3d      	blt.n	8011f3e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011ec6:	4b59      	ldr	r3, [pc, #356]	; (801202c <tcp_receive+0x270>)
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	429a      	cmp	r2, r3
 8011ecc:	d137      	bne.n	8011f3e <tcp_receive+0x182>
              found_dupack = 1;
 8011ece:	2301      	movs	r3, #1
 8011ed0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011ed8:	2bff      	cmp	r3, #255	; 0xff
 8011eda:	d007      	beq.n	8011eec <tcp_receive+0x130>
                ++pcb->dupacks;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011ee2:	3301      	adds	r3, #1
 8011ee4:	b2da      	uxtb	r2, r3
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011ef2:	2b03      	cmp	r3, #3
 8011ef4:	d91b      	bls.n	8011f2e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f00:	4413      	add	r3, r2
 8011f02:	b29a      	uxth	r2, r3
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011f0a:	429a      	cmp	r2, r3
 8011f0c:	d30a      	bcc.n	8011f24 <tcp_receive+0x168>
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f18:	4413      	add	r3, r2
 8011f1a:	b29a      	uxth	r2, r3
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011f22:	e004      	b.n	8011f2e <tcp_receive+0x172>
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f2a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011f34:	2b02      	cmp	r3, #2
 8011f36:	d902      	bls.n	8011f3e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	f001 feeb 	bl	8013d14 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	f040 8161 	bne.w	8012208 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	2200      	movs	r2, #0
 8011f4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011f4e:	e15b      	b.n	8012208 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011f50:	4b36      	ldr	r3, [pc, #216]	; (801202c <tcp_receive+0x270>)
 8011f52:	681a      	ldr	r2, [r3, #0]
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f58:	1ad3      	subs	r3, r2, r3
 8011f5a:	3b01      	subs	r3, #1
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	f2c0 814e 	blt.w	80121fe <tcp_receive+0x442>
 8011f62:	4b32      	ldr	r3, [pc, #200]	; (801202c <tcp_receive+0x270>)
 8011f64:	681a      	ldr	r2, [r3, #0]
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f6a:	1ad3      	subs	r3, r2, r3
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	f300 8146 	bgt.w	80121fe <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	8b5b      	ldrh	r3, [r3, #26]
 8011f76:	f003 0304 	and.w	r3, r3, #4
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d010      	beq.n	8011fa0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	8b5b      	ldrh	r3, [r3, #26]
 8011f82:	f023 0304 	bic.w	r3, r3, #4
 8011f86:	b29a      	uxth	r2, r3
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011fae:	10db      	asrs	r3, r3, #3
 8011fb0:	b21b      	sxth	r3, r3
 8011fb2:	b29a      	uxth	r2, r3
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011fba:	b29b      	uxth	r3, r3
 8011fbc:	4413      	add	r3, r2
 8011fbe:	b29b      	uxth	r3, r3
 8011fc0:	b21a      	sxth	r2, r3
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011fc8:	4b18      	ldr	r3, [pc, #96]	; (801202c <tcp_receive+0x270>)
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	b29a      	uxth	r2, r3
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fd2:	b29b      	uxth	r3, r3
 8011fd4:	1ad3      	subs	r3, r2, r3
 8011fd6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	2200      	movs	r2, #0
 8011fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011fe0:	4b12      	ldr	r3, [pc, #72]	; (801202c <tcp_receive+0x270>)
 8011fe2:	681a      	ldr	r2, [r3, #0]
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	7d1b      	ldrb	r3, [r3, #20]
 8011fec:	2b03      	cmp	r3, #3
 8011fee:	f240 8097 	bls.w	8012120 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011ffe:	429a      	cmp	r2, r3
 8012000:	d245      	bcs.n	801208e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	8b5b      	ldrh	r3, [r3, #26]
 8012006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801200a:	2b00      	cmp	r3, #0
 801200c:	d014      	beq.n	8012038 <tcp_receive+0x27c>
 801200e:	2301      	movs	r3, #1
 8012010:	e013      	b.n	801203a <tcp_receive+0x27e>
 8012012:	bf00      	nop
 8012014:	080198c8 	.word	0x080198c8
 8012018:	08019bf8 	.word	0x08019bf8
 801201c:	08019914 	.word	0x08019914
 8012020:	08019c14 	.word	0x08019c14
 8012024:	200110a8 	.word	0x200110a8
 8012028:	2001109c 	.word	0x2001109c
 801202c:	200110a0 	.word	0x200110a0
 8012030:	2001108c 	.word	0x2001108c
 8012034:	200110a6 	.word	0x200110a6
 8012038:	2302      	movs	r3, #2
 801203a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801203e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012042:	b29a      	uxth	r2, r3
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012048:	fb12 f303 	smulbb	r3, r2, r3
 801204c:	b29b      	uxth	r3, r3
 801204e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012050:	4293      	cmp	r3, r2
 8012052:	bf28      	it	cs
 8012054:	4613      	movcs	r3, r2
 8012056:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801205e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012060:	4413      	add	r3, r2
 8012062:	b29a      	uxth	r2, r3
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801206a:	429a      	cmp	r2, r3
 801206c:	d309      	bcc.n	8012082 <tcp_receive+0x2c6>
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012074:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012076:	4413      	add	r3, r2
 8012078:	b29a      	uxth	r2, r3
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012080:	e04e      	b.n	8012120 <tcp_receive+0x364>
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012088:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801208c:	e048      	b.n	8012120 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012094:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012096:	4413      	add	r3, r2
 8012098:	b29a      	uxth	r2, r3
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80120a0:	429a      	cmp	r2, r3
 80120a2:	d309      	bcc.n	80120b8 <tcp_receive+0x2fc>
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80120aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80120ac:	4413      	add	r3, r2
 80120ae:	b29a      	uxth	r2, r3
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80120b6:	e004      	b.n	80120c2 <tcp_receive+0x306>
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80120ce:	429a      	cmp	r2, r3
 80120d0:	d326      	bcc.n	8012120 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80120de:	1ad3      	subs	r3, r2, r3
 80120e0:	b29a      	uxth	r2, r3
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120f2:	4413      	add	r3, r2
 80120f4:	b29a      	uxth	r2, r3
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80120fc:	429a      	cmp	r2, r3
 80120fe:	d30a      	bcc.n	8012116 <tcp_receive+0x35a>
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801210a:	4413      	add	r3, r2
 801210c:	b29a      	uxth	r2, r3
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012114:	e004      	b.n	8012120 <tcp_receive+0x364>
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801211c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012128:	4a98      	ldr	r2, [pc, #608]	; (801238c <tcp_receive+0x5d0>)
 801212a:	6878      	ldr	r0, [r7, #4]
 801212c:	f7ff fdca 	bl	8011cc4 <tcp_free_acked_segments>
 8012130:	4602      	mov	r2, r0
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801213e:	4a94      	ldr	r2, [pc, #592]	; (8012390 <tcp_receive+0x5d4>)
 8012140:	6878      	ldr	r0, [r7, #4]
 8012142:	f7ff fdbf 	bl	8011cc4 <tcp_free_acked_segments>
 8012146:	4602      	mov	r2, r0
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012150:	2b00      	cmp	r3, #0
 8012152:	d104      	bne.n	801215e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801215a:	861a      	strh	r2, [r3, #48]	; 0x30
 801215c:	e002      	b.n	8012164 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	2200      	movs	r2, #0
 8012162:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	2200      	movs	r2, #0
 8012168:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801216e:	2b00      	cmp	r3, #0
 8012170:	d103      	bne.n	801217a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	2200      	movs	r2, #0
 8012176:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012180:	4b84      	ldr	r3, [pc, #528]	; (8012394 <tcp_receive+0x5d8>)
 8012182:	881b      	ldrh	r3, [r3, #0]
 8012184:	4413      	add	r3, r2
 8012186:	b29a      	uxth	r2, r3
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	8b5b      	ldrh	r3, [r3, #26]
 8012192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012196:	2b00      	cmp	r3, #0
 8012198:	d035      	beq.n	8012206 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d118      	bne.n	80121d4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d00c      	beq.n	80121c4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121b2:	68db      	ldr	r3, [r3, #12]
 80121b4:	685b      	ldr	r3, [r3, #4]
 80121b6:	4618      	mov	r0, r3
 80121b8:	f7fb f937 	bl	800d42a <lwip_htonl>
 80121bc:	4603      	mov	r3, r0
 80121be:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	dc20      	bgt.n	8012206 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	8b5b      	ldrh	r3, [r3, #26]
 80121c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80121cc:	b29a      	uxth	r2, r3
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80121d2:	e018      	b.n	8012206 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121dc:	68db      	ldr	r3, [r3, #12]
 80121de:	685b      	ldr	r3, [r3, #4]
 80121e0:	4618      	mov	r0, r3
 80121e2:	f7fb f922 	bl	800d42a <lwip_htonl>
 80121e6:	4603      	mov	r3, r0
 80121e8:	1ae3      	subs	r3, r4, r3
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	dc0b      	bgt.n	8012206 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	8b5b      	ldrh	r3, [r3, #26]
 80121f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80121f6:	b29a      	uxth	r2, r3
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80121fc:	e003      	b.n	8012206 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80121fe:	6878      	ldr	r0, [r7, #4]
 8012200:	f001 ff76 	bl	80140f0 <tcp_send_empty_ack>
 8012204:	e000      	b.n	8012208 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012206:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801220c:	2b00      	cmp	r3, #0
 801220e:	d05b      	beq.n	80122c8 <tcp_receive+0x50c>
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012214:	4b60      	ldr	r3, [pc, #384]	; (8012398 <tcp_receive+0x5dc>)
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	1ad3      	subs	r3, r2, r3
 801221a:	2b00      	cmp	r3, #0
 801221c:	da54      	bge.n	80122c8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801221e:	4b5f      	ldr	r3, [pc, #380]	; (801239c <tcp_receive+0x5e0>)
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	b29a      	uxth	r2, r3
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012228:	b29b      	uxth	r3, r3
 801222a:	1ad3      	subs	r3, r2, r3
 801222c:	b29b      	uxth	r3, r3
 801222e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8012232:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801223c:	10db      	asrs	r3, r3, #3
 801223e:	b21b      	sxth	r3, r3
 8012240:	b29b      	uxth	r3, r3
 8012242:	1ad3      	subs	r3, r2, r3
 8012244:	b29b      	uxth	r3, r3
 8012246:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012250:	b29a      	uxth	r2, r3
 8012252:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012256:	4413      	add	r3, r2
 8012258:	b29b      	uxth	r3, r3
 801225a:	b21a      	sxth	r2, r3
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8012260:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012264:	2b00      	cmp	r3, #0
 8012266:	da05      	bge.n	8012274 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8012268:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801226c:	425b      	negs	r3, r3
 801226e:	b29b      	uxth	r3, r3
 8012270:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012274:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801227e:	109b      	asrs	r3, r3, #2
 8012280:	b21b      	sxth	r3, r3
 8012282:	b29b      	uxth	r3, r3
 8012284:	1ad3      	subs	r3, r2, r3
 8012286:	b29b      	uxth	r3, r3
 8012288:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012292:	b29a      	uxth	r2, r3
 8012294:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012298:	4413      	add	r3, r2
 801229a:	b29b      	uxth	r3, r3
 801229c:	b21a      	sxth	r2, r3
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80122a8:	10db      	asrs	r3, r3, #3
 80122aa:	b21b      	sxth	r3, r3
 80122ac:	b29a      	uxth	r2, r3
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80122b4:	b29b      	uxth	r3, r3
 80122b6:	4413      	add	r3, r2
 80122b8:	b29b      	uxth	r3, r3
 80122ba:	b21a      	sxth	r2, r3
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	2200      	movs	r2, #0
 80122c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80122c8:	4b35      	ldr	r3, [pc, #212]	; (80123a0 <tcp_receive+0x5e4>)
 80122ca:	881b      	ldrh	r3, [r3, #0]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	f000 84e2 	beq.w	8012c96 <tcp_receive+0xeda>
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	7d1b      	ldrb	r3, [r3, #20]
 80122d6:	2b06      	cmp	r3, #6
 80122d8:	f200 84dd 	bhi.w	8012c96 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80122e0:	4b30      	ldr	r3, [pc, #192]	; (80123a4 <tcp_receive+0x5e8>)
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	1ad3      	subs	r3, r2, r3
 80122e6:	3b01      	subs	r3, #1
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	f2c0 808f 	blt.w	801240c <tcp_receive+0x650>
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80122f2:	4b2b      	ldr	r3, [pc, #172]	; (80123a0 <tcp_receive+0x5e4>)
 80122f4:	881b      	ldrh	r3, [r3, #0]
 80122f6:	4619      	mov	r1, r3
 80122f8:	4b2a      	ldr	r3, [pc, #168]	; (80123a4 <tcp_receive+0x5e8>)
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	440b      	add	r3, r1
 80122fe:	1ad3      	subs	r3, r2, r3
 8012300:	3301      	adds	r3, #1
 8012302:	2b00      	cmp	r3, #0
 8012304:	f300 8082 	bgt.w	801240c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012308:	4b27      	ldr	r3, [pc, #156]	; (80123a8 <tcp_receive+0x5ec>)
 801230a:	685b      	ldr	r3, [r3, #4]
 801230c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012312:	4b24      	ldr	r3, [pc, #144]	; (80123a4 <tcp_receive+0x5e8>)
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	1ad3      	subs	r3, r2, r3
 8012318:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801231a:	4b23      	ldr	r3, [pc, #140]	; (80123a8 <tcp_receive+0x5ec>)
 801231c:	685b      	ldr	r3, [r3, #4]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d106      	bne.n	8012330 <tcp_receive+0x574>
 8012322:	4b22      	ldr	r3, [pc, #136]	; (80123ac <tcp_receive+0x5f0>)
 8012324:	f240 5294 	movw	r2, #1428	; 0x594
 8012328:	4921      	ldr	r1, [pc, #132]	; (80123b0 <tcp_receive+0x5f4>)
 801232a:	4822      	ldr	r0, [pc, #136]	; (80123b4 <tcp_receive+0x5f8>)
 801232c:	f004 ff86 	bl	801723c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012332:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012336:	4293      	cmp	r3, r2
 8012338:	d906      	bls.n	8012348 <tcp_receive+0x58c>
 801233a:	4b1c      	ldr	r3, [pc, #112]	; (80123ac <tcp_receive+0x5f0>)
 801233c:	f240 5295 	movw	r2, #1429	; 0x595
 8012340:	491d      	ldr	r1, [pc, #116]	; (80123b8 <tcp_receive+0x5fc>)
 8012342:	481c      	ldr	r0, [pc, #112]	; (80123b4 <tcp_receive+0x5f8>)
 8012344:	f004 ff7a 	bl	801723c <iprintf>
      off = (u16_t)off32;
 8012348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801234a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801234e:	4b16      	ldr	r3, [pc, #88]	; (80123a8 <tcp_receive+0x5ec>)
 8012350:	685b      	ldr	r3, [r3, #4]
 8012352:	891b      	ldrh	r3, [r3, #8]
 8012354:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012358:	429a      	cmp	r2, r3
 801235a:	d906      	bls.n	801236a <tcp_receive+0x5ae>
 801235c:	4b13      	ldr	r3, [pc, #76]	; (80123ac <tcp_receive+0x5f0>)
 801235e:	f240 5297 	movw	r2, #1431	; 0x597
 8012362:	4916      	ldr	r1, [pc, #88]	; (80123bc <tcp_receive+0x600>)
 8012364:	4813      	ldr	r0, [pc, #76]	; (80123b4 <tcp_receive+0x5f8>)
 8012366:	f004 ff69 	bl	801723c <iprintf>
      inseg.len -= off;
 801236a:	4b0f      	ldr	r3, [pc, #60]	; (80123a8 <tcp_receive+0x5ec>)
 801236c:	891a      	ldrh	r2, [r3, #8]
 801236e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012372:	1ad3      	subs	r3, r2, r3
 8012374:	b29a      	uxth	r2, r3
 8012376:	4b0c      	ldr	r3, [pc, #48]	; (80123a8 <tcp_receive+0x5ec>)
 8012378:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801237a:	4b0b      	ldr	r3, [pc, #44]	; (80123a8 <tcp_receive+0x5ec>)
 801237c:	685b      	ldr	r3, [r3, #4]
 801237e:	891a      	ldrh	r2, [r3, #8]
 8012380:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012384:	1ad3      	subs	r3, r2, r3
 8012386:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012388:	e02a      	b.n	80123e0 <tcp_receive+0x624>
 801238a:	bf00      	nop
 801238c:	08019c30 	.word	0x08019c30
 8012390:	08019c38 	.word	0x08019c38
 8012394:	200110a4 	.word	0x200110a4
 8012398:	200110a0 	.word	0x200110a0
 801239c:	20011064 	.word	0x20011064
 80123a0:	200110a6 	.word	0x200110a6
 80123a4:	2001109c 	.word	0x2001109c
 80123a8:	2001107c 	.word	0x2001107c
 80123ac:	080198c8 	.word	0x080198c8
 80123b0:	08019c40 	.word	0x08019c40
 80123b4:	08019914 	.word	0x08019914
 80123b8:	08019c50 	.word	0x08019c50
 80123bc:	08019c60 	.word	0x08019c60
        off -= p->len;
 80123c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123c2:	895b      	ldrh	r3, [r3, #10]
 80123c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80123c8:	1ad3      	subs	r3, r2, r3
 80123ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80123ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123d0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80123d2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80123d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123d6:	2200      	movs	r2, #0
 80123d8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80123da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80123e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123e2:	895b      	ldrh	r3, [r3, #10]
 80123e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80123e8:	429a      	cmp	r2, r3
 80123ea:	d8e9      	bhi.n	80123c0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80123ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80123f0:	4619      	mov	r1, r3
 80123f2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80123f4:	f7fc fb70 	bl	800ead8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123fc:	4a91      	ldr	r2, [pc, #580]	; (8012644 <tcp_receive+0x888>)
 80123fe:	6013      	str	r3, [r2, #0]
 8012400:	4b91      	ldr	r3, [pc, #580]	; (8012648 <tcp_receive+0x88c>)
 8012402:	68db      	ldr	r3, [r3, #12]
 8012404:	4a8f      	ldr	r2, [pc, #572]	; (8012644 <tcp_receive+0x888>)
 8012406:	6812      	ldr	r2, [r2, #0]
 8012408:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801240a:	e00d      	b.n	8012428 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801240c:	4b8d      	ldr	r3, [pc, #564]	; (8012644 <tcp_receive+0x888>)
 801240e:	681a      	ldr	r2, [r3, #0]
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012414:	1ad3      	subs	r3, r2, r3
 8012416:	2b00      	cmp	r3, #0
 8012418:	da06      	bge.n	8012428 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	8b5b      	ldrh	r3, [r3, #26]
 801241e:	f043 0302 	orr.w	r3, r3, #2
 8012422:	b29a      	uxth	r2, r3
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012428:	4b86      	ldr	r3, [pc, #536]	; (8012644 <tcp_receive+0x888>)
 801242a:	681a      	ldr	r2, [r3, #0]
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012430:	1ad3      	subs	r3, r2, r3
 8012432:	2b00      	cmp	r3, #0
 8012434:	f2c0 842a 	blt.w	8012c8c <tcp_receive+0xed0>
 8012438:	4b82      	ldr	r3, [pc, #520]	; (8012644 <tcp_receive+0x888>)
 801243a:	681a      	ldr	r2, [r3, #0]
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012440:	6879      	ldr	r1, [r7, #4]
 8012442:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012444:	440b      	add	r3, r1
 8012446:	1ad3      	subs	r3, r2, r3
 8012448:	3301      	adds	r3, #1
 801244a:	2b00      	cmp	r3, #0
 801244c:	f300 841e 	bgt.w	8012c8c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012454:	4b7b      	ldr	r3, [pc, #492]	; (8012644 <tcp_receive+0x888>)
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	429a      	cmp	r2, r3
 801245a:	f040 829a 	bne.w	8012992 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801245e:	4b7a      	ldr	r3, [pc, #488]	; (8012648 <tcp_receive+0x88c>)
 8012460:	891c      	ldrh	r4, [r3, #8]
 8012462:	4b79      	ldr	r3, [pc, #484]	; (8012648 <tcp_receive+0x88c>)
 8012464:	68db      	ldr	r3, [r3, #12]
 8012466:	899b      	ldrh	r3, [r3, #12]
 8012468:	b29b      	uxth	r3, r3
 801246a:	4618      	mov	r0, r3
 801246c:	f7fa ffc8 	bl	800d400 <lwip_htons>
 8012470:	4603      	mov	r3, r0
 8012472:	b2db      	uxtb	r3, r3
 8012474:	f003 0303 	and.w	r3, r3, #3
 8012478:	2b00      	cmp	r3, #0
 801247a:	d001      	beq.n	8012480 <tcp_receive+0x6c4>
 801247c:	2301      	movs	r3, #1
 801247e:	e000      	b.n	8012482 <tcp_receive+0x6c6>
 8012480:	2300      	movs	r3, #0
 8012482:	4423      	add	r3, r4
 8012484:	b29a      	uxth	r2, r3
 8012486:	4b71      	ldr	r3, [pc, #452]	; (801264c <tcp_receive+0x890>)
 8012488:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801248e:	4b6f      	ldr	r3, [pc, #444]	; (801264c <tcp_receive+0x890>)
 8012490:	881b      	ldrh	r3, [r3, #0]
 8012492:	429a      	cmp	r2, r3
 8012494:	d275      	bcs.n	8012582 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012496:	4b6c      	ldr	r3, [pc, #432]	; (8012648 <tcp_receive+0x88c>)
 8012498:	68db      	ldr	r3, [r3, #12]
 801249a:	899b      	ldrh	r3, [r3, #12]
 801249c:	b29b      	uxth	r3, r3
 801249e:	4618      	mov	r0, r3
 80124a0:	f7fa ffae 	bl	800d400 <lwip_htons>
 80124a4:	4603      	mov	r3, r0
 80124a6:	b2db      	uxtb	r3, r3
 80124a8:	f003 0301 	and.w	r3, r3, #1
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d01f      	beq.n	80124f0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80124b0:	4b65      	ldr	r3, [pc, #404]	; (8012648 <tcp_receive+0x88c>)
 80124b2:	68db      	ldr	r3, [r3, #12]
 80124b4:	899b      	ldrh	r3, [r3, #12]
 80124b6:	b29b      	uxth	r3, r3
 80124b8:	b21b      	sxth	r3, r3
 80124ba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80124be:	b21c      	sxth	r4, r3
 80124c0:	4b61      	ldr	r3, [pc, #388]	; (8012648 <tcp_receive+0x88c>)
 80124c2:	68db      	ldr	r3, [r3, #12]
 80124c4:	899b      	ldrh	r3, [r3, #12]
 80124c6:	b29b      	uxth	r3, r3
 80124c8:	4618      	mov	r0, r3
 80124ca:	f7fa ff99 	bl	800d400 <lwip_htons>
 80124ce:	4603      	mov	r3, r0
 80124d0:	b2db      	uxtb	r3, r3
 80124d2:	b29b      	uxth	r3, r3
 80124d4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80124d8:	b29b      	uxth	r3, r3
 80124da:	4618      	mov	r0, r3
 80124dc:	f7fa ff90 	bl	800d400 <lwip_htons>
 80124e0:	4603      	mov	r3, r0
 80124e2:	b21b      	sxth	r3, r3
 80124e4:	4323      	orrs	r3, r4
 80124e6:	b21a      	sxth	r2, r3
 80124e8:	4b57      	ldr	r3, [pc, #348]	; (8012648 <tcp_receive+0x88c>)
 80124ea:	68db      	ldr	r3, [r3, #12]
 80124ec:	b292      	uxth	r2, r2
 80124ee:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80124f4:	4b54      	ldr	r3, [pc, #336]	; (8012648 <tcp_receive+0x88c>)
 80124f6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80124f8:	4b53      	ldr	r3, [pc, #332]	; (8012648 <tcp_receive+0x88c>)
 80124fa:	68db      	ldr	r3, [r3, #12]
 80124fc:	899b      	ldrh	r3, [r3, #12]
 80124fe:	b29b      	uxth	r3, r3
 8012500:	4618      	mov	r0, r3
 8012502:	f7fa ff7d 	bl	800d400 <lwip_htons>
 8012506:	4603      	mov	r3, r0
 8012508:	b2db      	uxtb	r3, r3
 801250a:	f003 0302 	and.w	r3, r3, #2
 801250e:	2b00      	cmp	r3, #0
 8012510:	d005      	beq.n	801251e <tcp_receive+0x762>
            inseg.len -= 1;
 8012512:	4b4d      	ldr	r3, [pc, #308]	; (8012648 <tcp_receive+0x88c>)
 8012514:	891b      	ldrh	r3, [r3, #8]
 8012516:	3b01      	subs	r3, #1
 8012518:	b29a      	uxth	r2, r3
 801251a:	4b4b      	ldr	r3, [pc, #300]	; (8012648 <tcp_receive+0x88c>)
 801251c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801251e:	4b4a      	ldr	r3, [pc, #296]	; (8012648 <tcp_receive+0x88c>)
 8012520:	685b      	ldr	r3, [r3, #4]
 8012522:	4a49      	ldr	r2, [pc, #292]	; (8012648 <tcp_receive+0x88c>)
 8012524:	8912      	ldrh	r2, [r2, #8]
 8012526:	4611      	mov	r1, r2
 8012528:	4618      	mov	r0, r3
 801252a:	f7fc f9d5 	bl	800e8d8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801252e:	4b46      	ldr	r3, [pc, #280]	; (8012648 <tcp_receive+0x88c>)
 8012530:	891c      	ldrh	r4, [r3, #8]
 8012532:	4b45      	ldr	r3, [pc, #276]	; (8012648 <tcp_receive+0x88c>)
 8012534:	68db      	ldr	r3, [r3, #12]
 8012536:	899b      	ldrh	r3, [r3, #12]
 8012538:	b29b      	uxth	r3, r3
 801253a:	4618      	mov	r0, r3
 801253c:	f7fa ff60 	bl	800d400 <lwip_htons>
 8012540:	4603      	mov	r3, r0
 8012542:	b2db      	uxtb	r3, r3
 8012544:	f003 0303 	and.w	r3, r3, #3
 8012548:	2b00      	cmp	r3, #0
 801254a:	d001      	beq.n	8012550 <tcp_receive+0x794>
 801254c:	2301      	movs	r3, #1
 801254e:	e000      	b.n	8012552 <tcp_receive+0x796>
 8012550:	2300      	movs	r3, #0
 8012552:	4423      	add	r3, r4
 8012554:	b29a      	uxth	r2, r3
 8012556:	4b3d      	ldr	r3, [pc, #244]	; (801264c <tcp_receive+0x890>)
 8012558:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801255a:	4b3c      	ldr	r3, [pc, #240]	; (801264c <tcp_receive+0x890>)
 801255c:	881b      	ldrh	r3, [r3, #0]
 801255e:	461a      	mov	r2, r3
 8012560:	4b38      	ldr	r3, [pc, #224]	; (8012644 <tcp_receive+0x888>)
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	441a      	add	r2, r3
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801256a:	6879      	ldr	r1, [r7, #4]
 801256c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801256e:	440b      	add	r3, r1
 8012570:	429a      	cmp	r2, r3
 8012572:	d006      	beq.n	8012582 <tcp_receive+0x7c6>
 8012574:	4b36      	ldr	r3, [pc, #216]	; (8012650 <tcp_receive+0x894>)
 8012576:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801257a:	4936      	ldr	r1, [pc, #216]	; (8012654 <tcp_receive+0x898>)
 801257c:	4836      	ldr	r0, [pc, #216]	; (8012658 <tcp_receive+0x89c>)
 801257e:	f004 fe5d 	bl	801723c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012586:	2b00      	cmp	r3, #0
 8012588:	f000 80e7 	beq.w	801275a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801258c:	4b2e      	ldr	r3, [pc, #184]	; (8012648 <tcp_receive+0x88c>)
 801258e:	68db      	ldr	r3, [r3, #12]
 8012590:	899b      	ldrh	r3, [r3, #12]
 8012592:	b29b      	uxth	r3, r3
 8012594:	4618      	mov	r0, r3
 8012596:	f7fa ff33 	bl	800d400 <lwip_htons>
 801259a:	4603      	mov	r3, r0
 801259c:	b2db      	uxtb	r3, r3
 801259e:	f003 0301 	and.w	r3, r3, #1
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d010      	beq.n	80125c8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80125a6:	e00a      	b.n	80125be <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125ac:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125b2:	681a      	ldr	r2, [r3, #0]
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80125b8:	68f8      	ldr	r0, [r7, #12]
 80125ba:	f7fd fd92 	bl	80100e2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d1f0      	bne.n	80125a8 <tcp_receive+0x7ec>
 80125c6:	e0c8      	b.n	801275a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125cc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80125ce:	e052      	b.n	8012676 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80125d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125d2:	68db      	ldr	r3, [r3, #12]
 80125d4:	899b      	ldrh	r3, [r3, #12]
 80125d6:	b29b      	uxth	r3, r3
 80125d8:	4618      	mov	r0, r3
 80125da:	f7fa ff11 	bl	800d400 <lwip_htons>
 80125de:	4603      	mov	r3, r0
 80125e0:	b2db      	uxtb	r3, r3
 80125e2:	f003 0301 	and.w	r3, r3, #1
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d03d      	beq.n	8012666 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80125ea:	4b17      	ldr	r3, [pc, #92]	; (8012648 <tcp_receive+0x88c>)
 80125ec:	68db      	ldr	r3, [r3, #12]
 80125ee:	899b      	ldrh	r3, [r3, #12]
 80125f0:	b29b      	uxth	r3, r3
 80125f2:	4618      	mov	r0, r3
 80125f4:	f7fa ff04 	bl	800d400 <lwip_htons>
 80125f8:	4603      	mov	r3, r0
 80125fa:	b2db      	uxtb	r3, r3
 80125fc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012600:	2b00      	cmp	r3, #0
 8012602:	d130      	bne.n	8012666 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012604:	4b10      	ldr	r3, [pc, #64]	; (8012648 <tcp_receive+0x88c>)
 8012606:	68db      	ldr	r3, [r3, #12]
 8012608:	899b      	ldrh	r3, [r3, #12]
 801260a:	b29c      	uxth	r4, r3
 801260c:	2001      	movs	r0, #1
 801260e:	f7fa fef7 	bl	800d400 <lwip_htons>
 8012612:	4603      	mov	r3, r0
 8012614:	461a      	mov	r2, r3
 8012616:	4b0c      	ldr	r3, [pc, #48]	; (8012648 <tcp_receive+0x88c>)
 8012618:	68db      	ldr	r3, [r3, #12]
 801261a:	4322      	orrs	r2, r4
 801261c:	b292      	uxth	r2, r2
 801261e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012620:	4b09      	ldr	r3, [pc, #36]	; (8012648 <tcp_receive+0x88c>)
 8012622:	891c      	ldrh	r4, [r3, #8]
 8012624:	4b08      	ldr	r3, [pc, #32]	; (8012648 <tcp_receive+0x88c>)
 8012626:	68db      	ldr	r3, [r3, #12]
 8012628:	899b      	ldrh	r3, [r3, #12]
 801262a:	b29b      	uxth	r3, r3
 801262c:	4618      	mov	r0, r3
 801262e:	f7fa fee7 	bl	800d400 <lwip_htons>
 8012632:	4603      	mov	r3, r0
 8012634:	b2db      	uxtb	r3, r3
 8012636:	f003 0303 	and.w	r3, r3, #3
 801263a:	2b00      	cmp	r3, #0
 801263c:	d00e      	beq.n	801265c <tcp_receive+0x8a0>
 801263e:	2301      	movs	r3, #1
 8012640:	e00d      	b.n	801265e <tcp_receive+0x8a2>
 8012642:	bf00      	nop
 8012644:	2001109c 	.word	0x2001109c
 8012648:	2001107c 	.word	0x2001107c
 801264c:	200110a6 	.word	0x200110a6
 8012650:	080198c8 	.word	0x080198c8
 8012654:	08019c70 	.word	0x08019c70
 8012658:	08019914 	.word	0x08019914
 801265c:	2300      	movs	r3, #0
 801265e:	4423      	add	r3, r4
 8012660:	b29a      	uxth	r2, r3
 8012662:	4b98      	ldr	r3, [pc, #608]	; (80128c4 <tcp_receive+0xb08>)
 8012664:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012668:	613b      	str	r3, [r7, #16]
              next = next->next;
 801266a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012670:	6938      	ldr	r0, [r7, #16]
 8012672:	f7fd fd36 	bl	80100e2 <tcp_seg_free>
            while (next &&
 8012676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012678:	2b00      	cmp	r3, #0
 801267a:	d00e      	beq.n	801269a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801267c:	4b91      	ldr	r3, [pc, #580]	; (80128c4 <tcp_receive+0xb08>)
 801267e:	881b      	ldrh	r3, [r3, #0]
 8012680:	461a      	mov	r2, r3
 8012682:	4b91      	ldr	r3, [pc, #580]	; (80128c8 <tcp_receive+0xb0c>)
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	441a      	add	r2, r3
 8012688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801268a:	68db      	ldr	r3, [r3, #12]
 801268c:	685b      	ldr	r3, [r3, #4]
 801268e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012690:	8909      	ldrh	r1, [r1, #8]
 8012692:	440b      	add	r3, r1
 8012694:	1ad3      	subs	r3, r2, r3
            while (next &&
 8012696:	2b00      	cmp	r3, #0
 8012698:	da9a      	bge.n	80125d0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801269a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801269c:	2b00      	cmp	r3, #0
 801269e:	d059      	beq.n	8012754 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80126a0:	4b88      	ldr	r3, [pc, #544]	; (80128c4 <tcp_receive+0xb08>)
 80126a2:	881b      	ldrh	r3, [r3, #0]
 80126a4:	461a      	mov	r2, r3
 80126a6:	4b88      	ldr	r3, [pc, #544]	; (80128c8 <tcp_receive+0xb0c>)
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	441a      	add	r2, r3
 80126ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126ae:	68db      	ldr	r3, [r3, #12]
 80126b0:	685b      	ldr	r3, [r3, #4]
 80126b2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	dd4d      	ble.n	8012754 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80126b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126ba:	68db      	ldr	r3, [r3, #12]
 80126bc:	685b      	ldr	r3, [r3, #4]
 80126be:	b29a      	uxth	r2, r3
 80126c0:	4b81      	ldr	r3, [pc, #516]	; (80128c8 <tcp_receive+0xb0c>)
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	b29b      	uxth	r3, r3
 80126c6:	1ad3      	subs	r3, r2, r3
 80126c8:	b29a      	uxth	r2, r3
 80126ca:	4b80      	ldr	r3, [pc, #512]	; (80128cc <tcp_receive+0xb10>)
 80126cc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80126ce:	4b7f      	ldr	r3, [pc, #508]	; (80128cc <tcp_receive+0xb10>)
 80126d0:	68db      	ldr	r3, [r3, #12]
 80126d2:	899b      	ldrh	r3, [r3, #12]
 80126d4:	b29b      	uxth	r3, r3
 80126d6:	4618      	mov	r0, r3
 80126d8:	f7fa fe92 	bl	800d400 <lwip_htons>
 80126dc:	4603      	mov	r3, r0
 80126de:	b2db      	uxtb	r3, r3
 80126e0:	f003 0302 	and.w	r3, r3, #2
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d005      	beq.n	80126f4 <tcp_receive+0x938>
                inseg.len -= 1;
 80126e8:	4b78      	ldr	r3, [pc, #480]	; (80128cc <tcp_receive+0xb10>)
 80126ea:	891b      	ldrh	r3, [r3, #8]
 80126ec:	3b01      	subs	r3, #1
 80126ee:	b29a      	uxth	r2, r3
 80126f0:	4b76      	ldr	r3, [pc, #472]	; (80128cc <tcp_receive+0xb10>)
 80126f2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80126f4:	4b75      	ldr	r3, [pc, #468]	; (80128cc <tcp_receive+0xb10>)
 80126f6:	685b      	ldr	r3, [r3, #4]
 80126f8:	4a74      	ldr	r2, [pc, #464]	; (80128cc <tcp_receive+0xb10>)
 80126fa:	8912      	ldrh	r2, [r2, #8]
 80126fc:	4611      	mov	r1, r2
 80126fe:	4618      	mov	r0, r3
 8012700:	f7fc f8ea 	bl	800e8d8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012704:	4b71      	ldr	r3, [pc, #452]	; (80128cc <tcp_receive+0xb10>)
 8012706:	891c      	ldrh	r4, [r3, #8]
 8012708:	4b70      	ldr	r3, [pc, #448]	; (80128cc <tcp_receive+0xb10>)
 801270a:	68db      	ldr	r3, [r3, #12]
 801270c:	899b      	ldrh	r3, [r3, #12]
 801270e:	b29b      	uxth	r3, r3
 8012710:	4618      	mov	r0, r3
 8012712:	f7fa fe75 	bl	800d400 <lwip_htons>
 8012716:	4603      	mov	r3, r0
 8012718:	b2db      	uxtb	r3, r3
 801271a:	f003 0303 	and.w	r3, r3, #3
 801271e:	2b00      	cmp	r3, #0
 8012720:	d001      	beq.n	8012726 <tcp_receive+0x96a>
 8012722:	2301      	movs	r3, #1
 8012724:	e000      	b.n	8012728 <tcp_receive+0x96c>
 8012726:	2300      	movs	r3, #0
 8012728:	4423      	add	r3, r4
 801272a:	b29a      	uxth	r2, r3
 801272c:	4b65      	ldr	r3, [pc, #404]	; (80128c4 <tcp_receive+0xb08>)
 801272e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012730:	4b64      	ldr	r3, [pc, #400]	; (80128c4 <tcp_receive+0xb08>)
 8012732:	881b      	ldrh	r3, [r3, #0]
 8012734:	461a      	mov	r2, r3
 8012736:	4b64      	ldr	r3, [pc, #400]	; (80128c8 <tcp_receive+0xb0c>)
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	441a      	add	r2, r3
 801273c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801273e:	68db      	ldr	r3, [r3, #12]
 8012740:	685b      	ldr	r3, [r3, #4]
 8012742:	429a      	cmp	r2, r3
 8012744:	d006      	beq.n	8012754 <tcp_receive+0x998>
 8012746:	4b62      	ldr	r3, [pc, #392]	; (80128d0 <tcp_receive+0xb14>)
 8012748:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801274c:	4961      	ldr	r1, [pc, #388]	; (80128d4 <tcp_receive+0xb18>)
 801274e:	4862      	ldr	r0, [pc, #392]	; (80128d8 <tcp_receive+0xb1c>)
 8012750:	f004 fd74 	bl	801723c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012758:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801275a:	4b5a      	ldr	r3, [pc, #360]	; (80128c4 <tcp_receive+0xb08>)
 801275c:	881b      	ldrh	r3, [r3, #0]
 801275e:	461a      	mov	r2, r3
 8012760:	4b59      	ldr	r3, [pc, #356]	; (80128c8 <tcp_receive+0xb0c>)
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	441a      	add	r2, r3
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801276e:	4b55      	ldr	r3, [pc, #340]	; (80128c4 <tcp_receive+0xb08>)
 8012770:	881b      	ldrh	r3, [r3, #0]
 8012772:	429a      	cmp	r2, r3
 8012774:	d206      	bcs.n	8012784 <tcp_receive+0x9c8>
 8012776:	4b56      	ldr	r3, [pc, #344]	; (80128d0 <tcp_receive+0xb14>)
 8012778:	f240 6207 	movw	r2, #1543	; 0x607
 801277c:	4957      	ldr	r1, [pc, #348]	; (80128dc <tcp_receive+0xb20>)
 801277e:	4856      	ldr	r0, [pc, #344]	; (80128d8 <tcp_receive+0xb1c>)
 8012780:	f004 fd5c 	bl	801723c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012788:	4b4e      	ldr	r3, [pc, #312]	; (80128c4 <tcp_receive+0xb08>)
 801278a:	881b      	ldrh	r3, [r3, #0]
 801278c:	1ad3      	subs	r3, r2, r3
 801278e:	b29a      	uxth	r2, r3
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012794:	6878      	ldr	r0, [r7, #4]
 8012796:	f7fc ffc5 	bl	800f724 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801279a:	4b4c      	ldr	r3, [pc, #304]	; (80128cc <tcp_receive+0xb10>)
 801279c:	685b      	ldr	r3, [r3, #4]
 801279e:	891b      	ldrh	r3, [r3, #8]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d006      	beq.n	80127b2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80127a4:	4b49      	ldr	r3, [pc, #292]	; (80128cc <tcp_receive+0xb10>)
 80127a6:	685b      	ldr	r3, [r3, #4]
 80127a8:	4a4d      	ldr	r2, [pc, #308]	; (80128e0 <tcp_receive+0xb24>)
 80127aa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80127ac:	4b47      	ldr	r3, [pc, #284]	; (80128cc <tcp_receive+0xb10>)
 80127ae:	2200      	movs	r2, #0
 80127b0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80127b2:	4b46      	ldr	r3, [pc, #280]	; (80128cc <tcp_receive+0xb10>)
 80127b4:	68db      	ldr	r3, [r3, #12]
 80127b6:	899b      	ldrh	r3, [r3, #12]
 80127b8:	b29b      	uxth	r3, r3
 80127ba:	4618      	mov	r0, r3
 80127bc:	f7fa fe20 	bl	800d400 <lwip_htons>
 80127c0:	4603      	mov	r3, r0
 80127c2:	b2db      	uxtb	r3, r3
 80127c4:	f003 0301 	and.w	r3, r3, #1
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	f000 80b8 	beq.w	801293e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80127ce:	4b45      	ldr	r3, [pc, #276]	; (80128e4 <tcp_receive+0xb28>)
 80127d0:	781b      	ldrb	r3, [r3, #0]
 80127d2:	f043 0320 	orr.w	r3, r3, #32
 80127d6:	b2da      	uxtb	r2, r3
 80127d8:	4b42      	ldr	r3, [pc, #264]	; (80128e4 <tcp_receive+0xb28>)
 80127da:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80127dc:	e0af      	b.n	801293e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127e2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127e8:	68db      	ldr	r3, [r3, #12]
 80127ea:	685b      	ldr	r3, [r3, #4]
 80127ec:	4a36      	ldr	r2, [pc, #216]	; (80128c8 <tcp_receive+0xb0c>)
 80127ee:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80127f0:	68bb      	ldr	r3, [r7, #8]
 80127f2:	891b      	ldrh	r3, [r3, #8]
 80127f4:	461c      	mov	r4, r3
 80127f6:	68bb      	ldr	r3, [r7, #8]
 80127f8:	68db      	ldr	r3, [r3, #12]
 80127fa:	899b      	ldrh	r3, [r3, #12]
 80127fc:	b29b      	uxth	r3, r3
 80127fe:	4618      	mov	r0, r3
 8012800:	f7fa fdfe 	bl	800d400 <lwip_htons>
 8012804:	4603      	mov	r3, r0
 8012806:	b2db      	uxtb	r3, r3
 8012808:	f003 0303 	and.w	r3, r3, #3
 801280c:	2b00      	cmp	r3, #0
 801280e:	d001      	beq.n	8012814 <tcp_receive+0xa58>
 8012810:	2301      	movs	r3, #1
 8012812:	e000      	b.n	8012816 <tcp_receive+0xa5a>
 8012814:	2300      	movs	r3, #0
 8012816:	191a      	adds	r2, r3, r4
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801281c:	441a      	add	r2, r3
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012826:	461c      	mov	r4, r3
 8012828:	68bb      	ldr	r3, [r7, #8]
 801282a:	891b      	ldrh	r3, [r3, #8]
 801282c:	461d      	mov	r5, r3
 801282e:	68bb      	ldr	r3, [r7, #8]
 8012830:	68db      	ldr	r3, [r3, #12]
 8012832:	899b      	ldrh	r3, [r3, #12]
 8012834:	b29b      	uxth	r3, r3
 8012836:	4618      	mov	r0, r3
 8012838:	f7fa fde2 	bl	800d400 <lwip_htons>
 801283c:	4603      	mov	r3, r0
 801283e:	b2db      	uxtb	r3, r3
 8012840:	f003 0303 	and.w	r3, r3, #3
 8012844:	2b00      	cmp	r3, #0
 8012846:	d001      	beq.n	801284c <tcp_receive+0xa90>
 8012848:	2301      	movs	r3, #1
 801284a:	e000      	b.n	801284e <tcp_receive+0xa92>
 801284c:	2300      	movs	r3, #0
 801284e:	442b      	add	r3, r5
 8012850:	429c      	cmp	r4, r3
 8012852:	d206      	bcs.n	8012862 <tcp_receive+0xaa6>
 8012854:	4b1e      	ldr	r3, [pc, #120]	; (80128d0 <tcp_receive+0xb14>)
 8012856:	f240 622b 	movw	r2, #1579	; 0x62b
 801285a:	4923      	ldr	r1, [pc, #140]	; (80128e8 <tcp_receive+0xb2c>)
 801285c:	481e      	ldr	r0, [pc, #120]	; (80128d8 <tcp_receive+0xb1c>)
 801285e:	f004 fced 	bl	801723c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012862:	68bb      	ldr	r3, [r7, #8]
 8012864:	891b      	ldrh	r3, [r3, #8]
 8012866:	461c      	mov	r4, r3
 8012868:	68bb      	ldr	r3, [r7, #8]
 801286a:	68db      	ldr	r3, [r3, #12]
 801286c:	899b      	ldrh	r3, [r3, #12]
 801286e:	b29b      	uxth	r3, r3
 8012870:	4618      	mov	r0, r3
 8012872:	f7fa fdc5 	bl	800d400 <lwip_htons>
 8012876:	4603      	mov	r3, r0
 8012878:	b2db      	uxtb	r3, r3
 801287a:	f003 0303 	and.w	r3, r3, #3
 801287e:	2b00      	cmp	r3, #0
 8012880:	d001      	beq.n	8012886 <tcp_receive+0xaca>
 8012882:	2301      	movs	r3, #1
 8012884:	e000      	b.n	8012888 <tcp_receive+0xacc>
 8012886:	2300      	movs	r3, #0
 8012888:	1919      	adds	r1, r3, r4
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801288e:	b28b      	uxth	r3, r1
 8012890:	1ad3      	subs	r3, r2, r3
 8012892:	b29a      	uxth	r2, r3
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012898:	6878      	ldr	r0, [r7, #4]
 801289a:	f7fc ff43 	bl	800f724 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801289e:	68bb      	ldr	r3, [r7, #8]
 80128a0:	685b      	ldr	r3, [r3, #4]
 80128a2:	891b      	ldrh	r3, [r3, #8]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d028      	beq.n	80128fa <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80128a8:	4b0d      	ldr	r3, [pc, #52]	; (80128e0 <tcp_receive+0xb24>)
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d01d      	beq.n	80128ec <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80128b0:	4b0b      	ldr	r3, [pc, #44]	; (80128e0 <tcp_receive+0xb24>)
 80128b2:	681a      	ldr	r2, [r3, #0]
 80128b4:	68bb      	ldr	r3, [r7, #8]
 80128b6:	685b      	ldr	r3, [r3, #4]
 80128b8:	4619      	mov	r1, r3
 80128ba:	4610      	mov	r0, r2
 80128bc:	f7fc fa60 	bl	800ed80 <pbuf_cat>
 80128c0:	e018      	b.n	80128f4 <tcp_receive+0xb38>
 80128c2:	bf00      	nop
 80128c4:	200110a6 	.word	0x200110a6
 80128c8:	2001109c 	.word	0x2001109c
 80128cc:	2001107c 	.word	0x2001107c
 80128d0:	080198c8 	.word	0x080198c8
 80128d4:	08019ca8 	.word	0x08019ca8
 80128d8:	08019914 	.word	0x08019914
 80128dc:	08019ce4 	.word	0x08019ce4
 80128e0:	200110ac 	.word	0x200110ac
 80128e4:	200110a9 	.word	0x200110a9
 80128e8:	08019d04 	.word	0x08019d04
            } else {
              recv_data = cseg->p;
 80128ec:	68bb      	ldr	r3, [r7, #8]
 80128ee:	685b      	ldr	r3, [r3, #4]
 80128f0:	4a70      	ldr	r2, [pc, #448]	; (8012ab4 <tcp_receive+0xcf8>)
 80128f2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80128f4:	68bb      	ldr	r3, [r7, #8]
 80128f6:	2200      	movs	r2, #0
 80128f8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80128fa:	68bb      	ldr	r3, [r7, #8]
 80128fc:	68db      	ldr	r3, [r3, #12]
 80128fe:	899b      	ldrh	r3, [r3, #12]
 8012900:	b29b      	uxth	r3, r3
 8012902:	4618      	mov	r0, r3
 8012904:	f7fa fd7c 	bl	800d400 <lwip_htons>
 8012908:	4603      	mov	r3, r0
 801290a:	b2db      	uxtb	r3, r3
 801290c:	f003 0301 	and.w	r3, r3, #1
 8012910:	2b00      	cmp	r3, #0
 8012912:	d00d      	beq.n	8012930 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012914:	4b68      	ldr	r3, [pc, #416]	; (8012ab8 <tcp_receive+0xcfc>)
 8012916:	781b      	ldrb	r3, [r3, #0]
 8012918:	f043 0320 	orr.w	r3, r3, #32
 801291c:	b2da      	uxtb	r2, r3
 801291e:	4b66      	ldr	r3, [pc, #408]	; (8012ab8 <tcp_receive+0xcfc>)
 8012920:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	7d1b      	ldrb	r3, [r3, #20]
 8012926:	2b04      	cmp	r3, #4
 8012928:	d102      	bne.n	8012930 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	2207      	movs	r2, #7
 801292e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012930:	68bb      	ldr	r3, [r7, #8]
 8012932:	681a      	ldr	r2, [r3, #0]
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012938:	68b8      	ldr	r0, [r7, #8]
 801293a:	f7fd fbd2 	bl	80100e2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012942:	2b00      	cmp	r3, #0
 8012944:	d008      	beq.n	8012958 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801294a:	68db      	ldr	r3, [r3, #12]
 801294c:	685a      	ldr	r2, [r3, #4]
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012952:	429a      	cmp	r2, r3
 8012954:	f43f af43 	beq.w	80127de <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	8b5b      	ldrh	r3, [r3, #26]
 801295c:	f003 0301 	and.w	r3, r3, #1
 8012960:	2b00      	cmp	r3, #0
 8012962:	d00e      	beq.n	8012982 <tcp_receive+0xbc6>
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	8b5b      	ldrh	r3, [r3, #26]
 8012968:	f023 0301 	bic.w	r3, r3, #1
 801296c:	b29a      	uxth	r2, r3
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	835a      	strh	r2, [r3, #26]
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	8b5b      	ldrh	r3, [r3, #26]
 8012976:	f043 0302 	orr.w	r3, r3, #2
 801297a:	b29a      	uxth	r2, r3
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012980:	e188      	b.n	8012c94 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	8b5b      	ldrh	r3, [r3, #26]
 8012986:	f043 0301 	orr.w	r3, r3, #1
 801298a:	b29a      	uxth	r2, r3
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012990:	e180      	b.n	8012c94 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012996:	2b00      	cmp	r3, #0
 8012998:	d106      	bne.n	80129a8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801299a:	4848      	ldr	r0, [pc, #288]	; (8012abc <tcp_receive+0xd00>)
 801299c:	f7fd fbba 	bl	8010114 <tcp_seg_copy>
 80129a0:	4602      	mov	r2, r0
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	675a      	str	r2, [r3, #116]	; 0x74
 80129a6:	e16d      	b.n	8012c84 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80129a8:	2300      	movs	r3, #0
 80129aa:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80129b2:	e157      	b.n	8012c64 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80129b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b6:	68db      	ldr	r3, [r3, #12]
 80129b8:	685a      	ldr	r2, [r3, #4]
 80129ba:	4b41      	ldr	r3, [pc, #260]	; (8012ac0 <tcp_receive+0xd04>)
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	429a      	cmp	r2, r3
 80129c0:	d11d      	bne.n	80129fe <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80129c2:	4b3e      	ldr	r3, [pc, #248]	; (8012abc <tcp_receive+0xd00>)
 80129c4:	891a      	ldrh	r2, [r3, #8]
 80129c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129c8:	891b      	ldrh	r3, [r3, #8]
 80129ca:	429a      	cmp	r2, r3
 80129cc:	f240 814f 	bls.w	8012c6e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80129d0:	483a      	ldr	r0, [pc, #232]	; (8012abc <tcp_receive+0xd00>)
 80129d2:	f7fd fb9f 	bl	8010114 <tcp_seg_copy>
 80129d6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80129d8:	697b      	ldr	r3, [r7, #20]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	f000 8149 	beq.w	8012c72 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80129e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d003      	beq.n	80129ee <tcp_receive+0xc32>
                    prev->next = cseg;
 80129e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129e8:	697a      	ldr	r2, [r7, #20]
 80129ea:	601a      	str	r2, [r3, #0]
 80129ec:	e002      	b.n	80129f4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	697a      	ldr	r2, [r7, #20]
 80129f2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80129f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80129f6:	6978      	ldr	r0, [r7, #20]
 80129f8:	f7ff f8dc 	bl	8011bb4 <tcp_oos_insert_segment>
                }
                break;
 80129fc:	e139      	b.n	8012c72 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80129fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d117      	bne.n	8012a34 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012a04:	4b2e      	ldr	r3, [pc, #184]	; (8012ac0 <tcp_receive+0xd04>)
 8012a06:	681a      	ldr	r2, [r3, #0]
 8012a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a0a:	68db      	ldr	r3, [r3, #12]
 8012a0c:	685b      	ldr	r3, [r3, #4]
 8012a0e:	1ad3      	subs	r3, r2, r3
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	da57      	bge.n	8012ac4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012a14:	4829      	ldr	r0, [pc, #164]	; (8012abc <tcp_receive+0xd00>)
 8012a16:	f7fd fb7d 	bl	8010114 <tcp_seg_copy>
 8012a1a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012a1c:	69bb      	ldr	r3, [r7, #24]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	f000 8129 	beq.w	8012c76 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	69ba      	ldr	r2, [r7, #24]
 8012a28:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012a2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012a2c:	69b8      	ldr	r0, [r7, #24]
 8012a2e:	f7ff f8c1 	bl	8011bb4 <tcp_oos_insert_segment>
                  }
                  break;
 8012a32:	e120      	b.n	8012c76 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012a34:	4b22      	ldr	r3, [pc, #136]	; (8012ac0 <tcp_receive+0xd04>)
 8012a36:	681a      	ldr	r2, [r3, #0]
 8012a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a3a:	68db      	ldr	r3, [r3, #12]
 8012a3c:	685b      	ldr	r3, [r3, #4]
 8012a3e:	1ad3      	subs	r3, r2, r3
 8012a40:	3b01      	subs	r3, #1
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	db3e      	blt.n	8012ac4 <tcp_receive+0xd08>
 8012a46:	4b1e      	ldr	r3, [pc, #120]	; (8012ac0 <tcp_receive+0xd04>)
 8012a48:	681a      	ldr	r2, [r3, #0]
 8012a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a4c:	68db      	ldr	r3, [r3, #12]
 8012a4e:	685b      	ldr	r3, [r3, #4]
 8012a50:	1ad3      	subs	r3, r2, r3
 8012a52:	3301      	adds	r3, #1
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	dc35      	bgt.n	8012ac4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012a58:	4818      	ldr	r0, [pc, #96]	; (8012abc <tcp_receive+0xd00>)
 8012a5a:	f7fd fb5b 	bl	8010114 <tcp_seg_copy>
 8012a5e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012a60:	69fb      	ldr	r3, [r7, #28]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	f000 8109 	beq.w	8012c7a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a6a:	68db      	ldr	r3, [r3, #12]
 8012a6c:	685b      	ldr	r3, [r3, #4]
 8012a6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012a70:	8912      	ldrh	r2, [r2, #8]
 8012a72:	441a      	add	r2, r3
 8012a74:	4b12      	ldr	r3, [pc, #72]	; (8012ac0 <tcp_receive+0xd04>)
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	1ad3      	subs	r3, r2, r3
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	dd12      	ble.n	8012aa4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012a7e:	4b10      	ldr	r3, [pc, #64]	; (8012ac0 <tcp_receive+0xd04>)
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	b29a      	uxth	r2, r3
 8012a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a86:	68db      	ldr	r3, [r3, #12]
 8012a88:	685b      	ldr	r3, [r3, #4]
 8012a8a:	b29b      	uxth	r3, r3
 8012a8c:	1ad3      	subs	r3, r2, r3
 8012a8e:	b29a      	uxth	r2, r3
 8012a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a92:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a96:	685a      	ldr	r2, [r3, #4]
 8012a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a9a:	891b      	ldrh	r3, [r3, #8]
 8012a9c:	4619      	mov	r1, r3
 8012a9e:	4610      	mov	r0, r2
 8012aa0:	f7fb ff1a 	bl	800e8d8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012aa6:	69fa      	ldr	r2, [r7, #28]
 8012aa8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012aaa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012aac:	69f8      	ldr	r0, [r7, #28]
 8012aae:	f7ff f881 	bl	8011bb4 <tcp_oos_insert_segment>
                  }
                  break;
 8012ab2:	e0e2      	b.n	8012c7a <tcp_receive+0xebe>
 8012ab4:	200110ac 	.word	0x200110ac
 8012ab8:	200110a9 	.word	0x200110a9
 8012abc:	2001107c 	.word	0x2001107c
 8012ac0:	2001109c 	.word	0x2001109c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ac6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	f040 80c6 	bne.w	8012c5e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012ad2:	4b80      	ldr	r3, [pc, #512]	; (8012cd4 <tcp_receive+0xf18>)
 8012ad4:	681a      	ldr	r2, [r3, #0]
 8012ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ad8:	68db      	ldr	r3, [r3, #12]
 8012ada:	685b      	ldr	r3, [r3, #4]
 8012adc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	f340 80bd 	ble.w	8012c5e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ae6:	68db      	ldr	r3, [r3, #12]
 8012ae8:	899b      	ldrh	r3, [r3, #12]
 8012aea:	b29b      	uxth	r3, r3
 8012aec:	4618      	mov	r0, r3
 8012aee:	f7fa fc87 	bl	800d400 <lwip_htons>
 8012af2:	4603      	mov	r3, r0
 8012af4:	b2db      	uxtb	r3, r3
 8012af6:	f003 0301 	and.w	r3, r3, #1
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	f040 80bf 	bne.w	8012c7e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012b00:	4875      	ldr	r0, [pc, #468]	; (8012cd8 <tcp_receive+0xf1c>)
 8012b02:	f7fd fb07 	bl	8010114 <tcp_seg_copy>
 8012b06:	4602      	mov	r2, r0
 8012b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b0a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	f000 80b6 	beq.w	8012c82 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b18:	68db      	ldr	r3, [r3, #12]
 8012b1a:	685b      	ldr	r3, [r3, #4]
 8012b1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b1e:	8912      	ldrh	r2, [r2, #8]
 8012b20:	441a      	add	r2, r3
 8012b22:	4b6c      	ldr	r3, [pc, #432]	; (8012cd4 <tcp_receive+0xf18>)
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	1ad3      	subs	r3, r2, r3
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	dd12      	ble.n	8012b52 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012b2c:	4b69      	ldr	r3, [pc, #420]	; (8012cd4 <tcp_receive+0xf18>)
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	b29a      	uxth	r2, r3
 8012b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b34:	68db      	ldr	r3, [r3, #12]
 8012b36:	685b      	ldr	r3, [r3, #4]
 8012b38:	b29b      	uxth	r3, r3
 8012b3a:	1ad3      	subs	r3, r2, r3
 8012b3c:	b29a      	uxth	r2, r3
 8012b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b40:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b44:	685a      	ldr	r2, [r3, #4]
 8012b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b48:	891b      	ldrh	r3, [r3, #8]
 8012b4a:	4619      	mov	r1, r3
 8012b4c:	4610      	mov	r0, r2
 8012b4e:	f7fb fec3 	bl	800e8d8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012b52:	4b62      	ldr	r3, [pc, #392]	; (8012cdc <tcp_receive+0xf20>)
 8012b54:	881b      	ldrh	r3, [r3, #0]
 8012b56:	461a      	mov	r2, r3
 8012b58:	4b5e      	ldr	r3, [pc, #376]	; (8012cd4 <tcp_receive+0xf18>)
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	441a      	add	r2, r3
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b62:	6879      	ldr	r1, [r7, #4]
 8012b64:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012b66:	440b      	add	r3, r1
 8012b68:	1ad3      	subs	r3, r2, r3
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	f340 8089 	ble.w	8012c82 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	68db      	ldr	r3, [r3, #12]
 8012b76:	899b      	ldrh	r3, [r3, #12]
 8012b78:	b29b      	uxth	r3, r3
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	f7fa fc40 	bl	800d400 <lwip_htons>
 8012b80:	4603      	mov	r3, r0
 8012b82:	b2db      	uxtb	r3, r3
 8012b84:	f003 0301 	and.w	r3, r3, #1
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d022      	beq.n	8012bd2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	68db      	ldr	r3, [r3, #12]
 8012b92:	899b      	ldrh	r3, [r3, #12]
 8012b94:	b29b      	uxth	r3, r3
 8012b96:	b21b      	sxth	r3, r3
 8012b98:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012b9c:	b21c      	sxth	r4, r3
 8012b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	68db      	ldr	r3, [r3, #12]
 8012ba4:	899b      	ldrh	r3, [r3, #12]
 8012ba6:	b29b      	uxth	r3, r3
 8012ba8:	4618      	mov	r0, r3
 8012baa:	f7fa fc29 	bl	800d400 <lwip_htons>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	b2db      	uxtb	r3, r3
 8012bb2:	b29b      	uxth	r3, r3
 8012bb4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012bb8:	b29b      	uxth	r3, r3
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f7fa fc20 	bl	800d400 <lwip_htons>
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	b21b      	sxth	r3, r3
 8012bc4:	4323      	orrs	r3, r4
 8012bc6:	b21a      	sxth	r2, r3
 8012bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	68db      	ldr	r3, [r3, #12]
 8012bce:	b292      	uxth	r2, r2
 8012bd0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bd6:	b29a      	uxth	r2, r3
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012bdc:	4413      	add	r3, r2
 8012bde:	b299      	uxth	r1, r3
 8012be0:	4b3c      	ldr	r3, [pc, #240]	; (8012cd4 <tcp_receive+0xf18>)
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	b29a      	uxth	r2, r3
 8012be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	1a8a      	subs	r2, r1, r2
 8012bec:	b292      	uxth	r2, r2
 8012bee:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	685a      	ldr	r2, [r3, #4]
 8012bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	891b      	ldrh	r3, [r3, #8]
 8012bfc:	4619      	mov	r1, r3
 8012bfe:	4610      	mov	r0, r2
 8012c00:	f7fb fe6a 	bl	800e8d8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	891c      	ldrh	r4, [r3, #8]
 8012c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	68db      	ldr	r3, [r3, #12]
 8012c10:	899b      	ldrh	r3, [r3, #12]
 8012c12:	b29b      	uxth	r3, r3
 8012c14:	4618      	mov	r0, r3
 8012c16:	f7fa fbf3 	bl	800d400 <lwip_htons>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	b2db      	uxtb	r3, r3
 8012c1e:	f003 0303 	and.w	r3, r3, #3
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d001      	beq.n	8012c2a <tcp_receive+0xe6e>
 8012c26:	2301      	movs	r3, #1
 8012c28:	e000      	b.n	8012c2c <tcp_receive+0xe70>
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	4423      	add	r3, r4
 8012c2e:	b29a      	uxth	r2, r3
 8012c30:	4b2a      	ldr	r3, [pc, #168]	; (8012cdc <tcp_receive+0xf20>)
 8012c32:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012c34:	4b29      	ldr	r3, [pc, #164]	; (8012cdc <tcp_receive+0xf20>)
 8012c36:	881b      	ldrh	r3, [r3, #0]
 8012c38:	461a      	mov	r2, r3
 8012c3a:	4b26      	ldr	r3, [pc, #152]	; (8012cd4 <tcp_receive+0xf18>)
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	441a      	add	r2, r3
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c44:	6879      	ldr	r1, [r7, #4]
 8012c46:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012c48:	440b      	add	r3, r1
 8012c4a:	429a      	cmp	r2, r3
 8012c4c:	d019      	beq.n	8012c82 <tcp_receive+0xec6>
 8012c4e:	4b24      	ldr	r3, [pc, #144]	; (8012ce0 <tcp_receive+0xf24>)
 8012c50:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012c54:	4923      	ldr	r1, [pc, #140]	; (8012ce4 <tcp_receive+0xf28>)
 8012c56:	4824      	ldr	r0, [pc, #144]	; (8012ce8 <tcp_receive+0xf2c>)
 8012c58:	f004 faf0 	bl	801723c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012c5c:	e011      	b.n	8012c82 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	63bb      	str	r3, [r7, #56]	; 0x38
 8012c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	f47f aea4 	bne.w	80129b4 <tcp_receive+0xbf8>
 8012c6c:	e00a      	b.n	8012c84 <tcp_receive+0xec8>
                break;
 8012c6e:	bf00      	nop
 8012c70:	e008      	b.n	8012c84 <tcp_receive+0xec8>
                break;
 8012c72:	bf00      	nop
 8012c74:	e006      	b.n	8012c84 <tcp_receive+0xec8>
                  break;
 8012c76:	bf00      	nop
 8012c78:	e004      	b.n	8012c84 <tcp_receive+0xec8>
                  break;
 8012c7a:	bf00      	nop
 8012c7c:	e002      	b.n	8012c84 <tcp_receive+0xec8>
                  break;
 8012c7e:	bf00      	nop
 8012c80:	e000      	b.n	8012c84 <tcp_receive+0xec8>
                break;
 8012c82:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012c84:	6878      	ldr	r0, [r7, #4]
 8012c86:	f001 fa33 	bl	80140f0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012c8a:	e003      	b.n	8012c94 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012c8c:	6878      	ldr	r0, [r7, #4]
 8012c8e:	f001 fa2f 	bl	80140f0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012c92:	e01a      	b.n	8012cca <tcp_receive+0xf0e>
 8012c94:	e019      	b.n	8012cca <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012c96:	4b0f      	ldr	r3, [pc, #60]	; (8012cd4 <tcp_receive+0xf18>)
 8012c98:	681a      	ldr	r2, [r3, #0]
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c9e:	1ad3      	subs	r3, r2, r3
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	db0a      	blt.n	8012cba <tcp_receive+0xefe>
 8012ca4:	4b0b      	ldr	r3, [pc, #44]	; (8012cd4 <tcp_receive+0xf18>)
 8012ca6:	681a      	ldr	r2, [r3, #0]
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cac:	6879      	ldr	r1, [r7, #4]
 8012cae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012cb0:	440b      	add	r3, r1
 8012cb2:	1ad3      	subs	r3, r2, r3
 8012cb4:	3301      	adds	r3, #1
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	dd07      	ble.n	8012cca <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	8b5b      	ldrh	r3, [r3, #26]
 8012cbe:	f043 0302 	orr.w	r3, r3, #2
 8012cc2:	b29a      	uxth	r2, r3
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012cc8:	e7ff      	b.n	8012cca <tcp_receive+0xf0e>
 8012cca:	bf00      	nop
 8012ccc:	3750      	adds	r7, #80	; 0x50
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8012cd2:	bf00      	nop
 8012cd4:	2001109c 	.word	0x2001109c
 8012cd8:	2001107c 	.word	0x2001107c
 8012cdc:	200110a6 	.word	0x200110a6
 8012ce0:	080198c8 	.word	0x080198c8
 8012ce4:	08019c70 	.word	0x08019c70
 8012ce8:	08019914 	.word	0x08019914

08012cec <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012cec:	b480      	push	{r7}
 8012cee:	b083      	sub	sp, #12
 8012cf0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012cf2:	4b15      	ldr	r3, [pc, #84]	; (8012d48 <tcp_get_next_optbyte+0x5c>)
 8012cf4:	881b      	ldrh	r3, [r3, #0]
 8012cf6:	1c5a      	adds	r2, r3, #1
 8012cf8:	b291      	uxth	r1, r2
 8012cfa:	4a13      	ldr	r2, [pc, #76]	; (8012d48 <tcp_get_next_optbyte+0x5c>)
 8012cfc:	8011      	strh	r1, [r2, #0]
 8012cfe:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012d00:	4b12      	ldr	r3, [pc, #72]	; (8012d4c <tcp_get_next_optbyte+0x60>)
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d004      	beq.n	8012d12 <tcp_get_next_optbyte+0x26>
 8012d08:	4b11      	ldr	r3, [pc, #68]	; (8012d50 <tcp_get_next_optbyte+0x64>)
 8012d0a:	881b      	ldrh	r3, [r3, #0]
 8012d0c:	88fa      	ldrh	r2, [r7, #6]
 8012d0e:	429a      	cmp	r2, r3
 8012d10:	d208      	bcs.n	8012d24 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012d12:	4b10      	ldr	r3, [pc, #64]	; (8012d54 <tcp_get_next_optbyte+0x68>)
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	3314      	adds	r3, #20
 8012d18:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012d1a:	88fb      	ldrh	r3, [r7, #6]
 8012d1c:	683a      	ldr	r2, [r7, #0]
 8012d1e:	4413      	add	r3, r2
 8012d20:	781b      	ldrb	r3, [r3, #0]
 8012d22:	e00b      	b.n	8012d3c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012d24:	88fb      	ldrh	r3, [r7, #6]
 8012d26:	b2da      	uxtb	r2, r3
 8012d28:	4b09      	ldr	r3, [pc, #36]	; (8012d50 <tcp_get_next_optbyte+0x64>)
 8012d2a:	881b      	ldrh	r3, [r3, #0]
 8012d2c:	b2db      	uxtb	r3, r3
 8012d2e:	1ad3      	subs	r3, r2, r3
 8012d30:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012d32:	4b06      	ldr	r3, [pc, #24]	; (8012d4c <tcp_get_next_optbyte+0x60>)
 8012d34:	681a      	ldr	r2, [r3, #0]
 8012d36:	797b      	ldrb	r3, [r7, #5]
 8012d38:	4413      	add	r3, r2
 8012d3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	370c      	adds	r7, #12
 8012d40:	46bd      	mov	sp, r7
 8012d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d46:	4770      	bx	lr
 8012d48:	20011098 	.word	0x20011098
 8012d4c:	20011094 	.word	0x20011094
 8012d50:	20011092 	.word	0x20011092
 8012d54:	2001108c 	.word	0x2001108c

08012d58 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012d58:	b580      	push	{r7, lr}
 8012d5a:	b084      	sub	sp, #16
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d106      	bne.n	8012d74 <tcp_parseopt+0x1c>
 8012d66:	4b32      	ldr	r3, [pc, #200]	; (8012e30 <tcp_parseopt+0xd8>)
 8012d68:	f240 727d 	movw	r2, #1917	; 0x77d
 8012d6c:	4931      	ldr	r1, [pc, #196]	; (8012e34 <tcp_parseopt+0xdc>)
 8012d6e:	4832      	ldr	r0, [pc, #200]	; (8012e38 <tcp_parseopt+0xe0>)
 8012d70:	f004 fa64 	bl	801723c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012d74:	4b31      	ldr	r3, [pc, #196]	; (8012e3c <tcp_parseopt+0xe4>)
 8012d76:	881b      	ldrh	r3, [r3, #0]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d055      	beq.n	8012e28 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012d7c:	4b30      	ldr	r3, [pc, #192]	; (8012e40 <tcp_parseopt+0xe8>)
 8012d7e:	2200      	movs	r2, #0
 8012d80:	801a      	strh	r2, [r3, #0]
 8012d82:	e045      	b.n	8012e10 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8012d84:	f7ff ffb2 	bl	8012cec <tcp_get_next_optbyte>
 8012d88:	4603      	mov	r3, r0
 8012d8a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012d8c:	7bfb      	ldrb	r3, [r7, #15]
 8012d8e:	2b02      	cmp	r3, #2
 8012d90:	d006      	beq.n	8012da0 <tcp_parseopt+0x48>
 8012d92:	2b02      	cmp	r3, #2
 8012d94:	dc2b      	bgt.n	8012dee <tcp_parseopt+0x96>
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d041      	beq.n	8012e1e <tcp_parseopt+0xc6>
 8012d9a:	2b01      	cmp	r3, #1
 8012d9c:	d127      	bne.n	8012dee <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8012d9e:	e037      	b.n	8012e10 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012da0:	f7ff ffa4 	bl	8012cec <tcp_get_next_optbyte>
 8012da4:	4603      	mov	r3, r0
 8012da6:	2b04      	cmp	r3, #4
 8012da8:	d13b      	bne.n	8012e22 <tcp_parseopt+0xca>
 8012daa:	4b25      	ldr	r3, [pc, #148]	; (8012e40 <tcp_parseopt+0xe8>)
 8012dac:	881b      	ldrh	r3, [r3, #0]
 8012dae:	3301      	adds	r3, #1
 8012db0:	4a22      	ldr	r2, [pc, #136]	; (8012e3c <tcp_parseopt+0xe4>)
 8012db2:	8812      	ldrh	r2, [r2, #0]
 8012db4:	4293      	cmp	r3, r2
 8012db6:	da34      	bge.n	8012e22 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012db8:	f7ff ff98 	bl	8012cec <tcp_get_next_optbyte>
 8012dbc:	4603      	mov	r3, r0
 8012dbe:	b29b      	uxth	r3, r3
 8012dc0:	021b      	lsls	r3, r3, #8
 8012dc2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012dc4:	f7ff ff92 	bl	8012cec <tcp_get_next_optbyte>
 8012dc8:	4603      	mov	r3, r0
 8012dca:	b29a      	uxth	r2, r3
 8012dcc:	89bb      	ldrh	r3, [r7, #12]
 8012dce:	4313      	orrs	r3, r2
 8012dd0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012dd2:	89bb      	ldrh	r3, [r7, #12]
 8012dd4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012dd8:	d804      	bhi.n	8012de4 <tcp_parseopt+0x8c>
 8012dda:	89bb      	ldrh	r3, [r7, #12]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d001      	beq.n	8012de4 <tcp_parseopt+0x8c>
 8012de0:	89ba      	ldrh	r2, [r7, #12]
 8012de2:	e001      	b.n	8012de8 <tcp_parseopt+0x90>
 8012de4:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012dec:	e010      	b.n	8012e10 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012dee:	f7ff ff7d 	bl	8012cec <tcp_get_next_optbyte>
 8012df2:	4603      	mov	r3, r0
 8012df4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012df6:	7afb      	ldrb	r3, [r7, #11]
 8012df8:	2b01      	cmp	r3, #1
 8012dfa:	d914      	bls.n	8012e26 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012dfc:	7afb      	ldrb	r3, [r7, #11]
 8012dfe:	b29a      	uxth	r2, r3
 8012e00:	4b0f      	ldr	r3, [pc, #60]	; (8012e40 <tcp_parseopt+0xe8>)
 8012e02:	881b      	ldrh	r3, [r3, #0]
 8012e04:	4413      	add	r3, r2
 8012e06:	b29b      	uxth	r3, r3
 8012e08:	3b02      	subs	r3, #2
 8012e0a:	b29a      	uxth	r2, r3
 8012e0c:	4b0c      	ldr	r3, [pc, #48]	; (8012e40 <tcp_parseopt+0xe8>)
 8012e0e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012e10:	4b0b      	ldr	r3, [pc, #44]	; (8012e40 <tcp_parseopt+0xe8>)
 8012e12:	881a      	ldrh	r2, [r3, #0]
 8012e14:	4b09      	ldr	r3, [pc, #36]	; (8012e3c <tcp_parseopt+0xe4>)
 8012e16:	881b      	ldrh	r3, [r3, #0]
 8012e18:	429a      	cmp	r2, r3
 8012e1a:	d3b3      	bcc.n	8012d84 <tcp_parseopt+0x2c>
 8012e1c:	e004      	b.n	8012e28 <tcp_parseopt+0xd0>
          return;
 8012e1e:	bf00      	nop
 8012e20:	e002      	b.n	8012e28 <tcp_parseopt+0xd0>
            return;
 8012e22:	bf00      	nop
 8012e24:	e000      	b.n	8012e28 <tcp_parseopt+0xd0>
            return;
 8012e26:	bf00      	nop
      }
    }
  }
}
 8012e28:	3710      	adds	r7, #16
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	bd80      	pop	{r7, pc}
 8012e2e:	bf00      	nop
 8012e30:	080198c8 	.word	0x080198c8
 8012e34:	08019d2c 	.word	0x08019d2c
 8012e38:	08019914 	.word	0x08019914
 8012e3c:	20011090 	.word	0x20011090
 8012e40:	20011098 	.word	0x20011098

08012e44 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012e44:	b480      	push	{r7}
 8012e46:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012e48:	4b05      	ldr	r3, [pc, #20]	; (8012e60 <tcp_trigger_input_pcb_close+0x1c>)
 8012e4a:	781b      	ldrb	r3, [r3, #0]
 8012e4c:	f043 0310 	orr.w	r3, r3, #16
 8012e50:	b2da      	uxtb	r2, r3
 8012e52:	4b03      	ldr	r3, [pc, #12]	; (8012e60 <tcp_trigger_input_pcb_close+0x1c>)
 8012e54:	701a      	strb	r2, [r3, #0]
}
 8012e56:	bf00      	nop
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e5e:	4770      	bx	lr
 8012e60:	200110a9 	.word	0x200110a9

08012e64 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012e64:	b580      	push	{r7, lr}
 8012e66:	b084      	sub	sp, #16
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	60f8      	str	r0, [r7, #12]
 8012e6c:	60b9      	str	r1, [r7, #8]
 8012e6e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d00a      	beq.n	8012e8c <tcp_route+0x28>
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	7a1b      	ldrb	r3, [r3, #8]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d006      	beq.n	8012e8c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	7a1b      	ldrb	r3, [r3, #8]
 8012e82:	4618      	mov	r0, r3
 8012e84:	f7fb fb20 	bl	800e4c8 <netif_get_by_index>
 8012e88:	4603      	mov	r3, r0
 8012e8a:	e003      	b.n	8012e94 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012e8c:	6878      	ldr	r0, [r7, #4]
 8012e8e:	f002 fead 	bl	8015bec <ip4_route>
 8012e92:	4603      	mov	r3, r0
  }
}
 8012e94:	4618      	mov	r0, r3
 8012e96:	3710      	adds	r7, #16
 8012e98:	46bd      	mov	sp, r7
 8012e9a:	bd80      	pop	{r7, pc}

08012e9c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012e9c:	b590      	push	{r4, r7, lr}
 8012e9e:	b087      	sub	sp, #28
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	60f8      	str	r0, [r7, #12]
 8012ea4:	60b9      	str	r1, [r7, #8]
 8012ea6:	603b      	str	r3, [r7, #0]
 8012ea8:	4613      	mov	r3, r2
 8012eaa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d105      	bne.n	8012ebe <tcp_create_segment+0x22>
 8012eb2:	4b44      	ldr	r3, [pc, #272]	; (8012fc4 <tcp_create_segment+0x128>)
 8012eb4:	22a3      	movs	r2, #163	; 0xa3
 8012eb6:	4944      	ldr	r1, [pc, #272]	; (8012fc8 <tcp_create_segment+0x12c>)
 8012eb8:	4844      	ldr	r0, [pc, #272]	; (8012fcc <tcp_create_segment+0x130>)
 8012eba:	f004 f9bf 	bl	801723c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012ebe:	68bb      	ldr	r3, [r7, #8]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d105      	bne.n	8012ed0 <tcp_create_segment+0x34>
 8012ec4:	4b3f      	ldr	r3, [pc, #252]	; (8012fc4 <tcp_create_segment+0x128>)
 8012ec6:	22a4      	movs	r2, #164	; 0xa4
 8012ec8:	4941      	ldr	r1, [pc, #260]	; (8012fd0 <tcp_create_segment+0x134>)
 8012eca:	4840      	ldr	r0, [pc, #256]	; (8012fcc <tcp_create_segment+0x130>)
 8012ecc:	f004 f9b6 	bl	801723c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012ed0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012ed4:	009b      	lsls	r3, r3, #2
 8012ed6:	b2db      	uxtb	r3, r3
 8012ed8:	f003 0304 	and.w	r3, r3, #4
 8012edc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012ede:	2003      	movs	r0, #3
 8012ee0:	f7fa ff66 	bl	800ddb0 <memp_malloc>
 8012ee4:	6138      	str	r0, [r7, #16]
 8012ee6:	693b      	ldr	r3, [r7, #16]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d104      	bne.n	8012ef6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012eec:	68b8      	ldr	r0, [r7, #8]
 8012eee:	f7fb fe79 	bl	800ebe4 <pbuf_free>
    return NULL;
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	e061      	b.n	8012fba <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8012ef6:	693b      	ldr	r3, [r7, #16]
 8012ef8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012efc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012efe:	693b      	ldr	r3, [r7, #16]
 8012f00:	2200      	movs	r2, #0
 8012f02:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012f04:	693b      	ldr	r3, [r7, #16]
 8012f06:	68ba      	ldr	r2, [r7, #8]
 8012f08:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012f0a:	68bb      	ldr	r3, [r7, #8]
 8012f0c:	891a      	ldrh	r2, [r3, #8]
 8012f0e:	7dfb      	ldrb	r3, [r7, #23]
 8012f10:	b29b      	uxth	r3, r3
 8012f12:	429a      	cmp	r2, r3
 8012f14:	d205      	bcs.n	8012f22 <tcp_create_segment+0x86>
 8012f16:	4b2b      	ldr	r3, [pc, #172]	; (8012fc4 <tcp_create_segment+0x128>)
 8012f18:	22b0      	movs	r2, #176	; 0xb0
 8012f1a:	492e      	ldr	r1, [pc, #184]	; (8012fd4 <tcp_create_segment+0x138>)
 8012f1c:	482b      	ldr	r0, [pc, #172]	; (8012fcc <tcp_create_segment+0x130>)
 8012f1e:	f004 f98d 	bl	801723c <iprintf>
  seg->len = p->tot_len - optlen;
 8012f22:	68bb      	ldr	r3, [r7, #8]
 8012f24:	891a      	ldrh	r2, [r3, #8]
 8012f26:	7dfb      	ldrb	r3, [r7, #23]
 8012f28:	b29b      	uxth	r3, r3
 8012f2a:	1ad3      	subs	r3, r2, r3
 8012f2c:	b29a      	uxth	r2, r3
 8012f2e:	693b      	ldr	r3, [r7, #16]
 8012f30:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012f32:	2114      	movs	r1, #20
 8012f34:	68b8      	ldr	r0, [r7, #8]
 8012f36:	f7fb fdbf 	bl	800eab8 <pbuf_add_header>
 8012f3a:	4603      	mov	r3, r0
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d004      	beq.n	8012f4a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012f40:	6938      	ldr	r0, [r7, #16]
 8012f42:	f7fd f8ce 	bl	80100e2 <tcp_seg_free>
    return NULL;
 8012f46:	2300      	movs	r3, #0
 8012f48:	e037      	b.n	8012fba <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012f4a:	693b      	ldr	r3, [r7, #16]
 8012f4c:	685b      	ldr	r3, [r3, #4]
 8012f4e:	685a      	ldr	r2, [r3, #4]
 8012f50:	693b      	ldr	r3, [r7, #16]
 8012f52:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	8ada      	ldrh	r2, [r3, #22]
 8012f58:	693b      	ldr	r3, [r7, #16]
 8012f5a:	68dc      	ldr	r4, [r3, #12]
 8012f5c:	4610      	mov	r0, r2
 8012f5e:	f7fa fa4f 	bl	800d400 <lwip_htons>
 8012f62:	4603      	mov	r3, r0
 8012f64:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	8b1a      	ldrh	r2, [r3, #24]
 8012f6a:	693b      	ldr	r3, [r7, #16]
 8012f6c:	68dc      	ldr	r4, [r3, #12]
 8012f6e:	4610      	mov	r0, r2
 8012f70:	f7fa fa46 	bl	800d400 <lwip_htons>
 8012f74:	4603      	mov	r3, r0
 8012f76:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012f78:	693b      	ldr	r3, [r7, #16]
 8012f7a:	68dc      	ldr	r4, [r3, #12]
 8012f7c:	6838      	ldr	r0, [r7, #0]
 8012f7e:	f7fa fa54 	bl	800d42a <lwip_htonl>
 8012f82:	4603      	mov	r3, r0
 8012f84:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012f86:	7dfb      	ldrb	r3, [r7, #23]
 8012f88:	089b      	lsrs	r3, r3, #2
 8012f8a:	b2db      	uxtb	r3, r3
 8012f8c:	b29b      	uxth	r3, r3
 8012f8e:	3305      	adds	r3, #5
 8012f90:	b29b      	uxth	r3, r3
 8012f92:	031b      	lsls	r3, r3, #12
 8012f94:	b29a      	uxth	r2, r3
 8012f96:	79fb      	ldrb	r3, [r7, #7]
 8012f98:	b29b      	uxth	r3, r3
 8012f9a:	4313      	orrs	r3, r2
 8012f9c:	b29a      	uxth	r2, r3
 8012f9e:	693b      	ldr	r3, [r7, #16]
 8012fa0:	68dc      	ldr	r4, [r3, #12]
 8012fa2:	4610      	mov	r0, r2
 8012fa4:	f7fa fa2c 	bl	800d400 <lwip_htons>
 8012fa8:	4603      	mov	r3, r0
 8012faa:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012fac:	693b      	ldr	r3, [r7, #16]
 8012fae:	68db      	ldr	r3, [r3, #12]
 8012fb0:	2200      	movs	r2, #0
 8012fb2:	749a      	strb	r2, [r3, #18]
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	74da      	strb	r2, [r3, #19]
  return seg;
 8012fb8:	693b      	ldr	r3, [r7, #16]
}
 8012fba:	4618      	mov	r0, r3
 8012fbc:	371c      	adds	r7, #28
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	bd90      	pop	{r4, r7, pc}
 8012fc2:	bf00      	nop
 8012fc4:	08019d48 	.word	0x08019d48
 8012fc8:	08019d7c 	.word	0x08019d7c
 8012fcc:	08019d9c 	.word	0x08019d9c
 8012fd0:	08019dc4 	.word	0x08019dc4
 8012fd4:	08019de8 	.word	0x08019de8

08012fd8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012fd8:	b590      	push	{r4, r7, lr}
 8012fda:	b08b      	sub	sp, #44	; 0x2c
 8012fdc:	af02      	add	r7, sp, #8
 8012fde:	6078      	str	r0, [r7, #4]
 8012fe0:	460b      	mov	r3, r1
 8012fe2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	61fb      	str	r3, [r7, #28]
 8012fe8:	2300      	movs	r3, #0
 8012fea:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012fec:	2300      	movs	r3, #0
 8012fee:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d106      	bne.n	8013004 <tcp_split_unsent_seg+0x2c>
 8012ff6:	4b95      	ldr	r3, [pc, #596]	; (801324c <tcp_split_unsent_seg+0x274>)
 8012ff8:	f240 324b 	movw	r2, #843	; 0x34b
 8012ffc:	4994      	ldr	r1, [pc, #592]	; (8013250 <tcp_split_unsent_seg+0x278>)
 8012ffe:	4895      	ldr	r0, [pc, #596]	; (8013254 <tcp_split_unsent_seg+0x27c>)
 8013000:	f004 f91c 	bl	801723c <iprintf>

  useg = pcb->unsent;
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013008:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801300a:	697b      	ldr	r3, [r7, #20]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d102      	bne.n	8013016 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013010:	f04f 33ff 	mov.w	r3, #4294967295
 8013014:	e116      	b.n	8013244 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8013016:	887b      	ldrh	r3, [r7, #2]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d109      	bne.n	8013030 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801301c:	4b8b      	ldr	r3, [pc, #556]	; (801324c <tcp_split_unsent_seg+0x274>)
 801301e:	f240 3253 	movw	r2, #851	; 0x353
 8013022:	498d      	ldr	r1, [pc, #564]	; (8013258 <tcp_split_unsent_seg+0x280>)
 8013024:	488b      	ldr	r0, [pc, #556]	; (8013254 <tcp_split_unsent_seg+0x27c>)
 8013026:	f004 f909 	bl	801723c <iprintf>
    return ERR_VAL;
 801302a:	f06f 0305 	mvn.w	r3, #5
 801302e:	e109      	b.n	8013244 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013030:	697b      	ldr	r3, [r7, #20]
 8013032:	891b      	ldrh	r3, [r3, #8]
 8013034:	887a      	ldrh	r2, [r7, #2]
 8013036:	429a      	cmp	r2, r3
 8013038:	d301      	bcc.n	801303e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801303a:	2300      	movs	r3, #0
 801303c:	e102      	b.n	8013244 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013042:	887a      	ldrh	r2, [r7, #2]
 8013044:	429a      	cmp	r2, r3
 8013046:	d906      	bls.n	8013056 <tcp_split_unsent_seg+0x7e>
 8013048:	4b80      	ldr	r3, [pc, #512]	; (801324c <tcp_split_unsent_seg+0x274>)
 801304a:	f240 325b 	movw	r2, #859	; 0x35b
 801304e:	4983      	ldr	r1, [pc, #524]	; (801325c <tcp_split_unsent_seg+0x284>)
 8013050:	4880      	ldr	r0, [pc, #512]	; (8013254 <tcp_split_unsent_seg+0x27c>)
 8013052:	f004 f8f3 	bl	801723c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013056:	697b      	ldr	r3, [r7, #20]
 8013058:	891b      	ldrh	r3, [r3, #8]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d106      	bne.n	801306c <tcp_split_unsent_seg+0x94>
 801305e:	4b7b      	ldr	r3, [pc, #492]	; (801324c <tcp_split_unsent_seg+0x274>)
 8013060:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013064:	497e      	ldr	r1, [pc, #504]	; (8013260 <tcp_split_unsent_seg+0x288>)
 8013066:	487b      	ldr	r0, [pc, #492]	; (8013254 <tcp_split_unsent_seg+0x27c>)
 8013068:	f004 f8e8 	bl	801723c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801306c:	697b      	ldr	r3, [r7, #20]
 801306e:	7a9b      	ldrb	r3, [r3, #10]
 8013070:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013072:	7bfb      	ldrb	r3, [r7, #15]
 8013074:	009b      	lsls	r3, r3, #2
 8013076:	b2db      	uxtb	r3, r3
 8013078:	f003 0304 	and.w	r3, r3, #4
 801307c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801307e:	697b      	ldr	r3, [r7, #20]
 8013080:	891a      	ldrh	r2, [r3, #8]
 8013082:	887b      	ldrh	r3, [r7, #2]
 8013084:	1ad3      	subs	r3, r2, r3
 8013086:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013088:	7bbb      	ldrb	r3, [r7, #14]
 801308a:	b29a      	uxth	r2, r3
 801308c:	89bb      	ldrh	r3, [r7, #12]
 801308e:	4413      	add	r3, r2
 8013090:	b29b      	uxth	r3, r3
 8013092:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013096:	4619      	mov	r1, r3
 8013098:	2036      	movs	r0, #54	; 0x36
 801309a:	f7fb fabf 	bl	800e61c <pbuf_alloc>
 801309e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80130a0:	693b      	ldr	r3, [r7, #16]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	f000 80b7 	beq.w	8013216 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80130a8:	697b      	ldr	r3, [r7, #20]
 80130aa:	685b      	ldr	r3, [r3, #4]
 80130ac:	891a      	ldrh	r2, [r3, #8]
 80130ae:	697b      	ldr	r3, [r7, #20]
 80130b0:	891b      	ldrh	r3, [r3, #8]
 80130b2:	1ad3      	subs	r3, r2, r3
 80130b4:	b29a      	uxth	r2, r3
 80130b6:	887b      	ldrh	r3, [r7, #2]
 80130b8:	4413      	add	r3, r2
 80130ba:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80130bc:	697b      	ldr	r3, [r7, #20]
 80130be:	6858      	ldr	r0, [r3, #4]
 80130c0:	693b      	ldr	r3, [r7, #16]
 80130c2:	685a      	ldr	r2, [r3, #4]
 80130c4:	7bbb      	ldrb	r3, [r7, #14]
 80130c6:	18d1      	adds	r1, r2, r3
 80130c8:	897b      	ldrh	r3, [r7, #10]
 80130ca:	89ba      	ldrh	r2, [r7, #12]
 80130cc:	f7fb ff80 	bl	800efd0 <pbuf_copy_partial>
 80130d0:	4603      	mov	r3, r0
 80130d2:	461a      	mov	r2, r3
 80130d4:	89bb      	ldrh	r3, [r7, #12]
 80130d6:	4293      	cmp	r3, r2
 80130d8:	f040 809f 	bne.w	801321a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80130dc:	697b      	ldr	r3, [r7, #20]
 80130de:	68db      	ldr	r3, [r3, #12]
 80130e0:	899b      	ldrh	r3, [r3, #12]
 80130e2:	b29b      	uxth	r3, r3
 80130e4:	4618      	mov	r0, r3
 80130e6:	f7fa f98b 	bl	800d400 <lwip_htons>
 80130ea:	4603      	mov	r3, r0
 80130ec:	b2db      	uxtb	r3, r3
 80130ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80130f2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80130f4:	2300      	movs	r3, #0
 80130f6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80130f8:	7efb      	ldrb	r3, [r7, #27]
 80130fa:	f003 0308 	and.w	r3, r3, #8
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d007      	beq.n	8013112 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013102:	7efb      	ldrb	r3, [r7, #27]
 8013104:	f023 0308 	bic.w	r3, r3, #8
 8013108:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801310a:	7ebb      	ldrb	r3, [r7, #26]
 801310c:	f043 0308 	orr.w	r3, r3, #8
 8013110:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013112:	7efb      	ldrb	r3, [r7, #27]
 8013114:	f003 0301 	and.w	r3, r3, #1
 8013118:	2b00      	cmp	r3, #0
 801311a:	d007      	beq.n	801312c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801311c:	7efb      	ldrb	r3, [r7, #27]
 801311e:	f023 0301 	bic.w	r3, r3, #1
 8013122:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013124:	7ebb      	ldrb	r3, [r7, #26]
 8013126:	f043 0301 	orr.w	r3, r3, #1
 801312a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801312c:	697b      	ldr	r3, [r7, #20]
 801312e:	68db      	ldr	r3, [r3, #12]
 8013130:	685b      	ldr	r3, [r3, #4]
 8013132:	4618      	mov	r0, r3
 8013134:	f7fa f979 	bl	800d42a <lwip_htonl>
 8013138:	4602      	mov	r2, r0
 801313a:	887b      	ldrh	r3, [r7, #2]
 801313c:	18d1      	adds	r1, r2, r3
 801313e:	7eba      	ldrb	r2, [r7, #26]
 8013140:	7bfb      	ldrb	r3, [r7, #15]
 8013142:	9300      	str	r3, [sp, #0]
 8013144:	460b      	mov	r3, r1
 8013146:	6939      	ldr	r1, [r7, #16]
 8013148:	6878      	ldr	r0, [r7, #4]
 801314a:	f7ff fea7 	bl	8012e9c <tcp_create_segment>
 801314e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013150:	69fb      	ldr	r3, [r7, #28]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d063      	beq.n	801321e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013156:	697b      	ldr	r3, [r7, #20]
 8013158:	685b      	ldr	r3, [r3, #4]
 801315a:	4618      	mov	r0, r3
 801315c:	f7fb fdd0 	bl	800ed00 <pbuf_clen>
 8013160:	4603      	mov	r3, r0
 8013162:	461a      	mov	r2, r3
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801316a:	1a9b      	subs	r3, r3, r2
 801316c:	b29a      	uxth	r2, r3
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013174:	697b      	ldr	r3, [r7, #20]
 8013176:	6858      	ldr	r0, [r3, #4]
 8013178:	697b      	ldr	r3, [r7, #20]
 801317a:	685b      	ldr	r3, [r3, #4]
 801317c:	891a      	ldrh	r2, [r3, #8]
 801317e:	89bb      	ldrh	r3, [r7, #12]
 8013180:	1ad3      	subs	r3, r2, r3
 8013182:	b29b      	uxth	r3, r3
 8013184:	4619      	mov	r1, r3
 8013186:	f7fb fba7 	bl	800e8d8 <pbuf_realloc>
  useg->len -= remainder;
 801318a:	697b      	ldr	r3, [r7, #20]
 801318c:	891a      	ldrh	r2, [r3, #8]
 801318e:	89bb      	ldrh	r3, [r7, #12]
 8013190:	1ad3      	subs	r3, r2, r3
 8013192:	b29a      	uxth	r2, r3
 8013194:	697b      	ldr	r3, [r7, #20]
 8013196:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013198:	697b      	ldr	r3, [r7, #20]
 801319a:	68db      	ldr	r3, [r3, #12]
 801319c:	899b      	ldrh	r3, [r3, #12]
 801319e:	b29c      	uxth	r4, r3
 80131a0:	7efb      	ldrb	r3, [r7, #27]
 80131a2:	b29b      	uxth	r3, r3
 80131a4:	4618      	mov	r0, r3
 80131a6:	f7fa f92b 	bl	800d400 <lwip_htons>
 80131aa:	4603      	mov	r3, r0
 80131ac:	461a      	mov	r2, r3
 80131ae:	697b      	ldr	r3, [r7, #20]
 80131b0:	68db      	ldr	r3, [r3, #12]
 80131b2:	4322      	orrs	r2, r4
 80131b4:	b292      	uxth	r2, r2
 80131b6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80131b8:	697b      	ldr	r3, [r7, #20]
 80131ba:	685b      	ldr	r3, [r3, #4]
 80131bc:	4618      	mov	r0, r3
 80131be:	f7fb fd9f 	bl	800ed00 <pbuf_clen>
 80131c2:	4603      	mov	r3, r0
 80131c4:	461a      	mov	r2, r3
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80131cc:	4413      	add	r3, r2
 80131ce:	b29a      	uxth	r2, r3
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80131d6:	69fb      	ldr	r3, [r7, #28]
 80131d8:	685b      	ldr	r3, [r3, #4]
 80131da:	4618      	mov	r0, r3
 80131dc:	f7fb fd90 	bl	800ed00 <pbuf_clen>
 80131e0:	4603      	mov	r3, r0
 80131e2:	461a      	mov	r2, r3
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80131ea:	4413      	add	r3, r2
 80131ec:	b29a      	uxth	r2, r3
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80131f4:	697b      	ldr	r3, [r7, #20]
 80131f6:	681a      	ldr	r2, [r3, #0]
 80131f8:	69fb      	ldr	r3, [r7, #28]
 80131fa:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80131fc:	697b      	ldr	r3, [r7, #20]
 80131fe:	69fa      	ldr	r2, [r7, #28]
 8013200:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013202:	69fb      	ldr	r3, [r7, #28]
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d103      	bne.n	8013212 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	2200      	movs	r2, #0
 801320e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013212:	2300      	movs	r3, #0
 8013214:	e016      	b.n	8013244 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013216:	bf00      	nop
 8013218:	e002      	b.n	8013220 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801321a:	bf00      	nop
 801321c:	e000      	b.n	8013220 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801321e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013220:	69fb      	ldr	r3, [r7, #28]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d006      	beq.n	8013234 <tcp_split_unsent_seg+0x25c>
 8013226:	4b09      	ldr	r3, [pc, #36]	; (801324c <tcp_split_unsent_seg+0x274>)
 8013228:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801322c:	490d      	ldr	r1, [pc, #52]	; (8013264 <tcp_split_unsent_seg+0x28c>)
 801322e:	4809      	ldr	r0, [pc, #36]	; (8013254 <tcp_split_unsent_seg+0x27c>)
 8013230:	f004 f804 	bl	801723c <iprintf>
  if (p != NULL) {
 8013234:	693b      	ldr	r3, [r7, #16]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d002      	beq.n	8013240 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801323a:	6938      	ldr	r0, [r7, #16]
 801323c:	f7fb fcd2 	bl	800ebe4 <pbuf_free>
  }

  return ERR_MEM;
 8013240:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013244:	4618      	mov	r0, r3
 8013246:	3724      	adds	r7, #36	; 0x24
 8013248:	46bd      	mov	sp, r7
 801324a:	bd90      	pop	{r4, r7, pc}
 801324c:	08019d48 	.word	0x08019d48
 8013250:	0801a0dc 	.word	0x0801a0dc
 8013254:	08019d9c 	.word	0x08019d9c
 8013258:	0801a100 	.word	0x0801a100
 801325c:	0801a124 	.word	0x0801a124
 8013260:	0801a134 	.word	0x0801a134
 8013264:	0801a144 	.word	0x0801a144

08013268 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013268:	b590      	push	{r4, r7, lr}
 801326a:	b085      	sub	sp, #20
 801326c:	af00      	add	r7, sp, #0
 801326e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d106      	bne.n	8013284 <tcp_send_fin+0x1c>
 8013276:	4b21      	ldr	r3, [pc, #132]	; (80132fc <tcp_send_fin+0x94>)
 8013278:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801327c:	4920      	ldr	r1, [pc, #128]	; (8013300 <tcp_send_fin+0x98>)
 801327e:	4821      	ldr	r0, [pc, #132]	; (8013304 <tcp_send_fin+0x9c>)
 8013280:	f003 ffdc 	bl	801723c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013288:	2b00      	cmp	r3, #0
 801328a:	d02e      	beq.n	80132ea <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013290:	60fb      	str	r3, [r7, #12]
 8013292:	e002      	b.n	801329a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d1f8      	bne.n	8013294 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	68db      	ldr	r3, [r3, #12]
 80132a6:	899b      	ldrh	r3, [r3, #12]
 80132a8:	b29b      	uxth	r3, r3
 80132aa:	4618      	mov	r0, r3
 80132ac:	f7fa f8a8 	bl	800d400 <lwip_htons>
 80132b0:	4603      	mov	r3, r0
 80132b2:	b2db      	uxtb	r3, r3
 80132b4:	f003 0307 	and.w	r3, r3, #7
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d116      	bne.n	80132ea <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	68db      	ldr	r3, [r3, #12]
 80132c0:	899b      	ldrh	r3, [r3, #12]
 80132c2:	b29c      	uxth	r4, r3
 80132c4:	2001      	movs	r0, #1
 80132c6:	f7fa f89b 	bl	800d400 <lwip_htons>
 80132ca:	4603      	mov	r3, r0
 80132cc:	461a      	mov	r2, r3
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	68db      	ldr	r3, [r3, #12]
 80132d2:	4322      	orrs	r2, r4
 80132d4:	b292      	uxth	r2, r2
 80132d6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	8b5b      	ldrh	r3, [r3, #26]
 80132dc:	f043 0320 	orr.w	r3, r3, #32
 80132e0:	b29a      	uxth	r2, r3
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80132e6:	2300      	movs	r3, #0
 80132e8:	e004      	b.n	80132f4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80132ea:	2101      	movs	r1, #1
 80132ec:	6878      	ldr	r0, [r7, #4]
 80132ee:	f000 f80b 	bl	8013308 <tcp_enqueue_flags>
 80132f2:	4603      	mov	r3, r0
}
 80132f4:	4618      	mov	r0, r3
 80132f6:	3714      	adds	r7, #20
 80132f8:	46bd      	mov	sp, r7
 80132fa:	bd90      	pop	{r4, r7, pc}
 80132fc:	08019d48 	.word	0x08019d48
 8013300:	0801a150 	.word	0x0801a150
 8013304:	08019d9c 	.word	0x08019d9c

08013308 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b08a      	sub	sp, #40	; 0x28
 801330c:	af02      	add	r7, sp, #8
 801330e:	6078      	str	r0, [r7, #4]
 8013310:	460b      	mov	r3, r1
 8013312:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013314:	2300      	movs	r3, #0
 8013316:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013318:	2300      	movs	r3, #0
 801331a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801331c:	78fb      	ldrb	r3, [r7, #3]
 801331e:	f003 0303 	and.w	r3, r3, #3
 8013322:	2b00      	cmp	r3, #0
 8013324:	d106      	bne.n	8013334 <tcp_enqueue_flags+0x2c>
 8013326:	4b67      	ldr	r3, [pc, #412]	; (80134c4 <tcp_enqueue_flags+0x1bc>)
 8013328:	f240 4211 	movw	r2, #1041	; 0x411
 801332c:	4966      	ldr	r1, [pc, #408]	; (80134c8 <tcp_enqueue_flags+0x1c0>)
 801332e:	4867      	ldr	r0, [pc, #412]	; (80134cc <tcp_enqueue_flags+0x1c4>)
 8013330:	f003 ff84 	bl	801723c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d106      	bne.n	8013348 <tcp_enqueue_flags+0x40>
 801333a:	4b62      	ldr	r3, [pc, #392]	; (80134c4 <tcp_enqueue_flags+0x1bc>)
 801333c:	f240 4213 	movw	r2, #1043	; 0x413
 8013340:	4963      	ldr	r1, [pc, #396]	; (80134d0 <tcp_enqueue_flags+0x1c8>)
 8013342:	4862      	ldr	r0, [pc, #392]	; (80134cc <tcp_enqueue_flags+0x1c4>)
 8013344:	f003 ff7a 	bl	801723c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013348:	78fb      	ldrb	r3, [r7, #3]
 801334a:	f003 0302 	and.w	r3, r3, #2
 801334e:	2b00      	cmp	r3, #0
 8013350:	d001      	beq.n	8013356 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013352:	2301      	movs	r3, #1
 8013354:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013356:	7ffb      	ldrb	r3, [r7, #31]
 8013358:	009b      	lsls	r3, r3, #2
 801335a:	b2db      	uxtb	r3, r3
 801335c:	f003 0304 	and.w	r3, r3, #4
 8013360:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013362:	7dfb      	ldrb	r3, [r7, #23]
 8013364:	b29b      	uxth	r3, r3
 8013366:	f44f 7220 	mov.w	r2, #640	; 0x280
 801336a:	4619      	mov	r1, r3
 801336c:	2036      	movs	r0, #54	; 0x36
 801336e:	f7fb f955 	bl	800e61c <pbuf_alloc>
 8013372:	6138      	str	r0, [r7, #16]
 8013374:	693b      	ldr	r3, [r7, #16]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d109      	bne.n	801338e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	8b5b      	ldrh	r3, [r3, #26]
 801337e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013382:	b29a      	uxth	r2, r3
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013388:	f04f 33ff 	mov.w	r3, #4294967295
 801338c:	e095      	b.n	80134ba <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801338e:	693b      	ldr	r3, [r7, #16]
 8013390:	895a      	ldrh	r2, [r3, #10]
 8013392:	7dfb      	ldrb	r3, [r7, #23]
 8013394:	b29b      	uxth	r3, r3
 8013396:	429a      	cmp	r2, r3
 8013398:	d206      	bcs.n	80133a8 <tcp_enqueue_flags+0xa0>
 801339a:	4b4a      	ldr	r3, [pc, #296]	; (80134c4 <tcp_enqueue_flags+0x1bc>)
 801339c:	f240 4239 	movw	r2, #1081	; 0x439
 80133a0:	494c      	ldr	r1, [pc, #304]	; (80134d4 <tcp_enqueue_flags+0x1cc>)
 80133a2:	484a      	ldr	r0, [pc, #296]	; (80134cc <tcp_enqueue_flags+0x1c4>)
 80133a4:	f003 ff4a 	bl	801723c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80133ac:	78fa      	ldrb	r2, [r7, #3]
 80133ae:	7ffb      	ldrb	r3, [r7, #31]
 80133b0:	9300      	str	r3, [sp, #0]
 80133b2:	460b      	mov	r3, r1
 80133b4:	6939      	ldr	r1, [r7, #16]
 80133b6:	6878      	ldr	r0, [r7, #4]
 80133b8:	f7ff fd70 	bl	8012e9c <tcp_create_segment>
 80133bc:	60f8      	str	r0, [r7, #12]
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d109      	bne.n	80133d8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	8b5b      	ldrh	r3, [r3, #26]
 80133c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133cc:	b29a      	uxth	r2, r3
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80133d2:	f04f 33ff 	mov.w	r3, #4294967295
 80133d6:	e070      	b.n	80134ba <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	68db      	ldr	r3, [r3, #12]
 80133dc:	f003 0303 	and.w	r3, r3, #3
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d006      	beq.n	80133f2 <tcp_enqueue_flags+0xea>
 80133e4:	4b37      	ldr	r3, [pc, #220]	; (80134c4 <tcp_enqueue_flags+0x1bc>)
 80133e6:	f240 4242 	movw	r2, #1090	; 0x442
 80133ea:	493b      	ldr	r1, [pc, #236]	; (80134d8 <tcp_enqueue_flags+0x1d0>)
 80133ec:	4837      	ldr	r0, [pc, #220]	; (80134cc <tcp_enqueue_flags+0x1c4>)
 80133ee:	f003 ff25 	bl	801723c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	891b      	ldrh	r3, [r3, #8]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d006      	beq.n	8013408 <tcp_enqueue_flags+0x100>
 80133fa:	4b32      	ldr	r3, [pc, #200]	; (80134c4 <tcp_enqueue_flags+0x1bc>)
 80133fc:	f240 4243 	movw	r2, #1091	; 0x443
 8013400:	4936      	ldr	r1, [pc, #216]	; (80134dc <tcp_enqueue_flags+0x1d4>)
 8013402:	4832      	ldr	r0, [pc, #200]	; (80134cc <tcp_enqueue_flags+0x1c4>)
 8013404:	f003 ff1a 	bl	801723c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801340c:	2b00      	cmp	r3, #0
 801340e:	d103      	bne.n	8013418 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	68fa      	ldr	r2, [r7, #12]
 8013414:	66da      	str	r2, [r3, #108]	; 0x6c
 8013416:	e00d      	b.n	8013434 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801341c:	61bb      	str	r3, [r7, #24]
 801341e:	e002      	b.n	8013426 <tcp_enqueue_flags+0x11e>
 8013420:	69bb      	ldr	r3, [r7, #24]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	61bb      	str	r3, [r7, #24]
 8013426:	69bb      	ldr	r3, [r7, #24]
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d1f8      	bne.n	8013420 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801342e:	69bb      	ldr	r3, [r7, #24]
 8013430:	68fa      	ldr	r2, [r7, #12]
 8013432:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	2200      	movs	r2, #0
 8013438:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801343c:	78fb      	ldrb	r3, [r7, #3]
 801343e:	f003 0302 	and.w	r3, r3, #2
 8013442:	2b00      	cmp	r3, #0
 8013444:	d104      	bne.n	8013450 <tcp_enqueue_flags+0x148>
 8013446:	78fb      	ldrb	r3, [r7, #3]
 8013448:	f003 0301 	and.w	r3, r3, #1
 801344c:	2b00      	cmp	r3, #0
 801344e:	d004      	beq.n	801345a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013454:	1c5a      	adds	r2, r3, #1
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801345a:	78fb      	ldrb	r3, [r7, #3]
 801345c:	f003 0301 	and.w	r3, r3, #1
 8013460:	2b00      	cmp	r3, #0
 8013462:	d006      	beq.n	8013472 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	8b5b      	ldrh	r3, [r3, #26]
 8013468:	f043 0320 	orr.w	r3, r3, #32
 801346c:	b29a      	uxth	r2, r3
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	685b      	ldr	r3, [r3, #4]
 8013476:	4618      	mov	r0, r3
 8013478:	f7fb fc42 	bl	800ed00 <pbuf_clen>
 801347c:	4603      	mov	r3, r0
 801347e:	461a      	mov	r2, r3
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013486:	4413      	add	r3, r2
 8013488:	b29a      	uxth	r2, r3
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013496:	2b00      	cmp	r3, #0
 8013498:	d00e      	beq.n	80134b8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d10a      	bne.n	80134b8 <tcp_enqueue_flags+0x1b0>
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d106      	bne.n	80134b8 <tcp_enqueue_flags+0x1b0>
 80134aa:	4b06      	ldr	r3, [pc, #24]	; (80134c4 <tcp_enqueue_flags+0x1bc>)
 80134ac:	f240 4265 	movw	r2, #1125	; 0x465
 80134b0:	490b      	ldr	r1, [pc, #44]	; (80134e0 <tcp_enqueue_flags+0x1d8>)
 80134b2:	4806      	ldr	r0, [pc, #24]	; (80134cc <tcp_enqueue_flags+0x1c4>)
 80134b4:	f003 fec2 	bl	801723c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80134b8:	2300      	movs	r3, #0
}
 80134ba:	4618      	mov	r0, r3
 80134bc:	3720      	adds	r7, #32
 80134be:	46bd      	mov	sp, r7
 80134c0:	bd80      	pop	{r7, pc}
 80134c2:	bf00      	nop
 80134c4:	08019d48 	.word	0x08019d48
 80134c8:	0801a16c 	.word	0x0801a16c
 80134cc:	08019d9c 	.word	0x08019d9c
 80134d0:	0801a1c4 	.word	0x0801a1c4
 80134d4:	0801a1e4 	.word	0x0801a1e4
 80134d8:	0801a220 	.word	0x0801a220
 80134dc:	0801a238 	.word	0x0801a238
 80134e0:	0801a264 	.word	0x0801a264

080134e4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80134e4:	b5b0      	push	{r4, r5, r7, lr}
 80134e6:	b08a      	sub	sp, #40	; 0x28
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d106      	bne.n	8013500 <tcp_output+0x1c>
 80134f2:	4b8a      	ldr	r3, [pc, #552]	; (801371c <tcp_output+0x238>)
 80134f4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80134f8:	4989      	ldr	r1, [pc, #548]	; (8013720 <tcp_output+0x23c>)
 80134fa:	488a      	ldr	r0, [pc, #552]	; (8013724 <tcp_output+0x240>)
 80134fc:	f003 fe9e 	bl	801723c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	7d1b      	ldrb	r3, [r3, #20]
 8013504:	2b01      	cmp	r3, #1
 8013506:	d106      	bne.n	8013516 <tcp_output+0x32>
 8013508:	4b84      	ldr	r3, [pc, #528]	; (801371c <tcp_output+0x238>)
 801350a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801350e:	4986      	ldr	r1, [pc, #536]	; (8013728 <tcp_output+0x244>)
 8013510:	4884      	ldr	r0, [pc, #528]	; (8013724 <tcp_output+0x240>)
 8013512:	f003 fe93 	bl	801723c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013516:	4b85      	ldr	r3, [pc, #532]	; (801372c <tcp_output+0x248>)
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	687a      	ldr	r2, [r7, #4]
 801351c:	429a      	cmp	r2, r3
 801351e:	d101      	bne.n	8013524 <tcp_output+0x40>
    return ERR_OK;
 8013520:	2300      	movs	r3, #0
 8013522:	e1ce      	b.n	80138c2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013530:	4293      	cmp	r3, r2
 8013532:	bf28      	it	cs
 8013534:	4613      	movcs	r3, r2
 8013536:	b29b      	uxth	r3, r3
 8013538:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801353e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013542:	2b00      	cmp	r3, #0
 8013544:	d10b      	bne.n	801355e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	8b5b      	ldrh	r3, [r3, #26]
 801354a:	f003 0302 	and.w	r3, r3, #2
 801354e:	2b00      	cmp	r3, #0
 8013550:	f000 81aa 	beq.w	80138a8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013554:	6878      	ldr	r0, [r7, #4]
 8013556:	f000 fdcb 	bl	80140f0 <tcp_send_empty_ack>
 801355a:	4603      	mov	r3, r0
 801355c:	e1b1      	b.n	80138c2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801355e:	6879      	ldr	r1, [r7, #4]
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	3304      	adds	r3, #4
 8013564:	461a      	mov	r2, r3
 8013566:	6878      	ldr	r0, [r7, #4]
 8013568:	f7ff fc7c 	bl	8012e64 <tcp_route>
 801356c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801356e:	697b      	ldr	r3, [r7, #20]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d102      	bne.n	801357a <tcp_output+0x96>
    return ERR_RTE;
 8013574:	f06f 0303 	mvn.w	r3, #3
 8013578:	e1a3      	b.n	80138c2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d003      	beq.n	8013588 <tcp_output+0xa4>
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d111      	bne.n	80135ac <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013588:	697b      	ldr	r3, [r7, #20]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d002      	beq.n	8013594 <tcp_output+0xb0>
 801358e:	697b      	ldr	r3, [r7, #20]
 8013590:	3304      	adds	r3, #4
 8013592:	e000      	b.n	8013596 <tcp_output+0xb2>
 8013594:	2300      	movs	r3, #0
 8013596:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013598:	693b      	ldr	r3, [r7, #16]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d102      	bne.n	80135a4 <tcp_output+0xc0>
      return ERR_RTE;
 801359e:	f06f 0303 	mvn.w	r3, #3
 80135a2:	e18e      	b.n	80138c2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80135a4:	693b      	ldr	r3, [r7, #16]
 80135a6:	681a      	ldr	r2, [r3, #0]
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80135ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135ae:	68db      	ldr	r3, [r3, #12]
 80135b0:	685b      	ldr	r3, [r3, #4]
 80135b2:	4618      	mov	r0, r3
 80135b4:	f7f9 ff39 	bl	800d42a <lwip_htonl>
 80135b8:	4602      	mov	r2, r0
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80135be:	1ad3      	subs	r3, r2, r3
 80135c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135c2:	8912      	ldrh	r2, [r2, #8]
 80135c4:	4413      	add	r3, r2
 80135c6:	69ba      	ldr	r2, [r7, #24]
 80135c8:	429a      	cmp	r2, r3
 80135ca:	d227      	bcs.n	801361c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80135d2:	461a      	mov	r2, r3
 80135d4:	69bb      	ldr	r3, [r7, #24]
 80135d6:	4293      	cmp	r3, r2
 80135d8:	d114      	bne.n	8013604 <tcp_output+0x120>
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d110      	bne.n	8013604 <tcp_output+0x120>
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d10b      	bne.n	8013604 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	2200      	movs	r2, #0
 80135f0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	2201      	movs	r2, #1
 80135f8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	2200      	movs	r2, #0
 8013600:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	8b5b      	ldrh	r3, [r3, #26]
 8013608:	f003 0302 	and.w	r3, r3, #2
 801360c:	2b00      	cmp	r3, #0
 801360e:	f000 814d 	beq.w	80138ac <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8013612:	6878      	ldr	r0, [r7, #4]
 8013614:	f000 fd6c 	bl	80140f0 <tcp_send_empty_ack>
 8013618:	4603      	mov	r3, r0
 801361a:	e152      	b.n	80138c2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	2200      	movs	r2, #0
 8013620:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013628:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801362a:	6a3b      	ldr	r3, [r7, #32]
 801362c:	2b00      	cmp	r3, #0
 801362e:	f000 811c 	beq.w	801386a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8013632:	e002      	b.n	801363a <tcp_output+0x156>
 8013634:	6a3b      	ldr	r3, [r7, #32]
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	623b      	str	r3, [r7, #32]
 801363a:	6a3b      	ldr	r3, [r7, #32]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d1f8      	bne.n	8013634 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013642:	e112      	b.n	801386a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013646:	68db      	ldr	r3, [r3, #12]
 8013648:	899b      	ldrh	r3, [r3, #12]
 801364a:	b29b      	uxth	r3, r3
 801364c:	4618      	mov	r0, r3
 801364e:	f7f9 fed7 	bl	800d400 <lwip_htons>
 8013652:	4603      	mov	r3, r0
 8013654:	b2db      	uxtb	r3, r3
 8013656:	f003 0304 	and.w	r3, r3, #4
 801365a:	2b00      	cmp	r3, #0
 801365c:	d006      	beq.n	801366c <tcp_output+0x188>
 801365e:	4b2f      	ldr	r3, [pc, #188]	; (801371c <tcp_output+0x238>)
 8013660:	f240 5236 	movw	r2, #1334	; 0x536
 8013664:	4932      	ldr	r1, [pc, #200]	; (8013730 <tcp_output+0x24c>)
 8013666:	482f      	ldr	r0, [pc, #188]	; (8013724 <tcp_output+0x240>)
 8013668:	f003 fde8 	bl	801723c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013670:	2b00      	cmp	r3, #0
 8013672:	d01f      	beq.n	80136b4 <tcp_output+0x1d0>
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	8b5b      	ldrh	r3, [r3, #26]
 8013678:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801367c:	2b00      	cmp	r3, #0
 801367e:	d119      	bne.n	80136b4 <tcp_output+0x1d0>
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013684:	2b00      	cmp	r3, #0
 8013686:	d00b      	beq.n	80136a0 <tcp_output+0x1bc>
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d110      	bne.n	80136b4 <tcp_output+0x1d0>
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013696:	891a      	ldrh	r2, [r3, #8]
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801369c:	429a      	cmp	r2, r3
 801369e:	d209      	bcs.n	80136b4 <tcp_output+0x1d0>
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d004      	beq.n	80136b4 <tcp_output+0x1d0>
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80136b0:	2b08      	cmp	r3, #8
 80136b2:	d901      	bls.n	80136b8 <tcp_output+0x1d4>
 80136b4:	2301      	movs	r3, #1
 80136b6:	e000      	b.n	80136ba <tcp_output+0x1d6>
 80136b8:	2300      	movs	r3, #0
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d106      	bne.n	80136cc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	8b5b      	ldrh	r3, [r3, #26]
 80136c2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	f000 80e4 	beq.w	8013894 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	7d1b      	ldrb	r3, [r3, #20]
 80136d0:	2b02      	cmp	r3, #2
 80136d2:	d00d      	beq.n	80136f0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80136d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136d6:	68db      	ldr	r3, [r3, #12]
 80136d8:	899b      	ldrh	r3, [r3, #12]
 80136da:	b29c      	uxth	r4, r3
 80136dc:	2010      	movs	r0, #16
 80136de:	f7f9 fe8f 	bl	800d400 <lwip_htons>
 80136e2:	4603      	mov	r3, r0
 80136e4:	461a      	mov	r2, r3
 80136e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136e8:	68db      	ldr	r3, [r3, #12]
 80136ea:	4322      	orrs	r2, r4
 80136ec:	b292      	uxth	r2, r2
 80136ee:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80136f0:	697a      	ldr	r2, [r7, #20]
 80136f2:	6879      	ldr	r1, [r7, #4]
 80136f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80136f6:	f000 f909 	bl	801390c <tcp_output_segment>
 80136fa:	4603      	mov	r3, r0
 80136fc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80136fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d016      	beq.n	8013734 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	8b5b      	ldrh	r3, [r3, #26]
 801370a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801370e:	b29a      	uxth	r2, r3
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	835a      	strh	r2, [r3, #26]
      return err;
 8013714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013718:	e0d3      	b.n	80138c2 <tcp_output+0x3de>
 801371a:	bf00      	nop
 801371c:	08019d48 	.word	0x08019d48
 8013720:	0801a28c 	.word	0x0801a28c
 8013724:	08019d9c 	.word	0x08019d9c
 8013728:	0801a2a4 	.word	0x0801a2a4
 801372c:	200110b0 	.word	0x200110b0
 8013730:	0801a2cc 	.word	0x0801a2cc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013736:	681a      	ldr	r2, [r3, #0]
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	7d1b      	ldrb	r3, [r3, #20]
 8013740:	2b02      	cmp	r3, #2
 8013742:	d006      	beq.n	8013752 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	8b5b      	ldrh	r3, [r3, #26]
 8013748:	f023 0303 	bic.w	r3, r3, #3
 801374c:	b29a      	uxth	r2, r3
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013754:	68db      	ldr	r3, [r3, #12]
 8013756:	685b      	ldr	r3, [r3, #4]
 8013758:	4618      	mov	r0, r3
 801375a:	f7f9 fe66 	bl	800d42a <lwip_htonl>
 801375e:	4604      	mov	r4, r0
 8013760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013762:	891b      	ldrh	r3, [r3, #8]
 8013764:	461d      	mov	r5, r3
 8013766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013768:	68db      	ldr	r3, [r3, #12]
 801376a:	899b      	ldrh	r3, [r3, #12]
 801376c:	b29b      	uxth	r3, r3
 801376e:	4618      	mov	r0, r3
 8013770:	f7f9 fe46 	bl	800d400 <lwip_htons>
 8013774:	4603      	mov	r3, r0
 8013776:	b2db      	uxtb	r3, r3
 8013778:	f003 0303 	and.w	r3, r3, #3
 801377c:	2b00      	cmp	r3, #0
 801377e:	d001      	beq.n	8013784 <tcp_output+0x2a0>
 8013780:	2301      	movs	r3, #1
 8013782:	e000      	b.n	8013786 <tcp_output+0x2a2>
 8013784:	2300      	movs	r3, #0
 8013786:	442b      	add	r3, r5
 8013788:	4423      	add	r3, r4
 801378a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013790:	68bb      	ldr	r3, [r7, #8]
 8013792:	1ad3      	subs	r3, r2, r3
 8013794:	2b00      	cmp	r3, #0
 8013796:	da02      	bge.n	801379e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	68ba      	ldr	r2, [r7, #8]
 801379c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137a0:	891b      	ldrh	r3, [r3, #8]
 80137a2:	461c      	mov	r4, r3
 80137a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137a6:	68db      	ldr	r3, [r3, #12]
 80137a8:	899b      	ldrh	r3, [r3, #12]
 80137aa:	b29b      	uxth	r3, r3
 80137ac:	4618      	mov	r0, r3
 80137ae:	f7f9 fe27 	bl	800d400 <lwip_htons>
 80137b2:	4603      	mov	r3, r0
 80137b4:	b2db      	uxtb	r3, r3
 80137b6:	f003 0303 	and.w	r3, r3, #3
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d001      	beq.n	80137c2 <tcp_output+0x2de>
 80137be:	2301      	movs	r3, #1
 80137c0:	e000      	b.n	80137c4 <tcp_output+0x2e0>
 80137c2:	2300      	movs	r3, #0
 80137c4:	4423      	add	r3, r4
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d049      	beq.n	801385e <tcp_output+0x37a>
      seg->next = NULL;
 80137ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137cc:	2200      	movs	r2, #0
 80137ce:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d105      	bne.n	80137e4 <tcp_output+0x300>
        pcb->unacked = seg;
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137dc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80137de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137e0:	623b      	str	r3, [r7, #32]
 80137e2:	e03f      	b.n	8013864 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80137e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137e6:	68db      	ldr	r3, [r3, #12]
 80137e8:	685b      	ldr	r3, [r3, #4]
 80137ea:	4618      	mov	r0, r3
 80137ec:	f7f9 fe1d 	bl	800d42a <lwip_htonl>
 80137f0:	4604      	mov	r4, r0
 80137f2:	6a3b      	ldr	r3, [r7, #32]
 80137f4:	68db      	ldr	r3, [r3, #12]
 80137f6:	685b      	ldr	r3, [r3, #4]
 80137f8:	4618      	mov	r0, r3
 80137fa:	f7f9 fe16 	bl	800d42a <lwip_htonl>
 80137fe:	4603      	mov	r3, r0
 8013800:	1ae3      	subs	r3, r4, r3
 8013802:	2b00      	cmp	r3, #0
 8013804:	da24      	bge.n	8013850 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	3370      	adds	r3, #112	; 0x70
 801380a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801380c:	e002      	b.n	8013814 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801380e:	69fb      	ldr	r3, [r7, #28]
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013814:	69fb      	ldr	r3, [r7, #28]
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d011      	beq.n	8013840 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801381c:	69fb      	ldr	r3, [r7, #28]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	68db      	ldr	r3, [r3, #12]
 8013822:	685b      	ldr	r3, [r3, #4]
 8013824:	4618      	mov	r0, r3
 8013826:	f7f9 fe00 	bl	800d42a <lwip_htonl>
 801382a:	4604      	mov	r4, r0
 801382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801382e:	68db      	ldr	r3, [r3, #12]
 8013830:	685b      	ldr	r3, [r3, #4]
 8013832:	4618      	mov	r0, r3
 8013834:	f7f9 fdf9 	bl	800d42a <lwip_htonl>
 8013838:	4603      	mov	r3, r0
 801383a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801383c:	2b00      	cmp	r3, #0
 801383e:	dbe6      	blt.n	801380e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8013840:	69fb      	ldr	r3, [r7, #28]
 8013842:	681a      	ldr	r2, [r3, #0]
 8013844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013846:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013848:	69fb      	ldr	r3, [r7, #28]
 801384a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801384c:	601a      	str	r2, [r3, #0]
 801384e:	e009      	b.n	8013864 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013850:	6a3b      	ldr	r3, [r7, #32]
 8013852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013854:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013856:	6a3b      	ldr	r3, [r7, #32]
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	623b      	str	r3, [r7, #32]
 801385c:	e002      	b.n	8013864 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801385e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013860:	f7fc fc3f 	bl	80100e2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013868:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801386c:	2b00      	cmp	r3, #0
 801386e:	d012      	beq.n	8013896 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013872:	68db      	ldr	r3, [r3, #12]
 8013874:	685b      	ldr	r3, [r3, #4]
 8013876:	4618      	mov	r0, r3
 8013878:	f7f9 fdd7 	bl	800d42a <lwip_htonl>
 801387c:	4602      	mov	r2, r0
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013882:	1ad3      	subs	r3, r2, r3
 8013884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013886:	8912      	ldrh	r2, [r2, #8]
 8013888:	4413      	add	r3, r2
  while (seg != NULL &&
 801388a:	69ba      	ldr	r2, [r7, #24]
 801388c:	429a      	cmp	r2, r3
 801388e:	f4bf aed9 	bcs.w	8013644 <tcp_output+0x160>
 8013892:	e000      	b.n	8013896 <tcp_output+0x3b2>
      break;
 8013894:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801389a:	2b00      	cmp	r3, #0
 801389c:	d108      	bne.n	80138b0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	2200      	movs	r2, #0
 80138a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80138a6:	e004      	b.n	80138b2 <tcp_output+0x3ce>
    goto output_done;
 80138a8:	bf00      	nop
 80138aa:	e002      	b.n	80138b2 <tcp_output+0x3ce>
    goto output_done;
 80138ac:	bf00      	nop
 80138ae:	e000      	b.n	80138b2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80138b0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	8b5b      	ldrh	r3, [r3, #26]
 80138b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80138ba:	b29a      	uxth	r2, r3
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80138c0:	2300      	movs	r3, #0
}
 80138c2:	4618      	mov	r0, r3
 80138c4:	3728      	adds	r7, #40	; 0x28
 80138c6:	46bd      	mov	sp, r7
 80138c8:	bdb0      	pop	{r4, r5, r7, pc}
 80138ca:	bf00      	nop

080138cc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80138cc:	b580      	push	{r7, lr}
 80138ce:	b082      	sub	sp, #8
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d106      	bne.n	80138e8 <tcp_output_segment_busy+0x1c>
 80138da:	4b09      	ldr	r3, [pc, #36]	; (8013900 <tcp_output_segment_busy+0x34>)
 80138dc:	f240 529a 	movw	r2, #1434	; 0x59a
 80138e0:	4908      	ldr	r1, [pc, #32]	; (8013904 <tcp_output_segment_busy+0x38>)
 80138e2:	4809      	ldr	r0, [pc, #36]	; (8013908 <tcp_output_segment_busy+0x3c>)
 80138e4:	f003 fcaa 	bl	801723c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	685b      	ldr	r3, [r3, #4]
 80138ec:	7b9b      	ldrb	r3, [r3, #14]
 80138ee:	2b01      	cmp	r3, #1
 80138f0:	d001      	beq.n	80138f6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80138f2:	2301      	movs	r3, #1
 80138f4:	e000      	b.n	80138f8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80138f6:	2300      	movs	r3, #0
}
 80138f8:	4618      	mov	r0, r3
 80138fa:	3708      	adds	r7, #8
 80138fc:	46bd      	mov	sp, r7
 80138fe:	bd80      	pop	{r7, pc}
 8013900:	08019d48 	.word	0x08019d48
 8013904:	0801a2e4 	.word	0x0801a2e4
 8013908:	08019d9c 	.word	0x08019d9c

0801390c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801390c:	b5b0      	push	{r4, r5, r7, lr}
 801390e:	b08c      	sub	sp, #48	; 0x30
 8013910:	af04      	add	r7, sp, #16
 8013912:	60f8      	str	r0, [r7, #12]
 8013914:	60b9      	str	r1, [r7, #8]
 8013916:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d106      	bne.n	801392c <tcp_output_segment+0x20>
 801391e:	4b63      	ldr	r3, [pc, #396]	; (8013aac <tcp_output_segment+0x1a0>)
 8013920:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013924:	4962      	ldr	r1, [pc, #392]	; (8013ab0 <tcp_output_segment+0x1a4>)
 8013926:	4863      	ldr	r0, [pc, #396]	; (8013ab4 <tcp_output_segment+0x1a8>)
 8013928:	f003 fc88 	bl	801723c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801392c:	68bb      	ldr	r3, [r7, #8]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d106      	bne.n	8013940 <tcp_output_segment+0x34>
 8013932:	4b5e      	ldr	r3, [pc, #376]	; (8013aac <tcp_output_segment+0x1a0>)
 8013934:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013938:	495f      	ldr	r1, [pc, #380]	; (8013ab8 <tcp_output_segment+0x1ac>)
 801393a:	485e      	ldr	r0, [pc, #376]	; (8013ab4 <tcp_output_segment+0x1a8>)
 801393c:	f003 fc7e 	bl	801723c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d106      	bne.n	8013954 <tcp_output_segment+0x48>
 8013946:	4b59      	ldr	r3, [pc, #356]	; (8013aac <tcp_output_segment+0x1a0>)
 8013948:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801394c:	495b      	ldr	r1, [pc, #364]	; (8013abc <tcp_output_segment+0x1b0>)
 801394e:	4859      	ldr	r0, [pc, #356]	; (8013ab4 <tcp_output_segment+0x1a8>)
 8013950:	f003 fc74 	bl	801723c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013954:	68f8      	ldr	r0, [r7, #12]
 8013956:	f7ff ffb9 	bl	80138cc <tcp_output_segment_busy>
 801395a:	4603      	mov	r3, r0
 801395c:	2b00      	cmp	r3, #0
 801395e:	d001      	beq.n	8013964 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013960:	2300      	movs	r3, #0
 8013962:	e09f      	b.n	8013aa4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013964:	68bb      	ldr	r3, [r7, #8]
 8013966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	68dc      	ldr	r4, [r3, #12]
 801396c:	4610      	mov	r0, r2
 801396e:	f7f9 fd5c 	bl	800d42a <lwip_htonl>
 8013972:	4603      	mov	r3, r0
 8013974:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013976:	68bb      	ldr	r3, [r7, #8]
 8013978:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	68dc      	ldr	r4, [r3, #12]
 801397e:	4610      	mov	r0, r2
 8013980:	f7f9 fd3e 	bl	800d400 <lwip_htons>
 8013984:	4603      	mov	r3, r0
 8013986:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013988:	68bb      	ldr	r3, [r7, #8]
 801398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801398c:	68ba      	ldr	r2, [r7, #8]
 801398e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013990:	441a      	add	r2, r3
 8013992:	68bb      	ldr	r3, [r7, #8]
 8013994:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	68db      	ldr	r3, [r3, #12]
 801399a:	3314      	adds	r3, #20
 801399c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	7a9b      	ldrb	r3, [r3, #10]
 80139a2:	f003 0301 	and.w	r3, r3, #1
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d015      	beq.n	80139d6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80139aa:	68bb      	ldr	r3, [r7, #8]
 80139ac:	3304      	adds	r3, #4
 80139ae:	461a      	mov	r2, r3
 80139b0:	6879      	ldr	r1, [r7, #4]
 80139b2:	f44f 7006 	mov.w	r0, #536	; 0x218
 80139b6:	f7fc fe8b 	bl	80106d0 <tcp_eff_send_mss_netif>
 80139ba:	4603      	mov	r3, r0
 80139bc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80139be:	8b7b      	ldrh	r3, [r7, #26]
 80139c0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80139c4:	4618      	mov	r0, r3
 80139c6:	f7f9 fd30 	bl	800d42a <lwip_htonl>
 80139ca:	4602      	mov	r2, r0
 80139cc:	69fb      	ldr	r3, [r7, #28]
 80139ce:	601a      	str	r2, [r3, #0]
    opts += 1;
 80139d0:	69fb      	ldr	r3, [r7, #28]
 80139d2:	3304      	adds	r3, #4
 80139d4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80139d6:	68bb      	ldr	r3, [r7, #8]
 80139d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80139dc:	2b00      	cmp	r3, #0
 80139de:	da02      	bge.n	80139e6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80139e0:	68bb      	ldr	r3, [r7, #8]
 80139e2:	2200      	movs	r2, #0
 80139e4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80139e6:	68bb      	ldr	r3, [r7, #8]
 80139e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d10c      	bne.n	8013a08 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80139ee:	4b34      	ldr	r3, [pc, #208]	; (8013ac0 <tcp_output_segment+0x1b4>)
 80139f0:	681a      	ldr	r2, [r3, #0]
 80139f2:	68bb      	ldr	r3, [r7, #8]
 80139f4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	68db      	ldr	r3, [r3, #12]
 80139fa:	685b      	ldr	r3, [r3, #4]
 80139fc:	4618      	mov	r0, r3
 80139fe:	f7f9 fd14 	bl	800d42a <lwip_htonl>
 8013a02:	4602      	mov	r2, r0
 8013a04:	68bb      	ldr	r3, [r7, #8]
 8013a06:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	68da      	ldr	r2, [r3, #12]
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	685b      	ldr	r3, [r3, #4]
 8013a10:	685b      	ldr	r3, [r3, #4]
 8013a12:	1ad3      	subs	r3, r2, r3
 8013a14:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	685b      	ldr	r3, [r3, #4]
 8013a1a:	8959      	ldrh	r1, [r3, #10]
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	685b      	ldr	r3, [r3, #4]
 8013a20:	8b3a      	ldrh	r2, [r7, #24]
 8013a22:	1a8a      	subs	r2, r1, r2
 8013a24:	b292      	uxth	r2, r2
 8013a26:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	685b      	ldr	r3, [r3, #4]
 8013a2c:	8919      	ldrh	r1, [r3, #8]
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	685b      	ldr	r3, [r3, #4]
 8013a32:	8b3a      	ldrh	r2, [r7, #24]
 8013a34:	1a8a      	subs	r2, r1, r2
 8013a36:	b292      	uxth	r2, r2
 8013a38:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	685b      	ldr	r3, [r3, #4]
 8013a3e:	68fa      	ldr	r2, [r7, #12]
 8013a40:	68d2      	ldr	r2, [r2, #12]
 8013a42:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	68db      	ldr	r3, [r3, #12]
 8013a48:	2200      	movs	r2, #0
 8013a4a:	741a      	strb	r2, [r3, #16]
 8013a4c:	2200      	movs	r2, #0
 8013a4e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	68db      	ldr	r3, [r3, #12]
 8013a54:	f103 0214 	add.w	r2, r3, #20
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	7a9b      	ldrb	r3, [r3, #10]
 8013a5c:	009b      	lsls	r3, r3, #2
 8013a5e:	f003 0304 	and.w	r3, r3, #4
 8013a62:	4413      	add	r3, r2
 8013a64:	69fa      	ldr	r2, [r7, #28]
 8013a66:	429a      	cmp	r2, r3
 8013a68:	d006      	beq.n	8013a78 <tcp_output_segment+0x16c>
 8013a6a:	4b10      	ldr	r3, [pc, #64]	; (8013aac <tcp_output_segment+0x1a0>)
 8013a6c:	f240 621c 	movw	r2, #1564	; 0x61c
 8013a70:	4914      	ldr	r1, [pc, #80]	; (8013ac4 <tcp_output_segment+0x1b8>)
 8013a72:	4810      	ldr	r0, [pc, #64]	; (8013ab4 <tcp_output_segment+0x1a8>)
 8013a74:	f003 fbe2 	bl	801723c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	6858      	ldr	r0, [r3, #4]
 8013a7c:	68b9      	ldr	r1, [r7, #8]
 8013a7e:	68bb      	ldr	r3, [r7, #8]
 8013a80:	1d1c      	adds	r4, r3, #4
 8013a82:	68bb      	ldr	r3, [r7, #8]
 8013a84:	7add      	ldrb	r5, [r3, #11]
 8013a86:	68bb      	ldr	r3, [r7, #8]
 8013a88:	7a9b      	ldrb	r3, [r3, #10]
 8013a8a:	687a      	ldr	r2, [r7, #4]
 8013a8c:	9202      	str	r2, [sp, #8]
 8013a8e:	2206      	movs	r2, #6
 8013a90:	9201      	str	r2, [sp, #4]
 8013a92:	9300      	str	r3, [sp, #0]
 8013a94:	462b      	mov	r3, r5
 8013a96:	4622      	mov	r2, r4
 8013a98:	f002 fa66 	bl	8015f68 <ip4_output_if>
 8013a9c:	4603      	mov	r3, r0
 8013a9e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013aa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	3720      	adds	r7, #32
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8013aac:	08019d48 	.word	0x08019d48
 8013ab0:	0801a30c 	.word	0x0801a30c
 8013ab4:	08019d9c 	.word	0x08019d9c
 8013ab8:	0801a32c 	.word	0x0801a32c
 8013abc:	0801a34c 	.word	0x0801a34c
 8013ac0:	20011064 	.word	0x20011064
 8013ac4:	0801a370 	.word	0x0801a370

08013ac8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013ac8:	b5b0      	push	{r4, r5, r7, lr}
 8013aca:	b084      	sub	sp, #16
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d106      	bne.n	8013ae4 <tcp_rexmit_rto_prepare+0x1c>
 8013ad6:	4b31      	ldr	r3, [pc, #196]	; (8013b9c <tcp_rexmit_rto_prepare+0xd4>)
 8013ad8:	f240 6263 	movw	r2, #1635	; 0x663
 8013adc:	4930      	ldr	r1, [pc, #192]	; (8013ba0 <tcp_rexmit_rto_prepare+0xd8>)
 8013ade:	4831      	ldr	r0, [pc, #196]	; (8013ba4 <tcp_rexmit_rto_prepare+0xdc>)
 8013ae0:	f003 fbac 	bl	801723c <iprintf>

  if (pcb->unacked == NULL) {
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d102      	bne.n	8013af2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013aec:	f06f 0305 	mvn.w	r3, #5
 8013af0:	e050      	b.n	8013b94 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013af6:	60fb      	str	r3, [r7, #12]
 8013af8:	e00b      	b.n	8013b12 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013afa:	68f8      	ldr	r0, [r7, #12]
 8013afc:	f7ff fee6 	bl	80138cc <tcp_output_segment_busy>
 8013b00:	4603      	mov	r3, r0
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d002      	beq.n	8013b0c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013b06:	f06f 0305 	mvn.w	r3, #5
 8013b0a:	e043      	b.n	8013b94 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	60fb      	str	r3, [r7, #12]
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d1ef      	bne.n	8013afa <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013b1a:	68f8      	ldr	r0, [r7, #12]
 8013b1c:	f7ff fed6 	bl	80138cc <tcp_output_segment_busy>
 8013b20:	4603      	mov	r3, r0
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d002      	beq.n	8013b2c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013b26:	f06f 0305 	mvn.w	r3, #5
 8013b2a:	e033      	b.n	8013b94 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	2200      	movs	r2, #0
 8013b40:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	8b5b      	ldrh	r3, [r3, #26]
 8013b46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013b4a:	b29a      	uxth	r2, r3
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	68db      	ldr	r3, [r3, #12]
 8013b54:	685b      	ldr	r3, [r3, #4]
 8013b56:	4618      	mov	r0, r3
 8013b58:	f7f9 fc67 	bl	800d42a <lwip_htonl>
 8013b5c:	4604      	mov	r4, r0
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	891b      	ldrh	r3, [r3, #8]
 8013b62:	461d      	mov	r5, r3
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	68db      	ldr	r3, [r3, #12]
 8013b68:	899b      	ldrh	r3, [r3, #12]
 8013b6a:	b29b      	uxth	r3, r3
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	f7f9 fc47 	bl	800d400 <lwip_htons>
 8013b72:	4603      	mov	r3, r0
 8013b74:	b2db      	uxtb	r3, r3
 8013b76:	f003 0303 	and.w	r3, r3, #3
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d001      	beq.n	8013b82 <tcp_rexmit_rto_prepare+0xba>
 8013b7e:	2301      	movs	r3, #1
 8013b80:	e000      	b.n	8013b84 <tcp_rexmit_rto_prepare+0xbc>
 8013b82:	2300      	movs	r3, #0
 8013b84:	442b      	add	r3, r5
 8013b86:	18e2      	adds	r2, r4, r3
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	2200      	movs	r2, #0
 8013b90:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013b92:	2300      	movs	r3, #0
}
 8013b94:	4618      	mov	r0, r3
 8013b96:	3710      	adds	r7, #16
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	bdb0      	pop	{r4, r5, r7, pc}
 8013b9c:	08019d48 	.word	0x08019d48
 8013ba0:	0801a384 	.word	0x0801a384
 8013ba4:	08019d9c 	.word	0x08019d9c

08013ba8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b082      	sub	sp, #8
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d106      	bne.n	8013bc4 <tcp_rexmit_rto_commit+0x1c>
 8013bb6:	4b0d      	ldr	r3, [pc, #52]	; (8013bec <tcp_rexmit_rto_commit+0x44>)
 8013bb8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013bbc:	490c      	ldr	r1, [pc, #48]	; (8013bf0 <tcp_rexmit_rto_commit+0x48>)
 8013bbe:	480d      	ldr	r0, [pc, #52]	; (8013bf4 <tcp_rexmit_rto_commit+0x4c>)
 8013bc0:	f003 fb3c 	bl	801723c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013bca:	2bff      	cmp	r3, #255	; 0xff
 8013bcc:	d007      	beq.n	8013bde <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013bd4:	3301      	adds	r3, #1
 8013bd6:	b2da      	uxtb	r2, r3
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013bde:	6878      	ldr	r0, [r7, #4]
 8013be0:	f7ff fc80 	bl	80134e4 <tcp_output>
}
 8013be4:	bf00      	nop
 8013be6:	3708      	adds	r7, #8
 8013be8:	46bd      	mov	sp, r7
 8013bea:	bd80      	pop	{r7, pc}
 8013bec:	08019d48 	.word	0x08019d48
 8013bf0:	0801a3a8 	.word	0x0801a3a8
 8013bf4:	08019d9c 	.word	0x08019d9c

08013bf8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b082      	sub	sp, #8
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d106      	bne.n	8013c14 <tcp_rexmit_rto+0x1c>
 8013c06:	4b0a      	ldr	r3, [pc, #40]	; (8013c30 <tcp_rexmit_rto+0x38>)
 8013c08:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013c0c:	4909      	ldr	r1, [pc, #36]	; (8013c34 <tcp_rexmit_rto+0x3c>)
 8013c0e:	480a      	ldr	r0, [pc, #40]	; (8013c38 <tcp_rexmit_rto+0x40>)
 8013c10:	f003 fb14 	bl	801723c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013c14:	6878      	ldr	r0, [r7, #4]
 8013c16:	f7ff ff57 	bl	8013ac8 <tcp_rexmit_rto_prepare>
 8013c1a:	4603      	mov	r3, r0
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d102      	bne.n	8013c26 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013c20:	6878      	ldr	r0, [r7, #4]
 8013c22:	f7ff ffc1 	bl	8013ba8 <tcp_rexmit_rto_commit>
  }
}
 8013c26:	bf00      	nop
 8013c28:	3708      	adds	r7, #8
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	bd80      	pop	{r7, pc}
 8013c2e:	bf00      	nop
 8013c30:	08019d48 	.word	0x08019d48
 8013c34:	0801a3cc 	.word	0x0801a3cc
 8013c38:	08019d9c 	.word	0x08019d9c

08013c3c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013c3c:	b590      	push	{r4, r7, lr}
 8013c3e:	b085      	sub	sp, #20
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d106      	bne.n	8013c58 <tcp_rexmit+0x1c>
 8013c4a:	4b2f      	ldr	r3, [pc, #188]	; (8013d08 <tcp_rexmit+0xcc>)
 8013c4c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013c50:	492e      	ldr	r1, [pc, #184]	; (8013d0c <tcp_rexmit+0xd0>)
 8013c52:	482f      	ldr	r0, [pc, #188]	; (8013d10 <tcp_rexmit+0xd4>)
 8013c54:	f003 faf2 	bl	801723c <iprintf>

  if (pcb->unacked == NULL) {
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d102      	bne.n	8013c66 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013c60:	f06f 0305 	mvn.w	r3, #5
 8013c64:	e04c      	b.n	8013d00 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c6a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013c6c:	68b8      	ldr	r0, [r7, #8]
 8013c6e:	f7ff fe2d 	bl	80138cc <tcp_output_segment_busy>
 8013c72:	4603      	mov	r3, r0
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d002      	beq.n	8013c7e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013c78:	f06f 0305 	mvn.w	r3, #5
 8013c7c:	e040      	b.n	8013d00 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	681a      	ldr	r2, [r3, #0]
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	336c      	adds	r3, #108	; 0x6c
 8013c8a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013c8c:	e002      	b.n	8013c94 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d011      	beq.n	8013cc0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	68db      	ldr	r3, [r3, #12]
 8013ca2:	685b      	ldr	r3, [r3, #4]
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	f7f9 fbc0 	bl	800d42a <lwip_htonl>
 8013caa:	4604      	mov	r4, r0
 8013cac:	68bb      	ldr	r3, [r7, #8]
 8013cae:	68db      	ldr	r3, [r3, #12]
 8013cb0:	685b      	ldr	r3, [r3, #4]
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	f7f9 fbb9 	bl	800d42a <lwip_htonl>
 8013cb8:	4603      	mov	r3, r0
 8013cba:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	dbe6      	blt.n	8013c8e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	681a      	ldr	r2, [r3, #0]
 8013cc4:	68bb      	ldr	r3, [r7, #8]
 8013cc6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	68ba      	ldr	r2, [r7, #8]
 8013ccc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013cce:	68bb      	ldr	r3, [r7, #8]
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d103      	bne.n	8013cde <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	2200      	movs	r2, #0
 8013cda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013ce4:	2bff      	cmp	r3, #255	; 0xff
 8013ce6:	d007      	beq.n	8013cf8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013cee:	3301      	adds	r3, #1
 8013cf0:	b2da      	uxtb	r2, r3
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	2200      	movs	r2, #0
 8013cfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013cfe:	2300      	movs	r3, #0
}
 8013d00:	4618      	mov	r0, r3
 8013d02:	3714      	adds	r7, #20
 8013d04:	46bd      	mov	sp, r7
 8013d06:	bd90      	pop	{r4, r7, pc}
 8013d08:	08019d48 	.word	0x08019d48
 8013d0c:	0801a3e8 	.word	0x0801a3e8
 8013d10:	08019d9c 	.word	0x08019d9c

08013d14 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b082      	sub	sp, #8
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d106      	bne.n	8013d30 <tcp_rexmit_fast+0x1c>
 8013d22:	4b2a      	ldr	r3, [pc, #168]	; (8013dcc <tcp_rexmit_fast+0xb8>)
 8013d24:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013d28:	4929      	ldr	r1, [pc, #164]	; (8013dd0 <tcp_rexmit_fast+0xbc>)
 8013d2a:	482a      	ldr	r0, [pc, #168]	; (8013dd4 <tcp_rexmit_fast+0xc0>)
 8013d2c:	f003 fa86 	bl	801723c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d045      	beq.n	8013dc4 <tcp_rexmit_fast+0xb0>
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	8b5b      	ldrh	r3, [r3, #26]
 8013d3c:	f003 0304 	and.w	r3, r3, #4
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d13f      	bne.n	8013dc4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013d44:	6878      	ldr	r0, [r7, #4]
 8013d46:	f7ff ff79 	bl	8013c3c <tcp_rexmit>
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d139      	bne.n	8013dc4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013d5c:	4293      	cmp	r3, r2
 8013d5e:	bf28      	it	cs
 8013d60:	4613      	movcs	r3, r2
 8013d62:	b29b      	uxth	r3, r3
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	da00      	bge.n	8013d6a <tcp_rexmit_fast+0x56>
 8013d68:	3301      	adds	r3, #1
 8013d6a:	105b      	asrs	r3, r3, #1
 8013d6c:	b29a      	uxth	r2, r3
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013d7a:	461a      	mov	r2, r3
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d80:	005b      	lsls	r3, r3, #1
 8013d82:	429a      	cmp	r2, r3
 8013d84:	d206      	bcs.n	8013d94 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d8a:	005b      	lsls	r3, r3, #1
 8013d8c:	b29a      	uxth	r2, r3
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d9e:	4619      	mov	r1, r3
 8013da0:	0049      	lsls	r1, r1, #1
 8013da2:	440b      	add	r3, r1
 8013da4:	b29b      	uxth	r3, r3
 8013da6:	4413      	add	r3, r2
 8013da8:	b29a      	uxth	r2, r3
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	8b5b      	ldrh	r3, [r3, #26]
 8013db4:	f043 0304 	orr.w	r3, r3, #4
 8013db8:	b29a      	uxth	r2, r3
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013dc4:	bf00      	nop
 8013dc6:	3708      	adds	r7, #8
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bd80      	pop	{r7, pc}
 8013dcc:	08019d48 	.word	0x08019d48
 8013dd0:	0801a400 	.word	0x0801a400
 8013dd4:	08019d9c 	.word	0x08019d9c

08013dd8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013dd8:	b580      	push	{r7, lr}
 8013dda:	b086      	sub	sp, #24
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	60f8      	str	r0, [r7, #12]
 8013de0:	607b      	str	r3, [r7, #4]
 8013de2:	460b      	mov	r3, r1
 8013de4:	817b      	strh	r3, [r7, #10]
 8013de6:	4613      	mov	r3, r2
 8013de8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013dea:	897a      	ldrh	r2, [r7, #10]
 8013dec:	893b      	ldrh	r3, [r7, #8]
 8013dee:	4413      	add	r3, r2
 8013df0:	b29b      	uxth	r3, r3
 8013df2:	3314      	adds	r3, #20
 8013df4:	b29b      	uxth	r3, r3
 8013df6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013dfa:	4619      	mov	r1, r3
 8013dfc:	2022      	movs	r0, #34	; 0x22
 8013dfe:	f7fa fc0d 	bl	800e61c <pbuf_alloc>
 8013e02:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013e04:	697b      	ldr	r3, [r7, #20]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d04d      	beq.n	8013ea6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013e0a:	897b      	ldrh	r3, [r7, #10]
 8013e0c:	3313      	adds	r3, #19
 8013e0e:	697a      	ldr	r2, [r7, #20]
 8013e10:	8952      	ldrh	r2, [r2, #10]
 8013e12:	4293      	cmp	r3, r2
 8013e14:	db06      	blt.n	8013e24 <tcp_output_alloc_header_common+0x4c>
 8013e16:	4b26      	ldr	r3, [pc, #152]	; (8013eb0 <tcp_output_alloc_header_common+0xd8>)
 8013e18:	f240 7223 	movw	r2, #1827	; 0x723
 8013e1c:	4925      	ldr	r1, [pc, #148]	; (8013eb4 <tcp_output_alloc_header_common+0xdc>)
 8013e1e:	4826      	ldr	r0, [pc, #152]	; (8013eb8 <tcp_output_alloc_header_common+0xe0>)
 8013e20:	f003 fa0c 	bl	801723c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013e24:	697b      	ldr	r3, [r7, #20]
 8013e26:	685b      	ldr	r3, [r3, #4]
 8013e28:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013e2a:	8c3b      	ldrh	r3, [r7, #32]
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	f7f9 fae7 	bl	800d400 <lwip_htons>
 8013e32:	4603      	mov	r3, r0
 8013e34:	461a      	mov	r2, r3
 8013e36:	693b      	ldr	r3, [r7, #16]
 8013e38:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013e3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	f7f9 fadf 	bl	800d400 <lwip_htons>
 8013e42:	4603      	mov	r3, r0
 8013e44:	461a      	mov	r2, r3
 8013e46:	693b      	ldr	r3, [r7, #16]
 8013e48:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013e4a:	693b      	ldr	r3, [r7, #16]
 8013e4c:	687a      	ldr	r2, [r7, #4]
 8013e4e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013e50:	68f8      	ldr	r0, [r7, #12]
 8013e52:	f7f9 faea 	bl	800d42a <lwip_htonl>
 8013e56:	4602      	mov	r2, r0
 8013e58:	693b      	ldr	r3, [r7, #16]
 8013e5a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013e5c:	897b      	ldrh	r3, [r7, #10]
 8013e5e:	089b      	lsrs	r3, r3, #2
 8013e60:	b29b      	uxth	r3, r3
 8013e62:	3305      	adds	r3, #5
 8013e64:	b29b      	uxth	r3, r3
 8013e66:	031b      	lsls	r3, r3, #12
 8013e68:	b29a      	uxth	r2, r3
 8013e6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013e6e:	b29b      	uxth	r3, r3
 8013e70:	4313      	orrs	r3, r2
 8013e72:	b29b      	uxth	r3, r3
 8013e74:	4618      	mov	r0, r3
 8013e76:	f7f9 fac3 	bl	800d400 <lwip_htons>
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	461a      	mov	r2, r3
 8013e7e:	693b      	ldr	r3, [r7, #16]
 8013e80:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013e82:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013e84:	4618      	mov	r0, r3
 8013e86:	f7f9 fabb 	bl	800d400 <lwip_htons>
 8013e8a:	4603      	mov	r3, r0
 8013e8c:	461a      	mov	r2, r3
 8013e8e:	693b      	ldr	r3, [r7, #16]
 8013e90:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013e92:	693b      	ldr	r3, [r7, #16]
 8013e94:	2200      	movs	r2, #0
 8013e96:	741a      	strb	r2, [r3, #16]
 8013e98:	2200      	movs	r2, #0
 8013e9a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013e9c:	693b      	ldr	r3, [r7, #16]
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	749a      	strb	r2, [r3, #18]
 8013ea2:	2200      	movs	r2, #0
 8013ea4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013ea6:	697b      	ldr	r3, [r7, #20]
}
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	3718      	adds	r7, #24
 8013eac:	46bd      	mov	sp, r7
 8013eae:	bd80      	pop	{r7, pc}
 8013eb0:	08019d48 	.word	0x08019d48
 8013eb4:	0801a420 	.word	0x0801a420
 8013eb8:	08019d9c 	.word	0x08019d9c

08013ebc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013ebc:	b5b0      	push	{r4, r5, r7, lr}
 8013ebe:	b08a      	sub	sp, #40	; 0x28
 8013ec0:	af04      	add	r7, sp, #16
 8013ec2:	60f8      	str	r0, [r7, #12]
 8013ec4:	607b      	str	r3, [r7, #4]
 8013ec6:	460b      	mov	r3, r1
 8013ec8:	817b      	strh	r3, [r7, #10]
 8013eca:	4613      	mov	r3, r2
 8013ecc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d106      	bne.n	8013ee2 <tcp_output_alloc_header+0x26>
 8013ed4:	4b15      	ldr	r3, [pc, #84]	; (8013f2c <tcp_output_alloc_header+0x70>)
 8013ed6:	f240 7242 	movw	r2, #1858	; 0x742
 8013eda:	4915      	ldr	r1, [pc, #84]	; (8013f30 <tcp_output_alloc_header+0x74>)
 8013edc:	4815      	ldr	r0, [pc, #84]	; (8013f34 <tcp_output_alloc_header+0x78>)
 8013ede:	f003 f9ad 	bl	801723c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	8adb      	ldrh	r3, [r3, #22]
 8013eea:	68fa      	ldr	r2, [r7, #12]
 8013eec:	8b12      	ldrh	r2, [r2, #24]
 8013eee:	68f9      	ldr	r1, [r7, #12]
 8013ef0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013ef2:	893d      	ldrh	r5, [r7, #8]
 8013ef4:	897c      	ldrh	r4, [r7, #10]
 8013ef6:	9103      	str	r1, [sp, #12]
 8013ef8:	2110      	movs	r1, #16
 8013efa:	9102      	str	r1, [sp, #8]
 8013efc:	9201      	str	r2, [sp, #4]
 8013efe:	9300      	str	r3, [sp, #0]
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	462a      	mov	r2, r5
 8013f04:	4621      	mov	r1, r4
 8013f06:	f7ff ff67 	bl	8013dd8 <tcp_output_alloc_header_common>
 8013f0a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013f0c:	697b      	ldr	r3, [r7, #20]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d006      	beq.n	8013f20 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f16:	68fa      	ldr	r2, [r7, #12]
 8013f18:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013f1a:	441a      	add	r2, r3
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013f20:	697b      	ldr	r3, [r7, #20]
}
 8013f22:	4618      	mov	r0, r3
 8013f24:	3718      	adds	r7, #24
 8013f26:	46bd      	mov	sp, r7
 8013f28:	bdb0      	pop	{r4, r5, r7, pc}
 8013f2a:	bf00      	nop
 8013f2c:	08019d48 	.word	0x08019d48
 8013f30:	0801a450 	.word	0x0801a450
 8013f34:	08019d9c 	.word	0x08019d9c

08013f38 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b088      	sub	sp, #32
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	60f8      	str	r0, [r7, #12]
 8013f40:	60b9      	str	r1, [r7, #8]
 8013f42:	4611      	mov	r1, r2
 8013f44:	461a      	mov	r2, r3
 8013f46:	460b      	mov	r3, r1
 8013f48:	71fb      	strb	r3, [r7, #7]
 8013f4a:	4613      	mov	r3, r2
 8013f4c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013f4e:	2300      	movs	r3, #0
 8013f50:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013f52:	68bb      	ldr	r3, [r7, #8]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d106      	bne.n	8013f66 <tcp_output_fill_options+0x2e>
 8013f58:	4b13      	ldr	r3, [pc, #76]	; (8013fa8 <tcp_output_fill_options+0x70>)
 8013f5a:	f240 7256 	movw	r2, #1878	; 0x756
 8013f5e:	4913      	ldr	r1, [pc, #76]	; (8013fac <tcp_output_fill_options+0x74>)
 8013f60:	4813      	ldr	r0, [pc, #76]	; (8013fb0 <tcp_output_fill_options+0x78>)
 8013f62:	f003 f96b 	bl	801723c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013f66:	68bb      	ldr	r3, [r7, #8]
 8013f68:	685b      	ldr	r3, [r3, #4]
 8013f6a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013f6c:	69bb      	ldr	r3, [r7, #24]
 8013f6e:	3314      	adds	r3, #20
 8013f70:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013f72:	69bb      	ldr	r3, [r7, #24]
 8013f74:	f103 0214 	add.w	r2, r3, #20
 8013f78:	8bfb      	ldrh	r3, [r7, #30]
 8013f7a:	009b      	lsls	r3, r3, #2
 8013f7c:	4619      	mov	r1, r3
 8013f7e:	79fb      	ldrb	r3, [r7, #7]
 8013f80:	009b      	lsls	r3, r3, #2
 8013f82:	f003 0304 	and.w	r3, r3, #4
 8013f86:	440b      	add	r3, r1
 8013f88:	4413      	add	r3, r2
 8013f8a:	697a      	ldr	r2, [r7, #20]
 8013f8c:	429a      	cmp	r2, r3
 8013f8e:	d006      	beq.n	8013f9e <tcp_output_fill_options+0x66>
 8013f90:	4b05      	ldr	r3, [pc, #20]	; (8013fa8 <tcp_output_fill_options+0x70>)
 8013f92:	f240 7275 	movw	r2, #1909	; 0x775
 8013f96:	4907      	ldr	r1, [pc, #28]	; (8013fb4 <tcp_output_fill_options+0x7c>)
 8013f98:	4805      	ldr	r0, [pc, #20]	; (8013fb0 <tcp_output_fill_options+0x78>)
 8013f9a:	f003 f94f 	bl	801723c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013f9e:	bf00      	nop
 8013fa0:	3720      	adds	r7, #32
 8013fa2:	46bd      	mov	sp, r7
 8013fa4:	bd80      	pop	{r7, pc}
 8013fa6:	bf00      	nop
 8013fa8:	08019d48 	.word	0x08019d48
 8013fac:	0801a478 	.word	0x0801a478
 8013fb0:	08019d9c 	.word	0x08019d9c
 8013fb4:	0801a370 	.word	0x0801a370

08013fb8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b08a      	sub	sp, #40	; 0x28
 8013fbc:	af04      	add	r7, sp, #16
 8013fbe:	60f8      	str	r0, [r7, #12]
 8013fc0:	60b9      	str	r1, [r7, #8]
 8013fc2:	607a      	str	r2, [r7, #4]
 8013fc4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013fc6:	68bb      	ldr	r3, [r7, #8]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d106      	bne.n	8013fda <tcp_output_control_segment+0x22>
 8013fcc:	4b1c      	ldr	r3, [pc, #112]	; (8014040 <tcp_output_control_segment+0x88>)
 8013fce:	f240 7287 	movw	r2, #1927	; 0x787
 8013fd2:	491c      	ldr	r1, [pc, #112]	; (8014044 <tcp_output_control_segment+0x8c>)
 8013fd4:	481c      	ldr	r0, [pc, #112]	; (8014048 <tcp_output_control_segment+0x90>)
 8013fd6:	f003 f931 	bl	801723c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013fda:	683a      	ldr	r2, [r7, #0]
 8013fdc:	6879      	ldr	r1, [r7, #4]
 8013fde:	68f8      	ldr	r0, [r7, #12]
 8013fe0:	f7fe ff40 	bl	8012e64 <tcp_route>
 8013fe4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013fe6:	693b      	ldr	r3, [r7, #16]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d102      	bne.n	8013ff2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013fec:	23fc      	movs	r3, #252	; 0xfc
 8013fee:	75fb      	strb	r3, [r7, #23]
 8013ff0:	e01c      	b.n	801402c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d006      	beq.n	8014006 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	7adb      	ldrb	r3, [r3, #11]
 8013ffc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	7a9b      	ldrb	r3, [r3, #10]
 8014002:	757b      	strb	r3, [r7, #21]
 8014004:	e003      	b.n	801400e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014006:	23ff      	movs	r3, #255	; 0xff
 8014008:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801400a:	2300      	movs	r3, #0
 801400c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801400e:	7dba      	ldrb	r2, [r7, #22]
 8014010:	693b      	ldr	r3, [r7, #16]
 8014012:	9302      	str	r3, [sp, #8]
 8014014:	2306      	movs	r3, #6
 8014016:	9301      	str	r3, [sp, #4]
 8014018:	7d7b      	ldrb	r3, [r7, #21]
 801401a:	9300      	str	r3, [sp, #0]
 801401c:	4613      	mov	r3, r2
 801401e:	683a      	ldr	r2, [r7, #0]
 8014020:	6879      	ldr	r1, [r7, #4]
 8014022:	68b8      	ldr	r0, [r7, #8]
 8014024:	f001 ffa0 	bl	8015f68 <ip4_output_if>
 8014028:	4603      	mov	r3, r0
 801402a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801402c:	68b8      	ldr	r0, [r7, #8]
 801402e:	f7fa fdd9 	bl	800ebe4 <pbuf_free>
  return err;
 8014032:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014036:	4618      	mov	r0, r3
 8014038:	3718      	adds	r7, #24
 801403a:	46bd      	mov	sp, r7
 801403c:	bd80      	pop	{r7, pc}
 801403e:	bf00      	nop
 8014040:	08019d48 	.word	0x08019d48
 8014044:	0801a4a0 	.word	0x0801a4a0
 8014048:	08019d9c 	.word	0x08019d9c

0801404c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801404c:	b590      	push	{r4, r7, lr}
 801404e:	b08b      	sub	sp, #44	; 0x2c
 8014050:	af04      	add	r7, sp, #16
 8014052:	60f8      	str	r0, [r7, #12]
 8014054:	60b9      	str	r1, [r7, #8]
 8014056:	607a      	str	r2, [r7, #4]
 8014058:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801405a:	683b      	ldr	r3, [r7, #0]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d106      	bne.n	801406e <tcp_rst+0x22>
 8014060:	4b1f      	ldr	r3, [pc, #124]	; (80140e0 <tcp_rst+0x94>)
 8014062:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014066:	491f      	ldr	r1, [pc, #124]	; (80140e4 <tcp_rst+0x98>)
 8014068:	481f      	ldr	r0, [pc, #124]	; (80140e8 <tcp_rst+0x9c>)
 801406a:	f003 f8e7 	bl	801723c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801406e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014070:	2b00      	cmp	r3, #0
 8014072:	d106      	bne.n	8014082 <tcp_rst+0x36>
 8014074:	4b1a      	ldr	r3, [pc, #104]	; (80140e0 <tcp_rst+0x94>)
 8014076:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801407a:	491c      	ldr	r1, [pc, #112]	; (80140ec <tcp_rst+0xa0>)
 801407c:	481a      	ldr	r0, [pc, #104]	; (80140e8 <tcp_rst+0x9c>)
 801407e:	f003 f8dd 	bl	801723c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014082:	2300      	movs	r3, #0
 8014084:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014086:	f246 0308 	movw	r3, #24584	; 0x6008
 801408a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801408c:	7dfb      	ldrb	r3, [r7, #23]
 801408e:	b29c      	uxth	r4, r3
 8014090:	68b8      	ldr	r0, [r7, #8]
 8014092:	f7f9 f9ca 	bl	800d42a <lwip_htonl>
 8014096:	4602      	mov	r2, r0
 8014098:	8abb      	ldrh	r3, [r7, #20]
 801409a:	9303      	str	r3, [sp, #12]
 801409c:	2314      	movs	r3, #20
 801409e:	9302      	str	r3, [sp, #8]
 80140a0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80140a2:	9301      	str	r3, [sp, #4]
 80140a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80140a6:	9300      	str	r3, [sp, #0]
 80140a8:	4613      	mov	r3, r2
 80140aa:	2200      	movs	r2, #0
 80140ac:	4621      	mov	r1, r4
 80140ae:	6878      	ldr	r0, [r7, #4]
 80140b0:	f7ff fe92 	bl	8013dd8 <tcp_output_alloc_header_common>
 80140b4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80140b6:	693b      	ldr	r3, [r7, #16]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d00c      	beq.n	80140d6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80140bc:	7dfb      	ldrb	r3, [r7, #23]
 80140be:	2200      	movs	r2, #0
 80140c0:	6939      	ldr	r1, [r7, #16]
 80140c2:	68f8      	ldr	r0, [r7, #12]
 80140c4:	f7ff ff38 	bl	8013f38 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80140c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140ca:	683a      	ldr	r2, [r7, #0]
 80140cc:	6939      	ldr	r1, [r7, #16]
 80140ce:	68f8      	ldr	r0, [r7, #12]
 80140d0:	f7ff ff72 	bl	8013fb8 <tcp_output_control_segment>
 80140d4:	e000      	b.n	80140d8 <tcp_rst+0x8c>
    return;
 80140d6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80140d8:	371c      	adds	r7, #28
 80140da:	46bd      	mov	sp, r7
 80140dc:	bd90      	pop	{r4, r7, pc}
 80140de:	bf00      	nop
 80140e0:	08019d48 	.word	0x08019d48
 80140e4:	0801a4cc 	.word	0x0801a4cc
 80140e8:	08019d9c 	.word	0x08019d9c
 80140ec:	0801a4e8 	.word	0x0801a4e8

080140f0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80140f0:	b590      	push	{r4, r7, lr}
 80140f2:	b087      	sub	sp, #28
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80140f8:	2300      	movs	r3, #0
 80140fa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80140fc:	2300      	movs	r3, #0
 80140fe:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d106      	bne.n	8014114 <tcp_send_empty_ack+0x24>
 8014106:	4b28      	ldr	r3, [pc, #160]	; (80141a8 <tcp_send_empty_ack+0xb8>)
 8014108:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801410c:	4927      	ldr	r1, [pc, #156]	; (80141ac <tcp_send_empty_ack+0xbc>)
 801410e:	4828      	ldr	r0, [pc, #160]	; (80141b0 <tcp_send_empty_ack+0xc0>)
 8014110:	f003 f894 	bl	801723c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014114:	7dfb      	ldrb	r3, [r7, #23]
 8014116:	009b      	lsls	r3, r3, #2
 8014118:	b2db      	uxtb	r3, r3
 801411a:	f003 0304 	and.w	r3, r3, #4
 801411e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014120:	7d7b      	ldrb	r3, [r7, #21]
 8014122:	b29c      	uxth	r4, r3
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014128:	4618      	mov	r0, r3
 801412a:	f7f9 f97e 	bl	800d42a <lwip_htonl>
 801412e:	4603      	mov	r3, r0
 8014130:	2200      	movs	r2, #0
 8014132:	4621      	mov	r1, r4
 8014134:	6878      	ldr	r0, [r7, #4]
 8014136:	f7ff fec1 	bl	8013ebc <tcp_output_alloc_header>
 801413a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801413c:	693b      	ldr	r3, [r7, #16]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d109      	bne.n	8014156 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	8b5b      	ldrh	r3, [r3, #26]
 8014146:	f043 0303 	orr.w	r3, r3, #3
 801414a:	b29a      	uxth	r2, r3
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014150:	f06f 0301 	mvn.w	r3, #1
 8014154:	e023      	b.n	801419e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014156:	7dbb      	ldrb	r3, [r7, #22]
 8014158:	7dfa      	ldrb	r2, [r7, #23]
 801415a:	6939      	ldr	r1, [r7, #16]
 801415c:	6878      	ldr	r0, [r7, #4]
 801415e:	f7ff feeb 	bl	8013f38 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014162:	687a      	ldr	r2, [r7, #4]
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	3304      	adds	r3, #4
 8014168:	6939      	ldr	r1, [r7, #16]
 801416a:	6878      	ldr	r0, [r7, #4]
 801416c:	f7ff ff24 	bl	8013fb8 <tcp_output_control_segment>
 8014170:	4603      	mov	r3, r0
 8014172:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d007      	beq.n	801418c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	8b5b      	ldrh	r3, [r3, #26]
 8014180:	f043 0303 	orr.w	r3, r3, #3
 8014184:	b29a      	uxth	r2, r3
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	835a      	strh	r2, [r3, #26]
 801418a:	e006      	b.n	801419a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	8b5b      	ldrh	r3, [r3, #26]
 8014190:	f023 0303 	bic.w	r3, r3, #3
 8014194:	b29a      	uxth	r2, r3
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801419a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801419e:	4618      	mov	r0, r3
 80141a0:	371c      	adds	r7, #28
 80141a2:	46bd      	mov	sp, r7
 80141a4:	bd90      	pop	{r4, r7, pc}
 80141a6:	bf00      	nop
 80141a8:	08019d48 	.word	0x08019d48
 80141ac:	0801a504 	.word	0x0801a504
 80141b0:	08019d9c 	.word	0x08019d9c

080141b4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80141b4:	b590      	push	{r4, r7, lr}
 80141b6:	b087      	sub	sp, #28
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80141bc:	2300      	movs	r3, #0
 80141be:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d106      	bne.n	80141d4 <tcp_keepalive+0x20>
 80141c6:	4b18      	ldr	r3, [pc, #96]	; (8014228 <tcp_keepalive+0x74>)
 80141c8:	f640 0224 	movw	r2, #2084	; 0x824
 80141cc:	4917      	ldr	r1, [pc, #92]	; (801422c <tcp_keepalive+0x78>)
 80141ce:	4818      	ldr	r0, [pc, #96]	; (8014230 <tcp_keepalive+0x7c>)
 80141d0:	f003 f834 	bl	801723c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80141d4:	7dfb      	ldrb	r3, [r7, #23]
 80141d6:	b29c      	uxth	r4, r3
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80141dc:	3b01      	subs	r3, #1
 80141de:	4618      	mov	r0, r3
 80141e0:	f7f9 f923 	bl	800d42a <lwip_htonl>
 80141e4:	4603      	mov	r3, r0
 80141e6:	2200      	movs	r2, #0
 80141e8:	4621      	mov	r1, r4
 80141ea:	6878      	ldr	r0, [r7, #4]
 80141ec:	f7ff fe66 	bl	8013ebc <tcp_output_alloc_header>
 80141f0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80141f2:	693b      	ldr	r3, [r7, #16]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d102      	bne.n	80141fe <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80141f8:	f04f 33ff 	mov.w	r3, #4294967295
 80141fc:	e010      	b.n	8014220 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80141fe:	7dfb      	ldrb	r3, [r7, #23]
 8014200:	2200      	movs	r2, #0
 8014202:	6939      	ldr	r1, [r7, #16]
 8014204:	6878      	ldr	r0, [r7, #4]
 8014206:	f7ff fe97 	bl	8013f38 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801420a:	687a      	ldr	r2, [r7, #4]
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	3304      	adds	r3, #4
 8014210:	6939      	ldr	r1, [r7, #16]
 8014212:	6878      	ldr	r0, [r7, #4]
 8014214:	f7ff fed0 	bl	8013fb8 <tcp_output_control_segment>
 8014218:	4603      	mov	r3, r0
 801421a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801421c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014220:	4618      	mov	r0, r3
 8014222:	371c      	adds	r7, #28
 8014224:	46bd      	mov	sp, r7
 8014226:	bd90      	pop	{r4, r7, pc}
 8014228:	08019d48 	.word	0x08019d48
 801422c:	0801a524 	.word	0x0801a524
 8014230:	08019d9c 	.word	0x08019d9c

08014234 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014234:	b590      	push	{r4, r7, lr}
 8014236:	b08b      	sub	sp, #44	; 0x2c
 8014238:	af00      	add	r7, sp, #0
 801423a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801423c:	2300      	movs	r3, #0
 801423e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d106      	bne.n	8014256 <tcp_zero_window_probe+0x22>
 8014248:	4b4c      	ldr	r3, [pc, #304]	; (801437c <tcp_zero_window_probe+0x148>)
 801424a:	f640 024f 	movw	r2, #2127	; 0x84f
 801424e:	494c      	ldr	r1, [pc, #304]	; (8014380 <tcp_zero_window_probe+0x14c>)
 8014250:	484c      	ldr	r0, [pc, #304]	; (8014384 <tcp_zero_window_probe+0x150>)
 8014252:	f002 fff3 	bl	801723c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801425a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801425c:	6a3b      	ldr	r3, [r7, #32]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d101      	bne.n	8014266 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014262:	2300      	movs	r3, #0
 8014264:	e086      	b.n	8014374 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801426c:	2bff      	cmp	r3, #255	; 0xff
 801426e:	d007      	beq.n	8014280 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014276:	3301      	adds	r3, #1
 8014278:	b2da      	uxtb	r2, r3
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014280:	6a3b      	ldr	r3, [r7, #32]
 8014282:	68db      	ldr	r3, [r3, #12]
 8014284:	899b      	ldrh	r3, [r3, #12]
 8014286:	b29b      	uxth	r3, r3
 8014288:	4618      	mov	r0, r3
 801428a:	f7f9 f8b9 	bl	800d400 <lwip_htons>
 801428e:	4603      	mov	r3, r0
 8014290:	b2db      	uxtb	r3, r3
 8014292:	f003 0301 	and.w	r3, r3, #1
 8014296:	2b00      	cmp	r3, #0
 8014298:	d005      	beq.n	80142a6 <tcp_zero_window_probe+0x72>
 801429a:	6a3b      	ldr	r3, [r7, #32]
 801429c:	891b      	ldrh	r3, [r3, #8]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d101      	bne.n	80142a6 <tcp_zero_window_probe+0x72>
 80142a2:	2301      	movs	r3, #1
 80142a4:	e000      	b.n	80142a8 <tcp_zero_window_probe+0x74>
 80142a6:	2300      	movs	r3, #0
 80142a8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80142aa:	7ffb      	ldrb	r3, [r7, #31]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	bf0c      	ite	eq
 80142b0:	2301      	moveq	r3, #1
 80142b2:	2300      	movne	r3, #0
 80142b4:	b2db      	uxtb	r3, r3
 80142b6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80142b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80142bc:	b299      	uxth	r1, r3
 80142be:	6a3b      	ldr	r3, [r7, #32]
 80142c0:	68db      	ldr	r3, [r3, #12]
 80142c2:	685b      	ldr	r3, [r3, #4]
 80142c4:	8bba      	ldrh	r2, [r7, #28]
 80142c6:	6878      	ldr	r0, [r7, #4]
 80142c8:	f7ff fdf8 	bl	8013ebc <tcp_output_alloc_header>
 80142cc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80142ce:	69bb      	ldr	r3, [r7, #24]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d102      	bne.n	80142da <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80142d4:	f04f 33ff 	mov.w	r3, #4294967295
 80142d8:	e04c      	b.n	8014374 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80142da:	69bb      	ldr	r3, [r7, #24]
 80142dc:	685b      	ldr	r3, [r3, #4]
 80142de:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80142e0:	7ffb      	ldrb	r3, [r7, #31]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d011      	beq.n	801430a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80142e6:	697b      	ldr	r3, [r7, #20]
 80142e8:	899b      	ldrh	r3, [r3, #12]
 80142ea:	b29b      	uxth	r3, r3
 80142ec:	b21b      	sxth	r3, r3
 80142ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80142f2:	b21c      	sxth	r4, r3
 80142f4:	2011      	movs	r0, #17
 80142f6:	f7f9 f883 	bl	800d400 <lwip_htons>
 80142fa:	4603      	mov	r3, r0
 80142fc:	b21b      	sxth	r3, r3
 80142fe:	4323      	orrs	r3, r4
 8014300:	b21b      	sxth	r3, r3
 8014302:	b29a      	uxth	r2, r3
 8014304:	697b      	ldr	r3, [r7, #20]
 8014306:	819a      	strh	r2, [r3, #12]
 8014308:	e010      	b.n	801432c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801430a:	69bb      	ldr	r3, [r7, #24]
 801430c:	685b      	ldr	r3, [r3, #4]
 801430e:	3314      	adds	r3, #20
 8014310:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014312:	6a3b      	ldr	r3, [r7, #32]
 8014314:	6858      	ldr	r0, [r3, #4]
 8014316:	6a3b      	ldr	r3, [r7, #32]
 8014318:	685b      	ldr	r3, [r3, #4]
 801431a:	891a      	ldrh	r2, [r3, #8]
 801431c:	6a3b      	ldr	r3, [r7, #32]
 801431e:	891b      	ldrh	r3, [r3, #8]
 8014320:	1ad3      	subs	r3, r2, r3
 8014322:	b29b      	uxth	r3, r3
 8014324:	2201      	movs	r2, #1
 8014326:	6939      	ldr	r1, [r7, #16]
 8014328:	f7fa fe52 	bl	800efd0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801432c:	6a3b      	ldr	r3, [r7, #32]
 801432e:	68db      	ldr	r3, [r3, #12]
 8014330:	685b      	ldr	r3, [r3, #4]
 8014332:	4618      	mov	r0, r3
 8014334:	f7f9 f879 	bl	800d42a <lwip_htonl>
 8014338:	4603      	mov	r3, r0
 801433a:	3301      	adds	r3, #1
 801433c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	1ad3      	subs	r3, r2, r3
 8014346:	2b00      	cmp	r3, #0
 8014348:	da02      	bge.n	8014350 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	68fa      	ldr	r2, [r7, #12]
 801434e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014354:	2200      	movs	r2, #0
 8014356:	69b9      	ldr	r1, [r7, #24]
 8014358:	6878      	ldr	r0, [r7, #4]
 801435a:	f7ff fded 	bl	8013f38 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801435e:	687a      	ldr	r2, [r7, #4]
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	3304      	adds	r3, #4
 8014364:	69b9      	ldr	r1, [r7, #24]
 8014366:	6878      	ldr	r0, [r7, #4]
 8014368:	f7ff fe26 	bl	8013fb8 <tcp_output_control_segment>
 801436c:	4603      	mov	r3, r0
 801436e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014370:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014374:	4618      	mov	r0, r3
 8014376:	372c      	adds	r7, #44	; 0x2c
 8014378:	46bd      	mov	sp, r7
 801437a:	bd90      	pop	{r4, r7, pc}
 801437c:	08019d48 	.word	0x08019d48
 8014380:	0801a540 	.word	0x0801a540
 8014384:	08019d9c 	.word	0x08019d9c

08014388 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014388:	b580      	push	{r7, lr}
 801438a:	b082      	sub	sp, #8
 801438c:	af00      	add	r7, sp, #0
 801438e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014390:	f7fa ff0c 	bl	800f1ac <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014394:	4b0a      	ldr	r3, [pc, #40]	; (80143c0 <tcpip_tcp_timer+0x38>)
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	2b00      	cmp	r3, #0
 801439a:	d103      	bne.n	80143a4 <tcpip_tcp_timer+0x1c>
 801439c:	4b09      	ldr	r3, [pc, #36]	; (80143c4 <tcpip_tcp_timer+0x3c>)
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d005      	beq.n	80143b0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80143a4:	2200      	movs	r2, #0
 80143a6:	4908      	ldr	r1, [pc, #32]	; (80143c8 <tcpip_tcp_timer+0x40>)
 80143a8:	20fa      	movs	r0, #250	; 0xfa
 80143aa:	f000 f8f3 	bl	8014594 <sys_timeout>
 80143ae:	e003      	b.n	80143b8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80143b0:	4b06      	ldr	r3, [pc, #24]	; (80143cc <tcpip_tcp_timer+0x44>)
 80143b2:	2200      	movs	r2, #0
 80143b4:	601a      	str	r2, [r3, #0]
  }
}
 80143b6:	bf00      	nop
 80143b8:	bf00      	nop
 80143ba:	3708      	adds	r7, #8
 80143bc:	46bd      	mov	sp, r7
 80143be:	bd80      	pop	{r7, pc}
 80143c0:	20011070 	.word	0x20011070
 80143c4:	20011074 	.word	0x20011074
 80143c8:	08014389 	.word	0x08014389
 80143cc:	200110bc 	.word	0x200110bc

080143d0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80143d4:	4b0a      	ldr	r3, [pc, #40]	; (8014400 <tcp_timer_needed+0x30>)
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d10f      	bne.n	80143fc <tcp_timer_needed+0x2c>
 80143dc:	4b09      	ldr	r3, [pc, #36]	; (8014404 <tcp_timer_needed+0x34>)
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d103      	bne.n	80143ec <tcp_timer_needed+0x1c>
 80143e4:	4b08      	ldr	r3, [pc, #32]	; (8014408 <tcp_timer_needed+0x38>)
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d007      	beq.n	80143fc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80143ec:	4b04      	ldr	r3, [pc, #16]	; (8014400 <tcp_timer_needed+0x30>)
 80143ee:	2201      	movs	r2, #1
 80143f0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80143f2:	2200      	movs	r2, #0
 80143f4:	4905      	ldr	r1, [pc, #20]	; (801440c <tcp_timer_needed+0x3c>)
 80143f6:	20fa      	movs	r0, #250	; 0xfa
 80143f8:	f000 f8cc 	bl	8014594 <sys_timeout>
  }
}
 80143fc:	bf00      	nop
 80143fe:	bd80      	pop	{r7, pc}
 8014400:	200110bc 	.word	0x200110bc
 8014404:	20011070 	.word	0x20011070
 8014408:	20011074 	.word	0x20011074
 801440c:	08014389 	.word	0x08014389

08014410 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014410:	b580      	push	{r7, lr}
 8014412:	b086      	sub	sp, #24
 8014414:	af00      	add	r7, sp, #0
 8014416:	60f8      	str	r0, [r7, #12]
 8014418:	60b9      	str	r1, [r7, #8]
 801441a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801441c:	200a      	movs	r0, #10
 801441e:	f7f9 fcc7 	bl	800ddb0 <memp_malloc>
 8014422:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014424:	693b      	ldr	r3, [r7, #16]
 8014426:	2b00      	cmp	r3, #0
 8014428:	d109      	bne.n	801443e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801442a:	693b      	ldr	r3, [r7, #16]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d151      	bne.n	80144d4 <sys_timeout_abs+0xc4>
 8014430:	4b2a      	ldr	r3, [pc, #168]	; (80144dc <sys_timeout_abs+0xcc>)
 8014432:	22be      	movs	r2, #190	; 0xbe
 8014434:	492a      	ldr	r1, [pc, #168]	; (80144e0 <sys_timeout_abs+0xd0>)
 8014436:	482b      	ldr	r0, [pc, #172]	; (80144e4 <sys_timeout_abs+0xd4>)
 8014438:	f002 ff00 	bl	801723c <iprintf>
    return;
 801443c:	e04a      	b.n	80144d4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801443e:	693b      	ldr	r3, [r7, #16]
 8014440:	2200      	movs	r2, #0
 8014442:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014444:	693b      	ldr	r3, [r7, #16]
 8014446:	68ba      	ldr	r2, [r7, #8]
 8014448:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801444a:	693b      	ldr	r3, [r7, #16]
 801444c:	687a      	ldr	r2, [r7, #4]
 801444e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014450:	693b      	ldr	r3, [r7, #16]
 8014452:	68fa      	ldr	r2, [r7, #12]
 8014454:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014456:	4b24      	ldr	r3, [pc, #144]	; (80144e8 <sys_timeout_abs+0xd8>)
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d103      	bne.n	8014466 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801445e:	4a22      	ldr	r2, [pc, #136]	; (80144e8 <sys_timeout_abs+0xd8>)
 8014460:	693b      	ldr	r3, [r7, #16]
 8014462:	6013      	str	r3, [r2, #0]
    return;
 8014464:	e037      	b.n	80144d6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014466:	693b      	ldr	r3, [r7, #16]
 8014468:	685a      	ldr	r2, [r3, #4]
 801446a:	4b1f      	ldr	r3, [pc, #124]	; (80144e8 <sys_timeout_abs+0xd8>)
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	685b      	ldr	r3, [r3, #4]
 8014470:	1ad3      	subs	r3, r2, r3
 8014472:	0fdb      	lsrs	r3, r3, #31
 8014474:	f003 0301 	and.w	r3, r3, #1
 8014478:	b2db      	uxtb	r3, r3
 801447a:	2b00      	cmp	r3, #0
 801447c:	d007      	beq.n	801448e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801447e:	4b1a      	ldr	r3, [pc, #104]	; (80144e8 <sys_timeout_abs+0xd8>)
 8014480:	681a      	ldr	r2, [r3, #0]
 8014482:	693b      	ldr	r3, [r7, #16]
 8014484:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014486:	4a18      	ldr	r2, [pc, #96]	; (80144e8 <sys_timeout_abs+0xd8>)
 8014488:	693b      	ldr	r3, [r7, #16]
 801448a:	6013      	str	r3, [r2, #0]
 801448c:	e023      	b.n	80144d6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801448e:	4b16      	ldr	r3, [pc, #88]	; (80144e8 <sys_timeout_abs+0xd8>)
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	617b      	str	r3, [r7, #20]
 8014494:	e01a      	b.n	80144cc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014496:	697b      	ldr	r3, [r7, #20]
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d00b      	beq.n	80144b6 <sys_timeout_abs+0xa6>
 801449e:	693b      	ldr	r3, [r7, #16]
 80144a0:	685a      	ldr	r2, [r3, #4]
 80144a2:	697b      	ldr	r3, [r7, #20]
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	685b      	ldr	r3, [r3, #4]
 80144a8:	1ad3      	subs	r3, r2, r3
 80144aa:	0fdb      	lsrs	r3, r3, #31
 80144ac:	f003 0301 	and.w	r3, r3, #1
 80144b0:	b2db      	uxtb	r3, r3
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d007      	beq.n	80144c6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80144b6:	697b      	ldr	r3, [r7, #20]
 80144b8:	681a      	ldr	r2, [r3, #0]
 80144ba:	693b      	ldr	r3, [r7, #16]
 80144bc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80144be:	697b      	ldr	r3, [r7, #20]
 80144c0:	693a      	ldr	r2, [r7, #16]
 80144c2:	601a      	str	r2, [r3, #0]
        break;
 80144c4:	e007      	b.n	80144d6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80144c6:	697b      	ldr	r3, [r7, #20]
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	617b      	str	r3, [r7, #20]
 80144cc:	697b      	ldr	r3, [r7, #20]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d1e1      	bne.n	8014496 <sys_timeout_abs+0x86>
 80144d2:	e000      	b.n	80144d6 <sys_timeout_abs+0xc6>
    return;
 80144d4:	bf00      	nop
      }
    }
  }
}
 80144d6:	3718      	adds	r7, #24
 80144d8:	46bd      	mov	sp, r7
 80144da:	bd80      	pop	{r7, pc}
 80144dc:	0801a564 	.word	0x0801a564
 80144e0:	0801a598 	.word	0x0801a598
 80144e4:	0801a5d8 	.word	0x0801a5d8
 80144e8:	200110b4 	.word	0x200110b4

080144ec <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b086      	sub	sp, #24
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80144f8:	697b      	ldr	r3, [r7, #20]
 80144fa:	685b      	ldr	r3, [r3, #4]
 80144fc:	4798      	blx	r3

  now = sys_now();
 80144fe:	f7f4 fc89 	bl	8008e14 <sys_now>
 8014502:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014504:	697b      	ldr	r3, [r7, #20]
 8014506:	681a      	ldr	r2, [r3, #0]
 8014508:	4b0f      	ldr	r3, [pc, #60]	; (8014548 <lwip_cyclic_timer+0x5c>)
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	4413      	add	r3, r2
 801450e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014510:	68fa      	ldr	r2, [r7, #12]
 8014512:	693b      	ldr	r3, [r7, #16]
 8014514:	1ad3      	subs	r3, r2, r3
 8014516:	0fdb      	lsrs	r3, r3, #31
 8014518:	f003 0301 	and.w	r3, r3, #1
 801451c:	b2db      	uxtb	r3, r3
 801451e:	2b00      	cmp	r3, #0
 8014520:	d009      	beq.n	8014536 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014522:	697b      	ldr	r3, [r7, #20]
 8014524:	681a      	ldr	r2, [r3, #0]
 8014526:	693b      	ldr	r3, [r7, #16]
 8014528:	4413      	add	r3, r2
 801452a:	687a      	ldr	r2, [r7, #4]
 801452c:	4907      	ldr	r1, [pc, #28]	; (801454c <lwip_cyclic_timer+0x60>)
 801452e:	4618      	mov	r0, r3
 8014530:	f7ff ff6e 	bl	8014410 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014534:	e004      	b.n	8014540 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014536:	687a      	ldr	r2, [r7, #4]
 8014538:	4904      	ldr	r1, [pc, #16]	; (801454c <lwip_cyclic_timer+0x60>)
 801453a:	68f8      	ldr	r0, [r7, #12]
 801453c:	f7ff ff68 	bl	8014410 <sys_timeout_abs>
}
 8014540:	bf00      	nop
 8014542:	3718      	adds	r7, #24
 8014544:	46bd      	mov	sp, r7
 8014546:	bd80      	pop	{r7, pc}
 8014548:	200110b8 	.word	0x200110b8
 801454c:	080144ed 	.word	0x080144ed

08014550 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014550:	b580      	push	{r7, lr}
 8014552:	b082      	sub	sp, #8
 8014554:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014556:	2301      	movs	r3, #1
 8014558:	607b      	str	r3, [r7, #4]
 801455a:	e00e      	b.n	801457a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801455c:	4a0b      	ldr	r2, [pc, #44]	; (801458c <sys_timeouts_init+0x3c>)
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	00db      	lsls	r3, r3, #3
 8014568:	4a08      	ldr	r2, [pc, #32]	; (801458c <sys_timeouts_init+0x3c>)
 801456a:	4413      	add	r3, r2
 801456c:	461a      	mov	r2, r3
 801456e:	4908      	ldr	r1, [pc, #32]	; (8014590 <sys_timeouts_init+0x40>)
 8014570:	f000 f810 	bl	8014594 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	3301      	adds	r3, #1
 8014578:	607b      	str	r3, [r7, #4]
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	2b02      	cmp	r3, #2
 801457e:	d9ed      	bls.n	801455c <sys_timeouts_init+0xc>
  }
}
 8014580:	bf00      	nop
 8014582:	bf00      	nop
 8014584:	3708      	adds	r7, #8
 8014586:	46bd      	mov	sp, r7
 8014588:	bd80      	pop	{r7, pc}
 801458a:	bf00      	nop
 801458c:	0801b204 	.word	0x0801b204
 8014590:	080144ed 	.word	0x080144ed

08014594 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014594:	b580      	push	{r7, lr}
 8014596:	b086      	sub	sp, #24
 8014598:	af00      	add	r7, sp, #0
 801459a:	60f8      	str	r0, [r7, #12]
 801459c:	60b9      	str	r1, [r7, #8]
 801459e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80145a6:	d306      	bcc.n	80145b6 <sys_timeout+0x22>
 80145a8:	4b0a      	ldr	r3, [pc, #40]	; (80145d4 <sys_timeout+0x40>)
 80145aa:	f240 1229 	movw	r2, #297	; 0x129
 80145ae:	490a      	ldr	r1, [pc, #40]	; (80145d8 <sys_timeout+0x44>)
 80145b0:	480a      	ldr	r0, [pc, #40]	; (80145dc <sys_timeout+0x48>)
 80145b2:	f002 fe43 	bl	801723c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80145b6:	f7f4 fc2d 	bl	8008e14 <sys_now>
 80145ba:	4602      	mov	r2, r0
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	4413      	add	r3, r2
 80145c0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80145c2:	687a      	ldr	r2, [r7, #4]
 80145c4:	68b9      	ldr	r1, [r7, #8]
 80145c6:	6978      	ldr	r0, [r7, #20]
 80145c8:	f7ff ff22 	bl	8014410 <sys_timeout_abs>
#endif
}
 80145cc:	bf00      	nop
 80145ce:	3718      	adds	r7, #24
 80145d0:	46bd      	mov	sp, r7
 80145d2:	bd80      	pop	{r7, pc}
 80145d4:	0801a564 	.word	0x0801a564
 80145d8:	0801a600 	.word	0x0801a600
 80145dc:	0801a5d8 	.word	0x0801a5d8

080145e0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b084      	sub	sp, #16
 80145e4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80145e6:	f7f4 fc15 	bl	8008e14 <sys_now>
 80145ea:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80145ec:	4b17      	ldr	r3, [pc, #92]	; (801464c <sys_check_timeouts+0x6c>)
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80145f2:	68bb      	ldr	r3, [r7, #8]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d022      	beq.n	801463e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80145f8:	68bb      	ldr	r3, [r7, #8]
 80145fa:	685b      	ldr	r3, [r3, #4]
 80145fc:	68fa      	ldr	r2, [r7, #12]
 80145fe:	1ad3      	subs	r3, r2, r3
 8014600:	0fdb      	lsrs	r3, r3, #31
 8014602:	f003 0301 	and.w	r3, r3, #1
 8014606:	b2db      	uxtb	r3, r3
 8014608:	2b00      	cmp	r3, #0
 801460a:	d11a      	bne.n	8014642 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801460c:	68bb      	ldr	r3, [r7, #8]
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	4a0e      	ldr	r2, [pc, #56]	; (801464c <sys_check_timeouts+0x6c>)
 8014612:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014614:	68bb      	ldr	r3, [r7, #8]
 8014616:	689b      	ldr	r3, [r3, #8]
 8014618:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801461a:	68bb      	ldr	r3, [r7, #8]
 801461c:	68db      	ldr	r3, [r3, #12]
 801461e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014620:	68bb      	ldr	r3, [r7, #8]
 8014622:	685b      	ldr	r3, [r3, #4]
 8014624:	4a0a      	ldr	r2, [pc, #40]	; (8014650 <sys_check_timeouts+0x70>)
 8014626:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014628:	68b9      	ldr	r1, [r7, #8]
 801462a:	200a      	movs	r0, #10
 801462c:	f7f9 fc36 	bl	800de9c <memp_free>
    if (handler != NULL) {
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d0da      	beq.n	80145ec <sys_check_timeouts+0xc>
      handler(arg);
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	6838      	ldr	r0, [r7, #0]
 801463a:	4798      	blx	r3
  do {
 801463c:	e7d6      	b.n	80145ec <sys_check_timeouts+0xc>
      return;
 801463e:	bf00      	nop
 8014640:	e000      	b.n	8014644 <sys_check_timeouts+0x64>
      return;
 8014642:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014644:	3710      	adds	r7, #16
 8014646:	46bd      	mov	sp, r7
 8014648:	bd80      	pop	{r7, pc}
 801464a:	bf00      	nop
 801464c:	200110b4 	.word	0x200110b4
 8014650:	200110b8 	.word	0x200110b8

08014654 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b082      	sub	sp, #8
 8014658:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801465a:	4b16      	ldr	r3, [pc, #88]	; (80146b4 <sys_timeouts_sleeptime+0x60>)
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d102      	bne.n	8014668 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014662:	f04f 33ff 	mov.w	r3, #4294967295
 8014666:	e020      	b.n	80146aa <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014668:	f7f4 fbd4 	bl	8008e14 <sys_now>
 801466c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801466e:	4b11      	ldr	r3, [pc, #68]	; (80146b4 <sys_timeouts_sleeptime+0x60>)
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	685a      	ldr	r2, [r3, #4]
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	1ad3      	subs	r3, r2, r3
 8014678:	0fdb      	lsrs	r3, r3, #31
 801467a:	f003 0301 	and.w	r3, r3, #1
 801467e:	b2db      	uxtb	r3, r3
 8014680:	2b00      	cmp	r3, #0
 8014682:	d001      	beq.n	8014688 <sys_timeouts_sleeptime+0x34>
    return 0;
 8014684:	2300      	movs	r3, #0
 8014686:	e010      	b.n	80146aa <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014688:	4b0a      	ldr	r3, [pc, #40]	; (80146b4 <sys_timeouts_sleeptime+0x60>)
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	685a      	ldr	r2, [r3, #4]
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	1ad3      	subs	r3, r2, r3
 8014692:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014694:	683b      	ldr	r3, [r7, #0]
 8014696:	2b00      	cmp	r3, #0
 8014698:	da06      	bge.n	80146a8 <sys_timeouts_sleeptime+0x54>
 801469a:	4b07      	ldr	r3, [pc, #28]	; (80146b8 <sys_timeouts_sleeptime+0x64>)
 801469c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80146a0:	4906      	ldr	r1, [pc, #24]	; (80146bc <sys_timeouts_sleeptime+0x68>)
 80146a2:	4807      	ldr	r0, [pc, #28]	; (80146c0 <sys_timeouts_sleeptime+0x6c>)
 80146a4:	f002 fdca 	bl	801723c <iprintf>
    return ret;
 80146a8:	683b      	ldr	r3, [r7, #0]
  }
}
 80146aa:	4618      	mov	r0, r3
 80146ac:	3708      	adds	r7, #8
 80146ae:	46bd      	mov	sp, r7
 80146b0:	bd80      	pop	{r7, pc}
 80146b2:	bf00      	nop
 80146b4:	200110b4 	.word	0x200110b4
 80146b8:	0801a564 	.word	0x0801a564
 80146bc:	0801a638 	.word	0x0801a638
 80146c0:	0801a5d8 	.word	0x0801a5d8

080146c4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80146c8:	f002 fe46 	bl	8017358 <rand>
 80146cc:	4603      	mov	r3, r0
 80146ce:	b29b      	uxth	r3, r3
 80146d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80146d4:	b29b      	uxth	r3, r3
 80146d6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80146da:	b29a      	uxth	r2, r3
 80146dc:	4b01      	ldr	r3, [pc, #4]	; (80146e4 <udp_init+0x20>)
 80146de:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80146e0:	bf00      	nop
 80146e2:	bd80      	pop	{r7, pc}
 80146e4:	2000002c 	.word	0x2000002c

080146e8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b084      	sub	sp, #16
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	60f8      	str	r0, [r7, #12]
 80146f0:	60b9      	str	r1, [r7, #8]
 80146f2:	4613      	mov	r3, r2
 80146f4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d105      	bne.n	8014708 <udp_input_local_match+0x20>
 80146fc:	4b27      	ldr	r3, [pc, #156]	; (801479c <udp_input_local_match+0xb4>)
 80146fe:	2287      	movs	r2, #135	; 0x87
 8014700:	4927      	ldr	r1, [pc, #156]	; (80147a0 <udp_input_local_match+0xb8>)
 8014702:	4828      	ldr	r0, [pc, #160]	; (80147a4 <udp_input_local_match+0xbc>)
 8014704:	f002 fd9a 	bl	801723c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014708:	68bb      	ldr	r3, [r7, #8]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d105      	bne.n	801471a <udp_input_local_match+0x32>
 801470e:	4b23      	ldr	r3, [pc, #140]	; (801479c <udp_input_local_match+0xb4>)
 8014710:	2288      	movs	r2, #136	; 0x88
 8014712:	4925      	ldr	r1, [pc, #148]	; (80147a8 <udp_input_local_match+0xc0>)
 8014714:	4823      	ldr	r0, [pc, #140]	; (80147a4 <udp_input_local_match+0xbc>)
 8014716:	f002 fd91 	bl	801723c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	7a1b      	ldrb	r3, [r3, #8]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d00b      	beq.n	801473a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	7a1a      	ldrb	r2, [r3, #8]
 8014726:	4b21      	ldr	r3, [pc, #132]	; (80147ac <udp_input_local_match+0xc4>)
 8014728:	685b      	ldr	r3, [r3, #4]
 801472a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801472e:	3301      	adds	r3, #1
 8014730:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014732:	429a      	cmp	r2, r3
 8014734:	d001      	beq.n	801473a <udp_input_local_match+0x52>
    return 0;
 8014736:	2300      	movs	r3, #0
 8014738:	e02b      	b.n	8014792 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801473a:	79fb      	ldrb	r3, [r7, #7]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d018      	beq.n	8014772 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d013      	beq.n	801476e <udp_input_local_match+0x86>
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d00f      	beq.n	801476e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801474e:	4b17      	ldr	r3, [pc, #92]	; (80147ac <udp_input_local_match+0xc4>)
 8014750:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014756:	d00a      	beq.n	801476e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	681a      	ldr	r2, [r3, #0]
 801475c:	4b13      	ldr	r3, [pc, #76]	; (80147ac <udp_input_local_match+0xc4>)
 801475e:	695b      	ldr	r3, [r3, #20]
 8014760:	405a      	eors	r2, r3
 8014762:	68bb      	ldr	r3, [r7, #8]
 8014764:	3308      	adds	r3, #8
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801476a:	2b00      	cmp	r3, #0
 801476c:	d110      	bne.n	8014790 <udp_input_local_match+0xa8>
          return 1;
 801476e:	2301      	movs	r3, #1
 8014770:	e00f      	b.n	8014792 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d009      	beq.n	801478c <udp_input_local_match+0xa4>
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d005      	beq.n	801478c <udp_input_local_match+0xa4>
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	681a      	ldr	r2, [r3, #0]
 8014784:	4b09      	ldr	r3, [pc, #36]	; (80147ac <udp_input_local_match+0xc4>)
 8014786:	695b      	ldr	r3, [r3, #20]
 8014788:	429a      	cmp	r2, r3
 801478a:	d101      	bne.n	8014790 <udp_input_local_match+0xa8>
        return 1;
 801478c:	2301      	movs	r3, #1
 801478e:	e000      	b.n	8014792 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014790:	2300      	movs	r3, #0
}
 8014792:	4618      	mov	r0, r3
 8014794:	3710      	adds	r7, #16
 8014796:	46bd      	mov	sp, r7
 8014798:	bd80      	pop	{r7, pc}
 801479a:	bf00      	nop
 801479c:	0801a64c 	.word	0x0801a64c
 80147a0:	0801a67c 	.word	0x0801a67c
 80147a4:	0801a6a0 	.word	0x0801a6a0
 80147a8:	0801a6c8 	.word	0x0801a6c8
 80147ac:	2000d910 	.word	0x2000d910

080147b0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80147b0:	b590      	push	{r4, r7, lr}
 80147b2:	b08d      	sub	sp, #52	; 0x34
 80147b4:	af02      	add	r7, sp, #8
 80147b6:	6078      	str	r0, [r7, #4]
 80147b8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80147ba:	2300      	movs	r3, #0
 80147bc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d105      	bne.n	80147d0 <udp_input+0x20>
 80147c4:	4b7c      	ldr	r3, [pc, #496]	; (80149b8 <udp_input+0x208>)
 80147c6:	22cf      	movs	r2, #207	; 0xcf
 80147c8:	497c      	ldr	r1, [pc, #496]	; (80149bc <udp_input+0x20c>)
 80147ca:	487d      	ldr	r0, [pc, #500]	; (80149c0 <udp_input+0x210>)
 80147cc:	f002 fd36 	bl	801723c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80147d0:	683b      	ldr	r3, [r7, #0]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d105      	bne.n	80147e2 <udp_input+0x32>
 80147d6:	4b78      	ldr	r3, [pc, #480]	; (80149b8 <udp_input+0x208>)
 80147d8:	22d0      	movs	r2, #208	; 0xd0
 80147da:	497a      	ldr	r1, [pc, #488]	; (80149c4 <udp_input+0x214>)
 80147dc:	4878      	ldr	r0, [pc, #480]	; (80149c0 <udp_input+0x210>)
 80147de:	f002 fd2d 	bl	801723c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	895b      	ldrh	r3, [r3, #10]
 80147e6:	2b07      	cmp	r3, #7
 80147e8:	d803      	bhi.n	80147f2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80147ea:	6878      	ldr	r0, [r7, #4]
 80147ec:	f7fa f9fa 	bl	800ebe4 <pbuf_free>
    goto end;
 80147f0:	e0de      	b.n	80149b0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	685b      	ldr	r3, [r3, #4]
 80147f6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80147f8:	4b73      	ldr	r3, [pc, #460]	; (80149c8 <udp_input+0x218>)
 80147fa:	695b      	ldr	r3, [r3, #20]
 80147fc:	4a72      	ldr	r2, [pc, #456]	; (80149c8 <udp_input+0x218>)
 80147fe:	6812      	ldr	r2, [r2, #0]
 8014800:	4611      	mov	r1, r2
 8014802:	4618      	mov	r0, r3
 8014804:	f001 fc88 	bl	8016118 <ip4_addr_isbroadcast_u32>
 8014808:	4603      	mov	r3, r0
 801480a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801480c:	697b      	ldr	r3, [r7, #20]
 801480e:	881b      	ldrh	r3, [r3, #0]
 8014810:	b29b      	uxth	r3, r3
 8014812:	4618      	mov	r0, r3
 8014814:	f7f8 fdf4 	bl	800d400 <lwip_htons>
 8014818:	4603      	mov	r3, r0
 801481a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801481c:	697b      	ldr	r3, [r7, #20]
 801481e:	885b      	ldrh	r3, [r3, #2]
 8014820:	b29b      	uxth	r3, r3
 8014822:	4618      	mov	r0, r3
 8014824:	f7f8 fdec 	bl	800d400 <lwip_htons>
 8014828:	4603      	mov	r3, r0
 801482a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801482c:	2300      	movs	r3, #0
 801482e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8014830:	2300      	movs	r3, #0
 8014832:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014834:	2300      	movs	r3, #0
 8014836:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014838:	4b64      	ldr	r3, [pc, #400]	; (80149cc <udp_input+0x21c>)
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	627b      	str	r3, [r7, #36]	; 0x24
 801483e:	e054      	b.n	80148ea <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014842:	8a5b      	ldrh	r3, [r3, #18]
 8014844:	89fa      	ldrh	r2, [r7, #14]
 8014846:	429a      	cmp	r2, r3
 8014848:	d14a      	bne.n	80148e0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801484a:	7cfb      	ldrb	r3, [r7, #19]
 801484c:	461a      	mov	r2, r3
 801484e:	6839      	ldr	r1, [r7, #0]
 8014850:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014852:	f7ff ff49 	bl	80146e8 <udp_input_local_match>
 8014856:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014858:	2b00      	cmp	r3, #0
 801485a:	d041      	beq.n	80148e0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801485e:	7c1b      	ldrb	r3, [r3, #16]
 8014860:	f003 0304 	and.w	r3, r3, #4
 8014864:	2b00      	cmp	r3, #0
 8014866:	d11d      	bne.n	80148a4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014868:	69fb      	ldr	r3, [r7, #28]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d102      	bne.n	8014874 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014870:	61fb      	str	r3, [r7, #28]
 8014872:	e017      	b.n	80148a4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014874:	7cfb      	ldrb	r3, [r7, #19]
 8014876:	2b00      	cmp	r3, #0
 8014878:	d014      	beq.n	80148a4 <udp_input+0xf4>
 801487a:	4b53      	ldr	r3, [pc, #332]	; (80149c8 <udp_input+0x218>)
 801487c:	695b      	ldr	r3, [r3, #20]
 801487e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014882:	d10f      	bne.n	80148a4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014884:	69fb      	ldr	r3, [r7, #28]
 8014886:	681a      	ldr	r2, [r3, #0]
 8014888:	683b      	ldr	r3, [r7, #0]
 801488a:	3304      	adds	r3, #4
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	429a      	cmp	r2, r3
 8014890:	d008      	beq.n	80148a4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014894:	681a      	ldr	r2, [r3, #0]
 8014896:	683b      	ldr	r3, [r7, #0]
 8014898:	3304      	adds	r3, #4
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	429a      	cmp	r2, r3
 801489e:	d101      	bne.n	80148a4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80148a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148a2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80148a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148a6:	8a9b      	ldrh	r3, [r3, #20]
 80148a8:	8a3a      	ldrh	r2, [r7, #16]
 80148aa:	429a      	cmp	r2, r3
 80148ac:	d118      	bne.n	80148e0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80148ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148b0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d005      	beq.n	80148c2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80148b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148b8:	685a      	ldr	r2, [r3, #4]
 80148ba:	4b43      	ldr	r3, [pc, #268]	; (80149c8 <udp_input+0x218>)
 80148bc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80148be:	429a      	cmp	r2, r3
 80148c0:	d10e      	bne.n	80148e0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80148c2:	6a3b      	ldr	r3, [r7, #32]
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d014      	beq.n	80148f2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80148c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ca:	68da      	ldr	r2, [r3, #12]
 80148cc:	6a3b      	ldr	r3, [r7, #32]
 80148ce:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80148d0:	4b3e      	ldr	r3, [pc, #248]	; (80149cc <udp_input+0x21c>)
 80148d2:	681a      	ldr	r2, [r3, #0]
 80148d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148d6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80148d8:	4a3c      	ldr	r2, [pc, #240]	; (80149cc <udp_input+0x21c>)
 80148da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148dc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80148de:	e008      	b.n	80148f2 <udp_input+0x142>
      }
    }

    prev = pcb;
 80148e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148e2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80148e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148e6:	68db      	ldr	r3, [r3, #12]
 80148e8:	627b      	str	r3, [r7, #36]	; 0x24
 80148ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d1a7      	bne.n	8014840 <udp_input+0x90>
 80148f0:	e000      	b.n	80148f4 <udp_input+0x144>
        break;
 80148f2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80148f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d101      	bne.n	80148fe <udp_input+0x14e>
    pcb = uncon_pcb;
 80148fa:	69fb      	ldr	r3, [r7, #28]
 80148fc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80148fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014900:	2b00      	cmp	r3, #0
 8014902:	d002      	beq.n	801490a <udp_input+0x15a>
    for_us = 1;
 8014904:	2301      	movs	r3, #1
 8014906:	76fb      	strb	r3, [r7, #27]
 8014908:	e00a      	b.n	8014920 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801490a:	683b      	ldr	r3, [r7, #0]
 801490c:	3304      	adds	r3, #4
 801490e:	681a      	ldr	r2, [r3, #0]
 8014910:	4b2d      	ldr	r3, [pc, #180]	; (80149c8 <udp_input+0x218>)
 8014912:	695b      	ldr	r3, [r3, #20]
 8014914:	429a      	cmp	r2, r3
 8014916:	bf0c      	ite	eq
 8014918:	2301      	moveq	r3, #1
 801491a:	2300      	movne	r3, #0
 801491c:	b2db      	uxtb	r3, r3
 801491e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014920:	7efb      	ldrb	r3, [r7, #27]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d041      	beq.n	80149aa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8014926:	2108      	movs	r1, #8
 8014928:	6878      	ldr	r0, [r7, #4]
 801492a:	f7fa f8d5 	bl	800ead8 <pbuf_remove_header>
 801492e:	4603      	mov	r3, r0
 8014930:	2b00      	cmp	r3, #0
 8014932:	d00a      	beq.n	801494a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014934:	4b20      	ldr	r3, [pc, #128]	; (80149b8 <udp_input+0x208>)
 8014936:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801493a:	4925      	ldr	r1, [pc, #148]	; (80149d0 <udp_input+0x220>)
 801493c:	4820      	ldr	r0, [pc, #128]	; (80149c0 <udp_input+0x210>)
 801493e:	f002 fc7d 	bl	801723c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014942:	6878      	ldr	r0, [r7, #4]
 8014944:	f7fa f94e 	bl	800ebe4 <pbuf_free>
      goto end;
 8014948:	e032      	b.n	80149b0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801494c:	2b00      	cmp	r3, #0
 801494e:	d012      	beq.n	8014976 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014952:	699b      	ldr	r3, [r3, #24]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d00a      	beq.n	801496e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801495a:	699c      	ldr	r4, [r3, #24]
 801495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801495e:	69d8      	ldr	r0, [r3, #28]
 8014960:	8a3b      	ldrh	r3, [r7, #16]
 8014962:	9300      	str	r3, [sp, #0]
 8014964:	4b1b      	ldr	r3, [pc, #108]	; (80149d4 <udp_input+0x224>)
 8014966:	687a      	ldr	r2, [r7, #4]
 8014968:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801496a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801496c:	e021      	b.n	80149b2 <udp_input+0x202>
        pbuf_free(p);
 801496e:	6878      	ldr	r0, [r7, #4]
 8014970:	f7fa f938 	bl	800ebe4 <pbuf_free>
        goto end;
 8014974:	e01c      	b.n	80149b0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014976:	7cfb      	ldrb	r3, [r7, #19]
 8014978:	2b00      	cmp	r3, #0
 801497a:	d112      	bne.n	80149a2 <udp_input+0x1f2>
 801497c:	4b12      	ldr	r3, [pc, #72]	; (80149c8 <udp_input+0x218>)
 801497e:	695b      	ldr	r3, [r3, #20]
 8014980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014984:	2be0      	cmp	r3, #224	; 0xe0
 8014986:	d00c      	beq.n	80149a2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014988:	4b0f      	ldr	r3, [pc, #60]	; (80149c8 <udp_input+0x218>)
 801498a:	899b      	ldrh	r3, [r3, #12]
 801498c:	3308      	adds	r3, #8
 801498e:	b29b      	uxth	r3, r3
 8014990:	b21b      	sxth	r3, r3
 8014992:	4619      	mov	r1, r3
 8014994:	6878      	ldr	r0, [r7, #4]
 8014996:	f7fa f912 	bl	800ebbe <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801499a:	2103      	movs	r1, #3
 801499c:	6878      	ldr	r0, [r7, #4]
 801499e:	f001 f89b 	bl	8015ad8 <icmp_dest_unreach>
      pbuf_free(p);
 80149a2:	6878      	ldr	r0, [r7, #4]
 80149a4:	f7fa f91e 	bl	800ebe4 <pbuf_free>
  return;
 80149a8:	e003      	b.n	80149b2 <udp_input+0x202>
    pbuf_free(p);
 80149aa:	6878      	ldr	r0, [r7, #4]
 80149ac:	f7fa f91a 	bl	800ebe4 <pbuf_free>
  return;
 80149b0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80149b2:	372c      	adds	r7, #44	; 0x2c
 80149b4:	46bd      	mov	sp, r7
 80149b6:	bd90      	pop	{r4, r7, pc}
 80149b8:	0801a64c 	.word	0x0801a64c
 80149bc:	0801a6f0 	.word	0x0801a6f0
 80149c0:	0801a6a0 	.word	0x0801a6a0
 80149c4:	0801a708 	.word	0x0801a708
 80149c8:	2000d910 	.word	0x2000d910
 80149cc:	200110c0 	.word	0x200110c0
 80149d0:	0801a724 	.word	0x0801a724
 80149d4:	2000d920 	.word	0x2000d920

080149d8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80149d8:	b480      	push	{r7}
 80149da:	b085      	sub	sp, #20
 80149dc:	af00      	add	r7, sp, #0
 80149de:	6078      	str	r0, [r7, #4]
 80149e0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d01e      	beq.n	8014a26 <udp_netif_ip_addr_changed+0x4e>
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d01a      	beq.n	8014a26 <udp_netif_ip_addr_changed+0x4e>
 80149f0:	683b      	ldr	r3, [r7, #0]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d017      	beq.n	8014a26 <udp_netif_ip_addr_changed+0x4e>
 80149f6:	683b      	ldr	r3, [r7, #0]
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d013      	beq.n	8014a26 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80149fe:	4b0d      	ldr	r3, [pc, #52]	; (8014a34 <udp_netif_ip_addr_changed+0x5c>)
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	60fb      	str	r3, [r7, #12]
 8014a04:	e00c      	b.n	8014a20 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	681a      	ldr	r2, [r3, #0]
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	429a      	cmp	r2, r3
 8014a10:	d103      	bne.n	8014a1a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014a12:	683b      	ldr	r3, [r7, #0]
 8014a14:	681a      	ldr	r2, [r3, #0]
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	68db      	ldr	r3, [r3, #12]
 8014a1e:	60fb      	str	r3, [r7, #12]
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d1ef      	bne.n	8014a06 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014a26:	bf00      	nop
 8014a28:	3714      	adds	r7, #20
 8014a2a:	46bd      	mov	sp, r7
 8014a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a30:	4770      	bx	lr
 8014a32:	bf00      	nop
 8014a34:	200110c0 	.word	0x200110c0

08014a38 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b082      	sub	sp, #8
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014a40:	4915      	ldr	r1, [pc, #84]	; (8014a98 <etharp_free_entry+0x60>)
 8014a42:	687a      	ldr	r2, [r7, #4]
 8014a44:	4613      	mov	r3, r2
 8014a46:	005b      	lsls	r3, r3, #1
 8014a48:	4413      	add	r3, r2
 8014a4a:	00db      	lsls	r3, r3, #3
 8014a4c:	440b      	add	r3, r1
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d013      	beq.n	8014a7c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014a54:	4910      	ldr	r1, [pc, #64]	; (8014a98 <etharp_free_entry+0x60>)
 8014a56:	687a      	ldr	r2, [r7, #4]
 8014a58:	4613      	mov	r3, r2
 8014a5a:	005b      	lsls	r3, r3, #1
 8014a5c:	4413      	add	r3, r2
 8014a5e:	00db      	lsls	r3, r3, #3
 8014a60:	440b      	add	r3, r1
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	4618      	mov	r0, r3
 8014a66:	f7fa f8bd 	bl	800ebe4 <pbuf_free>
    arp_table[i].q = NULL;
 8014a6a:	490b      	ldr	r1, [pc, #44]	; (8014a98 <etharp_free_entry+0x60>)
 8014a6c:	687a      	ldr	r2, [r7, #4]
 8014a6e:	4613      	mov	r3, r2
 8014a70:	005b      	lsls	r3, r3, #1
 8014a72:	4413      	add	r3, r2
 8014a74:	00db      	lsls	r3, r3, #3
 8014a76:	440b      	add	r3, r1
 8014a78:	2200      	movs	r2, #0
 8014a7a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014a7c:	4906      	ldr	r1, [pc, #24]	; (8014a98 <etharp_free_entry+0x60>)
 8014a7e:	687a      	ldr	r2, [r7, #4]
 8014a80:	4613      	mov	r3, r2
 8014a82:	005b      	lsls	r3, r3, #1
 8014a84:	4413      	add	r3, r2
 8014a86:	00db      	lsls	r3, r3, #3
 8014a88:	440b      	add	r3, r1
 8014a8a:	3314      	adds	r3, #20
 8014a8c:	2200      	movs	r2, #0
 8014a8e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014a90:	bf00      	nop
 8014a92:	3708      	adds	r7, #8
 8014a94:	46bd      	mov	sp, r7
 8014a96:	bd80      	pop	{r7, pc}
 8014a98:	200110c4 	.word	0x200110c4

08014a9c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014a9c:	b580      	push	{r7, lr}
 8014a9e:	b082      	sub	sp, #8
 8014aa0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	607b      	str	r3, [r7, #4]
 8014aa6:	e096      	b.n	8014bd6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014aa8:	494f      	ldr	r1, [pc, #316]	; (8014be8 <etharp_tmr+0x14c>)
 8014aaa:	687a      	ldr	r2, [r7, #4]
 8014aac:	4613      	mov	r3, r2
 8014aae:	005b      	lsls	r3, r3, #1
 8014ab0:	4413      	add	r3, r2
 8014ab2:	00db      	lsls	r3, r3, #3
 8014ab4:	440b      	add	r3, r1
 8014ab6:	3314      	adds	r3, #20
 8014ab8:	781b      	ldrb	r3, [r3, #0]
 8014aba:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014abc:	78fb      	ldrb	r3, [r7, #3]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	f000 8086 	beq.w	8014bd0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014ac4:	4948      	ldr	r1, [pc, #288]	; (8014be8 <etharp_tmr+0x14c>)
 8014ac6:	687a      	ldr	r2, [r7, #4]
 8014ac8:	4613      	mov	r3, r2
 8014aca:	005b      	lsls	r3, r3, #1
 8014acc:	4413      	add	r3, r2
 8014ace:	00db      	lsls	r3, r3, #3
 8014ad0:	440b      	add	r3, r1
 8014ad2:	3312      	adds	r3, #18
 8014ad4:	881b      	ldrh	r3, [r3, #0]
 8014ad6:	3301      	adds	r3, #1
 8014ad8:	b298      	uxth	r0, r3
 8014ada:	4943      	ldr	r1, [pc, #268]	; (8014be8 <etharp_tmr+0x14c>)
 8014adc:	687a      	ldr	r2, [r7, #4]
 8014ade:	4613      	mov	r3, r2
 8014ae0:	005b      	lsls	r3, r3, #1
 8014ae2:	4413      	add	r3, r2
 8014ae4:	00db      	lsls	r3, r3, #3
 8014ae6:	440b      	add	r3, r1
 8014ae8:	3312      	adds	r3, #18
 8014aea:	4602      	mov	r2, r0
 8014aec:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014aee:	493e      	ldr	r1, [pc, #248]	; (8014be8 <etharp_tmr+0x14c>)
 8014af0:	687a      	ldr	r2, [r7, #4]
 8014af2:	4613      	mov	r3, r2
 8014af4:	005b      	lsls	r3, r3, #1
 8014af6:	4413      	add	r3, r2
 8014af8:	00db      	lsls	r3, r3, #3
 8014afa:	440b      	add	r3, r1
 8014afc:	3312      	adds	r3, #18
 8014afe:	881b      	ldrh	r3, [r3, #0]
 8014b00:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014b04:	d215      	bcs.n	8014b32 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014b06:	4938      	ldr	r1, [pc, #224]	; (8014be8 <etharp_tmr+0x14c>)
 8014b08:	687a      	ldr	r2, [r7, #4]
 8014b0a:	4613      	mov	r3, r2
 8014b0c:	005b      	lsls	r3, r3, #1
 8014b0e:	4413      	add	r3, r2
 8014b10:	00db      	lsls	r3, r3, #3
 8014b12:	440b      	add	r3, r1
 8014b14:	3314      	adds	r3, #20
 8014b16:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014b18:	2b01      	cmp	r3, #1
 8014b1a:	d10e      	bne.n	8014b3a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014b1c:	4932      	ldr	r1, [pc, #200]	; (8014be8 <etharp_tmr+0x14c>)
 8014b1e:	687a      	ldr	r2, [r7, #4]
 8014b20:	4613      	mov	r3, r2
 8014b22:	005b      	lsls	r3, r3, #1
 8014b24:	4413      	add	r3, r2
 8014b26:	00db      	lsls	r3, r3, #3
 8014b28:	440b      	add	r3, r1
 8014b2a:	3312      	adds	r3, #18
 8014b2c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014b2e:	2b04      	cmp	r3, #4
 8014b30:	d903      	bls.n	8014b3a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014b32:	6878      	ldr	r0, [r7, #4]
 8014b34:	f7ff ff80 	bl	8014a38 <etharp_free_entry>
 8014b38:	e04a      	b.n	8014bd0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014b3a:	492b      	ldr	r1, [pc, #172]	; (8014be8 <etharp_tmr+0x14c>)
 8014b3c:	687a      	ldr	r2, [r7, #4]
 8014b3e:	4613      	mov	r3, r2
 8014b40:	005b      	lsls	r3, r3, #1
 8014b42:	4413      	add	r3, r2
 8014b44:	00db      	lsls	r3, r3, #3
 8014b46:	440b      	add	r3, r1
 8014b48:	3314      	adds	r3, #20
 8014b4a:	781b      	ldrb	r3, [r3, #0]
 8014b4c:	2b03      	cmp	r3, #3
 8014b4e:	d10a      	bne.n	8014b66 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014b50:	4925      	ldr	r1, [pc, #148]	; (8014be8 <etharp_tmr+0x14c>)
 8014b52:	687a      	ldr	r2, [r7, #4]
 8014b54:	4613      	mov	r3, r2
 8014b56:	005b      	lsls	r3, r3, #1
 8014b58:	4413      	add	r3, r2
 8014b5a:	00db      	lsls	r3, r3, #3
 8014b5c:	440b      	add	r3, r1
 8014b5e:	3314      	adds	r3, #20
 8014b60:	2204      	movs	r2, #4
 8014b62:	701a      	strb	r2, [r3, #0]
 8014b64:	e034      	b.n	8014bd0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014b66:	4920      	ldr	r1, [pc, #128]	; (8014be8 <etharp_tmr+0x14c>)
 8014b68:	687a      	ldr	r2, [r7, #4]
 8014b6a:	4613      	mov	r3, r2
 8014b6c:	005b      	lsls	r3, r3, #1
 8014b6e:	4413      	add	r3, r2
 8014b70:	00db      	lsls	r3, r3, #3
 8014b72:	440b      	add	r3, r1
 8014b74:	3314      	adds	r3, #20
 8014b76:	781b      	ldrb	r3, [r3, #0]
 8014b78:	2b04      	cmp	r3, #4
 8014b7a:	d10a      	bne.n	8014b92 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014b7c:	491a      	ldr	r1, [pc, #104]	; (8014be8 <etharp_tmr+0x14c>)
 8014b7e:	687a      	ldr	r2, [r7, #4]
 8014b80:	4613      	mov	r3, r2
 8014b82:	005b      	lsls	r3, r3, #1
 8014b84:	4413      	add	r3, r2
 8014b86:	00db      	lsls	r3, r3, #3
 8014b88:	440b      	add	r3, r1
 8014b8a:	3314      	adds	r3, #20
 8014b8c:	2202      	movs	r2, #2
 8014b8e:	701a      	strb	r2, [r3, #0]
 8014b90:	e01e      	b.n	8014bd0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014b92:	4915      	ldr	r1, [pc, #84]	; (8014be8 <etharp_tmr+0x14c>)
 8014b94:	687a      	ldr	r2, [r7, #4]
 8014b96:	4613      	mov	r3, r2
 8014b98:	005b      	lsls	r3, r3, #1
 8014b9a:	4413      	add	r3, r2
 8014b9c:	00db      	lsls	r3, r3, #3
 8014b9e:	440b      	add	r3, r1
 8014ba0:	3314      	adds	r3, #20
 8014ba2:	781b      	ldrb	r3, [r3, #0]
 8014ba4:	2b01      	cmp	r3, #1
 8014ba6:	d113      	bne.n	8014bd0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014ba8:	490f      	ldr	r1, [pc, #60]	; (8014be8 <etharp_tmr+0x14c>)
 8014baa:	687a      	ldr	r2, [r7, #4]
 8014bac:	4613      	mov	r3, r2
 8014bae:	005b      	lsls	r3, r3, #1
 8014bb0:	4413      	add	r3, r2
 8014bb2:	00db      	lsls	r3, r3, #3
 8014bb4:	440b      	add	r3, r1
 8014bb6:	3308      	adds	r3, #8
 8014bb8:	6818      	ldr	r0, [r3, #0]
 8014bba:	687a      	ldr	r2, [r7, #4]
 8014bbc:	4613      	mov	r3, r2
 8014bbe:	005b      	lsls	r3, r3, #1
 8014bc0:	4413      	add	r3, r2
 8014bc2:	00db      	lsls	r3, r3, #3
 8014bc4:	4a08      	ldr	r2, [pc, #32]	; (8014be8 <etharp_tmr+0x14c>)
 8014bc6:	4413      	add	r3, r2
 8014bc8:	3304      	adds	r3, #4
 8014bca:	4619      	mov	r1, r3
 8014bcc:	f000 fe6e 	bl	80158ac <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	3301      	adds	r3, #1
 8014bd4:	607b      	str	r3, [r7, #4]
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	2b09      	cmp	r3, #9
 8014bda:	f77f af65 	ble.w	8014aa8 <etharp_tmr+0xc>
      }
    }
  }
}
 8014bde:	bf00      	nop
 8014be0:	bf00      	nop
 8014be2:	3708      	adds	r7, #8
 8014be4:	46bd      	mov	sp, r7
 8014be6:	bd80      	pop	{r7, pc}
 8014be8:	200110c4 	.word	0x200110c4

08014bec <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014bec:	b580      	push	{r7, lr}
 8014bee:	b08a      	sub	sp, #40	; 0x28
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	60f8      	str	r0, [r7, #12]
 8014bf4:	460b      	mov	r3, r1
 8014bf6:	607a      	str	r2, [r7, #4]
 8014bf8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014bfa:	230a      	movs	r3, #10
 8014bfc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014bfe:	230a      	movs	r3, #10
 8014c00:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014c02:	230a      	movs	r3, #10
 8014c04:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014c06:	2300      	movs	r3, #0
 8014c08:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014c0a:	230a      	movs	r3, #10
 8014c0c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014c0e:	2300      	movs	r3, #0
 8014c10:	83bb      	strh	r3, [r7, #28]
 8014c12:	2300      	movs	r3, #0
 8014c14:	837b      	strh	r3, [r7, #26]
 8014c16:	2300      	movs	r3, #0
 8014c18:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	843b      	strh	r3, [r7, #32]
 8014c1e:	e0ae      	b.n	8014d7e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014c20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c24:	49a6      	ldr	r1, [pc, #664]	; (8014ec0 <etharp_find_entry+0x2d4>)
 8014c26:	4613      	mov	r3, r2
 8014c28:	005b      	lsls	r3, r3, #1
 8014c2a:	4413      	add	r3, r2
 8014c2c:	00db      	lsls	r3, r3, #3
 8014c2e:	440b      	add	r3, r1
 8014c30:	3314      	adds	r3, #20
 8014c32:	781b      	ldrb	r3, [r3, #0]
 8014c34:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014c36:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014c3a:	2b0a      	cmp	r3, #10
 8014c3c:	d105      	bne.n	8014c4a <etharp_find_entry+0x5e>
 8014c3e:	7dfb      	ldrb	r3, [r7, #23]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d102      	bne.n	8014c4a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014c44:	8c3b      	ldrh	r3, [r7, #32]
 8014c46:	847b      	strh	r3, [r7, #34]	; 0x22
 8014c48:	e095      	b.n	8014d76 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014c4a:	7dfb      	ldrb	r3, [r7, #23]
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	f000 8092 	beq.w	8014d76 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014c52:	7dfb      	ldrb	r3, [r7, #23]
 8014c54:	2b01      	cmp	r3, #1
 8014c56:	d009      	beq.n	8014c6c <etharp_find_entry+0x80>
 8014c58:	7dfb      	ldrb	r3, [r7, #23]
 8014c5a:	2b01      	cmp	r3, #1
 8014c5c:	d806      	bhi.n	8014c6c <etharp_find_entry+0x80>
 8014c5e:	4b99      	ldr	r3, [pc, #612]	; (8014ec4 <etharp_find_entry+0x2d8>)
 8014c60:	f240 1223 	movw	r2, #291	; 0x123
 8014c64:	4998      	ldr	r1, [pc, #608]	; (8014ec8 <etharp_find_entry+0x2dc>)
 8014c66:	4899      	ldr	r0, [pc, #612]	; (8014ecc <etharp_find_entry+0x2e0>)
 8014c68:	f002 fae8 	bl	801723c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d020      	beq.n	8014cb4 <etharp_find_entry+0xc8>
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	6819      	ldr	r1, [r3, #0]
 8014c76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c7a:	4891      	ldr	r0, [pc, #580]	; (8014ec0 <etharp_find_entry+0x2d4>)
 8014c7c:	4613      	mov	r3, r2
 8014c7e:	005b      	lsls	r3, r3, #1
 8014c80:	4413      	add	r3, r2
 8014c82:	00db      	lsls	r3, r3, #3
 8014c84:	4403      	add	r3, r0
 8014c86:	3304      	adds	r3, #4
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	4299      	cmp	r1, r3
 8014c8c:	d112      	bne.n	8014cb4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d00c      	beq.n	8014cae <etharp_find_entry+0xc2>
 8014c94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c98:	4989      	ldr	r1, [pc, #548]	; (8014ec0 <etharp_find_entry+0x2d4>)
 8014c9a:	4613      	mov	r3, r2
 8014c9c:	005b      	lsls	r3, r3, #1
 8014c9e:	4413      	add	r3, r2
 8014ca0:	00db      	lsls	r3, r3, #3
 8014ca2:	440b      	add	r3, r1
 8014ca4:	3308      	adds	r3, #8
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	687a      	ldr	r2, [r7, #4]
 8014caa:	429a      	cmp	r2, r3
 8014cac:	d102      	bne.n	8014cb4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014cae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014cb2:	e100      	b.n	8014eb6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014cb4:	7dfb      	ldrb	r3, [r7, #23]
 8014cb6:	2b01      	cmp	r3, #1
 8014cb8:	d140      	bne.n	8014d3c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014cba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014cbe:	4980      	ldr	r1, [pc, #512]	; (8014ec0 <etharp_find_entry+0x2d4>)
 8014cc0:	4613      	mov	r3, r2
 8014cc2:	005b      	lsls	r3, r3, #1
 8014cc4:	4413      	add	r3, r2
 8014cc6:	00db      	lsls	r3, r3, #3
 8014cc8:	440b      	add	r3, r1
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d01a      	beq.n	8014d06 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014cd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014cd4:	497a      	ldr	r1, [pc, #488]	; (8014ec0 <etharp_find_entry+0x2d4>)
 8014cd6:	4613      	mov	r3, r2
 8014cd8:	005b      	lsls	r3, r3, #1
 8014cda:	4413      	add	r3, r2
 8014cdc:	00db      	lsls	r3, r3, #3
 8014cde:	440b      	add	r3, r1
 8014ce0:	3312      	adds	r3, #18
 8014ce2:	881b      	ldrh	r3, [r3, #0]
 8014ce4:	8bba      	ldrh	r2, [r7, #28]
 8014ce6:	429a      	cmp	r2, r3
 8014ce8:	d845      	bhi.n	8014d76 <etharp_find_entry+0x18a>
            old_queue = i;
 8014cea:	8c3b      	ldrh	r3, [r7, #32]
 8014cec:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014cee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014cf2:	4973      	ldr	r1, [pc, #460]	; (8014ec0 <etharp_find_entry+0x2d4>)
 8014cf4:	4613      	mov	r3, r2
 8014cf6:	005b      	lsls	r3, r3, #1
 8014cf8:	4413      	add	r3, r2
 8014cfa:	00db      	lsls	r3, r3, #3
 8014cfc:	440b      	add	r3, r1
 8014cfe:	3312      	adds	r3, #18
 8014d00:	881b      	ldrh	r3, [r3, #0]
 8014d02:	83bb      	strh	r3, [r7, #28]
 8014d04:	e037      	b.n	8014d76 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014d06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d0a:	496d      	ldr	r1, [pc, #436]	; (8014ec0 <etharp_find_entry+0x2d4>)
 8014d0c:	4613      	mov	r3, r2
 8014d0e:	005b      	lsls	r3, r3, #1
 8014d10:	4413      	add	r3, r2
 8014d12:	00db      	lsls	r3, r3, #3
 8014d14:	440b      	add	r3, r1
 8014d16:	3312      	adds	r3, #18
 8014d18:	881b      	ldrh	r3, [r3, #0]
 8014d1a:	8b7a      	ldrh	r2, [r7, #26]
 8014d1c:	429a      	cmp	r2, r3
 8014d1e:	d82a      	bhi.n	8014d76 <etharp_find_entry+0x18a>
            old_pending = i;
 8014d20:	8c3b      	ldrh	r3, [r7, #32]
 8014d22:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014d24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d28:	4965      	ldr	r1, [pc, #404]	; (8014ec0 <etharp_find_entry+0x2d4>)
 8014d2a:	4613      	mov	r3, r2
 8014d2c:	005b      	lsls	r3, r3, #1
 8014d2e:	4413      	add	r3, r2
 8014d30:	00db      	lsls	r3, r3, #3
 8014d32:	440b      	add	r3, r1
 8014d34:	3312      	adds	r3, #18
 8014d36:	881b      	ldrh	r3, [r3, #0]
 8014d38:	837b      	strh	r3, [r7, #26]
 8014d3a:	e01c      	b.n	8014d76 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014d3c:	7dfb      	ldrb	r3, [r7, #23]
 8014d3e:	2b01      	cmp	r3, #1
 8014d40:	d919      	bls.n	8014d76 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014d42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d46:	495e      	ldr	r1, [pc, #376]	; (8014ec0 <etharp_find_entry+0x2d4>)
 8014d48:	4613      	mov	r3, r2
 8014d4a:	005b      	lsls	r3, r3, #1
 8014d4c:	4413      	add	r3, r2
 8014d4e:	00db      	lsls	r3, r3, #3
 8014d50:	440b      	add	r3, r1
 8014d52:	3312      	adds	r3, #18
 8014d54:	881b      	ldrh	r3, [r3, #0]
 8014d56:	8b3a      	ldrh	r2, [r7, #24]
 8014d58:	429a      	cmp	r2, r3
 8014d5a:	d80c      	bhi.n	8014d76 <etharp_find_entry+0x18a>
            old_stable = i;
 8014d5c:	8c3b      	ldrh	r3, [r7, #32]
 8014d5e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014d60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d64:	4956      	ldr	r1, [pc, #344]	; (8014ec0 <etharp_find_entry+0x2d4>)
 8014d66:	4613      	mov	r3, r2
 8014d68:	005b      	lsls	r3, r3, #1
 8014d6a:	4413      	add	r3, r2
 8014d6c:	00db      	lsls	r3, r3, #3
 8014d6e:	440b      	add	r3, r1
 8014d70:	3312      	adds	r3, #18
 8014d72:	881b      	ldrh	r3, [r3, #0]
 8014d74:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014d76:	8c3b      	ldrh	r3, [r7, #32]
 8014d78:	3301      	adds	r3, #1
 8014d7a:	b29b      	uxth	r3, r3
 8014d7c:	843b      	strh	r3, [r7, #32]
 8014d7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014d82:	2b09      	cmp	r3, #9
 8014d84:	f77f af4c 	ble.w	8014c20 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014d88:	7afb      	ldrb	r3, [r7, #11]
 8014d8a:	f003 0302 	and.w	r3, r3, #2
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d108      	bne.n	8014da4 <etharp_find_entry+0x1b8>
 8014d92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014d96:	2b0a      	cmp	r3, #10
 8014d98:	d107      	bne.n	8014daa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014d9a:	7afb      	ldrb	r3, [r7, #11]
 8014d9c:	f003 0301 	and.w	r3, r3, #1
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d102      	bne.n	8014daa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014da4:	f04f 33ff 	mov.w	r3, #4294967295
 8014da8:	e085      	b.n	8014eb6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014daa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014dae:	2b09      	cmp	r3, #9
 8014db0:	dc02      	bgt.n	8014db8 <etharp_find_entry+0x1cc>
    i = empty;
 8014db2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014db4:	843b      	strh	r3, [r7, #32]
 8014db6:	e039      	b.n	8014e2c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014db8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014dbc:	2b09      	cmp	r3, #9
 8014dbe:	dc14      	bgt.n	8014dea <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014dc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014dc2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014dc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014dc8:	493d      	ldr	r1, [pc, #244]	; (8014ec0 <etharp_find_entry+0x2d4>)
 8014dca:	4613      	mov	r3, r2
 8014dcc:	005b      	lsls	r3, r3, #1
 8014dce:	4413      	add	r3, r2
 8014dd0:	00db      	lsls	r3, r3, #3
 8014dd2:	440b      	add	r3, r1
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d018      	beq.n	8014e0c <etharp_find_entry+0x220>
 8014dda:	4b3a      	ldr	r3, [pc, #232]	; (8014ec4 <etharp_find_entry+0x2d8>)
 8014ddc:	f240 126d 	movw	r2, #365	; 0x16d
 8014de0:	493b      	ldr	r1, [pc, #236]	; (8014ed0 <etharp_find_entry+0x2e4>)
 8014de2:	483a      	ldr	r0, [pc, #232]	; (8014ecc <etharp_find_entry+0x2e0>)
 8014de4:	f002 fa2a 	bl	801723c <iprintf>
 8014de8:	e010      	b.n	8014e0c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014dea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014dee:	2b09      	cmp	r3, #9
 8014df0:	dc02      	bgt.n	8014df8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014df2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014df4:	843b      	strh	r3, [r7, #32]
 8014df6:	e009      	b.n	8014e0c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014df8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014dfc:	2b09      	cmp	r3, #9
 8014dfe:	dc02      	bgt.n	8014e06 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014e00:	8bfb      	ldrh	r3, [r7, #30]
 8014e02:	843b      	strh	r3, [r7, #32]
 8014e04:	e002      	b.n	8014e0c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014e06:	f04f 33ff 	mov.w	r3, #4294967295
 8014e0a:	e054      	b.n	8014eb6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014e0c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014e10:	2b09      	cmp	r3, #9
 8014e12:	dd06      	ble.n	8014e22 <etharp_find_entry+0x236>
 8014e14:	4b2b      	ldr	r3, [pc, #172]	; (8014ec4 <etharp_find_entry+0x2d8>)
 8014e16:	f240 127f 	movw	r2, #383	; 0x17f
 8014e1a:	492e      	ldr	r1, [pc, #184]	; (8014ed4 <etharp_find_entry+0x2e8>)
 8014e1c:	482b      	ldr	r0, [pc, #172]	; (8014ecc <etharp_find_entry+0x2e0>)
 8014e1e:	f002 fa0d 	bl	801723c <iprintf>
    etharp_free_entry(i);
 8014e22:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014e26:	4618      	mov	r0, r3
 8014e28:	f7ff fe06 	bl	8014a38 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014e2c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014e30:	2b09      	cmp	r3, #9
 8014e32:	dd06      	ble.n	8014e42 <etharp_find_entry+0x256>
 8014e34:	4b23      	ldr	r3, [pc, #140]	; (8014ec4 <etharp_find_entry+0x2d8>)
 8014e36:	f240 1283 	movw	r2, #387	; 0x183
 8014e3a:	4926      	ldr	r1, [pc, #152]	; (8014ed4 <etharp_find_entry+0x2e8>)
 8014e3c:	4823      	ldr	r0, [pc, #140]	; (8014ecc <etharp_find_entry+0x2e0>)
 8014e3e:	f002 f9fd 	bl	801723c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014e42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014e46:	491e      	ldr	r1, [pc, #120]	; (8014ec0 <etharp_find_entry+0x2d4>)
 8014e48:	4613      	mov	r3, r2
 8014e4a:	005b      	lsls	r3, r3, #1
 8014e4c:	4413      	add	r3, r2
 8014e4e:	00db      	lsls	r3, r3, #3
 8014e50:	440b      	add	r3, r1
 8014e52:	3314      	adds	r3, #20
 8014e54:	781b      	ldrb	r3, [r3, #0]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d006      	beq.n	8014e68 <etharp_find_entry+0x27c>
 8014e5a:	4b1a      	ldr	r3, [pc, #104]	; (8014ec4 <etharp_find_entry+0x2d8>)
 8014e5c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014e60:	491d      	ldr	r1, [pc, #116]	; (8014ed8 <etharp_find_entry+0x2ec>)
 8014e62:	481a      	ldr	r0, [pc, #104]	; (8014ecc <etharp_find_entry+0x2e0>)
 8014e64:	f002 f9ea 	bl	801723c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d00b      	beq.n	8014e86 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014e6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	6819      	ldr	r1, [r3, #0]
 8014e76:	4812      	ldr	r0, [pc, #72]	; (8014ec0 <etharp_find_entry+0x2d4>)
 8014e78:	4613      	mov	r3, r2
 8014e7a:	005b      	lsls	r3, r3, #1
 8014e7c:	4413      	add	r3, r2
 8014e7e:	00db      	lsls	r3, r3, #3
 8014e80:	4403      	add	r3, r0
 8014e82:	3304      	adds	r3, #4
 8014e84:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014e86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014e8a:	490d      	ldr	r1, [pc, #52]	; (8014ec0 <etharp_find_entry+0x2d4>)
 8014e8c:	4613      	mov	r3, r2
 8014e8e:	005b      	lsls	r3, r3, #1
 8014e90:	4413      	add	r3, r2
 8014e92:	00db      	lsls	r3, r3, #3
 8014e94:	440b      	add	r3, r1
 8014e96:	3312      	adds	r3, #18
 8014e98:	2200      	movs	r2, #0
 8014e9a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014e9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ea0:	4907      	ldr	r1, [pc, #28]	; (8014ec0 <etharp_find_entry+0x2d4>)
 8014ea2:	4613      	mov	r3, r2
 8014ea4:	005b      	lsls	r3, r3, #1
 8014ea6:	4413      	add	r3, r2
 8014ea8:	00db      	lsls	r3, r3, #3
 8014eaa:	440b      	add	r3, r1
 8014eac:	3308      	adds	r3, #8
 8014eae:	687a      	ldr	r2, [r7, #4]
 8014eb0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014eb2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	3728      	adds	r7, #40	; 0x28
 8014eba:	46bd      	mov	sp, r7
 8014ebc:	bd80      	pop	{r7, pc}
 8014ebe:	bf00      	nop
 8014ec0:	200110c4 	.word	0x200110c4
 8014ec4:	0801a9b0 	.word	0x0801a9b0
 8014ec8:	0801a9e8 	.word	0x0801a9e8
 8014ecc:	0801aa28 	.word	0x0801aa28
 8014ed0:	0801aa50 	.word	0x0801aa50
 8014ed4:	0801aa68 	.word	0x0801aa68
 8014ed8:	0801aa7c 	.word	0x0801aa7c

08014edc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014edc:	b580      	push	{r7, lr}
 8014ede:	b088      	sub	sp, #32
 8014ee0:	af02      	add	r7, sp, #8
 8014ee2:	60f8      	str	r0, [r7, #12]
 8014ee4:	60b9      	str	r1, [r7, #8]
 8014ee6:	607a      	str	r2, [r7, #4]
 8014ee8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014ef0:	2b06      	cmp	r3, #6
 8014ef2:	d006      	beq.n	8014f02 <etharp_update_arp_entry+0x26>
 8014ef4:	4b48      	ldr	r3, [pc, #288]	; (8015018 <etharp_update_arp_entry+0x13c>)
 8014ef6:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014efa:	4948      	ldr	r1, [pc, #288]	; (801501c <etharp_update_arp_entry+0x140>)
 8014efc:	4848      	ldr	r0, [pc, #288]	; (8015020 <etharp_update_arp_entry+0x144>)
 8014efe:	f002 f99d 	bl	801723c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014f02:	68bb      	ldr	r3, [r7, #8]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d012      	beq.n	8014f2e <etharp_update_arp_entry+0x52>
 8014f08:	68bb      	ldr	r3, [r7, #8]
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d00e      	beq.n	8014f2e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014f10:	68bb      	ldr	r3, [r7, #8]
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	68f9      	ldr	r1, [r7, #12]
 8014f16:	4618      	mov	r0, r3
 8014f18:	f001 f8fe 	bl	8016118 <ip4_addr_isbroadcast_u32>
 8014f1c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d105      	bne.n	8014f2e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014f22:	68bb      	ldr	r3, [r7, #8]
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014f2a:	2be0      	cmp	r3, #224	; 0xe0
 8014f2c:	d102      	bne.n	8014f34 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014f2e:	f06f 030f 	mvn.w	r3, #15
 8014f32:	e06c      	b.n	801500e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014f34:	78fb      	ldrb	r3, [r7, #3]
 8014f36:	68fa      	ldr	r2, [r7, #12]
 8014f38:	4619      	mov	r1, r3
 8014f3a:	68b8      	ldr	r0, [r7, #8]
 8014f3c:	f7ff fe56 	bl	8014bec <etharp_find_entry>
 8014f40:	4603      	mov	r3, r0
 8014f42:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014f44:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	da02      	bge.n	8014f52 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014f4c:	8afb      	ldrh	r3, [r7, #22]
 8014f4e:	b25b      	sxtb	r3, r3
 8014f50:	e05d      	b.n	801500e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014f52:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014f56:	4933      	ldr	r1, [pc, #204]	; (8015024 <etharp_update_arp_entry+0x148>)
 8014f58:	4613      	mov	r3, r2
 8014f5a:	005b      	lsls	r3, r3, #1
 8014f5c:	4413      	add	r3, r2
 8014f5e:	00db      	lsls	r3, r3, #3
 8014f60:	440b      	add	r3, r1
 8014f62:	3314      	adds	r3, #20
 8014f64:	2202      	movs	r2, #2
 8014f66:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014f68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014f6c:	492d      	ldr	r1, [pc, #180]	; (8015024 <etharp_update_arp_entry+0x148>)
 8014f6e:	4613      	mov	r3, r2
 8014f70:	005b      	lsls	r3, r3, #1
 8014f72:	4413      	add	r3, r2
 8014f74:	00db      	lsls	r3, r3, #3
 8014f76:	440b      	add	r3, r1
 8014f78:	3308      	adds	r3, #8
 8014f7a:	68fa      	ldr	r2, [r7, #12]
 8014f7c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014f7e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014f82:	4613      	mov	r3, r2
 8014f84:	005b      	lsls	r3, r3, #1
 8014f86:	4413      	add	r3, r2
 8014f88:	00db      	lsls	r3, r3, #3
 8014f8a:	3308      	adds	r3, #8
 8014f8c:	4a25      	ldr	r2, [pc, #148]	; (8015024 <etharp_update_arp_entry+0x148>)
 8014f8e:	4413      	add	r3, r2
 8014f90:	3304      	adds	r3, #4
 8014f92:	2206      	movs	r2, #6
 8014f94:	6879      	ldr	r1, [r7, #4]
 8014f96:	4618      	mov	r0, r3
 8014f98:	f002 f93a 	bl	8017210 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014f9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014fa0:	4920      	ldr	r1, [pc, #128]	; (8015024 <etharp_update_arp_entry+0x148>)
 8014fa2:	4613      	mov	r3, r2
 8014fa4:	005b      	lsls	r3, r3, #1
 8014fa6:	4413      	add	r3, r2
 8014fa8:	00db      	lsls	r3, r3, #3
 8014faa:	440b      	add	r3, r1
 8014fac:	3312      	adds	r3, #18
 8014fae:	2200      	movs	r2, #0
 8014fb0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014fb2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014fb6:	491b      	ldr	r1, [pc, #108]	; (8015024 <etharp_update_arp_entry+0x148>)
 8014fb8:	4613      	mov	r3, r2
 8014fba:	005b      	lsls	r3, r3, #1
 8014fbc:	4413      	add	r3, r2
 8014fbe:	00db      	lsls	r3, r3, #3
 8014fc0:	440b      	add	r3, r1
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d021      	beq.n	801500c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014fc8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014fcc:	4915      	ldr	r1, [pc, #84]	; (8015024 <etharp_update_arp_entry+0x148>)
 8014fce:	4613      	mov	r3, r2
 8014fd0:	005b      	lsls	r3, r3, #1
 8014fd2:	4413      	add	r3, r2
 8014fd4:	00db      	lsls	r3, r3, #3
 8014fd6:	440b      	add	r3, r1
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014fdc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014fe0:	4910      	ldr	r1, [pc, #64]	; (8015024 <etharp_update_arp_entry+0x148>)
 8014fe2:	4613      	mov	r3, r2
 8014fe4:	005b      	lsls	r3, r3, #1
 8014fe6:	4413      	add	r3, r2
 8014fe8:	00db      	lsls	r3, r3, #3
 8014fea:	440b      	add	r3, r1
 8014fec:	2200      	movs	r2, #0
 8014fee:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014ff6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014ffa:	9300      	str	r3, [sp, #0]
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	6939      	ldr	r1, [r7, #16]
 8015000:	68f8      	ldr	r0, [r7, #12]
 8015002:	f001 ff97 	bl	8016f34 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015006:	6938      	ldr	r0, [r7, #16]
 8015008:	f7f9 fdec 	bl	800ebe4 <pbuf_free>
  }
  return ERR_OK;
 801500c:	2300      	movs	r3, #0
}
 801500e:	4618      	mov	r0, r3
 8015010:	3718      	adds	r7, #24
 8015012:	46bd      	mov	sp, r7
 8015014:	bd80      	pop	{r7, pc}
 8015016:	bf00      	nop
 8015018:	0801a9b0 	.word	0x0801a9b0
 801501c:	0801aaa8 	.word	0x0801aaa8
 8015020:	0801aa28 	.word	0x0801aa28
 8015024:	200110c4 	.word	0x200110c4

08015028 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015028:	b580      	push	{r7, lr}
 801502a:	b084      	sub	sp, #16
 801502c:	af00      	add	r7, sp, #0
 801502e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015030:	2300      	movs	r3, #0
 8015032:	60fb      	str	r3, [r7, #12]
 8015034:	e01e      	b.n	8015074 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015036:	4913      	ldr	r1, [pc, #76]	; (8015084 <etharp_cleanup_netif+0x5c>)
 8015038:	68fa      	ldr	r2, [r7, #12]
 801503a:	4613      	mov	r3, r2
 801503c:	005b      	lsls	r3, r3, #1
 801503e:	4413      	add	r3, r2
 8015040:	00db      	lsls	r3, r3, #3
 8015042:	440b      	add	r3, r1
 8015044:	3314      	adds	r3, #20
 8015046:	781b      	ldrb	r3, [r3, #0]
 8015048:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801504a:	7afb      	ldrb	r3, [r7, #11]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d00e      	beq.n	801506e <etharp_cleanup_netif+0x46>
 8015050:	490c      	ldr	r1, [pc, #48]	; (8015084 <etharp_cleanup_netif+0x5c>)
 8015052:	68fa      	ldr	r2, [r7, #12]
 8015054:	4613      	mov	r3, r2
 8015056:	005b      	lsls	r3, r3, #1
 8015058:	4413      	add	r3, r2
 801505a:	00db      	lsls	r3, r3, #3
 801505c:	440b      	add	r3, r1
 801505e:	3308      	adds	r3, #8
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	687a      	ldr	r2, [r7, #4]
 8015064:	429a      	cmp	r2, r3
 8015066:	d102      	bne.n	801506e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015068:	68f8      	ldr	r0, [r7, #12]
 801506a:	f7ff fce5 	bl	8014a38 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	3301      	adds	r3, #1
 8015072:	60fb      	str	r3, [r7, #12]
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	2b09      	cmp	r3, #9
 8015078:	dddd      	ble.n	8015036 <etharp_cleanup_netif+0xe>
    }
  }
}
 801507a:	bf00      	nop
 801507c:	bf00      	nop
 801507e:	3710      	adds	r7, #16
 8015080:	46bd      	mov	sp, r7
 8015082:	bd80      	pop	{r7, pc}
 8015084:	200110c4 	.word	0x200110c4

08015088 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015088:	b5b0      	push	{r4, r5, r7, lr}
 801508a:	b08a      	sub	sp, #40	; 0x28
 801508c:	af04      	add	r7, sp, #16
 801508e:	6078      	str	r0, [r7, #4]
 8015090:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015092:	683b      	ldr	r3, [r7, #0]
 8015094:	2b00      	cmp	r3, #0
 8015096:	d107      	bne.n	80150a8 <etharp_input+0x20>
 8015098:	4b3d      	ldr	r3, [pc, #244]	; (8015190 <etharp_input+0x108>)
 801509a:	f240 228a 	movw	r2, #650	; 0x28a
 801509e:	493d      	ldr	r1, [pc, #244]	; (8015194 <etharp_input+0x10c>)
 80150a0:	483d      	ldr	r0, [pc, #244]	; (8015198 <etharp_input+0x110>)
 80150a2:	f002 f8cb 	bl	801723c <iprintf>
 80150a6:	e06f      	b.n	8015188 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	685b      	ldr	r3, [r3, #4]
 80150ac:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80150ae:	693b      	ldr	r3, [r7, #16]
 80150b0:	881b      	ldrh	r3, [r3, #0]
 80150b2:	b29b      	uxth	r3, r3
 80150b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80150b8:	d10c      	bne.n	80150d4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80150ba:	693b      	ldr	r3, [r7, #16]
 80150bc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80150be:	2b06      	cmp	r3, #6
 80150c0:	d108      	bne.n	80150d4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80150c2:	693b      	ldr	r3, [r7, #16]
 80150c4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80150c6:	2b04      	cmp	r3, #4
 80150c8:	d104      	bne.n	80150d4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80150ca:	693b      	ldr	r3, [r7, #16]
 80150cc:	885b      	ldrh	r3, [r3, #2]
 80150ce:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80150d0:	2b08      	cmp	r3, #8
 80150d2:	d003      	beq.n	80150dc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80150d4:	6878      	ldr	r0, [r7, #4]
 80150d6:	f7f9 fd85 	bl	800ebe4 <pbuf_free>
    return;
 80150da:	e055      	b.n	8015188 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80150dc:	693b      	ldr	r3, [r7, #16]
 80150de:	330e      	adds	r3, #14
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80150e4:	693b      	ldr	r3, [r7, #16]
 80150e6:	3318      	adds	r3, #24
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80150ec:	683b      	ldr	r3, [r7, #0]
 80150ee:	3304      	adds	r3, #4
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d102      	bne.n	80150fc <etharp_input+0x74>
    for_us = 0;
 80150f6:	2300      	movs	r3, #0
 80150f8:	75fb      	strb	r3, [r7, #23]
 80150fa:	e009      	b.n	8015110 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80150fc:	68ba      	ldr	r2, [r7, #8]
 80150fe:	683b      	ldr	r3, [r7, #0]
 8015100:	3304      	adds	r3, #4
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	429a      	cmp	r2, r3
 8015106:	bf0c      	ite	eq
 8015108:	2301      	moveq	r3, #1
 801510a:	2300      	movne	r3, #0
 801510c:	b2db      	uxtb	r3, r3
 801510e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015110:	693b      	ldr	r3, [r7, #16]
 8015112:	f103 0208 	add.w	r2, r3, #8
 8015116:	7dfb      	ldrb	r3, [r7, #23]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d001      	beq.n	8015120 <etharp_input+0x98>
 801511c:	2301      	movs	r3, #1
 801511e:	e000      	b.n	8015122 <etharp_input+0x9a>
 8015120:	2302      	movs	r3, #2
 8015122:	f107 010c 	add.w	r1, r7, #12
 8015126:	6838      	ldr	r0, [r7, #0]
 8015128:	f7ff fed8 	bl	8014edc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801512c:	693b      	ldr	r3, [r7, #16]
 801512e:	88db      	ldrh	r3, [r3, #6]
 8015130:	b29b      	uxth	r3, r3
 8015132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015136:	d003      	beq.n	8015140 <etharp_input+0xb8>
 8015138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801513c:	d01e      	beq.n	801517c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801513e:	e020      	b.n	8015182 <etharp_input+0xfa>
      if (for_us) {
 8015140:	7dfb      	ldrb	r3, [r7, #23]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d01c      	beq.n	8015180 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015146:	683b      	ldr	r3, [r7, #0]
 8015148:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801514c:	693b      	ldr	r3, [r7, #16]
 801514e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015152:	683b      	ldr	r3, [r7, #0]
 8015154:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8015158:	683b      	ldr	r3, [r7, #0]
 801515a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801515c:	693a      	ldr	r2, [r7, #16]
 801515e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015160:	2102      	movs	r1, #2
 8015162:	9103      	str	r1, [sp, #12]
 8015164:	f107 010c 	add.w	r1, r7, #12
 8015168:	9102      	str	r1, [sp, #8]
 801516a:	9201      	str	r2, [sp, #4]
 801516c:	9300      	str	r3, [sp, #0]
 801516e:	462b      	mov	r3, r5
 8015170:	4622      	mov	r2, r4
 8015172:	4601      	mov	r1, r0
 8015174:	6838      	ldr	r0, [r7, #0]
 8015176:	f000 faeb 	bl	8015750 <etharp_raw>
      break;
 801517a:	e001      	b.n	8015180 <etharp_input+0xf8>
      break;
 801517c:	bf00      	nop
 801517e:	e000      	b.n	8015182 <etharp_input+0xfa>
      break;
 8015180:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015182:	6878      	ldr	r0, [r7, #4]
 8015184:	f7f9 fd2e 	bl	800ebe4 <pbuf_free>
}
 8015188:	3718      	adds	r7, #24
 801518a:	46bd      	mov	sp, r7
 801518c:	bdb0      	pop	{r4, r5, r7, pc}
 801518e:	bf00      	nop
 8015190:	0801a9b0 	.word	0x0801a9b0
 8015194:	0801ab00 	.word	0x0801ab00
 8015198:	0801aa28 	.word	0x0801aa28

0801519c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801519c:	b580      	push	{r7, lr}
 801519e:	b086      	sub	sp, #24
 80151a0:	af02      	add	r7, sp, #8
 80151a2:	60f8      	str	r0, [r7, #12]
 80151a4:	60b9      	str	r1, [r7, #8]
 80151a6:	4613      	mov	r3, r2
 80151a8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80151aa:	79fa      	ldrb	r2, [r7, #7]
 80151ac:	4944      	ldr	r1, [pc, #272]	; (80152c0 <etharp_output_to_arp_index+0x124>)
 80151ae:	4613      	mov	r3, r2
 80151b0:	005b      	lsls	r3, r3, #1
 80151b2:	4413      	add	r3, r2
 80151b4:	00db      	lsls	r3, r3, #3
 80151b6:	440b      	add	r3, r1
 80151b8:	3314      	adds	r3, #20
 80151ba:	781b      	ldrb	r3, [r3, #0]
 80151bc:	2b01      	cmp	r3, #1
 80151be:	d806      	bhi.n	80151ce <etharp_output_to_arp_index+0x32>
 80151c0:	4b40      	ldr	r3, [pc, #256]	; (80152c4 <etharp_output_to_arp_index+0x128>)
 80151c2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80151c6:	4940      	ldr	r1, [pc, #256]	; (80152c8 <etharp_output_to_arp_index+0x12c>)
 80151c8:	4840      	ldr	r0, [pc, #256]	; (80152cc <etharp_output_to_arp_index+0x130>)
 80151ca:	f002 f837 	bl	801723c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80151ce:	79fa      	ldrb	r2, [r7, #7]
 80151d0:	493b      	ldr	r1, [pc, #236]	; (80152c0 <etharp_output_to_arp_index+0x124>)
 80151d2:	4613      	mov	r3, r2
 80151d4:	005b      	lsls	r3, r3, #1
 80151d6:	4413      	add	r3, r2
 80151d8:	00db      	lsls	r3, r3, #3
 80151da:	440b      	add	r3, r1
 80151dc:	3314      	adds	r3, #20
 80151de:	781b      	ldrb	r3, [r3, #0]
 80151e0:	2b02      	cmp	r3, #2
 80151e2:	d153      	bne.n	801528c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80151e4:	79fa      	ldrb	r2, [r7, #7]
 80151e6:	4936      	ldr	r1, [pc, #216]	; (80152c0 <etharp_output_to_arp_index+0x124>)
 80151e8:	4613      	mov	r3, r2
 80151ea:	005b      	lsls	r3, r3, #1
 80151ec:	4413      	add	r3, r2
 80151ee:	00db      	lsls	r3, r3, #3
 80151f0:	440b      	add	r3, r1
 80151f2:	3312      	adds	r3, #18
 80151f4:	881b      	ldrh	r3, [r3, #0]
 80151f6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80151fa:	d919      	bls.n	8015230 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80151fc:	79fa      	ldrb	r2, [r7, #7]
 80151fe:	4613      	mov	r3, r2
 8015200:	005b      	lsls	r3, r3, #1
 8015202:	4413      	add	r3, r2
 8015204:	00db      	lsls	r3, r3, #3
 8015206:	4a2e      	ldr	r2, [pc, #184]	; (80152c0 <etharp_output_to_arp_index+0x124>)
 8015208:	4413      	add	r3, r2
 801520a:	3304      	adds	r3, #4
 801520c:	4619      	mov	r1, r3
 801520e:	68f8      	ldr	r0, [r7, #12]
 8015210:	f000 fb4c 	bl	80158ac <etharp_request>
 8015214:	4603      	mov	r3, r0
 8015216:	2b00      	cmp	r3, #0
 8015218:	d138      	bne.n	801528c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801521a:	79fa      	ldrb	r2, [r7, #7]
 801521c:	4928      	ldr	r1, [pc, #160]	; (80152c0 <etharp_output_to_arp_index+0x124>)
 801521e:	4613      	mov	r3, r2
 8015220:	005b      	lsls	r3, r3, #1
 8015222:	4413      	add	r3, r2
 8015224:	00db      	lsls	r3, r3, #3
 8015226:	440b      	add	r3, r1
 8015228:	3314      	adds	r3, #20
 801522a:	2203      	movs	r2, #3
 801522c:	701a      	strb	r2, [r3, #0]
 801522e:	e02d      	b.n	801528c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015230:	79fa      	ldrb	r2, [r7, #7]
 8015232:	4923      	ldr	r1, [pc, #140]	; (80152c0 <etharp_output_to_arp_index+0x124>)
 8015234:	4613      	mov	r3, r2
 8015236:	005b      	lsls	r3, r3, #1
 8015238:	4413      	add	r3, r2
 801523a:	00db      	lsls	r3, r3, #3
 801523c:	440b      	add	r3, r1
 801523e:	3312      	adds	r3, #18
 8015240:	881b      	ldrh	r3, [r3, #0]
 8015242:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015246:	d321      	bcc.n	801528c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015248:	79fa      	ldrb	r2, [r7, #7]
 801524a:	4613      	mov	r3, r2
 801524c:	005b      	lsls	r3, r3, #1
 801524e:	4413      	add	r3, r2
 8015250:	00db      	lsls	r3, r3, #3
 8015252:	4a1b      	ldr	r2, [pc, #108]	; (80152c0 <etharp_output_to_arp_index+0x124>)
 8015254:	4413      	add	r3, r2
 8015256:	1d19      	adds	r1, r3, #4
 8015258:	79fa      	ldrb	r2, [r7, #7]
 801525a:	4613      	mov	r3, r2
 801525c:	005b      	lsls	r3, r3, #1
 801525e:	4413      	add	r3, r2
 8015260:	00db      	lsls	r3, r3, #3
 8015262:	3308      	adds	r3, #8
 8015264:	4a16      	ldr	r2, [pc, #88]	; (80152c0 <etharp_output_to_arp_index+0x124>)
 8015266:	4413      	add	r3, r2
 8015268:	3304      	adds	r3, #4
 801526a:	461a      	mov	r2, r3
 801526c:	68f8      	ldr	r0, [r7, #12]
 801526e:	f000 fafb 	bl	8015868 <etharp_request_dst>
 8015272:	4603      	mov	r3, r0
 8015274:	2b00      	cmp	r3, #0
 8015276:	d109      	bne.n	801528c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015278:	79fa      	ldrb	r2, [r7, #7]
 801527a:	4911      	ldr	r1, [pc, #68]	; (80152c0 <etharp_output_to_arp_index+0x124>)
 801527c:	4613      	mov	r3, r2
 801527e:	005b      	lsls	r3, r3, #1
 8015280:	4413      	add	r3, r2
 8015282:	00db      	lsls	r3, r3, #3
 8015284:	440b      	add	r3, r1
 8015286:	3314      	adds	r3, #20
 8015288:	2203      	movs	r2, #3
 801528a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8015292:	79fa      	ldrb	r2, [r7, #7]
 8015294:	4613      	mov	r3, r2
 8015296:	005b      	lsls	r3, r3, #1
 8015298:	4413      	add	r3, r2
 801529a:	00db      	lsls	r3, r3, #3
 801529c:	3308      	adds	r3, #8
 801529e:	4a08      	ldr	r2, [pc, #32]	; (80152c0 <etharp_output_to_arp_index+0x124>)
 80152a0:	4413      	add	r3, r2
 80152a2:	3304      	adds	r3, #4
 80152a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80152a8:	9200      	str	r2, [sp, #0]
 80152aa:	460a      	mov	r2, r1
 80152ac:	68b9      	ldr	r1, [r7, #8]
 80152ae:	68f8      	ldr	r0, [r7, #12]
 80152b0:	f001 fe40 	bl	8016f34 <ethernet_output>
 80152b4:	4603      	mov	r3, r0
}
 80152b6:	4618      	mov	r0, r3
 80152b8:	3710      	adds	r7, #16
 80152ba:	46bd      	mov	sp, r7
 80152bc:	bd80      	pop	{r7, pc}
 80152be:	bf00      	nop
 80152c0:	200110c4 	.word	0x200110c4
 80152c4:	0801a9b0 	.word	0x0801a9b0
 80152c8:	0801ab20 	.word	0x0801ab20
 80152cc:	0801aa28 	.word	0x0801aa28

080152d0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80152d0:	b580      	push	{r7, lr}
 80152d2:	b08a      	sub	sp, #40	; 0x28
 80152d4:	af02      	add	r7, sp, #8
 80152d6:	60f8      	str	r0, [r7, #12]
 80152d8:	60b9      	str	r1, [r7, #8]
 80152da:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d106      	bne.n	80152f4 <etharp_output+0x24>
 80152e6:	4b73      	ldr	r3, [pc, #460]	; (80154b4 <etharp_output+0x1e4>)
 80152e8:	f240 321e 	movw	r2, #798	; 0x31e
 80152ec:	4972      	ldr	r1, [pc, #456]	; (80154b8 <etharp_output+0x1e8>)
 80152ee:	4873      	ldr	r0, [pc, #460]	; (80154bc <etharp_output+0x1ec>)
 80152f0:	f001 ffa4 	bl	801723c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80152f4:	68bb      	ldr	r3, [r7, #8]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d106      	bne.n	8015308 <etharp_output+0x38>
 80152fa:	4b6e      	ldr	r3, [pc, #440]	; (80154b4 <etharp_output+0x1e4>)
 80152fc:	f240 321f 	movw	r2, #799	; 0x31f
 8015300:	496f      	ldr	r1, [pc, #444]	; (80154c0 <etharp_output+0x1f0>)
 8015302:	486e      	ldr	r0, [pc, #440]	; (80154bc <etharp_output+0x1ec>)
 8015304:	f001 ff9a 	bl	801723c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d106      	bne.n	801531c <etharp_output+0x4c>
 801530e:	4b69      	ldr	r3, [pc, #420]	; (80154b4 <etharp_output+0x1e4>)
 8015310:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015314:	496b      	ldr	r1, [pc, #428]	; (80154c4 <etharp_output+0x1f4>)
 8015316:	4869      	ldr	r0, [pc, #420]	; (80154bc <etharp_output+0x1ec>)
 8015318:	f001 ff90 	bl	801723c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	68f9      	ldr	r1, [r7, #12]
 8015322:	4618      	mov	r0, r3
 8015324:	f000 fef8 	bl	8016118 <ip4_addr_isbroadcast_u32>
 8015328:	4603      	mov	r3, r0
 801532a:	2b00      	cmp	r3, #0
 801532c:	d002      	beq.n	8015334 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801532e:	4b66      	ldr	r3, [pc, #408]	; (80154c8 <etharp_output+0x1f8>)
 8015330:	61fb      	str	r3, [r7, #28]
 8015332:	e0af      	b.n	8015494 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801533c:	2be0      	cmp	r3, #224	; 0xe0
 801533e:	d118      	bne.n	8015372 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015340:	2301      	movs	r3, #1
 8015342:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015344:	2300      	movs	r3, #0
 8015346:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015348:	235e      	movs	r3, #94	; 0x5e
 801534a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	3301      	adds	r3, #1
 8015350:	781b      	ldrb	r3, [r3, #0]
 8015352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015356:	b2db      	uxtb	r3, r3
 8015358:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	3302      	adds	r3, #2
 801535e:	781b      	ldrb	r3, [r3, #0]
 8015360:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	3303      	adds	r3, #3
 8015366:	781b      	ldrb	r3, [r3, #0]
 8015368:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801536a:	f107 0310 	add.w	r3, r7, #16
 801536e:	61fb      	str	r3, [r7, #28]
 8015370:	e090      	b.n	8015494 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	681a      	ldr	r2, [r3, #0]
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	3304      	adds	r3, #4
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	405a      	eors	r2, r3
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	3308      	adds	r3, #8
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	4013      	ands	r3, r2
 8015386:	2b00      	cmp	r3, #0
 8015388:	d012      	beq.n	80153b0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015390:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015394:	4293      	cmp	r3, r2
 8015396:	d00b      	beq.n	80153b0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	330c      	adds	r3, #12
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d003      	beq.n	80153aa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	330c      	adds	r3, #12
 80153a6:	61bb      	str	r3, [r7, #24]
 80153a8:	e002      	b.n	80153b0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80153aa:	f06f 0303 	mvn.w	r3, #3
 80153ae:	e07d      	b.n	80154ac <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80153b0:	4b46      	ldr	r3, [pc, #280]	; (80154cc <etharp_output+0x1fc>)
 80153b2:	781b      	ldrb	r3, [r3, #0]
 80153b4:	4619      	mov	r1, r3
 80153b6:	4a46      	ldr	r2, [pc, #280]	; (80154d0 <etharp_output+0x200>)
 80153b8:	460b      	mov	r3, r1
 80153ba:	005b      	lsls	r3, r3, #1
 80153bc:	440b      	add	r3, r1
 80153be:	00db      	lsls	r3, r3, #3
 80153c0:	4413      	add	r3, r2
 80153c2:	3314      	adds	r3, #20
 80153c4:	781b      	ldrb	r3, [r3, #0]
 80153c6:	2b01      	cmp	r3, #1
 80153c8:	d925      	bls.n	8015416 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80153ca:	4b40      	ldr	r3, [pc, #256]	; (80154cc <etharp_output+0x1fc>)
 80153cc:	781b      	ldrb	r3, [r3, #0]
 80153ce:	4619      	mov	r1, r3
 80153d0:	4a3f      	ldr	r2, [pc, #252]	; (80154d0 <etharp_output+0x200>)
 80153d2:	460b      	mov	r3, r1
 80153d4:	005b      	lsls	r3, r3, #1
 80153d6:	440b      	add	r3, r1
 80153d8:	00db      	lsls	r3, r3, #3
 80153da:	4413      	add	r3, r2
 80153dc:	3308      	adds	r3, #8
 80153de:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80153e0:	68fa      	ldr	r2, [r7, #12]
 80153e2:	429a      	cmp	r2, r3
 80153e4:	d117      	bne.n	8015416 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80153e6:	69bb      	ldr	r3, [r7, #24]
 80153e8:	681a      	ldr	r2, [r3, #0]
 80153ea:	4b38      	ldr	r3, [pc, #224]	; (80154cc <etharp_output+0x1fc>)
 80153ec:	781b      	ldrb	r3, [r3, #0]
 80153ee:	4618      	mov	r0, r3
 80153f0:	4937      	ldr	r1, [pc, #220]	; (80154d0 <etharp_output+0x200>)
 80153f2:	4603      	mov	r3, r0
 80153f4:	005b      	lsls	r3, r3, #1
 80153f6:	4403      	add	r3, r0
 80153f8:	00db      	lsls	r3, r3, #3
 80153fa:	440b      	add	r3, r1
 80153fc:	3304      	adds	r3, #4
 80153fe:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015400:	429a      	cmp	r2, r3
 8015402:	d108      	bne.n	8015416 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015404:	4b31      	ldr	r3, [pc, #196]	; (80154cc <etharp_output+0x1fc>)
 8015406:	781b      	ldrb	r3, [r3, #0]
 8015408:	461a      	mov	r2, r3
 801540a:	68b9      	ldr	r1, [r7, #8]
 801540c:	68f8      	ldr	r0, [r7, #12]
 801540e:	f7ff fec5 	bl	801519c <etharp_output_to_arp_index>
 8015412:	4603      	mov	r3, r0
 8015414:	e04a      	b.n	80154ac <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015416:	2300      	movs	r3, #0
 8015418:	75fb      	strb	r3, [r7, #23]
 801541a:	e031      	b.n	8015480 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801541c:	7dfa      	ldrb	r2, [r7, #23]
 801541e:	492c      	ldr	r1, [pc, #176]	; (80154d0 <etharp_output+0x200>)
 8015420:	4613      	mov	r3, r2
 8015422:	005b      	lsls	r3, r3, #1
 8015424:	4413      	add	r3, r2
 8015426:	00db      	lsls	r3, r3, #3
 8015428:	440b      	add	r3, r1
 801542a:	3314      	adds	r3, #20
 801542c:	781b      	ldrb	r3, [r3, #0]
 801542e:	2b01      	cmp	r3, #1
 8015430:	d923      	bls.n	801547a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015432:	7dfa      	ldrb	r2, [r7, #23]
 8015434:	4926      	ldr	r1, [pc, #152]	; (80154d0 <etharp_output+0x200>)
 8015436:	4613      	mov	r3, r2
 8015438:	005b      	lsls	r3, r3, #1
 801543a:	4413      	add	r3, r2
 801543c:	00db      	lsls	r3, r3, #3
 801543e:	440b      	add	r3, r1
 8015440:	3308      	adds	r3, #8
 8015442:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015444:	68fa      	ldr	r2, [r7, #12]
 8015446:	429a      	cmp	r2, r3
 8015448:	d117      	bne.n	801547a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801544a:	69bb      	ldr	r3, [r7, #24]
 801544c:	6819      	ldr	r1, [r3, #0]
 801544e:	7dfa      	ldrb	r2, [r7, #23]
 8015450:	481f      	ldr	r0, [pc, #124]	; (80154d0 <etharp_output+0x200>)
 8015452:	4613      	mov	r3, r2
 8015454:	005b      	lsls	r3, r3, #1
 8015456:	4413      	add	r3, r2
 8015458:	00db      	lsls	r3, r3, #3
 801545a:	4403      	add	r3, r0
 801545c:	3304      	adds	r3, #4
 801545e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015460:	4299      	cmp	r1, r3
 8015462:	d10a      	bne.n	801547a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015464:	4a19      	ldr	r2, [pc, #100]	; (80154cc <etharp_output+0x1fc>)
 8015466:	7dfb      	ldrb	r3, [r7, #23]
 8015468:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801546a:	7dfb      	ldrb	r3, [r7, #23]
 801546c:	461a      	mov	r2, r3
 801546e:	68b9      	ldr	r1, [r7, #8]
 8015470:	68f8      	ldr	r0, [r7, #12]
 8015472:	f7ff fe93 	bl	801519c <etharp_output_to_arp_index>
 8015476:	4603      	mov	r3, r0
 8015478:	e018      	b.n	80154ac <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801547a:	7dfb      	ldrb	r3, [r7, #23]
 801547c:	3301      	adds	r3, #1
 801547e:	75fb      	strb	r3, [r7, #23]
 8015480:	7dfb      	ldrb	r3, [r7, #23]
 8015482:	2b09      	cmp	r3, #9
 8015484:	d9ca      	bls.n	801541c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015486:	68ba      	ldr	r2, [r7, #8]
 8015488:	69b9      	ldr	r1, [r7, #24]
 801548a:	68f8      	ldr	r0, [r7, #12]
 801548c:	f000 f822 	bl	80154d4 <etharp_query>
 8015490:	4603      	mov	r3, r0
 8015492:	e00b      	b.n	80154ac <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801549a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801549e:	9300      	str	r3, [sp, #0]
 80154a0:	69fb      	ldr	r3, [r7, #28]
 80154a2:	68b9      	ldr	r1, [r7, #8]
 80154a4:	68f8      	ldr	r0, [r7, #12]
 80154a6:	f001 fd45 	bl	8016f34 <ethernet_output>
 80154aa:	4603      	mov	r3, r0
}
 80154ac:	4618      	mov	r0, r3
 80154ae:	3720      	adds	r7, #32
 80154b0:	46bd      	mov	sp, r7
 80154b2:	bd80      	pop	{r7, pc}
 80154b4:	0801a9b0 	.word	0x0801a9b0
 80154b8:	0801ab00 	.word	0x0801ab00
 80154bc:	0801aa28 	.word	0x0801aa28
 80154c0:	0801ab50 	.word	0x0801ab50
 80154c4:	0801aaf0 	.word	0x0801aaf0
 80154c8:	0801b220 	.word	0x0801b220
 80154cc:	200111b4 	.word	0x200111b4
 80154d0:	200110c4 	.word	0x200110c4

080154d4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80154d4:	b580      	push	{r7, lr}
 80154d6:	b08c      	sub	sp, #48	; 0x30
 80154d8:	af02      	add	r7, sp, #8
 80154da:	60f8      	str	r0, [r7, #12]
 80154dc:	60b9      	str	r1, [r7, #8]
 80154de:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	3326      	adds	r3, #38	; 0x26
 80154e4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80154e6:	23ff      	movs	r3, #255	; 0xff
 80154e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80154ec:	2300      	movs	r3, #0
 80154ee:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80154f0:	68bb      	ldr	r3, [r7, #8]
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	68f9      	ldr	r1, [r7, #12]
 80154f6:	4618      	mov	r0, r3
 80154f8:	f000 fe0e 	bl	8016118 <ip4_addr_isbroadcast_u32>
 80154fc:	4603      	mov	r3, r0
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d10c      	bne.n	801551c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015502:	68bb      	ldr	r3, [r7, #8]
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801550a:	2be0      	cmp	r3, #224	; 0xe0
 801550c:	d006      	beq.n	801551c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801550e:	68bb      	ldr	r3, [r7, #8]
 8015510:	2b00      	cmp	r3, #0
 8015512:	d003      	beq.n	801551c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015514:	68bb      	ldr	r3, [r7, #8]
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d102      	bne.n	8015522 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801551c:	f06f 030f 	mvn.w	r3, #15
 8015520:	e101      	b.n	8015726 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015522:	68fa      	ldr	r2, [r7, #12]
 8015524:	2101      	movs	r1, #1
 8015526:	68b8      	ldr	r0, [r7, #8]
 8015528:	f7ff fb60 	bl	8014bec <etharp_find_entry>
 801552c:	4603      	mov	r3, r0
 801552e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015530:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015534:	2b00      	cmp	r3, #0
 8015536:	da02      	bge.n	801553e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015538:	8a7b      	ldrh	r3, [r7, #18]
 801553a:	b25b      	sxtb	r3, r3
 801553c:	e0f3      	b.n	8015726 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801553e:	8a7b      	ldrh	r3, [r7, #18]
 8015540:	2b7e      	cmp	r3, #126	; 0x7e
 8015542:	d906      	bls.n	8015552 <etharp_query+0x7e>
 8015544:	4b7a      	ldr	r3, [pc, #488]	; (8015730 <etharp_query+0x25c>)
 8015546:	f240 32c1 	movw	r2, #961	; 0x3c1
 801554a:	497a      	ldr	r1, [pc, #488]	; (8015734 <etharp_query+0x260>)
 801554c:	487a      	ldr	r0, [pc, #488]	; (8015738 <etharp_query+0x264>)
 801554e:	f001 fe75 	bl	801723c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015552:	8a7b      	ldrh	r3, [r7, #18]
 8015554:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015556:	7c7a      	ldrb	r2, [r7, #17]
 8015558:	4978      	ldr	r1, [pc, #480]	; (801573c <etharp_query+0x268>)
 801555a:	4613      	mov	r3, r2
 801555c:	005b      	lsls	r3, r3, #1
 801555e:	4413      	add	r3, r2
 8015560:	00db      	lsls	r3, r3, #3
 8015562:	440b      	add	r3, r1
 8015564:	3314      	adds	r3, #20
 8015566:	781b      	ldrb	r3, [r3, #0]
 8015568:	2b00      	cmp	r3, #0
 801556a:	d115      	bne.n	8015598 <etharp_query+0xc4>
    is_new_entry = 1;
 801556c:	2301      	movs	r3, #1
 801556e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015570:	7c7a      	ldrb	r2, [r7, #17]
 8015572:	4972      	ldr	r1, [pc, #456]	; (801573c <etharp_query+0x268>)
 8015574:	4613      	mov	r3, r2
 8015576:	005b      	lsls	r3, r3, #1
 8015578:	4413      	add	r3, r2
 801557a:	00db      	lsls	r3, r3, #3
 801557c:	440b      	add	r3, r1
 801557e:	3314      	adds	r3, #20
 8015580:	2201      	movs	r2, #1
 8015582:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015584:	7c7a      	ldrb	r2, [r7, #17]
 8015586:	496d      	ldr	r1, [pc, #436]	; (801573c <etharp_query+0x268>)
 8015588:	4613      	mov	r3, r2
 801558a:	005b      	lsls	r3, r3, #1
 801558c:	4413      	add	r3, r2
 801558e:	00db      	lsls	r3, r3, #3
 8015590:	440b      	add	r3, r1
 8015592:	3308      	adds	r3, #8
 8015594:	68fa      	ldr	r2, [r7, #12]
 8015596:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015598:	7c7a      	ldrb	r2, [r7, #17]
 801559a:	4968      	ldr	r1, [pc, #416]	; (801573c <etharp_query+0x268>)
 801559c:	4613      	mov	r3, r2
 801559e:	005b      	lsls	r3, r3, #1
 80155a0:	4413      	add	r3, r2
 80155a2:	00db      	lsls	r3, r3, #3
 80155a4:	440b      	add	r3, r1
 80155a6:	3314      	adds	r3, #20
 80155a8:	781b      	ldrb	r3, [r3, #0]
 80155aa:	2b01      	cmp	r3, #1
 80155ac:	d011      	beq.n	80155d2 <etharp_query+0xfe>
 80155ae:	7c7a      	ldrb	r2, [r7, #17]
 80155b0:	4962      	ldr	r1, [pc, #392]	; (801573c <etharp_query+0x268>)
 80155b2:	4613      	mov	r3, r2
 80155b4:	005b      	lsls	r3, r3, #1
 80155b6:	4413      	add	r3, r2
 80155b8:	00db      	lsls	r3, r3, #3
 80155ba:	440b      	add	r3, r1
 80155bc:	3314      	adds	r3, #20
 80155be:	781b      	ldrb	r3, [r3, #0]
 80155c0:	2b01      	cmp	r3, #1
 80155c2:	d806      	bhi.n	80155d2 <etharp_query+0xfe>
 80155c4:	4b5a      	ldr	r3, [pc, #360]	; (8015730 <etharp_query+0x25c>)
 80155c6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80155ca:	495d      	ldr	r1, [pc, #372]	; (8015740 <etharp_query+0x26c>)
 80155cc:	485a      	ldr	r0, [pc, #360]	; (8015738 <etharp_query+0x264>)
 80155ce:	f001 fe35 	bl	801723c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80155d2:	6a3b      	ldr	r3, [r7, #32]
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d102      	bne.n	80155de <etharp_query+0x10a>
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d10c      	bne.n	80155f8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80155de:	68b9      	ldr	r1, [r7, #8]
 80155e0:	68f8      	ldr	r0, [r7, #12]
 80155e2:	f000 f963 	bl	80158ac <etharp_request>
 80155e6:	4603      	mov	r3, r0
 80155e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d102      	bne.n	80155f8 <etharp_query+0x124>
      return result;
 80155f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80155f6:	e096      	b.n	8015726 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d106      	bne.n	801560c <etharp_query+0x138>
 80155fe:	4b4c      	ldr	r3, [pc, #304]	; (8015730 <etharp_query+0x25c>)
 8015600:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015604:	494f      	ldr	r1, [pc, #316]	; (8015744 <etharp_query+0x270>)
 8015606:	484c      	ldr	r0, [pc, #304]	; (8015738 <etharp_query+0x264>)
 8015608:	f001 fe18 	bl	801723c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801560c:	7c7a      	ldrb	r2, [r7, #17]
 801560e:	494b      	ldr	r1, [pc, #300]	; (801573c <etharp_query+0x268>)
 8015610:	4613      	mov	r3, r2
 8015612:	005b      	lsls	r3, r3, #1
 8015614:	4413      	add	r3, r2
 8015616:	00db      	lsls	r3, r3, #3
 8015618:	440b      	add	r3, r1
 801561a:	3314      	adds	r3, #20
 801561c:	781b      	ldrb	r3, [r3, #0]
 801561e:	2b01      	cmp	r3, #1
 8015620:	d917      	bls.n	8015652 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015622:	4a49      	ldr	r2, [pc, #292]	; (8015748 <etharp_query+0x274>)
 8015624:	7c7b      	ldrb	r3, [r7, #17]
 8015626:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015628:	7c7a      	ldrb	r2, [r7, #17]
 801562a:	4613      	mov	r3, r2
 801562c:	005b      	lsls	r3, r3, #1
 801562e:	4413      	add	r3, r2
 8015630:	00db      	lsls	r3, r3, #3
 8015632:	3308      	adds	r3, #8
 8015634:	4a41      	ldr	r2, [pc, #260]	; (801573c <etharp_query+0x268>)
 8015636:	4413      	add	r3, r2
 8015638:	3304      	adds	r3, #4
 801563a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801563e:	9200      	str	r2, [sp, #0]
 8015640:	697a      	ldr	r2, [r7, #20]
 8015642:	6879      	ldr	r1, [r7, #4]
 8015644:	68f8      	ldr	r0, [r7, #12]
 8015646:	f001 fc75 	bl	8016f34 <ethernet_output>
 801564a:	4603      	mov	r3, r0
 801564c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015650:	e067      	b.n	8015722 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015652:	7c7a      	ldrb	r2, [r7, #17]
 8015654:	4939      	ldr	r1, [pc, #228]	; (801573c <etharp_query+0x268>)
 8015656:	4613      	mov	r3, r2
 8015658:	005b      	lsls	r3, r3, #1
 801565a:	4413      	add	r3, r2
 801565c:	00db      	lsls	r3, r3, #3
 801565e:	440b      	add	r3, r1
 8015660:	3314      	adds	r3, #20
 8015662:	781b      	ldrb	r3, [r3, #0]
 8015664:	2b01      	cmp	r3, #1
 8015666:	d15c      	bne.n	8015722 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015668:	2300      	movs	r3, #0
 801566a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015670:	e01c      	b.n	80156ac <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015672:	69fb      	ldr	r3, [r7, #28]
 8015674:	895a      	ldrh	r2, [r3, #10]
 8015676:	69fb      	ldr	r3, [r7, #28]
 8015678:	891b      	ldrh	r3, [r3, #8]
 801567a:	429a      	cmp	r2, r3
 801567c:	d10a      	bne.n	8015694 <etharp_query+0x1c0>
 801567e:	69fb      	ldr	r3, [r7, #28]
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	2b00      	cmp	r3, #0
 8015684:	d006      	beq.n	8015694 <etharp_query+0x1c0>
 8015686:	4b2a      	ldr	r3, [pc, #168]	; (8015730 <etharp_query+0x25c>)
 8015688:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801568c:	492f      	ldr	r1, [pc, #188]	; (801574c <etharp_query+0x278>)
 801568e:	482a      	ldr	r0, [pc, #168]	; (8015738 <etharp_query+0x264>)
 8015690:	f001 fdd4 	bl	801723c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015694:	69fb      	ldr	r3, [r7, #28]
 8015696:	7b1b      	ldrb	r3, [r3, #12]
 8015698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801569c:	2b00      	cmp	r3, #0
 801569e:	d002      	beq.n	80156a6 <etharp_query+0x1d2>
        copy_needed = 1;
 80156a0:	2301      	movs	r3, #1
 80156a2:	61bb      	str	r3, [r7, #24]
        break;
 80156a4:	e005      	b.n	80156b2 <etharp_query+0x1de>
      }
      p = p->next;
 80156a6:	69fb      	ldr	r3, [r7, #28]
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	61fb      	str	r3, [r7, #28]
    while (p) {
 80156ac:	69fb      	ldr	r3, [r7, #28]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d1df      	bne.n	8015672 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80156b2:	69bb      	ldr	r3, [r7, #24]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d007      	beq.n	80156c8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80156b8:	687a      	ldr	r2, [r7, #4]
 80156ba:	f44f 7120 	mov.w	r1, #640	; 0x280
 80156be:	200e      	movs	r0, #14
 80156c0:	f7f9 fcf8 	bl	800f0b4 <pbuf_clone>
 80156c4:	61f8      	str	r0, [r7, #28]
 80156c6:	e004      	b.n	80156d2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80156cc:	69f8      	ldr	r0, [r7, #28]
 80156ce:	f7f9 fb2f 	bl	800ed30 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80156d2:	69fb      	ldr	r3, [r7, #28]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d021      	beq.n	801571c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80156d8:	7c7a      	ldrb	r2, [r7, #17]
 80156da:	4918      	ldr	r1, [pc, #96]	; (801573c <etharp_query+0x268>)
 80156dc:	4613      	mov	r3, r2
 80156de:	005b      	lsls	r3, r3, #1
 80156e0:	4413      	add	r3, r2
 80156e2:	00db      	lsls	r3, r3, #3
 80156e4:	440b      	add	r3, r1
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d00a      	beq.n	8015702 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80156ec:	7c7a      	ldrb	r2, [r7, #17]
 80156ee:	4913      	ldr	r1, [pc, #76]	; (801573c <etharp_query+0x268>)
 80156f0:	4613      	mov	r3, r2
 80156f2:	005b      	lsls	r3, r3, #1
 80156f4:	4413      	add	r3, r2
 80156f6:	00db      	lsls	r3, r3, #3
 80156f8:	440b      	add	r3, r1
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	4618      	mov	r0, r3
 80156fe:	f7f9 fa71 	bl	800ebe4 <pbuf_free>
      }
      arp_table[i].q = p;
 8015702:	7c7a      	ldrb	r2, [r7, #17]
 8015704:	490d      	ldr	r1, [pc, #52]	; (801573c <etharp_query+0x268>)
 8015706:	4613      	mov	r3, r2
 8015708:	005b      	lsls	r3, r3, #1
 801570a:	4413      	add	r3, r2
 801570c:	00db      	lsls	r3, r3, #3
 801570e:	440b      	add	r3, r1
 8015710:	69fa      	ldr	r2, [r7, #28]
 8015712:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015714:	2300      	movs	r3, #0
 8015716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801571a:	e002      	b.n	8015722 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801571c:	23ff      	movs	r3, #255	; 0xff
 801571e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015722:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015726:	4618      	mov	r0, r3
 8015728:	3728      	adds	r7, #40	; 0x28
 801572a:	46bd      	mov	sp, r7
 801572c:	bd80      	pop	{r7, pc}
 801572e:	bf00      	nop
 8015730:	0801a9b0 	.word	0x0801a9b0
 8015734:	0801ab5c 	.word	0x0801ab5c
 8015738:	0801aa28 	.word	0x0801aa28
 801573c:	200110c4 	.word	0x200110c4
 8015740:	0801ab6c 	.word	0x0801ab6c
 8015744:	0801ab50 	.word	0x0801ab50
 8015748:	200111b4 	.word	0x200111b4
 801574c:	0801ab94 	.word	0x0801ab94

08015750 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015750:	b580      	push	{r7, lr}
 8015752:	b08a      	sub	sp, #40	; 0x28
 8015754:	af02      	add	r7, sp, #8
 8015756:	60f8      	str	r0, [r7, #12]
 8015758:	60b9      	str	r1, [r7, #8]
 801575a:	607a      	str	r2, [r7, #4]
 801575c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801575e:	2300      	movs	r3, #0
 8015760:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	2b00      	cmp	r3, #0
 8015766:	d106      	bne.n	8015776 <etharp_raw+0x26>
 8015768:	4b3a      	ldr	r3, [pc, #232]	; (8015854 <etharp_raw+0x104>)
 801576a:	f240 4257 	movw	r2, #1111	; 0x457
 801576e:	493a      	ldr	r1, [pc, #232]	; (8015858 <etharp_raw+0x108>)
 8015770:	483a      	ldr	r0, [pc, #232]	; (801585c <etharp_raw+0x10c>)
 8015772:	f001 fd63 	bl	801723c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015776:	f44f 7220 	mov.w	r2, #640	; 0x280
 801577a:	211c      	movs	r1, #28
 801577c:	200e      	movs	r0, #14
 801577e:	f7f8 ff4d 	bl	800e61c <pbuf_alloc>
 8015782:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015784:	69bb      	ldr	r3, [r7, #24]
 8015786:	2b00      	cmp	r3, #0
 8015788:	d102      	bne.n	8015790 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801578a:	f04f 33ff 	mov.w	r3, #4294967295
 801578e:	e05d      	b.n	801584c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015790:	69bb      	ldr	r3, [r7, #24]
 8015792:	895b      	ldrh	r3, [r3, #10]
 8015794:	2b1b      	cmp	r3, #27
 8015796:	d806      	bhi.n	80157a6 <etharp_raw+0x56>
 8015798:	4b2e      	ldr	r3, [pc, #184]	; (8015854 <etharp_raw+0x104>)
 801579a:	f240 4262 	movw	r2, #1122	; 0x462
 801579e:	4930      	ldr	r1, [pc, #192]	; (8015860 <etharp_raw+0x110>)
 80157a0:	482e      	ldr	r0, [pc, #184]	; (801585c <etharp_raw+0x10c>)
 80157a2:	f001 fd4b 	bl	801723c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80157a6:	69bb      	ldr	r3, [r7, #24]
 80157a8:	685b      	ldr	r3, [r3, #4]
 80157aa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80157ac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80157ae:	4618      	mov	r0, r3
 80157b0:	f7f7 fe26 	bl	800d400 <lwip_htons>
 80157b4:	4603      	mov	r3, r0
 80157b6:	461a      	mov	r2, r3
 80157b8:	697b      	ldr	r3, [r7, #20]
 80157ba:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80157c2:	2b06      	cmp	r3, #6
 80157c4:	d006      	beq.n	80157d4 <etharp_raw+0x84>
 80157c6:	4b23      	ldr	r3, [pc, #140]	; (8015854 <etharp_raw+0x104>)
 80157c8:	f240 4269 	movw	r2, #1129	; 0x469
 80157cc:	4925      	ldr	r1, [pc, #148]	; (8015864 <etharp_raw+0x114>)
 80157ce:	4823      	ldr	r0, [pc, #140]	; (801585c <etharp_raw+0x10c>)
 80157d0:	f001 fd34 	bl	801723c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80157d4:	697b      	ldr	r3, [r7, #20]
 80157d6:	3308      	adds	r3, #8
 80157d8:	2206      	movs	r2, #6
 80157da:	6839      	ldr	r1, [r7, #0]
 80157dc:	4618      	mov	r0, r3
 80157de:	f001 fd17 	bl	8017210 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80157e2:	697b      	ldr	r3, [r7, #20]
 80157e4:	3312      	adds	r3, #18
 80157e6:	2206      	movs	r2, #6
 80157e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80157ea:	4618      	mov	r0, r3
 80157ec:	f001 fd10 	bl	8017210 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80157f0:	697b      	ldr	r3, [r7, #20]
 80157f2:	330e      	adds	r3, #14
 80157f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80157f6:	6812      	ldr	r2, [r2, #0]
 80157f8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80157fa:	697b      	ldr	r3, [r7, #20]
 80157fc:	3318      	adds	r3, #24
 80157fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015800:	6812      	ldr	r2, [r2, #0]
 8015802:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015804:	697b      	ldr	r3, [r7, #20]
 8015806:	2200      	movs	r2, #0
 8015808:	701a      	strb	r2, [r3, #0]
 801580a:	2200      	movs	r2, #0
 801580c:	f042 0201 	orr.w	r2, r2, #1
 8015810:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015812:	697b      	ldr	r3, [r7, #20]
 8015814:	2200      	movs	r2, #0
 8015816:	f042 0208 	orr.w	r2, r2, #8
 801581a:	709a      	strb	r2, [r3, #2]
 801581c:	2200      	movs	r2, #0
 801581e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015820:	697b      	ldr	r3, [r7, #20]
 8015822:	2206      	movs	r2, #6
 8015824:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015826:	697b      	ldr	r3, [r7, #20]
 8015828:	2204      	movs	r2, #4
 801582a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801582c:	f640 0306 	movw	r3, #2054	; 0x806
 8015830:	9300      	str	r3, [sp, #0]
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	68ba      	ldr	r2, [r7, #8]
 8015836:	69b9      	ldr	r1, [r7, #24]
 8015838:	68f8      	ldr	r0, [r7, #12]
 801583a:	f001 fb7b 	bl	8016f34 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801583e:	69b8      	ldr	r0, [r7, #24]
 8015840:	f7f9 f9d0 	bl	800ebe4 <pbuf_free>
  p = NULL;
 8015844:	2300      	movs	r3, #0
 8015846:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015848:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801584c:	4618      	mov	r0, r3
 801584e:	3720      	adds	r7, #32
 8015850:	46bd      	mov	sp, r7
 8015852:	bd80      	pop	{r7, pc}
 8015854:	0801a9b0 	.word	0x0801a9b0
 8015858:	0801ab00 	.word	0x0801ab00
 801585c:	0801aa28 	.word	0x0801aa28
 8015860:	0801abb0 	.word	0x0801abb0
 8015864:	0801abe4 	.word	0x0801abe4

08015868 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015868:	b580      	push	{r7, lr}
 801586a:	b088      	sub	sp, #32
 801586c:	af04      	add	r7, sp, #16
 801586e:	60f8      	str	r0, [r7, #12]
 8015870:	60b9      	str	r1, [r7, #8]
 8015872:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015884:	2201      	movs	r2, #1
 8015886:	9203      	str	r2, [sp, #12]
 8015888:	68ba      	ldr	r2, [r7, #8]
 801588a:	9202      	str	r2, [sp, #8]
 801588c:	4a06      	ldr	r2, [pc, #24]	; (80158a8 <etharp_request_dst+0x40>)
 801588e:	9201      	str	r2, [sp, #4]
 8015890:	9300      	str	r3, [sp, #0]
 8015892:	4603      	mov	r3, r0
 8015894:	687a      	ldr	r2, [r7, #4]
 8015896:	68f8      	ldr	r0, [r7, #12]
 8015898:	f7ff ff5a 	bl	8015750 <etharp_raw>
 801589c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801589e:	4618      	mov	r0, r3
 80158a0:	3710      	adds	r7, #16
 80158a2:	46bd      	mov	sp, r7
 80158a4:	bd80      	pop	{r7, pc}
 80158a6:	bf00      	nop
 80158a8:	0801b228 	.word	0x0801b228

080158ac <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80158ac:	b580      	push	{r7, lr}
 80158ae:	b082      	sub	sp, #8
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	6078      	str	r0, [r7, #4]
 80158b4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80158b6:	4a05      	ldr	r2, [pc, #20]	; (80158cc <etharp_request+0x20>)
 80158b8:	6839      	ldr	r1, [r7, #0]
 80158ba:	6878      	ldr	r0, [r7, #4]
 80158bc:	f7ff ffd4 	bl	8015868 <etharp_request_dst>
 80158c0:	4603      	mov	r3, r0
}
 80158c2:	4618      	mov	r0, r3
 80158c4:	3708      	adds	r7, #8
 80158c6:	46bd      	mov	sp, r7
 80158c8:	bd80      	pop	{r7, pc}
 80158ca:	bf00      	nop
 80158cc:	0801b220 	.word	0x0801b220

080158d0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80158d0:	b580      	push	{r7, lr}
 80158d2:	b08e      	sub	sp, #56	; 0x38
 80158d4:	af04      	add	r7, sp, #16
 80158d6:	6078      	str	r0, [r7, #4]
 80158d8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80158da:	4b79      	ldr	r3, [pc, #484]	; (8015ac0 <icmp_input+0x1f0>)
 80158dc:	689b      	ldr	r3, [r3, #8]
 80158de:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80158e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158e2:	781b      	ldrb	r3, [r3, #0]
 80158e4:	f003 030f 	and.w	r3, r3, #15
 80158e8:	b2db      	uxtb	r3, r3
 80158ea:	009b      	lsls	r3, r3, #2
 80158ec:	b2db      	uxtb	r3, r3
 80158ee:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80158f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80158f2:	2b13      	cmp	r3, #19
 80158f4:	f240 80cd 	bls.w	8015a92 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	895b      	ldrh	r3, [r3, #10]
 80158fc:	2b03      	cmp	r3, #3
 80158fe:	f240 80ca 	bls.w	8015a96 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	685b      	ldr	r3, [r3, #4]
 8015906:	781b      	ldrb	r3, [r3, #0]
 8015908:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801590c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015910:	2b00      	cmp	r3, #0
 8015912:	f000 80b7 	beq.w	8015a84 <icmp_input+0x1b4>
 8015916:	2b08      	cmp	r3, #8
 8015918:	f040 80b7 	bne.w	8015a8a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801591c:	4b69      	ldr	r3, [pc, #420]	; (8015ac4 <icmp_input+0x1f4>)
 801591e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015920:	4b67      	ldr	r3, [pc, #412]	; (8015ac0 <icmp_input+0x1f0>)
 8015922:	695b      	ldr	r3, [r3, #20]
 8015924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015928:	2be0      	cmp	r3, #224	; 0xe0
 801592a:	f000 80bb 	beq.w	8015aa4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801592e:	4b64      	ldr	r3, [pc, #400]	; (8015ac0 <icmp_input+0x1f0>)
 8015930:	695b      	ldr	r3, [r3, #20]
 8015932:	4a63      	ldr	r2, [pc, #396]	; (8015ac0 <icmp_input+0x1f0>)
 8015934:	6812      	ldr	r2, [r2, #0]
 8015936:	4611      	mov	r1, r2
 8015938:	4618      	mov	r0, r3
 801593a:	f000 fbed 	bl	8016118 <ip4_addr_isbroadcast_u32>
 801593e:	4603      	mov	r3, r0
 8015940:	2b00      	cmp	r3, #0
 8015942:	f040 80b1 	bne.w	8015aa8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	891b      	ldrh	r3, [r3, #8]
 801594a:	2b07      	cmp	r3, #7
 801594c:	f240 80a5 	bls.w	8015a9a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015950:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015952:	330e      	adds	r3, #14
 8015954:	4619      	mov	r1, r3
 8015956:	6878      	ldr	r0, [r7, #4]
 8015958:	f7f9 f8ae 	bl	800eab8 <pbuf_add_header>
 801595c:	4603      	mov	r3, r0
 801595e:	2b00      	cmp	r3, #0
 8015960:	d04b      	beq.n	80159fa <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	891a      	ldrh	r2, [r3, #8]
 8015966:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015968:	4413      	add	r3, r2
 801596a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	891b      	ldrh	r3, [r3, #8]
 8015970:	8b7a      	ldrh	r2, [r7, #26]
 8015972:	429a      	cmp	r2, r3
 8015974:	f0c0 809a 	bcc.w	8015aac <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015978:	8b7b      	ldrh	r3, [r7, #26]
 801597a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801597e:	4619      	mov	r1, r3
 8015980:	200e      	movs	r0, #14
 8015982:	f7f8 fe4b 	bl	800e61c <pbuf_alloc>
 8015986:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015988:	697b      	ldr	r3, [r7, #20]
 801598a:	2b00      	cmp	r3, #0
 801598c:	f000 8090 	beq.w	8015ab0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015990:	697b      	ldr	r3, [r7, #20]
 8015992:	895b      	ldrh	r3, [r3, #10]
 8015994:	461a      	mov	r2, r3
 8015996:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015998:	3308      	adds	r3, #8
 801599a:	429a      	cmp	r2, r3
 801599c:	d203      	bcs.n	80159a6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801599e:	6978      	ldr	r0, [r7, #20]
 80159a0:	f7f9 f920 	bl	800ebe4 <pbuf_free>
          goto icmperr;
 80159a4:	e085      	b.n	8015ab2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80159a6:	697b      	ldr	r3, [r7, #20]
 80159a8:	685b      	ldr	r3, [r3, #4]
 80159aa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80159ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80159ae:	4618      	mov	r0, r3
 80159b0:	f001 fc2e 	bl	8017210 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80159b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80159b6:	4619      	mov	r1, r3
 80159b8:	6978      	ldr	r0, [r7, #20]
 80159ba:	f7f9 f88d 	bl	800ead8 <pbuf_remove_header>
 80159be:	4603      	mov	r3, r0
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d009      	beq.n	80159d8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80159c4:	4b40      	ldr	r3, [pc, #256]	; (8015ac8 <icmp_input+0x1f8>)
 80159c6:	22b6      	movs	r2, #182	; 0xb6
 80159c8:	4940      	ldr	r1, [pc, #256]	; (8015acc <icmp_input+0x1fc>)
 80159ca:	4841      	ldr	r0, [pc, #260]	; (8015ad0 <icmp_input+0x200>)
 80159cc:	f001 fc36 	bl	801723c <iprintf>
          pbuf_free(r);
 80159d0:	6978      	ldr	r0, [r7, #20]
 80159d2:	f7f9 f907 	bl	800ebe4 <pbuf_free>
          goto icmperr;
 80159d6:	e06c      	b.n	8015ab2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80159d8:	6879      	ldr	r1, [r7, #4]
 80159da:	6978      	ldr	r0, [r7, #20]
 80159dc:	f7f9 fa26 	bl	800ee2c <pbuf_copy>
 80159e0:	4603      	mov	r3, r0
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d003      	beq.n	80159ee <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80159e6:	6978      	ldr	r0, [r7, #20]
 80159e8:	f7f9 f8fc 	bl	800ebe4 <pbuf_free>
          goto icmperr;
 80159ec:	e061      	b.n	8015ab2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80159ee:	6878      	ldr	r0, [r7, #4]
 80159f0:	f7f9 f8f8 	bl	800ebe4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80159f4:	697b      	ldr	r3, [r7, #20]
 80159f6:	607b      	str	r3, [r7, #4]
 80159f8:	e00f      	b.n	8015a1a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80159fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80159fc:	330e      	adds	r3, #14
 80159fe:	4619      	mov	r1, r3
 8015a00:	6878      	ldr	r0, [r7, #4]
 8015a02:	f7f9 f869 	bl	800ead8 <pbuf_remove_header>
 8015a06:	4603      	mov	r3, r0
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d006      	beq.n	8015a1a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015a0c:	4b2e      	ldr	r3, [pc, #184]	; (8015ac8 <icmp_input+0x1f8>)
 8015a0e:	22c7      	movs	r2, #199	; 0xc7
 8015a10:	4930      	ldr	r1, [pc, #192]	; (8015ad4 <icmp_input+0x204>)
 8015a12:	482f      	ldr	r0, [pc, #188]	; (8015ad0 <icmp_input+0x200>)
 8015a14:	f001 fc12 	bl	801723c <iprintf>
          goto icmperr;
 8015a18:	e04b      	b.n	8015ab2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	685b      	ldr	r3, [r3, #4]
 8015a1e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015a20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a22:	4619      	mov	r1, r3
 8015a24:	6878      	ldr	r0, [r7, #4]
 8015a26:	f7f9 f847 	bl	800eab8 <pbuf_add_header>
 8015a2a:	4603      	mov	r3, r0
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d12b      	bne.n	8015a88 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	685b      	ldr	r3, [r3, #4]
 8015a34:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015a36:	69fb      	ldr	r3, [r7, #28]
 8015a38:	681a      	ldr	r2, [r3, #0]
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015a3e:	4b20      	ldr	r3, [pc, #128]	; (8015ac0 <icmp_input+0x1f0>)
 8015a40:	691a      	ldr	r2, [r3, #16]
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015a46:	693b      	ldr	r3, [r7, #16]
 8015a48:	2200      	movs	r2, #0
 8015a4a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015a4c:	693b      	ldr	r3, [r7, #16]
 8015a4e:	2200      	movs	r2, #0
 8015a50:	709a      	strb	r2, [r3, #2]
 8015a52:	2200      	movs	r2, #0
 8015a54:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	22ff      	movs	r2, #255	; 0xff
 8015a5a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	2200      	movs	r2, #0
 8015a60:	729a      	strb	r2, [r3, #10]
 8015a62:	2200      	movs	r2, #0
 8015a64:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015a66:	683b      	ldr	r3, [r7, #0]
 8015a68:	9302      	str	r3, [sp, #8]
 8015a6a:	2301      	movs	r3, #1
 8015a6c:	9301      	str	r3, [sp, #4]
 8015a6e:	2300      	movs	r3, #0
 8015a70:	9300      	str	r3, [sp, #0]
 8015a72:	23ff      	movs	r3, #255	; 0xff
 8015a74:	2200      	movs	r2, #0
 8015a76:	69f9      	ldr	r1, [r7, #28]
 8015a78:	6878      	ldr	r0, [r7, #4]
 8015a7a:	f000 fa75 	bl	8015f68 <ip4_output_if>
 8015a7e:	4603      	mov	r3, r0
 8015a80:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015a82:	e001      	b.n	8015a88 <icmp_input+0x1b8>
      break;
 8015a84:	bf00      	nop
 8015a86:	e000      	b.n	8015a8a <icmp_input+0x1ba>
      break;
 8015a88:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015a8a:	6878      	ldr	r0, [r7, #4]
 8015a8c:	f7f9 f8aa 	bl	800ebe4 <pbuf_free>
  return;
 8015a90:	e013      	b.n	8015aba <icmp_input+0x1ea>
    goto lenerr;
 8015a92:	bf00      	nop
 8015a94:	e002      	b.n	8015a9c <icmp_input+0x1cc>
    goto lenerr;
 8015a96:	bf00      	nop
 8015a98:	e000      	b.n	8015a9c <icmp_input+0x1cc>
        goto lenerr;
 8015a9a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015a9c:	6878      	ldr	r0, [r7, #4]
 8015a9e:	f7f9 f8a1 	bl	800ebe4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015aa2:	e00a      	b.n	8015aba <icmp_input+0x1ea>
        goto icmperr;
 8015aa4:	bf00      	nop
 8015aa6:	e004      	b.n	8015ab2 <icmp_input+0x1e2>
        goto icmperr;
 8015aa8:	bf00      	nop
 8015aaa:	e002      	b.n	8015ab2 <icmp_input+0x1e2>
          goto icmperr;
 8015aac:	bf00      	nop
 8015aae:	e000      	b.n	8015ab2 <icmp_input+0x1e2>
          goto icmperr;
 8015ab0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015ab2:	6878      	ldr	r0, [r7, #4]
 8015ab4:	f7f9 f896 	bl	800ebe4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015ab8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015aba:	3728      	adds	r7, #40	; 0x28
 8015abc:	46bd      	mov	sp, r7
 8015abe:	bd80      	pop	{r7, pc}
 8015ac0:	2000d910 	.word	0x2000d910
 8015ac4:	2000d924 	.word	0x2000d924
 8015ac8:	0801ac28 	.word	0x0801ac28
 8015acc:	0801ac60 	.word	0x0801ac60
 8015ad0:	0801ac98 	.word	0x0801ac98
 8015ad4:	0801acc0 	.word	0x0801acc0

08015ad8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	b082      	sub	sp, #8
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	6078      	str	r0, [r7, #4]
 8015ae0:	460b      	mov	r3, r1
 8015ae2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015ae4:	78fb      	ldrb	r3, [r7, #3]
 8015ae6:	461a      	mov	r2, r3
 8015ae8:	2103      	movs	r1, #3
 8015aea:	6878      	ldr	r0, [r7, #4]
 8015aec:	f000 f814 	bl	8015b18 <icmp_send_response>
}
 8015af0:	bf00      	nop
 8015af2:	3708      	adds	r7, #8
 8015af4:	46bd      	mov	sp, r7
 8015af6:	bd80      	pop	{r7, pc}

08015af8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b082      	sub	sp, #8
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	6078      	str	r0, [r7, #4]
 8015b00:	460b      	mov	r3, r1
 8015b02:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015b04:	78fb      	ldrb	r3, [r7, #3]
 8015b06:	461a      	mov	r2, r3
 8015b08:	210b      	movs	r1, #11
 8015b0a:	6878      	ldr	r0, [r7, #4]
 8015b0c:	f000 f804 	bl	8015b18 <icmp_send_response>
}
 8015b10:	bf00      	nop
 8015b12:	3708      	adds	r7, #8
 8015b14:	46bd      	mov	sp, r7
 8015b16:	bd80      	pop	{r7, pc}

08015b18 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015b18:	b580      	push	{r7, lr}
 8015b1a:	b08c      	sub	sp, #48	; 0x30
 8015b1c:	af04      	add	r7, sp, #16
 8015b1e:	6078      	str	r0, [r7, #4]
 8015b20:	460b      	mov	r3, r1
 8015b22:	70fb      	strb	r3, [r7, #3]
 8015b24:	4613      	mov	r3, r2
 8015b26:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015b28:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015b2c:	2124      	movs	r1, #36	; 0x24
 8015b2e:	2022      	movs	r0, #34	; 0x22
 8015b30:	f7f8 fd74 	bl	800e61c <pbuf_alloc>
 8015b34:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015b36:	69fb      	ldr	r3, [r7, #28]
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d04c      	beq.n	8015bd6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015b3c:	69fb      	ldr	r3, [r7, #28]
 8015b3e:	895b      	ldrh	r3, [r3, #10]
 8015b40:	2b23      	cmp	r3, #35	; 0x23
 8015b42:	d806      	bhi.n	8015b52 <icmp_send_response+0x3a>
 8015b44:	4b26      	ldr	r3, [pc, #152]	; (8015be0 <icmp_send_response+0xc8>)
 8015b46:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8015b4a:	4926      	ldr	r1, [pc, #152]	; (8015be4 <icmp_send_response+0xcc>)
 8015b4c:	4826      	ldr	r0, [pc, #152]	; (8015be8 <icmp_send_response+0xd0>)
 8015b4e:	f001 fb75 	bl	801723c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	685b      	ldr	r3, [r3, #4]
 8015b56:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015b58:	69fb      	ldr	r3, [r7, #28]
 8015b5a:	685b      	ldr	r3, [r3, #4]
 8015b5c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015b5e:	697b      	ldr	r3, [r7, #20]
 8015b60:	78fa      	ldrb	r2, [r7, #3]
 8015b62:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015b64:	697b      	ldr	r3, [r7, #20]
 8015b66:	78ba      	ldrb	r2, [r7, #2]
 8015b68:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015b6a:	697b      	ldr	r3, [r7, #20]
 8015b6c:	2200      	movs	r2, #0
 8015b6e:	711a      	strb	r2, [r3, #4]
 8015b70:	2200      	movs	r2, #0
 8015b72:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015b74:	697b      	ldr	r3, [r7, #20]
 8015b76:	2200      	movs	r2, #0
 8015b78:	719a      	strb	r2, [r3, #6]
 8015b7a:	2200      	movs	r2, #0
 8015b7c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015b7e:	69fb      	ldr	r3, [r7, #28]
 8015b80:	685b      	ldr	r3, [r3, #4]
 8015b82:	f103 0008 	add.w	r0, r3, #8
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	685b      	ldr	r3, [r3, #4]
 8015b8a:	221c      	movs	r2, #28
 8015b8c:	4619      	mov	r1, r3
 8015b8e:	f001 fb3f 	bl	8017210 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015b92:	69bb      	ldr	r3, [r7, #24]
 8015b94:	68db      	ldr	r3, [r3, #12]
 8015b96:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015b98:	f107 030c 	add.w	r3, r7, #12
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	f000 f825 	bl	8015bec <ip4_route>
 8015ba2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015ba4:	693b      	ldr	r3, [r7, #16]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d011      	beq.n	8015bce <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015baa:	697b      	ldr	r3, [r7, #20]
 8015bac:	2200      	movs	r2, #0
 8015bae:	709a      	strb	r2, [r3, #2]
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015bb4:	f107 020c 	add.w	r2, r7, #12
 8015bb8:	693b      	ldr	r3, [r7, #16]
 8015bba:	9302      	str	r3, [sp, #8]
 8015bbc:	2301      	movs	r3, #1
 8015bbe:	9301      	str	r3, [sp, #4]
 8015bc0:	2300      	movs	r3, #0
 8015bc2:	9300      	str	r3, [sp, #0]
 8015bc4:	23ff      	movs	r3, #255	; 0xff
 8015bc6:	2100      	movs	r1, #0
 8015bc8:	69f8      	ldr	r0, [r7, #28]
 8015bca:	f000 f9cd 	bl	8015f68 <ip4_output_if>
  }
  pbuf_free(q);
 8015bce:	69f8      	ldr	r0, [r7, #28]
 8015bd0:	f7f9 f808 	bl	800ebe4 <pbuf_free>
 8015bd4:	e000      	b.n	8015bd8 <icmp_send_response+0xc0>
    return;
 8015bd6:	bf00      	nop
}
 8015bd8:	3720      	adds	r7, #32
 8015bda:	46bd      	mov	sp, r7
 8015bdc:	bd80      	pop	{r7, pc}
 8015bde:	bf00      	nop
 8015be0:	0801ac28 	.word	0x0801ac28
 8015be4:	0801acf4 	.word	0x0801acf4
 8015be8:	0801ac98 	.word	0x0801ac98

08015bec <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015bec:	b480      	push	{r7}
 8015bee:	b085      	sub	sp, #20
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015bf4:	4b33      	ldr	r3, [pc, #204]	; (8015cc4 <ip4_route+0xd8>)
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	60fb      	str	r3, [r7, #12]
 8015bfa:	e036      	b.n	8015c6a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015c02:	f003 0301 	and.w	r3, r3, #1
 8015c06:	b2db      	uxtb	r3, r3
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d02b      	beq.n	8015c64 <ip4_route+0x78>
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015c12:	089b      	lsrs	r3, r3, #2
 8015c14:	f003 0301 	and.w	r3, r3, #1
 8015c18:	b2db      	uxtb	r3, r3
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d022      	beq.n	8015c64 <ip4_route+0x78>
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	3304      	adds	r3, #4
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d01d      	beq.n	8015c64 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	681a      	ldr	r2, [r3, #0]
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	3304      	adds	r3, #4
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	405a      	eors	r2, r3
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	3308      	adds	r3, #8
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	4013      	ands	r3, r2
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d101      	bne.n	8015c44 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	e038      	b.n	8015cb6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015c4a:	f003 0302 	and.w	r3, r3, #2
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d108      	bne.n	8015c64 <ip4_route+0x78>
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	681a      	ldr	r2, [r3, #0]
 8015c56:	68fb      	ldr	r3, [r7, #12]
 8015c58:	330c      	adds	r3, #12
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	429a      	cmp	r2, r3
 8015c5e:	d101      	bne.n	8015c64 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	e028      	b.n	8015cb6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	60fb      	str	r3, [r7, #12]
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d1c5      	bne.n	8015bfc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015c70:	4b15      	ldr	r3, [pc, #84]	; (8015cc8 <ip4_route+0xdc>)
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d01a      	beq.n	8015cae <ip4_route+0xc2>
 8015c78:	4b13      	ldr	r3, [pc, #76]	; (8015cc8 <ip4_route+0xdc>)
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015c80:	f003 0301 	and.w	r3, r3, #1
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d012      	beq.n	8015cae <ip4_route+0xc2>
 8015c88:	4b0f      	ldr	r3, [pc, #60]	; (8015cc8 <ip4_route+0xdc>)
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015c90:	f003 0304 	and.w	r3, r3, #4
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d00a      	beq.n	8015cae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015c98:	4b0b      	ldr	r3, [pc, #44]	; (8015cc8 <ip4_route+0xdc>)
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	3304      	adds	r3, #4
 8015c9e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d004      	beq.n	8015cae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	b2db      	uxtb	r3, r3
 8015caa:	2b7f      	cmp	r3, #127	; 0x7f
 8015cac:	d101      	bne.n	8015cb2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015cae:	2300      	movs	r3, #0
 8015cb0:	e001      	b.n	8015cb6 <ip4_route+0xca>
  }

  return netif_default;
 8015cb2:	4b05      	ldr	r3, [pc, #20]	; (8015cc8 <ip4_route+0xdc>)
 8015cb4:	681b      	ldr	r3, [r3, #0]
}
 8015cb6:	4618      	mov	r0, r3
 8015cb8:	3714      	adds	r7, #20
 8015cba:	46bd      	mov	sp, r7
 8015cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc0:	4770      	bx	lr
 8015cc2:	bf00      	nop
 8015cc4:	20011058 	.word	0x20011058
 8015cc8:	2001105c 	.word	0x2001105c

08015ccc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015ccc:	b580      	push	{r7, lr}
 8015cce:	b082      	sub	sp, #8
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015cda:	f003 0301 	and.w	r3, r3, #1
 8015cde:	b2db      	uxtb	r3, r3
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d016      	beq.n	8015d12 <ip4_input_accept+0x46>
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	3304      	adds	r3, #4
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d011      	beq.n	8015d12 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015cee:	4b0b      	ldr	r3, [pc, #44]	; (8015d1c <ip4_input_accept+0x50>)
 8015cf0:	695a      	ldr	r2, [r3, #20]
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	3304      	adds	r3, #4
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	429a      	cmp	r2, r3
 8015cfa:	d008      	beq.n	8015d0e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015cfc:	4b07      	ldr	r3, [pc, #28]	; (8015d1c <ip4_input_accept+0x50>)
 8015cfe:	695b      	ldr	r3, [r3, #20]
 8015d00:	6879      	ldr	r1, [r7, #4]
 8015d02:	4618      	mov	r0, r3
 8015d04:	f000 fa08 	bl	8016118 <ip4_addr_isbroadcast_u32>
 8015d08:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d001      	beq.n	8015d12 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015d0e:	2301      	movs	r3, #1
 8015d10:	e000      	b.n	8015d14 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015d12:	2300      	movs	r3, #0
}
 8015d14:	4618      	mov	r0, r3
 8015d16:	3708      	adds	r7, #8
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	bd80      	pop	{r7, pc}
 8015d1c:	2000d910 	.word	0x2000d910

08015d20 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015d20:	b580      	push	{r7, lr}
 8015d22:	b086      	sub	sp, #24
 8015d24:	af00      	add	r7, sp, #0
 8015d26:	6078      	str	r0, [r7, #4]
 8015d28:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	685b      	ldr	r3, [r3, #4]
 8015d2e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015d30:	697b      	ldr	r3, [r7, #20]
 8015d32:	781b      	ldrb	r3, [r3, #0]
 8015d34:	091b      	lsrs	r3, r3, #4
 8015d36:	b2db      	uxtb	r3, r3
 8015d38:	2b04      	cmp	r3, #4
 8015d3a:	d004      	beq.n	8015d46 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015d3c:	6878      	ldr	r0, [r7, #4]
 8015d3e:	f7f8 ff51 	bl	800ebe4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015d42:	2300      	movs	r3, #0
 8015d44:	e107      	b.n	8015f56 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015d46:	697b      	ldr	r3, [r7, #20]
 8015d48:	781b      	ldrb	r3, [r3, #0]
 8015d4a:	f003 030f 	and.w	r3, r3, #15
 8015d4e:	b2db      	uxtb	r3, r3
 8015d50:	009b      	lsls	r3, r3, #2
 8015d52:	b2db      	uxtb	r3, r3
 8015d54:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015d56:	697b      	ldr	r3, [r7, #20]
 8015d58:	885b      	ldrh	r3, [r3, #2]
 8015d5a:	b29b      	uxth	r3, r3
 8015d5c:	4618      	mov	r0, r3
 8015d5e:	f7f7 fb4f 	bl	800d400 <lwip_htons>
 8015d62:	4603      	mov	r3, r0
 8015d64:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	891b      	ldrh	r3, [r3, #8]
 8015d6a:	89ba      	ldrh	r2, [r7, #12]
 8015d6c:	429a      	cmp	r2, r3
 8015d6e:	d204      	bcs.n	8015d7a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015d70:	89bb      	ldrh	r3, [r7, #12]
 8015d72:	4619      	mov	r1, r3
 8015d74:	6878      	ldr	r0, [r7, #4]
 8015d76:	f7f8 fdaf 	bl	800e8d8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	895b      	ldrh	r3, [r3, #10]
 8015d7e:	89fa      	ldrh	r2, [r7, #14]
 8015d80:	429a      	cmp	r2, r3
 8015d82:	d807      	bhi.n	8015d94 <ip4_input+0x74>
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	891b      	ldrh	r3, [r3, #8]
 8015d88:	89ba      	ldrh	r2, [r7, #12]
 8015d8a:	429a      	cmp	r2, r3
 8015d8c:	d802      	bhi.n	8015d94 <ip4_input+0x74>
 8015d8e:	89fb      	ldrh	r3, [r7, #14]
 8015d90:	2b13      	cmp	r3, #19
 8015d92:	d804      	bhi.n	8015d9e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015d94:	6878      	ldr	r0, [r7, #4]
 8015d96:	f7f8 ff25 	bl	800ebe4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	e0db      	b.n	8015f56 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015d9e:	697b      	ldr	r3, [r7, #20]
 8015da0:	691b      	ldr	r3, [r3, #16]
 8015da2:	4a6f      	ldr	r2, [pc, #444]	; (8015f60 <ip4_input+0x240>)
 8015da4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015da6:	697b      	ldr	r3, [r7, #20]
 8015da8:	68db      	ldr	r3, [r3, #12]
 8015daa:	4a6d      	ldr	r2, [pc, #436]	; (8015f60 <ip4_input+0x240>)
 8015dac:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015dae:	4b6c      	ldr	r3, [pc, #432]	; (8015f60 <ip4_input+0x240>)
 8015db0:	695b      	ldr	r3, [r3, #20]
 8015db2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015db6:	2be0      	cmp	r3, #224	; 0xe0
 8015db8:	d112      	bne.n	8015de0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015dba:	683b      	ldr	r3, [r7, #0]
 8015dbc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015dc0:	f003 0301 	and.w	r3, r3, #1
 8015dc4:	b2db      	uxtb	r3, r3
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d007      	beq.n	8015dda <ip4_input+0xba>
 8015dca:	683b      	ldr	r3, [r7, #0]
 8015dcc:	3304      	adds	r3, #4
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d002      	beq.n	8015dda <ip4_input+0xba>
      netif = inp;
 8015dd4:	683b      	ldr	r3, [r7, #0]
 8015dd6:	613b      	str	r3, [r7, #16]
 8015dd8:	e02a      	b.n	8015e30 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015dda:	2300      	movs	r3, #0
 8015ddc:	613b      	str	r3, [r7, #16]
 8015dde:	e027      	b.n	8015e30 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015de0:	6838      	ldr	r0, [r7, #0]
 8015de2:	f7ff ff73 	bl	8015ccc <ip4_input_accept>
 8015de6:	4603      	mov	r3, r0
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d002      	beq.n	8015df2 <ip4_input+0xd2>
      netif = inp;
 8015dec:	683b      	ldr	r3, [r7, #0]
 8015dee:	613b      	str	r3, [r7, #16]
 8015df0:	e01e      	b.n	8015e30 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015df2:	2300      	movs	r3, #0
 8015df4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015df6:	4b5a      	ldr	r3, [pc, #360]	; (8015f60 <ip4_input+0x240>)
 8015df8:	695b      	ldr	r3, [r3, #20]
 8015dfa:	b2db      	uxtb	r3, r3
 8015dfc:	2b7f      	cmp	r3, #127	; 0x7f
 8015dfe:	d017      	beq.n	8015e30 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015e00:	4b58      	ldr	r3, [pc, #352]	; (8015f64 <ip4_input+0x244>)
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	613b      	str	r3, [r7, #16]
 8015e06:	e00e      	b.n	8015e26 <ip4_input+0x106>
          if (netif == inp) {
 8015e08:	693a      	ldr	r2, [r7, #16]
 8015e0a:	683b      	ldr	r3, [r7, #0]
 8015e0c:	429a      	cmp	r2, r3
 8015e0e:	d006      	beq.n	8015e1e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015e10:	6938      	ldr	r0, [r7, #16]
 8015e12:	f7ff ff5b 	bl	8015ccc <ip4_input_accept>
 8015e16:	4603      	mov	r3, r0
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d108      	bne.n	8015e2e <ip4_input+0x10e>
 8015e1c:	e000      	b.n	8015e20 <ip4_input+0x100>
            continue;
 8015e1e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015e20:	693b      	ldr	r3, [r7, #16]
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	613b      	str	r3, [r7, #16]
 8015e26:	693b      	ldr	r3, [r7, #16]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d1ed      	bne.n	8015e08 <ip4_input+0xe8>
 8015e2c:	e000      	b.n	8015e30 <ip4_input+0x110>
            break;
 8015e2e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015e30:	4b4b      	ldr	r3, [pc, #300]	; (8015f60 <ip4_input+0x240>)
 8015e32:	691b      	ldr	r3, [r3, #16]
 8015e34:	6839      	ldr	r1, [r7, #0]
 8015e36:	4618      	mov	r0, r3
 8015e38:	f000 f96e 	bl	8016118 <ip4_addr_isbroadcast_u32>
 8015e3c:	4603      	mov	r3, r0
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d105      	bne.n	8015e4e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015e42:	4b47      	ldr	r3, [pc, #284]	; (8015f60 <ip4_input+0x240>)
 8015e44:	691b      	ldr	r3, [r3, #16]
 8015e46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015e4a:	2be0      	cmp	r3, #224	; 0xe0
 8015e4c:	d104      	bne.n	8015e58 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015e4e:	6878      	ldr	r0, [r7, #4]
 8015e50:	f7f8 fec8 	bl	800ebe4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015e54:	2300      	movs	r3, #0
 8015e56:	e07e      	b.n	8015f56 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015e58:	693b      	ldr	r3, [r7, #16]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d104      	bne.n	8015e68 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015e5e:	6878      	ldr	r0, [r7, #4]
 8015e60:	f7f8 fec0 	bl	800ebe4 <pbuf_free>
    return ERR_OK;
 8015e64:	2300      	movs	r3, #0
 8015e66:	e076      	b.n	8015f56 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015e68:	697b      	ldr	r3, [r7, #20]
 8015e6a:	88db      	ldrh	r3, [r3, #6]
 8015e6c:	b29b      	uxth	r3, r3
 8015e6e:	461a      	mov	r2, r3
 8015e70:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015e74:	4013      	ands	r3, r2
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d00b      	beq.n	8015e92 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015e7a:	6878      	ldr	r0, [r7, #4]
 8015e7c:	f000 fc92 	bl	80167a4 <ip4_reass>
 8015e80:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d101      	bne.n	8015e8c <ip4_input+0x16c>
      return ERR_OK;
 8015e88:	2300      	movs	r3, #0
 8015e8a:	e064      	b.n	8015f56 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	685b      	ldr	r3, [r3, #4]
 8015e90:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015e92:	4a33      	ldr	r2, [pc, #204]	; (8015f60 <ip4_input+0x240>)
 8015e94:	693b      	ldr	r3, [r7, #16]
 8015e96:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015e98:	4a31      	ldr	r2, [pc, #196]	; (8015f60 <ip4_input+0x240>)
 8015e9a:	683b      	ldr	r3, [r7, #0]
 8015e9c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015e9e:	4a30      	ldr	r2, [pc, #192]	; (8015f60 <ip4_input+0x240>)
 8015ea0:	697b      	ldr	r3, [r7, #20]
 8015ea2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015ea4:	697b      	ldr	r3, [r7, #20]
 8015ea6:	781b      	ldrb	r3, [r3, #0]
 8015ea8:	f003 030f 	and.w	r3, r3, #15
 8015eac:	b2db      	uxtb	r3, r3
 8015eae:	009b      	lsls	r3, r3, #2
 8015eb0:	b2db      	uxtb	r3, r3
 8015eb2:	b29a      	uxth	r2, r3
 8015eb4:	4b2a      	ldr	r3, [pc, #168]	; (8015f60 <ip4_input+0x240>)
 8015eb6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015eb8:	89fb      	ldrh	r3, [r7, #14]
 8015eba:	4619      	mov	r1, r3
 8015ebc:	6878      	ldr	r0, [r7, #4]
 8015ebe:	f7f8 fe0b 	bl	800ead8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015ec2:	697b      	ldr	r3, [r7, #20]
 8015ec4:	7a5b      	ldrb	r3, [r3, #9]
 8015ec6:	2b11      	cmp	r3, #17
 8015ec8:	d006      	beq.n	8015ed8 <ip4_input+0x1b8>
 8015eca:	2b11      	cmp	r3, #17
 8015ecc:	dc13      	bgt.n	8015ef6 <ip4_input+0x1d6>
 8015ece:	2b01      	cmp	r3, #1
 8015ed0:	d00c      	beq.n	8015eec <ip4_input+0x1cc>
 8015ed2:	2b06      	cmp	r3, #6
 8015ed4:	d005      	beq.n	8015ee2 <ip4_input+0x1c2>
 8015ed6:	e00e      	b.n	8015ef6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015ed8:	6839      	ldr	r1, [r7, #0]
 8015eda:	6878      	ldr	r0, [r7, #4]
 8015edc:	f7fe fc68 	bl	80147b0 <udp_input>
        break;
 8015ee0:	e026      	b.n	8015f30 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015ee2:	6839      	ldr	r1, [r7, #0]
 8015ee4:	6878      	ldr	r0, [r7, #4]
 8015ee6:	f7fa fcb1 	bl	801084c <tcp_input>
        break;
 8015eea:	e021      	b.n	8015f30 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015eec:	6839      	ldr	r1, [r7, #0]
 8015eee:	6878      	ldr	r0, [r7, #4]
 8015ef0:	f7ff fcee 	bl	80158d0 <icmp_input>
        break;
 8015ef4:	e01c      	b.n	8015f30 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015ef6:	4b1a      	ldr	r3, [pc, #104]	; (8015f60 <ip4_input+0x240>)
 8015ef8:	695b      	ldr	r3, [r3, #20]
 8015efa:	6939      	ldr	r1, [r7, #16]
 8015efc:	4618      	mov	r0, r3
 8015efe:	f000 f90b 	bl	8016118 <ip4_addr_isbroadcast_u32>
 8015f02:	4603      	mov	r3, r0
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d10f      	bne.n	8015f28 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015f08:	4b15      	ldr	r3, [pc, #84]	; (8015f60 <ip4_input+0x240>)
 8015f0a:	695b      	ldr	r3, [r3, #20]
 8015f0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015f10:	2be0      	cmp	r3, #224	; 0xe0
 8015f12:	d009      	beq.n	8015f28 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015f14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015f18:	4619      	mov	r1, r3
 8015f1a:	6878      	ldr	r0, [r7, #4]
 8015f1c:	f7f8 fe4f 	bl	800ebbe <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015f20:	2102      	movs	r1, #2
 8015f22:	6878      	ldr	r0, [r7, #4]
 8015f24:	f7ff fdd8 	bl	8015ad8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015f28:	6878      	ldr	r0, [r7, #4]
 8015f2a:	f7f8 fe5b 	bl	800ebe4 <pbuf_free>
        break;
 8015f2e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015f30:	4b0b      	ldr	r3, [pc, #44]	; (8015f60 <ip4_input+0x240>)
 8015f32:	2200      	movs	r2, #0
 8015f34:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015f36:	4b0a      	ldr	r3, [pc, #40]	; (8015f60 <ip4_input+0x240>)
 8015f38:	2200      	movs	r2, #0
 8015f3a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015f3c:	4b08      	ldr	r3, [pc, #32]	; (8015f60 <ip4_input+0x240>)
 8015f3e:	2200      	movs	r2, #0
 8015f40:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015f42:	4b07      	ldr	r3, [pc, #28]	; (8015f60 <ip4_input+0x240>)
 8015f44:	2200      	movs	r2, #0
 8015f46:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015f48:	4b05      	ldr	r3, [pc, #20]	; (8015f60 <ip4_input+0x240>)
 8015f4a:	2200      	movs	r2, #0
 8015f4c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015f4e:	4b04      	ldr	r3, [pc, #16]	; (8015f60 <ip4_input+0x240>)
 8015f50:	2200      	movs	r2, #0
 8015f52:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015f54:	2300      	movs	r3, #0
}
 8015f56:	4618      	mov	r0, r3
 8015f58:	3718      	adds	r7, #24
 8015f5a:	46bd      	mov	sp, r7
 8015f5c:	bd80      	pop	{r7, pc}
 8015f5e:	bf00      	nop
 8015f60:	2000d910 	.word	0x2000d910
 8015f64:	20011058 	.word	0x20011058

08015f68 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015f68:	b580      	push	{r7, lr}
 8015f6a:	b08a      	sub	sp, #40	; 0x28
 8015f6c:	af04      	add	r7, sp, #16
 8015f6e:	60f8      	str	r0, [r7, #12]
 8015f70:	60b9      	str	r1, [r7, #8]
 8015f72:	607a      	str	r2, [r7, #4]
 8015f74:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015f76:	68bb      	ldr	r3, [r7, #8]
 8015f78:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d009      	beq.n	8015f94 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015f80:	68bb      	ldr	r3, [r7, #8]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d003      	beq.n	8015f8e <ip4_output_if+0x26>
 8015f86:	68bb      	ldr	r3, [r7, #8]
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d102      	bne.n	8015f94 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f90:	3304      	adds	r3, #4
 8015f92:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015f94:	78fa      	ldrb	r2, [r7, #3]
 8015f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f98:	9302      	str	r3, [sp, #8]
 8015f9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015f9e:	9301      	str	r3, [sp, #4]
 8015fa0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015fa4:	9300      	str	r3, [sp, #0]
 8015fa6:	4613      	mov	r3, r2
 8015fa8:	687a      	ldr	r2, [r7, #4]
 8015faa:	6979      	ldr	r1, [r7, #20]
 8015fac:	68f8      	ldr	r0, [r7, #12]
 8015fae:	f000 f805 	bl	8015fbc <ip4_output_if_src>
 8015fb2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	3718      	adds	r7, #24
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	bd80      	pop	{r7, pc}

08015fbc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b088      	sub	sp, #32
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	60f8      	str	r0, [r7, #12]
 8015fc4:	60b9      	str	r1, [r7, #8]
 8015fc6:	607a      	str	r2, [r7, #4]
 8015fc8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	7b9b      	ldrb	r3, [r3, #14]
 8015fce:	2b01      	cmp	r3, #1
 8015fd0:	d006      	beq.n	8015fe0 <ip4_output_if_src+0x24>
 8015fd2:	4b4b      	ldr	r3, [pc, #300]	; (8016100 <ip4_output_if_src+0x144>)
 8015fd4:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015fd8:	494a      	ldr	r1, [pc, #296]	; (8016104 <ip4_output_if_src+0x148>)
 8015fda:	484b      	ldr	r0, [pc, #300]	; (8016108 <ip4_output_if_src+0x14c>)
 8015fdc:	f001 f92e 	bl	801723c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d060      	beq.n	80160a8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015fe6:	2314      	movs	r3, #20
 8015fe8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015fea:	2114      	movs	r1, #20
 8015fec:	68f8      	ldr	r0, [r7, #12]
 8015fee:	f7f8 fd63 	bl	800eab8 <pbuf_add_header>
 8015ff2:	4603      	mov	r3, r0
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d002      	beq.n	8015ffe <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015ff8:	f06f 0301 	mvn.w	r3, #1
 8015ffc:	e07c      	b.n	80160f8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	685b      	ldr	r3, [r3, #4]
 8016002:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	895b      	ldrh	r3, [r3, #10]
 8016008:	2b13      	cmp	r3, #19
 801600a:	d806      	bhi.n	801601a <ip4_output_if_src+0x5e>
 801600c:	4b3c      	ldr	r3, [pc, #240]	; (8016100 <ip4_output_if_src+0x144>)
 801600e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8016012:	493e      	ldr	r1, [pc, #248]	; (801610c <ip4_output_if_src+0x150>)
 8016014:	483c      	ldr	r0, [pc, #240]	; (8016108 <ip4_output_if_src+0x14c>)
 8016016:	f001 f911 	bl	801723c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801601a:	69fb      	ldr	r3, [r7, #28]
 801601c:	78fa      	ldrb	r2, [r7, #3]
 801601e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016020:	69fb      	ldr	r3, [r7, #28]
 8016022:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016026:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	681a      	ldr	r2, [r3, #0]
 801602c:	69fb      	ldr	r3, [r7, #28]
 801602e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016030:	8b7b      	ldrh	r3, [r7, #26]
 8016032:	089b      	lsrs	r3, r3, #2
 8016034:	b29b      	uxth	r3, r3
 8016036:	b2db      	uxtb	r3, r3
 8016038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801603c:	b2da      	uxtb	r2, r3
 801603e:	69fb      	ldr	r3, [r7, #28]
 8016040:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016042:	69fb      	ldr	r3, [r7, #28]
 8016044:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016048:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	891b      	ldrh	r3, [r3, #8]
 801604e:	4618      	mov	r0, r3
 8016050:	f7f7 f9d6 	bl	800d400 <lwip_htons>
 8016054:	4603      	mov	r3, r0
 8016056:	461a      	mov	r2, r3
 8016058:	69fb      	ldr	r3, [r7, #28]
 801605a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801605c:	69fb      	ldr	r3, [r7, #28]
 801605e:	2200      	movs	r2, #0
 8016060:	719a      	strb	r2, [r3, #6]
 8016062:	2200      	movs	r2, #0
 8016064:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016066:	4b2a      	ldr	r3, [pc, #168]	; (8016110 <ip4_output_if_src+0x154>)
 8016068:	881b      	ldrh	r3, [r3, #0]
 801606a:	4618      	mov	r0, r3
 801606c:	f7f7 f9c8 	bl	800d400 <lwip_htons>
 8016070:	4603      	mov	r3, r0
 8016072:	461a      	mov	r2, r3
 8016074:	69fb      	ldr	r3, [r7, #28]
 8016076:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016078:	4b25      	ldr	r3, [pc, #148]	; (8016110 <ip4_output_if_src+0x154>)
 801607a:	881b      	ldrh	r3, [r3, #0]
 801607c:	3301      	adds	r3, #1
 801607e:	b29a      	uxth	r2, r3
 8016080:	4b23      	ldr	r3, [pc, #140]	; (8016110 <ip4_output_if_src+0x154>)
 8016082:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016084:	68bb      	ldr	r3, [r7, #8]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d104      	bne.n	8016094 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801608a:	4b22      	ldr	r3, [pc, #136]	; (8016114 <ip4_output_if_src+0x158>)
 801608c:	681a      	ldr	r2, [r3, #0]
 801608e:	69fb      	ldr	r3, [r7, #28]
 8016090:	60da      	str	r2, [r3, #12]
 8016092:	e003      	b.n	801609c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016094:	68bb      	ldr	r3, [r7, #8]
 8016096:	681a      	ldr	r2, [r3, #0]
 8016098:	69fb      	ldr	r3, [r7, #28]
 801609a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801609c:	69fb      	ldr	r3, [r7, #28]
 801609e:	2200      	movs	r2, #0
 80160a0:	729a      	strb	r2, [r3, #10]
 80160a2:	2200      	movs	r2, #0
 80160a4:	72da      	strb	r2, [r3, #11]
 80160a6:	e00f      	b.n	80160c8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	895b      	ldrh	r3, [r3, #10]
 80160ac:	2b13      	cmp	r3, #19
 80160ae:	d802      	bhi.n	80160b6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80160b0:	f06f 0301 	mvn.w	r3, #1
 80160b4:	e020      	b.n	80160f8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	685b      	ldr	r3, [r3, #4]
 80160ba:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80160bc:	69fb      	ldr	r3, [r7, #28]
 80160be:	691b      	ldr	r3, [r3, #16]
 80160c0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80160c2:	f107 0314 	add.w	r3, r7, #20
 80160c6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80160c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d00c      	beq.n	80160ea <ip4_output_if_src+0x12e>
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	891a      	ldrh	r2, [r3, #8]
 80160d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80160d8:	429a      	cmp	r2, r3
 80160da:	d906      	bls.n	80160ea <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80160dc:	687a      	ldr	r2, [r7, #4]
 80160de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80160e0:	68f8      	ldr	r0, [r7, #12]
 80160e2:	f000 fd53 	bl	8016b8c <ip4_frag>
 80160e6:	4603      	mov	r3, r0
 80160e8:	e006      	b.n	80160f8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80160ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160ec:	695b      	ldr	r3, [r3, #20]
 80160ee:	687a      	ldr	r2, [r7, #4]
 80160f0:	68f9      	ldr	r1, [r7, #12]
 80160f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80160f4:	4798      	blx	r3
 80160f6:	4603      	mov	r3, r0
}
 80160f8:	4618      	mov	r0, r3
 80160fa:	3720      	adds	r7, #32
 80160fc:	46bd      	mov	sp, r7
 80160fe:	bd80      	pop	{r7, pc}
 8016100:	0801ad20 	.word	0x0801ad20
 8016104:	0801ad54 	.word	0x0801ad54
 8016108:	0801ad60 	.word	0x0801ad60
 801610c:	0801ad88 	.word	0x0801ad88
 8016110:	200111b6 	.word	0x200111b6
 8016114:	0801b21c 	.word	0x0801b21c

08016118 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016118:	b480      	push	{r7}
 801611a:	b085      	sub	sp, #20
 801611c:	af00      	add	r7, sp, #0
 801611e:	6078      	str	r0, [r7, #4]
 8016120:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	f1b3 3fff 	cmp.w	r3, #4294967295
 801612c:	d002      	beq.n	8016134 <ip4_addr_isbroadcast_u32+0x1c>
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d101      	bne.n	8016138 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016134:	2301      	movs	r3, #1
 8016136:	e02a      	b.n	801618e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016138:	683b      	ldr	r3, [r7, #0]
 801613a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801613e:	f003 0302 	and.w	r3, r3, #2
 8016142:	2b00      	cmp	r3, #0
 8016144:	d101      	bne.n	801614a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016146:	2300      	movs	r3, #0
 8016148:	e021      	b.n	801618e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801614a:	683b      	ldr	r3, [r7, #0]
 801614c:	3304      	adds	r3, #4
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	687a      	ldr	r2, [r7, #4]
 8016152:	429a      	cmp	r2, r3
 8016154:	d101      	bne.n	801615a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016156:	2300      	movs	r3, #0
 8016158:	e019      	b.n	801618e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801615a:	68fa      	ldr	r2, [r7, #12]
 801615c:	683b      	ldr	r3, [r7, #0]
 801615e:	3304      	adds	r3, #4
 8016160:	681b      	ldr	r3, [r3, #0]
 8016162:	405a      	eors	r2, r3
 8016164:	683b      	ldr	r3, [r7, #0]
 8016166:	3308      	adds	r3, #8
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	4013      	ands	r3, r2
 801616c:	2b00      	cmp	r3, #0
 801616e:	d10d      	bne.n	801618c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016170:	683b      	ldr	r3, [r7, #0]
 8016172:	3308      	adds	r3, #8
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	43da      	mvns	r2, r3
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801617c:	683b      	ldr	r3, [r7, #0]
 801617e:	3308      	adds	r3, #8
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016184:	429a      	cmp	r2, r3
 8016186:	d101      	bne.n	801618c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016188:	2301      	movs	r3, #1
 801618a:	e000      	b.n	801618e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801618c:	2300      	movs	r3, #0
  }
}
 801618e:	4618      	mov	r0, r3
 8016190:	3714      	adds	r7, #20
 8016192:	46bd      	mov	sp, r7
 8016194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016198:	4770      	bx	lr
	...

0801619c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801619c:	b580      	push	{r7, lr}
 801619e:	b084      	sub	sp, #16
 80161a0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80161a2:	2300      	movs	r3, #0
 80161a4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80161a6:	4b12      	ldr	r3, [pc, #72]	; (80161f0 <ip_reass_tmr+0x54>)
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80161ac:	e018      	b.n	80161e0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	7fdb      	ldrb	r3, [r3, #31]
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d00b      	beq.n	80161ce <ip_reass_tmr+0x32>
      r->timer--;
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	7fdb      	ldrb	r3, [r3, #31]
 80161ba:	3b01      	subs	r3, #1
 80161bc:	b2da      	uxtb	r2, r3
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	60fb      	str	r3, [r7, #12]
 80161cc:	e008      	b.n	80161e0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80161d2:	68fb      	ldr	r3, [r7, #12]
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80161d8:	68b9      	ldr	r1, [r7, #8]
 80161da:	6878      	ldr	r0, [r7, #4]
 80161dc:	f000 f80a 	bl	80161f4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d1e3      	bne.n	80161ae <ip_reass_tmr+0x12>
    }
  }
}
 80161e6:	bf00      	nop
 80161e8:	bf00      	nop
 80161ea:	3710      	adds	r7, #16
 80161ec:	46bd      	mov	sp, r7
 80161ee:	bd80      	pop	{r7, pc}
 80161f0:	200111b8 	.word	0x200111b8

080161f4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80161f4:	b580      	push	{r7, lr}
 80161f6:	b088      	sub	sp, #32
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	6078      	str	r0, [r7, #4]
 80161fc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80161fe:	2300      	movs	r3, #0
 8016200:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016202:	683a      	ldr	r2, [r7, #0]
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	429a      	cmp	r2, r3
 8016208:	d105      	bne.n	8016216 <ip_reass_free_complete_datagram+0x22>
 801620a:	4b45      	ldr	r3, [pc, #276]	; (8016320 <ip_reass_free_complete_datagram+0x12c>)
 801620c:	22ab      	movs	r2, #171	; 0xab
 801620e:	4945      	ldr	r1, [pc, #276]	; (8016324 <ip_reass_free_complete_datagram+0x130>)
 8016210:	4845      	ldr	r0, [pc, #276]	; (8016328 <ip_reass_free_complete_datagram+0x134>)
 8016212:	f001 f813 	bl	801723c <iprintf>
  if (prev != NULL) {
 8016216:	683b      	ldr	r3, [r7, #0]
 8016218:	2b00      	cmp	r3, #0
 801621a:	d00a      	beq.n	8016232 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801621c:	683b      	ldr	r3, [r7, #0]
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	687a      	ldr	r2, [r7, #4]
 8016222:	429a      	cmp	r2, r3
 8016224:	d005      	beq.n	8016232 <ip_reass_free_complete_datagram+0x3e>
 8016226:	4b3e      	ldr	r3, [pc, #248]	; (8016320 <ip_reass_free_complete_datagram+0x12c>)
 8016228:	22ad      	movs	r2, #173	; 0xad
 801622a:	4940      	ldr	r1, [pc, #256]	; (801632c <ip_reass_free_complete_datagram+0x138>)
 801622c:	483e      	ldr	r0, [pc, #248]	; (8016328 <ip_reass_free_complete_datagram+0x134>)
 801622e:	f001 f805 	bl	801723c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	685b      	ldr	r3, [r3, #4]
 8016236:	685b      	ldr	r3, [r3, #4]
 8016238:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801623a:	697b      	ldr	r3, [r7, #20]
 801623c:	889b      	ldrh	r3, [r3, #4]
 801623e:	b29b      	uxth	r3, r3
 8016240:	2b00      	cmp	r3, #0
 8016242:	d12a      	bne.n	801629a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	685b      	ldr	r3, [r3, #4]
 8016248:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801624a:	697b      	ldr	r3, [r7, #20]
 801624c:	681a      	ldr	r2, [r3, #0]
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016252:	69bb      	ldr	r3, [r7, #24]
 8016254:	6858      	ldr	r0, [r3, #4]
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	3308      	adds	r3, #8
 801625a:	2214      	movs	r2, #20
 801625c:	4619      	mov	r1, r3
 801625e:	f000 ffd7 	bl	8017210 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016262:	2101      	movs	r1, #1
 8016264:	69b8      	ldr	r0, [r7, #24]
 8016266:	f7ff fc47 	bl	8015af8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801626a:	69b8      	ldr	r0, [r7, #24]
 801626c:	f7f8 fd48 	bl	800ed00 <pbuf_clen>
 8016270:	4603      	mov	r3, r0
 8016272:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016274:	8bfa      	ldrh	r2, [r7, #30]
 8016276:	8a7b      	ldrh	r3, [r7, #18]
 8016278:	4413      	add	r3, r2
 801627a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801627e:	db05      	blt.n	801628c <ip_reass_free_complete_datagram+0x98>
 8016280:	4b27      	ldr	r3, [pc, #156]	; (8016320 <ip_reass_free_complete_datagram+0x12c>)
 8016282:	22bc      	movs	r2, #188	; 0xbc
 8016284:	492a      	ldr	r1, [pc, #168]	; (8016330 <ip_reass_free_complete_datagram+0x13c>)
 8016286:	4828      	ldr	r0, [pc, #160]	; (8016328 <ip_reass_free_complete_datagram+0x134>)
 8016288:	f000 ffd8 	bl	801723c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801628c:	8bfa      	ldrh	r2, [r7, #30]
 801628e:	8a7b      	ldrh	r3, [r7, #18]
 8016290:	4413      	add	r3, r2
 8016292:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016294:	69b8      	ldr	r0, [r7, #24]
 8016296:	f7f8 fca5 	bl	800ebe4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	685b      	ldr	r3, [r3, #4]
 801629e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80162a0:	e01f      	b.n	80162e2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80162a2:	69bb      	ldr	r3, [r7, #24]
 80162a4:	685b      	ldr	r3, [r3, #4]
 80162a6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80162a8:	69bb      	ldr	r3, [r7, #24]
 80162aa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80162ac:	697b      	ldr	r3, [r7, #20]
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80162b2:	68f8      	ldr	r0, [r7, #12]
 80162b4:	f7f8 fd24 	bl	800ed00 <pbuf_clen>
 80162b8:	4603      	mov	r3, r0
 80162ba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80162bc:	8bfa      	ldrh	r2, [r7, #30]
 80162be:	8a7b      	ldrh	r3, [r7, #18]
 80162c0:	4413      	add	r3, r2
 80162c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80162c6:	db05      	blt.n	80162d4 <ip_reass_free_complete_datagram+0xe0>
 80162c8:	4b15      	ldr	r3, [pc, #84]	; (8016320 <ip_reass_free_complete_datagram+0x12c>)
 80162ca:	22cc      	movs	r2, #204	; 0xcc
 80162cc:	4918      	ldr	r1, [pc, #96]	; (8016330 <ip_reass_free_complete_datagram+0x13c>)
 80162ce:	4816      	ldr	r0, [pc, #88]	; (8016328 <ip_reass_free_complete_datagram+0x134>)
 80162d0:	f000 ffb4 	bl	801723c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80162d4:	8bfa      	ldrh	r2, [r7, #30]
 80162d6:	8a7b      	ldrh	r3, [r7, #18]
 80162d8:	4413      	add	r3, r2
 80162da:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80162dc:	68f8      	ldr	r0, [r7, #12]
 80162de:	f7f8 fc81 	bl	800ebe4 <pbuf_free>
  while (p != NULL) {
 80162e2:	69bb      	ldr	r3, [r7, #24]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d1dc      	bne.n	80162a2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80162e8:	6839      	ldr	r1, [r7, #0]
 80162ea:	6878      	ldr	r0, [r7, #4]
 80162ec:	f000 f8c2 	bl	8016474 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80162f0:	4b10      	ldr	r3, [pc, #64]	; (8016334 <ip_reass_free_complete_datagram+0x140>)
 80162f2:	881b      	ldrh	r3, [r3, #0]
 80162f4:	8bfa      	ldrh	r2, [r7, #30]
 80162f6:	429a      	cmp	r2, r3
 80162f8:	d905      	bls.n	8016306 <ip_reass_free_complete_datagram+0x112>
 80162fa:	4b09      	ldr	r3, [pc, #36]	; (8016320 <ip_reass_free_complete_datagram+0x12c>)
 80162fc:	22d2      	movs	r2, #210	; 0xd2
 80162fe:	490e      	ldr	r1, [pc, #56]	; (8016338 <ip_reass_free_complete_datagram+0x144>)
 8016300:	4809      	ldr	r0, [pc, #36]	; (8016328 <ip_reass_free_complete_datagram+0x134>)
 8016302:	f000 ff9b 	bl	801723c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016306:	4b0b      	ldr	r3, [pc, #44]	; (8016334 <ip_reass_free_complete_datagram+0x140>)
 8016308:	881a      	ldrh	r2, [r3, #0]
 801630a:	8bfb      	ldrh	r3, [r7, #30]
 801630c:	1ad3      	subs	r3, r2, r3
 801630e:	b29a      	uxth	r2, r3
 8016310:	4b08      	ldr	r3, [pc, #32]	; (8016334 <ip_reass_free_complete_datagram+0x140>)
 8016312:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016314:	8bfb      	ldrh	r3, [r7, #30]
}
 8016316:	4618      	mov	r0, r3
 8016318:	3720      	adds	r7, #32
 801631a:	46bd      	mov	sp, r7
 801631c:	bd80      	pop	{r7, pc}
 801631e:	bf00      	nop
 8016320:	0801adb8 	.word	0x0801adb8
 8016324:	0801adf4 	.word	0x0801adf4
 8016328:	0801ae00 	.word	0x0801ae00
 801632c:	0801ae28 	.word	0x0801ae28
 8016330:	0801ae3c 	.word	0x0801ae3c
 8016334:	200111bc 	.word	0x200111bc
 8016338:	0801ae5c 	.word	0x0801ae5c

0801633c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801633c:	b580      	push	{r7, lr}
 801633e:	b08a      	sub	sp, #40	; 0x28
 8016340:	af00      	add	r7, sp, #0
 8016342:	6078      	str	r0, [r7, #4]
 8016344:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016346:	2300      	movs	r3, #0
 8016348:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801634a:	2300      	movs	r3, #0
 801634c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801634e:	2300      	movs	r3, #0
 8016350:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016352:	2300      	movs	r3, #0
 8016354:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016356:	2300      	movs	r3, #0
 8016358:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801635a:	4b28      	ldr	r3, [pc, #160]	; (80163fc <ip_reass_remove_oldest_datagram+0xc0>)
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016360:	e030      	b.n	80163c4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016364:	695a      	ldr	r2, [r3, #20]
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	68db      	ldr	r3, [r3, #12]
 801636a:	429a      	cmp	r2, r3
 801636c:	d10c      	bne.n	8016388 <ip_reass_remove_oldest_datagram+0x4c>
 801636e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016370:	699a      	ldr	r2, [r3, #24]
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	691b      	ldr	r3, [r3, #16]
 8016376:	429a      	cmp	r2, r3
 8016378:	d106      	bne.n	8016388 <ip_reass_remove_oldest_datagram+0x4c>
 801637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801637c:	899a      	ldrh	r2, [r3, #12]
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	889b      	ldrh	r3, [r3, #4]
 8016382:	b29b      	uxth	r3, r3
 8016384:	429a      	cmp	r2, r3
 8016386:	d014      	beq.n	80163b2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016388:	693b      	ldr	r3, [r7, #16]
 801638a:	3301      	adds	r3, #1
 801638c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801638e:	6a3b      	ldr	r3, [r7, #32]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d104      	bne.n	801639e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016396:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016398:	69fb      	ldr	r3, [r7, #28]
 801639a:	61bb      	str	r3, [r7, #24]
 801639c:	e009      	b.n	80163b2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163a0:	7fda      	ldrb	r2, [r3, #31]
 80163a2:	6a3b      	ldr	r3, [r7, #32]
 80163a4:	7fdb      	ldrb	r3, [r3, #31]
 80163a6:	429a      	cmp	r2, r3
 80163a8:	d803      	bhi.n	80163b2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80163aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163ac:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80163ae:	69fb      	ldr	r3, [r7, #28]
 80163b0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80163b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d001      	beq.n	80163be <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80163ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163bc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80163be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163c0:	681b      	ldr	r3, [r3, #0]
 80163c2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80163c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d1cb      	bne.n	8016362 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80163ca:	6a3b      	ldr	r3, [r7, #32]
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d008      	beq.n	80163e2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80163d0:	69b9      	ldr	r1, [r7, #24]
 80163d2:	6a38      	ldr	r0, [r7, #32]
 80163d4:	f7ff ff0e 	bl	80161f4 <ip_reass_free_complete_datagram>
 80163d8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80163da:	697a      	ldr	r2, [r7, #20]
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	4413      	add	r3, r2
 80163e0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80163e2:	697a      	ldr	r2, [r7, #20]
 80163e4:	683b      	ldr	r3, [r7, #0]
 80163e6:	429a      	cmp	r2, r3
 80163e8:	da02      	bge.n	80163f0 <ip_reass_remove_oldest_datagram+0xb4>
 80163ea:	693b      	ldr	r3, [r7, #16]
 80163ec:	2b01      	cmp	r3, #1
 80163ee:	dcac      	bgt.n	801634a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80163f0:	697b      	ldr	r3, [r7, #20]
}
 80163f2:	4618      	mov	r0, r3
 80163f4:	3728      	adds	r7, #40	; 0x28
 80163f6:	46bd      	mov	sp, r7
 80163f8:	bd80      	pop	{r7, pc}
 80163fa:	bf00      	nop
 80163fc:	200111b8 	.word	0x200111b8

08016400 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016400:	b580      	push	{r7, lr}
 8016402:	b084      	sub	sp, #16
 8016404:	af00      	add	r7, sp, #0
 8016406:	6078      	str	r0, [r7, #4]
 8016408:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801640a:	2004      	movs	r0, #4
 801640c:	f7f7 fcd0 	bl	800ddb0 <memp_malloc>
 8016410:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d110      	bne.n	801643a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016418:	6839      	ldr	r1, [r7, #0]
 801641a:	6878      	ldr	r0, [r7, #4]
 801641c:	f7ff ff8e 	bl	801633c <ip_reass_remove_oldest_datagram>
 8016420:	4602      	mov	r2, r0
 8016422:	683b      	ldr	r3, [r7, #0]
 8016424:	4293      	cmp	r3, r2
 8016426:	dc03      	bgt.n	8016430 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016428:	2004      	movs	r0, #4
 801642a:	f7f7 fcc1 	bl	800ddb0 <memp_malloc>
 801642e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d101      	bne.n	801643a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016436:	2300      	movs	r3, #0
 8016438:	e016      	b.n	8016468 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801643a:	2220      	movs	r2, #32
 801643c:	2100      	movs	r1, #0
 801643e:	68f8      	ldr	r0, [r7, #12]
 8016440:	f000 fef4 	bl	801722c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016444:	68fb      	ldr	r3, [r7, #12]
 8016446:	220f      	movs	r2, #15
 8016448:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801644a:	4b09      	ldr	r3, [pc, #36]	; (8016470 <ip_reass_enqueue_new_datagram+0x70>)
 801644c:	681a      	ldr	r2, [r3, #0]
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016452:	4a07      	ldr	r2, [pc, #28]	; (8016470 <ip_reass_enqueue_new_datagram+0x70>)
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	3308      	adds	r3, #8
 801645c:	2214      	movs	r2, #20
 801645e:	6879      	ldr	r1, [r7, #4]
 8016460:	4618      	mov	r0, r3
 8016462:	f000 fed5 	bl	8017210 <memcpy>
  return ipr;
 8016466:	68fb      	ldr	r3, [r7, #12]
}
 8016468:	4618      	mov	r0, r3
 801646a:	3710      	adds	r7, #16
 801646c:	46bd      	mov	sp, r7
 801646e:	bd80      	pop	{r7, pc}
 8016470:	200111b8 	.word	0x200111b8

08016474 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016474:	b580      	push	{r7, lr}
 8016476:	b082      	sub	sp, #8
 8016478:	af00      	add	r7, sp, #0
 801647a:	6078      	str	r0, [r7, #4]
 801647c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801647e:	4b10      	ldr	r3, [pc, #64]	; (80164c0 <ip_reass_dequeue_datagram+0x4c>)
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	687a      	ldr	r2, [r7, #4]
 8016484:	429a      	cmp	r2, r3
 8016486:	d104      	bne.n	8016492 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	4a0c      	ldr	r2, [pc, #48]	; (80164c0 <ip_reass_dequeue_datagram+0x4c>)
 801648e:	6013      	str	r3, [r2, #0]
 8016490:	e00d      	b.n	80164ae <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016492:	683b      	ldr	r3, [r7, #0]
 8016494:	2b00      	cmp	r3, #0
 8016496:	d106      	bne.n	80164a6 <ip_reass_dequeue_datagram+0x32>
 8016498:	4b0a      	ldr	r3, [pc, #40]	; (80164c4 <ip_reass_dequeue_datagram+0x50>)
 801649a:	f240 1245 	movw	r2, #325	; 0x145
 801649e:	490a      	ldr	r1, [pc, #40]	; (80164c8 <ip_reass_dequeue_datagram+0x54>)
 80164a0:	480a      	ldr	r0, [pc, #40]	; (80164cc <ip_reass_dequeue_datagram+0x58>)
 80164a2:	f000 fecb 	bl	801723c <iprintf>
    prev->next = ipr->next;
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	681a      	ldr	r2, [r3, #0]
 80164aa:	683b      	ldr	r3, [r7, #0]
 80164ac:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80164ae:	6879      	ldr	r1, [r7, #4]
 80164b0:	2004      	movs	r0, #4
 80164b2:	f7f7 fcf3 	bl	800de9c <memp_free>
}
 80164b6:	bf00      	nop
 80164b8:	3708      	adds	r7, #8
 80164ba:	46bd      	mov	sp, r7
 80164bc:	bd80      	pop	{r7, pc}
 80164be:	bf00      	nop
 80164c0:	200111b8 	.word	0x200111b8
 80164c4:	0801adb8 	.word	0x0801adb8
 80164c8:	0801ae80 	.word	0x0801ae80
 80164cc:	0801ae00 	.word	0x0801ae00

080164d0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80164d0:	b580      	push	{r7, lr}
 80164d2:	b08c      	sub	sp, #48	; 0x30
 80164d4:	af00      	add	r7, sp, #0
 80164d6:	60f8      	str	r0, [r7, #12]
 80164d8:	60b9      	str	r1, [r7, #8]
 80164da:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80164dc:	2300      	movs	r3, #0
 80164de:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80164e0:	2301      	movs	r3, #1
 80164e2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80164e4:	68bb      	ldr	r3, [r7, #8]
 80164e6:	685b      	ldr	r3, [r3, #4]
 80164e8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80164ea:	69fb      	ldr	r3, [r7, #28]
 80164ec:	885b      	ldrh	r3, [r3, #2]
 80164ee:	b29b      	uxth	r3, r3
 80164f0:	4618      	mov	r0, r3
 80164f2:	f7f6 ff85 	bl	800d400 <lwip_htons>
 80164f6:	4603      	mov	r3, r0
 80164f8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80164fa:	69fb      	ldr	r3, [r7, #28]
 80164fc:	781b      	ldrb	r3, [r3, #0]
 80164fe:	f003 030f 	and.w	r3, r3, #15
 8016502:	b2db      	uxtb	r3, r3
 8016504:	009b      	lsls	r3, r3, #2
 8016506:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016508:	7e7b      	ldrb	r3, [r7, #25]
 801650a:	b29b      	uxth	r3, r3
 801650c:	8b7a      	ldrh	r2, [r7, #26]
 801650e:	429a      	cmp	r2, r3
 8016510:	d202      	bcs.n	8016518 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016512:	f04f 33ff 	mov.w	r3, #4294967295
 8016516:	e135      	b.n	8016784 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016518:	7e7b      	ldrb	r3, [r7, #25]
 801651a:	b29b      	uxth	r3, r3
 801651c:	8b7a      	ldrh	r2, [r7, #26]
 801651e:	1ad3      	subs	r3, r2, r3
 8016520:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016522:	69fb      	ldr	r3, [r7, #28]
 8016524:	88db      	ldrh	r3, [r3, #6]
 8016526:	b29b      	uxth	r3, r3
 8016528:	4618      	mov	r0, r3
 801652a:	f7f6 ff69 	bl	800d400 <lwip_htons>
 801652e:	4603      	mov	r3, r0
 8016530:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016534:	b29b      	uxth	r3, r3
 8016536:	00db      	lsls	r3, r3, #3
 8016538:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801653a:	68bb      	ldr	r3, [r7, #8]
 801653c:	685b      	ldr	r3, [r3, #4]
 801653e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016542:	2200      	movs	r2, #0
 8016544:	701a      	strb	r2, [r3, #0]
 8016546:	2200      	movs	r2, #0
 8016548:	705a      	strb	r2, [r3, #1]
 801654a:	2200      	movs	r2, #0
 801654c:	709a      	strb	r2, [r3, #2]
 801654e:	2200      	movs	r2, #0
 8016550:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016554:	8afa      	ldrh	r2, [r7, #22]
 8016556:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016558:	8afa      	ldrh	r2, [r7, #22]
 801655a:	8b7b      	ldrh	r3, [r7, #26]
 801655c:	4413      	add	r3, r2
 801655e:	b29a      	uxth	r2, r3
 8016560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016562:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016566:	88db      	ldrh	r3, [r3, #6]
 8016568:	b29b      	uxth	r3, r3
 801656a:	8afa      	ldrh	r2, [r7, #22]
 801656c:	429a      	cmp	r2, r3
 801656e:	d902      	bls.n	8016576 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016570:	f04f 33ff 	mov.w	r3, #4294967295
 8016574:	e106      	b.n	8016784 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	685b      	ldr	r3, [r3, #4]
 801657a:	627b      	str	r3, [r7, #36]	; 0x24
 801657c:	e068      	b.n	8016650 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016580:	685b      	ldr	r3, [r3, #4]
 8016582:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016586:	889b      	ldrh	r3, [r3, #4]
 8016588:	b29a      	uxth	r2, r3
 801658a:	693b      	ldr	r3, [r7, #16]
 801658c:	889b      	ldrh	r3, [r3, #4]
 801658e:	b29b      	uxth	r3, r3
 8016590:	429a      	cmp	r2, r3
 8016592:	d235      	bcs.n	8016600 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016598:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801659a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801659c:	2b00      	cmp	r3, #0
 801659e:	d020      	beq.n	80165e2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80165a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165a2:	889b      	ldrh	r3, [r3, #4]
 80165a4:	b29a      	uxth	r2, r3
 80165a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165a8:	88db      	ldrh	r3, [r3, #6]
 80165aa:	b29b      	uxth	r3, r3
 80165ac:	429a      	cmp	r2, r3
 80165ae:	d307      	bcc.n	80165c0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80165b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165b2:	88db      	ldrh	r3, [r3, #6]
 80165b4:	b29a      	uxth	r2, r3
 80165b6:	693b      	ldr	r3, [r7, #16]
 80165b8:	889b      	ldrh	r3, [r3, #4]
 80165ba:	b29b      	uxth	r3, r3
 80165bc:	429a      	cmp	r2, r3
 80165be:	d902      	bls.n	80165c6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80165c0:	f04f 33ff 	mov.w	r3, #4294967295
 80165c4:	e0de      	b.n	8016784 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80165c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165c8:	68ba      	ldr	r2, [r7, #8]
 80165ca:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80165cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165ce:	88db      	ldrh	r3, [r3, #6]
 80165d0:	b29a      	uxth	r2, r3
 80165d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165d4:	889b      	ldrh	r3, [r3, #4]
 80165d6:	b29b      	uxth	r3, r3
 80165d8:	429a      	cmp	r2, r3
 80165da:	d03d      	beq.n	8016658 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80165dc:	2300      	movs	r3, #0
 80165de:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80165e0:	e03a      	b.n	8016658 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80165e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165e4:	88db      	ldrh	r3, [r3, #6]
 80165e6:	b29a      	uxth	r2, r3
 80165e8:	693b      	ldr	r3, [r7, #16]
 80165ea:	889b      	ldrh	r3, [r3, #4]
 80165ec:	b29b      	uxth	r3, r3
 80165ee:	429a      	cmp	r2, r3
 80165f0:	d902      	bls.n	80165f8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80165f2:	f04f 33ff 	mov.w	r3, #4294967295
 80165f6:	e0c5      	b.n	8016784 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	68ba      	ldr	r2, [r7, #8]
 80165fc:	605a      	str	r2, [r3, #4]
      break;
 80165fe:	e02b      	b.n	8016658 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016602:	889b      	ldrh	r3, [r3, #4]
 8016604:	b29a      	uxth	r2, r3
 8016606:	693b      	ldr	r3, [r7, #16]
 8016608:	889b      	ldrh	r3, [r3, #4]
 801660a:	b29b      	uxth	r3, r3
 801660c:	429a      	cmp	r2, r3
 801660e:	d102      	bne.n	8016616 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016610:	f04f 33ff 	mov.w	r3, #4294967295
 8016614:	e0b6      	b.n	8016784 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016618:	889b      	ldrh	r3, [r3, #4]
 801661a:	b29a      	uxth	r2, r3
 801661c:	693b      	ldr	r3, [r7, #16]
 801661e:	88db      	ldrh	r3, [r3, #6]
 8016620:	b29b      	uxth	r3, r3
 8016622:	429a      	cmp	r2, r3
 8016624:	d202      	bcs.n	801662c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016626:	f04f 33ff 	mov.w	r3, #4294967295
 801662a:	e0ab      	b.n	8016784 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801662e:	2b00      	cmp	r3, #0
 8016630:	d009      	beq.n	8016646 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016634:	88db      	ldrh	r3, [r3, #6]
 8016636:	b29a      	uxth	r2, r3
 8016638:	693b      	ldr	r3, [r7, #16]
 801663a:	889b      	ldrh	r3, [r3, #4]
 801663c:	b29b      	uxth	r3, r3
 801663e:	429a      	cmp	r2, r3
 8016640:	d001      	beq.n	8016646 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016642:	2300      	movs	r3, #0
 8016644:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016646:	693b      	ldr	r3, [r7, #16]
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801664c:	693b      	ldr	r3, [r7, #16]
 801664e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016652:	2b00      	cmp	r3, #0
 8016654:	d193      	bne.n	801657e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016656:	e000      	b.n	801665a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016658:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801665c:	2b00      	cmp	r3, #0
 801665e:	d12d      	bne.n	80166bc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016662:	2b00      	cmp	r3, #0
 8016664:	d01c      	beq.n	80166a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016668:	88db      	ldrh	r3, [r3, #6]
 801666a:	b29a      	uxth	r2, r3
 801666c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801666e:	889b      	ldrh	r3, [r3, #4]
 8016670:	b29b      	uxth	r3, r3
 8016672:	429a      	cmp	r2, r3
 8016674:	d906      	bls.n	8016684 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016676:	4b45      	ldr	r3, [pc, #276]	; (801678c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016678:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801667c:	4944      	ldr	r1, [pc, #272]	; (8016790 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801667e:	4845      	ldr	r0, [pc, #276]	; (8016794 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016680:	f000 fddc 	bl	801723c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016686:	68ba      	ldr	r2, [r7, #8]
 8016688:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801668a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801668c:	88db      	ldrh	r3, [r3, #6]
 801668e:	b29a      	uxth	r2, r3
 8016690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016692:	889b      	ldrh	r3, [r3, #4]
 8016694:	b29b      	uxth	r3, r3
 8016696:	429a      	cmp	r2, r3
 8016698:	d010      	beq.n	80166bc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801669a:	2300      	movs	r3, #0
 801669c:	623b      	str	r3, [r7, #32]
 801669e:	e00d      	b.n	80166bc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	685b      	ldr	r3, [r3, #4]
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d006      	beq.n	80166b6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80166a8:	4b38      	ldr	r3, [pc, #224]	; (801678c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80166aa:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80166ae:	493a      	ldr	r1, [pc, #232]	; (8016798 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80166b0:	4838      	ldr	r0, [pc, #224]	; (8016794 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80166b2:	f000 fdc3 	bl	801723c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	68ba      	ldr	r2, [r7, #8]
 80166ba:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d105      	bne.n	80166ce <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80166c2:	68fb      	ldr	r3, [r7, #12]
 80166c4:	7f9b      	ldrb	r3, [r3, #30]
 80166c6:	f003 0301 	and.w	r3, r3, #1
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d059      	beq.n	8016782 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80166ce:	6a3b      	ldr	r3, [r7, #32]
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d04f      	beq.n	8016774 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	685b      	ldr	r3, [r3, #4]
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d006      	beq.n	80166ea <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	685b      	ldr	r3, [r3, #4]
 80166e0:	685b      	ldr	r3, [r3, #4]
 80166e2:	889b      	ldrh	r3, [r3, #4]
 80166e4:	b29b      	uxth	r3, r3
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d002      	beq.n	80166f0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80166ea:	2300      	movs	r3, #0
 80166ec:	623b      	str	r3, [r7, #32]
 80166ee:	e041      	b.n	8016774 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80166f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166f2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80166f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80166fa:	e012      	b.n	8016722 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80166fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166fe:	685b      	ldr	r3, [r3, #4]
 8016700:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016704:	88db      	ldrh	r3, [r3, #6]
 8016706:	b29a      	uxth	r2, r3
 8016708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801670a:	889b      	ldrh	r3, [r3, #4]
 801670c:	b29b      	uxth	r3, r3
 801670e:	429a      	cmp	r2, r3
 8016710:	d002      	beq.n	8016718 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016712:	2300      	movs	r3, #0
 8016714:	623b      	str	r3, [r7, #32]
            break;
 8016716:	e007      	b.n	8016728 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801671a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801671c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016724:	2b00      	cmp	r3, #0
 8016726:	d1e9      	bne.n	80166fc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016728:	6a3b      	ldr	r3, [r7, #32]
 801672a:	2b00      	cmp	r3, #0
 801672c:	d022      	beq.n	8016774 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	685b      	ldr	r3, [r3, #4]
 8016732:	2b00      	cmp	r3, #0
 8016734:	d106      	bne.n	8016744 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016736:	4b15      	ldr	r3, [pc, #84]	; (801678c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016738:	f240 12df 	movw	r2, #479	; 0x1df
 801673c:	4917      	ldr	r1, [pc, #92]	; (801679c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801673e:	4815      	ldr	r0, [pc, #84]	; (8016794 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016740:	f000 fd7c 	bl	801723c <iprintf>
          LWIP_ASSERT("sanity check",
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	685b      	ldr	r3, [r3, #4]
 8016748:	685b      	ldr	r3, [r3, #4]
 801674a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801674c:	429a      	cmp	r2, r3
 801674e:	d106      	bne.n	801675e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016750:	4b0e      	ldr	r3, [pc, #56]	; (801678c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016752:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016756:	4911      	ldr	r1, [pc, #68]	; (801679c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016758:	480e      	ldr	r0, [pc, #56]	; (8016794 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801675a:	f000 fd6f 	bl	801723c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	2b00      	cmp	r3, #0
 8016764:	d006      	beq.n	8016774 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016766:	4b09      	ldr	r3, [pc, #36]	; (801678c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016768:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801676c:	490c      	ldr	r1, [pc, #48]	; (80167a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801676e:	4809      	ldr	r0, [pc, #36]	; (8016794 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016770:	f000 fd64 	bl	801723c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016774:	6a3b      	ldr	r3, [r7, #32]
 8016776:	2b00      	cmp	r3, #0
 8016778:	bf14      	ite	ne
 801677a:	2301      	movne	r3, #1
 801677c:	2300      	moveq	r3, #0
 801677e:	b2db      	uxtb	r3, r3
 8016780:	e000      	b.n	8016784 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016782:	2300      	movs	r3, #0
}
 8016784:	4618      	mov	r0, r3
 8016786:	3730      	adds	r7, #48	; 0x30
 8016788:	46bd      	mov	sp, r7
 801678a:	bd80      	pop	{r7, pc}
 801678c:	0801adb8 	.word	0x0801adb8
 8016790:	0801ae9c 	.word	0x0801ae9c
 8016794:	0801ae00 	.word	0x0801ae00
 8016798:	0801aebc 	.word	0x0801aebc
 801679c:	0801aef4 	.word	0x0801aef4
 80167a0:	0801af04 	.word	0x0801af04

080167a4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80167a4:	b580      	push	{r7, lr}
 80167a6:	b08e      	sub	sp, #56	; 0x38
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	685b      	ldr	r3, [r3, #4]
 80167b0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80167b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167b4:	781b      	ldrb	r3, [r3, #0]
 80167b6:	f003 030f 	and.w	r3, r3, #15
 80167ba:	b2db      	uxtb	r3, r3
 80167bc:	009b      	lsls	r3, r3, #2
 80167be:	b2db      	uxtb	r3, r3
 80167c0:	2b14      	cmp	r3, #20
 80167c2:	f040 8171 	bne.w	8016aa8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80167c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167c8:	88db      	ldrh	r3, [r3, #6]
 80167ca:	b29b      	uxth	r3, r3
 80167cc:	4618      	mov	r0, r3
 80167ce:	f7f6 fe17 	bl	800d400 <lwip_htons>
 80167d2:	4603      	mov	r3, r0
 80167d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80167d8:	b29b      	uxth	r3, r3
 80167da:	00db      	lsls	r3, r3, #3
 80167dc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80167de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167e0:	885b      	ldrh	r3, [r3, #2]
 80167e2:	b29b      	uxth	r3, r3
 80167e4:	4618      	mov	r0, r3
 80167e6:	f7f6 fe0b 	bl	800d400 <lwip_htons>
 80167ea:	4603      	mov	r3, r0
 80167ec:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80167ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167f0:	781b      	ldrb	r3, [r3, #0]
 80167f2:	f003 030f 	and.w	r3, r3, #15
 80167f6:	b2db      	uxtb	r3, r3
 80167f8:	009b      	lsls	r3, r3, #2
 80167fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80167fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016802:	b29b      	uxth	r3, r3
 8016804:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016806:	429a      	cmp	r2, r3
 8016808:	f0c0 8150 	bcc.w	8016aac <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801680c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016810:	b29b      	uxth	r3, r3
 8016812:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016814:	1ad3      	subs	r3, r2, r3
 8016816:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016818:	6878      	ldr	r0, [r7, #4]
 801681a:	f7f8 fa71 	bl	800ed00 <pbuf_clen>
 801681e:	4603      	mov	r3, r0
 8016820:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016822:	4b8c      	ldr	r3, [pc, #560]	; (8016a54 <ip4_reass+0x2b0>)
 8016824:	881b      	ldrh	r3, [r3, #0]
 8016826:	461a      	mov	r2, r3
 8016828:	8c3b      	ldrh	r3, [r7, #32]
 801682a:	4413      	add	r3, r2
 801682c:	2b0a      	cmp	r3, #10
 801682e:	dd10      	ble.n	8016852 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016830:	8c3b      	ldrh	r3, [r7, #32]
 8016832:	4619      	mov	r1, r3
 8016834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016836:	f7ff fd81 	bl	801633c <ip_reass_remove_oldest_datagram>
 801683a:	4603      	mov	r3, r0
 801683c:	2b00      	cmp	r3, #0
 801683e:	f000 8137 	beq.w	8016ab0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016842:	4b84      	ldr	r3, [pc, #528]	; (8016a54 <ip4_reass+0x2b0>)
 8016844:	881b      	ldrh	r3, [r3, #0]
 8016846:	461a      	mov	r2, r3
 8016848:	8c3b      	ldrh	r3, [r7, #32]
 801684a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801684c:	2b0a      	cmp	r3, #10
 801684e:	f300 812f 	bgt.w	8016ab0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016852:	4b81      	ldr	r3, [pc, #516]	; (8016a58 <ip4_reass+0x2b4>)
 8016854:	681b      	ldr	r3, [r3, #0]
 8016856:	633b      	str	r3, [r7, #48]	; 0x30
 8016858:	e015      	b.n	8016886 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801685c:	695a      	ldr	r2, [r3, #20]
 801685e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016860:	68db      	ldr	r3, [r3, #12]
 8016862:	429a      	cmp	r2, r3
 8016864:	d10c      	bne.n	8016880 <ip4_reass+0xdc>
 8016866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016868:	699a      	ldr	r2, [r3, #24]
 801686a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801686c:	691b      	ldr	r3, [r3, #16]
 801686e:	429a      	cmp	r2, r3
 8016870:	d106      	bne.n	8016880 <ip4_reass+0xdc>
 8016872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016874:	899a      	ldrh	r2, [r3, #12]
 8016876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016878:	889b      	ldrh	r3, [r3, #4]
 801687a:	b29b      	uxth	r3, r3
 801687c:	429a      	cmp	r2, r3
 801687e:	d006      	beq.n	801688e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	633b      	str	r3, [r7, #48]	; 0x30
 8016886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016888:	2b00      	cmp	r3, #0
 801688a:	d1e6      	bne.n	801685a <ip4_reass+0xb6>
 801688c:	e000      	b.n	8016890 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801688e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016892:	2b00      	cmp	r3, #0
 8016894:	d109      	bne.n	80168aa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016896:	8c3b      	ldrh	r3, [r7, #32]
 8016898:	4619      	mov	r1, r3
 801689a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801689c:	f7ff fdb0 	bl	8016400 <ip_reass_enqueue_new_datagram>
 80168a0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80168a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d11c      	bne.n	80168e2 <ip4_reass+0x13e>
      goto nullreturn;
 80168a8:	e105      	b.n	8016ab6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80168aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168ac:	88db      	ldrh	r3, [r3, #6]
 80168ae:	b29b      	uxth	r3, r3
 80168b0:	4618      	mov	r0, r3
 80168b2:	f7f6 fda5 	bl	800d400 <lwip_htons>
 80168b6:	4603      	mov	r3, r0
 80168b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d110      	bne.n	80168e2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80168c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168c2:	89db      	ldrh	r3, [r3, #14]
 80168c4:	4618      	mov	r0, r3
 80168c6:	f7f6 fd9b 	bl	800d400 <lwip_htons>
 80168ca:	4603      	mov	r3, r0
 80168cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d006      	beq.n	80168e2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80168d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168d6:	3308      	adds	r3, #8
 80168d8:	2214      	movs	r2, #20
 80168da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80168dc:	4618      	mov	r0, r3
 80168de:	f000 fc97 	bl	8017210 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80168e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168e4:	88db      	ldrh	r3, [r3, #6]
 80168e6:	b29b      	uxth	r3, r3
 80168e8:	f003 0320 	and.w	r3, r3, #32
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	bf0c      	ite	eq
 80168f0:	2301      	moveq	r3, #1
 80168f2:	2300      	movne	r3, #0
 80168f4:	b2db      	uxtb	r3, r3
 80168f6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80168f8:	69fb      	ldr	r3, [r7, #28]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d00e      	beq.n	801691c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80168fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016900:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016902:	4413      	add	r3, r2
 8016904:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016906:	8b7a      	ldrh	r2, [r7, #26]
 8016908:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801690a:	429a      	cmp	r2, r3
 801690c:	f0c0 80a0 	bcc.w	8016a50 <ip4_reass+0x2ac>
 8016910:	8b7b      	ldrh	r3, [r7, #26]
 8016912:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8016916:	4293      	cmp	r3, r2
 8016918:	f200 809a 	bhi.w	8016a50 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801691c:	69fa      	ldr	r2, [r7, #28]
 801691e:	6879      	ldr	r1, [r7, #4]
 8016920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016922:	f7ff fdd5 	bl	80164d0 <ip_reass_chain_frag_into_datagram_and_validate>
 8016926:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016928:	697b      	ldr	r3, [r7, #20]
 801692a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801692e:	f000 809b 	beq.w	8016a68 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016932:	4b48      	ldr	r3, [pc, #288]	; (8016a54 <ip4_reass+0x2b0>)
 8016934:	881a      	ldrh	r2, [r3, #0]
 8016936:	8c3b      	ldrh	r3, [r7, #32]
 8016938:	4413      	add	r3, r2
 801693a:	b29a      	uxth	r2, r3
 801693c:	4b45      	ldr	r3, [pc, #276]	; (8016a54 <ip4_reass+0x2b0>)
 801693e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016940:	69fb      	ldr	r3, [r7, #28]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d00d      	beq.n	8016962 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016946:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016948:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801694a:	4413      	add	r3, r2
 801694c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016950:	8a7a      	ldrh	r2, [r7, #18]
 8016952:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016956:	7f9b      	ldrb	r3, [r3, #30]
 8016958:	f043 0301 	orr.w	r3, r3, #1
 801695c:	b2da      	uxtb	r2, r3
 801695e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016960:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016962:	697b      	ldr	r3, [r7, #20]
 8016964:	2b01      	cmp	r3, #1
 8016966:	d171      	bne.n	8016a4c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801696a:	8b9b      	ldrh	r3, [r3, #28]
 801696c:	3314      	adds	r3, #20
 801696e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016972:	685b      	ldr	r3, [r3, #4]
 8016974:	685b      	ldr	r3, [r3, #4]
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801697a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801697c:	685b      	ldr	r3, [r3, #4]
 801697e:	685b      	ldr	r3, [r3, #4]
 8016980:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016984:	3308      	adds	r3, #8
 8016986:	2214      	movs	r2, #20
 8016988:	4619      	mov	r1, r3
 801698a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801698c:	f000 fc40 	bl	8017210 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016990:	8a3b      	ldrh	r3, [r7, #16]
 8016992:	4618      	mov	r0, r3
 8016994:	f7f6 fd34 	bl	800d400 <lwip_htons>
 8016998:	4603      	mov	r3, r0
 801699a:	461a      	mov	r2, r3
 801699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801699e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80169a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169a2:	2200      	movs	r2, #0
 80169a4:	719a      	strb	r2, [r3, #6]
 80169a6:	2200      	movs	r2, #0
 80169a8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80169aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169ac:	2200      	movs	r2, #0
 80169ae:	729a      	strb	r2, [r3, #10]
 80169b0:	2200      	movs	r2, #0
 80169b2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80169b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169b6:	685b      	ldr	r3, [r3, #4]
 80169b8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80169ba:	e00d      	b.n	80169d8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80169bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169be:	685b      	ldr	r3, [r3, #4]
 80169c0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80169c2:	2114      	movs	r1, #20
 80169c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80169c6:	f7f8 f887 	bl	800ead8 <pbuf_remove_header>
      pbuf_cat(p, r);
 80169ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80169cc:	6878      	ldr	r0, [r7, #4]
 80169ce:	f7f8 f9d7 	bl	800ed80 <pbuf_cat>
      r = iprh->next_pbuf;
 80169d2:	68fb      	ldr	r3, [r7, #12]
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80169d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d1ee      	bne.n	80169bc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80169de:	4b1e      	ldr	r3, [pc, #120]	; (8016a58 <ip4_reass+0x2b4>)
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80169e4:	429a      	cmp	r2, r3
 80169e6:	d102      	bne.n	80169ee <ip4_reass+0x24a>
      ipr_prev = NULL;
 80169e8:	2300      	movs	r3, #0
 80169ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80169ec:	e010      	b.n	8016a10 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80169ee:	4b1a      	ldr	r3, [pc, #104]	; (8016a58 <ip4_reass+0x2b4>)
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80169f4:	e007      	b.n	8016a06 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80169f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80169fc:	429a      	cmp	r2, r3
 80169fe:	d006      	beq.n	8016a0e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d1f4      	bne.n	80169f6 <ip4_reass+0x252>
 8016a0c:	e000      	b.n	8016a10 <ip4_reass+0x26c>
          break;
 8016a0e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016a10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016a12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a14:	f7ff fd2e 	bl	8016474 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016a18:	6878      	ldr	r0, [r7, #4]
 8016a1a:	f7f8 f971 	bl	800ed00 <pbuf_clen>
 8016a1e:	4603      	mov	r3, r0
 8016a20:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016a22:	4b0c      	ldr	r3, [pc, #48]	; (8016a54 <ip4_reass+0x2b0>)
 8016a24:	881b      	ldrh	r3, [r3, #0]
 8016a26:	8c3a      	ldrh	r2, [r7, #32]
 8016a28:	429a      	cmp	r2, r3
 8016a2a:	d906      	bls.n	8016a3a <ip4_reass+0x296>
 8016a2c:	4b0b      	ldr	r3, [pc, #44]	; (8016a5c <ip4_reass+0x2b8>)
 8016a2e:	f240 229b 	movw	r2, #667	; 0x29b
 8016a32:	490b      	ldr	r1, [pc, #44]	; (8016a60 <ip4_reass+0x2bc>)
 8016a34:	480b      	ldr	r0, [pc, #44]	; (8016a64 <ip4_reass+0x2c0>)
 8016a36:	f000 fc01 	bl	801723c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016a3a:	4b06      	ldr	r3, [pc, #24]	; (8016a54 <ip4_reass+0x2b0>)
 8016a3c:	881a      	ldrh	r2, [r3, #0]
 8016a3e:	8c3b      	ldrh	r3, [r7, #32]
 8016a40:	1ad3      	subs	r3, r2, r3
 8016a42:	b29a      	uxth	r2, r3
 8016a44:	4b03      	ldr	r3, [pc, #12]	; (8016a54 <ip4_reass+0x2b0>)
 8016a46:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	e038      	b.n	8016abe <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	e036      	b.n	8016abe <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8016a50:	bf00      	nop
 8016a52:	e00a      	b.n	8016a6a <ip4_reass+0x2c6>
 8016a54:	200111bc 	.word	0x200111bc
 8016a58:	200111b8 	.word	0x200111b8
 8016a5c:	0801adb8 	.word	0x0801adb8
 8016a60:	0801af28 	.word	0x0801af28
 8016a64:	0801ae00 	.word	0x0801ae00
    goto nullreturn_ipr;
 8016a68:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d106      	bne.n	8016a7e <ip4_reass+0x2da>
 8016a70:	4b15      	ldr	r3, [pc, #84]	; (8016ac8 <ip4_reass+0x324>)
 8016a72:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016a76:	4915      	ldr	r1, [pc, #84]	; (8016acc <ip4_reass+0x328>)
 8016a78:	4815      	ldr	r0, [pc, #84]	; (8016ad0 <ip4_reass+0x32c>)
 8016a7a:	f000 fbdf 	bl	801723c <iprintf>
  if (ipr->p == NULL) {
 8016a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a80:	685b      	ldr	r3, [r3, #4]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d116      	bne.n	8016ab4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016a86:	4b13      	ldr	r3, [pc, #76]	; (8016ad4 <ip4_reass+0x330>)
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016a8c:	429a      	cmp	r2, r3
 8016a8e:	d006      	beq.n	8016a9e <ip4_reass+0x2fa>
 8016a90:	4b0d      	ldr	r3, [pc, #52]	; (8016ac8 <ip4_reass+0x324>)
 8016a92:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016a96:	4910      	ldr	r1, [pc, #64]	; (8016ad8 <ip4_reass+0x334>)
 8016a98:	480d      	ldr	r0, [pc, #52]	; (8016ad0 <ip4_reass+0x32c>)
 8016a9a:	f000 fbcf 	bl	801723c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016a9e:	2100      	movs	r1, #0
 8016aa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016aa2:	f7ff fce7 	bl	8016474 <ip_reass_dequeue_datagram>
 8016aa6:	e006      	b.n	8016ab6 <ip4_reass+0x312>
    goto nullreturn;
 8016aa8:	bf00      	nop
 8016aaa:	e004      	b.n	8016ab6 <ip4_reass+0x312>
    goto nullreturn;
 8016aac:	bf00      	nop
 8016aae:	e002      	b.n	8016ab6 <ip4_reass+0x312>
      goto nullreturn;
 8016ab0:	bf00      	nop
 8016ab2:	e000      	b.n	8016ab6 <ip4_reass+0x312>
  }

nullreturn:
 8016ab4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016ab6:	6878      	ldr	r0, [r7, #4]
 8016ab8:	f7f8 f894 	bl	800ebe4 <pbuf_free>
  return NULL;
 8016abc:	2300      	movs	r3, #0
}
 8016abe:	4618      	mov	r0, r3
 8016ac0:	3738      	adds	r7, #56	; 0x38
 8016ac2:	46bd      	mov	sp, r7
 8016ac4:	bd80      	pop	{r7, pc}
 8016ac6:	bf00      	nop
 8016ac8:	0801adb8 	.word	0x0801adb8
 8016acc:	0801af44 	.word	0x0801af44
 8016ad0:	0801ae00 	.word	0x0801ae00
 8016ad4:	200111b8 	.word	0x200111b8
 8016ad8:	0801af50 	.word	0x0801af50

08016adc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016adc:	b580      	push	{r7, lr}
 8016ade:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016ae0:	2005      	movs	r0, #5
 8016ae2:	f7f7 f965 	bl	800ddb0 <memp_malloc>
 8016ae6:	4603      	mov	r3, r0
}
 8016ae8:	4618      	mov	r0, r3
 8016aea:	bd80      	pop	{r7, pc}

08016aec <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016aec:	b580      	push	{r7, lr}
 8016aee:	b082      	sub	sp, #8
 8016af0:	af00      	add	r7, sp, #0
 8016af2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d106      	bne.n	8016b08 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016afa:	4b07      	ldr	r3, [pc, #28]	; (8016b18 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016afc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016b00:	4906      	ldr	r1, [pc, #24]	; (8016b1c <ip_frag_free_pbuf_custom_ref+0x30>)
 8016b02:	4807      	ldr	r0, [pc, #28]	; (8016b20 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016b04:	f000 fb9a 	bl	801723c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016b08:	6879      	ldr	r1, [r7, #4]
 8016b0a:	2005      	movs	r0, #5
 8016b0c:	f7f7 f9c6 	bl	800de9c <memp_free>
}
 8016b10:	bf00      	nop
 8016b12:	3708      	adds	r7, #8
 8016b14:	46bd      	mov	sp, r7
 8016b16:	bd80      	pop	{r7, pc}
 8016b18:	0801adb8 	.word	0x0801adb8
 8016b1c:	0801af70 	.word	0x0801af70
 8016b20:	0801ae00 	.word	0x0801ae00

08016b24 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016b24:	b580      	push	{r7, lr}
 8016b26:	b084      	sub	sp, #16
 8016b28:	af00      	add	r7, sp, #0
 8016b2a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d106      	bne.n	8016b44 <ipfrag_free_pbuf_custom+0x20>
 8016b36:	4b11      	ldr	r3, [pc, #68]	; (8016b7c <ipfrag_free_pbuf_custom+0x58>)
 8016b38:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016b3c:	4910      	ldr	r1, [pc, #64]	; (8016b80 <ipfrag_free_pbuf_custom+0x5c>)
 8016b3e:	4811      	ldr	r0, [pc, #68]	; (8016b84 <ipfrag_free_pbuf_custom+0x60>)
 8016b40:	f000 fb7c 	bl	801723c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016b44:	68fa      	ldr	r2, [r7, #12]
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	429a      	cmp	r2, r3
 8016b4a:	d006      	beq.n	8016b5a <ipfrag_free_pbuf_custom+0x36>
 8016b4c:	4b0b      	ldr	r3, [pc, #44]	; (8016b7c <ipfrag_free_pbuf_custom+0x58>)
 8016b4e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016b52:	490d      	ldr	r1, [pc, #52]	; (8016b88 <ipfrag_free_pbuf_custom+0x64>)
 8016b54:	480b      	ldr	r0, [pc, #44]	; (8016b84 <ipfrag_free_pbuf_custom+0x60>)
 8016b56:	f000 fb71 	bl	801723c <iprintf>
  if (pcr->original != NULL) {
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	695b      	ldr	r3, [r3, #20]
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d004      	beq.n	8016b6c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	695b      	ldr	r3, [r3, #20]
 8016b66:	4618      	mov	r0, r3
 8016b68:	f7f8 f83c 	bl	800ebe4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016b6c:	68f8      	ldr	r0, [r7, #12]
 8016b6e:	f7ff ffbd 	bl	8016aec <ip_frag_free_pbuf_custom_ref>
}
 8016b72:	bf00      	nop
 8016b74:	3710      	adds	r7, #16
 8016b76:	46bd      	mov	sp, r7
 8016b78:	bd80      	pop	{r7, pc}
 8016b7a:	bf00      	nop
 8016b7c:	0801adb8 	.word	0x0801adb8
 8016b80:	0801af7c 	.word	0x0801af7c
 8016b84:	0801ae00 	.word	0x0801ae00
 8016b88:	0801af88 	.word	0x0801af88

08016b8c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016b8c:	b580      	push	{r7, lr}
 8016b8e:	b094      	sub	sp, #80	; 0x50
 8016b90:	af02      	add	r7, sp, #8
 8016b92:	60f8      	str	r0, [r7, #12]
 8016b94:	60b9      	str	r1, [r7, #8]
 8016b96:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016b98:	2300      	movs	r3, #0
 8016b9a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016b9e:	68bb      	ldr	r3, [r7, #8]
 8016ba0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016ba2:	3b14      	subs	r3, #20
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	da00      	bge.n	8016baa <ip4_frag+0x1e>
 8016ba8:	3307      	adds	r3, #7
 8016baa:	10db      	asrs	r3, r3, #3
 8016bac:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016bae:	2314      	movs	r3, #20
 8016bb0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	685b      	ldr	r3, [r3, #4]
 8016bb6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bba:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bbe:	781b      	ldrb	r3, [r3, #0]
 8016bc0:	f003 030f 	and.w	r3, r3, #15
 8016bc4:	b2db      	uxtb	r3, r3
 8016bc6:	009b      	lsls	r3, r3, #2
 8016bc8:	b2db      	uxtb	r3, r3
 8016bca:	2b14      	cmp	r3, #20
 8016bcc:	d002      	beq.n	8016bd4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016bce:	f06f 0305 	mvn.w	r3, #5
 8016bd2:	e110      	b.n	8016df6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	895b      	ldrh	r3, [r3, #10]
 8016bd8:	2b13      	cmp	r3, #19
 8016bda:	d809      	bhi.n	8016bf0 <ip4_frag+0x64>
 8016bdc:	4b88      	ldr	r3, [pc, #544]	; (8016e00 <ip4_frag+0x274>)
 8016bde:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016be2:	4988      	ldr	r1, [pc, #544]	; (8016e04 <ip4_frag+0x278>)
 8016be4:	4888      	ldr	r0, [pc, #544]	; (8016e08 <ip4_frag+0x27c>)
 8016be6:	f000 fb29 	bl	801723c <iprintf>
 8016bea:	f06f 0305 	mvn.w	r3, #5
 8016bee:	e102      	b.n	8016df6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bf2:	88db      	ldrh	r3, [r3, #6]
 8016bf4:	b29b      	uxth	r3, r3
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	f7f6 fc02 	bl	800d400 <lwip_htons>
 8016bfc:	4603      	mov	r3, r0
 8016bfe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016c00:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016c02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016c06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016c0a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016c0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016c10:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	891b      	ldrh	r3, [r3, #8]
 8016c16:	3b14      	subs	r3, #20
 8016c18:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016c1c:	e0e1      	b.n	8016de2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016c1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016c20:	00db      	lsls	r3, r3, #3
 8016c22:	b29b      	uxth	r3, r3
 8016c24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016c28:	4293      	cmp	r3, r2
 8016c2a:	bf28      	it	cs
 8016c2c:	4613      	movcs	r3, r2
 8016c2e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016c30:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016c34:	2114      	movs	r1, #20
 8016c36:	200e      	movs	r0, #14
 8016c38:	f7f7 fcf0 	bl	800e61c <pbuf_alloc>
 8016c3c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8016c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	f000 80d5 	beq.w	8016df0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c48:	895b      	ldrh	r3, [r3, #10]
 8016c4a:	2b13      	cmp	r3, #19
 8016c4c:	d806      	bhi.n	8016c5c <ip4_frag+0xd0>
 8016c4e:	4b6c      	ldr	r3, [pc, #432]	; (8016e00 <ip4_frag+0x274>)
 8016c50:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016c54:	496d      	ldr	r1, [pc, #436]	; (8016e0c <ip4_frag+0x280>)
 8016c56:	486c      	ldr	r0, [pc, #432]	; (8016e08 <ip4_frag+0x27c>)
 8016c58:	f000 faf0 	bl	801723c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c5e:	685b      	ldr	r3, [r3, #4]
 8016c60:	2214      	movs	r2, #20
 8016c62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016c64:	4618      	mov	r0, r3
 8016c66:	f000 fad3 	bl	8017210 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c6c:	685b      	ldr	r3, [r3, #4]
 8016c6e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016c70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016c72:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016c76:	e064      	b.n	8016d42 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	895a      	ldrh	r2, [r3, #10]
 8016c7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016c7e:	1ad3      	subs	r3, r2, r3
 8016c80:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	895b      	ldrh	r3, [r3, #10]
 8016c86:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016c88:	429a      	cmp	r2, r3
 8016c8a:	d906      	bls.n	8016c9a <ip4_frag+0x10e>
 8016c8c:	4b5c      	ldr	r3, [pc, #368]	; (8016e00 <ip4_frag+0x274>)
 8016c8e:	f240 322d 	movw	r2, #813	; 0x32d
 8016c92:	495f      	ldr	r1, [pc, #380]	; (8016e10 <ip4_frag+0x284>)
 8016c94:	485c      	ldr	r0, [pc, #368]	; (8016e08 <ip4_frag+0x27c>)
 8016c96:	f000 fad1 	bl	801723c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016c9a:	8bfa      	ldrh	r2, [r7, #30]
 8016c9c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016ca0:	4293      	cmp	r3, r2
 8016ca2:	bf28      	it	cs
 8016ca4:	4613      	movcs	r3, r2
 8016ca6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016caa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d105      	bne.n	8016cbe <ip4_frag+0x132>
        poff = 0;
 8016cb2:	2300      	movs	r3, #0
 8016cb4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016cb6:	68fb      	ldr	r3, [r7, #12]
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	60fb      	str	r3, [r7, #12]
        continue;
 8016cbc:	e041      	b.n	8016d42 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016cbe:	f7ff ff0d 	bl	8016adc <ip_frag_alloc_pbuf_custom_ref>
 8016cc2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016cc4:	69bb      	ldr	r3, [r7, #24]
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d103      	bne.n	8016cd2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016cca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016ccc:	f7f7 ff8a 	bl	800ebe4 <pbuf_free>
        goto memerr;
 8016cd0:	e08f      	b.n	8016df2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016cd2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016cd4:	68fb      	ldr	r3, [r7, #12]
 8016cd6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016cd8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016cda:	4413      	add	r3, r2
 8016cdc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016ce0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016ce4:	9201      	str	r2, [sp, #4]
 8016ce6:	9300      	str	r3, [sp, #0]
 8016ce8:	4603      	mov	r3, r0
 8016cea:	2241      	movs	r2, #65	; 0x41
 8016cec:	2000      	movs	r0, #0
 8016cee:	f7f7 fdbf 	bl	800e870 <pbuf_alloced_custom>
 8016cf2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016cf4:	697b      	ldr	r3, [r7, #20]
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d106      	bne.n	8016d08 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016cfa:	69b8      	ldr	r0, [r7, #24]
 8016cfc:	f7ff fef6 	bl	8016aec <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016d00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016d02:	f7f7 ff6f 	bl	800ebe4 <pbuf_free>
        goto memerr;
 8016d06:	e074      	b.n	8016df2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016d08:	68f8      	ldr	r0, [r7, #12]
 8016d0a:	f7f8 f811 	bl	800ed30 <pbuf_ref>
      pcr->original = p;
 8016d0e:	69bb      	ldr	r3, [r7, #24]
 8016d10:	68fa      	ldr	r2, [r7, #12]
 8016d12:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016d14:	69bb      	ldr	r3, [r7, #24]
 8016d16:	4a3f      	ldr	r2, [pc, #252]	; (8016e14 <ip4_frag+0x288>)
 8016d18:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016d1a:	6979      	ldr	r1, [r7, #20]
 8016d1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016d1e:	f7f8 f82f 	bl	800ed80 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016d22:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016d26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016d2a:	1ad3      	subs	r3, r2, r3
 8016d2c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016d30:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d004      	beq.n	8016d42 <ip4_frag+0x1b6>
        poff = 0;
 8016d38:	2300      	movs	r3, #0
 8016d3a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016d42:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d196      	bne.n	8016c78 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016d4a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016d4c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016d50:	4413      	add	r3, r2
 8016d52:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016d54:	68bb      	ldr	r3, [r7, #8]
 8016d56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016d58:	f1a3 0213 	sub.w	r2, r3, #19
 8016d5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016d60:	429a      	cmp	r2, r3
 8016d62:	bfcc      	ite	gt
 8016d64:	2301      	movgt	r3, #1
 8016d66:	2300      	movle	r3, #0
 8016d68:	b2db      	uxtb	r3, r3
 8016d6a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016d6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016d70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016d74:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016d76:	6a3b      	ldr	r3, [r7, #32]
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d002      	beq.n	8016d82 <ip4_frag+0x1f6>
 8016d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d003      	beq.n	8016d8a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016d82:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016d84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016d88:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016d8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016d8c:	4618      	mov	r0, r3
 8016d8e:	f7f6 fb37 	bl	800d400 <lwip_htons>
 8016d92:	4603      	mov	r3, r0
 8016d94:	461a      	mov	r2, r3
 8016d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d98:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016d9a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016d9c:	3314      	adds	r3, #20
 8016d9e:	b29b      	uxth	r3, r3
 8016da0:	4618      	mov	r0, r3
 8016da2:	f7f6 fb2d 	bl	800d400 <lwip_htons>
 8016da6:	4603      	mov	r3, r0
 8016da8:	461a      	mov	r2, r3
 8016daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dac:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016db0:	2200      	movs	r2, #0
 8016db2:	729a      	strb	r2, [r3, #10]
 8016db4:	2200      	movs	r2, #0
 8016db6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016db8:	68bb      	ldr	r3, [r7, #8]
 8016dba:	695b      	ldr	r3, [r3, #20]
 8016dbc:	687a      	ldr	r2, [r7, #4]
 8016dbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016dc0:	68b8      	ldr	r0, [r7, #8]
 8016dc2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016dc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016dc6:	f7f7 ff0d 	bl	800ebe4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016dca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016dce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016dd0:	1ad3      	subs	r3, r2, r3
 8016dd2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016dd6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016dda:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016ddc:	4413      	add	r3, r2
 8016dde:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016de2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	f47f af19 	bne.w	8016c1e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016dec:	2300      	movs	r3, #0
 8016dee:	e002      	b.n	8016df6 <ip4_frag+0x26a>
      goto memerr;
 8016df0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016df2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016df6:	4618      	mov	r0, r3
 8016df8:	3748      	adds	r7, #72	; 0x48
 8016dfa:	46bd      	mov	sp, r7
 8016dfc:	bd80      	pop	{r7, pc}
 8016dfe:	bf00      	nop
 8016e00:	0801adb8 	.word	0x0801adb8
 8016e04:	0801af94 	.word	0x0801af94
 8016e08:	0801ae00 	.word	0x0801ae00
 8016e0c:	0801afb0 	.word	0x0801afb0
 8016e10:	0801afd0 	.word	0x0801afd0
 8016e14:	08016b25 	.word	0x08016b25

08016e18 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016e18:	b580      	push	{r7, lr}
 8016e1a:	b086      	sub	sp, #24
 8016e1c:	af00      	add	r7, sp, #0
 8016e1e:	6078      	str	r0, [r7, #4]
 8016e20:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016e22:	230e      	movs	r3, #14
 8016e24:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	895b      	ldrh	r3, [r3, #10]
 8016e2a:	2b0e      	cmp	r3, #14
 8016e2c:	d96e      	bls.n	8016f0c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	7bdb      	ldrb	r3, [r3, #15]
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d106      	bne.n	8016e44 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016e36:	683b      	ldr	r3, [r7, #0]
 8016e38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016e3c:	3301      	adds	r3, #1
 8016e3e:	b2da      	uxtb	r2, r3
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	685b      	ldr	r3, [r3, #4]
 8016e48:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016e4a:	693b      	ldr	r3, [r7, #16]
 8016e4c:	7b1a      	ldrb	r2, [r3, #12]
 8016e4e:	7b5b      	ldrb	r3, [r3, #13]
 8016e50:	021b      	lsls	r3, r3, #8
 8016e52:	4313      	orrs	r3, r2
 8016e54:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016e56:	693b      	ldr	r3, [r7, #16]
 8016e58:	781b      	ldrb	r3, [r3, #0]
 8016e5a:	f003 0301 	and.w	r3, r3, #1
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d023      	beq.n	8016eaa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016e62:	693b      	ldr	r3, [r7, #16]
 8016e64:	781b      	ldrb	r3, [r3, #0]
 8016e66:	2b01      	cmp	r3, #1
 8016e68:	d10f      	bne.n	8016e8a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016e6a:	693b      	ldr	r3, [r7, #16]
 8016e6c:	785b      	ldrb	r3, [r3, #1]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d11b      	bne.n	8016eaa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016e72:	693b      	ldr	r3, [r7, #16]
 8016e74:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016e76:	2b5e      	cmp	r3, #94	; 0x5e
 8016e78:	d117      	bne.n	8016eaa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	7b5b      	ldrb	r3, [r3, #13]
 8016e7e:	f043 0310 	orr.w	r3, r3, #16
 8016e82:	b2da      	uxtb	r2, r3
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	735a      	strb	r2, [r3, #13]
 8016e88:	e00f      	b.n	8016eaa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016e8a:	693b      	ldr	r3, [r7, #16]
 8016e8c:	2206      	movs	r2, #6
 8016e8e:	4928      	ldr	r1, [pc, #160]	; (8016f30 <ethernet_input+0x118>)
 8016e90:	4618      	mov	r0, r3
 8016e92:	f000 f9ad 	bl	80171f0 <memcmp>
 8016e96:	4603      	mov	r3, r0
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d106      	bne.n	8016eaa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	7b5b      	ldrb	r3, [r3, #13]
 8016ea0:	f043 0308 	orr.w	r3, r3, #8
 8016ea4:	b2da      	uxtb	r2, r3
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016eaa:	89fb      	ldrh	r3, [r7, #14]
 8016eac:	2b08      	cmp	r3, #8
 8016eae:	d003      	beq.n	8016eb8 <ethernet_input+0xa0>
 8016eb0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016eb4:	d014      	beq.n	8016ee0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016eb6:	e032      	b.n	8016f1e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016eb8:	683b      	ldr	r3, [r7, #0]
 8016eba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016ebe:	f003 0308 	and.w	r3, r3, #8
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d024      	beq.n	8016f10 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016ec6:	8afb      	ldrh	r3, [r7, #22]
 8016ec8:	4619      	mov	r1, r3
 8016eca:	6878      	ldr	r0, [r7, #4]
 8016ecc:	f7f7 fe04 	bl	800ead8 <pbuf_remove_header>
 8016ed0:	4603      	mov	r3, r0
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d11e      	bne.n	8016f14 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016ed6:	6839      	ldr	r1, [r7, #0]
 8016ed8:	6878      	ldr	r0, [r7, #4]
 8016eda:	f7fe ff21 	bl	8015d20 <ip4_input>
      break;
 8016ede:	e013      	b.n	8016f08 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016ee0:	683b      	ldr	r3, [r7, #0]
 8016ee2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016ee6:	f003 0308 	and.w	r3, r3, #8
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d014      	beq.n	8016f18 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016eee:	8afb      	ldrh	r3, [r7, #22]
 8016ef0:	4619      	mov	r1, r3
 8016ef2:	6878      	ldr	r0, [r7, #4]
 8016ef4:	f7f7 fdf0 	bl	800ead8 <pbuf_remove_header>
 8016ef8:	4603      	mov	r3, r0
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d10e      	bne.n	8016f1c <ethernet_input+0x104>
        etharp_input(p, netif);
 8016efe:	6839      	ldr	r1, [r7, #0]
 8016f00:	6878      	ldr	r0, [r7, #4]
 8016f02:	f7fe f8c1 	bl	8015088 <etharp_input>
      break;
 8016f06:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016f08:	2300      	movs	r3, #0
 8016f0a:	e00c      	b.n	8016f26 <ethernet_input+0x10e>
    goto free_and_return;
 8016f0c:	bf00      	nop
 8016f0e:	e006      	b.n	8016f1e <ethernet_input+0x106>
        goto free_and_return;
 8016f10:	bf00      	nop
 8016f12:	e004      	b.n	8016f1e <ethernet_input+0x106>
        goto free_and_return;
 8016f14:	bf00      	nop
 8016f16:	e002      	b.n	8016f1e <ethernet_input+0x106>
        goto free_and_return;
 8016f18:	bf00      	nop
 8016f1a:	e000      	b.n	8016f1e <ethernet_input+0x106>
        goto free_and_return;
 8016f1c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016f1e:	6878      	ldr	r0, [r7, #4]
 8016f20:	f7f7 fe60 	bl	800ebe4 <pbuf_free>
  return ERR_OK;
 8016f24:	2300      	movs	r3, #0
}
 8016f26:	4618      	mov	r0, r3
 8016f28:	3718      	adds	r7, #24
 8016f2a:	46bd      	mov	sp, r7
 8016f2c:	bd80      	pop	{r7, pc}
 8016f2e:	bf00      	nop
 8016f30:	0801b220 	.word	0x0801b220

08016f34 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016f34:	b580      	push	{r7, lr}
 8016f36:	b086      	sub	sp, #24
 8016f38:	af00      	add	r7, sp, #0
 8016f3a:	60f8      	str	r0, [r7, #12]
 8016f3c:	60b9      	str	r1, [r7, #8]
 8016f3e:	607a      	str	r2, [r7, #4]
 8016f40:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016f42:	8c3b      	ldrh	r3, [r7, #32]
 8016f44:	4618      	mov	r0, r3
 8016f46:	f7f6 fa5b 	bl	800d400 <lwip_htons>
 8016f4a:	4603      	mov	r3, r0
 8016f4c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016f4e:	210e      	movs	r1, #14
 8016f50:	68b8      	ldr	r0, [r7, #8]
 8016f52:	f7f7 fdb1 	bl	800eab8 <pbuf_add_header>
 8016f56:	4603      	mov	r3, r0
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d125      	bne.n	8016fa8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016f5c:	68bb      	ldr	r3, [r7, #8]
 8016f5e:	685b      	ldr	r3, [r3, #4]
 8016f60:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016f62:	693b      	ldr	r3, [r7, #16]
 8016f64:	8afa      	ldrh	r2, [r7, #22]
 8016f66:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016f68:	693b      	ldr	r3, [r7, #16]
 8016f6a:	2206      	movs	r2, #6
 8016f6c:	6839      	ldr	r1, [r7, #0]
 8016f6e:	4618      	mov	r0, r3
 8016f70:	f000 f94e 	bl	8017210 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016f74:	693b      	ldr	r3, [r7, #16]
 8016f76:	3306      	adds	r3, #6
 8016f78:	2206      	movs	r2, #6
 8016f7a:	6879      	ldr	r1, [r7, #4]
 8016f7c:	4618      	mov	r0, r3
 8016f7e:	f000 f947 	bl	8017210 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016f88:	2b06      	cmp	r3, #6
 8016f8a:	d006      	beq.n	8016f9a <ethernet_output+0x66>
 8016f8c:	4b0a      	ldr	r3, [pc, #40]	; (8016fb8 <ethernet_output+0x84>)
 8016f8e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016f92:	490a      	ldr	r1, [pc, #40]	; (8016fbc <ethernet_output+0x88>)
 8016f94:	480a      	ldr	r0, [pc, #40]	; (8016fc0 <ethernet_output+0x8c>)
 8016f96:	f000 f951 	bl	801723c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	699b      	ldr	r3, [r3, #24]
 8016f9e:	68b9      	ldr	r1, [r7, #8]
 8016fa0:	68f8      	ldr	r0, [r7, #12]
 8016fa2:	4798      	blx	r3
 8016fa4:	4603      	mov	r3, r0
 8016fa6:	e002      	b.n	8016fae <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016fa8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016faa:	f06f 0301 	mvn.w	r3, #1
}
 8016fae:	4618      	mov	r0, r3
 8016fb0:	3718      	adds	r7, #24
 8016fb2:	46bd      	mov	sp, r7
 8016fb4:	bd80      	pop	{r7, pc}
 8016fb6:	bf00      	nop
 8016fb8:	0801afe0 	.word	0x0801afe0
 8016fbc:	0801b018 	.word	0x0801b018
 8016fc0:	0801b04c 	.word	0x0801b04c

08016fc4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016fc4:	b580      	push	{r7, lr}
 8016fc6:	b082      	sub	sp, #8
 8016fc8:	af00      	add	r7, sp, #0
 8016fca:	6078      	str	r0, [r7, #4]
 8016fcc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8016fce:	683b      	ldr	r3, [r7, #0]
 8016fd0:	2200      	movs	r2, #0
 8016fd2:	2104      	movs	r1, #4
 8016fd4:	4618      	mov	r0, r3
 8016fd6:	f7f2 fd4d 	bl	8009a74 <osMessageQueueNew>
 8016fda:	4602      	mov	r2, r0
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	681b      	ldr	r3, [r3, #0]
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d102      	bne.n	8016fee <sys_mbox_new+0x2a>
    return ERR_MEM;
 8016fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8016fec:	e000      	b.n	8016ff0 <sys_mbox_new+0x2c>

  return ERR_OK;
 8016fee:	2300      	movs	r3, #0
}
 8016ff0:	4618      	mov	r0, r3
 8016ff2:	3708      	adds	r7, #8
 8016ff4:	46bd      	mov	sp, r7
 8016ff6:	bd80      	pop	{r7, pc}

08016ff8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016ff8:	b580      	push	{r7, lr}
 8016ffa:	b084      	sub	sp, #16
 8016ffc:	af00      	add	r7, sp, #0
 8016ffe:	6078      	str	r0, [r7, #4]
 8017000:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	6818      	ldr	r0, [r3, #0]
 8017006:	4639      	mov	r1, r7
 8017008:	2300      	movs	r3, #0
 801700a:	2200      	movs	r2, #0
 801700c:	f7f2 fdb8 	bl	8009b80 <osMessageQueuePut>
 8017010:	4603      	mov	r3, r0
 8017012:	2b00      	cmp	r3, #0
 8017014:	d102      	bne.n	801701c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8017016:	2300      	movs	r3, #0
 8017018:	73fb      	strb	r3, [r7, #15]
 801701a:	e001      	b.n	8017020 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801701c:	23ff      	movs	r3, #255	; 0xff
 801701e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017020:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017024:	4618      	mov	r0, r3
 8017026:	3710      	adds	r7, #16
 8017028:	46bd      	mov	sp, r7
 801702a:	bd80      	pop	{r7, pc}

0801702c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801702c:	b580      	push	{r7, lr}
 801702e:	b086      	sub	sp, #24
 8017030:	af00      	add	r7, sp, #0
 8017032:	60f8      	str	r0, [r7, #12]
 8017034:	60b9      	str	r1, [r7, #8]
 8017036:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8017038:	f7f2 f97e 	bl	8009338 <osKernelGetTickCount>
 801703c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	2b00      	cmp	r3, #0
 8017042:	d013      	beq.n	801706c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	6818      	ldr	r0, [r3, #0]
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	2200      	movs	r2, #0
 801704c:	68b9      	ldr	r1, [r7, #8]
 801704e:	f7f2 fe0b 	bl	8009c68 <osMessageQueueGet>
 8017052:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8017054:	693b      	ldr	r3, [r7, #16]
 8017056:	2b00      	cmp	r3, #0
 8017058:	d105      	bne.n	8017066 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801705a:	f7f2 f96d 	bl	8009338 <osKernelGetTickCount>
 801705e:	4602      	mov	r2, r0
 8017060:	697b      	ldr	r3, [r7, #20]
 8017062:	1ad3      	subs	r3, r2, r3
 8017064:	e00f      	b.n	8017086 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017066:	f04f 33ff 	mov.w	r3, #4294967295
 801706a:	e00c      	b.n	8017086 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	6818      	ldr	r0, [r3, #0]
 8017070:	f04f 33ff 	mov.w	r3, #4294967295
 8017074:	2200      	movs	r2, #0
 8017076:	68b9      	ldr	r1, [r7, #8]
 8017078:	f7f2 fdf6 	bl	8009c68 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801707c:	f7f2 f95c 	bl	8009338 <osKernelGetTickCount>
 8017080:	4602      	mov	r2, r0
 8017082:	697b      	ldr	r3, [r7, #20]
 8017084:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8017086:	4618      	mov	r0, r3
 8017088:	3718      	adds	r7, #24
 801708a:	46bd      	mov	sp, r7
 801708c:	bd80      	pop	{r7, pc}

0801708e <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801708e:	b480      	push	{r7}
 8017090:	b083      	sub	sp, #12
 8017092:	af00      	add	r7, sp, #0
 8017094:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	681b      	ldr	r3, [r3, #0]
 801709a:	2b00      	cmp	r3, #0
 801709c:	d101      	bne.n	80170a2 <sys_mbox_valid+0x14>
    return 0;
 801709e:	2300      	movs	r3, #0
 80170a0:	e000      	b.n	80170a4 <sys_mbox_valid+0x16>
  else
    return 1;
 80170a2:	2301      	movs	r3, #1
}
 80170a4:	4618      	mov	r0, r3
 80170a6:	370c      	adds	r7, #12
 80170a8:	46bd      	mov	sp, r7
 80170aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ae:	4770      	bx	lr

080170b0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80170b0:	b580      	push	{r7, lr}
 80170b2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80170b4:	2000      	movs	r0, #0
 80170b6:	f7f2 fa3b 	bl	8009530 <osMutexNew>
 80170ba:	4603      	mov	r3, r0
 80170bc:	4a01      	ldr	r2, [pc, #4]	; (80170c4 <sys_init+0x14>)
 80170be:	6013      	str	r3, [r2, #0]
#endif
}
 80170c0:	bf00      	nop
 80170c2:	bd80      	pop	{r7, pc}
 80170c4:	200111c4 	.word	0x200111c4

080170c8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80170c8:	b580      	push	{r7, lr}
 80170ca:	b082      	sub	sp, #8
 80170cc:	af00      	add	r7, sp, #0
 80170ce:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80170d0:	2000      	movs	r0, #0
 80170d2:	f7f2 fa2d 	bl	8009530 <osMutexNew>
 80170d6:	4602      	mov	r2, r0
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d102      	bne.n	80170ea <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80170e4:	f04f 33ff 	mov.w	r3, #4294967295
 80170e8:	e000      	b.n	80170ec <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80170ea:	2300      	movs	r3, #0
}
 80170ec:	4618      	mov	r0, r3
 80170ee:	3708      	adds	r7, #8
 80170f0:	46bd      	mov	sp, r7
 80170f2:	bd80      	pop	{r7, pc}

080170f4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80170f4:	b580      	push	{r7, lr}
 80170f6:	b082      	sub	sp, #8
 80170f8:	af00      	add	r7, sp, #0
 80170fa:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	681b      	ldr	r3, [r3, #0]
 8017100:	f04f 31ff 	mov.w	r1, #4294967295
 8017104:	4618      	mov	r0, r3
 8017106:	f7f2 faad 	bl	8009664 <osMutexAcquire>
#endif
}
 801710a:	bf00      	nop
 801710c:	3708      	adds	r7, #8
 801710e:	46bd      	mov	sp, r7
 8017110:	bd80      	pop	{r7, pc}

08017112 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017112:	b580      	push	{r7, lr}
 8017114:	b082      	sub	sp, #8
 8017116:	af00      	add	r7, sp, #0
 8017118:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	681b      	ldr	r3, [r3, #0]
 801711e:	4618      	mov	r0, r3
 8017120:	f7f2 fafe 	bl	8009720 <osMutexRelease>
}
 8017124:	bf00      	nop
 8017126:	3708      	adds	r7, #8
 8017128:	46bd      	mov	sp, r7
 801712a:	bd80      	pop	{r7, pc}

0801712c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801712c:	b580      	push	{r7, lr}
 801712e:	b08e      	sub	sp, #56	; 0x38
 8017130:	af00      	add	r7, sp, #0
 8017132:	60f8      	str	r0, [r7, #12]
 8017134:	60b9      	str	r1, [r7, #8]
 8017136:	607a      	str	r2, [r7, #4]
 8017138:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801713a:	f107 0314 	add.w	r3, r7, #20
 801713e:	2224      	movs	r2, #36	; 0x24
 8017140:	2100      	movs	r1, #0
 8017142:	4618      	mov	r0, r3
 8017144:	f000 f872 	bl	801722c <memset>
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	617b      	str	r3, [r7, #20]
 801714c:	683b      	ldr	r3, [r7, #0]
 801714e:	62bb      	str	r3, [r7, #40]	; 0x28
 8017150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017152:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8017154:	f107 0314 	add.w	r3, r7, #20
 8017158:	461a      	mov	r2, r3
 801715a:	6879      	ldr	r1, [r7, #4]
 801715c:	68b8      	ldr	r0, [r7, #8]
 801715e:	f7f2 f913 	bl	8009388 <osThreadNew>
 8017162:	4603      	mov	r3, r0
#endif
}
 8017164:	4618      	mov	r0, r3
 8017166:	3738      	adds	r7, #56	; 0x38
 8017168:	46bd      	mov	sp, r7
 801716a:	bd80      	pop	{r7, pc}

0801716c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801716c:	b580      	push	{r7, lr}
 801716e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8017170:	4b04      	ldr	r3, [pc, #16]	; (8017184 <sys_arch_protect+0x18>)
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	f04f 31ff 	mov.w	r1, #4294967295
 8017178:	4618      	mov	r0, r3
 801717a:	f7f2 fa73 	bl	8009664 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801717e:	2301      	movs	r3, #1
}
 8017180:	4618      	mov	r0, r3
 8017182:	bd80      	pop	{r7, pc}
 8017184:	200111c4 	.word	0x200111c4

08017188 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017188:	b580      	push	{r7, lr}
 801718a:	b082      	sub	sp, #8
 801718c:	af00      	add	r7, sp, #0
 801718e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017190:	4b04      	ldr	r3, [pc, #16]	; (80171a4 <sys_arch_unprotect+0x1c>)
 8017192:	681b      	ldr	r3, [r3, #0]
 8017194:	4618      	mov	r0, r3
 8017196:	f7f2 fac3 	bl	8009720 <osMutexRelease>
}
 801719a:	bf00      	nop
 801719c:	3708      	adds	r7, #8
 801719e:	46bd      	mov	sp, r7
 80171a0:	bd80      	pop	{r7, pc}
 80171a2:	bf00      	nop
 80171a4:	200111c4 	.word	0x200111c4

080171a8 <__libc_init_array>:
 80171a8:	b570      	push	{r4, r5, r6, lr}
 80171aa:	4d0d      	ldr	r5, [pc, #52]	; (80171e0 <__libc_init_array+0x38>)
 80171ac:	4c0d      	ldr	r4, [pc, #52]	; (80171e4 <__libc_init_array+0x3c>)
 80171ae:	1b64      	subs	r4, r4, r5
 80171b0:	10a4      	asrs	r4, r4, #2
 80171b2:	2600      	movs	r6, #0
 80171b4:	42a6      	cmp	r6, r4
 80171b6:	d109      	bne.n	80171cc <__libc_init_array+0x24>
 80171b8:	4d0b      	ldr	r5, [pc, #44]	; (80171e8 <__libc_init_array+0x40>)
 80171ba:	4c0c      	ldr	r4, [pc, #48]	; (80171ec <__libc_init_array+0x44>)
 80171bc:	f001 f904 	bl	80183c8 <_init>
 80171c0:	1b64      	subs	r4, r4, r5
 80171c2:	10a4      	asrs	r4, r4, #2
 80171c4:	2600      	movs	r6, #0
 80171c6:	42a6      	cmp	r6, r4
 80171c8:	d105      	bne.n	80171d6 <__libc_init_array+0x2e>
 80171ca:	bd70      	pop	{r4, r5, r6, pc}
 80171cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80171d0:	4798      	blx	r3
 80171d2:	3601      	adds	r6, #1
 80171d4:	e7ee      	b.n	80171b4 <__libc_init_array+0xc>
 80171d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80171da:	4798      	blx	r3
 80171dc:	3601      	adds	r6, #1
 80171de:	e7f2      	b.n	80171c6 <__libc_init_array+0x1e>
 80171e0:	0801b380 	.word	0x0801b380
 80171e4:	0801b380 	.word	0x0801b380
 80171e8:	0801b380 	.word	0x0801b380
 80171ec:	0801b384 	.word	0x0801b384

080171f0 <memcmp>:
 80171f0:	b510      	push	{r4, lr}
 80171f2:	3901      	subs	r1, #1
 80171f4:	4402      	add	r2, r0
 80171f6:	4290      	cmp	r0, r2
 80171f8:	d101      	bne.n	80171fe <memcmp+0xe>
 80171fa:	2000      	movs	r0, #0
 80171fc:	e005      	b.n	801720a <memcmp+0x1a>
 80171fe:	7803      	ldrb	r3, [r0, #0]
 8017200:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017204:	42a3      	cmp	r3, r4
 8017206:	d001      	beq.n	801720c <memcmp+0x1c>
 8017208:	1b18      	subs	r0, r3, r4
 801720a:	bd10      	pop	{r4, pc}
 801720c:	3001      	adds	r0, #1
 801720e:	e7f2      	b.n	80171f6 <memcmp+0x6>

08017210 <memcpy>:
 8017210:	440a      	add	r2, r1
 8017212:	4291      	cmp	r1, r2
 8017214:	f100 33ff 	add.w	r3, r0, #4294967295
 8017218:	d100      	bne.n	801721c <memcpy+0xc>
 801721a:	4770      	bx	lr
 801721c:	b510      	push	{r4, lr}
 801721e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017222:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017226:	4291      	cmp	r1, r2
 8017228:	d1f9      	bne.n	801721e <memcpy+0xe>
 801722a:	bd10      	pop	{r4, pc}

0801722c <memset>:
 801722c:	4402      	add	r2, r0
 801722e:	4603      	mov	r3, r0
 8017230:	4293      	cmp	r3, r2
 8017232:	d100      	bne.n	8017236 <memset+0xa>
 8017234:	4770      	bx	lr
 8017236:	f803 1b01 	strb.w	r1, [r3], #1
 801723a:	e7f9      	b.n	8017230 <memset+0x4>

0801723c <iprintf>:
 801723c:	b40f      	push	{r0, r1, r2, r3}
 801723e:	4b0a      	ldr	r3, [pc, #40]	; (8017268 <iprintf+0x2c>)
 8017240:	b513      	push	{r0, r1, r4, lr}
 8017242:	681c      	ldr	r4, [r3, #0]
 8017244:	b124      	cbz	r4, 8017250 <iprintf+0x14>
 8017246:	69a3      	ldr	r3, [r4, #24]
 8017248:	b913      	cbnz	r3, 8017250 <iprintf+0x14>
 801724a:	4620      	mov	r0, r4
 801724c:	f000 faba 	bl	80177c4 <__sinit>
 8017250:	ab05      	add	r3, sp, #20
 8017252:	9a04      	ldr	r2, [sp, #16]
 8017254:	68a1      	ldr	r1, [r4, #8]
 8017256:	9301      	str	r3, [sp, #4]
 8017258:	4620      	mov	r0, r4
 801725a:	f000 fcdd 	bl	8017c18 <_vfiprintf_r>
 801725e:	b002      	add	sp, #8
 8017260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017264:	b004      	add	sp, #16
 8017266:	4770      	bx	lr
 8017268:	20000030 	.word	0x20000030

0801726c <_puts_r>:
 801726c:	b570      	push	{r4, r5, r6, lr}
 801726e:	460e      	mov	r6, r1
 8017270:	4605      	mov	r5, r0
 8017272:	b118      	cbz	r0, 801727c <_puts_r+0x10>
 8017274:	6983      	ldr	r3, [r0, #24]
 8017276:	b90b      	cbnz	r3, 801727c <_puts_r+0x10>
 8017278:	f000 faa4 	bl	80177c4 <__sinit>
 801727c:	69ab      	ldr	r3, [r5, #24]
 801727e:	68ac      	ldr	r4, [r5, #8]
 8017280:	b913      	cbnz	r3, 8017288 <_puts_r+0x1c>
 8017282:	4628      	mov	r0, r5
 8017284:	f000 fa9e 	bl	80177c4 <__sinit>
 8017288:	4b2c      	ldr	r3, [pc, #176]	; (801733c <_puts_r+0xd0>)
 801728a:	429c      	cmp	r4, r3
 801728c:	d120      	bne.n	80172d0 <_puts_r+0x64>
 801728e:	686c      	ldr	r4, [r5, #4]
 8017290:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017292:	07db      	lsls	r3, r3, #31
 8017294:	d405      	bmi.n	80172a2 <_puts_r+0x36>
 8017296:	89a3      	ldrh	r3, [r4, #12]
 8017298:	0598      	lsls	r0, r3, #22
 801729a:	d402      	bmi.n	80172a2 <_puts_r+0x36>
 801729c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801729e:	f000 fb41 	bl	8017924 <__retarget_lock_acquire_recursive>
 80172a2:	89a3      	ldrh	r3, [r4, #12]
 80172a4:	0719      	lsls	r1, r3, #28
 80172a6:	d51d      	bpl.n	80172e4 <_puts_r+0x78>
 80172a8:	6923      	ldr	r3, [r4, #16]
 80172aa:	b1db      	cbz	r3, 80172e4 <_puts_r+0x78>
 80172ac:	3e01      	subs	r6, #1
 80172ae:	68a3      	ldr	r3, [r4, #8]
 80172b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80172b4:	3b01      	subs	r3, #1
 80172b6:	60a3      	str	r3, [r4, #8]
 80172b8:	bb39      	cbnz	r1, 801730a <_puts_r+0x9e>
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	da38      	bge.n	8017330 <_puts_r+0xc4>
 80172be:	4622      	mov	r2, r4
 80172c0:	210a      	movs	r1, #10
 80172c2:	4628      	mov	r0, r5
 80172c4:	f000 f886 	bl	80173d4 <__swbuf_r>
 80172c8:	3001      	adds	r0, #1
 80172ca:	d011      	beq.n	80172f0 <_puts_r+0x84>
 80172cc:	250a      	movs	r5, #10
 80172ce:	e011      	b.n	80172f4 <_puts_r+0x88>
 80172d0:	4b1b      	ldr	r3, [pc, #108]	; (8017340 <_puts_r+0xd4>)
 80172d2:	429c      	cmp	r4, r3
 80172d4:	d101      	bne.n	80172da <_puts_r+0x6e>
 80172d6:	68ac      	ldr	r4, [r5, #8]
 80172d8:	e7da      	b.n	8017290 <_puts_r+0x24>
 80172da:	4b1a      	ldr	r3, [pc, #104]	; (8017344 <_puts_r+0xd8>)
 80172dc:	429c      	cmp	r4, r3
 80172de:	bf08      	it	eq
 80172e0:	68ec      	ldreq	r4, [r5, #12]
 80172e2:	e7d5      	b.n	8017290 <_puts_r+0x24>
 80172e4:	4621      	mov	r1, r4
 80172e6:	4628      	mov	r0, r5
 80172e8:	f000 f8c6 	bl	8017478 <__swsetup_r>
 80172ec:	2800      	cmp	r0, #0
 80172ee:	d0dd      	beq.n	80172ac <_puts_r+0x40>
 80172f0:	f04f 35ff 	mov.w	r5, #4294967295
 80172f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80172f6:	07da      	lsls	r2, r3, #31
 80172f8:	d405      	bmi.n	8017306 <_puts_r+0x9a>
 80172fa:	89a3      	ldrh	r3, [r4, #12]
 80172fc:	059b      	lsls	r3, r3, #22
 80172fe:	d402      	bmi.n	8017306 <_puts_r+0x9a>
 8017300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017302:	f000 fb10 	bl	8017926 <__retarget_lock_release_recursive>
 8017306:	4628      	mov	r0, r5
 8017308:	bd70      	pop	{r4, r5, r6, pc}
 801730a:	2b00      	cmp	r3, #0
 801730c:	da04      	bge.n	8017318 <_puts_r+0xac>
 801730e:	69a2      	ldr	r2, [r4, #24]
 8017310:	429a      	cmp	r2, r3
 8017312:	dc06      	bgt.n	8017322 <_puts_r+0xb6>
 8017314:	290a      	cmp	r1, #10
 8017316:	d004      	beq.n	8017322 <_puts_r+0xb6>
 8017318:	6823      	ldr	r3, [r4, #0]
 801731a:	1c5a      	adds	r2, r3, #1
 801731c:	6022      	str	r2, [r4, #0]
 801731e:	7019      	strb	r1, [r3, #0]
 8017320:	e7c5      	b.n	80172ae <_puts_r+0x42>
 8017322:	4622      	mov	r2, r4
 8017324:	4628      	mov	r0, r5
 8017326:	f000 f855 	bl	80173d4 <__swbuf_r>
 801732a:	3001      	adds	r0, #1
 801732c:	d1bf      	bne.n	80172ae <_puts_r+0x42>
 801732e:	e7df      	b.n	80172f0 <_puts_r+0x84>
 8017330:	6823      	ldr	r3, [r4, #0]
 8017332:	250a      	movs	r5, #10
 8017334:	1c5a      	adds	r2, r3, #1
 8017336:	6022      	str	r2, [r4, #0]
 8017338:	701d      	strb	r5, [r3, #0]
 801733a:	e7db      	b.n	80172f4 <_puts_r+0x88>
 801733c:	0801b304 	.word	0x0801b304
 8017340:	0801b324 	.word	0x0801b324
 8017344:	0801b2e4 	.word	0x0801b2e4

08017348 <puts>:
 8017348:	4b02      	ldr	r3, [pc, #8]	; (8017354 <puts+0xc>)
 801734a:	4601      	mov	r1, r0
 801734c:	6818      	ldr	r0, [r3, #0]
 801734e:	f7ff bf8d 	b.w	801726c <_puts_r>
 8017352:	bf00      	nop
 8017354:	20000030 	.word	0x20000030

08017358 <rand>:
 8017358:	4b16      	ldr	r3, [pc, #88]	; (80173b4 <rand+0x5c>)
 801735a:	b510      	push	{r4, lr}
 801735c:	681c      	ldr	r4, [r3, #0]
 801735e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017360:	b9b3      	cbnz	r3, 8017390 <rand+0x38>
 8017362:	2018      	movs	r0, #24
 8017364:	f000 fb46 	bl	80179f4 <malloc>
 8017368:	63a0      	str	r0, [r4, #56]	; 0x38
 801736a:	b928      	cbnz	r0, 8017378 <rand+0x20>
 801736c:	4602      	mov	r2, r0
 801736e:	4b12      	ldr	r3, [pc, #72]	; (80173b8 <rand+0x60>)
 8017370:	4812      	ldr	r0, [pc, #72]	; (80173bc <rand+0x64>)
 8017372:	214e      	movs	r1, #78	; 0x4e
 8017374:	f000 f8ee 	bl	8017554 <__assert_func>
 8017378:	4a11      	ldr	r2, [pc, #68]	; (80173c0 <rand+0x68>)
 801737a:	4b12      	ldr	r3, [pc, #72]	; (80173c4 <rand+0x6c>)
 801737c:	e9c0 2300 	strd	r2, r3, [r0]
 8017380:	4b11      	ldr	r3, [pc, #68]	; (80173c8 <rand+0x70>)
 8017382:	6083      	str	r3, [r0, #8]
 8017384:	230b      	movs	r3, #11
 8017386:	8183      	strh	r3, [r0, #12]
 8017388:	2201      	movs	r2, #1
 801738a:	2300      	movs	r3, #0
 801738c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017390:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8017392:	4a0e      	ldr	r2, [pc, #56]	; (80173cc <rand+0x74>)
 8017394:	6920      	ldr	r0, [r4, #16]
 8017396:	6963      	ldr	r3, [r4, #20]
 8017398:	490d      	ldr	r1, [pc, #52]	; (80173d0 <rand+0x78>)
 801739a:	4342      	muls	r2, r0
 801739c:	fb01 2203 	mla	r2, r1, r3, r2
 80173a0:	fba0 0101 	umull	r0, r1, r0, r1
 80173a4:	1c43      	adds	r3, r0, #1
 80173a6:	eb42 0001 	adc.w	r0, r2, r1
 80173aa:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80173ae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80173b2:	bd10      	pop	{r4, pc}
 80173b4:	20000030 	.word	0x20000030
 80173b8:	0801b234 	.word	0x0801b234
 80173bc:	0801b24b 	.word	0x0801b24b
 80173c0:	abcd330e 	.word	0xabcd330e
 80173c4:	e66d1234 	.word	0xe66d1234
 80173c8:	0005deec 	.word	0x0005deec
 80173cc:	5851f42d 	.word	0x5851f42d
 80173d0:	4c957f2d 	.word	0x4c957f2d

080173d4 <__swbuf_r>:
 80173d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173d6:	460e      	mov	r6, r1
 80173d8:	4614      	mov	r4, r2
 80173da:	4605      	mov	r5, r0
 80173dc:	b118      	cbz	r0, 80173e6 <__swbuf_r+0x12>
 80173de:	6983      	ldr	r3, [r0, #24]
 80173e0:	b90b      	cbnz	r3, 80173e6 <__swbuf_r+0x12>
 80173e2:	f000 f9ef 	bl	80177c4 <__sinit>
 80173e6:	4b21      	ldr	r3, [pc, #132]	; (801746c <__swbuf_r+0x98>)
 80173e8:	429c      	cmp	r4, r3
 80173ea:	d12b      	bne.n	8017444 <__swbuf_r+0x70>
 80173ec:	686c      	ldr	r4, [r5, #4]
 80173ee:	69a3      	ldr	r3, [r4, #24]
 80173f0:	60a3      	str	r3, [r4, #8]
 80173f2:	89a3      	ldrh	r3, [r4, #12]
 80173f4:	071a      	lsls	r2, r3, #28
 80173f6:	d52f      	bpl.n	8017458 <__swbuf_r+0x84>
 80173f8:	6923      	ldr	r3, [r4, #16]
 80173fa:	b36b      	cbz	r3, 8017458 <__swbuf_r+0x84>
 80173fc:	6923      	ldr	r3, [r4, #16]
 80173fe:	6820      	ldr	r0, [r4, #0]
 8017400:	1ac0      	subs	r0, r0, r3
 8017402:	6963      	ldr	r3, [r4, #20]
 8017404:	b2f6      	uxtb	r6, r6
 8017406:	4283      	cmp	r3, r0
 8017408:	4637      	mov	r7, r6
 801740a:	dc04      	bgt.n	8017416 <__swbuf_r+0x42>
 801740c:	4621      	mov	r1, r4
 801740e:	4628      	mov	r0, r5
 8017410:	f000 f944 	bl	801769c <_fflush_r>
 8017414:	bb30      	cbnz	r0, 8017464 <__swbuf_r+0x90>
 8017416:	68a3      	ldr	r3, [r4, #8]
 8017418:	3b01      	subs	r3, #1
 801741a:	60a3      	str	r3, [r4, #8]
 801741c:	6823      	ldr	r3, [r4, #0]
 801741e:	1c5a      	adds	r2, r3, #1
 8017420:	6022      	str	r2, [r4, #0]
 8017422:	701e      	strb	r6, [r3, #0]
 8017424:	6963      	ldr	r3, [r4, #20]
 8017426:	3001      	adds	r0, #1
 8017428:	4283      	cmp	r3, r0
 801742a:	d004      	beq.n	8017436 <__swbuf_r+0x62>
 801742c:	89a3      	ldrh	r3, [r4, #12]
 801742e:	07db      	lsls	r3, r3, #31
 8017430:	d506      	bpl.n	8017440 <__swbuf_r+0x6c>
 8017432:	2e0a      	cmp	r6, #10
 8017434:	d104      	bne.n	8017440 <__swbuf_r+0x6c>
 8017436:	4621      	mov	r1, r4
 8017438:	4628      	mov	r0, r5
 801743a:	f000 f92f 	bl	801769c <_fflush_r>
 801743e:	b988      	cbnz	r0, 8017464 <__swbuf_r+0x90>
 8017440:	4638      	mov	r0, r7
 8017442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017444:	4b0a      	ldr	r3, [pc, #40]	; (8017470 <__swbuf_r+0x9c>)
 8017446:	429c      	cmp	r4, r3
 8017448:	d101      	bne.n	801744e <__swbuf_r+0x7a>
 801744a:	68ac      	ldr	r4, [r5, #8]
 801744c:	e7cf      	b.n	80173ee <__swbuf_r+0x1a>
 801744e:	4b09      	ldr	r3, [pc, #36]	; (8017474 <__swbuf_r+0xa0>)
 8017450:	429c      	cmp	r4, r3
 8017452:	bf08      	it	eq
 8017454:	68ec      	ldreq	r4, [r5, #12]
 8017456:	e7ca      	b.n	80173ee <__swbuf_r+0x1a>
 8017458:	4621      	mov	r1, r4
 801745a:	4628      	mov	r0, r5
 801745c:	f000 f80c 	bl	8017478 <__swsetup_r>
 8017460:	2800      	cmp	r0, #0
 8017462:	d0cb      	beq.n	80173fc <__swbuf_r+0x28>
 8017464:	f04f 37ff 	mov.w	r7, #4294967295
 8017468:	e7ea      	b.n	8017440 <__swbuf_r+0x6c>
 801746a:	bf00      	nop
 801746c:	0801b304 	.word	0x0801b304
 8017470:	0801b324 	.word	0x0801b324
 8017474:	0801b2e4 	.word	0x0801b2e4

08017478 <__swsetup_r>:
 8017478:	4b32      	ldr	r3, [pc, #200]	; (8017544 <__swsetup_r+0xcc>)
 801747a:	b570      	push	{r4, r5, r6, lr}
 801747c:	681d      	ldr	r5, [r3, #0]
 801747e:	4606      	mov	r6, r0
 8017480:	460c      	mov	r4, r1
 8017482:	b125      	cbz	r5, 801748e <__swsetup_r+0x16>
 8017484:	69ab      	ldr	r3, [r5, #24]
 8017486:	b913      	cbnz	r3, 801748e <__swsetup_r+0x16>
 8017488:	4628      	mov	r0, r5
 801748a:	f000 f99b 	bl	80177c4 <__sinit>
 801748e:	4b2e      	ldr	r3, [pc, #184]	; (8017548 <__swsetup_r+0xd0>)
 8017490:	429c      	cmp	r4, r3
 8017492:	d10f      	bne.n	80174b4 <__swsetup_r+0x3c>
 8017494:	686c      	ldr	r4, [r5, #4]
 8017496:	89a3      	ldrh	r3, [r4, #12]
 8017498:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801749c:	0719      	lsls	r1, r3, #28
 801749e:	d42c      	bmi.n	80174fa <__swsetup_r+0x82>
 80174a0:	06dd      	lsls	r5, r3, #27
 80174a2:	d411      	bmi.n	80174c8 <__swsetup_r+0x50>
 80174a4:	2309      	movs	r3, #9
 80174a6:	6033      	str	r3, [r6, #0]
 80174a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80174ac:	81a3      	strh	r3, [r4, #12]
 80174ae:	f04f 30ff 	mov.w	r0, #4294967295
 80174b2:	e03e      	b.n	8017532 <__swsetup_r+0xba>
 80174b4:	4b25      	ldr	r3, [pc, #148]	; (801754c <__swsetup_r+0xd4>)
 80174b6:	429c      	cmp	r4, r3
 80174b8:	d101      	bne.n	80174be <__swsetup_r+0x46>
 80174ba:	68ac      	ldr	r4, [r5, #8]
 80174bc:	e7eb      	b.n	8017496 <__swsetup_r+0x1e>
 80174be:	4b24      	ldr	r3, [pc, #144]	; (8017550 <__swsetup_r+0xd8>)
 80174c0:	429c      	cmp	r4, r3
 80174c2:	bf08      	it	eq
 80174c4:	68ec      	ldreq	r4, [r5, #12]
 80174c6:	e7e6      	b.n	8017496 <__swsetup_r+0x1e>
 80174c8:	0758      	lsls	r0, r3, #29
 80174ca:	d512      	bpl.n	80174f2 <__swsetup_r+0x7a>
 80174cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80174ce:	b141      	cbz	r1, 80174e2 <__swsetup_r+0x6a>
 80174d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80174d4:	4299      	cmp	r1, r3
 80174d6:	d002      	beq.n	80174de <__swsetup_r+0x66>
 80174d8:	4630      	mov	r0, r6
 80174da:	f000 fa93 	bl	8017a04 <_free_r>
 80174de:	2300      	movs	r3, #0
 80174e0:	6363      	str	r3, [r4, #52]	; 0x34
 80174e2:	89a3      	ldrh	r3, [r4, #12]
 80174e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80174e8:	81a3      	strh	r3, [r4, #12]
 80174ea:	2300      	movs	r3, #0
 80174ec:	6063      	str	r3, [r4, #4]
 80174ee:	6923      	ldr	r3, [r4, #16]
 80174f0:	6023      	str	r3, [r4, #0]
 80174f2:	89a3      	ldrh	r3, [r4, #12]
 80174f4:	f043 0308 	orr.w	r3, r3, #8
 80174f8:	81a3      	strh	r3, [r4, #12]
 80174fa:	6923      	ldr	r3, [r4, #16]
 80174fc:	b94b      	cbnz	r3, 8017512 <__swsetup_r+0x9a>
 80174fe:	89a3      	ldrh	r3, [r4, #12]
 8017500:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017508:	d003      	beq.n	8017512 <__swsetup_r+0x9a>
 801750a:	4621      	mov	r1, r4
 801750c:	4630      	mov	r0, r6
 801750e:	f000 fa31 	bl	8017974 <__smakebuf_r>
 8017512:	89a0      	ldrh	r0, [r4, #12]
 8017514:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017518:	f010 0301 	ands.w	r3, r0, #1
 801751c:	d00a      	beq.n	8017534 <__swsetup_r+0xbc>
 801751e:	2300      	movs	r3, #0
 8017520:	60a3      	str	r3, [r4, #8]
 8017522:	6963      	ldr	r3, [r4, #20]
 8017524:	425b      	negs	r3, r3
 8017526:	61a3      	str	r3, [r4, #24]
 8017528:	6923      	ldr	r3, [r4, #16]
 801752a:	b943      	cbnz	r3, 801753e <__swsetup_r+0xc6>
 801752c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017530:	d1ba      	bne.n	80174a8 <__swsetup_r+0x30>
 8017532:	bd70      	pop	{r4, r5, r6, pc}
 8017534:	0781      	lsls	r1, r0, #30
 8017536:	bf58      	it	pl
 8017538:	6963      	ldrpl	r3, [r4, #20]
 801753a:	60a3      	str	r3, [r4, #8]
 801753c:	e7f4      	b.n	8017528 <__swsetup_r+0xb0>
 801753e:	2000      	movs	r0, #0
 8017540:	e7f7      	b.n	8017532 <__swsetup_r+0xba>
 8017542:	bf00      	nop
 8017544:	20000030 	.word	0x20000030
 8017548:	0801b304 	.word	0x0801b304
 801754c:	0801b324 	.word	0x0801b324
 8017550:	0801b2e4 	.word	0x0801b2e4

08017554 <__assert_func>:
 8017554:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017556:	4614      	mov	r4, r2
 8017558:	461a      	mov	r2, r3
 801755a:	4b09      	ldr	r3, [pc, #36]	; (8017580 <__assert_func+0x2c>)
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	4605      	mov	r5, r0
 8017560:	68d8      	ldr	r0, [r3, #12]
 8017562:	b14c      	cbz	r4, 8017578 <__assert_func+0x24>
 8017564:	4b07      	ldr	r3, [pc, #28]	; (8017584 <__assert_func+0x30>)
 8017566:	9100      	str	r1, [sp, #0]
 8017568:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801756c:	4906      	ldr	r1, [pc, #24]	; (8017588 <__assert_func+0x34>)
 801756e:	462b      	mov	r3, r5
 8017570:	f000 f9a6 	bl	80178c0 <fiprintf>
 8017574:	f000 fe7a 	bl	801826c <abort>
 8017578:	4b04      	ldr	r3, [pc, #16]	; (801758c <__assert_func+0x38>)
 801757a:	461c      	mov	r4, r3
 801757c:	e7f3      	b.n	8017566 <__assert_func+0x12>
 801757e:	bf00      	nop
 8017580:	20000030 	.word	0x20000030
 8017584:	0801b2a6 	.word	0x0801b2a6
 8017588:	0801b2b3 	.word	0x0801b2b3
 801758c:	0801b2e1 	.word	0x0801b2e1

08017590 <__sflush_r>:
 8017590:	898a      	ldrh	r2, [r1, #12]
 8017592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017596:	4605      	mov	r5, r0
 8017598:	0710      	lsls	r0, r2, #28
 801759a:	460c      	mov	r4, r1
 801759c:	d458      	bmi.n	8017650 <__sflush_r+0xc0>
 801759e:	684b      	ldr	r3, [r1, #4]
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	dc05      	bgt.n	80175b0 <__sflush_r+0x20>
 80175a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	dc02      	bgt.n	80175b0 <__sflush_r+0x20>
 80175aa:	2000      	movs	r0, #0
 80175ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80175b2:	2e00      	cmp	r6, #0
 80175b4:	d0f9      	beq.n	80175aa <__sflush_r+0x1a>
 80175b6:	2300      	movs	r3, #0
 80175b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80175bc:	682f      	ldr	r7, [r5, #0]
 80175be:	602b      	str	r3, [r5, #0]
 80175c0:	d032      	beq.n	8017628 <__sflush_r+0x98>
 80175c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80175c4:	89a3      	ldrh	r3, [r4, #12]
 80175c6:	075a      	lsls	r2, r3, #29
 80175c8:	d505      	bpl.n	80175d6 <__sflush_r+0x46>
 80175ca:	6863      	ldr	r3, [r4, #4]
 80175cc:	1ac0      	subs	r0, r0, r3
 80175ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80175d0:	b10b      	cbz	r3, 80175d6 <__sflush_r+0x46>
 80175d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80175d4:	1ac0      	subs	r0, r0, r3
 80175d6:	2300      	movs	r3, #0
 80175d8:	4602      	mov	r2, r0
 80175da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80175dc:	6a21      	ldr	r1, [r4, #32]
 80175de:	4628      	mov	r0, r5
 80175e0:	47b0      	blx	r6
 80175e2:	1c43      	adds	r3, r0, #1
 80175e4:	89a3      	ldrh	r3, [r4, #12]
 80175e6:	d106      	bne.n	80175f6 <__sflush_r+0x66>
 80175e8:	6829      	ldr	r1, [r5, #0]
 80175ea:	291d      	cmp	r1, #29
 80175ec:	d82c      	bhi.n	8017648 <__sflush_r+0xb8>
 80175ee:	4a2a      	ldr	r2, [pc, #168]	; (8017698 <__sflush_r+0x108>)
 80175f0:	40ca      	lsrs	r2, r1
 80175f2:	07d6      	lsls	r6, r2, #31
 80175f4:	d528      	bpl.n	8017648 <__sflush_r+0xb8>
 80175f6:	2200      	movs	r2, #0
 80175f8:	6062      	str	r2, [r4, #4]
 80175fa:	04d9      	lsls	r1, r3, #19
 80175fc:	6922      	ldr	r2, [r4, #16]
 80175fe:	6022      	str	r2, [r4, #0]
 8017600:	d504      	bpl.n	801760c <__sflush_r+0x7c>
 8017602:	1c42      	adds	r2, r0, #1
 8017604:	d101      	bne.n	801760a <__sflush_r+0x7a>
 8017606:	682b      	ldr	r3, [r5, #0]
 8017608:	b903      	cbnz	r3, 801760c <__sflush_r+0x7c>
 801760a:	6560      	str	r0, [r4, #84]	; 0x54
 801760c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801760e:	602f      	str	r7, [r5, #0]
 8017610:	2900      	cmp	r1, #0
 8017612:	d0ca      	beq.n	80175aa <__sflush_r+0x1a>
 8017614:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017618:	4299      	cmp	r1, r3
 801761a:	d002      	beq.n	8017622 <__sflush_r+0x92>
 801761c:	4628      	mov	r0, r5
 801761e:	f000 f9f1 	bl	8017a04 <_free_r>
 8017622:	2000      	movs	r0, #0
 8017624:	6360      	str	r0, [r4, #52]	; 0x34
 8017626:	e7c1      	b.n	80175ac <__sflush_r+0x1c>
 8017628:	6a21      	ldr	r1, [r4, #32]
 801762a:	2301      	movs	r3, #1
 801762c:	4628      	mov	r0, r5
 801762e:	47b0      	blx	r6
 8017630:	1c41      	adds	r1, r0, #1
 8017632:	d1c7      	bne.n	80175c4 <__sflush_r+0x34>
 8017634:	682b      	ldr	r3, [r5, #0]
 8017636:	2b00      	cmp	r3, #0
 8017638:	d0c4      	beq.n	80175c4 <__sflush_r+0x34>
 801763a:	2b1d      	cmp	r3, #29
 801763c:	d001      	beq.n	8017642 <__sflush_r+0xb2>
 801763e:	2b16      	cmp	r3, #22
 8017640:	d101      	bne.n	8017646 <__sflush_r+0xb6>
 8017642:	602f      	str	r7, [r5, #0]
 8017644:	e7b1      	b.n	80175aa <__sflush_r+0x1a>
 8017646:	89a3      	ldrh	r3, [r4, #12]
 8017648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801764c:	81a3      	strh	r3, [r4, #12]
 801764e:	e7ad      	b.n	80175ac <__sflush_r+0x1c>
 8017650:	690f      	ldr	r7, [r1, #16]
 8017652:	2f00      	cmp	r7, #0
 8017654:	d0a9      	beq.n	80175aa <__sflush_r+0x1a>
 8017656:	0793      	lsls	r3, r2, #30
 8017658:	680e      	ldr	r6, [r1, #0]
 801765a:	bf08      	it	eq
 801765c:	694b      	ldreq	r3, [r1, #20]
 801765e:	600f      	str	r7, [r1, #0]
 8017660:	bf18      	it	ne
 8017662:	2300      	movne	r3, #0
 8017664:	eba6 0807 	sub.w	r8, r6, r7
 8017668:	608b      	str	r3, [r1, #8]
 801766a:	f1b8 0f00 	cmp.w	r8, #0
 801766e:	dd9c      	ble.n	80175aa <__sflush_r+0x1a>
 8017670:	6a21      	ldr	r1, [r4, #32]
 8017672:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017674:	4643      	mov	r3, r8
 8017676:	463a      	mov	r2, r7
 8017678:	4628      	mov	r0, r5
 801767a:	47b0      	blx	r6
 801767c:	2800      	cmp	r0, #0
 801767e:	dc06      	bgt.n	801768e <__sflush_r+0xfe>
 8017680:	89a3      	ldrh	r3, [r4, #12]
 8017682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017686:	81a3      	strh	r3, [r4, #12]
 8017688:	f04f 30ff 	mov.w	r0, #4294967295
 801768c:	e78e      	b.n	80175ac <__sflush_r+0x1c>
 801768e:	4407      	add	r7, r0
 8017690:	eba8 0800 	sub.w	r8, r8, r0
 8017694:	e7e9      	b.n	801766a <__sflush_r+0xda>
 8017696:	bf00      	nop
 8017698:	20400001 	.word	0x20400001

0801769c <_fflush_r>:
 801769c:	b538      	push	{r3, r4, r5, lr}
 801769e:	690b      	ldr	r3, [r1, #16]
 80176a0:	4605      	mov	r5, r0
 80176a2:	460c      	mov	r4, r1
 80176a4:	b913      	cbnz	r3, 80176ac <_fflush_r+0x10>
 80176a6:	2500      	movs	r5, #0
 80176a8:	4628      	mov	r0, r5
 80176aa:	bd38      	pop	{r3, r4, r5, pc}
 80176ac:	b118      	cbz	r0, 80176b6 <_fflush_r+0x1a>
 80176ae:	6983      	ldr	r3, [r0, #24]
 80176b0:	b90b      	cbnz	r3, 80176b6 <_fflush_r+0x1a>
 80176b2:	f000 f887 	bl	80177c4 <__sinit>
 80176b6:	4b14      	ldr	r3, [pc, #80]	; (8017708 <_fflush_r+0x6c>)
 80176b8:	429c      	cmp	r4, r3
 80176ba:	d11b      	bne.n	80176f4 <_fflush_r+0x58>
 80176bc:	686c      	ldr	r4, [r5, #4]
 80176be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d0ef      	beq.n	80176a6 <_fflush_r+0xa>
 80176c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80176c8:	07d0      	lsls	r0, r2, #31
 80176ca:	d404      	bmi.n	80176d6 <_fflush_r+0x3a>
 80176cc:	0599      	lsls	r1, r3, #22
 80176ce:	d402      	bmi.n	80176d6 <_fflush_r+0x3a>
 80176d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80176d2:	f000 f927 	bl	8017924 <__retarget_lock_acquire_recursive>
 80176d6:	4628      	mov	r0, r5
 80176d8:	4621      	mov	r1, r4
 80176da:	f7ff ff59 	bl	8017590 <__sflush_r>
 80176de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80176e0:	07da      	lsls	r2, r3, #31
 80176e2:	4605      	mov	r5, r0
 80176e4:	d4e0      	bmi.n	80176a8 <_fflush_r+0xc>
 80176e6:	89a3      	ldrh	r3, [r4, #12]
 80176e8:	059b      	lsls	r3, r3, #22
 80176ea:	d4dd      	bmi.n	80176a8 <_fflush_r+0xc>
 80176ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80176ee:	f000 f91a 	bl	8017926 <__retarget_lock_release_recursive>
 80176f2:	e7d9      	b.n	80176a8 <_fflush_r+0xc>
 80176f4:	4b05      	ldr	r3, [pc, #20]	; (801770c <_fflush_r+0x70>)
 80176f6:	429c      	cmp	r4, r3
 80176f8:	d101      	bne.n	80176fe <_fflush_r+0x62>
 80176fa:	68ac      	ldr	r4, [r5, #8]
 80176fc:	e7df      	b.n	80176be <_fflush_r+0x22>
 80176fe:	4b04      	ldr	r3, [pc, #16]	; (8017710 <_fflush_r+0x74>)
 8017700:	429c      	cmp	r4, r3
 8017702:	bf08      	it	eq
 8017704:	68ec      	ldreq	r4, [r5, #12]
 8017706:	e7da      	b.n	80176be <_fflush_r+0x22>
 8017708:	0801b304 	.word	0x0801b304
 801770c:	0801b324 	.word	0x0801b324
 8017710:	0801b2e4 	.word	0x0801b2e4

08017714 <std>:
 8017714:	2300      	movs	r3, #0
 8017716:	b510      	push	{r4, lr}
 8017718:	4604      	mov	r4, r0
 801771a:	e9c0 3300 	strd	r3, r3, [r0]
 801771e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017722:	6083      	str	r3, [r0, #8]
 8017724:	8181      	strh	r1, [r0, #12]
 8017726:	6643      	str	r3, [r0, #100]	; 0x64
 8017728:	81c2      	strh	r2, [r0, #14]
 801772a:	6183      	str	r3, [r0, #24]
 801772c:	4619      	mov	r1, r3
 801772e:	2208      	movs	r2, #8
 8017730:	305c      	adds	r0, #92	; 0x5c
 8017732:	f7ff fd7b 	bl	801722c <memset>
 8017736:	4b05      	ldr	r3, [pc, #20]	; (801774c <std+0x38>)
 8017738:	6263      	str	r3, [r4, #36]	; 0x24
 801773a:	4b05      	ldr	r3, [pc, #20]	; (8017750 <std+0x3c>)
 801773c:	62a3      	str	r3, [r4, #40]	; 0x28
 801773e:	4b05      	ldr	r3, [pc, #20]	; (8017754 <std+0x40>)
 8017740:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017742:	4b05      	ldr	r3, [pc, #20]	; (8017758 <std+0x44>)
 8017744:	6224      	str	r4, [r4, #32]
 8017746:	6323      	str	r3, [r4, #48]	; 0x30
 8017748:	bd10      	pop	{r4, pc}
 801774a:	bf00      	nop
 801774c:	080181c1 	.word	0x080181c1
 8017750:	080181e3 	.word	0x080181e3
 8017754:	0801821b 	.word	0x0801821b
 8017758:	0801823f 	.word	0x0801823f

0801775c <_cleanup_r>:
 801775c:	4901      	ldr	r1, [pc, #4]	; (8017764 <_cleanup_r+0x8>)
 801775e:	f000 b8c1 	b.w	80178e4 <_fwalk_reent>
 8017762:	bf00      	nop
 8017764:	0801769d 	.word	0x0801769d

08017768 <__sfmoreglue>:
 8017768:	b570      	push	{r4, r5, r6, lr}
 801776a:	2268      	movs	r2, #104	; 0x68
 801776c:	1e4d      	subs	r5, r1, #1
 801776e:	4355      	muls	r5, r2
 8017770:	460e      	mov	r6, r1
 8017772:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017776:	f000 f9b1 	bl	8017adc <_malloc_r>
 801777a:	4604      	mov	r4, r0
 801777c:	b140      	cbz	r0, 8017790 <__sfmoreglue+0x28>
 801777e:	2100      	movs	r1, #0
 8017780:	e9c0 1600 	strd	r1, r6, [r0]
 8017784:	300c      	adds	r0, #12
 8017786:	60a0      	str	r0, [r4, #8]
 8017788:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801778c:	f7ff fd4e 	bl	801722c <memset>
 8017790:	4620      	mov	r0, r4
 8017792:	bd70      	pop	{r4, r5, r6, pc}

08017794 <__sfp_lock_acquire>:
 8017794:	4801      	ldr	r0, [pc, #4]	; (801779c <__sfp_lock_acquire+0x8>)
 8017796:	f000 b8c5 	b.w	8017924 <__retarget_lock_acquire_recursive>
 801779a:	bf00      	nop
 801779c:	200111c9 	.word	0x200111c9

080177a0 <__sfp_lock_release>:
 80177a0:	4801      	ldr	r0, [pc, #4]	; (80177a8 <__sfp_lock_release+0x8>)
 80177a2:	f000 b8c0 	b.w	8017926 <__retarget_lock_release_recursive>
 80177a6:	bf00      	nop
 80177a8:	200111c9 	.word	0x200111c9

080177ac <__sinit_lock_acquire>:
 80177ac:	4801      	ldr	r0, [pc, #4]	; (80177b4 <__sinit_lock_acquire+0x8>)
 80177ae:	f000 b8b9 	b.w	8017924 <__retarget_lock_acquire_recursive>
 80177b2:	bf00      	nop
 80177b4:	200111ca 	.word	0x200111ca

080177b8 <__sinit_lock_release>:
 80177b8:	4801      	ldr	r0, [pc, #4]	; (80177c0 <__sinit_lock_release+0x8>)
 80177ba:	f000 b8b4 	b.w	8017926 <__retarget_lock_release_recursive>
 80177be:	bf00      	nop
 80177c0:	200111ca 	.word	0x200111ca

080177c4 <__sinit>:
 80177c4:	b510      	push	{r4, lr}
 80177c6:	4604      	mov	r4, r0
 80177c8:	f7ff fff0 	bl	80177ac <__sinit_lock_acquire>
 80177cc:	69a3      	ldr	r3, [r4, #24]
 80177ce:	b11b      	cbz	r3, 80177d8 <__sinit+0x14>
 80177d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177d4:	f7ff bff0 	b.w	80177b8 <__sinit_lock_release>
 80177d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80177dc:	6523      	str	r3, [r4, #80]	; 0x50
 80177de:	4b13      	ldr	r3, [pc, #76]	; (801782c <__sinit+0x68>)
 80177e0:	4a13      	ldr	r2, [pc, #76]	; (8017830 <__sinit+0x6c>)
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80177e6:	42a3      	cmp	r3, r4
 80177e8:	bf04      	itt	eq
 80177ea:	2301      	moveq	r3, #1
 80177ec:	61a3      	streq	r3, [r4, #24]
 80177ee:	4620      	mov	r0, r4
 80177f0:	f000 f820 	bl	8017834 <__sfp>
 80177f4:	6060      	str	r0, [r4, #4]
 80177f6:	4620      	mov	r0, r4
 80177f8:	f000 f81c 	bl	8017834 <__sfp>
 80177fc:	60a0      	str	r0, [r4, #8]
 80177fe:	4620      	mov	r0, r4
 8017800:	f000 f818 	bl	8017834 <__sfp>
 8017804:	2200      	movs	r2, #0
 8017806:	60e0      	str	r0, [r4, #12]
 8017808:	2104      	movs	r1, #4
 801780a:	6860      	ldr	r0, [r4, #4]
 801780c:	f7ff ff82 	bl	8017714 <std>
 8017810:	68a0      	ldr	r0, [r4, #8]
 8017812:	2201      	movs	r2, #1
 8017814:	2109      	movs	r1, #9
 8017816:	f7ff ff7d 	bl	8017714 <std>
 801781a:	68e0      	ldr	r0, [r4, #12]
 801781c:	2202      	movs	r2, #2
 801781e:	2112      	movs	r1, #18
 8017820:	f7ff ff78 	bl	8017714 <std>
 8017824:	2301      	movs	r3, #1
 8017826:	61a3      	str	r3, [r4, #24]
 8017828:	e7d2      	b.n	80177d0 <__sinit+0xc>
 801782a:	bf00      	nop
 801782c:	0801b230 	.word	0x0801b230
 8017830:	0801775d 	.word	0x0801775d

08017834 <__sfp>:
 8017834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017836:	4607      	mov	r7, r0
 8017838:	f7ff ffac 	bl	8017794 <__sfp_lock_acquire>
 801783c:	4b1e      	ldr	r3, [pc, #120]	; (80178b8 <__sfp+0x84>)
 801783e:	681e      	ldr	r6, [r3, #0]
 8017840:	69b3      	ldr	r3, [r6, #24]
 8017842:	b913      	cbnz	r3, 801784a <__sfp+0x16>
 8017844:	4630      	mov	r0, r6
 8017846:	f7ff ffbd 	bl	80177c4 <__sinit>
 801784a:	3648      	adds	r6, #72	; 0x48
 801784c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017850:	3b01      	subs	r3, #1
 8017852:	d503      	bpl.n	801785c <__sfp+0x28>
 8017854:	6833      	ldr	r3, [r6, #0]
 8017856:	b30b      	cbz	r3, 801789c <__sfp+0x68>
 8017858:	6836      	ldr	r6, [r6, #0]
 801785a:	e7f7      	b.n	801784c <__sfp+0x18>
 801785c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017860:	b9d5      	cbnz	r5, 8017898 <__sfp+0x64>
 8017862:	4b16      	ldr	r3, [pc, #88]	; (80178bc <__sfp+0x88>)
 8017864:	60e3      	str	r3, [r4, #12]
 8017866:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801786a:	6665      	str	r5, [r4, #100]	; 0x64
 801786c:	f000 f859 	bl	8017922 <__retarget_lock_init_recursive>
 8017870:	f7ff ff96 	bl	80177a0 <__sfp_lock_release>
 8017874:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017878:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801787c:	6025      	str	r5, [r4, #0]
 801787e:	61a5      	str	r5, [r4, #24]
 8017880:	2208      	movs	r2, #8
 8017882:	4629      	mov	r1, r5
 8017884:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017888:	f7ff fcd0 	bl	801722c <memset>
 801788c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017890:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017894:	4620      	mov	r0, r4
 8017896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017898:	3468      	adds	r4, #104	; 0x68
 801789a:	e7d9      	b.n	8017850 <__sfp+0x1c>
 801789c:	2104      	movs	r1, #4
 801789e:	4638      	mov	r0, r7
 80178a0:	f7ff ff62 	bl	8017768 <__sfmoreglue>
 80178a4:	4604      	mov	r4, r0
 80178a6:	6030      	str	r0, [r6, #0]
 80178a8:	2800      	cmp	r0, #0
 80178aa:	d1d5      	bne.n	8017858 <__sfp+0x24>
 80178ac:	f7ff ff78 	bl	80177a0 <__sfp_lock_release>
 80178b0:	230c      	movs	r3, #12
 80178b2:	603b      	str	r3, [r7, #0]
 80178b4:	e7ee      	b.n	8017894 <__sfp+0x60>
 80178b6:	bf00      	nop
 80178b8:	0801b230 	.word	0x0801b230
 80178bc:	ffff0001 	.word	0xffff0001

080178c0 <fiprintf>:
 80178c0:	b40e      	push	{r1, r2, r3}
 80178c2:	b503      	push	{r0, r1, lr}
 80178c4:	4601      	mov	r1, r0
 80178c6:	ab03      	add	r3, sp, #12
 80178c8:	4805      	ldr	r0, [pc, #20]	; (80178e0 <fiprintf+0x20>)
 80178ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80178ce:	6800      	ldr	r0, [r0, #0]
 80178d0:	9301      	str	r3, [sp, #4]
 80178d2:	f000 f9a1 	bl	8017c18 <_vfiprintf_r>
 80178d6:	b002      	add	sp, #8
 80178d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80178dc:	b003      	add	sp, #12
 80178de:	4770      	bx	lr
 80178e0:	20000030 	.word	0x20000030

080178e4 <_fwalk_reent>:
 80178e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80178e8:	4606      	mov	r6, r0
 80178ea:	4688      	mov	r8, r1
 80178ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80178f0:	2700      	movs	r7, #0
 80178f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80178f6:	f1b9 0901 	subs.w	r9, r9, #1
 80178fa:	d505      	bpl.n	8017908 <_fwalk_reent+0x24>
 80178fc:	6824      	ldr	r4, [r4, #0]
 80178fe:	2c00      	cmp	r4, #0
 8017900:	d1f7      	bne.n	80178f2 <_fwalk_reent+0xe>
 8017902:	4638      	mov	r0, r7
 8017904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017908:	89ab      	ldrh	r3, [r5, #12]
 801790a:	2b01      	cmp	r3, #1
 801790c:	d907      	bls.n	801791e <_fwalk_reent+0x3a>
 801790e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017912:	3301      	adds	r3, #1
 8017914:	d003      	beq.n	801791e <_fwalk_reent+0x3a>
 8017916:	4629      	mov	r1, r5
 8017918:	4630      	mov	r0, r6
 801791a:	47c0      	blx	r8
 801791c:	4307      	orrs	r7, r0
 801791e:	3568      	adds	r5, #104	; 0x68
 8017920:	e7e9      	b.n	80178f6 <_fwalk_reent+0x12>

08017922 <__retarget_lock_init_recursive>:
 8017922:	4770      	bx	lr

08017924 <__retarget_lock_acquire_recursive>:
 8017924:	4770      	bx	lr

08017926 <__retarget_lock_release_recursive>:
 8017926:	4770      	bx	lr

08017928 <__swhatbuf_r>:
 8017928:	b570      	push	{r4, r5, r6, lr}
 801792a:	460e      	mov	r6, r1
 801792c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017930:	2900      	cmp	r1, #0
 8017932:	b096      	sub	sp, #88	; 0x58
 8017934:	4614      	mov	r4, r2
 8017936:	461d      	mov	r5, r3
 8017938:	da08      	bge.n	801794c <__swhatbuf_r+0x24>
 801793a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801793e:	2200      	movs	r2, #0
 8017940:	602a      	str	r2, [r5, #0]
 8017942:	061a      	lsls	r2, r3, #24
 8017944:	d410      	bmi.n	8017968 <__swhatbuf_r+0x40>
 8017946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801794a:	e00e      	b.n	801796a <__swhatbuf_r+0x42>
 801794c:	466a      	mov	r2, sp
 801794e:	f000 fca5 	bl	801829c <_fstat_r>
 8017952:	2800      	cmp	r0, #0
 8017954:	dbf1      	blt.n	801793a <__swhatbuf_r+0x12>
 8017956:	9a01      	ldr	r2, [sp, #4]
 8017958:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801795c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017960:	425a      	negs	r2, r3
 8017962:	415a      	adcs	r2, r3
 8017964:	602a      	str	r2, [r5, #0]
 8017966:	e7ee      	b.n	8017946 <__swhatbuf_r+0x1e>
 8017968:	2340      	movs	r3, #64	; 0x40
 801796a:	2000      	movs	r0, #0
 801796c:	6023      	str	r3, [r4, #0]
 801796e:	b016      	add	sp, #88	; 0x58
 8017970:	bd70      	pop	{r4, r5, r6, pc}
	...

08017974 <__smakebuf_r>:
 8017974:	898b      	ldrh	r3, [r1, #12]
 8017976:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017978:	079d      	lsls	r5, r3, #30
 801797a:	4606      	mov	r6, r0
 801797c:	460c      	mov	r4, r1
 801797e:	d507      	bpl.n	8017990 <__smakebuf_r+0x1c>
 8017980:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017984:	6023      	str	r3, [r4, #0]
 8017986:	6123      	str	r3, [r4, #16]
 8017988:	2301      	movs	r3, #1
 801798a:	6163      	str	r3, [r4, #20]
 801798c:	b002      	add	sp, #8
 801798e:	bd70      	pop	{r4, r5, r6, pc}
 8017990:	ab01      	add	r3, sp, #4
 8017992:	466a      	mov	r2, sp
 8017994:	f7ff ffc8 	bl	8017928 <__swhatbuf_r>
 8017998:	9900      	ldr	r1, [sp, #0]
 801799a:	4605      	mov	r5, r0
 801799c:	4630      	mov	r0, r6
 801799e:	f000 f89d 	bl	8017adc <_malloc_r>
 80179a2:	b948      	cbnz	r0, 80179b8 <__smakebuf_r+0x44>
 80179a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80179a8:	059a      	lsls	r2, r3, #22
 80179aa:	d4ef      	bmi.n	801798c <__smakebuf_r+0x18>
 80179ac:	f023 0303 	bic.w	r3, r3, #3
 80179b0:	f043 0302 	orr.w	r3, r3, #2
 80179b4:	81a3      	strh	r3, [r4, #12]
 80179b6:	e7e3      	b.n	8017980 <__smakebuf_r+0xc>
 80179b8:	4b0d      	ldr	r3, [pc, #52]	; (80179f0 <__smakebuf_r+0x7c>)
 80179ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80179bc:	89a3      	ldrh	r3, [r4, #12]
 80179be:	6020      	str	r0, [r4, #0]
 80179c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80179c4:	81a3      	strh	r3, [r4, #12]
 80179c6:	9b00      	ldr	r3, [sp, #0]
 80179c8:	6163      	str	r3, [r4, #20]
 80179ca:	9b01      	ldr	r3, [sp, #4]
 80179cc:	6120      	str	r0, [r4, #16]
 80179ce:	b15b      	cbz	r3, 80179e8 <__smakebuf_r+0x74>
 80179d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80179d4:	4630      	mov	r0, r6
 80179d6:	f000 fc73 	bl	80182c0 <_isatty_r>
 80179da:	b128      	cbz	r0, 80179e8 <__smakebuf_r+0x74>
 80179dc:	89a3      	ldrh	r3, [r4, #12]
 80179de:	f023 0303 	bic.w	r3, r3, #3
 80179e2:	f043 0301 	orr.w	r3, r3, #1
 80179e6:	81a3      	strh	r3, [r4, #12]
 80179e8:	89a0      	ldrh	r0, [r4, #12]
 80179ea:	4305      	orrs	r5, r0
 80179ec:	81a5      	strh	r5, [r4, #12]
 80179ee:	e7cd      	b.n	801798c <__smakebuf_r+0x18>
 80179f0:	0801775d 	.word	0x0801775d

080179f4 <malloc>:
 80179f4:	4b02      	ldr	r3, [pc, #8]	; (8017a00 <malloc+0xc>)
 80179f6:	4601      	mov	r1, r0
 80179f8:	6818      	ldr	r0, [r3, #0]
 80179fa:	f000 b86f 	b.w	8017adc <_malloc_r>
 80179fe:	bf00      	nop
 8017a00:	20000030 	.word	0x20000030

08017a04 <_free_r>:
 8017a04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017a06:	2900      	cmp	r1, #0
 8017a08:	d044      	beq.n	8017a94 <_free_r+0x90>
 8017a0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017a0e:	9001      	str	r0, [sp, #4]
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	f1a1 0404 	sub.w	r4, r1, #4
 8017a16:	bfb8      	it	lt
 8017a18:	18e4      	addlt	r4, r4, r3
 8017a1a:	f000 fc73 	bl	8018304 <__malloc_lock>
 8017a1e:	4a1e      	ldr	r2, [pc, #120]	; (8017a98 <_free_r+0x94>)
 8017a20:	9801      	ldr	r0, [sp, #4]
 8017a22:	6813      	ldr	r3, [r2, #0]
 8017a24:	b933      	cbnz	r3, 8017a34 <_free_r+0x30>
 8017a26:	6063      	str	r3, [r4, #4]
 8017a28:	6014      	str	r4, [r2, #0]
 8017a2a:	b003      	add	sp, #12
 8017a2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017a30:	f000 bc6e 	b.w	8018310 <__malloc_unlock>
 8017a34:	42a3      	cmp	r3, r4
 8017a36:	d908      	bls.n	8017a4a <_free_r+0x46>
 8017a38:	6825      	ldr	r5, [r4, #0]
 8017a3a:	1961      	adds	r1, r4, r5
 8017a3c:	428b      	cmp	r3, r1
 8017a3e:	bf01      	itttt	eq
 8017a40:	6819      	ldreq	r1, [r3, #0]
 8017a42:	685b      	ldreq	r3, [r3, #4]
 8017a44:	1949      	addeq	r1, r1, r5
 8017a46:	6021      	streq	r1, [r4, #0]
 8017a48:	e7ed      	b.n	8017a26 <_free_r+0x22>
 8017a4a:	461a      	mov	r2, r3
 8017a4c:	685b      	ldr	r3, [r3, #4]
 8017a4e:	b10b      	cbz	r3, 8017a54 <_free_r+0x50>
 8017a50:	42a3      	cmp	r3, r4
 8017a52:	d9fa      	bls.n	8017a4a <_free_r+0x46>
 8017a54:	6811      	ldr	r1, [r2, #0]
 8017a56:	1855      	adds	r5, r2, r1
 8017a58:	42a5      	cmp	r5, r4
 8017a5a:	d10b      	bne.n	8017a74 <_free_r+0x70>
 8017a5c:	6824      	ldr	r4, [r4, #0]
 8017a5e:	4421      	add	r1, r4
 8017a60:	1854      	adds	r4, r2, r1
 8017a62:	42a3      	cmp	r3, r4
 8017a64:	6011      	str	r1, [r2, #0]
 8017a66:	d1e0      	bne.n	8017a2a <_free_r+0x26>
 8017a68:	681c      	ldr	r4, [r3, #0]
 8017a6a:	685b      	ldr	r3, [r3, #4]
 8017a6c:	6053      	str	r3, [r2, #4]
 8017a6e:	4421      	add	r1, r4
 8017a70:	6011      	str	r1, [r2, #0]
 8017a72:	e7da      	b.n	8017a2a <_free_r+0x26>
 8017a74:	d902      	bls.n	8017a7c <_free_r+0x78>
 8017a76:	230c      	movs	r3, #12
 8017a78:	6003      	str	r3, [r0, #0]
 8017a7a:	e7d6      	b.n	8017a2a <_free_r+0x26>
 8017a7c:	6825      	ldr	r5, [r4, #0]
 8017a7e:	1961      	adds	r1, r4, r5
 8017a80:	428b      	cmp	r3, r1
 8017a82:	bf04      	itt	eq
 8017a84:	6819      	ldreq	r1, [r3, #0]
 8017a86:	685b      	ldreq	r3, [r3, #4]
 8017a88:	6063      	str	r3, [r4, #4]
 8017a8a:	bf04      	itt	eq
 8017a8c:	1949      	addeq	r1, r1, r5
 8017a8e:	6021      	streq	r1, [r4, #0]
 8017a90:	6054      	str	r4, [r2, #4]
 8017a92:	e7ca      	b.n	8017a2a <_free_r+0x26>
 8017a94:	b003      	add	sp, #12
 8017a96:	bd30      	pop	{r4, r5, pc}
 8017a98:	200111cc 	.word	0x200111cc

08017a9c <sbrk_aligned>:
 8017a9c:	b570      	push	{r4, r5, r6, lr}
 8017a9e:	4e0e      	ldr	r6, [pc, #56]	; (8017ad8 <sbrk_aligned+0x3c>)
 8017aa0:	460c      	mov	r4, r1
 8017aa2:	6831      	ldr	r1, [r6, #0]
 8017aa4:	4605      	mov	r5, r0
 8017aa6:	b911      	cbnz	r1, 8017aae <sbrk_aligned+0x12>
 8017aa8:	f000 fb7a 	bl	80181a0 <_sbrk_r>
 8017aac:	6030      	str	r0, [r6, #0]
 8017aae:	4621      	mov	r1, r4
 8017ab0:	4628      	mov	r0, r5
 8017ab2:	f000 fb75 	bl	80181a0 <_sbrk_r>
 8017ab6:	1c43      	adds	r3, r0, #1
 8017ab8:	d00a      	beq.n	8017ad0 <sbrk_aligned+0x34>
 8017aba:	1cc4      	adds	r4, r0, #3
 8017abc:	f024 0403 	bic.w	r4, r4, #3
 8017ac0:	42a0      	cmp	r0, r4
 8017ac2:	d007      	beq.n	8017ad4 <sbrk_aligned+0x38>
 8017ac4:	1a21      	subs	r1, r4, r0
 8017ac6:	4628      	mov	r0, r5
 8017ac8:	f000 fb6a 	bl	80181a0 <_sbrk_r>
 8017acc:	3001      	adds	r0, #1
 8017ace:	d101      	bne.n	8017ad4 <sbrk_aligned+0x38>
 8017ad0:	f04f 34ff 	mov.w	r4, #4294967295
 8017ad4:	4620      	mov	r0, r4
 8017ad6:	bd70      	pop	{r4, r5, r6, pc}
 8017ad8:	200111d0 	.word	0x200111d0

08017adc <_malloc_r>:
 8017adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ae0:	1ccd      	adds	r5, r1, #3
 8017ae2:	f025 0503 	bic.w	r5, r5, #3
 8017ae6:	3508      	adds	r5, #8
 8017ae8:	2d0c      	cmp	r5, #12
 8017aea:	bf38      	it	cc
 8017aec:	250c      	movcc	r5, #12
 8017aee:	2d00      	cmp	r5, #0
 8017af0:	4607      	mov	r7, r0
 8017af2:	db01      	blt.n	8017af8 <_malloc_r+0x1c>
 8017af4:	42a9      	cmp	r1, r5
 8017af6:	d905      	bls.n	8017b04 <_malloc_r+0x28>
 8017af8:	230c      	movs	r3, #12
 8017afa:	603b      	str	r3, [r7, #0]
 8017afc:	2600      	movs	r6, #0
 8017afe:	4630      	mov	r0, r6
 8017b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b04:	4e2e      	ldr	r6, [pc, #184]	; (8017bc0 <_malloc_r+0xe4>)
 8017b06:	f000 fbfd 	bl	8018304 <__malloc_lock>
 8017b0a:	6833      	ldr	r3, [r6, #0]
 8017b0c:	461c      	mov	r4, r3
 8017b0e:	bb34      	cbnz	r4, 8017b5e <_malloc_r+0x82>
 8017b10:	4629      	mov	r1, r5
 8017b12:	4638      	mov	r0, r7
 8017b14:	f7ff ffc2 	bl	8017a9c <sbrk_aligned>
 8017b18:	1c43      	adds	r3, r0, #1
 8017b1a:	4604      	mov	r4, r0
 8017b1c:	d14d      	bne.n	8017bba <_malloc_r+0xde>
 8017b1e:	6834      	ldr	r4, [r6, #0]
 8017b20:	4626      	mov	r6, r4
 8017b22:	2e00      	cmp	r6, #0
 8017b24:	d140      	bne.n	8017ba8 <_malloc_r+0xcc>
 8017b26:	6823      	ldr	r3, [r4, #0]
 8017b28:	4631      	mov	r1, r6
 8017b2a:	4638      	mov	r0, r7
 8017b2c:	eb04 0803 	add.w	r8, r4, r3
 8017b30:	f000 fb36 	bl	80181a0 <_sbrk_r>
 8017b34:	4580      	cmp	r8, r0
 8017b36:	d13a      	bne.n	8017bae <_malloc_r+0xd2>
 8017b38:	6821      	ldr	r1, [r4, #0]
 8017b3a:	3503      	adds	r5, #3
 8017b3c:	1a6d      	subs	r5, r5, r1
 8017b3e:	f025 0503 	bic.w	r5, r5, #3
 8017b42:	3508      	adds	r5, #8
 8017b44:	2d0c      	cmp	r5, #12
 8017b46:	bf38      	it	cc
 8017b48:	250c      	movcc	r5, #12
 8017b4a:	4629      	mov	r1, r5
 8017b4c:	4638      	mov	r0, r7
 8017b4e:	f7ff ffa5 	bl	8017a9c <sbrk_aligned>
 8017b52:	3001      	adds	r0, #1
 8017b54:	d02b      	beq.n	8017bae <_malloc_r+0xd2>
 8017b56:	6823      	ldr	r3, [r4, #0]
 8017b58:	442b      	add	r3, r5
 8017b5a:	6023      	str	r3, [r4, #0]
 8017b5c:	e00e      	b.n	8017b7c <_malloc_r+0xa0>
 8017b5e:	6822      	ldr	r2, [r4, #0]
 8017b60:	1b52      	subs	r2, r2, r5
 8017b62:	d41e      	bmi.n	8017ba2 <_malloc_r+0xc6>
 8017b64:	2a0b      	cmp	r2, #11
 8017b66:	d916      	bls.n	8017b96 <_malloc_r+0xba>
 8017b68:	1961      	adds	r1, r4, r5
 8017b6a:	42a3      	cmp	r3, r4
 8017b6c:	6025      	str	r5, [r4, #0]
 8017b6e:	bf18      	it	ne
 8017b70:	6059      	strne	r1, [r3, #4]
 8017b72:	6863      	ldr	r3, [r4, #4]
 8017b74:	bf08      	it	eq
 8017b76:	6031      	streq	r1, [r6, #0]
 8017b78:	5162      	str	r2, [r4, r5]
 8017b7a:	604b      	str	r3, [r1, #4]
 8017b7c:	4638      	mov	r0, r7
 8017b7e:	f104 060b 	add.w	r6, r4, #11
 8017b82:	f000 fbc5 	bl	8018310 <__malloc_unlock>
 8017b86:	f026 0607 	bic.w	r6, r6, #7
 8017b8a:	1d23      	adds	r3, r4, #4
 8017b8c:	1af2      	subs	r2, r6, r3
 8017b8e:	d0b6      	beq.n	8017afe <_malloc_r+0x22>
 8017b90:	1b9b      	subs	r3, r3, r6
 8017b92:	50a3      	str	r3, [r4, r2]
 8017b94:	e7b3      	b.n	8017afe <_malloc_r+0x22>
 8017b96:	6862      	ldr	r2, [r4, #4]
 8017b98:	42a3      	cmp	r3, r4
 8017b9a:	bf0c      	ite	eq
 8017b9c:	6032      	streq	r2, [r6, #0]
 8017b9e:	605a      	strne	r2, [r3, #4]
 8017ba0:	e7ec      	b.n	8017b7c <_malloc_r+0xa0>
 8017ba2:	4623      	mov	r3, r4
 8017ba4:	6864      	ldr	r4, [r4, #4]
 8017ba6:	e7b2      	b.n	8017b0e <_malloc_r+0x32>
 8017ba8:	4634      	mov	r4, r6
 8017baa:	6876      	ldr	r6, [r6, #4]
 8017bac:	e7b9      	b.n	8017b22 <_malloc_r+0x46>
 8017bae:	230c      	movs	r3, #12
 8017bb0:	603b      	str	r3, [r7, #0]
 8017bb2:	4638      	mov	r0, r7
 8017bb4:	f000 fbac 	bl	8018310 <__malloc_unlock>
 8017bb8:	e7a1      	b.n	8017afe <_malloc_r+0x22>
 8017bba:	6025      	str	r5, [r4, #0]
 8017bbc:	e7de      	b.n	8017b7c <_malloc_r+0xa0>
 8017bbe:	bf00      	nop
 8017bc0:	200111cc 	.word	0x200111cc

08017bc4 <__sfputc_r>:
 8017bc4:	6893      	ldr	r3, [r2, #8]
 8017bc6:	3b01      	subs	r3, #1
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	b410      	push	{r4}
 8017bcc:	6093      	str	r3, [r2, #8]
 8017bce:	da08      	bge.n	8017be2 <__sfputc_r+0x1e>
 8017bd0:	6994      	ldr	r4, [r2, #24]
 8017bd2:	42a3      	cmp	r3, r4
 8017bd4:	db01      	blt.n	8017bda <__sfputc_r+0x16>
 8017bd6:	290a      	cmp	r1, #10
 8017bd8:	d103      	bne.n	8017be2 <__sfputc_r+0x1e>
 8017bda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bde:	f7ff bbf9 	b.w	80173d4 <__swbuf_r>
 8017be2:	6813      	ldr	r3, [r2, #0]
 8017be4:	1c58      	adds	r0, r3, #1
 8017be6:	6010      	str	r0, [r2, #0]
 8017be8:	7019      	strb	r1, [r3, #0]
 8017bea:	4608      	mov	r0, r1
 8017bec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bf0:	4770      	bx	lr

08017bf2 <__sfputs_r>:
 8017bf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bf4:	4606      	mov	r6, r0
 8017bf6:	460f      	mov	r7, r1
 8017bf8:	4614      	mov	r4, r2
 8017bfa:	18d5      	adds	r5, r2, r3
 8017bfc:	42ac      	cmp	r4, r5
 8017bfe:	d101      	bne.n	8017c04 <__sfputs_r+0x12>
 8017c00:	2000      	movs	r0, #0
 8017c02:	e007      	b.n	8017c14 <__sfputs_r+0x22>
 8017c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c08:	463a      	mov	r2, r7
 8017c0a:	4630      	mov	r0, r6
 8017c0c:	f7ff ffda 	bl	8017bc4 <__sfputc_r>
 8017c10:	1c43      	adds	r3, r0, #1
 8017c12:	d1f3      	bne.n	8017bfc <__sfputs_r+0xa>
 8017c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017c18 <_vfiprintf_r>:
 8017c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c1c:	460d      	mov	r5, r1
 8017c1e:	b09d      	sub	sp, #116	; 0x74
 8017c20:	4614      	mov	r4, r2
 8017c22:	4698      	mov	r8, r3
 8017c24:	4606      	mov	r6, r0
 8017c26:	b118      	cbz	r0, 8017c30 <_vfiprintf_r+0x18>
 8017c28:	6983      	ldr	r3, [r0, #24]
 8017c2a:	b90b      	cbnz	r3, 8017c30 <_vfiprintf_r+0x18>
 8017c2c:	f7ff fdca 	bl	80177c4 <__sinit>
 8017c30:	4b89      	ldr	r3, [pc, #548]	; (8017e58 <_vfiprintf_r+0x240>)
 8017c32:	429d      	cmp	r5, r3
 8017c34:	d11b      	bne.n	8017c6e <_vfiprintf_r+0x56>
 8017c36:	6875      	ldr	r5, [r6, #4]
 8017c38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017c3a:	07d9      	lsls	r1, r3, #31
 8017c3c:	d405      	bmi.n	8017c4a <_vfiprintf_r+0x32>
 8017c3e:	89ab      	ldrh	r3, [r5, #12]
 8017c40:	059a      	lsls	r2, r3, #22
 8017c42:	d402      	bmi.n	8017c4a <_vfiprintf_r+0x32>
 8017c44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017c46:	f7ff fe6d 	bl	8017924 <__retarget_lock_acquire_recursive>
 8017c4a:	89ab      	ldrh	r3, [r5, #12]
 8017c4c:	071b      	lsls	r3, r3, #28
 8017c4e:	d501      	bpl.n	8017c54 <_vfiprintf_r+0x3c>
 8017c50:	692b      	ldr	r3, [r5, #16]
 8017c52:	b9eb      	cbnz	r3, 8017c90 <_vfiprintf_r+0x78>
 8017c54:	4629      	mov	r1, r5
 8017c56:	4630      	mov	r0, r6
 8017c58:	f7ff fc0e 	bl	8017478 <__swsetup_r>
 8017c5c:	b1c0      	cbz	r0, 8017c90 <_vfiprintf_r+0x78>
 8017c5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017c60:	07dc      	lsls	r4, r3, #31
 8017c62:	d50e      	bpl.n	8017c82 <_vfiprintf_r+0x6a>
 8017c64:	f04f 30ff 	mov.w	r0, #4294967295
 8017c68:	b01d      	add	sp, #116	; 0x74
 8017c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c6e:	4b7b      	ldr	r3, [pc, #492]	; (8017e5c <_vfiprintf_r+0x244>)
 8017c70:	429d      	cmp	r5, r3
 8017c72:	d101      	bne.n	8017c78 <_vfiprintf_r+0x60>
 8017c74:	68b5      	ldr	r5, [r6, #8]
 8017c76:	e7df      	b.n	8017c38 <_vfiprintf_r+0x20>
 8017c78:	4b79      	ldr	r3, [pc, #484]	; (8017e60 <_vfiprintf_r+0x248>)
 8017c7a:	429d      	cmp	r5, r3
 8017c7c:	bf08      	it	eq
 8017c7e:	68f5      	ldreq	r5, [r6, #12]
 8017c80:	e7da      	b.n	8017c38 <_vfiprintf_r+0x20>
 8017c82:	89ab      	ldrh	r3, [r5, #12]
 8017c84:	0598      	lsls	r0, r3, #22
 8017c86:	d4ed      	bmi.n	8017c64 <_vfiprintf_r+0x4c>
 8017c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017c8a:	f7ff fe4c 	bl	8017926 <__retarget_lock_release_recursive>
 8017c8e:	e7e9      	b.n	8017c64 <_vfiprintf_r+0x4c>
 8017c90:	2300      	movs	r3, #0
 8017c92:	9309      	str	r3, [sp, #36]	; 0x24
 8017c94:	2320      	movs	r3, #32
 8017c96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017c9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8017c9e:	2330      	movs	r3, #48	; 0x30
 8017ca0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017e64 <_vfiprintf_r+0x24c>
 8017ca4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017ca8:	f04f 0901 	mov.w	r9, #1
 8017cac:	4623      	mov	r3, r4
 8017cae:	469a      	mov	sl, r3
 8017cb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017cb4:	b10a      	cbz	r2, 8017cba <_vfiprintf_r+0xa2>
 8017cb6:	2a25      	cmp	r2, #37	; 0x25
 8017cb8:	d1f9      	bne.n	8017cae <_vfiprintf_r+0x96>
 8017cba:	ebba 0b04 	subs.w	fp, sl, r4
 8017cbe:	d00b      	beq.n	8017cd8 <_vfiprintf_r+0xc0>
 8017cc0:	465b      	mov	r3, fp
 8017cc2:	4622      	mov	r2, r4
 8017cc4:	4629      	mov	r1, r5
 8017cc6:	4630      	mov	r0, r6
 8017cc8:	f7ff ff93 	bl	8017bf2 <__sfputs_r>
 8017ccc:	3001      	adds	r0, #1
 8017cce:	f000 80aa 	beq.w	8017e26 <_vfiprintf_r+0x20e>
 8017cd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017cd4:	445a      	add	r2, fp
 8017cd6:	9209      	str	r2, [sp, #36]	; 0x24
 8017cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	f000 80a2 	beq.w	8017e26 <_vfiprintf_r+0x20e>
 8017ce2:	2300      	movs	r3, #0
 8017ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8017ce8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017cec:	f10a 0a01 	add.w	sl, sl, #1
 8017cf0:	9304      	str	r3, [sp, #16]
 8017cf2:	9307      	str	r3, [sp, #28]
 8017cf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017cf8:	931a      	str	r3, [sp, #104]	; 0x68
 8017cfa:	4654      	mov	r4, sl
 8017cfc:	2205      	movs	r2, #5
 8017cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d02:	4858      	ldr	r0, [pc, #352]	; (8017e64 <_vfiprintf_r+0x24c>)
 8017d04:	f7e8 fa9c 	bl	8000240 <memchr>
 8017d08:	9a04      	ldr	r2, [sp, #16]
 8017d0a:	b9d8      	cbnz	r0, 8017d44 <_vfiprintf_r+0x12c>
 8017d0c:	06d1      	lsls	r1, r2, #27
 8017d0e:	bf44      	itt	mi
 8017d10:	2320      	movmi	r3, #32
 8017d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017d16:	0713      	lsls	r3, r2, #28
 8017d18:	bf44      	itt	mi
 8017d1a:	232b      	movmi	r3, #43	; 0x2b
 8017d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017d20:	f89a 3000 	ldrb.w	r3, [sl]
 8017d24:	2b2a      	cmp	r3, #42	; 0x2a
 8017d26:	d015      	beq.n	8017d54 <_vfiprintf_r+0x13c>
 8017d28:	9a07      	ldr	r2, [sp, #28]
 8017d2a:	4654      	mov	r4, sl
 8017d2c:	2000      	movs	r0, #0
 8017d2e:	f04f 0c0a 	mov.w	ip, #10
 8017d32:	4621      	mov	r1, r4
 8017d34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017d38:	3b30      	subs	r3, #48	; 0x30
 8017d3a:	2b09      	cmp	r3, #9
 8017d3c:	d94e      	bls.n	8017ddc <_vfiprintf_r+0x1c4>
 8017d3e:	b1b0      	cbz	r0, 8017d6e <_vfiprintf_r+0x156>
 8017d40:	9207      	str	r2, [sp, #28]
 8017d42:	e014      	b.n	8017d6e <_vfiprintf_r+0x156>
 8017d44:	eba0 0308 	sub.w	r3, r0, r8
 8017d48:	fa09 f303 	lsl.w	r3, r9, r3
 8017d4c:	4313      	orrs	r3, r2
 8017d4e:	9304      	str	r3, [sp, #16]
 8017d50:	46a2      	mov	sl, r4
 8017d52:	e7d2      	b.n	8017cfa <_vfiprintf_r+0xe2>
 8017d54:	9b03      	ldr	r3, [sp, #12]
 8017d56:	1d19      	adds	r1, r3, #4
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	9103      	str	r1, [sp, #12]
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	bfbb      	ittet	lt
 8017d60:	425b      	neglt	r3, r3
 8017d62:	f042 0202 	orrlt.w	r2, r2, #2
 8017d66:	9307      	strge	r3, [sp, #28]
 8017d68:	9307      	strlt	r3, [sp, #28]
 8017d6a:	bfb8      	it	lt
 8017d6c:	9204      	strlt	r2, [sp, #16]
 8017d6e:	7823      	ldrb	r3, [r4, #0]
 8017d70:	2b2e      	cmp	r3, #46	; 0x2e
 8017d72:	d10c      	bne.n	8017d8e <_vfiprintf_r+0x176>
 8017d74:	7863      	ldrb	r3, [r4, #1]
 8017d76:	2b2a      	cmp	r3, #42	; 0x2a
 8017d78:	d135      	bne.n	8017de6 <_vfiprintf_r+0x1ce>
 8017d7a:	9b03      	ldr	r3, [sp, #12]
 8017d7c:	1d1a      	adds	r2, r3, #4
 8017d7e:	681b      	ldr	r3, [r3, #0]
 8017d80:	9203      	str	r2, [sp, #12]
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	bfb8      	it	lt
 8017d86:	f04f 33ff 	movlt.w	r3, #4294967295
 8017d8a:	3402      	adds	r4, #2
 8017d8c:	9305      	str	r3, [sp, #20]
 8017d8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017e74 <_vfiprintf_r+0x25c>
 8017d92:	7821      	ldrb	r1, [r4, #0]
 8017d94:	2203      	movs	r2, #3
 8017d96:	4650      	mov	r0, sl
 8017d98:	f7e8 fa52 	bl	8000240 <memchr>
 8017d9c:	b140      	cbz	r0, 8017db0 <_vfiprintf_r+0x198>
 8017d9e:	2340      	movs	r3, #64	; 0x40
 8017da0:	eba0 000a 	sub.w	r0, r0, sl
 8017da4:	fa03 f000 	lsl.w	r0, r3, r0
 8017da8:	9b04      	ldr	r3, [sp, #16]
 8017daa:	4303      	orrs	r3, r0
 8017dac:	3401      	adds	r4, #1
 8017dae:	9304      	str	r3, [sp, #16]
 8017db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017db4:	482c      	ldr	r0, [pc, #176]	; (8017e68 <_vfiprintf_r+0x250>)
 8017db6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017dba:	2206      	movs	r2, #6
 8017dbc:	f7e8 fa40 	bl	8000240 <memchr>
 8017dc0:	2800      	cmp	r0, #0
 8017dc2:	d03f      	beq.n	8017e44 <_vfiprintf_r+0x22c>
 8017dc4:	4b29      	ldr	r3, [pc, #164]	; (8017e6c <_vfiprintf_r+0x254>)
 8017dc6:	bb1b      	cbnz	r3, 8017e10 <_vfiprintf_r+0x1f8>
 8017dc8:	9b03      	ldr	r3, [sp, #12]
 8017dca:	3307      	adds	r3, #7
 8017dcc:	f023 0307 	bic.w	r3, r3, #7
 8017dd0:	3308      	adds	r3, #8
 8017dd2:	9303      	str	r3, [sp, #12]
 8017dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017dd6:	443b      	add	r3, r7
 8017dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8017dda:	e767      	b.n	8017cac <_vfiprintf_r+0x94>
 8017ddc:	fb0c 3202 	mla	r2, ip, r2, r3
 8017de0:	460c      	mov	r4, r1
 8017de2:	2001      	movs	r0, #1
 8017de4:	e7a5      	b.n	8017d32 <_vfiprintf_r+0x11a>
 8017de6:	2300      	movs	r3, #0
 8017de8:	3401      	adds	r4, #1
 8017dea:	9305      	str	r3, [sp, #20]
 8017dec:	4619      	mov	r1, r3
 8017dee:	f04f 0c0a 	mov.w	ip, #10
 8017df2:	4620      	mov	r0, r4
 8017df4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017df8:	3a30      	subs	r2, #48	; 0x30
 8017dfa:	2a09      	cmp	r2, #9
 8017dfc:	d903      	bls.n	8017e06 <_vfiprintf_r+0x1ee>
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d0c5      	beq.n	8017d8e <_vfiprintf_r+0x176>
 8017e02:	9105      	str	r1, [sp, #20]
 8017e04:	e7c3      	b.n	8017d8e <_vfiprintf_r+0x176>
 8017e06:	fb0c 2101 	mla	r1, ip, r1, r2
 8017e0a:	4604      	mov	r4, r0
 8017e0c:	2301      	movs	r3, #1
 8017e0e:	e7f0      	b.n	8017df2 <_vfiprintf_r+0x1da>
 8017e10:	ab03      	add	r3, sp, #12
 8017e12:	9300      	str	r3, [sp, #0]
 8017e14:	462a      	mov	r2, r5
 8017e16:	4b16      	ldr	r3, [pc, #88]	; (8017e70 <_vfiprintf_r+0x258>)
 8017e18:	a904      	add	r1, sp, #16
 8017e1a:	4630      	mov	r0, r6
 8017e1c:	f3af 8000 	nop.w
 8017e20:	4607      	mov	r7, r0
 8017e22:	1c78      	adds	r0, r7, #1
 8017e24:	d1d6      	bne.n	8017dd4 <_vfiprintf_r+0x1bc>
 8017e26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017e28:	07d9      	lsls	r1, r3, #31
 8017e2a:	d405      	bmi.n	8017e38 <_vfiprintf_r+0x220>
 8017e2c:	89ab      	ldrh	r3, [r5, #12]
 8017e2e:	059a      	lsls	r2, r3, #22
 8017e30:	d402      	bmi.n	8017e38 <_vfiprintf_r+0x220>
 8017e32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017e34:	f7ff fd77 	bl	8017926 <__retarget_lock_release_recursive>
 8017e38:	89ab      	ldrh	r3, [r5, #12]
 8017e3a:	065b      	lsls	r3, r3, #25
 8017e3c:	f53f af12 	bmi.w	8017c64 <_vfiprintf_r+0x4c>
 8017e40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017e42:	e711      	b.n	8017c68 <_vfiprintf_r+0x50>
 8017e44:	ab03      	add	r3, sp, #12
 8017e46:	9300      	str	r3, [sp, #0]
 8017e48:	462a      	mov	r2, r5
 8017e4a:	4b09      	ldr	r3, [pc, #36]	; (8017e70 <_vfiprintf_r+0x258>)
 8017e4c:	a904      	add	r1, sp, #16
 8017e4e:	4630      	mov	r0, r6
 8017e50:	f000 f880 	bl	8017f54 <_printf_i>
 8017e54:	e7e4      	b.n	8017e20 <_vfiprintf_r+0x208>
 8017e56:	bf00      	nop
 8017e58:	0801b304 	.word	0x0801b304
 8017e5c:	0801b324 	.word	0x0801b324
 8017e60:	0801b2e4 	.word	0x0801b2e4
 8017e64:	0801b344 	.word	0x0801b344
 8017e68:	0801b34e 	.word	0x0801b34e
 8017e6c:	00000000 	.word	0x00000000
 8017e70:	08017bf3 	.word	0x08017bf3
 8017e74:	0801b34a 	.word	0x0801b34a

08017e78 <_printf_common>:
 8017e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e7c:	4616      	mov	r6, r2
 8017e7e:	4699      	mov	r9, r3
 8017e80:	688a      	ldr	r2, [r1, #8]
 8017e82:	690b      	ldr	r3, [r1, #16]
 8017e84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017e88:	4293      	cmp	r3, r2
 8017e8a:	bfb8      	it	lt
 8017e8c:	4613      	movlt	r3, r2
 8017e8e:	6033      	str	r3, [r6, #0]
 8017e90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017e94:	4607      	mov	r7, r0
 8017e96:	460c      	mov	r4, r1
 8017e98:	b10a      	cbz	r2, 8017e9e <_printf_common+0x26>
 8017e9a:	3301      	adds	r3, #1
 8017e9c:	6033      	str	r3, [r6, #0]
 8017e9e:	6823      	ldr	r3, [r4, #0]
 8017ea0:	0699      	lsls	r1, r3, #26
 8017ea2:	bf42      	ittt	mi
 8017ea4:	6833      	ldrmi	r3, [r6, #0]
 8017ea6:	3302      	addmi	r3, #2
 8017ea8:	6033      	strmi	r3, [r6, #0]
 8017eaa:	6825      	ldr	r5, [r4, #0]
 8017eac:	f015 0506 	ands.w	r5, r5, #6
 8017eb0:	d106      	bne.n	8017ec0 <_printf_common+0x48>
 8017eb2:	f104 0a19 	add.w	sl, r4, #25
 8017eb6:	68e3      	ldr	r3, [r4, #12]
 8017eb8:	6832      	ldr	r2, [r6, #0]
 8017eba:	1a9b      	subs	r3, r3, r2
 8017ebc:	42ab      	cmp	r3, r5
 8017ebe:	dc26      	bgt.n	8017f0e <_printf_common+0x96>
 8017ec0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017ec4:	1e13      	subs	r3, r2, #0
 8017ec6:	6822      	ldr	r2, [r4, #0]
 8017ec8:	bf18      	it	ne
 8017eca:	2301      	movne	r3, #1
 8017ecc:	0692      	lsls	r2, r2, #26
 8017ece:	d42b      	bmi.n	8017f28 <_printf_common+0xb0>
 8017ed0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017ed4:	4649      	mov	r1, r9
 8017ed6:	4638      	mov	r0, r7
 8017ed8:	47c0      	blx	r8
 8017eda:	3001      	adds	r0, #1
 8017edc:	d01e      	beq.n	8017f1c <_printf_common+0xa4>
 8017ede:	6823      	ldr	r3, [r4, #0]
 8017ee0:	68e5      	ldr	r5, [r4, #12]
 8017ee2:	6832      	ldr	r2, [r6, #0]
 8017ee4:	f003 0306 	and.w	r3, r3, #6
 8017ee8:	2b04      	cmp	r3, #4
 8017eea:	bf08      	it	eq
 8017eec:	1aad      	subeq	r5, r5, r2
 8017eee:	68a3      	ldr	r3, [r4, #8]
 8017ef0:	6922      	ldr	r2, [r4, #16]
 8017ef2:	bf0c      	ite	eq
 8017ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017ef8:	2500      	movne	r5, #0
 8017efa:	4293      	cmp	r3, r2
 8017efc:	bfc4      	itt	gt
 8017efe:	1a9b      	subgt	r3, r3, r2
 8017f00:	18ed      	addgt	r5, r5, r3
 8017f02:	2600      	movs	r6, #0
 8017f04:	341a      	adds	r4, #26
 8017f06:	42b5      	cmp	r5, r6
 8017f08:	d11a      	bne.n	8017f40 <_printf_common+0xc8>
 8017f0a:	2000      	movs	r0, #0
 8017f0c:	e008      	b.n	8017f20 <_printf_common+0xa8>
 8017f0e:	2301      	movs	r3, #1
 8017f10:	4652      	mov	r2, sl
 8017f12:	4649      	mov	r1, r9
 8017f14:	4638      	mov	r0, r7
 8017f16:	47c0      	blx	r8
 8017f18:	3001      	adds	r0, #1
 8017f1a:	d103      	bne.n	8017f24 <_printf_common+0xac>
 8017f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8017f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f24:	3501      	adds	r5, #1
 8017f26:	e7c6      	b.n	8017eb6 <_printf_common+0x3e>
 8017f28:	18e1      	adds	r1, r4, r3
 8017f2a:	1c5a      	adds	r2, r3, #1
 8017f2c:	2030      	movs	r0, #48	; 0x30
 8017f2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017f32:	4422      	add	r2, r4
 8017f34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017f38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017f3c:	3302      	adds	r3, #2
 8017f3e:	e7c7      	b.n	8017ed0 <_printf_common+0x58>
 8017f40:	2301      	movs	r3, #1
 8017f42:	4622      	mov	r2, r4
 8017f44:	4649      	mov	r1, r9
 8017f46:	4638      	mov	r0, r7
 8017f48:	47c0      	blx	r8
 8017f4a:	3001      	adds	r0, #1
 8017f4c:	d0e6      	beq.n	8017f1c <_printf_common+0xa4>
 8017f4e:	3601      	adds	r6, #1
 8017f50:	e7d9      	b.n	8017f06 <_printf_common+0x8e>
	...

08017f54 <_printf_i>:
 8017f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017f58:	7e0f      	ldrb	r7, [r1, #24]
 8017f5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017f5c:	2f78      	cmp	r7, #120	; 0x78
 8017f5e:	4691      	mov	r9, r2
 8017f60:	4680      	mov	r8, r0
 8017f62:	460c      	mov	r4, r1
 8017f64:	469a      	mov	sl, r3
 8017f66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017f6a:	d807      	bhi.n	8017f7c <_printf_i+0x28>
 8017f6c:	2f62      	cmp	r7, #98	; 0x62
 8017f6e:	d80a      	bhi.n	8017f86 <_printf_i+0x32>
 8017f70:	2f00      	cmp	r7, #0
 8017f72:	f000 80d8 	beq.w	8018126 <_printf_i+0x1d2>
 8017f76:	2f58      	cmp	r7, #88	; 0x58
 8017f78:	f000 80a3 	beq.w	80180c2 <_printf_i+0x16e>
 8017f7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017f80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017f84:	e03a      	b.n	8017ffc <_printf_i+0xa8>
 8017f86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017f8a:	2b15      	cmp	r3, #21
 8017f8c:	d8f6      	bhi.n	8017f7c <_printf_i+0x28>
 8017f8e:	a101      	add	r1, pc, #4	; (adr r1, 8017f94 <_printf_i+0x40>)
 8017f90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017f94:	08017fed 	.word	0x08017fed
 8017f98:	08018001 	.word	0x08018001
 8017f9c:	08017f7d 	.word	0x08017f7d
 8017fa0:	08017f7d 	.word	0x08017f7d
 8017fa4:	08017f7d 	.word	0x08017f7d
 8017fa8:	08017f7d 	.word	0x08017f7d
 8017fac:	08018001 	.word	0x08018001
 8017fb0:	08017f7d 	.word	0x08017f7d
 8017fb4:	08017f7d 	.word	0x08017f7d
 8017fb8:	08017f7d 	.word	0x08017f7d
 8017fbc:	08017f7d 	.word	0x08017f7d
 8017fc0:	0801810d 	.word	0x0801810d
 8017fc4:	08018031 	.word	0x08018031
 8017fc8:	080180ef 	.word	0x080180ef
 8017fcc:	08017f7d 	.word	0x08017f7d
 8017fd0:	08017f7d 	.word	0x08017f7d
 8017fd4:	0801812f 	.word	0x0801812f
 8017fd8:	08017f7d 	.word	0x08017f7d
 8017fdc:	08018031 	.word	0x08018031
 8017fe0:	08017f7d 	.word	0x08017f7d
 8017fe4:	08017f7d 	.word	0x08017f7d
 8017fe8:	080180f7 	.word	0x080180f7
 8017fec:	682b      	ldr	r3, [r5, #0]
 8017fee:	1d1a      	adds	r2, r3, #4
 8017ff0:	681b      	ldr	r3, [r3, #0]
 8017ff2:	602a      	str	r2, [r5, #0]
 8017ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017ff8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017ffc:	2301      	movs	r3, #1
 8017ffe:	e0a3      	b.n	8018148 <_printf_i+0x1f4>
 8018000:	6820      	ldr	r0, [r4, #0]
 8018002:	6829      	ldr	r1, [r5, #0]
 8018004:	0606      	lsls	r6, r0, #24
 8018006:	f101 0304 	add.w	r3, r1, #4
 801800a:	d50a      	bpl.n	8018022 <_printf_i+0xce>
 801800c:	680e      	ldr	r6, [r1, #0]
 801800e:	602b      	str	r3, [r5, #0]
 8018010:	2e00      	cmp	r6, #0
 8018012:	da03      	bge.n	801801c <_printf_i+0xc8>
 8018014:	232d      	movs	r3, #45	; 0x2d
 8018016:	4276      	negs	r6, r6
 8018018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801801c:	485e      	ldr	r0, [pc, #376]	; (8018198 <_printf_i+0x244>)
 801801e:	230a      	movs	r3, #10
 8018020:	e019      	b.n	8018056 <_printf_i+0x102>
 8018022:	680e      	ldr	r6, [r1, #0]
 8018024:	602b      	str	r3, [r5, #0]
 8018026:	f010 0f40 	tst.w	r0, #64	; 0x40
 801802a:	bf18      	it	ne
 801802c:	b236      	sxthne	r6, r6
 801802e:	e7ef      	b.n	8018010 <_printf_i+0xbc>
 8018030:	682b      	ldr	r3, [r5, #0]
 8018032:	6820      	ldr	r0, [r4, #0]
 8018034:	1d19      	adds	r1, r3, #4
 8018036:	6029      	str	r1, [r5, #0]
 8018038:	0601      	lsls	r1, r0, #24
 801803a:	d501      	bpl.n	8018040 <_printf_i+0xec>
 801803c:	681e      	ldr	r6, [r3, #0]
 801803e:	e002      	b.n	8018046 <_printf_i+0xf2>
 8018040:	0646      	lsls	r6, r0, #25
 8018042:	d5fb      	bpl.n	801803c <_printf_i+0xe8>
 8018044:	881e      	ldrh	r6, [r3, #0]
 8018046:	4854      	ldr	r0, [pc, #336]	; (8018198 <_printf_i+0x244>)
 8018048:	2f6f      	cmp	r7, #111	; 0x6f
 801804a:	bf0c      	ite	eq
 801804c:	2308      	moveq	r3, #8
 801804e:	230a      	movne	r3, #10
 8018050:	2100      	movs	r1, #0
 8018052:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018056:	6865      	ldr	r5, [r4, #4]
 8018058:	60a5      	str	r5, [r4, #8]
 801805a:	2d00      	cmp	r5, #0
 801805c:	bfa2      	ittt	ge
 801805e:	6821      	ldrge	r1, [r4, #0]
 8018060:	f021 0104 	bicge.w	r1, r1, #4
 8018064:	6021      	strge	r1, [r4, #0]
 8018066:	b90e      	cbnz	r6, 801806c <_printf_i+0x118>
 8018068:	2d00      	cmp	r5, #0
 801806a:	d04d      	beq.n	8018108 <_printf_i+0x1b4>
 801806c:	4615      	mov	r5, r2
 801806e:	fbb6 f1f3 	udiv	r1, r6, r3
 8018072:	fb03 6711 	mls	r7, r3, r1, r6
 8018076:	5dc7      	ldrb	r7, [r0, r7]
 8018078:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801807c:	4637      	mov	r7, r6
 801807e:	42bb      	cmp	r3, r7
 8018080:	460e      	mov	r6, r1
 8018082:	d9f4      	bls.n	801806e <_printf_i+0x11a>
 8018084:	2b08      	cmp	r3, #8
 8018086:	d10b      	bne.n	80180a0 <_printf_i+0x14c>
 8018088:	6823      	ldr	r3, [r4, #0]
 801808a:	07de      	lsls	r6, r3, #31
 801808c:	d508      	bpl.n	80180a0 <_printf_i+0x14c>
 801808e:	6923      	ldr	r3, [r4, #16]
 8018090:	6861      	ldr	r1, [r4, #4]
 8018092:	4299      	cmp	r1, r3
 8018094:	bfde      	ittt	le
 8018096:	2330      	movle	r3, #48	; 0x30
 8018098:	f805 3c01 	strble.w	r3, [r5, #-1]
 801809c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80180a0:	1b52      	subs	r2, r2, r5
 80180a2:	6122      	str	r2, [r4, #16]
 80180a4:	f8cd a000 	str.w	sl, [sp]
 80180a8:	464b      	mov	r3, r9
 80180aa:	aa03      	add	r2, sp, #12
 80180ac:	4621      	mov	r1, r4
 80180ae:	4640      	mov	r0, r8
 80180b0:	f7ff fee2 	bl	8017e78 <_printf_common>
 80180b4:	3001      	adds	r0, #1
 80180b6:	d14c      	bne.n	8018152 <_printf_i+0x1fe>
 80180b8:	f04f 30ff 	mov.w	r0, #4294967295
 80180bc:	b004      	add	sp, #16
 80180be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180c2:	4835      	ldr	r0, [pc, #212]	; (8018198 <_printf_i+0x244>)
 80180c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80180c8:	6829      	ldr	r1, [r5, #0]
 80180ca:	6823      	ldr	r3, [r4, #0]
 80180cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80180d0:	6029      	str	r1, [r5, #0]
 80180d2:	061d      	lsls	r5, r3, #24
 80180d4:	d514      	bpl.n	8018100 <_printf_i+0x1ac>
 80180d6:	07df      	lsls	r7, r3, #31
 80180d8:	bf44      	itt	mi
 80180da:	f043 0320 	orrmi.w	r3, r3, #32
 80180de:	6023      	strmi	r3, [r4, #0]
 80180e0:	b91e      	cbnz	r6, 80180ea <_printf_i+0x196>
 80180e2:	6823      	ldr	r3, [r4, #0]
 80180e4:	f023 0320 	bic.w	r3, r3, #32
 80180e8:	6023      	str	r3, [r4, #0]
 80180ea:	2310      	movs	r3, #16
 80180ec:	e7b0      	b.n	8018050 <_printf_i+0xfc>
 80180ee:	6823      	ldr	r3, [r4, #0]
 80180f0:	f043 0320 	orr.w	r3, r3, #32
 80180f4:	6023      	str	r3, [r4, #0]
 80180f6:	2378      	movs	r3, #120	; 0x78
 80180f8:	4828      	ldr	r0, [pc, #160]	; (801819c <_printf_i+0x248>)
 80180fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80180fe:	e7e3      	b.n	80180c8 <_printf_i+0x174>
 8018100:	0659      	lsls	r1, r3, #25
 8018102:	bf48      	it	mi
 8018104:	b2b6      	uxthmi	r6, r6
 8018106:	e7e6      	b.n	80180d6 <_printf_i+0x182>
 8018108:	4615      	mov	r5, r2
 801810a:	e7bb      	b.n	8018084 <_printf_i+0x130>
 801810c:	682b      	ldr	r3, [r5, #0]
 801810e:	6826      	ldr	r6, [r4, #0]
 8018110:	6961      	ldr	r1, [r4, #20]
 8018112:	1d18      	adds	r0, r3, #4
 8018114:	6028      	str	r0, [r5, #0]
 8018116:	0635      	lsls	r5, r6, #24
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	d501      	bpl.n	8018120 <_printf_i+0x1cc>
 801811c:	6019      	str	r1, [r3, #0]
 801811e:	e002      	b.n	8018126 <_printf_i+0x1d2>
 8018120:	0670      	lsls	r0, r6, #25
 8018122:	d5fb      	bpl.n	801811c <_printf_i+0x1c8>
 8018124:	8019      	strh	r1, [r3, #0]
 8018126:	2300      	movs	r3, #0
 8018128:	6123      	str	r3, [r4, #16]
 801812a:	4615      	mov	r5, r2
 801812c:	e7ba      	b.n	80180a4 <_printf_i+0x150>
 801812e:	682b      	ldr	r3, [r5, #0]
 8018130:	1d1a      	adds	r2, r3, #4
 8018132:	602a      	str	r2, [r5, #0]
 8018134:	681d      	ldr	r5, [r3, #0]
 8018136:	6862      	ldr	r2, [r4, #4]
 8018138:	2100      	movs	r1, #0
 801813a:	4628      	mov	r0, r5
 801813c:	f7e8 f880 	bl	8000240 <memchr>
 8018140:	b108      	cbz	r0, 8018146 <_printf_i+0x1f2>
 8018142:	1b40      	subs	r0, r0, r5
 8018144:	6060      	str	r0, [r4, #4]
 8018146:	6863      	ldr	r3, [r4, #4]
 8018148:	6123      	str	r3, [r4, #16]
 801814a:	2300      	movs	r3, #0
 801814c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018150:	e7a8      	b.n	80180a4 <_printf_i+0x150>
 8018152:	6923      	ldr	r3, [r4, #16]
 8018154:	462a      	mov	r2, r5
 8018156:	4649      	mov	r1, r9
 8018158:	4640      	mov	r0, r8
 801815a:	47d0      	blx	sl
 801815c:	3001      	adds	r0, #1
 801815e:	d0ab      	beq.n	80180b8 <_printf_i+0x164>
 8018160:	6823      	ldr	r3, [r4, #0]
 8018162:	079b      	lsls	r3, r3, #30
 8018164:	d413      	bmi.n	801818e <_printf_i+0x23a>
 8018166:	68e0      	ldr	r0, [r4, #12]
 8018168:	9b03      	ldr	r3, [sp, #12]
 801816a:	4298      	cmp	r0, r3
 801816c:	bfb8      	it	lt
 801816e:	4618      	movlt	r0, r3
 8018170:	e7a4      	b.n	80180bc <_printf_i+0x168>
 8018172:	2301      	movs	r3, #1
 8018174:	4632      	mov	r2, r6
 8018176:	4649      	mov	r1, r9
 8018178:	4640      	mov	r0, r8
 801817a:	47d0      	blx	sl
 801817c:	3001      	adds	r0, #1
 801817e:	d09b      	beq.n	80180b8 <_printf_i+0x164>
 8018180:	3501      	adds	r5, #1
 8018182:	68e3      	ldr	r3, [r4, #12]
 8018184:	9903      	ldr	r1, [sp, #12]
 8018186:	1a5b      	subs	r3, r3, r1
 8018188:	42ab      	cmp	r3, r5
 801818a:	dcf2      	bgt.n	8018172 <_printf_i+0x21e>
 801818c:	e7eb      	b.n	8018166 <_printf_i+0x212>
 801818e:	2500      	movs	r5, #0
 8018190:	f104 0619 	add.w	r6, r4, #25
 8018194:	e7f5      	b.n	8018182 <_printf_i+0x22e>
 8018196:	bf00      	nop
 8018198:	0801b355 	.word	0x0801b355
 801819c:	0801b366 	.word	0x0801b366

080181a0 <_sbrk_r>:
 80181a0:	b538      	push	{r3, r4, r5, lr}
 80181a2:	4d06      	ldr	r5, [pc, #24]	; (80181bc <_sbrk_r+0x1c>)
 80181a4:	2300      	movs	r3, #0
 80181a6:	4604      	mov	r4, r0
 80181a8:	4608      	mov	r0, r1
 80181aa:	602b      	str	r3, [r5, #0]
 80181ac:	f7e9 ffbe 	bl	800212c <_sbrk>
 80181b0:	1c43      	adds	r3, r0, #1
 80181b2:	d102      	bne.n	80181ba <_sbrk_r+0x1a>
 80181b4:	682b      	ldr	r3, [r5, #0]
 80181b6:	b103      	cbz	r3, 80181ba <_sbrk_r+0x1a>
 80181b8:	6023      	str	r3, [r4, #0]
 80181ba:	bd38      	pop	{r3, r4, r5, pc}
 80181bc:	200111c0 	.word	0x200111c0

080181c0 <__sread>:
 80181c0:	b510      	push	{r4, lr}
 80181c2:	460c      	mov	r4, r1
 80181c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181c8:	f000 f8a8 	bl	801831c <_read_r>
 80181cc:	2800      	cmp	r0, #0
 80181ce:	bfab      	itete	ge
 80181d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80181d2:	89a3      	ldrhlt	r3, [r4, #12]
 80181d4:	181b      	addge	r3, r3, r0
 80181d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80181da:	bfac      	ite	ge
 80181dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80181de:	81a3      	strhlt	r3, [r4, #12]
 80181e0:	bd10      	pop	{r4, pc}

080181e2 <__swrite>:
 80181e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181e6:	461f      	mov	r7, r3
 80181e8:	898b      	ldrh	r3, [r1, #12]
 80181ea:	05db      	lsls	r3, r3, #23
 80181ec:	4605      	mov	r5, r0
 80181ee:	460c      	mov	r4, r1
 80181f0:	4616      	mov	r6, r2
 80181f2:	d505      	bpl.n	8018200 <__swrite+0x1e>
 80181f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181f8:	2302      	movs	r3, #2
 80181fa:	2200      	movs	r2, #0
 80181fc:	f000 f870 	bl	80182e0 <_lseek_r>
 8018200:	89a3      	ldrh	r3, [r4, #12]
 8018202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018206:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801820a:	81a3      	strh	r3, [r4, #12]
 801820c:	4632      	mov	r2, r6
 801820e:	463b      	mov	r3, r7
 8018210:	4628      	mov	r0, r5
 8018212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018216:	f000 b817 	b.w	8018248 <_write_r>

0801821a <__sseek>:
 801821a:	b510      	push	{r4, lr}
 801821c:	460c      	mov	r4, r1
 801821e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018222:	f000 f85d 	bl	80182e0 <_lseek_r>
 8018226:	1c43      	adds	r3, r0, #1
 8018228:	89a3      	ldrh	r3, [r4, #12]
 801822a:	bf15      	itete	ne
 801822c:	6560      	strne	r0, [r4, #84]	; 0x54
 801822e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018232:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018236:	81a3      	strheq	r3, [r4, #12]
 8018238:	bf18      	it	ne
 801823a:	81a3      	strhne	r3, [r4, #12]
 801823c:	bd10      	pop	{r4, pc}

0801823e <__sclose>:
 801823e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018242:	f000 b81b 	b.w	801827c <_close_r>
	...

08018248 <_write_r>:
 8018248:	b538      	push	{r3, r4, r5, lr}
 801824a:	4d07      	ldr	r5, [pc, #28]	; (8018268 <_write_r+0x20>)
 801824c:	4604      	mov	r4, r0
 801824e:	4608      	mov	r0, r1
 8018250:	4611      	mov	r1, r2
 8018252:	2200      	movs	r2, #0
 8018254:	602a      	str	r2, [r5, #0]
 8018256:	461a      	mov	r2, r3
 8018258:	f7e9 ff17 	bl	800208a <_write>
 801825c:	1c43      	adds	r3, r0, #1
 801825e:	d102      	bne.n	8018266 <_write_r+0x1e>
 8018260:	682b      	ldr	r3, [r5, #0]
 8018262:	b103      	cbz	r3, 8018266 <_write_r+0x1e>
 8018264:	6023      	str	r3, [r4, #0]
 8018266:	bd38      	pop	{r3, r4, r5, pc}
 8018268:	200111c0 	.word	0x200111c0

0801826c <abort>:
 801826c:	b508      	push	{r3, lr}
 801826e:	2006      	movs	r0, #6
 8018270:	f000 f88e 	bl	8018390 <raise>
 8018274:	2001      	movs	r0, #1
 8018276:	f7e9 fee1 	bl	800203c <_exit>
	...

0801827c <_close_r>:
 801827c:	b538      	push	{r3, r4, r5, lr}
 801827e:	4d06      	ldr	r5, [pc, #24]	; (8018298 <_close_r+0x1c>)
 8018280:	2300      	movs	r3, #0
 8018282:	4604      	mov	r4, r0
 8018284:	4608      	mov	r0, r1
 8018286:	602b      	str	r3, [r5, #0]
 8018288:	f7e9 ff1b 	bl	80020c2 <_close>
 801828c:	1c43      	adds	r3, r0, #1
 801828e:	d102      	bne.n	8018296 <_close_r+0x1a>
 8018290:	682b      	ldr	r3, [r5, #0]
 8018292:	b103      	cbz	r3, 8018296 <_close_r+0x1a>
 8018294:	6023      	str	r3, [r4, #0]
 8018296:	bd38      	pop	{r3, r4, r5, pc}
 8018298:	200111c0 	.word	0x200111c0

0801829c <_fstat_r>:
 801829c:	b538      	push	{r3, r4, r5, lr}
 801829e:	4d07      	ldr	r5, [pc, #28]	; (80182bc <_fstat_r+0x20>)
 80182a0:	2300      	movs	r3, #0
 80182a2:	4604      	mov	r4, r0
 80182a4:	4608      	mov	r0, r1
 80182a6:	4611      	mov	r1, r2
 80182a8:	602b      	str	r3, [r5, #0]
 80182aa:	f7e9 ff16 	bl	80020da <_fstat>
 80182ae:	1c43      	adds	r3, r0, #1
 80182b0:	d102      	bne.n	80182b8 <_fstat_r+0x1c>
 80182b2:	682b      	ldr	r3, [r5, #0]
 80182b4:	b103      	cbz	r3, 80182b8 <_fstat_r+0x1c>
 80182b6:	6023      	str	r3, [r4, #0]
 80182b8:	bd38      	pop	{r3, r4, r5, pc}
 80182ba:	bf00      	nop
 80182bc:	200111c0 	.word	0x200111c0

080182c0 <_isatty_r>:
 80182c0:	b538      	push	{r3, r4, r5, lr}
 80182c2:	4d06      	ldr	r5, [pc, #24]	; (80182dc <_isatty_r+0x1c>)
 80182c4:	2300      	movs	r3, #0
 80182c6:	4604      	mov	r4, r0
 80182c8:	4608      	mov	r0, r1
 80182ca:	602b      	str	r3, [r5, #0]
 80182cc:	f7e9 ff15 	bl	80020fa <_isatty>
 80182d0:	1c43      	adds	r3, r0, #1
 80182d2:	d102      	bne.n	80182da <_isatty_r+0x1a>
 80182d4:	682b      	ldr	r3, [r5, #0]
 80182d6:	b103      	cbz	r3, 80182da <_isatty_r+0x1a>
 80182d8:	6023      	str	r3, [r4, #0]
 80182da:	bd38      	pop	{r3, r4, r5, pc}
 80182dc:	200111c0 	.word	0x200111c0

080182e0 <_lseek_r>:
 80182e0:	b538      	push	{r3, r4, r5, lr}
 80182e2:	4d07      	ldr	r5, [pc, #28]	; (8018300 <_lseek_r+0x20>)
 80182e4:	4604      	mov	r4, r0
 80182e6:	4608      	mov	r0, r1
 80182e8:	4611      	mov	r1, r2
 80182ea:	2200      	movs	r2, #0
 80182ec:	602a      	str	r2, [r5, #0]
 80182ee:	461a      	mov	r2, r3
 80182f0:	f7e9 ff0e 	bl	8002110 <_lseek>
 80182f4:	1c43      	adds	r3, r0, #1
 80182f6:	d102      	bne.n	80182fe <_lseek_r+0x1e>
 80182f8:	682b      	ldr	r3, [r5, #0]
 80182fa:	b103      	cbz	r3, 80182fe <_lseek_r+0x1e>
 80182fc:	6023      	str	r3, [r4, #0]
 80182fe:	bd38      	pop	{r3, r4, r5, pc}
 8018300:	200111c0 	.word	0x200111c0

08018304 <__malloc_lock>:
 8018304:	4801      	ldr	r0, [pc, #4]	; (801830c <__malloc_lock+0x8>)
 8018306:	f7ff bb0d 	b.w	8017924 <__retarget_lock_acquire_recursive>
 801830a:	bf00      	nop
 801830c:	200111c8 	.word	0x200111c8

08018310 <__malloc_unlock>:
 8018310:	4801      	ldr	r0, [pc, #4]	; (8018318 <__malloc_unlock+0x8>)
 8018312:	f7ff bb08 	b.w	8017926 <__retarget_lock_release_recursive>
 8018316:	bf00      	nop
 8018318:	200111c8 	.word	0x200111c8

0801831c <_read_r>:
 801831c:	b538      	push	{r3, r4, r5, lr}
 801831e:	4d07      	ldr	r5, [pc, #28]	; (801833c <_read_r+0x20>)
 8018320:	4604      	mov	r4, r0
 8018322:	4608      	mov	r0, r1
 8018324:	4611      	mov	r1, r2
 8018326:	2200      	movs	r2, #0
 8018328:	602a      	str	r2, [r5, #0]
 801832a:	461a      	mov	r2, r3
 801832c:	f7e9 fe90 	bl	8002050 <_read>
 8018330:	1c43      	adds	r3, r0, #1
 8018332:	d102      	bne.n	801833a <_read_r+0x1e>
 8018334:	682b      	ldr	r3, [r5, #0]
 8018336:	b103      	cbz	r3, 801833a <_read_r+0x1e>
 8018338:	6023      	str	r3, [r4, #0]
 801833a:	bd38      	pop	{r3, r4, r5, pc}
 801833c:	200111c0 	.word	0x200111c0

08018340 <_raise_r>:
 8018340:	291f      	cmp	r1, #31
 8018342:	b538      	push	{r3, r4, r5, lr}
 8018344:	4604      	mov	r4, r0
 8018346:	460d      	mov	r5, r1
 8018348:	d904      	bls.n	8018354 <_raise_r+0x14>
 801834a:	2316      	movs	r3, #22
 801834c:	6003      	str	r3, [r0, #0]
 801834e:	f04f 30ff 	mov.w	r0, #4294967295
 8018352:	bd38      	pop	{r3, r4, r5, pc}
 8018354:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018356:	b112      	cbz	r2, 801835e <_raise_r+0x1e>
 8018358:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801835c:	b94b      	cbnz	r3, 8018372 <_raise_r+0x32>
 801835e:	4620      	mov	r0, r4
 8018360:	f000 f830 	bl	80183c4 <_getpid_r>
 8018364:	462a      	mov	r2, r5
 8018366:	4601      	mov	r1, r0
 8018368:	4620      	mov	r0, r4
 801836a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801836e:	f000 b817 	b.w	80183a0 <_kill_r>
 8018372:	2b01      	cmp	r3, #1
 8018374:	d00a      	beq.n	801838c <_raise_r+0x4c>
 8018376:	1c59      	adds	r1, r3, #1
 8018378:	d103      	bne.n	8018382 <_raise_r+0x42>
 801837a:	2316      	movs	r3, #22
 801837c:	6003      	str	r3, [r0, #0]
 801837e:	2001      	movs	r0, #1
 8018380:	e7e7      	b.n	8018352 <_raise_r+0x12>
 8018382:	2400      	movs	r4, #0
 8018384:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018388:	4628      	mov	r0, r5
 801838a:	4798      	blx	r3
 801838c:	2000      	movs	r0, #0
 801838e:	e7e0      	b.n	8018352 <_raise_r+0x12>

08018390 <raise>:
 8018390:	4b02      	ldr	r3, [pc, #8]	; (801839c <raise+0xc>)
 8018392:	4601      	mov	r1, r0
 8018394:	6818      	ldr	r0, [r3, #0]
 8018396:	f7ff bfd3 	b.w	8018340 <_raise_r>
 801839a:	bf00      	nop
 801839c:	20000030 	.word	0x20000030

080183a0 <_kill_r>:
 80183a0:	b538      	push	{r3, r4, r5, lr}
 80183a2:	4d07      	ldr	r5, [pc, #28]	; (80183c0 <_kill_r+0x20>)
 80183a4:	2300      	movs	r3, #0
 80183a6:	4604      	mov	r4, r0
 80183a8:	4608      	mov	r0, r1
 80183aa:	4611      	mov	r1, r2
 80183ac:	602b      	str	r3, [r5, #0]
 80183ae:	f7e9 fe33 	bl	8002018 <_kill>
 80183b2:	1c43      	adds	r3, r0, #1
 80183b4:	d102      	bne.n	80183bc <_kill_r+0x1c>
 80183b6:	682b      	ldr	r3, [r5, #0]
 80183b8:	b103      	cbz	r3, 80183bc <_kill_r+0x1c>
 80183ba:	6023      	str	r3, [r4, #0]
 80183bc:	bd38      	pop	{r3, r4, r5, pc}
 80183be:	bf00      	nop
 80183c0:	200111c0 	.word	0x200111c0

080183c4 <_getpid_r>:
 80183c4:	f7e9 be20 	b.w	8002008 <_getpid>

080183c8 <_init>:
 80183c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183ca:	bf00      	nop
 80183cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80183ce:	bc08      	pop	{r3}
 80183d0:	469e      	mov	lr, r3
 80183d2:	4770      	bx	lr

080183d4 <_fini>:
 80183d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183d6:	bf00      	nop
 80183d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80183da:	bc08      	pop	{r3}
 80183dc:	469e      	mov	lr, r3
 80183de:	4770      	bx	lr
